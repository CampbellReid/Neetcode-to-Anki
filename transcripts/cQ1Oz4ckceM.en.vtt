WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.710 align:start position:0%
 
what<00:00:00.359><c> solve</c><00:00:00.659><c> leak</c><00:00:00.900><c> code</c><00:00:01.280><c> 167</c><00:00:02.280><c> to</c><00:00:02.639><c> some</c><00:00:02.970><c> to</c><00:00:03.270><c> so</c>

00:00:03.710 --> 00:00:03.720 align:start position:0%
what solve leak code 167 to some to so
 

00:00:03.720 --> 00:00:05.240 align:start position:0%
what solve leak code 167 to some to so
we're<00:00:03.899><c> given</c><00:00:04.230><c> an</c><00:00:04.319><c> input</c><00:00:04.799><c> array</c><00:00:04.920><c> that's</c>

00:00:05.240 --> 00:00:05.250 align:start position:0%
we're given an input array that's
 

00:00:05.250 --> 00:00:08.179 align:start position:0%
we're given an input array that's
already<00:00:05.879><c> sorted</c><00:00:06.330><c> in</c><00:00:06.509><c> ascending</c><00:00:06.629><c> order</c><00:00:07.350><c> and</c><00:00:07.649><c> we</c>

00:00:08.179 --> 00:00:08.189 align:start position:0%
already sorted in ascending order and we
 

00:00:08.189 --> 00:00:10.910 align:start position:0%
already sorted in ascending order and we
want<00:00:08.400><c> to</c><00:00:08.490><c> find</c><00:00:08.730><c> two</c><00:00:09.210><c> numbers</c><00:00:09.540><c> that</c><00:00:10.019><c> sum</c><00:00:10.559><c> up</c><00:00:10.590><c> to</c>

00:00:10.910 --> 00:00:10.920 align:start position:0%
want to find two numbers that sum up to
 

00:00:10.920 --> 00:00:13.190 align:start position:0%
want to find two numbers that sum up to
some<00:00:11.190><c> target</c><00:00:11.730><c> that</c><00:00:11.880><c> we're</c><00:00:12.000><c> also</c><00:00:12.179><c> given</c><00:00:12.870><c> so</c><00:00:13.080><c> in</c>

00:00:13.190 --> 00:00:13.200 align:start position:0%
some target that we're also given so in
 

00:00:13.200 --> 00:00:15.379 align:start position:0%
some target that we're also given so in
this<00:00:13.320><c> case</c><00:00:13.559><c> the</c><00:00:13.740><c> target</c><00:00:14.130><c> is</c><00:00:14.250><c> nine</c><00:00:14.460><c> the</c><00:00:15.120><c> two</c>

00:00:15.379 --> 00:00:15.389 align:start position:0%
this case the target is nine the two
 

00:00:15.389 --> 00:00:17.000 align:start position:0%
this case the target is nine the two
numbers<00:00:15.809><c> that</c><00:00:15.839><c> sum</c><00:00:16.230><c> up</c><00:00:16.260><c> to</c><00:00:16.500><c> nine</c><00:00:16.680><c> in</c><00:00:16.859><c> this</c>

00:00:17.000 --> 00:00:17.010 align:start position:0%
numbers that sum up to nine in this
 

00:00:17.010 --> 00:00:20.090 align:start position:0%
numbers that sum up to nine in this
array<00:00:17.340><c> are</c><00:00:17.640><c> two</c><00:00:17.940><c> and</c><00:00:18.240><c> seven</c><00:00:18.779><c> and</c><00:00:18.990><c> we</c><00:00:19.800><c> want</c><00:00:20.039><c> to</c>

00:00:20.090 --> 00:00:20.100 align:start position:0%
array are two and seven and we want to
 

00:00:20.100 --> 00:00:22.400 align:start position:0%
array are two and seven and we want to
return<00:00:20.369><c> the</c><00:00:20.580><c> indices</c><00:00:21.180><c> of</c><00:00:21.240><c> these</c><00:00:21.689><c> two</c><00:00:21.930><c> values</c>

00:00:22.400 --> 00:00:22.410 align:start position:0%
return the indices of these two values
 

00:00:22.410 --> 00:00:25.099 align:start position:0%
return the indices of these two values
but<00:00:23.010><c> the</c><00:00:23.460><c> catch</c><00:00:23.670><c> here</c><00:00:24.029><c> is</c><00:00:24.119><c> that</c><00:00:24.269><c> the</c><00:00:24.420><c> indexes</c>

00:00:25.099 --> 00:00:25.109 align:start position:0%
but the catch here is that the indexes
 

00:00:25.109 --> 00:00:28.099 align:start position:0%
but the catch here is that the indexes
are<00:00:25.550><c> one</c><00:00:26.550><c> based</c><00:00:26.880><c> they're</c><00:00:27.180><c> not</c><00:00:27.330><c> zero</c><00:00:27.630><c> based</c><00:00:27.930><c> so</c>

00:00:28.099 --> 00:00:28.109 align:start position:0%
are one based they're not zero based so
 

00:00:28.109 --> 00:00:30.560 align:start position:0%
are one based they're not zero based so
the<00:00:28.230><c> first</c><00:00:28.500><c> element</c><00:00:28.710><c> has</c><00:00:29.099><c> index</c><00:00:29.490><c> 1</c><00:00:29.760><c> the</c><00:00:30.240><c> second</c>

00:00:30.560 --> 00:00:30.570 align:start position:0%
the first element has index 1 the second
 

00:00:30.570 --> 00:00:31.730 align:start position:0%
the first element has index 1 the second
element<00:00:30.720><c> has</c><00:00:31.019><c> index</c><00:00:31.349><c> 2</c>

00:00:31.730 --> 00:00:31.740 align:start position:0%
element has index 2
 

00:00:31.740 --> 00:00:33.229 align:start position:0%
element has index 2
I<00:00:31.769><c> don't</c><00:00:32.009><c> know</c><00:00:32.070><c> why</c><00:00:32.250><c> exactly</c><00:00:32.430><c> they</c><00:00:32.880><c> did</c><00:00:32.940><c> that</c>

00:00:33.229 --> 00:00:33.239 align:start position:0%
I don't know why exactly they did that
 

00:00:33.239 --> 00:00:34.850 align:start position:0%
I don't know why exactly they did that
in<00:00:33.360><c> this</c><00:00:33.510><c> problem</c><00:00:33.750><c> it's</c><00:00:33.989><c> kind</c><00:00:34.140><c> of</c><00:00:34.170><c> weird</c><00:00:34.440><c> but</c>

00:00:34.850 --> 00:00:34.860 align:start position:0%
in this problem it's kind of weird but
 

00:00:34.860 --> 00:00:36.440 align:start position:0%
in this problem it's kind of weird but
they<00:00:34.980><c> did</c><00:00:35.160><c> for</c><00:00:35.370><c> some</c><00:00:35.550><c> reason</c><00:00:35.910><c> we're</c><00:00:36.270><c> also</c>

00:00:36.440 --> 00:00:36.450 align:start position:0%
they did for some reason we're also
 

00:00:36.450 --> 00:00:38.209 align:start position:0%
they did for some reason we're also
guaranteed<00:00:37.290><c> that</c><00:00:37.469><c> there's</c><00:00:37.680><c> exactly</c><00:00:38.010><c> one</c>

00:00:38.209 --> 00:00:38.219 align:start position:0%
guaranteed that there's exactly one
 

00:00:38.219 --> 00:00:40.400 align:start position:0%
guaranteed that there's exactly one
solution<00:00:39.000><c> and</c><00:00:39.120><c> we</c><00:00:39.390><c> can't</c><00:00:39.750><c> use</c><00:00:39.989><c> the</c><00:00:40.140><c> same</c>

00:00:40.400 --> 00:00:40.410 align:start position:0%
solution and we can't use the same
 

00:00:40.410 --> 00:00:42.979 align:start position:0%
solution and we can't use the same
number<00:00:40.800><c> twice</c><00:00:40.980><c> so</c><00:00:41.940><c> in</c><00:00:42.270><c> this</c><00:00:42.420><c> example</c><00:00:42.629><c> that</c>

00:00:42.979 --> 00:00:42.989 align:start position:0%
number twice so in this example that
 

00:00:42.989 --> 00:00:45.139 align:start position:0%
number twice so in this example that
they<00:00:43.200><c> gave</c><00:00:43.379><c> us</c><00:00:43.530><c> the</c><00:00:43.680><c> two</c><00:00:43.950><c> numbers</c><00:00:44.489><c> the</c><00:00:44.969><c> two</c>

00:00:45.139 --> 00:00:45.149 align:start position:0%
they gave us the two numbers the two
 

00:00:45.149 --> 00:00:46.970 align:start position:0%
they gave us the two numbers the two
first<00:00:45.480><c> numbers</c><00:00:45.960><c> sum</c><00:00:46.170><c> up</c><00:00:46.320><c> to</c><00:00:46.440><c> the</c><00:00:46.559><c> target</c><00:00:46.890><c> so</c>

00:00:46.970 --> 00:00:46.980 align:start position:0%
first numbers sum up to the target so
 

00:00:46.980 --> 00:00:48.920 align:start position:0%
first numbers sum up to the target so
that's<00:00:47.160><c> not</c><00:00:47.340><c> really</c><00:00:47.579><c> a</c><00:00:47.610><c> good</c><00:00:47.850><c> example</c><00:00:48.270><c> so</c><00:00:48.809><c> I'm</c>

00:00:48.920 --> 00:00:48.930 align:start position:0%
that's not really a good example so I'm
 

00:00:48.930 --> 00:00:50.630 align:start position:0%
that's not really a good example so I'm
gonna<00:00:49.079><c> look</c><00:00:49.260><c> at</c><00:00:49.379><c> my</c><00:00:49.620><c> example</c><00:00:49.770><c> over</c><00:00:50.309><c> here</c><00:00:50.460><c> that</c>

00:00:50.630 --> 00:00:50.640 align:start position:0%
gonna look at my example over here that
 

00:00:50.640 --> 00:00:53.240 align:start position:0%
gonna look at my example over here that
I<00:00:50.670><c> drew</c><00:00:51.149><c> so</c><00:00:51.660><c> the</c><00:00:51.809><c> first</c><00:00:52.140><c> idea</c><00:00:52.379><c> that</c><00:00:52.800><c> might</c><00:00:53.010><c> come</c>

00:00:53.240 --> 00:00:53.250 align:start position:0%
I drew so the first idea that might come
 

00:00:53.250 --> 00:00:55.250 align:start position:0%
I drew so the first idea that might come
to<00:00:53.340><c> your</c><00:00:53.430><c> mind</c><00:00:53.699><c> is</c><00:00:53.910><c> just</c><00:00:54.300><c> look</c><00:00:54.629><c> at</c><00:00:54.780><c> every</c>

00:00:55.250 --> 00:00:55.260 align:start position:0%
to your mind is just look at every
 

00:00:55.260 --> 00:00:57.709 align:start position:0%
to your mind is just look at every
single<00:00:55.680><c> combination</c><00:00:55.949><c> of</c><00:00:56.520><c> two</c><00:00:56.730><c> numbers</c><00:00:57.210><c> so</c>

00:00:57.709 --> 00:00:57.719 align:start position:0%
single combination of two numbers so
 

00:00:57.719 --> 00:00:59.090 align:start position:0%
single combination of two numbers so
let's<00:00:57.989><c> say</c><00:00:58.140><c> we're</c><00:00:58.289><c> starting</c><00:00:58.500><c> at</c><00:00:58.800><c> the</c><00:00:58.920><c> first</c>

00:00:59.090 --> 00:00:59.100 align:start position:0%
let's say we're starting at the first
 

00:00:59.100 --> 00:01:01.430 align:start position:0%
let's say we're starting at the first
number<00:00:59.550><c> one</c><00:00:59.820><c> let's</c><00:01:00.390><c> look</c><00:01:00.600><c> at</c><00:01:00.750><c> every</c><00:01:01.199><c> number</c>

00:01:01.430 --> 00:01:01.440 align:start position:0%
number one let's look at every number
 

00:01:01.440 --> 00:01:03.619 align:start position:0%
number one let's look at every number
combined<00:01:02.129><c> with</c><00:01:02.340><c> one</c><00:01:02.579><c> and</c><00:01:02.730><c> see</c><00:01:02.969><c> if</c><00:01:03.090><c> it</c><00:01:03.239><c> can</c><00:01:03.329><c> sum</c>

00:01:03.619 --> 00:01:03.629 align:start position:0%
combined with one and see if it can sum
 

00:01:03.629 --> 00:01:06.020 align:start position:0%
combined with one and see if it can sum
up<00:01:03.660><c> to</c><00:01:03.930><c> the</c><00:01:04.019><c> target</c><00:01:04.229><c> nine</c><00:01:04.589><c> so</c><00:01:05.220><c> first</c><00:01:05.580><c> we</c><00:01:05.820><c> check</c>

00:01:06.020 --> 00:01:06.030 align:start position:0%
up to the target nine so first we check
 

00:01:06.030 --> 00:01:09.920 align:start position:0%
up to the target nine so first we check
1<00:01:06.360><c> plus</c><00:01:06.659><c> 3</c><00:01:07.020><c> that</c><00:01:07.740><c> is</c><00:01:08.010><c> 4</c><00:01:08.220><c> so</c><00:01:08.790><c> it's</c><00:01:08.909><c> not</c><00:01:09.090><c> 9</c><00:01:09.330><c> then</c><00:01:09.900><c> we</c>

00:01:09.920 --> 00:01:09.930 align:start position:0%
1 plus 3 that is 4 so it's not 9 then we
 

00:01:09.930 --> 00:01:13.280 align:start position:0%
1 plus 3 that is 4 so it's not 9 then we
check<00:01:10.320><c> 1</c><00:01:10.560><c> plus</c><00:01:10.860><c> 4</c><00:01:11.220><c> that's</c><00:01:11.610><c> 5</c><00:01:12.030><c> then</c><00:01:12.780><c> we</c><00:01:12.960><c> check</c><00:01:13.140><c> 1</c>

00:01:13.280 --> 00:01:13.290 align:start position:0%
check 1 plus 4 that's 5 then we check 1
 

00:01:13.290 --> 00:01:17.660 align:start position:0%
check 1 plus 4 that's 5 then we check 1
plus<00:01:13.500><c> 5</c><00:01:13.799><c> that's</c><00:01:14.189><c> 6</c><00:01:14.549><c> 1</c><00:01:14.760><c> plus</c><00:01:15.240><c> 7</c><00:01:15.720><c> is</c><00:01:15.930><c> 8</c><00:01:16.170><c> and</c><00:01:16.500><c> 1</c><00:01:17.310><c> plus</c>

00:01:17.660 --> 00:01:17.670 align:start position:0%
plus 5 that's 6 1 plus 7 is 8 and 1 plus
 

00:01:17.670 --> 00:01:20.840 align:start position:0%
plus 5 that's 6 1 plus 7 is 8 and 1 plus
10<00:01:18.299><c> is</c><00:01:18.630><c> 11</c><00:01:19.320><c> so</c><00:01:19.710><c> now</c><00:01:20.009><c> we've</c><00:01:20.250><c> gotten</c><00:01:20.610><c> to</c><00:01:20.729><c> the</c>

00:01:20.840 --> 00:01:20.850 align:start position:0%
10 is 11 so now we've gotten to the
 

00:01:20.850 --> 00:01:23.690 align:start position:0%
10 is 11 so now we've gotten to the
point<00:01:21.090><c> where</c><00:01:21.210><c> at</c><00:01:21.450><c> 1</c><00:01:21.840><c> plus</c><00:01:22.290><c> 10</c><00:01:22.799><c> but</c><00:01:23.369><c> the</c>

00:01:23.690 --> 00:01:23.700 align:start position:0%
point where at 1 plus 10 but the
 

00:01:23.700 --> 00:01:25.789 align:start position:0%
point where at 1 plus 10 but the
interesting<00:01:24.330><c> thing</c><00:01:24.390><c> about</c><00:01:24.689><c> this</c><00:01:25.200><c> is</c><00:01:25.380><c> this</c><00:01:25.619><c> is</c>

00:01:25.789 --> 00:01:25.799 align:start position:0%
interesting thing about this is this is
 

00:01:25.799 --> 00:01:28.340 align:start position:0%
interesting thing about this is this is
the<00:01:25.979><c> first</c><00:01:26.340><c> combination</c><00:01:27.240><c> that's</c><00:01:27.630><c> greater</c>

00:01:28.340 --> 00:01:28.350 align:start position:0%
the first combination that's greater
 

00:01:28.350 --> 00:01:31.460 align:start position:0%
the first combination that's greater
than<00:01:28.530><c> our</c><00:01:29.040><c> target</c><00:01:29.610><c> 9</c><00:01:29.850><c> so</c><00:01:30.420><c> do</c><00:01:30.659><c> we</c><00:01:30.810><c> have</c><00:01:30.840><c> to</c><00:01:30.990><c> keep</c>

00:01:31.460 --> 00:01:31.470 align:start position:0%
than our target 9 so do we have to keep
 

00:01:31.470 --> 00:01:33.980 align:start position:0%
than our target 9 so do we have to keep
looking<00:01:31.740><c> at</c><00:01:32.189><c> the</c><00:01:32.310><c> next</c><00:01:32.640><c> element</c><00:01:32.939><c> since</c><00:01:33.810><c> we</c>

00:01:33.980 --> 00:01:33.990 align:start position:0%
looking at the next element since we
 

00:01:33.990 --> 00:01:36.950 align:start position:0%
looking at the next element since we
know<00:01:34.439><c> the</c><00:01:34.740><c> array</c><00:01:35.100><c> is</c><00:01:35.340><c> already</c><00:01:35.700><c> sorted</c><00:01:36.119><c> there's</c>

00:01:36.950 --> 00:01:36.960 align:start position:0%
know the array is already sorted there's
 

00:01:36.960 --> 00:01:39.469 align:start position:0%
know the array is already sorted there's
no<00:01:37.350><c> number</c><00:01:37.950><c> that's</c><00:01:38.130><c> gonna</c><00:01:38.280><c> come</c><00:01:38.579><c> after</c><00:01:38.759><c> 10</c>

00:01:39.469 --> 00:01:39.479 align:start position:0%
no number that's gonna come after 10
 

00:01:39.479 --> 00:01:42.109 align:start position:0%
no number that's gonna come after 10
that's<00:01:39.780><c> gonna</c><00:01:39.930><c> be</c><00:01:40.590><c> added</c><00:01:41.070><c> to</c><00:01:41.250><c> 1</c><00:01:41.520><c> that</c><00:01:41.939><c> could</c>

00:01:42.109 --> 00:01:42.119 align:start position:0%
that's gonna be added to 1 that could
 

00:01:42.119 --> 00:01:45.530 align:start position:0%
that's gonna be added to 1 that could
possibly<00:01:42.810><c> some</c><00:01:43.259><c> to</c><00:01:43.680><c> the</c><00:01:43.799><c> target</c><00:01:44.220><c> 9</c><00:01:44.430><c> so</c><00:01:44.850><c> since</c><00:01:45.240><c> 1</c>

00:01:45.530 --> 00:01:45.540 align:start position:0%
possibly some to the target 9 so since 1
 

00:01:45.540 --> 00:01:47.480 align:start position:0%
possibly some to the target 9 so since 1
plus<00:01:45.810><c> 10</c><00:01:46.110><c> is</c><00:01:46.290><c> already</c><00:01:46.770><c> greater</c><00:01:47.130><c> than</c><00:01:47.399><c> the</c>

00:01:47.480 --> 00:01:47.490 align:start position:0%
plus 10 is already greater than the
 

00:01:47.490 --> 00:01:49.219 align:start position:0%
plus 10 is already greater than the
target<00:01:47.909><c> we</c><00:01:48.000><c> don't</c><00:01:48.030><c> have</c><00:01:48.570><c> to</c><00:01:48.720><c> look</c><00:01:48.930><c> at</c><00:01:49.079><c> the</c>

00:01:49.219 --> 00:01:49.229 align:start position:0%
target we don't have to look at the
 

00:01:49.229 --> 00:01:50.929 align:start position:0%
target we don't have to look at the
remainder<00:01:49.890><c> of</c><00:01:49.920><c> the</c><00:01:50.130><c> array</c><00:01:50.399><c> because</c><00:01:50.610><c> there's</c>

00:01:50.929 --> 00:01:50.939 align:start position:0%
remainder of the array because there's
 

00:01:50.939 --> 00:01:53.719 align:start position:0%
remainder of the array because there's
no<00:01:51.299><c> number</c><00:01:51.600><c> that</c><00:01:51.990><c> could</c><00:01:52.409><c> possibly</c><00:01:52.920><c> come</c><00:01:53.250><c> after</c>

00:01:53.719 --> 00:01:53.729 align:start position:0%
no number that could possibly come after
 

00:01:53.729 --> 00:01:56.030 align:start position:0%
no number that could possibly come after
10<00:01:54.060><c> added</c><00:01:54.540><c> to</c><00:01:54.689><c> 1</c><00:01:54.899><c> that</c><00:01:55.079><c> would</c><00:01:55.200><c> ever</c><00:01:55.470><c> be</c><00:01:55.740><c> the</c>

00:01:56.030 --> 00:01:56.040 align:start position:0%
10 added to 1 that would ever be the
 

00:01:56.040 --> 00:01:57.950 align:start position:0%
10 added to 1 that would ever be the
target<00:01:56.430><c> every</c><00:01:56.850><c> number</c><00:01:57.060><c> is</c><00:01:57.240><c> gonna</c><00:01:57.420><c> be</c><00:01:57.570><c> greater</c>

00:01:57.950 --> 00:01:57.960 align:start position:0%
target every number is gonna be greater
 

00:01:57.960 --> 00:01:59.420 align:start position:0%
target every number is gonna be greater
than<00:01:58.170><c> the</c><00:01:58.320><c> target</c><00:01:58.500><c> so</c><00:01:58.740><c> we</c><00:01:58.829><c> don't</c><00:01:59.159><c> have</c><00:01:59.280><c> to</c>

00:01:59.420 --> 00:01:59.430 align:start position:0%
than the target so we don't have to
 

00:01:59.430 --> 00:02:01.370 align:start position:0%
than the target so we don't have to
consider<00:01:59.790><c> 11</c><00:02:00.630><c> anymore</c>

00:02:01.370 --> 00:02:01.380 align:start position:0%
consider 11 anymore
 

00:02:01.380 --> 00:02:03.319 align:start position:0%
consider 11 anymore
so<00:02:02.009><c> we</c><00:02:02.159><c> basically</c><00:02:02.640><c> remove</c><00:02:03.060><c> it</c><00:02:03.210><c> from</c>

00:02:03.319 --> 00:02:03.329 align:start position:0%
so we basically remove it from
 

00:02:03.329 --> 00:02:05.539 align:start position:0%
so we basically remove it from
consideration<00:02:04.110><c> from</c><00:02:04.350><c> our</c><00:02:04.560><c> array</c><00:02:04.860><c> so</c><00:02:05.399><c> we</c>

00:02:05.539 --> 00:02:05.549 align:start position:0%
consideration from our array so we
 

00:02:05.549 --> 00:02:07.850 align:start position:0%
consideration from our array so we
didn't<00:02:05.909><c> find</c><00:02:06.210><c> the</c><00:02:06.689><c> two</c><00:02:06.869><c> numbers</c><00:02:06.899><c> that</c><00:02:07.350><c> sum</c><00:02:07.649><c> to</c>

00:02:07.850 --> 00:02:07.860 align:start position:0%
didn't find the two numbers that sum to
 

00:02:07.860 --> 00:02:09.919 align:start position:0%
didn't find the two numbers that sum to
the<00:02:08.099><c> target</c><00:02:08.459><c> so</c><00:02:08.670><c> now</c><00:02:08.910><c> let's</c><00:02:09.179><c> try</c><00:02:09.390><c> if</c><00:02:09.750><c> there's</c>

00:02:09.919 --> 00:02:09.929 align:start position:0%
the target so now let's try if there's
 

00:02:09.929 --> 00:02:11.960 align:start position:0%
the target so now let's try if there's
any<00:02:10.170><c> combination</c><00:02:10.890><c> with</c><00:02:11.069><c> 3</c><00:02:11.550><c> that</c><00:02:11.580><c> could</c>

00:02:11.960 --> 00:02:11.970 align:start position:0%
any combination with 3 that could
 

00:02:11.970 --> 00:02:13.729 align:start position:0%
any combination with 3 that could
possibly<00:02:12.450><c> some</c><00:02:12.840><c> 2</c>

00:02:13.729 --> 00:02:13.739 align:start position:0%
possibly some 2
 

00:02:13.739 --> 00:02:17.899 align:start position:0%
possibly some 2
so<00:02:14.040><c> we</c><00:02:14.159><c> start</c><00:02:14.519><c> at</c><00:02:14.700><c> 4</c><00:02:15.060><c> so</c><00:02:15.329><c> 3</c><00:02:15.629><c> plus</c><00:02:15.870><c> 4</c><00:02:16.230><c> is</c><00:02:16.260><c> 7</c><00:02:16.650><c> 3</c><00:02:17.010><c> plus</c>

00:02:17.899 --> 00:02:17.909 align:start position:0%
so we start at 4 so 3 plus 4 is 7 3 plus
 

00:02:17.909 --> 00:02:22.759 align:start position:0%
so we start at 4 so 3 plus 4 is 7 3 plus
5<00:02:18.299><c> is</c><00:02:18.599><c> 8</c><00:02:19.079><c> 3</c><00:02:19.950><c> plus</c><00:02:20.189><c> 7</c><00:02:20.609><c> is</c><00:02:20.999><c> 10</c><00:02:21.569><c> so</c><00:02:22.109><c> this</c><00:02:22.409><c> is</c><00:02:22.469><c> the</c>

00:02:22.759 --> 00:02:22.769 align:start position:0%
5 is 8 3 plus 7 is 10 so this is the
 

00:02:22.769 --> 00:02:26.959 align:start position:0%
5 is 8 3 plus 7 is 10 so this is the
first<00:02:23.129><c> combination</c><00:02:23.609><c> 3</c><00:02:24.420><c> plus</c><00:02:24.950><c> 7</c><00:02:25.950><c> which</c><00:02:26.459><c> is</c><00:02:26.519><c> 10</c>

00:02:26.959 --> 00:02:26.969 align:start position:0%
first combination 3 plus 7 which is 10
 

00:02:26.969 --> 00:02:30.830 align:start position:0%
first combination 3 plus 7 which is 10
is<00:02:27.209><c> greater</c><00:02:27.719><c> than</c><00:02:28.079><c> the</c><00:02:28.889><c> target</c><00:02:29.129><c> 9</c><00:02:29.670><c> so</c><00:02:30.269><c> we</c><00:02:30.420><c> don't</c>

00:02:30.830 --> 00:02:30.840 align:start position:0%
is greater than the target 9 so we don't
 

00:02:30.840 --> 00:02:32.929 align:start position:0%
is greater than the target 9 so we don't
have<00:02:31.049><c> to</c><00:02:31.230><c> look</c><00:02:31.439><c> at</c><00:02:31.590><c> any</c><00:02:31.889><c> number</c><00:02:32.370><c> that</c><00:02:32.549><c> comes</c>

00:02:32.929 --> 00:02:32.939 align:start position:0%
have to look at any number that comes
 

00:02:32.939 --> 00:02:35.539 align:start position:0%
have to look at any number that comes
after<00:02:33.599><c> 7</c><00:02:34.019><c> because</c><00:02:34.319><c> we</c><00:02:34.469><c> know</c><00:02:34.829><c> that</c><00:02:35.129><c> it</c><00:02:35.400><c> will</c>

00:02:35.539 --> 00:02:35.549 align:start position:0%
after 7 because we know that it will
 

00:02:35.549 --> 00:02:37.970 align:start position:0%
after 7 because we know that it will
never<00:02:35.909><c> equal</c><00:02:36.299><c> the</c><00:02:36.659><c> target</c><00:02:37.109><c> so</c><00:02:37.500><c> we</c><00:02:37.680><c> can</c>

00:02:37.970 --> 00:02:37.980 align:start position:0%
never equal the target so we can
 

00:02:37.980 --> 00:02:40.490 align:start position:0%
never equal the target so we can
basically<00:02:38.219><c> say</c><00:02:38.819><c> well</c><00:02:39.090><c> 10</c><00:02:39.419><c> is</c><00:02:39.629><c> removed</c><00:02:40.260><c> from</c>

00:02:40.490 --> 00:02:40.500 align:start position:0%
basically say well 10 is removed from
 

00:02:40.500 --> 00:02:42.530 align:start position:0%
basically say well 10 is removed from
consideration<00:02:41.129><c> we</c><00:02:41.700><c> don't</c><00:02:41.939><c> even</c><00:02:42.090><c> have</c><00:02:42.209><c> to</c><00:02:42.329><c> look</c>

00:02:42.530 --> 00:02:42.540 align:start position:0%
consideration we don't even have to look
 

00:02:42.540 --> 00:02:44.780 align:start position:0%
consideration we don't even have to look
at<00:02:42.689><c> it</c><00:02:42.870><c> so</c><00:02:43.200><c> we</c><00:02:43.349><c> couldn't</c><00:02:43.680><c> find</c><00:02:44.010><c> a</c><00:02:44.159><c> combination</c>

00:02:44.780 --> 00:02:44.790 align:start position:0%
at it so we couldn't find a combination
 

00:02:44.790 --> 00:02:47.209 align:start position:0%
at it so we couldn't find a combination
with<00:02:45.090><c> 3</c><00:02:45.569><c> that</c><00:02:45.599><c> could</c><00:02:45.959><c> sum</c><00:02:46.200><c> to</c><00:02:46.379><c> the</c><00:02:46.469><c> target</c><00:02:46.829><c> 9</c><00:02:46.980><c> so</c>

00:02:47.209 --> 00:02:47.219 align:start position:0%
with 3 that could sum to the target 9 so
 

00:02:47.219 --> 00:02:49.490 align:start position:0%
with 3 that could sum to the target 9 so
now<00:02:47.400><c> let's</c><00:02:47.609><c> check</c><00:02:47.819><c> the</c><00:02:47.879><c> next</c><00:02:48.239><c> number</c><00:02:48.569><c> for</c><00:02:48.959><c> the</c>

00:02:49.490 --> 00:02:49.500 align:start position:0%
now let's check the next number for the
 

00:02:49.500 --> 00:02:53.149 align:start position:0%
now let's check the next number for the
first<00:02:49.739><c> number</c><00:02:50.159><c> after</c><00:02:50.340><c> 4</c><00:02:50.819><c> is</c><00:02:50.939><c> 5</c><00:02:51.299><c> in</c><00:02:51.659><c> this</c><00:02:52.169><c> case</c><00:02:52.230><c> 4</c>

00:02:53.149 --> 00:02:53.159 align:start position:0%
first number after 4 is 5 in this case 4
 

00:02:53.159 --> 00:02:56.809 align:start position:0%
first number after 4 is 5 in this case 4
plus<00:02:53.579><c> 5</c><00:02:53.939><c> is</c><00:02:54.269><c> exactly</c><00:02:55.199><c> our</c><00:02:55.409><c> target</c><00:02:55.949><c> 9</c><00:02:56.370><c> so</c><00:02:56.699><c> we</c>

00:02:56.809 --> 00:02:56.819 align:start position:0%
plus 5 is exactly our target 9 so we
 

00:02:56.819 --> 00:02:59.030 align:start position:0%
plus 5 is exactly our target 9 so we
found<00:02:57.209><c> the</c><00:02:57.389><c> solution</c><00:02:57.959><c> of</c><00:02:58.169><c> course</c><00:02:58.349><c> since</c><00:02:58.919><c> we</c>

00:02:59.030 --> 00:02:59.040 align:start position:0%
found the solution of course since we
 

00:02:59.040 --> 00:03:00.800 align:start position:0%
found the solution of course since we
found<00:02:59.310><c> the</c><00:02:59.489><c> solution</c><00:02:59.969><c> we</c><00:03:00.090><c> don't</c><00:03:00.120><c> have</c><00:03:00.689><c> to</c>

00:03:00.800 --> 00:03:00.810 align:start position:0%
found the solution we don't have to
 

00:03:00.810 --> 00:03:02.929 align:start position:0%
found the solution we don't have to
consider<00:03:01.199><c> any</c><00:03:01.469><c> element</c><00:03:02.189><c> that</c><00:03:02.280><c> comes</c><00:03:02.430><c> after</c><00:03:02.849><c> it</c>

00:03:02.929 --> 00:03:02.939 align:start position:0%
consider any element that comes after it
 

00:03:02.939 --> 00:03:05.300 align:start position:0%
consider any element that comes after it
so<00:03:03.120><c> in</c><00:03:03.269><c> this</c><00:03:03.419><c> case</c><00:03:03.750><c> 7</c><00:03:04.620><c> is</c><00:03:04.739><c> removed</c><00:03:05.099><c> from</c>

00:03:05.300 --> 00:03:05.310 align:start position:0%
so in this case 7 is removed from
 

00:03:05.310 --> 00:03:07.129 align:start position:0%
so in this case 7 is removed from
consideration<00:03:05.909><c> and</c><00:03:06.269><c> we</c><00:03:06.629><c> can</c><00:03:06.780><c> return</c><00:03:06.930><c> our</c>

00:03:07.129 --> 00:03:07.139 align:start position:0%
consideration and we can return our
 

00:03:07.139 --> 00:03:10.399 align:start position:0%
consideration and we can return our
solution<00:03:07.859><c> and</c><00:03:08.069><c> remember</c><00:03:08.879><c> that</c><00:03:09.239><c> these</c><00:03:09.480><c> indices</c>

00:03:10.399 --> 00:03:10.409 align:start position:0%
solution and remember that these indices
 

00:03:10.409 --> 00:03:13.189 align:start position:0%
solution and remember that these indices
are<00:03:10.739><c> based</c><00:03:11.040><c> on</c><00:03:11.250><c> 1</c><00:03:11.519><c> so</c><00:03:11.819><c> the</c><00:03:12.090><c> first</c><00:03:12.389><c> index</c><00:03:12.659><c> is</c><00:03:12.959><c> 1</c>

00:03:13.189 --> 00:03:13.199 align:start position:0%
are based on 1 so the first index is 1
 

00:03:13.199 --> 00:03:16.520 align:start position:0%
are based on 1 so the first index is 1
the<00:03:13.409><c> second</c><00:03:13.739><c> index</c><00:03:13.980><c> is</c><00:03:14.159><c> 2</c><00:03:14.400><c> 3</c><00:03:15.060><c> &amp;</c><00:03:15.419><c> 4</c><00:03:15.870><c> so</c><00:03:16.349><c> the</c>

00:03:16.520 --> 00:03:16.530 align:start position:0%
the second index is 2 3 &amp; 4 so the
 

00:03:16.530 --> 00:03:17.719 align:start position:0%
the second index is 2 3 &amp; 4 so the
indices<00:03:16.949><c> that</c><00:03:17.159><c> we're</c><00:03:17.250><c> going</c><00:03:17.340><c> to</c><00:03:17.400><c> be</c><00:03:17.549><c> returning</c>

00:03:17.719 --> 00:03:17.729 align:start position:0%
indices that we're going to be returning
 

00:03:17.729 --> 00:03:24.020 align:start position:0%
indices that we're going to be returning
are<00:03:18.359><c> 3</c><00:03:19.139><c> &amp;</c><00:03:19.409><c> 4</c><00:03:21.379><c> so</c><00:03:22.379><c> since</c><00:03:22.829><c> this</c><00:03:23.069><c> is</c><00:03:23.129><c> a</c><00:03:23.280><c> brute</c><00:03:23.669><c> force</c>

00:03:24.020 --> 00:03:24.030 align:start position:0%
are 3 &amp; 4 so since this is a brute force
 

00:03:24.030 --> 00:03:25.520 align:start position:0%
are 3 &amp; 4 so since this is a brute force
solution<00:03:24.269><c> and</c><00:03:24.629><c> we're</c><00:03:24.720><c> having</c><00:03:24.900><c> to</c><00:03:25.109><c> iterate</c>

00:03:25.520 --> 00:03:25.530 align:start position:0%
solution and we're having to iterate
 

00:03:25.530 --> 00:03:27.499 align:start position:0%
solution and we're having to iterate
through<00:03:25.560><c> the</c><00:03:25.919><c> entire</c><00:03:26.400><c> array</c><00:03:26.879><c> which</c><00:03:27.090><c> is</c><00:03:27.239><c> length</c>

00:03:27.499 --> 00:03:27.509 align:start position:0%
through the entire array which is length
 

00:03:27.509 --> 00:03:30.050 align:start position:0%
through the entire array which is length
N<00:03:27.750><c> and</c><00:03:28.259><c> we're</c><00:03:28.949><c> going</c><00:03:29.069><c> to</c><00:03:29.099><c> potentially</c><00:03:29.759><c> do</c><00:03:29.909><c> that</c>

00:03:30.050 --> 00:03:30.060 align:start position:0%
N and we're going to potentially do that
 

00:03:30.060 --> 00:03:32.420 align:start position:0%
N and we're going to potentially do that
in<00:03:30.209><c> the</c><00:03:30.389><c> worst</c><00:03:30.659><c> case</c><00:03:31.019><c> n</c><00:03:31.259><c> times</c><00:03:31.829><c> for</c><00:03:32.159><c> each</c>

00:03:32.420 --> 00:03:32.430 align:start position:0%
in the worst case n times for each
 

00:03:32.430 --> 00:03:34.580 align:start position:0%
in the worst case n times for each
number<00:03:32.759><c> in</c><00:03:33.090><c> the</c><00:03:33.120><c> array</c><00:03:33.419><c> so</c><00:03:33.900><c> then</c><00:03:34.169><c> that</c><00:03:34.349><c> means</c>

00:03:34.580 --> 00:03:34.590 align:start position:0%
number in the array so then that means
 

00:03:34.590 --> 00:03:37.729 align:start position:0%
number in the array so then that means
our<00:03:34.939><c> worst</c><00:03:35.939><c> case</c><00:03:36.150><c> time</c><00:03:36.449><c> complexity</c><00:03:37.019><c> is</c><00:03:37.199><c> Big</c><00:03:37.560><c> O</c>

00:03:37.729 --> 00:03:37.739 align:start position:0%
our worst case time complexity is Big O
 

00:03:37.739 --> 00:03:41.330 align:start position:0%
our worst case time complexity is Big O
of<00:03:37.949><c> N</c><00:03:38.099><c> squared</c><00:03:39.019><c> so</c><00:03:40.019><c> it's</c><00:03:40.169><c> not</c><00:03:40.349><c> very</c><00:03:40.709><c> efficient</c>

00:03:41.330 --> 00:03:41.340 align:start position:0%
of N squared so it's not very efficient
 

00:03:41.340 --> 00:03:43.699 align:start position:0%
of N squared so it's not very efficient
but<00:03:41.639><c> can</c><00:03:41.939><c> we</c><00:03:42.120><c> use</c><00:03:42.150><c> the</c><00:03:42.629><c> fact</c><00:03:42.959><c> that</c><00:03:43.109><c> this</c><00:03:43.349><c> array</c>

00:03:43.699 --> 00:03:43.709 align:start position:0%
but can we use the fact that this array
 

00:03:43.709 --> 00:03:45.890 align:start position:0%
but can we use the fact that this array
is<00:03:43.769><c> sorted</c><00:03:44.220><c> to</c><00:03:44.579><c> our</c><00:03:44.699><c> advantage</c><00:03:45.090><c> let's</c><00:03:45.479><c> look</c><00:03:45.780><c> at</c>

00:03:45.890 --> 00:03:45.900 align:start position:0%
is sorted to our advantage let's look at
 

00:03:45.900 --> 00:03:47.599 align:start position:0%
is sorted to our advantage let's look at
the<00:03:46.019><c> picture</c><00:03:46.379><c> we</c><00:03:46.530><c> just</c><00:03:46.739><c> drew</c><00:03:46.919><c> first</c><00:03:47.280><c> we</c>

00:03:47.599 --> 00:03:47.609 align:start position:0%
the picture we just drew first we
 

00:03:47.609 --> 00:03:50.390 align:start position:0%
the picture we just drew first we
eliminated<00:03:48.419><c> 11</c><00:03:49.049><c> from</c><00:03:49.229><c> consideration</c><00:03:50.040><c> in</c><00:03:50.220><c> the</c>

00:03:50.390 --> 00:03:50.400 align:start position:0%
eliminated 11 from consideration in the
 

00:03:50.400 --> 00:03:53.479 align:start position:0%
eliminated 11 from consideration in the
array<00:03:50.669><c> then</c><00:03:51.299><c> we</c><00:03:51.569><c> eliminated</c><00:03:52.259><c> 10</c><00:03:52.650><c> then</c><00:03:53.459><c> we</c>

00:03:53.479 --> 00:03:53.489 align:start position:0%
array then we eliminated 10 then we
 

00:03:53.489 --> 00:03:56.959 align:start position:0%
array then we eliminated 10 then we
eliminated<00:03:54.419><c> 7</c><00:03:55.069><c> so</c><00:03:56.069><c> we're</c><00:03:56.280><c> basically</c>

00:03:56.959 --> 00:03:56.969 align:start position:0%
eliminated 7 so we're basically
 

00:03:56.969 --> 00:03:59.569 align:start position:0%
eliminated 7 so we're basically
eliminating<00:03:57.750><c> elements</c><00:03:58.290><c> from</c><00:03:58.590><c> the</c><00:03:58.799><c> end</c><00:03:59.009><c> of</c><00:03:59.489><c> the</c>

00:03:59.569 --> 00:03:59.579 align:start position:0%
eliminating elements from the end of the
 

00:03:59.579 --> 00:04:02.929 align:start position:0%
eliminating elements from the end of the
array<00:04:00.120><c> in</c><00:04:00.389><c> reverse</c><00:04:01.139><c> order</c><00:04:01.560><c> can</c><00:04:02.310><c> we</c><00:04:02.489><c> use</c><00:04:02.759><c> this</c>

00:04:02.929 --> 00:04:02.939 align:start position:0%
array in reverse order can we use this
 

00:04:02.939 --> 00:04:04.699 align:start position:0%
array in reverse order can we use this
to<00:04:03.000><c> our</c><00:04:03.180><c> advantage</c><00:04:03.239><c> this</c><00:04:03.870><c> is</c><00:04:03.930><c> basically</c><00:04:04.469><c> the</c>

00:04:04.699 --> 00:04:04.709 align:start position:0%
to our advantage this is basically the
 

00:04:04.709 --> 00:04:06.949 align:start position:0%
to our advantage this is basically the
intuition<00:04:05.489><c> remember</c><00:04:06.060><c> this</c><00:04:06.180><c> array</c><00:04:06.540><c> is</c><00:04:06.599><c> sorted</c>

00:04:06.949 --> 00:04:06.959 align:start position:0%
intuition remember this array is sorted
 

00:04:06.959 --> 00:04:09.499 align:start position:0%
intuition remember this array is sorted
we<00:04:07.349><c> can</c><00:04:07.620><c> use</c><00:04:07.829><c> that</c><00:04:08.040><c> to</c><00:04:08.099><c> our</c><00:04:08.280><c> advantage</c><00:04:08.509><c> so</c>

00:04:09.499 --> 00:04:09.509 align:start position:0%
we can use that to our advantage so
 

00:04:09.509 --> 00:04:11.479 align:start position:0%
we can use that to our advantage so
let's<00:04:09.750><c> try</c><00:04:09.959><c> the</c><00:04:10.019><c> exact</c><00:04:10.469><c> same</c><00:04:10.709><c> problem</c><00:04:11.280><c> with</c><00:04:11.459><c> a</c>

00:04:11.479 --> 00:04:11.489 align:start position:0%
let's try the exact same problem with a
 

00:04:11.489 --> 00:04:13.580 align:start position:0%
let's try the exact same problem with a
slightly<00:04:11.879><c> different</c><00:04:12.299><c> algorithm</c><00:04:13.109><c> using</c><00:04:13.469><c> what</c>

00:04:13.580 --> 00:04:13.590 align:start position:0%
slightly different algorithm using what
 

00:04:13.590 --> 00:04:14.360 align:start position:0%
slightly different algorithm using what
we<00:04:13.709><c> just</c><00:04:13.919><c> learned</c>

00:04:14.360 --> 00:04:14.370 align:start position:0%
we just learned
 

00:04:14.370 --> 00:04:16.249 align:start position:0%
we just learned
our<00:04:14.459><c> target</c><00:04:14.909><c> is</c><00:04:15.030><c> still</c><00:04:15.269><c> 9</c><00:04:15.569><c> since</c><00:04:16.019><c> we're</c>

00:04:16.249 --> 00:04:16.259 align:start position:0%
our target is still 9 since we're
 

00:04:16.259 --> 00:04:18.409 align:start position:0%
our target is still 9 since we're
eliminating<00:04:16.590><c> elements</c><00:04:17.489><c> from</c><00:04:17.639><c> the</c><00:04:17.759><c> end</c><00:04:17.969><c> of</c><00:04:18.299><c> the</c>

00:04:18.409 --> 00:04:18.419 align:start position:0%
eliminating elements from the end of the
 

00:04:18.419 --> 00:04:20.390 align:start position:0%
eliminating elements from the end of the
array<00:04:18.659><c> we</c><00:04:18.840><c> can</c><00:04:18.870><c> use</c><00:04:19.169><c> two</c><00:04:19.530><c> pointers</c><00:04:20.070><c> one</c>

00:04:20.390 --> 00:04:20.400 align:start position:0%
array we can use two pointers one
 

00:04:20.400 --> 00:04:22.250 align:start position:0%
array we can use two pointers one
pointer<00:04:20.849><c> is</c><00:04:20.940><c> going</c><00:04:21.060><c> to</c><00:04:21.120><c> be</c><00:04:21.269><c> at</c><00:04:21.510><c> the</c><00:04:21.870><c> beginning</c>

00:04:22.250 --> 00:04:22.260 align:start position:0%
pointer is going to be at the beginning
 

00:04:22.260 --> 00:04:24.620 align:start position:0%
pointer is going to be at the beginning
or<00:04:22.500><c> a</c><00:04:22.560><c> left</c><00:04:23.010><c> pointer</c><00:04:23.520><c> one</c><00:04:24.060><c> pointer</c><00:04:24.389><c> is</c><00:04:24.510><c> going</c>

00:04:24.620 --> 00:04:24.630 align:start position:0%
or a left pointer one pointer is going
 

00:04:24.630 --> 00:04:25.700 align:start position:0%
or a left pointer one pointer is going
to<00:04:24.690><c> be</c><00:04:24.779><c> at</c><00:04:24.870><c> the</c><00:04:24.990><c> end</c><00:04:25.229><c> or</c>

00:04:25.700 --> 00:04:25.710 align:start position:0%
to be at the end or
 

00:04:25.710 --> 00:04:27.770 align:start position:0%
to be at the end or
the<00:04:25.770><c> right</c><00:04:26.039><c> pointer</c><00:04:26.550><c> so</c><00:04:26.850><c> we</c><00:04:27.030><c> currently</c><00:04:27.330><c> have</c><00:04:27.750><c> a</c>

00:04:27.770 --> 00:04:27.780 align:start position:0%
the right pointer so we currently have a
 

00:04:27.780 --> 00:04:29.719 align:start position:0%
the right pointer so we currently have a
one<00:04:28.289><c> and</c><00:04:28.530><c> an</c><00:04:28.680><c> eleven</c><00:04:29.130><c> let's</c><00:04:29.310><c> add</c><00:04:29.550><c> these</c>

00:04:29.719 --> 00:04:29.729 align:start position:0%
one and an eleven let's add these
 

00:04:29.729 --> 00:04:32.719 align:start position:0%
one and an eleven let's add these
together<00:04:30.000><c> one</c><00:04:30.419><c> plus</c><00:04:30.690><c> 11</c><00:04:31.229><c> is</c><00:04:31.380><c> equal</c><00:04:31.710><c> to</c><00:04:31.830><c> 12</c><00:04:32.160><c> so</c>

00:04:32.719 --> 00:04:32.729 align:start position:0%
together one plus 11 is equal to 12 so
 

00:04:32.729 --> 00:04:35.150 align:start position:0%
together one plus 11 is equal to 12 so
that's<00:04:32.940><c> greater</c><00:04:33.750><c> than</c><00:04:34.110><c> our</c><00:04:34.259><c> target</c><00:04:34.740><c> of</c><00:04:34.889><c> nine</c>

00:04:35.150 --> 00:04:35.160 align:start position:0%
that's greater than our target of nine
 

00:04:35.160 --> 00:04:38.120 align:start position:0%
that's greater than our target of nine
remember<00:04:35.729><c> so</c><00:04:36.180><c> since</c><00:04:36.569><c> this</c><00:04:36.840><c> target</c><00:04:37.380><c> is</c><00:04:37.500><c> too</c><00:04:37.770><c> big</c>

00:04:38.120 --> 00:04:38.130 align:start position:0%
remember so since this target is too big
 

00:04:38.130 --> 00:04:41.120 align:start position:0%
remember so since this target is too big
we<00:04:38.160><c> need</c><00:04:38.460><c> to</c><00:04:38.819><c> decrease</c><00:04:39.449><c> it</c><00:04:39.750><c> we</c><00:04:40.470><c> have</c><00:04:40.650><c> a</c><00:04:40.680><c> choice</c>

00:04:41.120 --> 00:04:41.130 align:start position:0%
we need to decrease it we have a choice
 

00:04:41.130 --> 00:04:43.460 align:start position:0%
we need to decrease it we have a choice
of<00:04:41.460><c> which</c><00:04:41.729><c> pointer</c><00:04:42.240><c> to</c><00:04:42.389><c> shift</c><00:04:42.690><c> if</c><00:04:42.930><c> we</c><00:04:43.169><c> shift</c>

00:04:43.460 --> 00:04:43.470 align:start position:0%
of which pointer to shift if we shift
 

00:04:43.470 --> 00:04:46.249 align:start position:0%
of which pointer to shift if we shift
our<00:04:43.770><c> left</c><00:04:44.280><c> pointer</c><00:04:44.729><c> here</c><00:04:45.180><c> to</c><00:04:45.479><c> three</c><00:04:45.960><c> we're</c>

00:04:46.249 --> 00:04:46.259 align:start position:0%
our left pointer here to three we're
 

00:04:46.259 --> 00:04:48.559 align:start position:0%
our left pointer here to three we're
going<00:04:46.349><c> to</c><00:04:46.440><c> be</c><00:04:46.530><c> increasing</c><00:04:47.490><c> the</c><00:04:47.639><c> sum</c><00:04:47.910><c> we</c><00:04:48.300><c> don't</c>

00:04:48.559 --> 00:04:48.569 align:start position:0%
going to be increasing the sum we don't
 

00:04:48.569 --> 00:04:50.270 align:start position:0%
going to be increasing the sum we don't
want<00:04:48.720><c> to</c><00:04:48.780><c> do</c><00:04:48.930><c> that</c><00:04:49.110><c> since</c><00:04:49.319><c> the</c><00:04:49.470><c> sum</c><00:04:49.680><c> is</c><00:04:49.800><c> already</c>

00:04:50.270 --> 00:04:50.280 align:start position:0%
want to do that since the sum is already
 

00:04:50.280 --> 00:04:52.640 align:start position:0%
want to do that since the sum is already
too<00:04:50.460><c> big</c><00:04:50.759><c> so</c><00:04:51.270><c> instead</c><00:04:51.780><c> let's</c><00:04:52.050><c> take</c><00:04:52.440><c> our</c><00:04:52.620><c> right</c>

00:04:52.640 --> 00:04:52.650 align:start position:0%
too big so instead let's take our right
 

00:04:52.650 --> 00:04:56.450 align:start position:0%
too big so instead let's take our right
pointer<00:04:53.370><c> and</c><00:04:53.520><c> shift</c><00:04:53.819><c> it</c><00:04:54.000><c> to</c><00:04:54.030><c> the</c><00:04:54.210><c> left</c><00:04:55.460><c> now</c>

00:04:56.450 --> 00:04:56.460 align:start position:0%
pointer and shift it to the left now
 

00:04:56.460 --> 00:04:58.580 align:start position:0%
pointer and shift it to the left now
we've<00:04:56.699><c> decreased</c><00:04:57.300><c> the</c><00:04:57.599><c> total</c><00:04:57.930><c> sum</c><00:04:58.199><c> so</c><00:04:58.380><c> let's</c>

00:04:58.580 --> 00:04:58.590 align:start position:0%
we've decreased the total sum so let's
 

00:04:58.590 --> 00:05:02.779 align:start position:0%
we've decreased the total sum so let's
recompute<00:04:59.280><c> it</c><00:04:59.400><c> one</c><00:04:59.910><c> plus</c><00:05:00.449><c> seven</c><00:05:01.550><c> now</c><00:05:02.550><c> it's</c>

00:05:02.779 --> 00:05:02.789 align:start position:0%
recompute it one plus seven now it's
 

00:05:02.789 --> 00:05:06.200 align:start position:0%
recompute it one plus seven now it's
eight<00:05:03.090><c> this</c><00:05:03.810><c> is</c><00:05:04.020><c> too</c><00:05:04.289><c> small</c><00:05:04.860><c> we</c><00:05:05.699><c> went</c><00:05:05.970><c> a</c><00:05:06.000><c> little</c>

00:05:06.200 --> 00:05:06.210 align:start position:0%
eight this is too small we went a little
 

00:05:06.210 --> 00:05:09.260 align:start position:0%
eight this is too small we went a little
-<00:05:06.570><c> we</c><00:05:07.139><c> decreased</c><00:05:07.680><c> our</c><00:05:07.860><c> sum</c><00:05:08.130><c> too</c><00:05:08.430><c> much</c><00:05:08.789><c> so</c><00:05:09.030><c> now</c>

00:05:09.260 --> 00:05:09.270 align:start position:0%
- we decreased our sum too much so now
 

00:05:09.270 --> 00:05:11.570 align:start position:0%
- we decreased our sum too much so now
we<00:05:09.330><c> need</c><00:05:09.630><c> to</c><00:05:09.720><c> increase</c><00:05:10.259><c> it</c><00:05:10.380><c> so</c><00:05:11.009><c> since</c><00:05:11.370><c> the</c>

00:05:11.570 --> 00:05:11.580 align:start position:0%
we need to increase it so since the
 

00:05:11.580 --> 00:05:13.700 align:start position:0%
we need to increase it so since the
array<00:05:11.880><c> is</c><00:05:12.150><c> sorted</c><00:05:12.449><c> we</c><00:05:12.840><c> can</c><00:05:13.020><c> take</c><00:05:13.169><c> our</c><00:05:13.349><c> left</c>

00:05:13.700 --> 00:05:13.710 align:start position:0%
array is sorted we can take our left
 

00:05:13.710 --> 00:05:16.279 align:start position:0%
array is sorted we can take our left
pointer<00:05:14.280><c> and</c><00:05:14.460><c> shift</c><00:05:14.910><c> it</c><00:05:15.090><c> to</c><00:05:15.120><c> the</c><00:05:15.330><c> right</c><00:05:15.479><c> to</c>

00:05:16.279 --> 00:05:16.289 align:start position:0%
pointer and shift it to the right to
 

00:05:16.289 --> 00:05:21.379 align:start position:0%
pointer and shift it to the right to
increase<00:05:16.530><c> our</c><00:05:17.099><c> total</c><00:05:17.430><c> sum</c><00:05:20.150><c> now</c><00:05:21.150><c> we've</c>

00:05:21.379 --> 00:05:21.389 align:start position:0%
increase our total sum now we've
 

00:05:21.389 --> 00:05:24.860 align:start position:0%
increase our total sum now we've
increased<00:05:21.750><c> our</c><00:05:22.470><c> sum</c><00:05:22.800><c> so</c><00:05:23.039><c> it's</c><00:05:23.190><c> now</c><00:05:23.460><c> three</c><00:05:24.120><c> plus</c>

00:05:24.860 --> 00:05:24.870 align:start position:0%
increased our sum so it's now three plus
 

00:05:24.870 --> 00:05:28.010 align:start position:0%
increased our sum so it's now three plus
seven<00:05:25.669><c> but</c><00:05:26.669><c> we</c><00:05:26.789><c> went</c><00:05:26.970><c> too</c><00:05:27.150><c> far</c><00:05:27.419><c> again</c><00:05:27.780><c> right</c>

00:05:28.010 --> 00:05:28.020 align:start position:0%
seven but we went too far again right
 

00:05:28.020 --> 00:05:30.110 align:start position:0%
seven but we went too far again right
now<00:05:28.199><c> it's</c><00:05:28.409><c> too</c><00:05:28.680><c> big</c><00:05:29.009><c> again</c><00:05:29.190><c> it's</c><00:05:29.520><c> bigger</c><00:05:29.849><c> than</c>

00:05:30.110 --> 00:05:30.120 align:start position:0%
now it's too big again it's bigger than
 

00:05:30.120 --> 00:05:33.050 align:start position:0%
now it's too big again it's bigger than
nine<00:05:30.800><c> so</c><00:05:31.800><c> what</c><00:05:32.009><c> do</c><00:05:32.070><c> we</c><00:05:32.130><c> have</c><00:05:32.190><c> to</c><00:05:32.370><c> do</c><00:05:32.490><c> this</c><00:05:32.759><c> time</c>

00:05:33.050 --> 00:05:33.060 align:start position:0%
nine so what do we have to do this time
 

00:05:33.060 --> 00:05:35.180 align:start position:0%
nine so what do we have to do this time
well<00:05:33.509><c> we</c><00:05:33.690><c> want</c><00:05:33.870><c> to</c><00:05:33.930><c> decrease</c><00:05:34.199><c> our</c><00:05:34.620><c> sum</c><00:05:34.979><c> so</c>

00:05:35.180 --> 00:05:35.190 align:start position:0%
well we want to decrease our sum so
 

00:05:35.190 --> 00:05:36.770 align:start position:0%
well we want to decrease our sum so
we're<00:05:35.310><c> going</c><00:05:35.400><c> to</c><00:05:35.460><c> take</c><00:05:35.699><c> the</c><00:05:35.880><c> right</c><00:05:36.240><c> pointer</c>

00:05:36.770 --> 00:05:36.780 align:start position:0%
we're going to take the right pointer
 

00:05:36.780 --> 00:05:41.689 align:start position:0%
we're going to take the right pointer
and<00:05:36.960><c> shift</c><00:05:37.440><c> it</c><00:05:37.680><c> left</c><00:05:39.800><c> so</c><00:05:40.800><c> now</c><00:05:41.009><c> we</c><00:05:41.070><c> decreased</c>

00:05:41.689 --> 00:05:41.699 align:start position:0%
and shift it left so now we decreased
 

00:05:41.699 --> 00:05:44.659 align:start position:0%
and shift it left so now we decreased
our<00:05:41.880><c> sum</c><00:05:42.180><c> let's</c><00:05:42.960><c> recompute</c><00:05:43.650><c> it</c><00:05:43.710><c> three</c><00:05:44.190><c> plus</c>

00:05:44.659 --> 00:05:44.669 align:start position:0%
our sum let's recompute it three plus
 

00:05:44.669 --> 00:05:47.719 align:start position:0%
our sum let's recompute it three plus
five<00:05:45.120><c> but</c><00:05:45.810><c> that's</c><00:05:45.990><c> eight</c><00:05:46.289><c> so</c><00:05:46.650><c> again</c><00:05:47.099><c> we</c><00:05:47.370><c> got</c><00:05:47.520><c> to</c>

00:05:47.719 --> 00:05:47.729 align:start position:0%
five but that's eight so again we got to
 

00:05:47.729 --> 00:05:49.999 align:start position:0%
five but that's eight so again we got to
a<00:05:47.759><c> it's</c><00:05:48.419><c> too</c><00:05:48.719><c> small</c><00:05:49.020><c> again</c><00:05:49.590><c> but</c><00:05:49.889><c> we're</c>

00:05:49.999 --> 00:05:50.009 align:start position:0%
a it's too small again but we're
 

00:05:50.009 --> 00:05:51.920 align:start position:0%
a it's too small again but we're
guaranteed<00:05:50.669><c> a</c><00:05:50.820><c> solution</c><00:05:51.389><c> so</c><00:05:51.719><c> we're</c><00:05:51.840><c> gonna</c>

00:05:51.920 --> 00:05:51.930 align:start position:0%
guaranteed a solution so we're gonna
 

00:05:51.930 --> 00:05:53.029 align:start position:0%
guaranteed a solution so we're gonna
keep<00:05:52.289><c> looking</c>

00:05:53.029 --> 00:05:53.039 align:start position:0%
keep looking
 

00:05:53.039 --> 00:05:55.100 align:start position:0%
keep looking
since<00:05:53.280><c> our</c><00:05:53.370><c> sum</c><00:05:53.699><c> is</c><00:05:53.729><c> too</c><00:05:54.240><c> small</c><00:05:54.870><c> we're</c><00:05:54.990><c> gonna</c>

00:05:55.100 --> 00:05:55.110 align:start position:0%
since our sum is too small we're gonna
 

00:05:55.110 --> 00:05:57.260 align:start position:0%
since our sum is too small we're gonna
increase<00:05:55.590><c> it</c><00:05:55.919><c> by</c><00:05:56.039><c> taking</c><00:05:56.219><c> our</c><00:05:56.520><c> left</c><00:05:56.849><c> pointer</c>

00:05:57.260 --> 00:05:57.270 align:start position:0%
increase it by taking our left pointer
 

00:05:57.270 --> 00:06:01.339 align:start position:0%
increase it by taking our left pointer
and<00:05:57.419><c> shifting</c><00:05:57.840><c> it</c><00:05:57.960><c> right</c><00:05:59.900><c> now</c><00:06:00.900><c> we</c><00:06:00.960><c> can't</c>

00:06:01.339 --> 00:06:01.349 align:start position:0%
and shifting it right now we can't
 

00:06:01.349 --> 00:06:03.050 align:start position:0%
and shifting it right now we can't
really<00:06:01.560><c> shift</c><00:06:01.800><c> our</c><00:06:01.979><c> pointers</c><00:06:02.310><c> anymore</c><00:06:02.820><c> so</c><00:06:02.969><c> we</c>

00:06:03.050 --> 00:06:03.060 align:start position:0%
really shift our pointers anymore so we
 

00:06:03.060 --> 00:06:04.610 align:start position:0%
really shift our pointers anymore so we
better<00:06:03.270><c> be</c><00:06:03.389><c> at</c><00:06:03.599><c> the</c><00:06:03.719><c> right</c><00:06:03.870><c> solution</c><00:06:04.409><c> let's</c>

00:06:04.610 --> 00:06:04.620 align:start position:0%
better be at the right solution let's
 

00:06:04.620 --> 00:06:07.640 align:start position:0%
better be at the right solution let's
check<00:06:04.919><c> four</c><00:06:05.340><c> plus</c><00:06:05.669><c> five</c><00:06:05.969><c> that's</c><00:06:06.630><c> exactly</c><00:06:07.380><c> nine</c>

00:06:07.640 --> 00:06:07.650 align:start position:0%
check four plus five that's exactly nine
 

00:06:07.650 --> 00:06:10.670 align:start position:0%
check four plus five that's exactly nine
so<00:06:07.979><c> we</c><00:06:08.099><c> got</c><00:06:08.400><c> our</c><00:06:08.940><c> target</c><00:06:09.659><c> and</c><00:06:09.810><c> so</c><00:06:10.259><c> we</c><00:06:10.409><c> want</c><00:06:10.620><c> to</c>

00:06:10.670 --> 00:06:10.680 align:start position:0%
so we got our target and so we want to
 

00:06:10.680 --> 00:06:12.649 align:start position:0%
so we got our target and so we want to
return<00:06:10.919><c> the</c><00:06:11.099><c> indices</c><00:06:11.580><c> of</c><00:06:11.820><c> these</c><00:06:12.000><c> which</c><00:06:12.509><c> are</c>

00:06:12.649 --> 00:06:12.659 align:start position:0%
return the indices of these which are
 

00:06:12.659 --> 00:06:21.050 align:start position:0%
return the indices of these which are
going<00:06:12.750><c> to</c><00:06:12.810><c> be</c><00:06:13.219><c> three</c><00:06:14.219><c> and</c><00:06:14.490><c> four</c><00:06:15.030><c> right</c><00:06:19.190><c> in</c><00:06:20.190><c> this</c>

00:06:21.050 --> 00:06:21.060 align:start position:0%
going to be three and four right in this
 

00:06:21.060 --> 00:06:22.760 align:start position:0%
going to be three and four right in this
case<00:06:21.330><c> we</c><00:06:21.570><c> don't</c><00:06:21.870><c> have</c><00:06:22.020><c> to</c><00:06:22.199><c> iterate</c><00:06:22.590><c> through</c>

00:06:22.760 --> 00:06:22.770 align:start position:0%
case we don't have to iterate through
 

00:06:22.770 --> 00:06:24.770 align:start position:0%
case we don't have to iterate through
the<00:06:22.860><c> entire</c><00:06:23.340><c> array</c><00:06:23.580><c> more</c><00:06:24.090><c> than</c><00:06:24.300><c> once</c><00:06:24.570><c> and</c>

00:06:24.770 --> 00:06:24.780 align:start position:0%
the entire array more than once and
 

00:06:24.780 --> 00:06:26.899 align:start position:0%
the entire array more than once and
these<00:06:24.990><c> left</c><00:06:25.830><c> and</c><00:06:26.039><c> right</c><00:06:26.190><c> pointers</c><00:06:26.400><c> are</c><00:06:26.699><c> never</c>

00:06:26.899 --> 00:06:26.909 align:start position:0%
these left and right pointers are never
 

00:06:26.909 --> 00:06:28.490 align:start position:0%
these left and right pointers are never
going<00:06:27.090><c> to</c><00:06:27.150><c> cross</c><00:06:27.449><c> each</c><00:06:27.690><c> other</c><00:06:27.870><c> we</c><00:06:28.110><c> don't</c><00:06:28.380><c> need</c>

00:06:28.490 --> 00:06:28.500 align:start position:0%
going to cross each other we don't need
 

00:06:28.500 --> 00:06:30.649 align:start position:0%
going to cross each other we don't need
extra<00:06:28.710><c> memory</c><00:06:29.130><c> either</c><00:06:29.550><c> so</c><00:06:30.090><c> our</c><00:06:30.360><c> time</c>

00:06:30.649 --> 00:06:30.659 align:start position:0%
extra memory either so our time
 

00:06:30.659 --> 00:06:33.439 align:start position:0%
extra memory either so our time
complexity<00:06:31.380><c> in</c><00:06:31.560><c> the</c><00:06:31.710><c> worst</c><00:06:31.979><c> case</c><00:06:32.400><c> is</c><00:06:32.669><c> a</c><00:06:32.820><c> Big</c><00:06:33.210><c> O</c>

00:06:33.439 --> 00:06:33.449 align:start position:0%
complexity in the worst case is a Big O
 

00:06:33.449 --> 00:06:36.050 align:start position:0%
complexity in the worst case is a Big O
of<00:06:33.479><c> n</c><00:06:33.779><c> we</c><00:06:34.260><c> found</c><00:06:34.529><c> a</c><00:06:34.620><c> linear</c><00:06:35.159><c> algorithm</c><00:06:35.550><c> using</c>

00:06:36.050 --> 00:06:36.060 align:start position:0%
of n we found a linear algorithm using
 

00:06:36.060 --> 00:06:38.269 align:start position:0%
of n we found a linear algorithm using
two<00:06:36.360><c> pointers</c><00:06:36.990><c> to</c><00:06:37.349><c> solve</c><00:06:37.589><c> this</c><00:06:37.740><c> problem</c><00:06:38.130><c> we</c>

00:06:38.269 --> 00:06:38.279 align:start position:0%
two pointers to solve this problem we
 

00:06:38.279 --> 00:06:39.519 align:start position:0%
two pointers to solve this problem we
didn't<00:06:38.639><c> even</c><00:06:38.789><c> need</c><00:06:39.029><c> extra</c>

00:06:39.519 --> 00:06:39.529 align:start position:0%
didn't even need extra
 

00:06:39.529 --> 00:06:42.039 align:start position:0%
didn't even need extra
now<00:06:40.519><c> we're</c><00:06:40.699><c> ready</c><00:06:40.879><c> to</c><00:06:40.999><c> code</c><00:06:41.299><c> up</c><00:06:41.329><c> the</c><00:06:41.539><c> solution</c>

00:06:42.039 --> 00:06:42.049 align:start position:0%
now we're ready to code up the solution
 

00:06:42.049 --> 00:06:44.139 align:start position:0%
now we're ready to code up the solution
so<00:06:42.259><c> we</c><00:06:42.379><c> remember</c><00:06:42.829><c> we</c><00:06:42.979><c> have</c><00:06:43.069><c> two</c><00:06:43.309><c> pointers</c><00:06:43.789><c> left</c>

00:06:44.139 --> 00:06:44.149 align:start position:0%
so we remember we have two pointers left
 

00:06:44.149 --> 00:06:46.089 align:start position:0%
so we remember we have two pointers left
and<00:06:44.389><c> right</c><00:06:44.629><c> the</c><00:06:45.139><c> left</c><00:06:45.439><c> pointer</c><00:06:45.799><c> is</c><00:06:45.919><c> going</c><00:06:45.949><c> to</c>

00:06:46.089 --> 00:06:46.099 align:start position:0%
and right the left pointer is going to
 

00:06:46.099 --> 00:06:47.469 align:start position:0%
and right the left pointer is going to
be<00:06:46.279><c> at</c><00:06:46.429><c> the</c><00:06:46.549><c> beginning</c><00:06:46.699><c> of</c><00:06:46.939><c> the</c><00:06:47.149><c> array</c><00:06:47.419><c> so</c>

00:06:47.469 --> 00:06:47.479 align:start position:0%
be at the beginning of the array so
 

00:06:47.479 --> 00:06:49.509 align:start position:0%
be at the beginning of the array so
index<00:06:47.989><c> 0</c><00:06:48.289><c> the</c><00:06:48.559><c> right</c><00:06:48.769><c> pointer</c><00:06:49.129><c> is</c><00:06:49.219><c> going</c><00:06:49.339><c> to</c><00:06:49.399><c> be</c>

00:06:49.509 --> 00:06:49.519 align:start position:0%
index 0 the right pointer is going to be
 

00:06:49.519 --> 00:06:52.259 align:start position:0%
index 0 the right pointer is going to be
at<00:06:49.639><c> the</c><00:06:49.759><c> last</c><00:06:49.999><c> index</c><00:06:50.809><c> length</c><00:06:51.559><c> of</c><00:06:51.769><c> numbers</c>

00:06:52.259 --> 00:06:52.269 align:start position:0%
at the last index length of numbers
 

00:06:52.269 --> 00:06:58.209 align:start position:0%
at the last index length of numbers
minus<00:06:53.269><c> 1</c><00:06:54.699><c> and</c><00:06:56.259><c> we</c><00:06:57.259><c> need</c><00:06:57.439><c> a</c><00:06:57.469><c> loop</c><00:06:57.799><c> to</c><00:06:58.039><c> iterate</c>

00:06:58.209 --> 00:06:58.219 align:start position:0%
minus 1 and we need a loop to iterate
 

00:06:58.219 --> 00:07:00.909 align:start position:0%
minus 1 and we need a loop to iterate
through<00:06:58.489><c> our</c><00:06:58.999><c> array</c><00:06:59.329><c> the</c><00:06:59.809><c> condition</c><00:07:00.469><c> in</c><00:07:00.709><c> this</c>

00:07:00.909 --> 00:07:00.919 align:start position:0%
through our array the condition in this
 

00:07:00.919 --> 00:07:02.799 align:start position:0%
through our array the condition in this
case<00:07:00.979><c> is</c><00:07:01.339><c> left</c><00:07:01.669><c> is</c><00:07:01.909><c> less</c><00:07:02.149><c> than</c><00:07:02.329><c> right</c><00:07:02.569><c> but</c><00:07:02.689><c> it</c>

00:07:02.799 --> 00:07:02.809 align:start position:0%
case is left is less than right but it
 

00:07:02.809 --> 00:07:04.089 align:start position:0%
case is left is less than right but it
doesn't<00:07:02.929><c> really</c><00:07:03.229><c> matter</c><00:07:03.529><c> because</c><00:07:03.829><c> we're</c>

00:07:04.089 --> 00:07:04.099 align:start position:0%
doesn't really matter because we're
 

00:07:04.099 --> 00:07:06.219 align:start position:0%
doesn't really matter because we're
guaranteed<00:07:04.759><c> a</c><00:07:04.879><c> solution</c><00:07:05.419><c> so</c><00:07:05.599><c> we're</c><00:07:06.049><c> going</c><00:07:06.169><c> to</c>

00:07:06.219 --> 00:07:06.229 align:start position:0%
guaranteed a solution so we're going to
 

00:07:06.229 --> 00:07:08.349 align:start position:0%
guaranteed a solution so we're going to
return<00:07:06.409><c> a</c><00:07:06.589><c> solution</c><00:07:07.099><c> no</c><00:07:07.189><c> matter</c><00:07:07.369><c> what</c><00:07:07.669><c> so</c><00:07:08.149><c> like</c>

00:07:08.349 --> 00:07:08.359 align:start position:0%
return a solution no matter what so like
 

00:07:08.359 --> 00:07:10.149 align:start position:0%
return a solution no matter what so like
we<00:07:08.479><c> just</c><00:07:08.509><c> did</c><00:07:08.869><c> in</c><00:07:08.989><c> the</c><00:07:09.109><c> example</c><00:07:09.379><c> let's</c><00:07:09.739><c> compute</c>

00:07:10.149 --> 00:07:10.159 align:start position:0%
we just did in the example let's compute
 

00:07:10.159 --> 00:07:20.919 align:start position:0%
we just did in the example let's compute
the<00:07:10.399><c> current</c><00:07:10.699><c> sum</c><00:07:17.379><c> and</c><00:07:19.119><c> we</c><00:07:20.119><c> remember</c><00:07:20.569><c> if</c><00:07:20.749><c> our</c>

00:07:20.919 --> 00:07:20.929 align:start position:0%
the current sum and we remember if our
 

00:07:20.929 --> 00:07:24.009 align:start position:0%
the current sum and we remember if our
current<00:07:21.349><c> sum</c><00:07:21.619><c> is</c><00:07:21.919><c> too</c><00:07:22.519><c> big</c><00:07:23.029><c> so</c><00:07:23.749><c> if</c><00:07:23.869><c> it's</c>

00:07:24.009 --> 00:07:24.019 align:start position:0%
current sum is too big so if it's
 

00:07:24.019 --> 00:07:26.469 align:start position:0%
current sum is too big so if it's
greater<00:07:24.199><c> than</c><00:07:24.469><c> the</c><00:07:24.709><c> target</c><00:07:24.949><c> we</c><00:07:25.819><c> can</c><00:07:25.999><c> decrease</c>

00:07:26.469 --> 00:07:26.479 align:start position:0%
greater than the target we can decrease
 

00:07:26.479 --> 00:07:28.869 align:start position:0%
greater than the target we can decrease
our<00:07:26.839><c> sum</c><00:07:27.169><c> by</c><00:07:27.349><c> taking</c><00:07:27.769><c> our</c><00:07:27.919><c> right</c><00:07:28.219><c> pointer</c><00:07:28.699><c> and</c>

00:07:28.869 --> 00:07:28.879 align:start position:0%
our sum by taking our right pointer and
 

00:07:28.879 --> 00:07:32.619 align:start position:0%
our sum by taking our right pointer and
shifting<00:07:29.779><c> it</c><00:07:29.899><c> to</c><00:07:29.929><c> the</c><00:07:30.079><c> left</c><00:07:30.409><c> on</c><00:07:31.479><c> the</c><00:07:32.479><c> other</c>

00:07:32.619 --> 00:07:32.629 align:start position:0%
shifting it to the left on the other
 

00:07:32.629 --> 00:07:37.419 align:start position:0%
shifting it to the left on the other
hand<00:07:32.959><c> if</c><00:07:33.199><c> the</c><00:07:33.649><c> current</c><00:07:33.979><c> sum</c><00:07:34.159><c> is</c><00:07:34.279><c> too</c><00:07:34.459><c> small</c><00:07:36.429><c> we</c>

00:07:37.419 --> 00:07:37.429 align:start position:0%
hand if the current sum is too small we
 

00:07:37.429 --> 00:07:39.489 align:start position:0%
hand if the current sum is too small we
want<00:07:37.669><c> to</c><00:07:37.759><c> increase</c><00:07:38.299><c> our</c><00:07:38.539><c> sum</c><00:07:38.809><c> by</c><00:07:38.989><c> taking</c><00:07:39.379><c> the</c>

00:07:39.489 --> 00:07:39.499 align:start position:0%
want to increase our sum by taking the
 

00:07:39.499 --> 00:07:40.989 align:start position:0%
want to increase our sum by taking the
left<00:07:39.739><c> pointer</c><00:07:40.129><c> and</c><00:07:40.309><c> shifting</c><00:07:40.759><c> it</c><00:07:40.819><c> to</c><00:07:40.879><c> the</c>

00:07:40.989 --> 00:07:40.999 align:start position:0%
left pointer and shifting it to the
 

00:07:40.999 --> 00:07:45.579 align:start position:0%
left pointer and shifting it to the
right<00:07:42.219><c> the</c><00:07:43.219><c> last</c><00:07:43.459><c> case</c><00:07:43.909><c> is</c><00:07:44.179><c> that</c><00:07:44.569><c> our</c><00:07:44.899><c> current</c>

00:07:45.579 --> 00:07:45.589 align:start position:0%
right the last case is that our current
 

00:07:45.589 --> 00:07:47.769 align:start position:0%
right the last case is that our current
sum<00:07:45.799><c> is</c><00:07:46.009><c> exactly</c><00:07:46.549><c> equal</c><00:07:46.999><c> to</c><00:07:47.029><c> the</c><00:07:47.269><c> target</c><00:07:47.659><c> in</c>

00:07:47.769 --> 00:07:47.779 align:start position:0%
sum is exactly equal to the target in
 

00:07:47.779 --> 00:07:50.229 align:start position:0%
sum is exactly equal to the target in
that<00:07:48.079><c> case</c><00:07:48.379><c> we</c><00:07:48.799><c> want</c><00:07:49.039><c> to</c><00:07:49.159><c> return</c><00:07:49.549><c> the</c><00:07:49.610><c> indices</c>

00:07:50.229 --> 00:07:50.239 align:start position:0%
that case we want to return the indices
 

00:07:50.239 --> 00:07:53.799 align:start position:0%
that case we want to return the indices
left<00:07:50.629><c> and</c><00:07:50.839><c> right</c><00:07:52.029><c> but</c><00:07:53.029><c> remember</c><00:07:53.539><c> they're</c>

00:07:53.799 --> 00:07:53.809 align:start position:0%
left and right but remember they're
 

00:07:53.809 --> 00:07:55.629 align:start position:0%
left and right but remember they're
based<00:07:54.019><c> on</c><00:07:54.199><c> 1</c><00:07:54.499><c> so</c><00:07:54.649><c> we're</c><00:07:54.739><c> going</c><00:07:54.829><c> to</c><00:07:54.889><c> add</c><00:07:55.039><c> 1</c><00:07:55.459><c> to</c>

00:07:55.629 --> 00:07:55.639 align:start position:0%
based on 1 so we're going to add 1 to
 

00:07:55.639 --> 00:08:02.589 align:start position:0%
based on 1 so we're going to add 1 to
each<00:07:55.669><c> of</c><00:07:56.059><c> them</c><00:08:00.579><c> we</c><00:08:01.579><c> can</c><00:08:01.729><c> put</c><00:08:01.759><c> our</c><00:08:01.999><c> return</c><00:08:02.329><c> out</c>

00:08:02.589 --> 00:08:02.599 align:start position:0%
each of them we can put our return out
 

00:08:02.599 --> 00:08:04.149 align:start position:0%
each of them we can put our return out
here<00:08:02.929><c> but</c><00:08:03.110><c> it's</c><00:08:03.229><c> not</c><00:08:03.379><c> needed</c><00:08:03.649><c> because</c><00:08:04.009><c> we're</c>

00:08:04.149 --> 00:08:04.159 align:start position:0%
here but it's not needed because we're
 

00:08:04.159 --> 00:08:05.919 align:start position:0%
here but it's not needed because we're
guaranteed<00:08:04.610><c> a</c><00:08:04.699><c> solutions</c><00:08:05.209><c> where</c><00:08:05.389><c> a</c><00:08:05.419><c> loop</c><00:08:05.719><c> will</c>

00:08:05.919 --> 00:08:05.929 align:start position:0%
guaranteed a solutions where a loop will
 

00:08:05.929 --> 00:08:08.379 align:start position:0%
guaranteed a solutions where a loop will
return<00:08:06.229><c> the</c><00:08:06.439><c> solution</c><00:08:07.059><c> and</c><00:08:08.059><c> it</c><00:08:08.209><c> works</c>

00:08:08.379 --> 00:08:08.389 align:start position:0%
return the solution and it works
 

00:08:08.389 --> 00:08:11.199 align:start position:0%
return the solution and it works
perfectly<00:08:08.929><c> a</c><00:08:09.199><c> linear</c><00:08:09.739><c> time</c><00:08:10.009><c> algorithm</c><00:08:10.429><c> with</c>

00:08:11.199 --> 00:08:11.209 align:start position:0%
perfectly a linear time algorithm with
 

00:08:11.209 --> 00:08:13.809 align:start position:0%
perfectly a linear time algorithm with
no<00:08:11.479><c> extra</c><00:08:12.049><c> space</c><00:08:12.349><c> make</c><00:08:12.979><c> sure</c><00:08:13.189><c> to</c><00:08:13.339><c> like</c><00:08:13.579><c> if</c><00:08:13.789><c> this</c>

00:08:13.809 --> 00:08:13.819 align:start position:0%
no extra space make sure to like if this
 

00:08:13.819 --> 00:08:15.849 align:start position:0%
no extra space make sure to like if this
was<00:08:14.119><c> helpful</c><00:08:14.359><c> and</c><00:08:14.809><c> subscribe</c><00:08:15.049><c> if</c><00:08:15.559><c> you</c><00:08:15.589><c> want</c>

00:08:15.849 --> 00:08:15.859 align:start position:0%
was helpful and subscribe if you want
 

00:08:15.859 --> 00:08:18.099 align:start position:0%
was helpful and subscribe if you want
more

