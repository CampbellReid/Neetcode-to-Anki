WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.510 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:00.960><c> back</c><00:00:01.199><c> and</c><00:00:01.280><c> let's</c>

00:00:01.510 --> 00:00:01.520 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.520 --> 00:00:03.429 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.680><c> some</c><00:00:01.839><c> more</c><00:00:02.080><c> neat</c><00:00:02.320><c> code</c><00:00:02.560><c> today</c><00:00:02.879><c> so</c><00:00:03.040><c> today</c>

00:00:03.429 --> 00:00:03.439 align:start position:0%
write some more neat code today so today
 

00:00:03.439 --> 00:00:04.390 align:start position:0%
write some more neat code today so today
let's<00:00:03.679><c> solve</c>

00:00:04.390 --> 00:00:04.400 align:start position:0%
let's solve
 

00:00:04.400 --> 00:00:07.510 align:start position:0%
let's solve
letter<00:00:04.799><c> combinations</c><00:00:05.839><c> of</c><00:00:06.160><c> a</c><00:00:06.399><c> phone</c><00:00:06.720><c> number</c><00:00:07.359><c> so</c>

00:00:07.510 --> 00:00:07.520 align:start position:0%
letter combinations of a phone number so
 

00:00:07.520 --> 00:00:08.549 align:start position:0%
letter combinations of a phone number so
we're<00:00:07.759><c> given</c><00:00:08.240><c> a</c>

00:00:08.549 --> 00:00:08.559 align:start position:0%
we're given a
 

00:00:08.559 --> 00:00:11.669 align:start position:0%
we're given a
string<00:00:09.360><c> of</c><00:00:09.760><c> digits</c><00:00:10.639><c> that</c><00:00:10.960><c> contain</c>

00:00:11.669 --> 00:00:11.679 align:start position:0%
string of digits that contain
 

00:00:11.679 --> 00:00:14.709 align:start position:0%
string of digits that contain
only<00:00:12.400><c> two</c><00:00:13.040><c> through</c><00:00:13.440><c> nine</c><00:00:13.759><c> so</c><00:00:13.920><c> the</c><00:00:14.080><c> digits</c><00:00:14.559><c> are</c>

00:00:14.709 --> 00:00:14.719 align:start position:0%
only two through nine so the digits are
 

00:00:14.719 --> 00:00:16.710 align:start position:0%
only two through nine so the digits are
only<00:00:14.960><c> going</c><00:00:15.040><c> to</c><00:00:15.200><c> contain</c><00:00:16.000><c> the</c><00:00:16.160><c> numbers</c>

00:00:16.710 --> 00:00:16.720 align:start position:0%
only going to contain the numbers
 

00:00:16.720 --> 00:00:19.910 align:start position:0%
only going to contain the numbers
2<00:00:17.039><c> through</c><00:00:17.520><c> 9</c><00:00:18.240><c> and</c><00:00:18.480><c> we</c><00:00:18.640><c> want</c><00:00:18.800><c> to</c><00:00:18.880><c> return</c><00:00:19.520><c> all</c>

00:00:19.910 --> 00:00:19.920 align:start position:0%
2 through 9 and we want to return all
 

00:00:19.920 --> 00:00:22.870 align:start position:0%
2 through 9 and we want to return all
possible<00:00:20.640><c> letter</c><00:00:21.240><c> combinations</c><00:00:22.400><c> that</c><00:00:22.560><c> the</c>

00:00:22.870 --> 00:00:22.880 align:start position:0%
possible letter combinations that the
 

00:00:22.880 --> 00:00:23.429 align:start position:0%
possible letter combinations that the
number

00:00:23.429 --> 00:00:23.439 align:start position:0%
number
 

00:00:23.439 --> 00:00:25.910 align:start position:0%
number
could<00:00:23.920><c> represent</c><00:00:24.880><c> and</c><00:00:25.039><c> so</c><00:00:25.279><c> basically</c><00:00:25.760><c> what</c>

00:00:25.910 --> 00:00:25.920 align:start position:0%
could represent and so basically what
 

00:00:25.920 --> 00:00:27.189 align:start position:0%
could represent and so basically what
this<00:00:26.160><c> problem</c><00:00:26.560><c> is</c><00:00:26.720><c> about</c>

00:00:27.189 --> 00:00:27.199 align:start position:0%
this problem is about
 

00:00:27.199 --> 00:00:29.669 align:start position:0%
this problem is about
is<00:00:27.760><c> like</c><00:00:28.080><c> when</c><00:00:28.240><c> you</c><00:00:28.480><c> wanted</c><00:00:28.720><c> to</c><00:00:28.960><c> text</c><00:00:29.279><c> people</c>

00:00:29.669 --> 00:00:29.679 align:start position:0%
is like when you wanted to text people
 

00:00:29.679 --> 00:00:32.150 align:start position:0%
is like when you wanted to text people
with<00:00:30.160><c> old</c><00:00:30.480><c> phones</c><00:00:31.039><c> you</c><00:00:31.279><c> only</c><00:00:31.599><c> had</c>

00:00:32.150 --> 00:00:32.160 align:start position:0%
with old phones you only had
 

00:00:32.160 --> 00:00:35.270 align:start position:0%
with old phones you only had
these<00:00:32.640><c> digits</c><00:00:33.200><c> right</c><00:00:33.520><c> so</c><00:00:33.840><c> in</c><00:00:34.000><c> order</c><00:00:34.399><c> to</c><00:00:34.960><c> have</c>

00:00:35.270 --> 00:00:35.280 align:start position:0%
these digits right so in order to have
 

00:00:35.280 --> 00:00:38.310 align:start position:0%
these digits right so in order to have
characters<00:00:35.920><c> you'd</c><00:00:36.160><c> map</c><00:00:36.880><c> a</c><00:00:37.040><c> number</c><00:00:37.440><c> like</c><00:00:37.760><c> two</c>

00:00:38.310 --> 00:00:38.320 align:start position:0%
characters you'd map a number like two
 

00:00:38.320 --> 00:00:41.430 align:start position:0%
characters you'd map a number like two
to<00:00:38.480><c> the</c><00:00:38.640><c> characters</c><00:00:39.360><c> a</c><00:00:40.079><c> b</c><00:00:40.879><c> c</c>

00:00:41.430 --> 00:00:41.440 align:start position:0%
to the characters a b c
 

00:00:41.440 --> 00:00:43.270 align:start position:0%
to the characters a b c
and<00:00:41.600><c> you</c><00:00:41.760><c> can</c><00:00:41.920><c> see</c><00:00:42.320><c> the</c><00:00:42.480><c> reason</c><00:00:42.800><c> we're</c><00:00:42.960><c> doing</c>

00:00:43.270 --> 00:00:43.280 align:start position:0%
and you can see the reason we're doing
 

00:00:43.280 --> 00:00:44.869 align:start position:0%
and you can see the reason we're doing
two<00:00:43.600><c> through</c><00:00:44.000><c> nine</c><00:00:44.320><c> is</c><00:00:44.480><c> because</c>

00:00:44.869 --> 00:00:44.879 align:start position:0%
two through nine is because
 

00:00:44.879 --> 00:00:47.590 align:start position:0%
two through nine is because
one<00:00:45.200><c> was</c><00:00:45.440><c> not</c><00:00:45.760><c> mapped</c><00:00:46.239><c> to</c><00:00:46.559><c> any</c><00:00:46.960><c> digits</c><00:00:47.440><c> right</c>

00:00:47.590 --> 00:00:47.600 align:start position:0%
one was not mapped to any digits right
 

00:00:47.600 --> 00:00:49.750 align:start position:0%
one was not mapped to any digits right
so<00:00:47.840><c> we</c><00:00:47.920><c> don't</c><00:00:48.079><c> need</c><00:00:48.239><c> to</c><00:00:48.320><c> consider</c><00:00:48.800><c> the</c><00:00:48.960><c> one</c>

00:00:49.750 --> 00:00:49.760 align:start position:0%
so we don't need to consider the one
 

00:00:49.760 --> 00:00:53.590 align:start position:0%
so we don't need to consider the one
two<00:00:50.079><c> was</c><00:00:50.320><c> mapped</c><00:00:50.800><c> to</c><00:00:51.120><c> abc</c><00:00:52.480><c> three</c><00:00:52.879><c> was</c><00:00:53.199><c> mapped</c>

00:00:53.590 --> 00:00:53.600 align:start position:0%
two was mapped to abc three was mapped
 

00:00:53.600 --> 00:00:54.470 align:start position:0%
two was mapped to abc three was mapped
to<00:00:53.920><c> d</c>

00:00:54.470 --> 00:00:54.480 align:start position:0%
to d
 

00:00:54.480 --> 00:00:57.590 align:start position:0%
to d
e<00:00:54.879><c> f</c><00:00:55.520><c> basically</c><00:00:55.920><c> each</c><00:00:56.320><c> number</c><00:00:56.719><c> or</c><00:00:56.879><c> each</c><00:00:57.120><c> digit</c>

00:00:57.590 --> 00:00:57.600 align:start position:0%
e f basically each number or each digit
 

00:00:57.600 --> 00:01:00.470 align:start position:0%
e f basically each number or each digit
four<00:00:58.160><c> five</c><00:00:58.640><c> six</c><00:00:58.960><c> each</c><00:00:59.199><c> one</c><00:00:59.440><c> was</c><00:00:59.760><c> mapped</c><00:01:00.160><c> to</c>

00:01:00.470 --> 00:01:00.480 align:start position:0%
four five six each one was mapped to
 

00:01:00.480 --> 00:01:02.389 align:start position:0%
four five six each one was mapped to
three<00:01:00.879><c> characters</c><00:01:01.359><c> some</c><00:01:01.600><c> were</c><00:01:01.760><c> mapped</c><00:01:02.160><c> to</c>

00:01:02.389 --> 00:01:02.399 align:start position:0%
three characters some were mapped to
 

00:01:02.399 --> 00:01:04.630 align:start position:0%
three characters some were mapped to
four<00:01:02.640><c> characters</c><00:01:03.120><c> seven</c><00:01:03.440><c> is</c><00:01:03.600><c> mapped</c><00:01:03.840><c> to</c><00:01:04.000><c> four</c>

00:01:04.630 --> 00:01:04.640 align:start position:0%
four characters seven is mapped to four
 

00:01:04.640 --> 00:01:06.149 align:start position:0%
four characters seven is mapped to four
nine<00:01:04.960><c> is</c><00:01:05.119><c> mapped</c><00:01:05.439><c> to</c><00:01:05.600><c> four</c><00:01:05.840><c> different</c>

00:01:06.149 --> 00:01:06.159 align:start position:0%
nine is mapped to four different
 

00:01:06.159 --> 00:01:08.469 align:start position:0%
nine is mapped to four different
characters<00:01:06.880><c> so</c><00:01:07.119><c> then</c><00:01:07.439><c> if</c><00:01:07.600><c> you're</c><00:01:07.920><c> given</c>

00:01:08.469 --> 00:01:08.479 align:start position:0%
characters so then if you're given
 

00:01:08.479 --> 00:01:11.670 align:start position:0%
characters so then if you're given
a<00:01:08.799><c> string</c><00:01:09.600><c> of</c><00:01:09.760><c> digits</c><00:01:10.240><c> let's</c><00:01:10.479><c> say</c><00:01:10.799><c> two</c><00:01:11.200><c> 3</c><00:01:11.600><c> in</c>

00:01:11.670 --> 00:01:11.680 align:start position:0%
a string of digits let's say two 3 in
 

00:01:11.680 --> 00:01:11.990 align:start position:0%
a string of digits let's say two 3 in
this

00:01:11.990 --> 00:01:12.000 align:start position:0%
this
 

00:01:12.000 --> 00:01:15.190 align:start position:0%
this
case<00:01:12.240><c> right</c><00:01:12.479><c> 2</c><00:01:12.799><c> 3</c><00:01:13.119><c> is</c><00:01:13.280><c> our</c><00:01:13.439><c> string</c><00:01:14.320><c> well</c><00:01:14.880><c> how</c>

00:01:15.190 --> 00:01:15.200 align:start position:0%
case right 2 3 is our string well how
 

00:01:15.200 --> 00:01:16.230 align:start position:0%
case right 2 3 is our string well how
many<00:01:15.520><c> different</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
many different
 

00:01:16.240 --> 00:01:17.830 align:start position:0%
many different
output<00:01:16.640><c> strings</c><00:01:16.960><c> could</c><00:01:17.119><c> we</c><00:01:17.200><c> have</c><00:01:17.439><c> here</c><00:01:17.680><c> you</c>

00:01:17.830 --> 00:01:17.840 align:start position:0%
output strings could we have here you
 

00:01:17.840 --> 00:01:19.350 align:start position:0%
output strings could we have here you
can<00:01:18.000><c> see</c><00:01:18.400><c> we</c><00:01:18.560><c> have</c><00:01:18.880><c> a</c>

00:01:19.350 --> 00:01:19.360 align:start position:0%
can see we have a
 

00:01:19.360 --> 00:01:21.990 align:start position:0%
can see we have a
bunch<00:01:19.759><c> right</c><00:01:20.000><c> we</c><00:01:20.159><c> have</c><00:01:20.640><c> 9</c><00:01:21.119><c> different</c><00:01:21.439><c> strings</c>

00:01:21.990 --> 00:01:22.000 align:start position:0%
bunch right we have 9 different strings
 

00:01:22.000 --> 00:01:24.149 align:start position:0%
bunch right we have 9 different strings
why<00:01:22.240><c> do</c><00:01:22.400><c> we</c><00:01:22.560><c> have</c><00:01:22.799><c> 9</c><00:01:23.119><c> different</c><00:01:23.439><c> strings</c>

00:01:24.149 --> 00:01:24.159 align:start position:0%
why do we have 9 different strings
 

00:01:24.159 --> 00:01:27.190 align:start position:0%
why do we have 9 different strings
because<00:01:24.960><c> this</c><00:01:25.600><c> two</c><00:01:26.240><c> could</c><00:01:26.400><c> be</c><00:01:26.799><c> three</c>

00:01:27.190 --> 00:01:27.200 align:start position:0%
because this two could be three
 

00:01:27.200 --> 00:01:28.550 align:start position:0%
because this two could be three
different<00:01:27.520><c> characters</c><00:01:28.000><c> it</c><00:01:28.080><c> could</c><00:01:28.240><c> be</c>

00:01:28.550 --> 00:01:28.560 align:start position:0%
different characters it could be
 

00:01:28.560 --> 00:01:31.749 align:start position:0%
different characters it could be
a<00:01:29.360><c> b</c><00:01:29.920><c> or</c><00:01:30.240><c> c</c><00:01:31.040><c> this</c>

00:01:31.749 --> 00:01:31.759 align:start position:0%
a b or c this
 

00:01:31.759 --> 00:01:33.749 align:start position:0%
a b or c this
three<00:01:32.240><c> could</c><00:01:32.560><c> also</c><00:01:32.960><c> be</c><00:01:33.200><c> three</c><00:01:33.520><c> different</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
three could also be three different
 

00:01:33.759 --> 00:01:35.030 align:start position:0%
three could also be three different
characters<00:01:34.400><c> d</c>

00:01:35.030 --> 00:01:35.040 align:start position:0%
characters d
 

00:01:35.040 --> 00:01:38.230 align:start position:0%
characters d
e<00:01:35.680><c> f</c><00:01:36.320><c> so</c><00:01:36.960><c> three</c><00:01:37.520><c> times</c>

00:01:38.230 --> 00:01:38.240 align:start position:0%
e f so three times
 

00:01:38.240 --> 00:01:41.510 align:start position:0%
e f so three times
three<00:01:38.799><c> is</c><00:01:39.200><c> nine</c><00:01:39.920><c> so</c><00:01:40.320><c> basically</c><00:01:40.799><c> we</c><00:01:40.960><c> can</c><00:01:41.200><c> have</c>

00:01:41.510 --> 00:01:41.520 align:start position:0%
three is nine so basically we can have
 

00:01:41.520 --> 00:01:44.469 align:start position:0%
three is nine so basically we can have
we<00:01:41.600><c> can</c><00:01:41.759><c> have</c><00:01:42.000><c> nine</c><00:01:42.479><c> different</c><00:01:43.079><c> combinations</c>

00:01:44.469 --> 00:01:44.479 align:start position:0%
we can have nine different combinations
 

00:01:44.479 --> 00:01:46.230 align:start position:0%
we can have nine different combinations
of<00:01:44.720><c> these</c><00:01:45.119><c> characters</c><00:01:45.680><c> right</c>

00:01:46.230 --> 00:01:46.240 align:start position:0%
of these characters right
 

00:01:46.240 --> 00:01:49.830 align:start position:0%
of these characters right
we<00:01:46.399><c> could</c><00:01:46.560><c> have</c><00:01:46.960><c> a</c><00:01:47.600><c> d</c><00:01:48.320><c> we</c><00:01:48.479><c> could</c><00:01:48.640><c> have</c><00:01:49.119><c> a</c>

00:01:49.830 --> 00:01:49.840 align:start position:0%
we could have a d we could have a
 

00:01:49.840 --> 00:01:52.789 align:start position:0%
we could have a d we could have a
e<00:01:50.159><c> we</c><00:01:50.320><c> could</c><00:01:50.479><c> have</c><00:01:50.799><c> a</c><00:01:51.360><c> f</c><00:01:51.840><c> right</c><00:01:52.079><c> and</c><00:01:52.240><c> so</c><00:01:52.399><c> on</c><00:01:52.640><c> and</c>

00:01:52.789 --> 00:01:52.799 align:start position:0%
e we could have a f right and so on and
 

00:01:52.799 --> 00:01:54.149 align:start position:0%
e we could have a f right and so on and
so<00:01:53.040><c> on</c><00:01:53.280><c> right</c><00:01:53.600><c> so</c>

00:01:54.149 --> 00:01:54.159 align:start position:0%
so on right so
 

00:01:54.159 --> 00:01:57.190 align:start position:0%
so on right so
we<00:01:54.320><c> could</c><00:01:54.479><c> have</c><00:01:54.720><c> b</c><00:01:55.040><c> e</c><00:01:55.360><c> b</c><00:01:56.399><c> b</c><00:01:56.719><c> f</c>

00:01:57.190 --> 00:01:57.200 align:start position:0%
we could have b e b b f
 

00:01:57.200 --> 00:01:59.030 align:start position:0%
we could have b e b b f
and<00:01:57.280><c> then</c><00:01:57.520><c> do</c><00:01:57.680><c> the</c><00:01:57.840><c> same</c><00:01:58.000><c> thing</c><00:01:58.240><c> for</c><00:01:58.560><c> c</c><00:01:58.880><c> right</c>

00:01:59.030 --> 00:01:59.040 align:start position:0%
and then do the same thing for c right
 

00:01:59.040 --> 00:02:00.469 align:start position:0%
and then do the same thing for c right
so<00:01:59.200><c> then</c><00:01:59.360><c> you</c><00:01:59.600><c> would</c><00:01:59.759><c> have</c><00:01:59.840><c> nine</c><00:02:00.079><c> different</c>

00:02:00.469 --> 00:02:00.479 align:start position:0%
so then you would have nine different
 

00:02:00.479 --> 00:02:01.190 align:start position:0%
so then you would have nine different
strings

00:02:01.190 --> 00:02:01.200 align:start position:0%
strings
 

00:02:01.200 --> 00:02:03.429 align:start position:0%
strings
and<00:02:01.360><c> so</c><00:02:01.600><c> basically</c><00:02:02.320><c> you</c><00:02:02.399><c> can</c><00:02:02.640><c> tell</c><00:02:02.960><c> that</c><00:02:03.119><c> this</c>

00:02:03.429 --> 00:02:03.439 align:start position:0%
and so basically you can tell that this
 

00:02:03.439 --> 00:02:05.270 align:start position:0%
and so basically you can tell that this
problem<00:02:03.920><c> right</c><00:02:04.159><c> like</c><00:02:04.479><c> writing</c><00:02:04.880><c> out</c><00:02:05.119><c> the</c>

00:02:05.270 --> 00:02:05.280 align:start position:0%
problem right like writing out the
 

00:02:05.280 --> 00:02:07.030 align:start position:0%
problem right like writing out the
solution<00:02:05.759><c> like</c><00:02:05.920><c> this</c><00:02:06.159><c> it's</c><00:02:06.399><c> not</c><00:02:06.640><c> that</c>

00:02:07.030 --> 00:02:07.040 align:start position:0%
solution like this it's not that
 

00:02:07.040 --> 00:02:09.830 align:start position:0%
solution like this it's not that
difficult<00:02:08.080><c> because</c><00:02:08.640><c> we're</c><00:02:08.800><c> gonna</c><00:02:09.119><c> basically</c>

00:02:09.830 --> 00:02:09.840 align:start position:0%
difficult because we're gonna basically
 

00:02:09.840 --> 00:02:12.630 align:start position:0%
difficult because we're gonna basically
be<00:02:10.080><c> forced</c><00:02:10.479><c> to</c><00:02:10.800><c> brute</c><00:02:11.200><c> force</c><00:02:11.599><c> this</c><00:02:11.840><c> problem</c>

00:02:12.630 --> 00:02:12.640 align:start position:0%
be forced to brute force this problem
 

00:02:12.640 --> 00:02:15.589 align:start position:0%
be forced to brute force this problem
and<00:02:13.040><c> it's</c><00:02:13.280><c> a</c><00:02:13.520><c> backtracking</c><00:02:14.480><c> problem</c><00:02:15.360><c> because</c>

00:02:15.589 --> 00:02:15.599 align:start position:0%
and it's a backtracking problem because
 

00:02:15.599 --> 00:02:17.350 align:start position:0%
and it's a backtracking problem because
we<00:02:15.760><c> have</c><00:02:16.000><c> to</c><00:02:16.239><c> brute</c><00:02:16.560><c> force</c><00:02:16.879><c> it</c><00:02:16.959><c> right</c><00:02:17.120><c> we</c><00:02:17.280><c> have</c>

00:02:17.350 --> 00:02:17.360 align:start position:0%
we have to brute force it right we have
 

00:02:17.360 --> 00:02:19.030 align:start position:0%
we have to brute force it right we have
to<00:02:17.520><c> basically</c><00:02:18.000><c> find</c><00:02:18.319><c> every</c><00:02:18.640><c> single</c>

00:02:19.030 --> 00:02:19.040 align:start position:0%
to basically find every single
 

00:02:19.040 --> 00:02:19.910 align:start position:0%
to basically find every single
combination

00:02:19.910 --> 00:02:19.920 align:start position:0%
combination
 

00:02:19.920 --> 00:02:22.550 align:start position:0%
combination
that<00:02:20.080><c> we</c><00:02:20.239><c> could</c><00:02:20.480><c> get</c><00:02:20.800><c> using</c><00:02:21.120><c> the</c><00:02:21.280><c> given</c><00:02:21.680><c> digits</c>

00:02:22.550 --> 00:02:22.560 align:start position:0%
that we could get using the given digits
 

00:02:22.560 --> 00:02:22.949 align:start position:0%
that we could get using the given digits
and

00:02:22.949 --> 00:02:22.959 align:start position:0%
and
 

00:02:22.959 --> 00:02:24.390 align:start position:0%
and
you<00:02:23.200><c> might</c><00:02:23.360><c> have</c><00:02:23.520><c> noticed</c><00:02:23.840><c> i've</c><00:02:23.920><c> been</c><00:02:24.080><c> doing</c><00:02:24.319><c> a</c>

00:02:24.390 --> 00:02:24.400 align:start position:0%
you might have noticed i've been doing a
 

00:02:24.400 --> 00:02:26.790 align:start position:0%
you might have noticed i've been doing a
lot<00:02:24.640><c> of</c><00:02:24.800><c> backtracking</c><00:02:25.520><c> problems</c><00:02:26.080><c> recently</c>

00:02:26.790 --> 00:02:26.800 align:start position:0%
lot of backtracking problems recently
 

00:02:26.800 --> 00:02:28.150 align:start position:0%
lot of backtracking problems recently
and<00:02:27.040><c> that</c><00:02:27.200><c> just</c><00:02:27.360><c> goes</c><00:02:27.599><c> to</c><00:02:27.760><c> show</c><00:02:27.920><c> you</c><00:02:28.000><c> that</c>

00:02:28.150 --> 00:02:28.160 align:start position:0%
and that just goes to show you that
 

00:02:28.160 --> 00:02:30.070 align:start position:0%
and that just goes to show you that
backtracking<00:02:28.879><c> is</c><00:02:29.040><c> a</c><00:02:29.120><c> very</c><00:02:29.520><c> important</c>

00:02:30.070 --> 00:02:30.080 align:start position:0%
backtracking is a very important
 

00:02:30.080 --> 00:02:31.190 align:start position:0%
backtracking is a very important
algorithm

00:02:31.190 --> 00:02:31.200 align:start position:0%
algorithm
 

00:02:31.200 --> 00:02:32.869 align:start position:0%
algorithm
so<00:02:31.440><c> let</c><00:02:31.599><c> me</c><00:02:31.680><c> just</c><00:02:31.920><c> show</c><00:02:32.080><c> you</c><00:02:32.319><c> kind</c><00:02:32.560><c> of</c><00:02:32.640><c> the</c>

00:02:32.869 --> 00:02:32.879 align:start position:0%
so let me just show you kind of the
 

00:02:32.879 --> 00:02:34.869 align:start position:0%
so let me just show you kind of the
drawing<00:02:33.360><c> of</c><00:02:33.519><c> the</c><00:02:33.599><c> backtracking</c><00:02:34.239><c> solution</c><00:02:34.640><c> so</c>

00:02:34.869 --> 00:02:34.879 align:start position:0%
drawing of the backtracking solution so
 

00:02:34.879 --> 00:02:36.630 align:start position:0%
drawing of the backtracking solution so
luckily<00:02:35.360><c> for</c><00:02:35.599><c> us</c><00:02:35.760><c> in</c><00:02:35.840><c> this</c><00:02:36.000><c> case</c><00:02:36.239><c> we're</c><00:02:36.400><c> only</c>

00:02:36.630 --> 00:02:36.640 align:start position:0%
luckily for us in this case we're only
 

00:02:36.640 --> 00:02:37.350 align:start position:0%
luckily for us in this case we're only
given<00:02:37.040><c> two</c>

00:02:37.350 --> 00:02:37.360 align:start position:0%
given two
 

00:02:37.360 --> 00:02:39.110 align:start position:0%
given two
three<00:02:37.599><c> right</c><00:02:37.840><c> and</c><00:02:37.920><c> so</c><00:02:38.080><c> we</c><00:02:38.319><c> only</c><00:02:38.480><c> need</c><00:02:38.640><c> to</c><00:02:38.800><c> find</c>

00:02:39.110 --> 00:02:39.120 align:start position:0%
three right and so we only need to find
 

00:02:39.120 --> 00:02:41.670 align:start position:0%
three right and so we only need to find
okay<00:02:39.519><c> two</c><00:02:39.760><c> maps</c><00:02:40.080><c> to</c><00:02:40.319><c> these</c><00:02:40.560><c> three</c><00:02:40.800><c> characters</c>

00:02:41.670 --> 00:02:41.680 align:start position:0%
okay two maps to these three characters
 

00:02:41.680 --> 00:02:44.070 align:start position:0%
okay two maps to these three characters
three<00:02:42.080><c> maps</c><00:02:42.480><c> to</c><00:02:42.640><c> these</c><00:02:42.879><c> three</c><00:02:43.120><c> characters</c><00:02:43.840><c> but</c>

00:02:44.070 --> 00:02:44.080 align:start position:0%
three maps to these three characters but
 

00:02:44.080 --> 00:02:45.589 align:start position:0%
three maps to these three characters but
we<00:02:44.319><c> know</c><00:02:44.720><c> in</c><00:02:45.040><c> total</c>

00:02:45.589 --> 00:02:45.599 align:start position:0%
we know in total
 

00:02:45.599 --> 00:02:47.430 align:start position:0%
we know in total
we<00:02:45.920><c> it's</c><00:02:46.160><c> possible</c><00:02:46.560><c> we</c><00:02:46.640><c> could</c><00:02:46.800><c> have</c><00:02:46.959><c> a</c><00:02:47.120><c> four</c><00:02:47.360><c> we</c>

00:02:47.430 --> 00:02:47.440 align:start position:0%
we it's possible we could have a four we
 

00:02:47.440 --> 00:02:49.270 align:start position:0%
we it's possible we could have a four we
could<00:02:47.599><c> have</c><00:02:47.680><c> a</c><00:02:47.840><c> five</c><00:02:48.160><c> if</c><00:02:48.319><c> we</c><00:02:48.400><c> had</c><00:02:48.560><c> a</c><00:02:48.800><c> four</c>

00:02:49.270 --> 00:02:49.280 align:start position:0%
could have a five if we had a four
 

00:02:49.280 --> 00:02:51.589 align:start position:0%
could have a five if we had a four
we<00:02:49.440><c> know</c><00:02:49.760><c> four</c><00:02:50.160><c> maps</c><00:02:50.480><c> to</c><00:02:50.640><c> the</c><00:02:50.879><c> next</c><00:02:51.280><c> three</c>

00:02:51.589 --> 00:02:51.599 align:start position:0%
we know four maps to the next three
 

00:02:51.599 --> 00:02:52.869 align:start position:0%
we know four maps to the next three
characters<00:02:52.160><c> after</c><00:02:52.560><c> this</c>

00:02:52.869 --> 00:02:52.879 align:start position:0%
characters after this
 

00:02:52.879 --> 00:02:55.750 align:start position:0%
characters after this
so<00:02:53.200><c> g</c><00:02:53.680><c> h</c><00:02:54.400><c> i</c><00:02:54.720><c> i</c><00:02:54.800><c> think</c><00:02:54.959><c> unless</c><00:02:55.280><c> i'm</c><00:02:55.360><c> forgetting</c>

00:02:55.750 --> 00:02:55.760 align:start position:0%
so g h i i think unless i'm forgetting
 

00:02:55.760 --> 00:02:56.550 align:start position:0%
so g h i i think unless i'm forgetting
something

00:02:56.550 --> 00:02:56.560 align:start position:0%
something
 

00:02:56.560 --> 00:02:58.710 align:start position:0%
something
and<00:02:57.040><c> basically</c><00:02:57.840><c> we</c><00:02:58.000><c> could</c><00:02:58.159><c> have</c><00:02:58.480><c> any</c>

00:02:58.710 --> 00:02:58.720 align:start position:0%
and basically we could have any
 

00:02:58.720 --> 00:02:59.670 align:start position:0%
and basically we could have any
character<00:02:59.200><c> right</c><00:02:59.360><c> from</c>

00:02:59.670 --> 00:02:59.680 align:start position:0%
character right from
 

00:02:59.680 --> 00:03:01.350 align:start position:0%
character right from
two<00:03:00.000><c> through</c><00:03:00.319><c> nine</c><00:03:00.640><c> so</c><00:03:00.800><c> we're</c><00:03:00.959><c> going</c><00:03:01.040><c> to</c><00:03:01.120><c> need</c>

00:03:01.350 --> 00:03:01.360 align:start position:0%
two through nine so we're going to need
 

00:03:01.360 --> 00:03:03.190 align:start position:0%
two through nine so we're going to need
to<00:03:01.519><c> create</c><00:03:02.000><c> a</c><00:03:02.239><c> hash</c><00:03:02.640><c> map</c>

00:03:03.190 --> 00:03:03.200 align:start position:0%
to create a hash map
 

00:03:03.200 --> 00:03:05.270 align:start position:0%
to create a hash map
or<00:03:03.440><c> some</c><00:03:03.599><c> kind</c><00:03:03.840><c> of</c><00:03:04.000><c> way</c><00:03:04.159><c> to</c><00:03:04.400><c> map</c><00:03:05.040><c> every</c>

00:03:05.270 --> 00:03:05.280 align:start position:0%
or some kind of way to map every
 

00:03:05.280 --> 00:03:06.229 align:start position:0%
or some kind of way to map every
character<00:03:05.760><c> from</c>

00:03:06.229 --> 00:03:06.239 align:start position:0%
character from
 

00:03:06.239 --> 00:03:08.790 align:start position:0%
character from
or<00:03:06.400><c> basically</c><00:03:06.879><c> every</c><00:03:07.280><c> digit</c><00:03:07.760><c> from</c><00:03:08.159><c> two</c><00:03:08.640><c> all</c>

00:03:08.790 --> 00:03:08.800 align:start position:0%
or basically every digit from two all
 

00:03:08.800 --> 00:03:09.509 align:start position:0%
or basically every digit from two all
the<00:03:08.959><c> way</c>

00:03:09.509 --> 00:03:09.519 align:start position:0%
the way
 

00:03:09.519 --> 00:03:11.910 align:start position:0%
the way
to<00:03:09.760><c> five</c><00:03:10.080><c> six</c><00:03:10.400><c> seven</c><00:03:10.879><c> all</c><00:03:11.040><c> the</c><00:03:11.120><c> way</c><00:03:11.280><c> to</c><00:03:11.519><c> nine</c>

00:03:11.910 --> 00:03:11.920 align:start position:0%
to five six seven all the way to nine
 

00:03:11.920 --> 00:03:12.869 align:start position:0%
to five six seven all the way to nine
right<00:03:12.400><c> and</c>

00:03:12.869 --> 00:03:12.879 align:start position:0%
right and
 

00:03:12.879 --> 00:03:15.190 align:start position:0%
right and
map<00:03:13.200><c> them</c><00:03:13.440><c> to</c><00:03:13.599><c> the</c><00:03:13.840><c> characters</c><00:03:14.400><c> that</c><00:03:14.640><c> they</c><00:03:15.040><c> end</c>

00:03:15.190 --> 00:03:15.200 align:start position:0%
map them to the characters that they end
 

00:03:15.200 --> 00:03:16.790 align:start position:0%
map them to the characters that they end
up<00:03:15.360><c> being</c><00:03:15.680><c> right</c><00:03:15.840><c> we</c><00:03:16.000><c> know</c><00:03:16.239><c> nine</c><00:03:16.560><c> is</c>

00:03:16.790 --> 00:03:16.800 align:start position:0%
up being right we know nine is
 

00:03:16.800 --> 00:03:19.270 align:start position:0%
up being right we know nine is
i<00:03:16.879><c> think</c><00:03:17.040><c> gonna</c><00:03:17.280><c> be</c><00:03:17.440><c> xyz</c><00:03:18.640><c> we're</c><00:03:18.879><c> basically</c>

00:03:19.270 --> 00:03:19.280 align:start position:0%
i think gonna be xyz we're basically
 

00:03:19.280 --> 00:03:20.309 align:start position:0%
i think gonna be xyz we're basically
gonna<00:03:19.519><c> have</c><00:03:19.599><c> to</c><00:03:19.840><c> hard</c>

00:03:20.309 --> 00:03:20.319 align:start position:0%
gonna have to hard
 

00:03:20.319 --> 00:03:22.390 align:start position:0%
gonna have to hard
code<00:03:20.640><c> this</c><00:03:20.879><c> map</c><00:03:21.280><c> of</c><00:03:21.440><c> characters</c><00:03:22.000><c> there's</c><00:03:22.159><c> not</c>

00:03:22.390 --> 00:03:22.400 align:start position:0%
code this map of characters there's not
 

00:03:22.400 --> 00:03:24.550 align:start position:0%
code this map of characters there's not
like<00:03:22.560><c> a</c><00:03:22.720><c> clean</c><00:03:22.959><c> way</c><00:03:23.120><c> to</c><00:03:23.280><c> do</c><00:03:23.440><c> it</c><00:03:23.599><c> mainly</c><00:03:24.080><c> because</c>

00:03:24.550 --> 00:03:24.560 align:start position:0%
like a clean way to do it mainly because
 

00:03:24.560 --> 00:03:25.589 align:start position:0%
like a clean way to do it mainly because
some<00:03:24.720><c> of</c><00:03:24.799><c> the</c><00:03:24.959><c> characters</c>

00:03:25.589 --> 00:03:25.599 align:start position:0%
some of the characters
 

00:03:25.599 --> 00:03:28.149 align:start position:0%
some of the characters
i<00:03:25.680><c> think</c><00:03:26.000><c> seven</c><00:03:26.319><c> has</c><00:03:26.560><c> four</c><00:03:26.879><c> characters</c><00:03:27.920><c> right</c>

00:03:28.149 --> 00:03:28.159 align:start position:0%
i think seven has four characters right
 

00:03:28.159 --> 00:03:29.350 align:start position:0%
i think seven has four characters right
seven<00:03:28.400><c> is</c><00:03:28.560><c> mapped</c><00:03:28.799><c> to</c><00:03:28.879><c> four</c><00:03:29.120><c> different</c>

00:03:29.350 --> 00:03:29.360 align:start position:0%
seven is mapped to four different
 

00:03:29.360 --> 00:03:30.229 align:start position:0%
seven is mapped to four different
characters<00:03:29.840><c> and</c>

00:03:30.229 --> 00:03:30.239 align:start position:0%
characters and
 

00:03:30.239 --> 00:03:32.470 align:start position:0%
characters and
so<00:03:30.480><c> whatever</c><00:03:30.879><c> but</c><00:03:31.200><c> this</c><00:03:31.360><c> is</c><00:03:31.519><c> a</c><00:03:31.599><c> pretty</c><00:03:31.920><c> small</c>

00:03:32.470 --> 00:03:32.480 align:start position:0%
so whatever but this is a pretty small
 

00:03:32.480 --> 00:03:34.630 align:start position:0%
so whatever but this is a pretty small
hash<00:03:32.799><c> map</c><00:03:33.120><c> right</c><00:03:33.360><c> so</c><00:03:33.519><c> it's</c><00:03:33.680><c> not</c><00:03:33.920><c> a</c><00:03:34.000><c> big</c><00:03:34.239><c> deal</c><00:03:34.480><c> if</c>

00:03:34.630 --> 00:03:34.640 align:start position:0%
hash map right so it's not a big deal if
 

00:03:34.640 --> 00:03:36.149 align:start position:0%
hash map right so it's not a big deal if
we<00:03:34.720><c> have</c><00:03:34.879><c> to</c><00:03:34.959><c> hard</c><00:03:35.280><c> code</c><00:03:35.599><c> it</c>

00:03:36.149 --> 00:03:36.159 align:start position:0%
we have to hard code it
 

00:03:36.159 --> 00:03:38.070 align:start position:0%
we have to hard code it
but<00:03:36.319><c> now</c><00:03:36.560><c> let's</c><00:03:36.799><c> just</c><00:03:36.959><c> look</c><00:03:37.120><c> at</c><00:03:37.360><c> this</c><00:03:37.680><c> problem</c>

00:03:38.070 --> 00:03:38.080 align:start position:0%
but now let's just look at this problem
 

00:03:38.080 --> 00:03:40.390 align:start position:0%
but now let's just look at this problem
itself<00:03:38.640><c> how</c><00:03:38.879><c> are</c><00:03:38.959><c> we</c><00:03:39.120><c> going</c><00:03:39.200><c> to</c><00:03:39.360><c> solve</c><00:03:39.680><c> it</c><00:03:39.840><c> well</c>

00:03:40.390 --> 00:03:40.400 align:start position:0%
itself how are we going to solve it well
 

00:03:40.400 --> 00:03:43.509 align:start position:0%
itself how are we going to solve it well
so<00:03:41.040><c> the</c><00:03:41.280><c> first</c><00:03:41.680><c> character</c><00:03:42.400><c> is</c><00:03:42.959><c> 2</c>

00:03:43.509 --> 00:03:43.519 align:start position:0%
so the first character is 2
 

00:03:43.519 --> 00:03:46.710 align:start position:0%
so the first character is 2
right<00:03:44.080><c> so</c><00:03:44.400><c> 2</c><00:03:45.120><c> could</c><00:03:45.360><c> map</c><00:03:45.599><c> to</c><00:03:46.000><c> three</c>

00:03:46.710 --> 00:03:46.720 align:start position:0%
right so 2 could map to three
 

00:03:46.720 --> 00:03:49.670 align:start position:0%
right so 2 could map to three
different<00:03:47.440><c> characters</c><00:03:48.560><c> so</c><00:03:49.040><c> two</c><00:03:49.280><c> being</c><00:03:49.519><c> the</c>

00:03:49.670 --> 00:03:49.680 align:start position:0%
different characters so two being the
 

00:03:49.680 --> 00:03:51.830 align:start position:0%
different characters so two being the
first<00:03:49.920><c> digit</c><00:03:50.319><c> it</c><00:03:50.400><c> can</c><00:03:50.560><c> map</c><00:03:50.799><c> to</c><00:03:51.040><c> a</c>

00:03:51.830 --> 00:03:51.840 align:start position:0%
first digit it can map to a
 

00:03:51.840 --> 00:03:55.830 align:start position:0%
first digit it can map to a
b<00:03:52.400><c> or</c><00:03:52.720><c> c</c><00:03:53.120><c> right</c><00:03:53.920><c> and</c><00:03:54.400><c> the</c><00:03:54.799><c> next</c><00:03:55.200><c> character</c><00:03:55.680><c> we</c>

00:03:55.830 --> 00:03:55.840 align:start position:0%
b or c right and the next character we
 

00:03:55.840 --> 00:03:57.830 align:start position:0%
b or c right and the next character we
know<00:03:56.159><c> or</c><00:03:56.319><c> the</c><00:03:56.400><c> next</c><00:03:56.640><c> digit</c><00:03:57.120><c> is</c>

00:03:57.830 --> 00:03:57.840 align:start position:0%
know or the next digit is
 

00:03:57.840 --> 00:04:01.110 align:start position:0%
know or the next digit is
three<00:03:58.720><c> so</c><00:03:59.360><c> from</c><00:03:59.760><c> a</c><00:04:00.080><c> we</c><00:04:00.239><c> could</c><00:04:00.400><c> have</c><00:04:00.720><c> three</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
three so from a we could have three
 

00:04:01.120 --> 00:04:01.990 align:start position:0%
three so from a we could have three
different

00:04:01.990 --> 00:04:02.000 align:start position:0%
different
 

00:04:02.000 --> 00:04:04.789 align:start position:0%
different
characters<00:04:02.560><c> that</c><00:04:02.959><c> follow</c><00:04:03.599><c> after</c><00:04:04.080><c> it</c><00:04:04.480><c> we</c><00:04:04.640><c> could</c>

00:04:04.789 --> 00:04:04.799 align:start position:0%
characters that follow after it we could
 

00:04:04.799 --> 00:04:05.670 align:start position:0%
characters that follow after it we could
have<00:04:04.959><c> a</c><00:04:05.200><c> d</c>

00:04:05.670 --> 00:04:05.680 align:start position:0%
have a d
 

00:04:05.680 --> 00:04:07.990 align:start position:0%
have a d
we<00:04:05.840><c> could</c><00:04:06.000><c> have</c><00:04:06.239><c> an</c><00:04:06.480><c> e</c><00:04:06.799><c> or</c><00:04:07.040><c> we</c><00:04:07.120><c> could</c><00:04:07.280><c> have</c><00:04:07.439><c> an</c><00:04:07.760><c> f</c>

00:04:07.990 --> 00:04:08.000 align:start position:0%
we could have an e or we could have an f
 

00:04:08.000 --> 00:04:09.509 align:start position:0%
we could have an e or we could have an f
and<00:04:08.080><c> that's</c><00:04:08.400><c> going</c><00:04:08.480><c> to</c><00:04:08.560><c> be</c><00:04:08.799><c> true</c><00:04:09.120><c> for</c>

00:04:09.509 --> 00:04:09.519 align:start position:0%
and that's going to be true for
 

00:04:09.519 --> 00:04:12.149 align:start position:0%
and that's going to be true for
every<00:04:10.000><c> single</c><00:04:10.799><c> one</c><00:04:11.040><c> of</c><00:04:11.200><c> these</c><00:04:11.599><c> right</c><00:04:11.840><c> we</c><00:04:12.000><c> could</c>

00:04:12.149 --> 00:04:12.159 align:start position:0%
every single one of these right we could
 

00:04:12.159 --> 00:04:13.589 align:start position:0%
every single one of these right we could
basically<00:04:12.560><c> put</c><00:04:12.720><c> a</c><00:04:12.879><c> d</c>

00:04:13.589 --> 00:04:13.599 align:start position:0%
basically put a d
 

00:04:13.599 --> 00:04:16.949 align:start position:0%
basically put a d
e<00:04:14.319><c> f</c><00:04:14.799><c> after</c><00:04:15.280><c> each</c><00:04:15.599><c> of</c><00:04:15.760><c> them</c><00:04:16.400><c> and</c><00:04:16.560><c> this</c>

00:04:16.949 --> 00:04:16.959 align:start position:0%
e f after each of them and this
 

00:04:16.959 --> 00:04:20.150 align:start position:0%
e f after each of them and this
is<00:04:17.120><c> the</c><00:04:17.359><c> entire</c><00:04:17.840><c> backtracking</c><00:04:18.799><c> tree</c><00:04:19.280><c> so</c><00:04:19.759><c> based</c>

00:04:20.150 --> 00:04:20.160 align:start position:0%
is the entire backtracking tree so based
 

00:04:20.160 --> 00:04:20.710 align:start position:0%
is the entire backtracking tree so based
on<00:04:20.320><c> this</c>

00:04:20.710 --> 00:04:20.720 align:start position:0%
on this
 

00:04:20.720 --> 00:04:22.550 align:start position:0%
on this
what's<00:04:21.120><c> our</c><00:04:21.280><c> solution</c><00:04:21.759><c> because</c><00:04:22.000><c> remember</c><00:04:22.400><c> we</c>

00:04:22.550 --> 00:04:22.560 align:start position:0%
what's our solution because remember we
 

00:04:22.560 --> 00:04:23.990 align:start position:0%
what's our solution because remember we
want<00:04:22.800><c> to</c><00:04:22.880><c> know</c><00:04:23.120><c> the</c><00:04:23.360><c> strings</c>

00:04:23.990 --> 00:04:24.000 align:start position:0%
want to know the strings
 

00:04:24.000 --> 00:04:26.390 align:start position:0%
want to know the strings
that<00:04:24.240><c> this</c><00:04:24.400><c> could</c><00:04:24.639><c> map</c><00:04:24.880><c> to</c><00:04:25.120><c> well</c><00:04:25.440><c> this</c><00:04:25.840><c> is</c><00:04:26.080><c> one</c>

00:04:26.390 --> 00:04:26.400 align:start position:0%
that this could map to well this is one
 

00:04:26.400 --> 00:04:27.189 align:start position:0%
that this could map to well this is one
string

00:04:27.189 --> 00:04:27.199 align:start position:0%
string
 

00:04:27.199 --> 00:04:29.749 align:start position:0%
string
this<00:04:27.600><c> is</c><00:04:27.840><c> one</c><00:04:28.160><c> string</c><00:04:28.960><c> this</c><00:04:29.280><c> is</c><00:04:29.440><c> another</c>

00:04:29.749 --> 00:04:29.759 align:start position:0%
this is one string this is another
 

00:04:29.759 --> 00:04:31.030 align:start position:0%
this is one string this is another
string<00:04:30.080><c> so</c><00:04:30.240><c> basically</c><00:04:30.720><c> for</c>

00:04:31.030 --> 00:04:31.040 align:start position:0%
string so basically for
 

00:04:31.040 --> 00:04:33.990 align:start position:0%
string so basically for
each<00:04:31.280><c> of</c><00:04:31.440><c> the</c><00:04:31.680><c> leaf</c><00:04:32.080><c> nodes</c><00:04:33.120><c> in</c><00:04:33.360><c> this</c><00:04:33.680><c> tree</c>

00:04:33.990 --> 00:04:34.000 align:start position:0%
each of the leaf nodes in this tree
 

00:04:34.000 --> 00:04:34.550 align:start position:0%
each of the leaf nodes in this tree
we're<00:04:34.160><c> going</c><00:04:34.320><c> to</c>

00:04:34.550 --> 00:04:34.560 align:start position:0%
we're going to
 

00:04:34.560 --> 00:04:37.670 align:start position:0%
we're going to
follow<00:04:35.520><c> the</c><00:04:35.759><c> entire</c><00:04:36.880><c> like</c><00:04:37.199><c> list</c><00:04:37.440><c> of</c>

00:04:37.670 --> 00:04:37.680 align:start position:0%
follow the entire like list of
 

00:04:37.680 --> 00:04:39.189 align:start position:0%
follow the entire like list of
characters<00:04:38.080><c> that</c><00:04:38.240><c> came</c><00:04:38.400><c> before</c><00:04:38.800><c> that's</c><00:04:39.040><c> going</c>

00:04:39.189 --> 00:04:39.199 align:start position:0%
characters that came before that's going
 

00:04:39.199 --> 00:04:41.670 align:start position:0%
characters that came before that's going
to<00:04:39.360><c> be</c><00:04:39.680><c> the</c><00:04:40.000><c> output</c><00:04:40.320><c> strings</c><00:04:40.720><c> right</c><00:04:40.960><c> a</c>

00:04:41.670 --> 00:04:41.680 align:start position:0%
to be the output strings right a
 

00:04:41.680 --> 00:04:44.710 align:start position:0%
to be the output strings right a
a<00:04:41.919><c> d</c><00:04:42.800><c> a</c><00:04:43.120><c> e</c><00:04:43.919><c> a</c><00:04:44.240><c> f</c>

00:04:44.710 --> 00:04:44.720 align:start position:0%
a d a e a f
 

00:04:44.720 --> 00:04:47.749 align:start position:0%
a d a e a f
and<00:04:45.040><c> so</c><00:04:45.199><c> on</c><00:04:45.360><c> right</c><00:04:45.680><c> b</c><00:04:45.919><c> d</c><00:04:46.639><c> b</c><00:04:46.960><c> e</c>

00:04:47.749 --> 00:04:47.759 align:start position:0%
and so on right b d b e
 

00:04:47.759 --> 00:04:51.909 align:start position:0%
and so on right b d b e
b<00:04:48.080><c> f</c><00:04:48.400><c> and</c><00:04:48.560><c> the</c><00:04:48.720><c> exact</c><00:04:49.040><c> same</c><00:04:49.280><c> thing</c><00:04:49.600><c> for</c><00:04:50.000><c> c</c>

00:04:51.909 --> 00:04:51.919 align:start position:0%
b f and the exact same thing for c
 

00:04:51.919 --> 00:04:53.990 align:start position:0%
b f and the exact same thing for c
so<00:04:52.160><c> when</c><00:04:52.320><c> you</c><00:04:52.479><c> visualize</c><00:04:53.120><c> it</c><00:04:53.280><c> like</c><00:04:53.440><c> this</c><00:04:53.759><c> this</c>

00:04:53.990 --> 00:04:54.000 align:start position:0%
so when you visualize it like this this
 

00:04:54.000 --> 00:04:56.550 align:start position:0%
so when you visualize it like this this
is<00:04:54.160><c> actually</c><00:04:54.560><c> a</c><00:04:54.800><c> pretty</c><00:04:55.280><c> simple</c><00:04:55.840><c> problem</c>

00:04:56.550 --> 00:04:56.560 align:start position:0%
is actually a pretty simple problem
 

00:04:56.560 --> 00:04:58.710 align:start position:0%
is actually a pretty simple problem
so<00:04:56.800><c> now</c><00:04:56.960><c> you</c><00:04:57.120><c> just</c><00:04:57.280><c> need</c><00:04:57.440><c> to</c><00:04:57.680><c> know</c><00:04:58.000><c> how</c><00:04:58.320><c> to</c>

00:04:58.710 --> 00:04:58.720 align:start position:0%
so now you just need to know how to
 

00:04:58.720 --> 00:05:00.870 align:start position:0%
so now you just need to know how to
write<00:04:59.040><c> this</c><00:04:59.360><c> backtracking</c><00:05:00.160><c> algorithm</c><00:05:00.720><c> and</c>

00:05:00.870 --> 00:05:00.880 align:start position:0%
write this backtracking algorithm and
 

00:05:00.880 --> 00:05:02.710 align:start position:0%
write this backtracking algorithm and
i'm<00:05:00.960><c> going</c><00:05:01.039><c> to</c><00:05:01.120><c> show</c><00:05:01.280><c> you</c><00:05:01.520><c> how</c><00:05:01.759><c> to</c><00:05:02.000><c> do</c><00:05:02.240><c> this</c>

00:05:02.710 --> 00:05:02.720 align:start position:0%
i'm going to show you how to do this
 

00:05:02.720 --> 00:05:05.510 align:start position:0%
i'm going to show you how to do this
recursively<00:05:04.160><c> but</c><00:05:04.320><c> before</c><00:05:04.639><c> i</c><00:05:04.800><c> do</c><00:05:04.960><c> that</c><00:05:05.199><c> the</c>

00:05:05.510 --> 00:05:05.520 align:start position:0%
recursively but before i do that the
 

00:05:05.520 --> 00:05:07.110 align:start position:0%
recursively but before i do that the
time<00:05:05.759><c> complexity</c><00:05:06.400><c> for</c><00:05:06.639><c> this</c>

00:05:07.110 --> 00:05:07.120 align:start position:0%
time complexity for this
 

00:05:07.120 --> 00:05:10.150 align:start position:0%
time complexity for this
is<00:05:07.520><c> basically</c><00:05:08.160><c> the</c><00:05:08.479><c> number</c><00:05:08.880><c> of</c><00:05:09.280><c> combinations</c>

00:05:10.150 --> 00:05:10.160 align:start position:0%
is basically the number of combinations
 

00:05:10.160 --> 00:05:11.590 align:start position:0%
is basically the number of combinations
that<00:05:10.320><c> we're</c><00:05:10.479><c> going</c><00:05:10.560><c> to</c><00:05:10.720><c> have</c>

00:05:11.590 --> 00:05:11.600 align:start position:0%
that we're going to have
 

00:05:11.600 --> 00:05:13.909 align:start position:0%
that we're going to have
so<00:05:12.240><c> the</c><00:05:12.479><c> question</c><00:05:12.880><c> is</c><00:05:13.039><c> how</c><00:05:13.199><c> many</c><00:05:13.440><c> different</c>

00:05:13.909 --> 00:05:13.919 align:start position:0%
so the question is how many different
 

00:05:13.919 --> 00:05:14.790 align:start position:0%
so the question is how many different
output

00:05:14.790 --> 00:05:14.800 align:start position:0%
output
 

00:05:14.800 --> 00:05:17.270 align:start position:0%
output
could<00:05:15.039><c> we</c><00:05:15.280><c> have</c><00:05:15.680><c> for</c><00:05:16.000><c> a</c><00:05:16.240><c> string</c><00:05:16.800><c> let's</c><00:05:16.960><c> say</c><00:05:17.120><c> the</c>

00:05:17.270 --> 00:05:17.280 align:start position:0%
could we have for a string let's say the
 

00:05:17.280 --> 00:05:18.870 align:start position:0%
could we have for a string let's say the
input<00:05:17.680><c> string</c><00:05:18.080><c> is</c><00:05:18.320><c> length</c>

00:05:18.870 --> 00:05:18.880 align:start position:0%
input string is length
 

00:05:18.880 --> 00:05:21.110 align:start position:0%
input string is length
n<00:05:19.440><c> how</c><00:05:19.600><c> many</c><00:05:19.840><c> different</c><00:05:20.320><c> outputs</c><00:05:20.800><c> could</c><00:05:20.960><c> we</c>

00:05:21.110 --> 00:05:21.120 align:start position:0%
n how many different outputs could we
 

00:05:21.120 --> 00:05:22.790 align:start position:0%
n how many different outputs could we
have<00:05:21.600><c> well</c><00:05:21.919><c> since</c><00:05:22.160><c> we</c><00:05:22.240><c> know</c><00:05:22.479><c> that</c><00:05:22.560><c> there</c><00:05:22.720><c> are</c>

00:05:22.790 --> 00:05:22.800 align:start position:0%
have well since we know that there are
 

00:05:22.800 --> 00:05:24.070 align:start position:0%
have well since we know that there are
some<00:05:23.039><c> characters</c><00:05:23.440><c> like</c><00:05:23.680><c> i</c><00:05:23.759><c> think</c>

00:05:24.070 --> 00:05:24.080 align:start position:0%
some characters like i think
 

00:05:24.080 --> 00:05:26.550 align:start position:0%
some characters like i think
nine<00:05:24.479><c> maps</c><00:05:24.800><c> to</c><00:05:25.039><c> four</c><00:05:25.280><c> different</c><00:05:25.680><c> characters</c><00:05:26.479><c> i</c>

00:05:26.550 --> 00:05:26.560 align:start position:0%
nine maps to four different characters i
 

00:05:26.560 --> 00:05:27.350 align:start position:0%
nine maps to four different characters i
think<00:05:26.800><c> w</c>

00:05:27.350 --> 00:05:27.360 align:start position:0%
think w
 

00:05:27.360 --> 00:05:30.390 align:start position:0%
think w
x<00:05:27.600><c> y</c><00:05:27.759><c> z</c><00:05:28.000><c> actually</c><00:05:28.960><c> so</c><00:05:29.280><c> the</c><00:05:29.440><c> brute</c><00:05:29.840><c> force</c><00:05:30.320><c> is</c>

00:05:30.390 --> 00:05:30.400 align:start position:0%
x y z actually so the brute force is
 

00:05:30.400 --> 00:05:31.430 align:start position:0%
x y z actually so the brute force is
gonna<00:05:30.720><c> be</c>

00:05:31.430 --> 00:05:31.440 align:start position:0%
gonna be
 

00:05:31.440 --> 00:05:34.950 align:start position:0%
gonna be
four<00:05:32.000><c> to</c><00:05:32.160><c> the</c><00:05:32.400><c> power</c><00:05:32.960><c> of</c><00:05:33.520><c> n</c><00:05:34.080><c> that's</c><00:05:34.400><c> how</c><00:05:34.560><c> many</c>

00:05:34.950 --> 00:05:34.960 align:start position:0%
four to the power of n that's how many
 

00:05:34.960 --> 00:05:36.950 align:start position:0%
four to the power of n that's how many
outputs<00:05:35.440><c> we</c><00:05:35.600><c> could</c><00:05:35.759><c> actually</c><00:05:36.160><c> have</c><00:05:36.560><c> right</c>

00:05:36.950 --> 00:05:36.960 align:start position:0%
outputs we could actually have right
 

00:05:36.960 --> 00:05:38.070 align:start position:0%
outputs we could actually have right
because<00:05:37.199><c> maybe</c><00:05:37.520><c> we'd</c><00:05:37.759><c> get</c>

00:05:38.070 --> 00:05:38.080 align:start position:0%
because maybe we'd get
 

00:05:38.080 --> 00:05:42.629 align:start position:0%
because maybe we'd get
a<00:05:38.320><c> string</c><00:05:39.199><c> s</c><00:05:39.680><c> equal</c><00:05:40.840><c> 9999</c><00:05:41.919><c> right</c><00:05:42.240><c> so</c>

00:05:42.629 --> 00:05:42.639 align:start position:0%
a string s equal 9999 right so
 

00:05:42.639 --> 00:05:44.469 align:start position:0%
a string s equal 9999 right so
basically<00:05:43.039><c> we'd</c><00:05:43.199><c> have</c><00:05:43.440><c> four</c><00:05:43.759><c> choices</c><00:05:44.320><c> for</c>

00:05:44.469 --> 00:05:44.479 align:start position:0%
basically we'd have four choices for
 

00:05:44.479 --> 00:05:46.790 align:start position:0%
basically we'd have four choices for
each<00:05:44.639><c> of</c><00:05:44.800><c> those</c><00:05:44.960><c> characters</c><00:05:45.360><c> so</c><00:05:45.520><c> 4</c><00:05:45.759><c> times</c><00:05:46.080><c> 4</c>

00:05:46.790 --> 00:05:46.800 align:start position:0%
each of those characters so 4 times 4
 

00:05:46.800 --> 00:05:49.749 align:start position:0%
each of those characters so 4 times 4
basically<00:05:47.360><c> 4</c><00:05:47.600><c> to</c><00:05:47.759><c> the</c><00:05:47.919><c> power</c><00:05:48.479><c> of</c><00:05:48.960><c> n</c><00:05:49.280><c> which</c><00:05:49.520><c> is</c>

00:05:49.749 --> 00:05:49.759 align:start position:0%
basically 4 to the power of n which is
 

00:05:49.759 --> 00:05:50.150 align:start position:0%
basically 4 to the power of n which is
the

00:05:50.150 --> 00:05:50.160 align:start position:0%
the
 

00:05:50.160 --> 00:05:52.230 align:start position:0%
the
length<00:05:50.560><c> of</c><00:05:50.639><c> the</c><00:05:50.880><c> input</c><00:05:51.199><c> string</c><00:05:51.520><c> right</c><00:05:51.680><c> so</c>

00:05:52.230 --> 00:05:52.240 align:start position:0%
length of the input string right so
 

00:05:52.240 --> 00:05:53.430 align:start position:0%
length of the input string right so
that's<00:05:52.560><c> the</c><00:05:52.880><c> number</c>

00:05:53.430 --> 00:05:53.440 align:start position:0%
that's the number
 

00:05:53.440 --> 00:05:54.870 align:start position:0%
that's the number
of<00:05:53.759><c> output</c><00:05:54.080><c> strings</c><00:05:54.400><c> that</c><00:05:54.479><c> we're</c><00:05:54.639><c> going</c><00:05:54.720><c> to</c>

00:05:54.870 --> 00:05:54.880 align:start position:0%
of output strings that we're going to
 

00:05:54.880 --> 00:05:56.950 align:start position:0%
of output strings that we're going to
have<00:05:55.440><c> and</c><00:05:55.680><c> the</c><00:05:56.000><c> length</c><00:05:56.400><c> of</c><00:05:56.639><c> each</c>

00:05:56.950 --> 00:05:56.960 align:start position:0%
have and the length of each
 

00:05:56.960 --> 00:05:59.029 align:start position:0%
have and the length of each
output<00:05:57.360><c> string</c><00:05:57.840><c> is</c><00:05:58.000><c> going</c><00:05:58.160><c> to</c><00:05:58.240><c> be</c><00:05:58.400><c> the</c><00:05:58.560><c> same</c><00:05:58.880><c> as</c>

00:05:59.029 --> 00:05:59.039 align:start position:0%
output string is going to be the same as
 

00:05:59.039 --> 00:06:00.390 align:start position:0%
output string is going to be the same as
the<00:05:59.360><c> length</c><00:05:59.840><c> of</c><00:06:00.080><c> the</c>

00:06:00.390 --> 00:06:00.400 align:start position:0%
the length of the
 

00:06:00.400 --> 00:06:03.510 align:start position:0%
the length of the
input<00:06:00.880><c> string</c><00:06:01.280><c> right</c><00:06:02.000><c> so</c><00:06:02.400><c> really</c><00:06:03.039><c> the</c><00:06:03.280><c> time</c>

00:06:03.510 --> 00:06:03.520 align:start position:0%
input string right so really the time
 

00:06:03.520 --> 00:06:04.710 align:start position:0%
input string right so really the time
complexity<00:06:04.080><c> is</c><00:06:04.160><c> going</c><00:06:04.240><c> to</c><00:06:04.319><c> be</c>

00:06:04.710 --> 00:06:04.720 align:start position:0%
complexity is going to be
 

00:06:04.720 --> 00:06:07.909 align:start position:0%
complexity is going to be
big<00:06:05.199><c> o</c><00:06:05.919><c> of</c><00:06:06.479><c> n</c><00:06:07.280><c> times</c>

00:06:07.909 --> 00:06:07.919 align:start position:0%
big o of n times
 

00:06:07.919 --> 00:06:10.950 align:start position:0%
big o of n times
4<00:06:08.319><c> to</c><00:06:08.479><c> the</c><00:06:08.720><c> n</c><00:06:09.520><c> and</c><00:06:09.680><c> basically</c><00:06:10.240><c> this</c><00:06:10.560><c> is</c><00:06:10.720><c> the</c>

00:06:10.950 --> 00:06:10.960 align:start position:0%
4 to the n and basically this is the
 

00:06:10.960 --> 00:06:13.430 align:start position:0%
4 to the n and basically this is the
worst<00:06:11.440><c> case</c><00:06:11.759><c> time</c><00:06:12.000><c> complexity</c>

00:06:13.430 --> 00:06:13.440 align:start position:0%
worst case time complexity
 

00:06:13.440 --> 00:06:15.830 align:start position:0%
worst case time complexity
okay<00:06:13.680><c> so</c><00:06:14.000><c> now</c><00:06:14.240><c> let's</c><00:06:14.560><c> get</c><00:06:14.880><c> into</c><00:06:15.199><c> the</c><00:06:15.520><c> code</c>

00:06:15.830 --> 00:06:15.840 align:start position:0%
okay so now let's get into the code
 

00:06:15.840 --> 00:06:16.790 align:start position:0%
okay so now let's get into the code
which<00:06:16.080><c> is</c><00:06:16.160><c> going</c><00:06:16.240><c> to</c><00:06:16.319><c> be</c>

00:06:16.790 --> 00:06:16.800 align:start position:0%
which is going to be
 

00:06:16.800 --> 00:06:18.790 align:start position:0%
which is going to be
fairly<00:06:17.360><c> short</c><00:06:17.759><c> so</c><00:06:18.000><c> the</c><00:06:18.080><c> first</c><00:06:18.319><c> thing</c><00:06:18.479><c> we</c><00:06:18.639><c> want</c>

00:06:18.790 --> 00:06:18.800 align:start position:0%
fairly short so the first thing we want
 

00:06:18.800 --> 00:06:19.990 align:start position:0%
fairly short so the first thing we want
to<00:06:18.880><c> do</c><00:06:19.039><c> is</c><00:06:19.199><c> have</c><00:06:19.440><c> a</c><00:06:19.520><c> result</c>

00:06:19.990 --> 00:06:20.000 align:start position:0%
to do is have a result
 

00:06:20.000 --> 00:06:22.150 align:start position:0%
to do is have a result
this<00:06:20.160><c> result</c><00:06:20.560><c> is</c><00:06:20.720><c> going</c><00:06:20.800><c> to</c><00:06:20.880><c> contain</c><00:06:21.680><c> the</c>

00:06:22.150 --> 00:06:22.160 align:start position:0%
this result is going to contain the
 

00:06:22.160 --> 00:06:23.830 align:start position:0%
this result is going to contain the
combination<00:06:22.880><c> strings</c><00:06:23.199><c> that</c><00:06:23.280><c> we're</c><00:06:23.440><c> trying</c><00:06:23.680><c> to</c>

00:06:23.830 --> 00:06:23.840 align:start position:0%
combination strings that we're trying to
 

00:06:23.840 --> 00:06:24.550 align:start position:0%
combination strings that we're trying to
build

00:06:24.550 --> 00:06:24.560 align:start position:0%
build
 

00:06:24.560 --> 00:06:26.150 align:start position:0%
build
and<00:06:24.800><c> the</c><00:06:24.960><c> next</c><00:06:25.199><c> thing</c><00:06:25.360><c> we</c><00:06:25.440><c> want</c><00:06:25.600><c> to</c><00:06:25.759><c> do</c><00:06:26.000><c> is</c>

00:06:26.150 --> 00:06:26.160 align:start position:0%
and the next thing we want to do is
 

00:06:26.160 --> 00:06:28.629 align:start position:0%
and the next thing we want to do is
create<00:06:26.560><c> a</c><00:06:26.800><c> map</c><00:06:27.280><c> of</c><00:06:27.520><c> digits</c><00:06:28.000><c> right</c><00:06:28.240><c> we</c><00:06:28.400><c> want</c><00:06:28.479><c> to</c>

00:06:28.629 --> 00:06:28.639 align:start position:0%
create a map of digits right we want to
 

00:06:28.639 --> 00:06:29.029 align:start position:0%
create a map of digits right we want to
take

00:06:29.029 --> 00:06:29.039 align:start position:0%
take
 

00:06:29.039 --> 00:06:32.550 align:start position:0%
take
every<00:06:29.600><c> single</c><00:06:30.960><c> input</c><00:06:31.680><c> digit</c><00:06:32.080><c> that</c><00:06:32.160><c> could</c><00:06:32.319><c> be</c>

00:06:32.550 --> 00:06:32.560 align:start position:0%
every single input digit that could be
 

00:06:32.560 --> 00:06:34.629 align:start position:0%
every single input digit that could be
possible<00:06:32.960><c> like</c><00:06:33.199><c> two</c><00:06:33.520><c> and</c><00:06:33.759><c> map</c><00:06:34.080><c> it</c><00:06:34.240><c> to</c><00:06:34.400><c> the</c>

00:06:34.629 --> 00:06:34.639 align:start position:0%
possible like two and map it to the
 

00:06:34.639 --> 00:06:35.670 align:start position:0%
possible like two and map it to the
characters

00:06:35.670 --> 00:06:35.680 align:start position:0%
characters
 

00:06:35.680 --> 00:06:38.469 align:start position:0%
characters
that<00:06:35.919><c> are</c><00:06:36.080><c> possible</c><00:06:36.639><c> so</c><00:06:36.960><c> abc</c><00:06:37.759><c> right</c><00:06:38.000><c> for</c><00:06:38.160><c> two</c>

00:06:38.469 --> 00:06:38.479 align:start position:0%
that are possible so abc right for two
 

00:06:38.479 --> 00:06:38.790 align:start position:0%
that are possible so abc right for two
and

00:06:38.790 --> 00:06:38.800 align:start position:0%
and
 

00:06:38.800 --> 00:06:40.469 align:start position:0%
and
unless<00:06:39.039><c> you</c><00:06:39.120><c> wanna</c><00:06:39.280><c> see</c><00:06:39.440><c> me</c><00:06:39.600><c> type</c><00:06:39.840><c> this</c><00:06:40.160><c> out</c><00:06:40.400><c> i</c>

00:06:40.469 --> 00:06:40.479 align:start position:0%
unless you wanna see me type this out i
 

00:06:40.479 --> 00:06:42.469 align:start position:0%
unless you wanna see me type this out i
think<00:06:40.639><c> i'm</c><00:06:40.800><c> just</c><00:06:40.960><c> gonna</c><00:06:41.280><c> copy</c><00:06:41.680><c> and</c><00:06:41.919><c> paste</c><00:06:42.319><c> it</c>

00:06:42.469 --> 00:06:42.479 align:start position:0%
think i'm just gonna copy and paste it
 

00:06:42.479 --> 00:06:43.110 align:start position:0%
think i'm just gonna copy and paste it
so

00:06:43.110 --> 00:06:43.120 align:start position:0%
so
 

00:06:43.120 --> 00:06:46.150 align:start position:0%
so
this<00:06:43.520><c> is</c><00:06:43.680><c> what</c><00:06:44.080><c> our</c><00:06:44.800><c> digit</c><00:06:45.199><c> map</c><00:06:45.600><c> is</c><00:06:45.759><c> going</c><00:06:46.000><c> to</c>

00:06:46.150 --> 00:06:46.160 align:start position:0%
this is what our digit map is going to
 

00:06:46.160 --> 00:06:48.150 align:start position:0%
this is what our digit map is going to
be<00:06:46.319><c> like</c><00:06:46.639><c> and</c><00:06:46.800><c> you</c><00:06:46.960><c> can</c><00:06:47.199><c> verify</c><00:06:47.680><c> this</c><00:06:47.919><c> if</c><00:06:48.080><c> you</c>

00:06:48.150 --> 00:06:48.160 align:start position:0%
be like and you can verify this if you
 

00:06:48.160 --> 00:06:49.990 align:start position:0%
be like and you can verify this if you
have<00:06:48.319><c> an</c><00:06:48.479><c> old</c><00:06:48.800><c> phone</c><00:06:49.120><c> laying</c><00:06:49.440><c> around</c><00:06:49.759><c> that</c>

00:06:49.990 --> 00:06:50.000 align:start position:0%
have an old phone laying around that
 

00:06:50.000 --> 00:06:50.390 align:start position:0%
have an old phone laying around that
this

00:06:50.390 --> 00:06:50.400 align:start position:0%
this
 

00:06:50.400 --> 00:06:53.029 align:start position:0%
this
is<00:06:50.560><c> the</c><00:06:50.800><c> correct</c><00:06:51.360><c> mapping</c><00:06:51.840><c> from</c><00:06:52.080><c> digits</c><00:06:52.639><c> to</c>

00:06:53.029 --> 00:06:53.039 align:start position:0%
is the correct mapping from digits to
 

00:06:53.039 --> 00:06:53.990 align:start position:0%
is the correct mapping from digits to
the<00:06:53.199><c> following</c>

00:06:53.990 --> 00:06:54.000 align:start position:0%
the following
 

00:06:54.000 --> 00:06:56.790 align:start position:0%
the following
uh<00:06:54.479><c> string</c><00:06:54.880><c> characters</c><00:06:55.919><c> so</c><00:06:56.160><c> now</c><00:06:56.319><c> let's</c><00:06:56.560><c> write</c>

00:06:56.790 --> 00:06:56.800 align:start position:0%
uh string characters so now let's write
 

00:06:56.800 --> 00:06:58.390 align:start position:0%
uh string characters so now let's write
that<00:06:57.120><c> backtracking</c><00:06:57.840><c> function</c>

00:06:58.390 --> 00:06:58.400 align:start position:0%
that backtracking function
 

00:06:58.400 --> 00:07:00.309 align:start position:0%
that backtracking function
it's<00:06:58.639><c> going</c><00:06:58.800><c> to</c><00:06:58.960><c> be</c><00:06:59.120><c> a</c><00:06:59.199><c> recursive</c><00:06:59.840><c> function</c>

00:07:00.309 --> 00:07:00.319 align:start position:0%
it's going to be a recursive function
 

00:07:00.319 --> 00:07:01.430 align:start position:0%
it's going to be a recursive function
and<00:07:00.479><c> i'm</c><00:07:00.560><c> going</c><00:07:00.639><c> to</c>

00:07:01.430 --> 00:07:01.440 align:start position:0%
and i'm going to
 

00:07:01.440 --> 00:07:03.189 align:start position:0%
and i'm going to
declare<00:07:01.919><c> this</c><00:07:02.080><c> function</c><00:07:02.400><c> inside</c><00:07:02.800><c> of</c><00:07:02.960><c> this</c>

00:07:03.189 --> 00:07:03.199 align:start position:0%
declare this function inside of this
 

00:07:03.199 --> 00:07:04.790 align:start position:0%
declare this function inside of this
function<00:07:03.599><c> so</c><00:07:03.759><c> that</c><00:07:03.840><c> we</c><00:07:04.000><c> don't</c><00:07:04.160><c> need</c><00:07:04.319><c> to</c><00:07:04.400><c> pass</c>

00:07:04.790 --> 00:07:04.800 align:start position:0%
function so that we don't need to pass
 

00:07:04.800 --> 00:07:07.029 align:start position:0%
function so that we don't need to pass
in<00:07:04.880><c> these</c><00:07:05.199><c> parameters</c><00:07:05.840><c> every</c><00:07:06.160><c> time</c><00:07:06.400><c> we</c><00:07:06.639><c> call</c>

00:07:07.029 --> 00:07:07.039 align:start position:0%
in these parameters every time we call
 

00:07:07.039 --> 00:07:08.790 align:start position:0%
in these parameters every time we call
this<00:07:07.280><c> backtracking</c><00:07:08.000><c> function</c>

00:07:08.790 --> 00:07:08.800 align:start position:0%
this backtracking function
 

00:07:08.800 --> 00:07:10.390 align:start position:0%
this backtracking function
and<00:07:08.960><c> we</c><00:07:09.120><c> also</c><00:07:09.360><c> don't</c><00:07:09.520><c> need</c><00:07:09.680><c> to</c><00:07:09.840><c> pass</c><00:07:10.240><c> the</c>

00:07:10.390 --> 00:07:10.400 align:start position:0%
and we also don't need to pass the
 

00:07:10.400 --> 00:07:11.830 align:start position:0%
and we also don't need to pass the
digits<00:07:10.800><c> that</c><00:07:10.880><c> we're</c><00:07:11.120><c> on</c><00:07:11.280><c> i'm</c><00:07:11.440><c> only</c><00:07:11.599><c> going</c><00:07:11.680><c> to</c>

00:07:11.830 --> 00:07:11.840 align:start position:0%
digits that we're on i'm only going to
 

00:07:11.840 --> 00:07:13.830 align:start position:0%
digits that we're on i'm only going to
pass<00:07:12.080><c> in</c><00:07:12.240><c> one</c><00:07:12.479><c> variable</c><00:07:13.039><c> i</c><00:07:13.280><c> which</c><00:07:13.520><c> is</c><00:07:13.599><c> going</c><00:07:13.759><c> to</c>

00:07:13.830 --> 00:07:13.840 align:start position:0%
pass in one variable i which is going to
 

00:07:13.840 --> 00:07:15.990 align:start position:0%
pass in one variable i which is going to
tell<00:07:14.080><c> us</c><00:07:14.319><c> what</c><00:07:14.560><c> index</c><00:07:14.960><c> we're</c><00:07:15.280><c> at</c><00:07:15.599><c> in</c>

00:07:15.990 --> 00:07:16.000 align:start position:0%
tell us what index we're at in
 

00:07:16.000 --> 00:07:18.469 align:start position:0%
tell us what index we're at in
the<00:07:16.319><c> digit</c><00:07:16.800><c> string</c><00:07:17.199><c> that</c><00:07:17.360><c> we're</c><00:07:17.599><c> given</c><00:07:18.000><c> as</c><00:07:18.240><c> the</c>

00:07:18.469 --> 00:07:18.479 align:start position:0%
the digit string that we're given as the
 

00:07:18.479 --> 00:07:19.670 align:start position:0%
the digit string that we're given as the
input<00:07:18.880><c> to</c><00:07:19.120><c> our</c>

00:07:19.670 --> 00:07:19.680 align:start position:0%
input to our
 

00:07:19.680 --> 00:07:21.430 align:start position:0%
input to our
function<00:07:20.400><c> and</c><00:07:20.560><c> i'm</c><00:07:20.720><c> actually</c><00:07:20.960><c> going</c><00:07:21.039><c> to</c><00:07:21.120><c> pass</c>

00:07:21.430 --> 00:07:21.440 align:start position:0%
function and i'm actually going to pass
 

00:07:21.440 --> 00:07:23.189 align:start position:0%
function and i'm actually going to pass
in<00:07:21.840><c> one</c><00:07:22.240><c> more</c><00:07:22.560><c> variable</c>

00:07:23.189 --> 00:07:23.199 align:start position:0%
in one more variable
 

00:07:23.199 --> 00:07:25.830 align:start position:0%
in one more variable
so<00:07:23.360><c> the</c><00:07:23.680><c> current</c><00:07:24.160><c> string</c><00:07:24.800><c> meaning</c><00:07:25.280><c> basically</c>

00:07:25.830 --> 00:07:25.840 align:start position:0%
so the current string meaning basically
 

00:07:25.840 --> 00:07:27.510 align:start position:0%
so the current string meaning basically
the<00:07:26.080><c> current</c><00:07:26.400><c> string</c><00:07:26.720><c> that</c><00:07:26.880><c> we're</c><00:07:27.039><c> building</c>

00:07:27.510 --> 00:07:27.520 align:start position:0%
the current string that we're building
 

00:07:27.520 --> 00:07:29.350 align:start position:0%
the current string that we're building
so<00:07:27.680><c> let's</c><00:07:27.840><c> say</c><00:07:28.000><c> our</c><00:07:28.240><c> input</c><00:07:28.639><c> was</c>

00:07:29.350 --> 00:07:29.360 align:start position:0%
so let's say our input was
 

00:07:29.360 --> 00:07:31.909 align:start position:0%
so let's say our input was
uh<00:07:29.599><c> one</c><00:07:29.919><c> two</c><00:07:30.319><c> three</c><00:07:30.880><c> and</c><00:07:31.120><c> the</c><00:07:31.280><c> current</c><00:07:31.599><c> string</c>

00:07:31.909 --> 00:07:31.919 align:start position:0%
uh one two three and the current string
 

00:07:31.919 --> 00:07:33.189 align:start position:0%
uh one two three and the current string
would<00:07:32.080><c> contain</c><00:07:32.479><c> something</c><00:07:32.880><c> like</c>

00:07:33.189 --> 00:07:33.199 align:start position:0%
would contain something like
 

00:07:33.199 --> 00:07:35.510 align:start position:0%
would contain something like
a<00:07:33.599><c> right</c><00:07:33.840><c> so</c><00:07:34.080><c> if</c><00:07:34.160><c> we've</c><00:07:34.560><c> we've</c><00:07:34.880><c> only</c><00:07:35.039><c> visited</c>

00:07:35.510 --> 00:07:35.520 align:start position:0%
a right so if we've we've only visited
 

00:07:35.520 --> 00:07:37.029 align:start position:0%
a right so if we've we've only visited
one<00:07:35.840><c> so</c><00:07:36.000><c> far</c><00:07:36.240><c> we'd</c><00:07:36.479><c> have</c><00:07:36.720><c> a</c>

00:07:37.029 --> 00:07:37.039 align:start position:0%
one so far we'd have a
 

00:07:37.039 --> 00:07:38.390 align:start position:0%
one so far we'd have a
and<00:07:37.120><c> then</c><00:07:37.360><c> we'd</c><00:07:37.520><c> want</c><00:07:37.759><c> the</c><00:07:37.919><c> next</c><00:07:38.160><c> two</c>

00:07:38.390 --> 00:07:38.400 align:start position:0%
and then we'd want the next two
 

00:07:38.400 --> 00:07:40.469 align:start position:0%
and then we'd want the next two
characters<00:07:38.960><c> from</c><00:07:39.360><c> two</c><00:07:39.680><c> and</c><00:07:39.840><c> three</c>

00:07:40.469 --> 00:07:40.479 align:start position:0%
characters from two and three
 

00:07:40.479 --> 00:07:43.510 align:start position:0%
characters from two and three
so<00:07:40.639><c> we</c><00:07:40.800><c> know</c><00:07:40.960><c> the</c><00:07:41.280><c> base</c><00:07:41.680><c> case</c><00:07:42.160><c> is</c><00:07:42.479><c> if</c><00:07:42.960><c> i</c>

00:07:43.510 --> 00:07:43.520 align:start position:0%
so we know the base case is if i
 

00:07:43.520 --> 00:07:46.629 align:start position:0%
so we know the base case is if i
is<00:07:43.919><c> greater</c><00:07:44.479><c> than</c><00:07:44.800><c> or</c><00:07:45.280><c> equal</c><00:07:46.000><c> to</c><00:07:46.240><c> the</c>

00:07:46.629 --> 00:07:46.639 align:start position:0%
is greater than or equal to the
 

00:07:46.639 --> 00:07:50.390 align:start position:0%
is greater than or equal to the
length<00:07:47.280><c> of</c><00:07:48.080><c> digits</c><00:07:49.120><c> or</c><00:07:49.440><c> actually</c><00:07:49.840><c> an</c><00:07:50.000><c> even</c>

00:07:50.390 --> 00:07:50.400 align:start position:0%
length of digits or actually an even
 

00:07:50.400 --> 00:07:51.990 align:start position:0%
length of digits or actually an even
better<00:07:50.720><c> base</c><00:07:51.039><c> case</c><00:07:51.280><c> would</c><00:07:51.520><c> be</c>

00:07:51.990 --> 00:07:52.000 align:start position:0%
better base case would be
 

00:07:52.000 --> 00:07:54.230 align:start position:0%
better base case would be
our<00:07:52.400><c> current</c><00:07:52.800><c> string</c><00:07:53.120><c> let's</c><00:07:53.280><c> say</c><00:07:53.520><c> the</c><00:07:53.840><c> length</c>

00:07:54.230 --> 00:07:54.240 align:start position:0%
our current string let's say the length
 

00:07:54.240 --> 00:07:55.749 align:start position:0%
our current string let's say the length
of<00:07:54.400><c> the</c><00:07:54.560><c> current</c><00:07:54.960><c> string</c>

00:07:55.749 --> 00:07:55.759 align:start position:0%
of the current string
 

00:07:55.759 --> 00:07:59.189 align:start position:0%
of the current string
is<00:07:56.240><c> exactly</c><00:07:57.120><c> equal</c><00:07:57.520><c> to</c><00:07:57.680><c> the</c><00:07:58.000><c> length</c><00:07:58.400><c> of</c><00:07:58.720><c> digits</c>

00:07:59.189 --> 00:07:59.199 align:start position:0%
is exactly equal to the length of digits
 

00:07:59.199 --> 00:08:00.469 align:start position:0%
is exactly equal to the length of digits
that<00:07:59.520><c> means</c><00:07:59.840><c> that</c><00:08:00.000><c> we've</c>

00:08:00.469 --> 00:08:00.479 align:start position:0%
that means that we've
 

00:08:00.479 --> 00:08:02.869 align:start position:0%
that means that we've
basically<00:08:01.199><c> been</c><00:08:01.440><c> able</c><00:08:01.759><c> to</c><00:08:01.919><c> take</c><00:08:02.240><c> every</c><00:08:02.479><c> single</c>

00:08:02.869 --> 00:08:02.879 align:start position:0%
basically been able to take every single
 

00:08:02.879 --> 00:08:05.430 align:start position:0%
basically been able to take every single
digit<00:08:03.280><c> and</c><00:08:03.360><c> then</c><00:08:03.599><c> map</c><00:08:03.919><c> it</c><00:08:04.080><c> to</c><00:08:04.319><c> a</c><00:08:04.560><c> character</c>

00:08:05.430 --> 00:08:05.440 align:start position:0%
digit and then map it to a character
 

00:08:05.440 --> 00:08:07.270 align:start position:0%
digit and then map it to a character
because<00:08:06.160><c> current</c><00:08:06.479><c> string</c><00:08:06.800><c> is</c><00:08:06.960><c> going</c><00:08:07.120><c> to</c>

00:08:07.270 --> 00:08:07.280 align:start position:0%
because current string is going to
 

00:08:07.280 --> 00:08:09.029 align:start position:0%
because current string is going to
contain<00:08:07.840><c> those</c><00:08:08.240><c> characters</c>

00:08:09.029 --> 00:08:09.039 align:start position:0%
contain those characters
 

00:08:09.039 --> 00:08:11.430 align:start position:0%
contain those characters
and<00:08:09.199><c> if</c><00:08:09.440><c> that</c><00:08:09.759><c> is</c><00:08:09.919><c> the</c><00:08:10.160><c> case</c><00:08:10.560><c> then</c><00:08:11.039><c> we</c><00:08:11.280><c> are</c>

00:08:11.430 --> 00:08:11.440 align:start position:0%
and if that is the case then we are
 

00:08:11.440 --> 00:08:13.830 align:start position:0%
and if that is the case then we are
allowed<00:08:11.759><c> to</c><00:08:12.000><c> take</c><00:08:12.240><c> our</c><00:08:12.400><c> result</c><00:08:12.879><c> and</c><00:08:13.120><c> add</c><00:08:13.440><c> to</c><00:08:13.599><c> it</c>

00:08:13.830 --> 00:08:13.840 align:start position:0%
allowed to take our result and add to it
 

00:08:13.840 --> 00:08:15.430 align:start position:0%
allowed to take our result and add to it
the<00:08:14.000><c> current</c><00:08:14.319><c> string</c><00:08:14.720><c> that</c><00:08:14.879><c> we</c><00:08:15.039><c> just</c>

00:08:15.430 --> 00:08:15.440 align:start position:0%
the current string that we just
 

00:08:15.440 --> 00:08:17.350 align:start position:0%
the current string that we just
built<00:08:15.840><c> and</c><00:08:16.000><c> then</c><00:08:16.319><c> since</c><00:08:16.639><c> this</c><00:08:16.800><c> is</c><00:08:16.960><c> the</c><00:08:17.039><c> base</c>

00:08:17.350 --> 00:08:17.360 align:start position:0%
built and then since this is the base
 

00:08:17.360 --> 00:08:19.749 align:start position:0%
built and then since this is the base
case<00:08:17.759><c> after</c><00:08:18.080><c> that</c><00:08:18.319><c> we</c><00:08:18.479><c> can</c><00:08:18.639><c> just</c><00:08:18.960><c> return</c>

00:08:19.749 --> 00:08:19.759 align:start position:0%
case after that we can just return
 

00:08:19.759 --> 00:08:22.150 align:start position:0%
case after that we can just return
if<00:08:20.000><c> this</c><00:08:20.319><c> is</c><00:08:20.560><c> not</c><00:08:20.960><c> true</c><00:08:21.199><c> though</c><00:08:21.440><c> that</c><00:08:21.680><c> means</c><00:08:21.919><c> we</c>

00:08:22.150 --> 00:08:22.160 align:start position:0%
if this is not true though that means we
 

00:08:22.160 --> 00:08:23.029 align:start position:0%
if this is not true though that means we
haven't

00:08:23.029 --> 00:08:23.039 align:start position:0%
haven't
 

00:08:23.039 --> 00:08:25.029 align:start position:0%
haven't
finished<00:08:23.520><c> building</c><00:08:24.240><c> the</c><00:08:24.400><c> current</c><00:08:24.720><c> string</c>

00:08:25.029 --> 00:08:25.039 align:start position:0%
finished building the current string
 

00:08:25.039 --> 00:08:26.390 align:start position:0%
finished building the current string
that<00:08:25.120><c> means</c><00:08:25.280><c> we</c><00:08:25.440><c> need</c><00:08:25.599><c> to</c><00:08:25.759><c> continue</c>

00:08:26.390 --> 00:08:26.400 align:start position:0%
that means we need to continue
 

00:08:26.400 --> 00:08:28.150 align:start position:0%
that means we need to continue
going<00:08:26.720><c> through</c><00:08:26.960><c> the</c><00:08:27.120><c> digit</c><00:08:27.520><c> that</c><00:08:27.680><c> we're</c><00:08:27.919><c> at</c>

00:08:28.150 --> 00:08:28.160 align:start position:0%
going through the digit that we're at
 

00:08:28.160 --> 00:08:29.749 align:start position:0%
going through the digit that we're at
right<00:08:28.400><c> at</c><00:08:28.639><c> index</c><00:08:29.199><c> i</c>

00:08:29.749 --> 00:08:29.759 align:start position:0%
right at index i
 

00:08:29.759 --> 00:08:32.870 align:start position:0%
right at index i
so<00:08:30.080><c> let's</c><00:08:30.400><c> create</c><00:08:31.120><c> a</c><00:08:31.520><c> loop</c><00:08:31.919><c> to</c><00:08:32.080><c> do</c><00:08:32.320><c> that</c>

00:08:32.870 --> 00:08:32.880 align:start position:0%
so let's create a loop to do that
 

00:08:32.880 --> 00:08:35.110 align:start position:0%
so let's create a loop to do that
so<00:08:33.120><c> basically</c><00:08:33.599><c> i'm</c><00:08:33.680><c> going</c><00:08:33.760><c> to</c><00:08:33.839><c> take</c><00:08:34.159><c> digits</c><00:08:34.719><c> of</c>

00:08:35.110 --> 00:08:35.120 align:start position:0%
so basically i'm going to take digits of
 

00:08:35.120 --> 00:08:37.029 align:start position:0%
so basically i'm going to take digits of
i<00:08:35.440><c> that's</c><00:08:35.760><c> going</c><00:08:35.839><c> to</c><00:08:35.919><c> tell</c><00:08:36.159><c> us</c><00:08:36.240><c> the</c><00:08:36.560><c> current</c>

00:08:37.029 --> 00:08:37.039 align:start position:0%
i that's going to tell us the current
 

00:08:37.039 --> 00:08:39.589 align:start position:0%
i that's going to tell us the current
digit<00:08:37.440><c> that</c><00:08:37.599><c> we're</c><00:08:37.919><c> at</c><00:08:38.320><c> right</c><00:08:38.800><c> and</c><00:08:39.039><c> i</c><00:08:39.200><c> want</c><00:08:39.360><c> to</c>

00:08:39.589 --> 00:08:39.599 align:start position:0%
digit that we're at right and i want to
 

00:08:39.599 --> 00:08:41.589 align:start position:0%
digit that we're at right and i want to
take<00:08:39.919><c> this</c><00:08:40.240><c> digit</c><00:08:40.640><c> that</c><00:08:40.800><c> we're</c><00:08:41.039><c> at</c><00:08:41.200><c> and</c><00:08:41.360><c> i</c><00:08:41.440><c> want</c>

00:08:41.589 --> 00:08:41.599 align:start position:0%
take this digit that we're at and i want
 

00:08:41.599 --> 00:08:43.190 align:start position:0%
take this digit that we're at and i want
to<00:08:41.760><c> map</c><00:08:42.080><c> it</c><00:08:42.240><c> to</c><00:08:42.399><c> the</c><00:08:42.719><c> list</c>

00:08:43.190 --> 00:08:43.200 align:start position:0%
to map it to the list
 

00:08:43.200 --> 00:08:45.750 align:start position:0%
to map it to the list
of<00:08:43.599><c> characters</c><00:08:44.480><c> that</c><00:08:44.720><c> it</c><00:08:44.880><c> maps</c><00:08:45.279><c> to</c><00:08:45.440><c> right</c><00:08:45.600><c> so</c>

00:08:45.750 --> 00:08:45.760 align:start position:0%
of characters that it maps to right so
 

00:08:45.760 --> 00:08:48.230 align:start position:0%
of characters that it maps to right so
if<00:08:45.839><c> we</c><00:08:46.000><c> had</c><00:08:46.240><c> nine</c><00:08:46.560><c> we</c><00:08:46.720><c> know</c><00:08:46.959><c> nine</c><00:08:47.279><c> maps</c><00:08:47.680><c> to</c>

00:08:48.230 --> 00:08:48.240 align:start position:0%
if we had nine we know nine maps to
 

00:08:48.240 --> 00:08:51.350 align:start position:0%
if we had nine we know nine maps to
w<00:08:48.800><c> x</c><00:08:49.040><c> y</c><00:08:49.279><c> z</c><00:08:49.519><c> so</c><00:08:49.920><c> how</c><00:08:50.080><c> can</c><00:08:50.320><c> i</c><00:08:50.480><c> do</c><00:08:50.640><c> that</c><00:08:50.880><c> well</c><00:08:51.120><c> that's</c>

00:08:51.350 --> 00:08:51.360 align:start position:0%
w x y z so how can i do that well that's
 

00:08:51.360 --> 00:08:52.550 align:start position:0%
w x y z so how can i do that well that's
why<00:08:51.519><c> we</c><00:08:51.680><c> created</c><00:08:52.240><c> this</c>

00:08:52.550 --> 00:08:52.560 align:start position:0%
why we created this
 

00:08:52.560 --> 00:08:54.949 align:start position:0%
why we created this
digit<00:08:52.959><c> to</c><00:08:53.120><c> character</c><00:08:53.680><c> map</c><00:08:54.160><c> we</c><00:08:54.320><c> can</c><00:08:54.480><c> take</c><00:08:54.720><c> a</c>

00:08:54.949 --> 00:08:54.959 align:start position:0%
digit to character map we can take a
 

00:08:54.959 --> 00:08:55.670 align:start position:0%
digit to character map we can take a
digit

00:08:55.670 --> 00:08:55.680 align:start position:0%
digit
 

00:08:55.680 --> 00:08:58.630 align:start position:0%
digit
and<00:08:55.920><c> then</c><00:08:56.160><c> map</c><00:08:56.480><c> it</c><00:08:56.640><c> to</c><00:08:56.880><c> a</c><00:08:57.040><c> character</c><00:08:57.440><c> so</c><00:08:57.680><c> digit</c>

00:08:58.630 --> 00:08:58.640 align:start position:0%
and then map it to a character so digit
 

00:08:58.640 --> 00:08:59.430 align:start position:0%
and then map it to a character so digit
to

00:08:59.430 --> 00:08:59.440 align:start position:0%
to
 

00:08:59.440 --> 00:09:02.470 align:start position:0%
to
character<00:09:00.160><c> i'm</c><00:09:00.320><c> going</c><00:09:00.399><c> to</c><00:09:00.560><c> take</c><00:09:01.120><c> this</c><00:09:01.360><c> digit</c>

00:09:02.470 --> 00:09:02.480 align:start position:0%
character i'm going to take this digit
 

00:09:02.480 --> 00:09:05.590 align:start position:0%
character i'm going to take this digit
and<00:09:02.959><c> now</c><00:09:03.760><c> basically</c><00:09:04.320><c> this</c><00:09:04.720><c> is</c><00:09:05.120><c> going</c><00:09:05.279><c> to</c><00:09:05.440><c> be</c>

00:09:05.590 --> 00:09:05.600 align:start position:0%
and now basically this is going to be
 

00:09:05.600 --> 00:09:06.070 align:start position:0%
and now basically this is going to be
the

00:09:06.070 --> 00:09:06.080 align:start position:0%
the
 

00:09:06.080 --> 00:09:08.310 align:start position:0%
the
that<00:09:06.320><c> string</c><00:09:06.720><c> that</c><00:09:06.959><c> it</c><00:09:07.040><c> maps</c><00:09:07.440><c> to</c><00:09:07.839><c> and</c><00:09:08.080><c> i</c><00:09:08.160><c> want</c>

00:09:08.310 --> 00:09:08.320 align:start position:0%
that string that it maps to and i want
 

00:09:08.320 --> 00:09:09.110 align:start position:0%
that string that it maps to and i want
to<00:09:08.480><c> just</c><00:09:08.720><c> go</c>

00:09:09.110 --> 00:09:09.120 align:start position:0%
to just go
 

00:09:09.120 --> 00:09:12.310 align:start position:0%
to just go
through<00:09:09.600><c> every</c><00:09:10.080><c> character</c><00:09:10.800><c> in</c><00:09:11.120><c> this</c><00:09:11.440><c> string</c>

00:09:12.310 --> 00:09:12.320 align:start position:0%
through every character in this string
 

00:09:12.320 --> 00:09:15.190 align:start position:0%
through every character in this string
so<00:09:12.480><c> for</c><00:09:12.720><c> every</c><00:09:13.279><c> c</c><00:09:13.839><c> every</c><00:09:14.080><c> single</c><00:09:14.480><c> character</c><00:09:15.040><c> in</c>

00:09:15.190 --> 00:09:15.200 align:start position:0%
so for every c every single character in
 

00:09:15.200 --> 00:09:16.310 align:start position:0%
so for every c every single character in
this<00:09:15.440><c> string</c>

00:09:16.310 --> 00:09:16.320 align:start position:0%
this string
 

00:09:16.320 --> 00:09:18.550 align:start position:0%
this string
i<00:09:16.480><c> want</c><00:09:16.640><c> to</c><00:09:16.800><c> brute</c><00:09:17.279><c> force</c><00:09:17.600><c> this</c><00:09:17.839><c> right</c><00:09:18.000><c> so</c><00:09:18.320><c> for</c>

00:09:18.550 --> 00:09:18.560 align:start position:0%
i want to brute force this right so for
 

00:09:18.560 --> 00:09:20.389 align:start position:0%
i want to brute force this right so for
every<00:09:18.959><c> single</c><00:09:19.360><c> character</c><00:09:19.839><c> i'm</c><00:09:20.000><c> just</c><00:09:20.160><c> going</c><00:09:20.240><c> to</c>

00:09:20.389 --> 00:09:20.399 align:start position:0%
every single character i'm just going to
 

00:09:20.399 --> 00:09:21.590 align:start position:0%
every single character i'm just going to
call<00:09:20.720><c> backtrack</c>

00:09:21.590 --> 00:09:21.600 align:start position:0%
call backtrack
 

00:09:21.600 --> 00:09:23.750 align:start position:0%
call backtrack
i'm<00:09:21.760><c> going</c><00:09:21.920><c> to</c><00:09:22.000><c> make</c><00:09:22.320><c> that</c><00:09:22.560><c> recursive</c><00:09:23.200><c> call</c>

00:09:23.750 --> 00:09:23.760 align:start position:0%
i'm going to make that recursive call
 

00:09:23.760 --> 00:09:24.630 align:start position:0%
i'm going to make that recursive call
right<00:09:24.080><c> so</c>

00:09:24.630 --> 00:09:24.640 align:start position:0%
right so
 

00:09:24.640 --> 00:09:26.710 align:start position:0%
right so
for<00:09:24.880><c> i</c><00:09:25.120><c> we're</c><00:09:25.279><c> going</c><00:09:25.360><c> to</c><00:09:25.519><c> increment</c><00:09:26.000><c> i</c><00:09:26.240><c> by</c><00:09:26.480><c> 1</c>

00:09:26.710 --> 00:09:26.720 align:start position:0%
for i we're going to increment i by 1
 

00:09:26.720 --> 00:09:28.710 align:start position:0%
for i we're going to increment i by 1
because<00:09:26.959><c> we're</c><00:09:27.200><c> moving</c><00:09:27.600><c> to</c><00:09:27.760><c> the</c><00:09:27.920><c> next</c><00:09:28.240><c> digit</c>

00:09:28.710 --> 00:09:28.720 align:start position:0%
because we're moving to the next digit
 

00:09:28.720 --> 00:09:30.870 align:start position:0%
because we're moving to the next digit
and<00:09:28.959><c> for</c><00:09:29.279><c> the</c><00:09:29.519><c> current</c><00:09:29.920><c> string</c><00:09:30.560><c> we're</c><00:09:30.720><c> going</c>

00:09:30.870 --> 00:09:30.880 align:start position:0%
and for the current string we're going
 

00:09:30.880 --> 00:09:32.470 align:start position:0%
and for the current string we're going
to<00:09:30.959><c> just</c><00:09:31.279><c> take</c><00:09:31.519><c> the</c><00:09:31.760><c> current</c><00:09:32.000><c> string</c><00:09:32.320><c> that</c><00:09:32.399><c> we</c>

00:09:32.470 --> 00:09:32.480 align:start position:0%
to just take the current string that we
 

00:09:32.480 --> 00:09:33.350 align:start position:0%
to just take the current string that we
were<00:09:32.800><c> given</c>

00:09:33.350 --> 00:09:33.360 align:start position:0%
were given
 

00:09:33.360 --> 00:09:35.350 align:start position:0%
were given
and<00:09:33.600><c> add</c><00:09:34.000><c> one</c><00:09:34.240><c> more</c><00:09:34.480><c> character</c><00:09:34.880><c> to</c><00:09:35.120><c> it</c><00:09:35.279><c> the</c>

00:09:35.350 --> 00:09:35.360 align:start position:0%
and add one more character to it the
 

00:09:35.360 --> 00:09:37.269 align:start position:0%
and add one more character to it the
character<00:09:35.760><c> that</c><00:09:35.920><c> we're</c><00:09:36.080><c> currently</c><00:09:36.560><c> visiting</c>

00:09:37.269 --> 00:09:37.279 align:start position:0%
character that we're currently visiting
 

00:09:37.279 --> 00:09:40.070 align:start position:0%
character that we're currently visiting
c<00:09:38.160><c> and</c><00:09:38.399><c> that's</c><00:09:38.720><c> actually</c><00:09:39.279><c> all</c><00:09:39.519><c> that</c><00:09:39.680><c> we</c><00:09:39.920><c> have</c>

00:09:40.070 --> 00:09:40.080 align:start position:0%
c and that's actually all that we have
 

00:09:40.080 --> 00:09:41.110 align:start position:0%
c and that's actually all that we have
to<00:09:40.320><c> do</c>

00:09:41.110 --> 00:09:41.120 align:start position:0%
to do
 

00:09:41.120 --> 00:09:43.670 align:start position:0%
to do
we<00:09:41.279><c> have</c><00:09:41.519><c> our</c><00:09:41.839><c> single</c><00:09:42.240><c> base</c><00:09:42.560><c> case</c><00:09:43.040><c> and</c><00:09:43.279><c> we</c><00:09:43.440><c> have</c>

00:09:43.670 --> 00:09:43.680 align:start position:0%
we have our single base case and we have
 

00:09:43.680 --> 00:09:45.829 align:start position:0%
we have our single base case and we have
our<00:09:43.920><c> recursive</c><00:09:44.480><c> case</c><00:09:44.880><c> you</c><00:09:44.959><c> can</c><00:09:45.200><c> see</c><00:09:45.440><c> that</c><00:09:45.680><c> the</c>

00:09:45.829 --> 00:09:45.839 align:start position:0%
our recursive case you can see that the
 

00:09:45.839 --> 00:09:46.790 align:start position:0%
our recursive case you can see that the
only<00:09:46.160><c> thing</c>

00:09:46.790 --> 00:09:46.800 align:start position:0%
only thing
 

00:09:46.800 --> 00:09:48.230 align:start position:0%
only thing
that<00:09:46.959><c> might</c><00:09:47.120><c> be</c><00:09:47.279><c> different</c><00:09:47.600><c> for</c><00:09:47.760><c> you</c><00:09:47.920><c> is</c><00:09:48.080><c> that</c>

00:09:48.230 --> 00:09:48.240 align:start position:0%
that might be different for you is that
 

00:09:48.240 --> 00:09:50.949 align:start position:0%
that might be different for you is that
our<00:09:48.480><c> recursive</c><00:09:49.040><c> call</c><00:09:49.360><c> is</c><00:09:49.600><c> inside</c><00:09:49.920><c> of</c><00:09:50.080><c> a</c><00:09:50.320><c> loop</c>

00:09:50.949 --> 00:09:50.959 align:start position:0%
our recursive call is inside of a loop
 

00:09:50.959 --> 00:09:53.030 align:start position:0%
our recursive call is inside of a loop
so<00:09:51.279><c> with</c><00:09:51.519><c> this</c><00:09:51.920><c> backtracking</c><00:09:52.560><c> function</c>

00:09:53.030 --> 00:09:53.040 align:start position:0%
so with this backtracking function
 

00:09:53.040 --> 00:09:54.070 align:start position:0%
so with this backtracking function
complete

00:09:54.070 --> 00:09:54.080 align:start position:0%
complete
 

00:09:54.080 --> 00:09:56.710 align:start position:0%
complete
now<00:09:54.720><c> let's</c><00:09:55.440><c> actually</c><00:09:56.080><c> call</c><00:09:56.480><c> this</c>

00:09:56.710 --> 00:09:56.720 align:start position:0%
now let's actually call this
 

00:09:56.720 --> 00:09:58.470 align:start position:0%
now let's actually call this
backtracking<00:09:57.360><c> function</c><00:09:57.839><c> so</c>

00:09:58.470 --> 00:09:58.480 align:start position:0%
backtracking function so
 

00:09:58.480 --> 00:10:00.710 align:start position:0%
backtracking function so
we<00:09:58.959><c> the</c><00:09:59.200><c> parameters</c><00:09:59.839><c> to</c><00:10:00.000><c> give</c><00:10:00.240><c> it</c><00:10:00.399><c> are</c><00:10:00.560><c> going</c>

00:10:00.710 --> 00:10:00.720 align:start position:0%
we the parameters to give it are going
 

00:10:00.720 --> 00:10:01.990 align:start position:0%
we the parameters to give it are going
to<00:10:00.800><c> be</c><00:10:01.040><c> 0</c><00:10:01.440><c> for</c><00:10:01.680><c> the</c>

00:10:01.990 --> 00:10:02.000 align:start position:0%
to be 0 for the
 

00:10:02.000 --> 00:10:03.509 align:start position:0%
to be 0 for the
index<00:10:02.560><c> and</c><00:10:02.720><c> the</c><00:10:02.880><c> current</c><00:10:03.120><c> string</c><00:10:03.440><c> is</c>

00:10:03.509 --> 00:10:03.519 align:start position:0%
index and the current string is
 

00:10:03.519 --> 00:10:05.829 align:start position:0%
index and the current string is
initially<00:10:04.000><c> just</c><00:10:04.160><c> going</c><00:10:04.240><c> to</c><00:10:04.320><c> be</c><00:10:04.560><c> empty</c><00:10:04.959><c> right</c>

00:10:05.829 --> 00:10:05.839 align:start position:0%
initially just going to be empty right
 

00:10:05.839 --> 00:10:07.269 align:start position:0%
initially just going to be empty right
but<00:10:06.160><c> i'm</c><00:10:06.320><c> actually</c><00:10:06.560><c> going</c><00:10:06.640><c> to</c><00:10:06.720><c> need</c><00:10:06.880><c> to</c><00:10:07.040><c> make</c>

00:10:07.269 --> 00:10:07.279 align:start position:0%
but i'm actually going to need to make
 

00:10:07.279 --> 00:10:09.750 align:start position:0%
but i'm actually going to need to make
one<00:10:07.760><c> last</c><00:10:08.160><c> modification</c><00:10:09.040><c> so</c><00:10:09.279><c> we're</c><00:10:09.519><c> only</c>

00:10:09.750 --> 00:10:09.760 align:start position:0%
one last modification so we're only
 

00:10:09.760 --> 00:10:11.509 align:start position:0%
one last modification so we're only
going<00:10:09.839><c> to</c><00:10:10.000><c> need</c><00:10:10.160><c> to</c><00:10:10.320><c> call</c><00:10:10.560><c> backtracking</c><00:10:11.360><c> if</c>

00:10:11.509 --> 00:10:11.519 align:start position:0%
going to need to call backtracking if
 

00:10:11.519 --> 00:10:13.430 align:start position:0%
going to need to call backtracking if
the<00:10:11.760><c> digit</c><00:10:12.240><c> string</c><00:10:12.560><c> that</c><00:10:12.640><c> we're</c><00:10:12.959><c> given</c>

00:10:13.430 --> 00:10:13.440 align:start position:0%
the digit string that we're given
 

00:10:13.440 --> 00:10:16.470 align:start position:0%
the digit string that we're given
is<00:10:13.760><c> non-empty</c><00:10:15.040><c> and</c><00:10:15.200><c> the</c><00:10:15.360><c> reason</c><00:10:15.839><c> is</c><00:10:16.079><c> because</c>

00:10:16.470 --> 00:10:16.480 align:start position:0%
is non-empty and the reason is because
 

00:10:16.480 --> 00:10:17.670 align:start position:0%
is non-empty and the reason is because
if<00:10:16.720><c> digits</c><00:10:17.200><c> was</c>

00:10:17.670 --> 00:10:17.680 align:start position:0%
if digits was
 

00:10:17.680 --> 00:10:20.550 align:start position:0%
if digits was
empty<00:10:18.399><c> then</c><00:10:18.720><c> our</c><00:10:18.880><c> recursive</c><00:10:19.440><c> call</c><00:10:19.839><c> would</c><00:10:20.320><c> be</c>

00:10:20.550 --> 00:10:20.560 align:start position:0%
empty then our recursive call would be
 

00:10:20.560 --> 00:10:22.470 align:start position:0%
empty then our recursive call would be
called<00:10:21.040><c> and</c><00:10:21.120><c> then</c><00:10:21.279><c> we'd</c><00:10:21.600><c> execute</c><00:10:22.000><c> the</c><00:10:22.160><c> base</c>

00:10:22.470 --> 00:10:22.480 align:start position:0%
called and then we'd execute the base
 

00:10:22.480 --> 00:10:22.949 align:start position:0%
called and then we'd execute the base
case

00:10:22.949 --> 00:10:22.959 align:start position:0%
case
 

00:10:22.959 --> 00:10:25.910 align:start position:0%
case
once<00:10:23.519><c> so</c><00:10:23.680><c> then</c><00:10:23.839><c> we'd</c><00:10:24.160><c> end</c><00:10:24.320><c> up</c><00:10:24.480><c> returning</c><00:10:25.519><c> this</c>

00:10:25.910 --> 00:10:25.920 align:start position:0%
once so then we'd end up returning this
 

00:10:25.920 --> 00:10:27.910 align:start position:0%
once so then we'd end up returning this
as<00:10:26.160><c> our</c><00:10:26.320><c> result</c><00:10:26.720><c> we'd</c><00:10:26.959><c> add</c><00:10:27.120><c> the</c><00:10:27.360><c> empty</c><00:10:27.600><c> string</c>

00:10:27.910 --> 00:10:27.920 align:start position:0%
as our result we'd add the empty string
 

00:10:27.920 --> 00:10:28.710 align:start position:0%
as our result we'd add the empty string
to<00:10:28.079><c> result</c>

00:10:28.710 --> 00:10:28.720 align:start position:0%
to result
 

00:10:28.720 --> 00:10:31.750 align:start position:0%
to result
but<00:10:29.200><c> in</c><00:10:29.920><c> the</c><00:10:30.079><c> way</c><00:10:30.320><c> this</c><00:10:30.560><c> problem</c><00:10:31.040><c> is</c><00:10:31.200><c> defined</c>

00:10:31.750 --> 00:10:31.760 align:start position:0%
but in the way this problem is defined
 

00:10:31.760 --> 00:10:32.069 align:start position:0%
but in the way this problem is defined
if

00:10:32.069 --> 00:10:32.079 align:start position:0%
if
 

00:10:32.079 --> 00:10:35.430 align:start position:0%
if
digits<00:10:33.279><c> if</c><00:10:33.519><c> digits</c><00:10:34.000><c> was</c><00:10:34.399><c> empty</c><00:10:34.800><c> like</c><00:10:35.040><c> this</c><00:10:35.279><c> if</c>

00:10:35.430 --> 00:10:35.440 align:start position:0%
digits if digits was empty like this if
 

00:10:35.440 --> 00:10:37.030 align:start position:0%
digits if digits was empty like this if
digits<00:10:35.839><c> was</c><00:10:35.920><c> just</c><00:10:36.160><c> an</c><00:10:36.240><c> empty</c><00:10:36.480><c> string</c><00:10:36.800><c> the</c>

00:10:37.030 --> 00:10:37.040 align:start position:0%
digits was just an empty string the
 

00:10:37.040 --> 00:10:38.949 align:start position:0%
digits was just an empty string the
output<00:10:37.360><c> that</c><00:10:37.519><c> they</c><00:10:37.760><c> actually</c><00:10:38.079><c> want</c><00:10:38.399><c> is</c><00:10:38.560><c> just</c>

00:10:38.949 --> 00:10:38.959 align:start position:0%
output that they actually want is just
 

00:10:38.959 --> 00:10:39.269 align:start position:0%
output that they actually want is just
an

00:10:39.269 --> 00:10:39.279 align:start position:0%
an
 

00:10:39.279 --> 00:10:41.750 align:start position:0%
an
empty<00:10:39.680><c> array</c><00:10:40.160><c> like</c><00:10:40.480><c> this</c><00:10:40.959><c> so</c><00:10:41.120><c> that's</c><00:10:41.440><c> why</c><00:10:41.600><c> we</c>

00:10:41.750 --> 00:10:41.760 align:start position:0%
empty array like this so that's why we
 

00:10:41.760 --> 00:10:42.389 align:start position:0%
empty array like this so that's why we
have<00:10:41.920><c> to</c>

00:10:42.389 --> 00:10:42.399 align:start position:0%
have to
 

00:10:42.399 --> 00:10:45.430 align:start position:0%
have to
put<00:10:42.640><c> this</c><00:10:42.880><c> inside</c><00:10:43.279><c> of</c><00:10:43.920><c> a</c><00:10:44.160><c> condition</c><00:10:44.959><c> but</c><00:10:45.200><c> other</c>

00:10:45.430 --> 00:10:45.440 align:start position:0%
put this inside of a condition but other
 

00:10:45.440 --> 00:10:47.110 align:start position:0%
put this inside of a condition but other
than<00:10:45.600><c> that</c><00:10:45.920><c> all</c><00:10:46.160><c> we</c><00:10:46.240><c> have</c><00:10:46.399><c> to</c><00:10:46.480><c> do</c><00:10:46.720><c> is</c><00:10:46.880><c> now</c>

00:10:47.110 --> 00:10:47.120 align:start position:0%
than that all we have to do is now
 

00:10:47.120 --> 00:10:47.670 align:start position:0%
than that all we have to do is now
return

00:10:47.670 --> 00:10:47.680 align:start position:0%
return
 

00:10:47.680 --> 00:10:50.790 align:start position:0%
return
our<00:10:47.920><c> result</c><00:10:48.480><c> and</c><00:10:48.959><c> the</c><00:10:49.200><c> function</c><00:10:49.680><c> is</c><00:10:49.920><c> complete</c>

00:10:50.790 --> 00:10:50.800 align:start position:0%
our result and the function is complete
 

00:10:50.800 --> 00:10:52.069 align:start position:0%
our result and the function is complete
so<00:10:51.040><c> you</c><00:10:51.120><c> can</c><00:10:51.279><c> see</c><00:10:51.440><c> that</c><00:10:51.680><c> it's</c><00:10:51.839><c> pretty</c>

00:10:52.069 --> 00:10:52.079 align:start position:0%
so you can see that it's pretty
 

00:10:52.079 --> 00:10:53.990 align:start position:0%
so you can see that it's pretty
efficient<00:10:52.640><c> about</c><00:10:52.959><c> as</c><00:10:53.120><c> efficient</c><00:10:53.519><c> as</c><00:10:53.680><c> you</c><00:10:53.760><c> can</c>

00:10:53.990 --> 00:10:54.000 align:start position:0%
efficient about as efficient as you can
 

00:10:54.000 --> 00:10:56.069 align:start position:0%
efficient about as efficient as you can
make<00:10:54.240><c> a</c><00:10:54.480><c> problem</c><00:10:54.800><c> like</c><00:10:55.040><c> this</c><00:10:55.279><c> even</c><00:10:55.600><c> though</c>

00:10:56.069 --> 00:10:56.079 align:start position:0%
make a problem like this even though
 

00:10:56.079 --> 00:10:59.269 align:start position:0%
make a problem like this even though
it's<00:10:56.560><c> a</c><00:10:56.880><c> rel</c><00:10:57.360><c> it's</c><00:10:57.920><c> what's</c><00:10:58.240><c> it</c><00:10:58.320><c> called</c><00:10:58.959><c> it's</c><00:10:59.120><c> an</c>

00:10:59.269 --> 00:10:59.279 align:start position:0%
it's a rel it's what's it called it's an
 

00:10:59.279 --> 00:11:01.030 align:start position:0%
it's a rel it's what's it called it's an
exponential<00:10:59.920><c> function</c><00:11:00.320><c> right</c>

00:11:01.030 --> 00:11:01.040 align:start position:0%
exponential function right
 

00:11:01.040 --> 00:11:03.590 align:start position:0%
exponential function right
but<00:11:01.440><c> i</c><00:11:01.680><c> hope</c><00:11:01.920><c> that</c><00:11:02.079><c> this</c><00:11:02.320><c> was</c><00:11:02.560><c> helpful</c><00:11:03.279><c> if</c><00:11:03.440><c> it</c>

00:11:03.590 --> 00:11:03.600 align:start position:0%
but i hope that this was helpful if it
 

00:11:03.600 --> 00:11:04.150 align:start position:0%
but i hope that this was helpful if it
was

00:11:04.150 --> 00:11:04.160 align:start position:0%
was
 

00:11:04.160 --> 00:11:05.990 align:start position:0%
was
please<00:11:04.480><c> like</c><00:11:04.720><c> and</c><00:11:04.880><c> subscribe</c><00:11:05.440><c> it</c><00:11:05.519><c> supports</c>

00:11:05.990 --> 00:11:06.000 align:start position:0%
please like and subscribe it supports
 

00:11:06.000 --> 00:11:08.389 align:start position:0%
please like and subscribe it supports
the<00:11:06.160><c> channel</c><00:11:06.640><c> a</c><00:11:06.880><c> lot</c><00:11:07.279><c> and</c><00:11:07.440><c> i'll</c><00:11:07.680><c> hopefully</c>

00:11:08.389 --> 00:11:08.399 align:start position:0%
the channel a lot and i'll hopefully
 

00:11:08.399 --> 00:11:13.990 align:start position:0%
the channel a lot and i'll hopefully
see<00:11:08.560><c> you</c><00:11:08.720><c> pretty</c><00:11:12.839><c> soon</c>

00:11:13.990 --> 00:11:14.000 align:start position:0%
see you pretty soon
 

00:11:14.000 --> 00:11:16.079 align:start position:0%
see you pretty soon
you

