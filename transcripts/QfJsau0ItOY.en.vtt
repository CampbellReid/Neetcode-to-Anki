WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:01.990 align:start position:0%
 
everyone<00:00:00.640><c> welcome</c><00:00:01.120><c> back</c><00:00:01.360><c> and</c><00:00:01.520><c> let's</c><00:00:01.760><c> write</c>

00:00:01.990 --> 00:00:02.000 align:start position:0%
everyone welcome back and let's write
 

00:00:02.000 --> 00:00:04.230 align:start position:0%
everyone welcome back and let's write
some<00:00:02.159><c> more</c><00:00:02.399><c> neat</c><00:00:02.639><c> code</c><00:00:02.960><c> today</c><00:00:03.280><c> so</c><00:00:03.520><c> today</c><00:00:04.000><c> let's</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
some more neat code today so today let's
 

00:00:04.240 --> 00:00:06.950 align:start position:0%
some more neat code today so today let's
solve<00:00:04.480><c> the</c><00:00:04.720><c> problem</c><00:00:05.200><c> balanced</c><00:00:05.759><c> binary</c><00:00:06.399><c> tree</c>

00:00:06.950 --> 00:00:06.960 align:start position:0%
solve the problem balanced binary tree
 

00:00:06.960 --> 00:00:09.110 align:start position:0%
solve the problem balanced binary tree
we're<00:00:07.279><c> given</c><00:00:07.600><c> a</c><00:00:07.680><c> binary</c><00:00:08.240><c> tree</c><00:00:08.559><c> and</c><00:00:08.720><c> we</c><00:00:08.880><c> want</c><00:00:09.040><c> to</c>

00:00:09.110 --> 00:00:09.120 align:start position:0%
we're given a binary tree and we want to
 

00:00:09.120 --> 00:00:11.910 align:start position:0%
we're given a binary tree and we want to
determine<00:00:09.760><c> if</c><00:00:10.080><c> it</c><00:00:10.240><c> is</c><00:00:10.639><c> height</c><00:00:11.040><c> balanced</c><00:00:11.759><c> what</c>

00:00:11.910 --> 00:00:11.920 align:start position:0%
determine if it is height balanced what
 

00:00:11.920 --> 00:00:14.390 align:start position:0%
determine if it is height balanced what
exactly<00:00:12.320><c> do</c><00:00:12.480><c> they</c><00:00:12.639><c> mean</c><00:00:12.880><c> by</c><00:00:13.200><c> height</c><00:00:13.519><c> balanced</c>

00:00:14.390 --> 00:00:14.400 align:start position:0%
exactly do they mean by height balanced
 

00:00:14.400 --> 00:00:16.950 align:start position:0%
exactly do they mean by height balanced
well<00:00:14.719><c> it's</c><00:00:14.880><c> defined</c><00:00:15.519><c> by</c><00:00:15.679><c> saying</c><00:00:16.080><c> that</c><00:00:16.480><c> for</c>

00:00:16.950 --> 00:00:16.960 align:start position:0%
well it's defined by saying that for
 

00:00:16.960 --> 00:00:20.070 align:start position:0%
well it's defined by saying that for
every<00:00:17.760><c> single</c><00:00:18.320><c> node</c><00:00:18.800><c> in</c><00:00:18.960><c> the</c><00:00:19.199><c> tree</c><00:00:19.520><c> if</c><00:00:19.680><c> we</c><00:00:19.840><c> take</c>

00:00:20.070 --> 00:00:20.080 align:start position:0%
every single node in the tree if we take
 

00:00:20.080 --> 00:00:24.070 align:start position:0%
every single node in the tree if we take
the<00:00:20.480><c> left</c><00:00:20.960><c> and</c><00:00:21.279><c> right</c><00:00:21.760><c> subtrees</c><00:00:22.880><c> of</c><00:00:23.119><c> this</c><00:00:23.439><c> node</c>

00:00:24.070 --> 00:00:24.080 align:start position:0%
the left and right subtrees of this node
 

00:00:24.080 --> 00:00:26.630 align:start position:0%
the left and right subtrees of this node
the<00:00:24.400><c> heights</c><00:00:25.039><c> of</c><00:00:25.359><c> these</c><00:00:25.840><c> left</c><00:00:26.080><c> and</c><00:00:26.160><c> right</c><00:00:26.400><c> sub</c>

00:00:26.630 --> 00:00:26.640 align:start position:0%
the heights of these left and right sub
 

00:00:26.640 --> 00:00:30.790 align:start position:0%
the heights of these left and right sub
trees<00:00:26.960><c> will</c><00:00:27.279><c> differ</c><00:00:27.840><c> by</c><00:00:28.240><c> at</c><00:00:28.720><c> most</c><00:00:29.439><c> one</c><00:00:30.080><c> so</c><00:00:30.560><c> in</c>

00:00:30.790 --> 00:00:30.800 align:start position:0%
trees will differ by at most one so in
 

00:00:30.800 --> 00:00:32.229 align:start position:0%
trees will differ by at most one so in
here<00:00:31.039><c> you</c><00:00:31.119><c> can</c><00:00:31.279><c> see</c><00:00:31.439><c> taking</c><00:00:31.679><c> a</c><00:00:31.760><c> look</c><00:00:32.000><c> at</c><00:00:32.079><c> the</c>

00:00:32.229 --> 00:00:32.239 align:start position:0%
here you can see taking a look at the
 

00:00:32.239 --> 00:00:34.470 align:start position:0%
here you can see taking a look at the
root<00:00:32.559><c> node</c><00:00:33.120><c> uh</c><00:00:33.360><c> it</c><00:00:33.440><c> has</c><00:00:33.600><c> a</c><00:00:33.760><c> left</c><00:00:34.000><c> sub</c><00:00:34.239><c> tree</c>

00:00:34.470 --> 00:00:34.480 align:start position:0%
root node uh it has a left sub tree
 

00:00:34.480 --> 00:00:36.709 align:start position:0%
root node uh it has a left sub tree
what's<00:00:34.719><c> the</c><00:00:34.960><c> height</c><00:00:35.280><c> of</c><00:00:35.600><c> this</c><00:00:35.920><c> left</c><00:00:36.160><c> sub</c><00:00:36.399><c> tree</c>

00:00:36.709 --> 00:00:36.719 align:start position:0%
what's the height of this left sub tree
 

00:00:36.719 --> 00:00:38.389 align:start position:0%
what's the height of this left sub tree
let's<00:00:36.880><c> call</c><00:00:37.120><c> it</c><00:00:37.360><c> one</c><00:00:37.680><c> right</c><00:00:37.920><c> because</c><00:00:38.160><c> there's</c>

00:00:38.389 --> 00:00:38.399 align:start position:0%
let's call it one right because there's
 

00:00:38.399 --> 00:00:40.549 align:start position:0%
let's call it one right because there's
one<00:00:38.640><c> node</c><00:00:39.040><c> in</c><00:00:39.120><c> the</c><00:00:39.280><c> left</c><00:00:39.520><c> sub</c><00:00:39.760><c> tree</c><00:00:40.160><c> what</c><00:00:40.320><c> about</c>

00:00:40.549 --> 00:00:40.559 align:start position:0%
one node in the left sub tree what about
 

00:00:40.559 --> 00:00:42.630 align:start position:0%
one node in the left sub tree what about
the<00:00:40.879><c> right</c><00:00:41.440><c> subtree</c><00:00:42.000><c> how</c><00:00:42.160><c> m</c><00:00:42.320><c> what's</c><00:00:42.559><c> the</c>

00:00:42.630 --> 00:00:42.640 align:start position:0%
the right subtree how m what's the
 

00:00:42.640 --> 00:00:44.470 align:start position:0%
the right subtree how m what's the
height<00:00:42.879><c> of</c><00:00:42.960><c> this</c><00:00:43.200><c> right</c><00:00:43.440><c> sub</c><00:00:43.680><c> tree</c><00:00:43.760><c> well</c><00:00:44.000><c> it's</c>

00:00:44.470 --> 00:00:44.480 align:start position:0%
height of this right sub tree well it's
 

00:00:44.480 --> 00:00:47.270 align:start position:0%
height of this right sub tree well it's
two<00:00:45.200><c> right</c><00:00:45.920><c> we</c><00:00:46.079><c> can</c><00:00:46.320><c> determine</c><00:00:46.719><c> that</c><00:00:46.879><c> just</c><00:00:47.039><c> by</c>

00:00:47.270 --> 00:00:47.280 align:start position:0%
two right we can determine that just by
 

00:00:47.280 --> 00:00:49.910 align:start position:0%
two right we can determine that just by
looking<00:00:47.600><c> at</c><00:00:47.760><c> it</c><00:00:48.079><c> so</c><00:00:48.719><c> then</c><00:00:49.120><c> the</c><00:00:49.280><c> left</c><00:00:49.520><c> sub</c><00:00:49.760><c> tree</c>

00:00:49.910 --> 00:00:49.920 align:start position:0%
looking at it so then the left sub tree
 

00:00:49.920 --> 00:00:51.189 align:start position:0%
looking at it so then the left sub tree
has<00:00:50.079><c> a</c><00:00:50.160><c> height</c><00:00:50.320><c> of</c><00:00:50.399><c> one</c><00:00:50.640><c> the</c><00:00:50.719><c> right</c><00:00:50.879><c> subtree</c>

00:00:51.189 --> 00:00:51.199 align:start position:0%
has a height of one the right subtree
 

00:00:51.199 --> 00:00:54.229 align:start position:0%
has a height of one the right subtree
has<00:00:51.360><c> a</c><00:00:51.440><c> height</c><00:00:51.680><c> of</c><00:00:51.760><c> two</c><00:00:52.239><c> the</c><00:00:52.399><c> difference</c><00:00:53.199><c> is</c><00:00:53.920><c> uh</c>

00:00:54.229 --> 00:00:54.239 align:start position:0%
has a height of two the difference is uh
 

00:00:54.239 --> 00:00:55.910 align:start position:0%
has a height of two the difference is uh
at<00:00:54.399><c> most</c><00:00:54.640><c> one</c><00:00:54.879><c> right</c><00:00:55.039><c> because</c><00:00:55.199><c> if</c><00:00:55.280><c> we</c><00:00:55.440><c> take</c><00:00:55.600><c> the</c>

00:00:55.910 --> 00:00:55.920 align:start position:0%
at most one right because if we take the
 

00:00:55.920 --> 00:00:57.750 align:start position:0%
at most one right because if we take the
absolute<00:00:56.399><c> value</c><00:00:56.719><c> of</c><00:00:56.879><c> the</c><00:00:56.960><c> difference</c><00:00:57.440><c> we</c><00:00:57.520><c> get</c>

00:00:57.750 --> 00:00:57.760 align:start position:0%
absolute value of the difference we get
 

00:00:57.760 --> 00:01:00.150 align:start position:0%
absolute value of the difference we get
one<00:00:58.160><c> so</c><00:00:58.399><c> we'll</c><00:00:58.640><c> say</c><00:00:59.280><c> the</c>

00:01:00.150 --> 00:01:00.160 align:start position:0%
one so we'll say the
 

00:01:00.160 --> 00:01:02.229 align:start position:0%
one so we'll say the
difference<00:01:00.559><c> is</c><00:01:00.719><c> one</c><00:01:01.039><c> so</c><00:01:01.359><c> we</c><00:01:01.600><c> just</c><00:01:01.760><c> did</c><00:01:02.000><c> that</c>

00:01:02.229 --> 00:01:02.239 align:start position:0%
difference is one so we just did that
 

00:01:02.239 --> 00:01:04.630 align:start position:0%
difference is one so we just did that
for<00:01:02.480><c> the</c><00:01:02.800><c> root</c><00:01:03.120><c> node</c><00:01:03.359><c> but</c><00:01:03.680><c> we</c><00:01:03.840><c> have</c><00:01:04.000><c> to</c><00:01:04.159><c> do</c><00:01:04.400><c> that</c>

00:01:04.630 --> 00:01:04.640 align:start position:0%
for the root node but we have to do that
 

00:01:04.640 --> 00:01:06.710 align:start position:0%
for the root node but we have to do that
for<00:01:04.960><c> every</c><00:01:05.360><c> single</c><00:01:05.760><c> node</c><00:01:06.080><c> to</c><00:01:06.240><c> make</c><00:01:06.400><c> sure</c><00:01:06.560><c> that</c>

00:01:06.710 --> 00:01:06.720 align:start position:0%
for every single node to make sure that
 

00:01:06.720 --> 00:01:08.550 align:start position:0%
for every single node to make sure that
the<00:01:06.880><c> left</c><00:01:07.119><c> and</c><00:01:07.200><c> right</c><00:01:07.360><c> subtrees</c><00:01:07.840><c> of</c><00:01:08.159><c> every</c>

00:01:08.550 --> 00:01:08.560 align:start position:0%
the left and right subtrees of every
 

00:01:08.560 --> 00:01:11.510 align:start position:0%
the left and right subtrees of every
single<00:01:08.880><c> node</c><00:01:09.200><c> differ</c><00:01:09.520><c> by</c><00:01:09.840><c> at</c><00:01:10.240><c> most</c><00:01:10.799><c> one</c><00:01:11.280><c> and</c>

00:01:11.510 --> 00:01:11.520 align:start position:0%
single node differ by at most one and
 

00:01:11.520 --> 00:01:13.350 align:start position:0%
single node differ by at most one and
just<00:01:11.760><c> to</c><00:01:11.840><c> show</c><00:01:12.000><c> you</c><00:01:12.240><c> a</c><00:01:12.320><c> counter</c><00:01:12.720><c> example</c><00:01:13.200><c> so</c>

00:01:13.350 --> 00:01:13.360 align:start position:0%
just to show you a counter example so
 

00:01:13.360 --> 00:01:14.870 align:start position:0%
just to show you a counter example so
this<00:01:13.520><c> is</c><00:01:13.600><c> kind</c><00:01:13.760><c> of</c><00:01:13.840><c> a</c><00:01:13.920><c> badly</c><00:01:14.240><c> drawn</c><00:01:14.479><c> tree</c><00:01:14.720><c> but</c>

00:01:14.870 --> 00:01:14.880 align:start position:0%
this is kind of a badly drawn tree but
 

00:01:14.880 --> 00:01:16.230 align:start position:0%
this is kind of a badly drawn tree but
take<00:01:15.040><c> a</c><00:01:15.040><c> look</c><00:01:15.280><c> at</c><00:01:15.360><c> the</c><00:01:15.439><c> root</c><00:01:15.680><c> node</c><00:01:15.920><c> right</c><00:01:16.080><c> if</c><00:01:16.159><c> we</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
take a look at the root node right if we
 

00:01:16.240 --> 00:01:17.670 align:start position:0%
take a look at the root node right if we
take<00:01:16.320><c> a</c><00:01:16.400><c> look</c><00:01:16.560><c> at</c><00:01:16.640><c> the</c><00:01:16.799><c> left</c><00:01:17.040><c> tree</c><00:01:17.280><c> over</c><00:01:17.439><c> here</c>

00:01:17.670 --> 00:01:17.680 align:start position:0%
take a look at the left tree over here
 

00:01:17.680 --> 00:01:19.190 align:start position:0%
take a look at the left tree over here
the<00:01:17.759><c> height</c><00:01:18.000><c> is</c><00:01:18.159><c> three</c><00:01:18.560><c> if</c><00:01:18.720><c> we</c><00:01:18.799><c> take</c><00:01:18.880><c> a</c><00:01:18.960><c> look</c><00:01:19.119><c> at</c>

00:01:19.190 --> 00:01:19.200 align:start position:0%
the height is three if we take a look at
 

00:01:19.200 --> 00:01:20.870 align:start position:0%
the height is three if we take a look at
the<00:01:19.360><c> right</c><00:01:19.520><c> subtree</c><00:01:20.000><c> the</c><00:01:20.080><c> height</c><00:01:20.320><c> is</c><00:01:20.479><c> three</c><00:01:20.720><c> so</c>

00:01:20.870 --> 00:01:20.880 align:start position:0%
the right subtree the height is three so
 

00:01:20.880 --> 00:01:23.350 align:start position:0%
the right subtree the height is three so
the<00:01:20.960><c> difference</c><00:01:21.520><c> is</c><00:01:22.000><c> zero</c><00:01:22.400><c> which</c><00:01:22.799><c> fits</c><00:01:23.119><c> into</c>

00:01:23.350 --> 00:01:23.360 align:start position:0%
the difference is zero which fits into
 

00:01:23.360 --> 00:01:25.109 align:start position:0%
the difference is zero which fits into
our<00:01:23.520><c> criteria</c><00:01:24.080><c> so</c><00:01:24.240><c> from</c><00:01:24.400><c> the</c><00:01:24.479><c> root</c><00:01:24.720><c> node</c><00:01:24.960><c> the</c>

00:01:25.109 --> 00:01:25.119 align:start position:0%
our criteria so from the root node the
 

00:01:25.119 --> 00:01:26.950 align:start position:0%
our criteria so from the root node the
left<00:01:25.360><c> sub</c><00:01:25.600><c> tree</c><00:01:25.840><c> and</c><00:01:26.000><c> the</c><00:01:26.080><c> right</c><00:01:26.240><c> subtree</c><00:01:26.640><c> are</c>

00:01:26.950 --> 00:01:26.960 align:start position:0%
left sub tree and the right subtree are
 

00:01:26.960 --> 00:01:29.190 align:start position:0%
left sub tree and the right subtree are
balanced<00:01:27.840><c> but</c><00:01:28.240><c> if</c><00:01:28.400><c> we</c><00:01:28.479><c> take</c><00:01:28.640><c> a</c><00:01:28.720><c> look</c><00:01:28.880><c> at</c><00:01:28.960><c> let's</c>

00:01:29.190 --> 00:01:29.200 align:start position:0%
balanced but if we take a look at let's
 

00:01:29.200 --> 00:01:31.350 align:start position:0%
balanced but if we take a look at let's
say<00:01:29.439><c> this</c><00:01:30.159><c> node</c><00:01:30.479><c> right</c><00:01:30.720><c> we</c><00:01:30.880><c> take</c><00:01:30.960><c> a</c><00:01:31.040><c> look</c><00:01:31.280><c> at</c>

00:01:31.350 --> 00:01:31.360 align:start position:0%
say this node right we take a look at
 

00:01:31.360 --> 00:01:33.190 align:start position:0%
say this node right we take a look at
its<00:01:31.600><c> left</c><00:01:31.840><c> sub</c><00:01:32.079><c> tree</c><00:01:32.320><c> which</c><00:01:32.479><c> is</c><00:01:32.640><c> empty</c><00:01:32.960><c> right</c>

00:01:33.190 --> 00:01:33.200 align:start position:0%
its left sub tree which is empty right
 

00:01:33.200 --> 00:01:35.270 align:start position:0%
its left sub tree which is empty right
so<00:01:33.360><c> that's</c><00:01:33.759><c> has</c><00:01:33.920><c> a</c><00:01:34.000><c> height</c><00:01:34.240><c> of</c><00:01:34.400><c> zero</c><00:01:34.880><c> the</c><00:01:35.040><c> right</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
so that's has a height of zero the right
 

00:01:35.280 --> 00:01:37.990 align:start position:0%
so that's has a height of zero the right
subtree<00:01:35.920><c> has</c><00:01:36.079><c> a</c><00:01:36.240><c> height</c><00:01:36.479><c> of</c><00:01:36.720><c> two</c><00:01:37.280><c> so</c><00:01:37.759><c> in</c><00:01:37.840><c> that</c>

00:01:37.990 --> 00:01:38.000 align:start position:0%
subtree has a height of two so in that
 

00:01:38.000 --> 00:01:40.230 align:start position:0%
subtree has a height of two so in that
case<00:01:38.240><c> the</c><00:01:38.400><c> difference</c><00:01:38.799><c> is</c><00:01:38.960><c> two</c><00:01:39.439><c> minus</c><00:01:39.840><c> zero</c>

00:01:40.230 --> 00:01:40.240 align:start position:0%
case the difference is two minus zero
 

00:01:40.240 --> 00:01:42.149 align:start position:0%
case the difference is two minus zero
which<00:01:40.400><c> is</c><00:01:40.640><c> two</c><00:01:40.880><c> right</c><00:01:41.119><c> positive</c><00:01:41.600><c> two</c><00:01:41.840><c> which</c><00:01:42.000><c> is</c>

00:01:42.149 --> 00:01:42.159 align:start position:0%
which is two right positive two which is
 

00:01:42.159 --> 00:01:45.910 align:start position:0%
which is two right positive two which is
greater<00:01:42.960><c> than</c><00:01:43.520><c> one</c><00:01:44.079><c> so</c><00:01:44.320><c> just</c><00:01:44.560><c> because</c><00:01:45.360><c> uh</c><00:01:45.680><c> from</c>

00:01:45.910 --> 00:01:45.920 align:start position:0%
greater than one so just because uh from
 

00:01:45.920 --> 00:01:47.590 align:start position:0%
greater than one so just because uh from
here<00:01:46.479><c> taking</c><00:01:46.720><c> a</c><00:01:46.799><c> look</c><00:01:46.960><c> at</c><00:01:47.040><c> the</c><00:01:47.119><c> root</c><00:01:47.280><c> note</c><00:01:47.520><c> the</c>

00:01:47.590 --> 00:01:47.600 align:start position:0%
here taking a look at the root note the
 

00:01:47.600 --> 00:01:49.109 align:start position:0%
here taking a look at the root note the
left<00:01:47.840><c> and</c><00:01:47.920><c> right</c><00:01:48.079><c> sub</c><00:01:48.320><c> trees</c><00:01:48.560><c> are</c><00:01:48.640><c> balanced</c>

00:01:49.109 --> 00:01:49.119 align:start position:0%
left and right sub trees are balanced
 

00:01:49.119 --> 00:01:50.149 align:start position:0%
left and right sub trees are balanced
doesn't<00:01:49.360><c> mean</c><00:01:49.520><c> that</c><00:01:49.680><c> that's</c><00:01:49.840><c> going</c><00:01:49.920><c> to</c><00:01:50.000><c> be</c>

00:01:50.149 --> 00:01:50.159 align:start position:0%
doesn't mean that that's going to be
 

00:01:50.159 --> 00:01:51.830 align:start position:0%
doesn't mean that that's going to be
true<00:01:50.399><c> for</c><00:01:50.640><c> every</c><00:01:50.880><c> single</c><00:01:51.200><c> node</c><00:01:51.520><c> because</c><00:01:51.680><c> we</c>

00:01:51.830 --> 00:01:51.840 align:start position:0%
true for every single node because we
 

00:01:51.840 --> 00:01:53.510 align:start position:0%
true for every single node because we
just<00:01:52.000><c> looked</c><00:01:52.240><c> at</c><00:01:52.320><c> this</c><00:01:52.640><c> node</c><00:01:53.040><c> the</c><00:01:53.200><c> left</c><00:01:53.439><c> and</c>

00:01:53.510 --> 00:01:53.520 align:start position:0%
just looked at this node the left and
 

00:01:53.520 --> 00:01:56.069 align:start position:0%
just looked at this node the left and
right<00:01:53.759><c> subtrees</c><00:01:54.240><c> were</c><00:01:54.479><c> not</c><00:01:54.799><c> balanced</c><00:01:55.520><c> how</c><00:01:55.759><c> can</c>

00:01:56.069 --> 00:01:56.079 align:start position:0%
right subtrees were not balanced how can
 

00:01:56.079 --> 00:01:57.910 align:start position:0%
right subtrees were not balanced how can
we<00:01:56.320><c> solve</c><00:01:56.560><c> this</c><00:01:56.719><c> efficiently</c><00:01:57.280><c> let</c><00:01:57.439><c> me</c><00:01:57.600><c> first</c>

00:01:57.910 --> 00:01:57.920 align:start position:0%
we solve this efficiently let me first
 

00:01:57.920 --> 00:02:00.389 align:start position:0%
we solve this efficiently let me first
show<00:01:58.079><c> you</c><00:01:58.240><c> kind</c><00:01:58.399><c> of</c><00:01:58.479><c> a</c><00:01:59.119><c> naive</c><00:01:59.680><c> approach</c><00:02:00.320><c> and</c>

00:02:00.389 --> 00:02:00.399 align:start position:0%
show you kind of a naive approach and
 

00:02:00.399 --> 00:02:01.670 align:start position:0%
show you kind of a naive approach and
then<00:02:00.560><c> we'll</c><00:02:00.719><c> see</c><00:02:00.960><c> how</c><00:02:01.119><c> we</c><00:02:01.200><c> can</c><00:02:01.360><c> actually</c>

00:02:01.670 --> 00:02:01.680 align:start position:0%
then we'll see how we can actually
 

00:02:01.680 --> 00:02:04.469 align:start position:0%
then we'll see how we can actually
optimize<00:02:02.320><c> that</c><00:02:02.799><c> so</c><00:02:03.040><c> if</c><00:02:03.200><c> we</c><00:02:03.360><c> were</c><00:02:03.680><c> asking</c>

00:02:04.469 --> 00:02:04.479 align:start position:0%
optimize that so if we were asking
 

00:02:04.479 --> 00:02:06.469 align:start position:0%
optimize that so if we were asking
naively<00:02:05.200><c> right</c><00:02:05.520><c> the</c><00:02:05.680><c> first</c><00:02:06.000><c> question</c><00:02:06.320><c> we're</c>

00:02:06.469 --> 00:02:06.479 align:start position:0%
naively right the first question we're
 

00:02:06.479 --> 00:02:08.790 align:start position:0%
naively right the first question we're
asking<00:02:06.799><c> is</c><00:02:07.040><c> from</c><00:02:07.360><c> the</c><00:02:07.600><c> root</c><00:02:08.000><c> node</c><00:02:08.399><c> are</c><00:02:08.560><c> the</c>

00:02:08.790 --> 00:02:08.800 align:start position:0%
asking is from the root node are the
 

00:02:08.800 --> 00:02:11.350 align:start position:0%
asking is from the root node are the
left<00:02:09.119><c> and</c><00:02:09.280><c> right</c><00:02:09.520><c> sub</c><00:02:09.840><c> trees</c><00:02:10.399><c> balanced</c><00:02:11.039><c> how</c><00:02:11.200><c> do</c>

00:02:11.350 --> 00:02:11.360 align:start position:0%
left and right sub trees balanced how do
 

00:02:11.360 --> 00:02:13.830 align:start position:0%
left and right sub trees balanced how do
we<00:02:11.520><c> even</c><00:02:11.840><c> determine</c><00:02:12.480><c> that</c><00:02:12.879><c> well</c><00:02:13.200><c> do</c><00:02:13.280><c> you</c><00:02:13.440><c> agree</c>

00:02:13.830 --> 00:02:13.840 align:start position:0%
we even determine that well do you agree
 

00:02:13.840 --> 00:02:15.830 align:start position:0%
we even determine that well do you agree
that<00:02:14.000><c> we</c><00:02:14.160><c> could</c><00:02:14.400><c> probably</c><00:02:14.800><c> do</c><00:02:15.040><c> a</c><00:02:15.120><c> recursive</c>

00:02:15.830 --> 00:02:15.840 align:start position:0%
that we could probably do a recursive
 

00:02:15.840 --> 00:02:18.229 align:start position:0%
that we could probably do a recursive
dfs<00:02:16.560><c> on</c><00:02:16.720><c> the</c><00:02:16.879><c> left</c><00:02:17.120><c> sub</c><00:02:17.360><c> tree</c><00:02:17.520><c> to</c><00:02:17.680><c> determine</c>

00:02:18.229 --> 00:02:18.239 align:start position:0%
dfs on the left sub tree to determine
 

00:02:18.239 --> 00:02:20.150 align:start position:0%
dfs on the left sub tree to determine
the<00:02:18.480><c> height</c><00:02:18.800><c> of</c><00:02:18.879><c> the</c><00:02:19.040><c> left</c><00:02:19.280><c> subtree</c><00:02:19.920><c> do</c><00:02:20.080><c> a</c>

00:02:20.150 --> 00:02:20.160 align:start position:0%
the height of the left subtree do a
 

00:02:20.160 --> 00:02:22.550 align:start position:0%
the height of the left subtree do a
recursive<00:02:20.640><c> dfs</c><00:02:21.200><c> on</c><00:02:21.280><c> the</c><00:02:21.440><c> right</c><00:02:21.760><c> subtree</c><00:02:22.400><c> to</c>

00:02:22.550 --> 00:02:22.560 align:start position:0%
recursive dfs on the right subtree to
 

00:02:22.560 --> 00:02:24.710 align:start position:0%
recursive dfs on the right subtree to
determine<00:02:22.959><c> the</c><00:02:23.040><c> height</c><00:02:23.360><c> of</c><00:02:23.520><c> this</c><00:02:23.760><c> subtree</c><00:02:24.640><c> and</c>

00:02:24.710 --> 00:02:24.720 align:start position:0%
determine the height of this subtree and
 

00:02:24.720 --> 00:02:26.150 align:start position:0%
determine the height of this subtree and
then<00:02:24.959><c> we</c><00:02:25.040><c> could</c><00:02:25.280><c> compare</c><00:02:25.680><c> those</c><00:02:25.920><c> and</c><00:02:26.080><c> make</c>

00:02:26.150 --> 00:02:26.160 align:start position:0%
then we could compare those and make
 

00:02:26.160 --> 00:02:27.670 align:start position:0%
then we could compare those and make
sure<00:02:26.319><c> that</c><00:02:26.480><c> the</c><00:02:26.640><c> difference</c><00:02:27.040><c> is</c><00:02:27.120><c> less</c><00:02:27.360><c> than</c><00:02:27.520><c> or</c>

00:02:27.670 --> 00:02:27.680 align:start position:0%
sure that the difference is less than or
 

00:02:27.680 --> 00:02:29.190 align:start position:0%
sure that the difference is less than or
equal<00:02:27.920><c> to</c><00:02:28.000><c> one</c><00:02:28.319><c> do</c><00:02:28.400><c> you</c><00:02:28.560><c> agree</c><00:02:28.879><c> that</c><00:02:28.959><c> we</c><00:02:29.040><c> could</c>

00:02:29.190 --> 00:02:29.200 align:start position:0%
equal to one do you agree that we could
 

00:02:29.200 --> 00:02:31.110 align:start position:0%
equal to one do you agree that we could
do<00:02:29.360><c> that</c><00:02:29.680><c> probably</c><00:02:30.160><c> right</c><00:02:30.400><c> i'll</c><00:02:30.560><c> explain</c><00:02:30.959><c> more</c>

00:02:31.110 --> 00:02:31.120 align:start position:0%
do that probably right i'll explain more
 

00:02:31.120 --> 00:02:33.030 align:start position:0%
do that probably right i'll explain more
details<00:02:31.599><c> in</c><00:02:31.680><c> the</c><00:02:31.840><c> code</c><00:02:32.319><c> but</c><00:02:32.480><c> for</c><00:02:32.640><c> now</c><00:02:32.879><c> let's</c>

00:02:33.030 --> 00:02:33.040 align:start position:0%
details in the code but for now let's
 

00:02:33.040 --> 00:02:35.589 align:start position:0%
details in the code but for now let's
just<00:02:33.280><c> assume</c><00:02:33.680><c> we</c><00:02:33.840><c> can</c><00:02:34.000><c> do</c><00:02:34.239><c> that</c><00:02:34.720><c> we</c><00:02:35.120><c> start</c><00:02:35.440><c> from</c>

00:02:35.589 --> 00:02:35.599 align:start position:0%
just assume we can do that we start from
 

00:02:35.599 --> 00:02:37.509 align:start position:0%
just assume we can do that we start from
the<00:02:35.680><c> root</c><00:02:35.920><c> we</c><00:02:36.000><c> run</c><00:02:36.160><c> a</c><00:02:36.239><c> dfs</c><00:02:36.720><c> on</c><00:02:36.879><c> the</c><00:02:36.959><c> left</c><00:02:37.280><c> and</c><00:02:37.440><c> on</c>

00:02:37.509 --> 00:02:37.519 align:start position:0%
the root we run a dfs on the left and on
 

00:02:37.519 --> 00:02:39.270 align:start position:0%
the root we run a dfs on the left and on
the<00:02:37.599><c> right</c><00:02:37.840><c> that</c><00:02:37.920><c> means</c><00:02:38.160><c> we</c><00:02:38.400><c> go</c><00:02:38.640><c> through</c><00:02:38.959><c> every</c>

00:02:39.270 --> 00:02:39.280 align:start position:0%
the right that means we go through every
 

00:02:39.280 --> 00:02:40.869 align:start position:0%
the right that means we go through every
single<00:02:39.599><c> node</c><00:02:39.840><c> in</c><00:02:40.000><c> the</c><00:02:40.080><c> tree</c><00:02:40.239><c> so</c><00:02:40.400><c> we</c><00:02:40.560><c> just</c><00:02:40.720><c> did</c>

00:02:40.869 --> 00:02:40.879 align:start position:0%
single node in the tree so we just did
 

00:02:40.879 --> 00:02:43.190 align:start position:0%
single node in the tree so we just did
an<00:02:41.040><c> o</c><00:02:41.280><c> of</c><00:02:41.519><c> n</c><00:02:41.840><c> operation</c><00:02:42.400><c> right</c><00:02:42.720><c> and</c><00:02:42.879><c> we</c><00:02:42.959><c> were</c>

00:02:43.190 --> 00:02:43.200 align:start position:0%
an o of n operation right and we were
 

00:02:43.200 --> 00:02:45.030 align:start position:0%
an o of n operation right and we were
able<00:02:43.360><c> to</c><00:02:43.519><c> determine</c><00:02:43.920><c> okay</c><00:02:44.239><c> from</c><00:02:44.480><c> the</c><00:02:44.720><c> root</c>

00:02:45.030 --> 00:02:45.040 align:start position:0%
able to determine okay from the root
 

00:02:45.040 --> 00:02:47.589 align:start position:0%
able to determine okay from the root
node<00:02:45.599><c> yes</c><00:02:46.000><c> it</c><00:02:46.239><c> is</c><00:02:46.480><c> balanced</c><00:02:46.959><c> but</c><00:02:47.120><c> we're</c><00:02:47.280><c> not</c>

00:02:47.589 --> 00:02:47.599 align:start position:0%
node yes it is balanced but we're not
 

00:02:47.599 --> 00:02:48.949 align:start position:0%
node yes it is balanced but we're not
done<00:02:47.840><c> yet</c><00:02:48.000><c> right</c><00:02:48.239><c> we</c><00:02:48.400><c> now</c><00:02:48.560><c> we</c><00:02:48.720><c> have</c><00:02:48.800><c> to</c>

00:02:48.949 --> 00:02:48.959 align:start position:0%
done yet right we now we have to
 

00:02:48.959 --> 00:02:52.630 align:start position:0%
done yet right we now we have to
continue<00:02:49.440><c> to</c><00:02:49.680><c> ask</c><00:02:50.080><c> that</c><00:02:50.480><c> question</c><00:02:51.280><c> for</c><00:02:51.760><c> every</c>

00:02:52.630 --> 00:02:52.640 align:start position:0%
continue to ask that question for every
 

00:02:52.640 --> 00:02:55.670 align:start position:0%
continue to ask that question for every
single<00:02:53.519><c> node</c><00:02:54.160><c> right</c><00:02:54.720><c> so</c><00:02:54.959><c> the</c><00:02:55.120><c> next</c><00:02:55.360><c> question</c>

00:02:55.670 --> 00:02:55.680 align:start position:0%
single node right so the next question
 

00:02:55.680 --> 00:02:57.350 align:start position:0%
single node right so the next question
we're<00:02:55.840><c> going</c><00:02:56.000><c> to</c><00:02:56.080><c> ask</c><00:02:56.400><c> is</c><00:02:56.560><c> suppose</c><00:02:57.040><c> on</c><00:02:57.200><c> the</c>

00:02:57.350 --> 00:02:57.360 align:start position:0%
we're going to ask is suppose on the
 

00:02:57.360 --> 00:03:00.149 align:start position:0%
we're going to ask is suppose on the
left<00:02:57.599><c> subtree</c><00:02:58.159><c> right</c><00:02:58.560><c> from</c><00:02:58.800><c> the</c><00:02:58.959><c> left</c><00:02:59.280><c> subtree</c>

00:03:00.149 --> 00:03:00.159 align:start position:0%
left subtree right from the left subtree
 

00:03:00.159 --> 00:03:02.149 align:start position:0%
left subtree right from the left subtree
are<00:03:00.400><c> the</c><00:03:00.720><c> left</c><00:03:01.040><c> and</c><00:03:01.200><c> right</c><00:03:01.360><c> subtrees</c><00:03:01.920><c> from</c>

00:03:02.149 --> 00:03:02.159 align:start position:0%
are the left and right subtrees from
 

00:03:02.159 --> 00:03:05.190 align:start position:0%
are the left and right subtrees from
this<00:03:02.480><c> node</c><00:03:03.120><c> also</c><00:03:03.920><c> balanced</c><00:03:04.640><c> and</c><00:03:04.800><c> of</c><00:03:04.959><c> course</c>

00:03:05.190 --> 00:03:05.200 align:start position:0%
this node also balanced and of course
 

00:03:05.200 --> 00:03:07.350 align:start position:0%
this node also balanced and of course
they're<00:03:05.360><c> both</c><00:03:05.680><c> zero</c><00:03:06.080><c> so</c><00:03:06.480><c> we</c><00:03:06.800><c> determine</c><00:03:07.200><c> that</c>

00:03:07.350 --> 00:03:07.360 align:start position:0%
they're both zero so we determine that
 

00:03:07.360 --> 00:03:08.949 align:start position:0%
they're both zero so we determine that
they<00:03:07.599><c> are</c><00:03:07.840><c> and</c><00:03:08.000><c> then</c><00:03:08.480><c> we'll</c><00:03:08.640><c> have</c><00:03:08.800><c> to</c>

00:03:08.949 --> 00:03:08.959 align:start position:0%
they are and then we'll have to
 

00:03:08.959 --> 00:03:10.710 align:start position:0%
they are and then we'll have to
recursively<00:03:09.519><c> go</c><00:03:09.680><c> to</c><00:03:09.840><c> the</c><00:03:09.920><c> right</c><00:03:10.080><c> subtree</c><00:03:10.480><c> from</c>

00:03:10.710 --> 00:03:10.720 align:start position:0%
recursively go to the right subtree from
 

00:03:10.720 --> 00:03:12.390 align:start position:0%
recursively go to the right subtree from
here<00:03:10.959><c> we're</c><00:03:11.120><c> going</c><00:03:11.200><c> to</c><00:03:11.360><c> ask</c><00:03:11.760><c> are</c><00:03:11.840><c> the</c><00:03:12.000><c> left</c><00:03:12.239><c> and</c>

00:03:12.390 --> 00:03:12.400 align:start position:0%
here we're going to ask are the left and
 

00:03:12.400 --> 00:03:15.350 align:start position:0%
here we're going to ask are the left and
right<00:03:12.560><c> subtrees</c><00:03:13.360><c> balanced</c><00:03:14.080><c> yes</c><00:03:14.319><c> they</c><00:03:14.560><c> are</c><00:03:15.200><c> but</c>

00:03:15.350 --> 00:03:15.360 align:start position:0%
right subtrees balanced yes they are but
 

00:03:15.360 --> 00:03:16.949 align:start position:0%
right subtrees balanced yes they are but
we'll<00:03:15.519><c> recursively</c><00:03:16.159><c> have</c><00:03:16.319><c> to</c><00:03:16.400><c> continue</c><00:03:16.800><c> we'll</c>

00:03:16.949 --> 00:03:16.959 align:start position:0%
we'll recursively have to continue we'll
 

00:03:16.959 --> 00:03:18.390 align:start position:0%
we'll recursively have to continue we'll
have<00:03:17.040><c> to</c><00:03:17.120><c> do</c><00:03:17.280><c> that</c><00:03:17.519><c> from</c><00:03:17.680><c> this</c><00:03:17.920><c> node</c><00:03:18.159><c> and</c><00:03:18.239><c> then</c>

00:03:18.390 --> 00:03:18.400 align:start position:0%
have to do that from this node and then
 

00:03:18.400 --> 00:03:19.990 align:start position:0%
have to do that from this node and then
we'll<00:03:18.560><c> have</c><00:03:18.720><c> to</c><00:03:18.800><c> do</c><00:03:18.879><c> that</c><00:03:19.040><c> from</c><00:03:19.200><c> this</c><00:03:19.440><c> node</c>

00:03:19.990 --> 00:03:20.000 align:start position:0%
we'll have to do that from this node
 

00:03:20.000 --> 00:03:22.949 align:start position:0%
we'll have to do that from this node
since<00:03:20.319><c> we're</c><00:03:20.640><c> running</c><00:03:21.040><c> a</c><00:03:21.200><c> recursive</c><00:03:21.760><c> dfs</c><00:03:22.560><c> on</c>

00:03:22.949 --> 00:03:22.959 align:start position:0%
since we're running a recursive dfs on
 

00:03:22.959 --> 00:03:26.789 align:start position:0%
since we're running a recursive dfs on
every<00:03:23.440><c> single</c><00:03:24.000><c> subtree</c><00:03:25.040><c> on</c><00:03:25.599><c> this</c><00:03:26.080><c> uh</c><00:03:26.560><c> root</c>

00:03:26.789 --> 00:03:26.799 align:start position:0%
every single subtree on this uh root
 

00:03:26.799 --> 00:03:28.710 align:start position:0%
every single subtree on this uh root
tree<00:03:27.280><c> we're</c><00:03:27.519><c> going</c><00:03:27.599><c> to</c><00:03:27.680><c> have</c><00:03:27.840><c> to</c><00:03:28.400><c> do</c><00:03:28.640><c> it</c>

00:03:28.710 --> 00:03:28.720 align:start position:0%
tree we're going to have to do it
 

00:03:28.720 --> 00:03:31.750 align:start position:0%
tree we're going to have to do it
basically<00:03:29.200><c> an</c><00:03:29.440><c> o</c><00:03:29.680><c> of</c><00:03:30.000><c> n</c><00:03:30.400><c> operation</c><00:03:31.120><c> each</c><00:03:31.519><c> time</c>

00:03:31.750 --> 00:03:31.760 align:start position:0%
basically an o of n operation each time
 

00:03:31.760 --> 00:03:34.390 align:start position:0%
basically an o of n operation each time
we<00:03:32.080><c> ask</c><00:03:32.319><c> that</c><00:03:32.640><c> question</c><00:03:33.280><c> is</c><00:03:33.519><c> it</c><00:03:33.760><c> balanced</c><00:03:34.239><c> from</c>

00:03:34.390 --> 00:03:34.400 align:start position:0%
we ask that question is it balanced from
 

00:03:34.400 --> 00:03:36.070 align:start position:0%
we ask that question is it balanced from
here<00:03:34.720><c> is</c><00:03:34.879><c> it</c><00:03:34.959><c> balanced</c><00:03:35.360><c> from</c><00:03:35.519><c> here</c><00:03:35.840><c> is</c><00:03:36.000><c> it</c>

00:03:36.070 --> 00:03:36.080 align:start position:0%
here is it balanced from here is it
 

00:03:36.080 --> 00:03:37.190 align:start position:0%
here is it balanced from here is it
balanced<00:03:36.319><c> from</c><00:03:36.480><c> here</c><00:03:36.640><c> and</c><00:03:36.799><c> we</c><00:03:36.879><c> could</c><00:03:37.040><c> have</c><00:03:37.120><c> a</c>

00:03:37.190 --> 00:03:37.200 align:start position:0%
balanced from here and we could have a
 

00:03:37.200 --> 00:03:39.030 align:start position:0%
balanced from here and we could have a
really<00:03:37.440><c> big</c><00:03:37.760><c> tree</c><00:03:38.239><c> and</c><00:03:38.319><c> we'd</c><00:03:38.560><c> have</c><00:03:38.640><c> to</c><00:03:38.720><c> do</c><00:03:38.879><c> an</c>

00:03:39.030 --> 00:03:39.040 align:start position:0%
really big tree and we'd have to do an
 

00:03:39.040 --> 00:03:41.110 align:start position:0%
really big tree and we'd have to do an
oven<00:03:39.440><c> operation</c><00:03:39.920><c> each</c><00:03:40.159><c> time</c><00:03:40.400><c> of</c><00:03:40.799><c> n</c><00:03:40.959><c> is</c><00:03:41.040><c> the</c>

00:03:41.110 --> 00:03:41.120 align:start position:0%
oven operation each time of n is the
 

00:03:41.120 --> 00:03:43.350 align:start position:0%
oven operation each time of n is the
number<00:03:41.360><c> of</c><00:03:41.519><c> nodes</c><00:03:41.920><c> in</c><00:03:42.000><c> the</c><00:03:42.159><c> tree</c><00:03:42.799><c> and</c><00:03:43.040><c> if</c><00:03:43.120><c> we</c>

00:03:43.350 --> 00:03:43.360 align:start position:0%
number of nodes in the tree and if we
 

00:03:43.360 --> 00:03:46.630 align:start position:0%
number of nodes in the tree and if we
have<00:03:43.519><c> to</c><00:03:43.599><c> do</c><00:03:43.760><c> this</c><00:03:44.239><c> n</c><00:03:44.560><c> operation</c><00:03:45.440><c> n</c><00:03:46.080><c> times</c>

00:03:46.630 --> 00:03:46.640 align:start position:0%
have to do this n operation n times
 

00:03:46.640 --> 00:03:48.550 align:start position:0%
have to do this n operation n times
we're<00:03:46.799><c> going</c><00:03:46.879><c> to</c><00:03:46.959><c> get</c><00:03:47.120><c> a</c><00:03:47.280><c> time</c><00:03:47.519><c> complexity</c><00:03:48.159><c> of</c>

00:03:48.550 --> 00:03:48.560 align:start position:0%
we're going to get a time complexity of
 

00:03:48.560 --> 00:03:51.430 align:start position:0%
we're going to get a time complexity of
o<00:03:48.720><c> of</c><00:03:49.040><c> n</c><00:03:49.599><c> squared</c><00:03:50.480><c> so</c><00:03:50.640><c> now</c><00:03:50.799><c> the</c><00:03:50.959><c> question</c><00:03:51.280><c> is</c>

00:03:51.430 --> 00:03:51.440 align:start position:0%
o of n squared so now the question is
 

00:03:51.440 --> 00:03:53.429 align:start position:0%
o of n squared so now the question is
can<00:03:51.680><c> we</c><00:03:51.840><c> do</c><00:03:52.159><c> better</c><00:03:52.400><c> than</c><00:03:52.560><c> that</c><00:03:52.799><c> is</c><00:03:52.959><c> there</c><00:03:53.200><c> any</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
can we do better than that is there any
 

00:03:53.439 --> 00:03:55.990 align:start position:0%
can we do better than that is there any
repeated<00:03:54.080><c> work</c><00:03:54.480><c> and</c><00:03:54.640><c> i'll</c><00:03:54.799><c> show</c><00:03:54.959><c> you</c><00:03:55.439><c> that</c><00:03:55.680><c> yes</c>

00:03:55.990 --> 00:03:56.000 align:start position:0%
repeated work and i'll show you that yes
 

00:03:56.000 --> 00:03:58.470 align:start position:0%
repeated work and i'll show you that yes
there<00:03:56.319><c> is</c><00:03:56.480><c> repeated</c><00:03:56.959><c> work</c><00:03:57.360><c> and</c><00:03:57.519><c> it</c><00:03:57.680><c> basically</c>

00:03:58.470 --> 00:03:58.480 align:start position:0%
there is repeated work and it basically
 

00:03:58.480 --> 00:04:00.390 align:start position:0%
there is repeated work and it basically
can<00:03:58.640><c> be</c><00:03:58.799><c> eliminated</c><00:03:59.760><c> by</c>

00:04:00.390 --> 00:04:00.400 align:start position:0%
can be eliminated by
 

00:04:00.400 --> 00:04:03.350 align:start position:0%
can be eliminated by
asking<00:04:01.200><c> the</c><00:04:01.439><c> question</c><00:04:01.920><c> in</c><00:04:02.080><c> a</c><00:04:02.239><c> different</c><00:04:02.720><c> order</c>

00:04:03.350 --> 00:04:03.360 align:start position:0%
asking the question in a different order
 

00:04:03.360 --> 00:04:05.750 align:start position:0%
asking the question in a different order
what<00:04:03.599><c> i</c><00:04:03.760><c> mean</c><00:04:04.000><c> by</c><00:04:04.159><c> that</c><00:04:04.319><c> is</c><00:04:04.480><c> instead</c><00:04:04.879><c> of</c><00:04:05.200><c> first</c>

00:04:05.750 --> 00:04:05.760 align:start position:0%
what i mean by that is instead of first
 

00:04:05.760 --> 00:04:08.630 align:start position:0%
what i mean by that is instead of first
asking<00:04:06.319><c> if</c><00:04:06.720><c> the</c><00:04:06.959><c> entire</c><00:04:07.360><c> tree</c><00:04:07.760><c> is</c><00:04:08.000><c> balanced</c>

00:04:08.630 --> 00:04:08.640 align:start position:0%
asking if the entire tree is balanced
 

00:04:08.640 --> 00:04:10.229 align:start position:0%
asking if the entire tree is balanced
from<00:04:08.959><c> the</c><00:04:09.200><c> root</c><00:04:09.439><c> node</c><00:04:09.680><c> right</c><00:04:09.840><c> that's</c><00:04:10.080><c> the</c>

00:04:10.229 --> 00:04:10.239 align:start position:0%
from the root node right that's the
 

00:04:10.239 --> 00:04:12.070 align:start position:0%
from the root node right that's the
first<00:04:10.560><c> question</c><00:04:10.879><c> we</c><00:04:11.040><c> ask</c><00:04:11.280><c> is</c><00:04:11.439><c> it</c><00:04:11.599><c> balance</c>

00:04:12.070 --> 00:04:12.080 align:start position:0%
first question we ask is it balance
 

00:04:12.080 --> 00:04:14.229 align:start position:0%
first question we ask is it balance
starting<00:04:12.480><c> from</c><00:04:12.720><c> here</c><00:04:13.120><c> instead</c><00:04:13.519><c> of</c><00:04:13.680><c> asking</c>

00:04:14.229 --> 00:04:14.239 align:start position:0%
starting from here instead of asking
 

00:04:14.239 --> 00:04:16.229 align:start position:0%
starting from here instead of asking
that<00:04:14.799><c> we</c><00:04:15.360><c> uh</c>

00:04:16.229 --> 00:04:16.239 align:start position:0%
that we uh
 

00:04:16.239 --> 00:04:18.310 align:start position:0%
that we uh
do<00:04:16.400><c> this</c><00:04:16.720><c> bottom</c><00:04:17.280><c> up</c><00:04:17.519><c> we</c><00:04:17.680><c> start</c><00:04:18.079><c> we</c>

00:04:18.310 --> 00:04:18.320 align:start position:0%
do this bottom up we start we
 

00:04:18.320 --> 00:04:20.229 align:start position:0%
do this bottom up we start we
recursively<00:04:19.199><c> instead</c><00:04:19.519><c> of</c><00:04:19.759><c> asking</c><00:04:20.000><c> it</c><00:04:20.079><c> from</c>

00:04:20.229 --> 00:04:20.239 align:start position:0%
recursively instead of asking it from
 

00:04:20.239 --> 00:04:21.749 align:start position:0%
recursively instead of asking it from
here<00:04:20.400><c> we're</c><00:04:20.560><c> going</c><00:04:20.639><c> to</c><00:04:20.720><c> check</c><00:04:20.959><c> okay</c><00:04:21.280><c> is</c><00:04:21.440><c> this</c>

00:04:21.749 --> 00:04:21.759 align:start position:0%
here we're going to check okay is this
 

00:04:21.759 --> 00:04:24.230 align:start position:0%
here we're going to check okay is this
entire<00:04:22.479><c> right</c><00:04:22.720><c> subtree</c><00:04:23.199><c> balanced</c><00:04:23.759><c> before</c><00:04:24.160><c> we</c>

00:04:24.230 --> 00:04:24.240 align:start position:0%
entire right subtree balanced before we
 

00:04:24.240 --> 00:04:26.070 align:start position:0%
entire right subtree balanced before we
do<00:04:24.479><c> that</c><00:04:24.800><c> we're</c><00:04:24.960><c> going</c><00:04:25.040><c> to</c><00:04:25.199><c> ask</c><00:04:25.440><c> is</c><00:04:25.680><c> this</c>

00:04:26.070 --> 00:04:26.080 align:start position:0%
do that we're going to ask is this
 

00:04:26.080 --> 00:04:27.590 align:start position:0%
do that we're going to ask is this
entire<00:04:26.560><c> subtree</c><00:04:27.040><c> balance</c><00:04:27.360><c> and</c><00:04:27.440><c> we're</c><00:04:27.600><c> going</c>

00:04:27.590 --> 00:04:27.600 align:start position:0%
entire subtree balance and we're going
 

00:04:27.600 --> 00:04:29.830 align:start position:0%
entire subtree balance and we're going
to<00:04:27.680><c> keep</c><00:04:27.919><c> going</c><00:04:28.639><c> lower</c><00:04:29.040><c> and</c><00:04:29.199><c> lower</c><00:04:29.440><c> until</c><00:04:29.759><c> we</c>

00:04:29.830 --> 00:04:29.840 align:start position:0%
to keep going lower and lower until we
 

00:04:29.840 --> 00:04:31.670 align:start position:0%
to keep going lower and lower until we
get<00:04:30.000><c> to</c><00:04:30.080><c> the</c><00:04:30.160><c> base</c><00:04:30.479><c> case</c><00:04:30.960><c> once</c><00:04:31.199><c> we</c><00:04:31.280><c> get</c><00:04:31.440><c> to</c><00:04:31.520><c> the</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
get to the base case once we get to the
 

00:04:31.680 --> 00:04:34.310 align:start position:0%
get to the base case once we get to the
base<00:04:31.919><c> case</c><00:04:32.320><c> then</c><00:04:32.560><c> we're</c><00:04:32.720><c> going</c><00:04:32.800><c> to</c><00:04:33.040><c> go</c><00:04:33.280><c> back</c><00:04:33.840><c> up</c>

00:04:34.310 --> 00:04:34.320 align:start position:0%
base case then we're going to go back up
 

00:04:34.320 --> 00:04:35.990 align:start position:0%
base case then we're going to go back up
and<00:04:34.479><c> i'll</c><00:04:34.720><c> show</c><00:04:34.880><c> you</c><00:04:35.120><c> how</c><00:04:35.360><c> that's</c><00:04:35.680><c> actually</c>

00:04:35.990 --> 00:04:36.000 align:start position:0%
and i'll show you how that's actually
 

00:04:36.000 --> 00:04:38.629 align:start position:0%
and i'll show you how that's actually
going<00:04:36.160><c> to</c><00:04:36.320><c> end</c><00:04:36.639><c> up</c><00:04:37.040><c> eliminating</c><00:04:37.840><c> the</c><00:04:38.000><c> repeated</c>

00:04:38.629 --> 00:04:38.639 align:start position:0%
going to end up eliminating the repeated
 

00:04:38.639 --> 00:04:40.710 align:start position:0%
going to end up eliminating the repeated
work<00:04:39.120><c> if</c><00:04:39.280><c> we</c><00:04:39.440><c> do</c><00:04:39.680><c> it</c><00:04:39.840><c> in</c><00:04:39.919><c> this</c><00:04:40.160><c> order</c><00:04:40.479><c> we'll</c>

00:04:40.710 --> 00:04:40.720 align:start position:0%
work if we do it in this order we'll
 

00:04:40.720 --> 00:04:43.270 align:start position:0%
work if we do it in this order we'll
only<00:04:40.960><c> have</c><00:04:41.120><c> to</c><00:04:41.280><c> visit</c><00:04:41.600><c> each</c><00:04:41.919><c> node</c><00:04:42.240><c> at</c><00:04:42.479><c> most</c><00:04:42.960><c> one</c>

00:04:43.270 --> 00:04:43.280 align:start position:0%
only have to visit each node at most one
 

00:04:43.280 --> 00:04:45.510 align:start position:0%
only have to visit each node at most one
time<00:04:43.759><c> which</c><00:04:44.000><c> will</c><00:04:44.240><c> ensure</c><00:04:44.639><c> the</c><00:04:44.880><c> overall</c><00:04:45.360><c> time</c>

00:04:45.510 --> 00:04:45.520 align:start position:0%
time which will ensure the overall time
 

00:04:45.520 --> 00:04:47.990 align:start position:0%
time which will ensure the overall time
complexity<00:04:46.160><c> is</c><00:04:46.240><c> going</c><00:04:46.320><c> to</c><00:04:46.400><c> be</c><00:04:46.720><c> big</c><00:04:46.960><c> o</c><00:04:47.120><c> of</c><00:04:47.440><c> n</c>

00:04:47.990 --> 00:04:48.000 align:start position:0%
complexity is going to be big o of n
 

00:04:48.000 --> 00:04:51.270 align:start position:0%
complexity is going to be big o of n
rather<00:04:48.320><c> than</c><00:04:48.720><c> n</c><00:04:49.040><c> squared</c><00:04:50.000><c> okay</c><00:04:50.560><c> so</c><00:04:50.960><c> when</c><00:04:51.199><c> we</c>

00:04:51.270 --> 00:04:51.280 align:start position:0%
rather than n squared okay so when we
 

00:04:51.280 --> 00:04:53.189 align:start position:0%
rather than n squared okay so when we
get<00:04:51.440><c> to</c><00:04:51.520><c> the</c><00:04:51.680><c> root</c><00:04:52.080><c> before</c><00:04:52.479><c> we</c><00:04:52.639><c> check</c><00:04:52.880><c> if</c><00:04:53.040><c> it's</c>

00:04:53.189 --> 00:04:53.199 align:start position:0%
get to the root before we check if it's
 

00:04:53.199 --> 00:04:54.390 align:start position:0%
get to the root before we check if it's
balanced<00:04:53.520><c> from</c><00:04:53.680><c> here</c><00:04:53.840><c> we're</c><00:04:54.000><c> going</c><00:04:54.080><c> to</c><00:04:54.160><c> check</c>

00:04:54.390 --> 00:04:54.400 align:start position:0%
balanced from here we're going to check
 

00:04:54.400 --> 00:04:57.030 align:start position:0%
balanced from here we're going to check
if<00:04:54.479><c> it's</c><00:04:54.639><c> bounced</c><00:04:55.040><c> from</c><00:04:55.280><c> this</c><00:04:55.840><c> right</c><00:04:56.160><c> subtree</c>

00:04:57.030 --> 00:04:57.040 align:start position:0%
if it's bounced from this right subtree
 

00:04:57.040 --> 00:04:59.110 align:start position:0%
if it's bounced from this right subtree
that<00:04:57.199><c> makes</c><00:04:57.440><c> sense</c><00:04:57.759><c> so</c><00:04:58.000><c> far</c><00:04:58.400><c> and</c><00:04:58.479><c> then</c><00:04:58.720><c> before</c>

00:04:59.110 --> 00:04:59.120 align:start position:0%
that makes sense so far and then before
 

00:04:59.120 --> 00:05:00.629 align:start position:0%
that makes sense so far and then before
we<00:04:59.280><c> ask</c><00:04:59.600><c> from</c><00:04:59.759><c> this</c><00:04:59.919><c> position</c><00:05:00.320><c> we're</c><00:05:00.479><c> gonna</c>

00:05:00.629 --> 00:05:00.639 align:start position:0%
we ask from this position we're gonna
 

00:05:00.639 --> 00:05:02.710 align:start position:0%
we ask from this position we're gonna
ask<00:05:00.800><c> is</c><00:05:00.960><c> it</c><00:05:01.039><c> bounced</c><00:05:01.440><c> from</c><00:05:01.840><c> this</c><00:05:02.160><c> leaf</c><00:05:02.479><c> node</c>

00:05:02.710 --> 00:05:02.720 align:start position:0%
ask is it bounced from this leaf node
 

00:05:02.720 --> 00:05:04.070 align:start position:0%
ask is it bounced from this leaf node
right<00:05:02.960><c> and</c><00:05:03.039><c> now</c><00:05:03.199><c> we</c><00:05:03.280><c> can't</c><00:05:03.440><c> really</c><00:05:03.600><c> go</c><00:05:03.840><c> any</c>

00:05:04.070 --> 00:05:04.080 align:start position:0%
right and now we can't really go any
 

00:05:04.080 --> 00:05:05.990 align:start position:0%
right and now we can't really go any
lower<00:05:04.400><c> because</c><00:05:04.880><c> this</c><00:05:05.280><c> node</c><00:05:05.520><c> doesn't</c><00:05:05.759><c> actually</c>

00:05:05.990 --> 00:05:06.000 align:start position:0%
lower because this node doesn't actually
 

00:05:06.000 --> 00:05:07.430 align:start position:0%
lower because this node doesn't actually
have<00:05:06.160><c> any</c><00:05:06.320><c> children</c><00:05:06.639><c> so</c><00:05:06.880><c> of</c><00:05:06.960><c> course</c><00:05:07.199><c> its</c>

00:05:07.430 --> 00:05:07.440 align:start position:0%
have any children so of course its
 

00:05:07.440 --> 00:05:09.510 align:start position:0%
have any children so of course its
subtrees<00:05:08.000><c> are</c><00:05:08.240><c> going</c><00:05:08.400><c> to</c><00:05:08.560><c> be</c><00:05:08.720><c> balanced</c><00:05:09.360><c> but</c>

00:05:09.510 --> 00:05:09.520 align:start position:0%
subtrees are going to be balanced but
 

00:05:09.520 --> 00:05:11.350 align:start position:0%
subtrees are going to be balanced but
now<00:05:09.680><c> we're</c><00:05:09.919><c> good</c><00:05:10.400><c> right</c><00:05:10.560><c> we</c><00:05:10.800><c> we</c><00:05:10.960><c> determine</c>

00:05:11.350 --> 00:05:11.360 align:start position:0%
now we're good right we we determine
 

00:05:11.360 --> 00:05:12.390 align:start position:0%
now we're good right we we determine
okay<00:05:11.600><c> this</c>

00:05:12.390 --> 00:05:12.400 align:start position:0%
okay this
 

00:05:12.400 --> 00:05:14.390 align:start position:0%
okay this
from<00:05:12.639><c> this</c><00:05:12.960><c> node</c><00:05:13.440><c> yes</c><00:05:13.680><c> the</c><00:05:13.840><c> left</c><00:05:14.080><c> and</c><00:05:14.160><c> right</c>

00:05:14.390 --> 00:05:14.400 align:start position:0%
from this node yes the left and right
 

00:05:14.400 --> 00:05:16.469 align:start position:0%
from this node yes the left and right
subtrees<00:05:14.880><c> are</c><00:05:14.960><c> balanced</c><00:05:15.520><c> right</c><00:05:15.840><c> and</c><00:05:15.919><c> then</c><00:05:16.080><c> we</c>

00:05:16.469 --> 00:05:16.479 align:start position:0%
subtrees are balanced right and then we
 

00:05:16.479 --> 00:05:19.430 align:start position:0%
subtrees are balanced right and then we
pop<00:05:16.720><c> back</c><00:05:17.120><c> up</c><00:05:17.600><c> suppose</c><00:05:18.240><c> and</c><00:05:18.320><c> then</c><00:05:18.800><c> uh</c><00:05:19.039><c> we</c><00:05:19.280><c> we</c>

00:05:19.430 --> 00:05:19.440 align:start position:0%
pop back up suppose and then uh we we
 

00:05:19.440 --> 00:05:21.430 align:start position:0%
pop back up suppose and then uh we we
also<00:05:19.680><c> want</c><00:05:19.840><c> to</c><00:05:19.919><c> make</c><00:05:20.080><c> sure</c><00:05:20.240><c> that</c><00:05:20.400><c> this</c><00:05:20.960><c> node</c><00:05:21.280><c> is</c>

00:05:21.430 --> 00:05:21.440 align:start position:0%
also want to make sure that this node is
 

00:05:21.440 --> 00:05:23.350 align:start position:0%
also want to make sure that this node is
also<00:05:21.680><c> balanced</c><00:05:22.000><c> it's</c><00:05:22.160><c> the</c><00:05:22.320><c> same</c><00:05:22.560><c> thing</c><00:05:23.120><c> right</c>

00:05:23.350 --> 00:05:23.360 align:start position:0%
also balanced it's the same thing right
 

00:05:23.360 --> 00:05:25.430 align:start position:0%
also balanced it's the same thing right
the<00:05:23.520><c> left</c><00:05:23.919><c> and</c><00:05:24.000><c> right</c><00:05:24.240><c> childs</c><00:05:24.639><c> don't</c><00:05:24.880><c> exist</c><00:05:25.199><c> so</c>

00:05:25.430 --> 00:05:25.440 align:start position:0%
the left and right childs don't exist so
 

00:05:25.440 --> 00:05:27.189 align:start position:0%
the left and right childs don't exist so
yeah<00:05:25.600><c> it's</c><00:05:25.840><c> balanced</c><00:05:26.240><c> from</c><00:05:26.400><c> here</c><00:05:26.720><c> as</c><00:05:26.800><c> well</c><00:05:27.039><c> so</c>

00:05:27.189 --> 00:05:27.199 align:start position:0%
yeah it's balanced from here as well so
 

00:05:27.199 --> 00:05:29.270 align:start position:0%
yeah it's balanced from here as well so
we<00:05:27.360><c> determined</c><00:05:28.000><c> that</c><00:05:28.160><c> right</c><00:05:28.479><c> now</c><00:05:28.720><c> we</c><00:05:28.880><c> know</c>

00:05:29.270 --> 00:05:29.280 align:start position:0%
we determined that right now we know
 

00:05:29.280 --> 00:05:31.670 align:start position:0%
we determined that right now we know
from<00:05:29.520><c> at</c><00:05:29.600><c> least</c><00:05:30.000><c> these</c><00:05:30.320><c> two</c><00:05:30.560><c> nodes</c><00:05:31.280><c> yes</c><00:05:31.520><c> the</c>

00:05:31.670 --> 00:05:31.680 align:start position:0%
from at least these two nodes yes the
 

00:05:31.680 --> 00:05:33.749 align:start position:0%
from at least these two nodes yes the
left<00:05:31.919><c> and</c><00:05:32.000><c> right</c><00:05:32.240><c> sub</c><00:05:32.479><c> trees</c><00:05:32.960><c> are</c><00:05:33.199><c> balanced</c>

00:05:33.749 --> 00:05:33.759 align:start position:0%
left and right sub trees are balanced
 

00:05:33.759 --> 00:05:35.830 align:start position:0%
left and right sub trees are balanced
from<00:05:34.000><c> these</c><00:05:34.240><c> two</c><00:05:34.479><c> nodes</c><00:05:34.960><c> okay</c><00:05:35.280><c> now</c><00:05:35.440><c> we</c><00:05:35.600><c> want</c><00:05:35.759><c> to</c>

00:05:35.830 --> 00:05:35.840 align:start position:0%
from these two nodes okay now we want to
 

00:05:35.840 --> 00:05:38.390 align:start position:0%
from these two nodes okay now we want to
know<00:05:36.080><c> is</c><00:05:36.240><c> it</c><00:05:36.320><c> balanced</c><00:05:36.960><c> from</c><00:05:37.520><c> this</c><00:05:37.759><c> node</c><00:05:38.240><c> how</c>

00:05:38.390 --> 00:05:38.400 align:start position:0%
know is it balanced from this node how
 

00:05:38.400 --> 00:05:40.070 align:start position:0%
know is it balanced from this node how
can<00:05:38.560><c> we</c><00:05:38.720><c> determine</c><00:05:39.199><c> that</c><00:05:39.520><c> aren't</c><00:05:39.840><c> we</c><00:05:39.919><c> going</c><00:05:40.000><c> to</c>

00:05:40.070 --> 00:05:40.080 align:start position:0%
can we determine that aren't we going to
 

00:05:40.080 --> 00:05:42.230 align:start position:0%
can we determine that aren't we going to
have<00:05:40.240><c> to</c><00:05:40.400><c> go</c><00:05:40.800><c> back</c><00:05:41.120><c> down</c><00:05:41.360><c> and</c><00:05:41.520><c> revisit</c><00:05:42.080><c> the</c>

00:05:42.230 --> 00:05:42.240 align:start position:0%
have to go back down and revisit the
 

00:05:42.240 --> 00:05:44.070 align:start position:0%
have to go back down and revisit the
entire<00:05:42.639><c> right</c><00:05:42.880><c> subtree</c><00:05:43.280><c> in</c><00:05:43.360><c> the</c><00:05:43.520><c> entire</c><00:05:43.840><c> left</c>

00:05:44.070 --> 00:05:44.080 align:start position:0%
entire right subtree in the entire left
 

00:05:44.080 --> 00:05:47.270 align:start position:0%
entire right subtree in the entire left
sub<00:05:44.320><c> tree</c><00:05:44.560><c> again</c><00:05:45.440><c> no</c><00:05:45.840><c> and</c><00:05:46.000><c> i'll</c><00:05:46.160><c> show</c><00:05:46.320><c> you</c><00:05:46.639><c> why</c>

00:05:47.270 --> 00:05:47.280 align:start position:0%
sub tree again no and i'll show you why
 

00:05:47.280 --> 00:05:50.790 align:start position:0%
sub tree again no and i'll show you why
as<00:05:47.520><c> we</c><00:05:47.759><c> are</c><00:05:47.919><c> determining</c><00:05:48.960><c> if</c><00:05:49.360><c> this</c><00:05:49.919><c> subtree</c><00:05:50.560><c> is</c>

00:05:50.790 --> 00:05:50.800 align:start position:0%
as we are determining if this subtree is
 

00:05:50.800 --> 00:05:53.469 align:start position:0%
as we are determining if this subtree is
balanced<00:05:51.440><c> let's</c><00:05:51.840><c> also</c><00:05:52.320><c> at</c><00:05:52.560><c> the</c><00:05:52.720><c> same</c><00:05:53.039><c> time</c>

00:05:53.469 --> 00:05:53.479 align:start position:0%
balanced let's also at the same time
 

00:05:53.479 --> 00:05:55.749 align:start position:0%
balanced let's also at the same time
simultaneously<00:05:54.560><c> let's</c><00:05:54.800><c> make</c><00:05:55.039><c> sure</c><00:05:55.280><c> we</c><00:05:55.520><c> get</c>

00:05:55.749 --> 00:05:55.759 align:start position:0%
simultaneously let's make sure we get
 

00:05:55.759 --> 00:05:58.230 align:start position:0%
simultaneously let's make sure we get
the<00:05:56.080><c> height</c><00:05:56.479><c> of</c><00:05:56.639><c> this</c><00:05:56.960><c> tree</c><00:05:57.440><c> the</c><00:05:57.680><c> entire</c>

00:05:58.230 --> 00:05:58.240 align:start position:0%
the height of this tree the entire
 

00:05:58.240 --> 00:06:00.550 align:start position:0%
the height of this tree the entire
height<00:05:58.560><c> of</c><00:05:58.639><c> this</c><00:05:58.880><c> subtree</c><00:05:59.680><c> and</c><00:06:00.080><c> let's</c><00:06:00.240><c> do</c><00:06:00.400><c> the</c>

00:06:00.550 --> 00:06:00.560 align:start position:0%
height of this subtree and let's do the
 

00:06:00.560 --> 00:06:03.270 align:start position:0%
height of this subtree and let's do the
exact<00:06:00.880><c> same</c><00:06:01.120><c> thing</c><00:06:01.600><c> for</c><00:06:02.160><c> this</c><00:06:02.479><c> node</c><00:06:02.960><c> make</c><00:06:03.120><c> sure</c>

00:06:03.270 --> 00:06:03.280 align:start position:0%
exact same thing for this node make sure
 

00:06:03.280 --> 00:06:05.110 align:start position:0%
exact same thing for this node make sure
we<00:06:03.360><c> get</c><00:06:03.520><c> the</c><00:06:03.680><c> entire</c><00:06:04.000><c> height</c><00:06:04.319><c> of</c><00:06:04.400><c> this</c><00:06:04.639><c> subtree</c>

00:06:05.110 --> 00:06:05.120 align:start position:0%
we get the entire height of this subtree
 

00:06:05.120 --> 00:06:07.350 align:start position:0%
we get the entire height of this subtree
because<00:06:05.360><c> once</c><00:06:05.600><c> we've</c><00:06:05.759><c> done</c><00:06:06.080><c> that</c><00:06:06.639><c> then</c><00:06:07.120><c> once</c>

00:06:07.350 --> 00:06:07.360 align:start position:0%
because once we've done that then once
 

00:06:07.360 --> 00:06:10.150 align:start position:0%
because once we've done that then once
we<00:06:07.520><c> go</c><00:06:07.840><c> back</c><00:06:08.240><c> up</c><00:06:08.479><c> to</c><00:06:08.960><c> the</c><00:06:09.199><c> parent</c><00:06:09.600><c> node</c><00:06:09.919><c> from</c>

00:06:10.150 --> 00:06:10.160 align:start position:0%
we go back up to the parent node from
 

00:06:10.160 --> 00:06:12.390 align:start position:0%
we go back up to the parent node from
here<00:06:10.560><c> it</c><00:06:10.720><c> will</c><00:06:10.880><c> be</c><00:06:11.120><c> easy</c><00:06:11.520><c> we</c><00:06:11.759><c> already</c><00:06:12.080><c> have</c><00:06:12.240><c> the</c>

00:06:12.390 --> 00:06:12.400 align:start position:0%
here it will be easy we already have the
 

00:06:12.400 --> 00:06:13.990 align:start position:0%
here it will be easy we already have the
height<00:06:12.720><c> of</c><00:06:12.800><c> this</c><00:06:13.039><c> tree</c><00:06:13.280><c> we</c><00:06:13.440><c> already</c><00:06:13.759><c> have</c><00:06:13.919><c> the</c>

00:06:13.990 --> 00:06:14.000 align:start position:0%
height of this tree we already have the
 

00:06:14.000 --> 00:06:15.670 align:start position:0%
height of this tree we already have the
height<00:06:14.240><c> of</c><00:06:14.400><c> this</c><00:06:14.639><c> tree</c><00:06:14.960><c> we</c><00:06:15.039><c> can</c><00:06:15.199><c> take</c><00:06:15.440><c> the</c>

00:06:15.670 --> 00:06:15.680 align:start position:0%
height of this tree we can take the
 

00:06:15.680 --> 00:06:17.590 align:start position:0%
height of this tree we can take the
difference<00:06:16.080><c> between</c><00:06:16.479><c> those</c><00:06:16.960><c> make</c><00:06:17.199><c> sure</c><00:06:17.360><c> it's</c>

00:06:17.590 --> 00:06:17.600 align:start position:0%
difference between those make sure it's
 

00:06:17.600 --> 00:06:19.590 align:start position:0%
difference between those make sure it's
less<00:06:17.759><c> than</c><00:06:17.919><c> or</c><00:06:18.080><c> equal</c><00:06:18.319><c> to</c><00:06:18.560><c> one</c><00:06:18.960><c> and</c><00:06:19.120><c> then</c><00:06:19.280><c> we're</c>

00:06:19.590 --> 00:06:19.600 align:start position:0%
less than or equal to one and then we're
 

00:06:19.600 --> 00:06:21.990 align:start position:0%
less than or equal to one and then we're
good<00:06:20.000><c> we</c><00:06:20.560><c> we</c><00:06:20.720><c> didn't</c><00:06:20.960><c> even</c><00:06:21.120><c> have</c><00:06:21.280><c> to</c><00:06:21.440><c> revisit</c>

00:06:21.990 --> 00:06:22.000 align:start position:0%
good we we didn't even have to revisit
 

00:06:22.000 --> 00:06:23.670 align:start position:0%
good we we didn't even have to revisit
these<00:06:22.319><c> trees</c><00:06:22.639><c> right</c><00:06:22.880><c> from</c><00:06:23.039><c> this</c><00:06:23.280><c> node</c><00:06:23.520><c> now</c>

00:06:23.670 --> 00:06:23.680 align:start position:0%
these trees right from this node now
 

00:06:23.680 --> 00:06:25.830 align:start position:0%
these trees right from this node now
we've<00:06:23.919><c> already</c><00:06:24.240><c> determined</c><00:06:24.800><c> yes</c><00:06:25.199><c> it's</c><00:06:25.440><c> also</c>

00:06:25.830 --> 00:06:25.840 align:start position:0%
we've already determined yes it's also
 

00:06:25.840 --> 00:06:28.390 align:start position:0%
we've already determined yes it's also
balanced<00:06:26.479><c> from</c><00:06:26.720><c> this</c><00:06:26.960><c> position</c><00:06:27.440><c> right</c><00:06:27.919><c> so</c><00:06:28.160><c> now</c>

00:06:28.390 --> 00:06:28.400 align:start position:0%
balanced from this position right so now
 

00:06:28.400 --> 00:06:29.909 align:start position:0%
balanced from this position right so now
we've<00:06:28.560><c> determined</c><00:06:29.039><c> it's</c><00:06:29.199><c> balanced</c><00:06:29.600><c> from</c><00:06:29.680><c> this</c>

00:06:29.909 --> 00:06:29.919 align:start position:0%
we've determined it's balanced from this
 

00:06:29.919 --> 00:06:31.830 align:start position:0%
we've determined it's balanced from this
node<00:06:30.160><c> bounced</c><00:06:30.479><c> from</c><00:06:30.639><c> here</c><00:06:30.960><c> and</c><00:06:31.199><c> balanced</c><00:06:31.600><c> from</c>

00:06:31.830 --> 00:06:31.840 align:start position:0%
node bounced from here and balanced from
 

00:06:31.840 --> 00:06:33.590 align:start position:0%
node bounced from here and balanced from
here<00:06:32.240><c> and</c><00:06:32.479><c> now</c><00:06:32.639><c> we</c><00:06:32.720><c> want</c><00:06:32.880><c> to</c><00:06:32.960><c> go</c><00:06:33.120><c> back</c><00:06:33.360><c> up</c><00:06:33.440><c> to</c>

00:06:33.590 --> 00:06:33.600 align:start position:0%
here and now we want to go back up to
 

00:06:33.600 --> 00:06:34.710 align:start position:0%
here and now we want to go back up to
the<00:06:33.680><c> root</c><00:06:33.919><c> node</c><00:06:34.160><c> and</c><00:06:34.240><c> make</c><00:06:34.400><c> sure</c><00:06:34.560><c> it's</c>

00:06:34.710 --> 00:06:34.720 align:start position:0%
the root node and make sure it's
 

00:06:34.720 --> 00:06:36.710 align:start position:0%
the root node and make sure it's
balanced<00:06:35.120><c> from</c><00:06:35.280><c> here</c><00:06:35.759><c> before</c><00:06:36.160><c> we</c><00:06:36.240><c> do</c><00:06:36.400><c> that</c><00:06:36.560><c> we</c>

00:06:36.710 --> 00:06:36.720 align:start position:0%
balanced from here before we do that we
 

00:06:36.720 --> 00:06:38.150 align:start position:0%
balanced from here before we do that we
have<00:06:36.800><c> to</c><00:06:36.880><c> solve</c><00:06:37.120><c> the</c><00:06:37.280><c> sub</c><00:06:37.520><c> problem</c><00:06:37.840><c> on</c><00:06:38.000><c> this</c>

00:06:38.150 --> 00:06:38.160 align:start position:0%
have to solve the sub problem on this
 

00:06:38.160 --> 00:06:39.749 align:start position:0%
have to solve the sub problem on this
left<00:06:38.400><c> subtree</c><00:06:38.800><c> it's</c><00:06:38.960><c> just</c><00:06:39.120><c> a</c><00:06:39.199><c> base</c><00:06:39.520><c> case</c>

00:06:39.749 --> 00:06:39.759 align:start position:0%
left subtree it's just a base case
 

00:06:39.759 --> 00:06:41.270 align:start position:0%
left subtree it's just a base case
problem<00:06:40.080><c> right</c><00:06:40.240><c> it's</c><00:06:40.400><c> just</c><00:06:40.560><c> a</c><00:06:40.639><c> single</c><00:06:40.880><c> node</c><00:06:41.120><c> so</c>

00:06:41.270 --> 00:06:41.280 align:start position:0%
problem right it's just a single node so
 

00:06:41.280 --> 00:06:42.950 align:start position:0%
problem right it's just a single node so
we<00:06:41.360><c> know</c><00:06:41.440><c> it's</c><00:06:41.600><c> balanced</c><00:06:41.919><c> from</c><00:06:42.080><c> here</c><00:06:42.400><c> as</c><00:06:42.560><c> well</c>

00:06:42.950 --> 00:06:42.960 align:start position:0%
we know it's balanced from here as well
 

00:06:42.960 --> 00:06:44.790 align:start position:0%
we know it's balanced from here as well
so<00:06:43.120><c> now</c><00:06:43.280><c> we</c><00:06:43.440><c> want</c><00:06:43.600><c> to</c><00:06:43.759><c> go</c><00:06:43.919><c> back</c><00:06:44.240><c> up</c><00:06:44.319><c> to</c><00:06:44.479><c> the</c><00:06:44.560><c> root</c>

00:06:44.790 --> 00:06:44.800 align:start position:0%
so now we want to go back up to the root
 

00:06:44.800 --> 00:06:47.029 align:start position:0%
so now we want to go back up to the root
node<00:06:45.199><c> is</c><00:06:45.360><c> it</c><00:06:45.520><c> balanced</c><00:06:46.000><c> from</c><00:06:46.160><c> this</c><00:06:46.400><c> root</c><00:06:46.639><c> node</c>

00:06:47.029 --> 00:06:47.039 align:start position:0%
node is it balanced from this root node
 

00:06:47.039 --> 00:06:50.230 align:start position:0%
node is it balanced from this root node
well<00:06:47.600><c> as</c><00:06:47.919><c> we</c><00:06:48.080><c> are</c><00:06:48.240><c> doing</c><00:06:48.720><c> this</c><00:06:49.360><c> right</c><00:06:49.919><c> as</c><00:06:50.080><c> we</c>

00:06:50.230 --> 00:06:50.240 align:start position:0%
well as we are doing this right as we
 

00:06:50.240 --> 00:06:51.510 align:start position:0%
well as we are doing this right as we
were<00:06:50.400><c> doing</c><00:06:50.560><c> this</c><00:06:50.720><c> right</c><00:06:50.960><c> subtree</c><00:06:51.360><c> we</c>

00:06:51.510 --> 00:06:51.520 align:start position:0%
were doing this right subtree we
 

00:06:51.520 --> 00:06:53.589 align:start position:0%
were doing this right subtree we
determined<00:06:52.000><c> the</c><00:06:52.160><c> height</c><00:06:52.479><c> of</c><00:06:52.880><c> this</c><00:06:53.120><c> tree</c><00:06:53.360><c> was</c>

00:06:53.589 --> 00:06:53.599 align:start position:0%
determined the height of this tree was
 

00:06:53.599 --> 00:06:56.230 align:start position:0%
determined the height of this tree was
one<00:06:54.000><c> the</c><00:06:54.160><c> height</c><00:06:54.479><c> of</c><00:06:54.560><c> this</c><00:06:54.800><c> tree</c><00:06:55.199><c> was</c><00:06:55.440><c> also</c><00:06:55.840><c> one</c>

00:06:56.230 --> 00:06:56.240 align:start position:0%
one the height of this tree was also one
 

00:06:56.240 --> 00:06:58.710 align:start position:0%
one the height of this tree was also one
right<00:06:56.400><c> so</c><00:06:56.560><c> now</c><00:06:56.720><c> we</c><00:06:56.880><c> want</c><00:06:57.039><c> to</c><00:06:57.120><c> know</c><00:06:57.599><c> before</c><00:06:58.319><c> from</c>

00:06:58.710 --> 00:06:58.720 align:start position:0%
right so now we want to know before from
 

00:06:58.720 --> 00:07:00.629 align:start position:0%
right so now we want to know before from
from<00:06:58.880><c> this</c><00:06:59.120><c> node</c><00:06:59.440><c> over</c><00:06:59.599><c> here</c><00:07:00.000><c> before</c><00:07:00.479><c> we</c>

00:07:00.629 --> 00:07:00.639 align:start position:0%
from this node over here before we
 

00:07:00.639 --> 00:07:02.550 align:start position:0%
from this node over here before we
return<00:07:01.039><c> back</c><00:07:01.280><c> up</c><00:07:01.360><c> to</c><00:07:01.520><c> the</c><00:07:01.599><c> parent</c><00:07:02.160><c> we</c><00:07:02.319><c> want</c><00:07:02.479><c> to</c>

00:07:02.550 --> 00:07:02.560 align:start position:0%
return back up to the parent we want to
 

00:07:02.560 --> 00:07:04.950 align:start position:0%
return back up to the parent we want to
know<00:07:02.800><c> what's</c><00:07:03.039><c> the</c><00:07:03.199><c> entire</c><00:07:03.919><c> height</c><00:07:04.240><c> of</c><00:07:04.400><c> this</c>

00:07:04.950 --> 00:07:04.960 align:start position:0%
know what's the entire height of this
 

00:07:04.960 --> 00:07:07.350 align:start position:0%
know what's the entire height of this
subtree<00:07:05.599><c> how</c><00:07:05.759><c> can</c><00:07:05.919><c> we</c><00:07:06.160><c> easily</c><00:07:06.479><c> determine</c><00:07:06.960><c> that</c>

00:07:07.350 --> 00:07:07.360 align:start position:0%
subtree how can we easily determine that
 

00:07:07.360 --> 00:07:09.589 align:start position:0%
subtree how can we easily determine that
well<00:07:07.840><c> we</c><00:07:08.000><c> know</c><00:07:08.160><c> that</c><00:07:08.319><c> this</c><00:07:08.479><c> was</c><00:07:08.720><c> one</c><00:07:09.120><c> this</c><00:07:09.360><c> was</c>

00:07:09.589 --> 00:07:09.599 align:start position:0%
well we know that this was one this was
 

00:07:09.599 --> 00:07:12.230 align:start position:0%
well we know that this was one this was
also<00:07:09.919><c> one</c><00:07:10.400><c> so</c><00:07:11.039><c> from</c><00:07:11.280><c> here</c><00:07:11.520><c> the</c><00:07:11.680><c> height</c><00:07:12.000><c> is</c><00:07:12.080><c> just</c>

00:07:12.230 --> 00:07:12.240 align:start position:0%
also one so from here the height is just
 

00:07:12.240 --> 00:07:15.510 align:start position:0%
also one so from here the height is just
gonna<00:07:12.479><c> be</c><00:07:12.800><c> one</c><00:07:13.440><c> meaning</c><00:07:14.080><c> one</c><00:07:14.720><c> this</c><00:07:14.960><c> one</c><00:07:15.199><c> comes</c>

00:07:15.510 --> 00:07:15.520 align:start position:0%
gonna be one meaning one this one comes
 

00:07:15.520 --> 00:07:18.790 align:start position:0%
gonna be one meaning one this one comes
from<00:07:15.840><c> this</c><00:07:16.240><c> node</c><00:07:16.560><c> over</c><00:07:16.720><c> here</c><00:07:17.360><c> plus</c><00:07:18.000><c> the</c><00:07:18.240><c> max</c><00:07:18.639><c> of</c>

00:07:18.790 --> 00:07:18.800 align:start position:0%
from this node over here plus the max of
 

00:07:18.800 --> 00:07:20.710 align:start position:0%
from this node over here plus the max of
its<00:07:19.120><c> left</c><00:07:19.520><c> and</c><00:07:19.680><c> right</c><00:07:19.919><c> subtrees</c><00:07:20.400><c> which</c><00:07:20.560><c> we</c>

00:07:20.710 --> 00:07:20.720 align:start position:0%
its left and right subtrees which we
 

00:07:20.720 --> 00:07:22.629 align:start position:0%
its left and right subtrees which we
know<00:07:20.880><c> are</c><00:07:21.039><c> both</c><00:07:21.440><c> one</c><00:07:21.680><c> so</c><00:07:21.919><c> we</c><00:07:22.000><c> can</c><00:07:22.080><c> take</c><00:07:22.240><c> the</c><00:07:22.400><c> max</c>

00:07:22.629 --> 00:07:22.639 align:start position:0%
know are both one so we can take the max
 

00:07:22.639 --> 00:07:24.309 align:start position:0%
know are both one so we can take the max
of<00:07:22.720><c> one</c><00:07:22.960><c> and</c><00:07:23.039><c> one</c><00:07:23.440><c> that's</c><00:07:23.680><c> going</c><00:07:23.840><c> to</c><00:07:24.000><c> end</c><00:07:24.160><c> up</c>

00:07:24.309 --> 00:07:24.319 align:start position:0%
of one and one that's going to end up
 

00:07:24.319 --> 00:07:26.390 align:start position:0%
of one and one that's going to end up
being<00:07:24.560><c> one</c><00:07:24.880><c> so</c><00:07:25.440><c> the</c><00:07:25.599><c> height</c><00:07:25.840><c> of</c><00:07:25.919><c> the</c><00:07:26.000><c> overall</c>

00:07:26.390 --> 00:07:26.400 align:start position:0%
being one so the height of the overall
 

00:07:26.400 --> 00:07:27.909 align:start position:0%
being one so the height of the overall
tree<00:07:26.560><c> is</c><00:07:26.639><c> just</c><00:07:26.800><c> gonna</c><00:07:26.880><c> be</c><00:07:27.039><c> one</c><00:07:27.199><c> plus</c><00:07:27.440><c> one</c><00:07:27.680><c> which</c>

00:07:27.909 --> 00:07:27.919 align:start position:0%
tree is just gonna be one plus one which
 

00:07:27.919 --> 00:07:30.870 align:start position:0%
tree is just gonna be one plus one which
is<00:07:28.080><c> two</c><00:07:28.479><c> right</c><00:07:28.720><c> so</c><00:07:29.280><c> the</c><00:07:29.440><c> height</c><00:07:29.759><c> of</c><00:07:30.240><c> this</c><00:07:30.479><c> tree</c>

00:07:30.870 --> 00:07:30.880 align:start position:0%
is two right so the height of this tree
 

00:07:30.880 --> 00:07:33.110 align:start position:0%
is two right so the height of this tree
is<00:07:31.280><c> going</c><00:07:31.360><c> to</c><00:07:31.520><c> be</c><00:07:31.840><c> 2.</c><00:07:32.240><c> we</c><00:07:32.479><c> determine</c><00:07:32.880><c> that</c>

00:07:33.110 --> 00:07:33.120 align:start position:0%
is going to be 2. we determine that
 

00:07:33.120 --> 00:07:34.550 align:start position:0%
is going to be 2. we determine that
pretty<00:07:33.360><c> easily</c><00:07:33.759><c> and</c><00:07:34.000><c> that's</c><00:07:34.240><c> what</c><00:07:34.319><c> we</c><00:07:34.479><c> can</c>

00:07:34.550 --> 00:07:34.560 align:start position:0%
pretty easily and that's what we can
 

00:07:34.560 --> 00:07:37.029 align:start position:0%
pretty easily and that's what we can
return<00:07:35.039><c> back</c><00:07:35.280><c> up</c><00:07:35.360><c> to</c><00:07:35.520><c> this</c><00:07:35.840><c> parent</c><00:07:36.240><c> node</c><00:07:36.720><c> which</c>

00:07:37.029 --> 00:07:37.039 align:start position:0%
return back up to this parent node which
 

00:07:37.039 --> 00:07:39.270 align:start position:0%
return back up to this parent node which
is<00:07:37.440><c> good</c><00:07:37.680><c> for</c><00:07:37.840><c> us</c><00:07:38.000><c> right</c><00:07:38.240><c> and</c><00:07:38.319><c> from</c><00:07:38.800><c> this</c><00:07:39.039><c> tree</c>

00:07:39.270 --> 00:07:39.280 align:start position:0%
is good for us right and from this tree
 

00:07:39.280 --> 00:07:41.510 align:start position:0%
is good for us right and from this tree
on<00:07:39.440><c> the</c><00:07:39.520><c> left</c><00:07:39.919><c> the</c><00:07:40.080><c> height</c><00:07:40.400><c> is</c><00:07:40.800><c> 1</c><00:07:41.120><c> because</c><00:07:41.360><c> it's</c>

00:07:41.510 --> 00:07:41.520 align:start position:0%
on the left the height is 1 because it's
 

00:07:41.520 --> 00:07:43.589 align:start position:0%
on the left the height is 1 because it's
just<00:07:41.680><c> a</c><00:07:41.759><c> single</c><00:07:42.080><c> node</c><00:07:42.479><c> so</c><00:07:42.639><c> we</c><00:07:42.720><c> return</c><00:07:43.120><c> that</c><00:07:43.440><c> up</c>

00:07:43.589 --> 00:07:43.599 align:start position:0%
just a single node so we return that up
 

00:07:43.599 --> 00:07:45.830 align:start position:0%
just a single node so we return that up
to<00:07:43.759><c> the</c><00:07:43.919><c> parent</c><00:07:44.319><c> as</c><00:07:44.479><c> well</c><00:07:44.879><c> so</c><00:07:45.039><c> now</c><00:07:45.199><c> from</c><00:07:45.440><c> here</c>

00:07:45.830 --> 00:07:45.840 align:start position:0%
to the parent as well so now from here
 

00:07:45.840 --> 00:07:47.589 align:start position:0%
to the parent as well so now from here
we<00:07:45.919><c> know</c><00:07:46.080><c> that</c><00:07:46.319><c> the</c><00:07:46.400><c> height</c><00:07:46.720><c> of</c><00:07:47.039><c> the</c><00:07:47.120><c> left</c><00:07:47.360><c> sub</c>

00:07:47.589 --> 00:07:47.599 align:start position:0%
we know that the height of the left sub
 

00:07:47.599 --> 00:07:48.950 align:start position:0%
we know that the height of the left sub
tree<00:07:47.759><c> is</c><00:07:47.919><c> one</c><00:07:48.240><c> the</c><00:07:48.400><c> height</c><00:07:48.560><c> of</c><00:07:48.720><c> the</c><00:07:48.800><c> right</c>

00:07:48.950 --> 00:07:48.960 align:start position:0%
tree is one the height of the right
 

00:07:48.960 --> 00:07:50.629 align:start position:0%
tree is one the height of the right
subtree<00:07:49.360><c> is</c><00:07:49.520><c> two</c><00:07:49.919><c> we</c><00:07:50.080><c> can</c><00:07:50.240><c> take</c><00:07:50.400><c> that</c>

00:07:50.629 --> 00:07:50.639 align:start position:0%
subtree is two we can take that
 

00:07:50.639 --> 00:07:52.790 align:start position:0%
subtree is two we can take that
difference<00:07:51.199><c> two</c><00:07:51.360><c> minus</c><00:07:51.680><c> one</c><00:07:52.080><c> it's</c><00:07:52.400><c> one</c><00:07:52.560><c> which</c>

00:07:52.790 --> 00:07:52.800 align:start position:0%
difference two minus one it's one which
 

00:07:52.800 --> 00:07:55.589 align:start position:0%
difference two minus one it's one which
is<00:07:52.879><c> less</c><00:07:53.039><c> than</c><00:07:53.199><c> or</c><00:07:53.440><c> equal</c><00:07:53.919><c> to</c><00:07:54.400><c> uh</c><00:07:54.720><c> one</c><00:07:55.120><c> so</c><00:07:55.440><c> that</c>

00:07:55.589 --> 00:07:55.599 align:start position:0%
is less than or equal to uh one so that
 

00:07:55.599 --> 00:07:58.150 align:start position:0%
is less than or equal to uh one so that
we<00:07:55.759><c> do</c><00:07:56.000><c> know</c><00:07:56.160><c> that</c><00:07:56.319><c> this</c><00:07:56.479><c> is</c><00:07:56.639><c> balanced</c><00:07:57.360><c> from</c>

00:07:58.150 --> 00:07:58.160 align:start position:0%
we do know that this is balanced from
 

00:07:58.160 --> 00:07:58.950 align:start position:0%
we do know that this is balanced from
this

00:07:58.950 --> 00:07:58.960 align:start position:0%
this
 

00:07:58.960 --> 00:08:01.189 align:start position:0%
this
node<00:07:59.360><c> as</c><00:07:59.599><c> well</c><00:08:00.080><c> right</c><00:08:00.319><c> and</c><00:08:00.479><c> we</c><00:08:00.560><c> can</c><00:08:00.720><c> continue</c>

00:08:01.189 --> 00:08:01.199 align:start position:0%
node as well right and we can continue
 

00:08:01.199 --> 00:08:03.909 align:start position:0%
node as well right and we can continue
to<00:08:01.360><c> recursively</c><00:08:02.160><c> do</c><00:08:02.400><c> that</c><00:08:02.960><c> if</c><00:08:03.120><c> we</c><00:08:03.199><c> had</c><00:08:03.599><c> another</c>

00:08:03.909 --> 00:08:03.919 align:start position:0%
to recursively do that if we had another
 

00:08:03.919 --> 00:08:05.510 align:start position:0%
to recursively do that if we had another
parent<00:08:04.240><c> node</c><00:08:04.479><c> up</c><00:08:04.639><c> above</c><00:08:04.960><c> us</c><00:08:05.120><c> somewhere</c><00:08:05.440><c> we</c>

00:08:05.510 --> 00:08:05.520 align:start position:0%
parent node up above us somewhere we
 

00:08:05.520 --> 00:08:06.950 align:start position:0%
parent node up above us somewhere we
could<00:08:05.680><c> return</c><00:08:06.080><c> okay</c><00:08:06.319><c> the</c><00:08:06.400><c> height</c><00:08:06.639><c> of</c><00:08:06.720><c> this</c>

00:08:06.950 --> 00:08:06.960 align:start position:0%
could return okay the height of this
 

00:08:06.960 --> 00:08:09.510 align:start position:0%
could return okay the height of this
overall<00:08:07.360><c> tree</c><00:08:07.680><c> is</c><00:08:07.840><c> going</c><00:08:07.919><c> to</c><00:08:08.000><c> be</c><00:08:08.319><c> three</c><00:08:08.960><c> right</c>

00:08:09.510 --> 00:08:09.520 align:start position:0%
overall tree is going to be three right
 

00:08:09.520 --> 00:08:10.950 align:start position:0%
overall tree is going to be three right
so<00:08:09.680><c> that's</c><00:08:09.919><c> the</c><00:08:10.000><c> main</c><00:08:10.240><c> logic</c><00:08:10.560><c> we're</c><00:08:10.720><c> gonna</c>

00:08:10.950 --> 00:08:10.960 align:start position:0%
so that's the main logic we're gonna
 

00:08:10.960 --> 00:08:12.070 align:start position:0%
so that's the main logic we're gonna
follow<00:08:11.280><c> yes</c><00:08:11.440><c> we're</c><00:08:11.680><c> going</c><00:08:11.680><c> to</c><00:08:11.759><c> do</c><00:08:11.919><c> this</c>

00:08:12.070 --> 00:08:12.080 align:start position:0%
follow yes we're going to do this
 

00:08:12.080 --> 00:08:13.830 align:start position:0%
follow yes we're going to do this
recursively<00:08:12.879><c> and</c><00:08:13.039><c> there's</c><00:08:13.280><c> many</c><00:08:13.440><c> ways</c><00:08:13.680><c> to</c>

00:08:13.830 --> 00:08:13.840 align:start position:0%
recursively and there's many ways to
 

00:08:13.840 --> 00:08:15.350 align:start position:0%
recursively and there's many ways to
code<00:08:14.080><c> this</c><00:08:14.319><c> up</c><00:08:14.400><c> the</c><00:08:14.560><c> main</c><00:08:14.800><c> way</c><00:08:15.039><c> i'm</c><00:08:15.120><c> going</c><00:08:15.280><c> to</c>

00:08:15.350 --> 00:08:15.360 align:start position:0%
code this up the main way i'm going to
 

00:08:15.360 --> 00:08:17.110 align:start position:0%
code this up the main way i'm going to
code<00:08:15.520><c> this</c><00:08:15.759><c> up</c><00:08:15.919><c> is</c><00:08:16.080><c> actually</c><00:08:16.319><c> by</c><00:08:16.479><c> returning</c>

00:08:17.110 --> 00:08:17.120 align:start position:0%
code this up is actually by returning
 

00:08:17.120 --> 00:08:20.230 align:start position:0%
code this up is actually by returning
two<00:08:17.759><c> values</c><00:08:18.479><c> i'm</c><00:08:18.639><c> going</c><00:08:18.720><c> to</c><00:08:18.800><c> return</c><00:08:19.280><c> a</c><00:08:19.440><c> boolean</c>

00:08:20.230 --> 00:08:20.240 align:start position:0%
two values i'm going to return a boolean
 

00:08:20.240 --> 00:08:21.990 align:start position:0%
two values i'm going to return a boolean
as<00:08:20.479><c> the</c><00:08:20.560><c> first</c><00:08:20.879><c> value</c><00:08:21.199><c> which</c><00:08:21.360><c> will</c><00:08:21.520><c> be</c><00:08:21.680><c> either</c>

00:08:21.990 --> 00:08:22.000 align:start position:0%
as the first value which will be either
 

00:08:22.000 --> 00:08:24.150 align:start position:0%
as the first value which will be either
true<00:08:22.400><c> or</c><00:08:22.639><c> false</c><00:08:23.039><c> basically</c><00:08:23.440><c> for</c><00:08:23.680><c> every</c><00:08:23.840><c> single</c>

00:08:24.150 --> 00:08:24.160 align:start position:0%
true or false basically for every single
 

00:08:24.160 --> 00:08:25.350 align:start position:0%
true or false basically for every single
subtree<00:08:24.639><c> remember</c><00:08:24.960><c> we</c><00:08:25.120><c> are</c><00:08:25.199><c> going</c><00:08:25.280><c> to</c>

00:08:25.350 --> 00:08:25.360 align:start position:0%
subtree remember we are going to
 

00:08:25.360 --> 00:08:27.189 align:start position:0%
subtree remember we are going to
determine<00:08:25.840><c> is</c><00:08:26.000><c> that</c><00:08:26.160><c> subtree</c><00:08:26.639><c> balance</c><00:08:26.960><c> we'll</c>

00:08:27.189 --> 00:08:27.199 align:start position:0%
determine is that subtree balance we'll
 

00:08:27.199 --> 00:08:29.110 align:start position:0%
determine is that subtree balance we'll
return<00:08:27.440><c> a</c><00:08:27.599><c> true</c><00:08:27.840><c> or</c><00:08:28.080><c> false</c><00:08:28.400><c> for</c><00:08:28.560><c> that</c><00:08:28.879><c> and</c><00:08:29.039><c> the</c>

00:08:29.110 --> 00:08:29.120 align:start position:0%
return a true or false for that and the
 

00:08:29.120 --> 00:08:31.350 align:start position:0%
return a true or false for that and the
second<00:08:29.440><c> value</c><00:08:29.919><c> will</c><00:08:30.080><c> be</c><00:08:30.240><c> the</c><00:08:30.479><c> height</c><00:08:30.879><c> of</c><00:08:31.039><c> that</c>

00:08:31.350 --> 00:08:31.360 align:start position:0%
second value will be the height of that
 

00:08:31.360 --> 00:08:33.670 align:start position:0%
second value will be the height of that
subtree<00:08:31.759><c> so</c><00:08:31.919><c> from</c><00:08:32.560><c> this</c><00:08:32.959><c> subtree</c><00:08:33.440><c> what</c><00:08:33.519><c> we</c>

00:08:33.670 --> 00:08:33.680 align:start position:0%
subtree so from this subtree what we
 

00:08:33.680 --> 00:08:35.750 align:start position:0%
subtree so from this subtree what we
would<00:08:33.839><c> return</c><00:08:34.240><c> is</c><00:08:34.560><c> true</c><00:08:35.120><c> because</c><00:08:35.440><c> it</c><00:08:35.599><c> is</c>

00:08:35.750 --> 00:08:35.760 align:start position:0%
would return is true because it is
 

00:08:35.760 --> 00:08:37.430 align:start position:0%
would return is true because it is
balanced<00:08:36.240><c> and</c><00:08:36.320><c> the</c><00:08:36.479><c> height</c><00:08:36.719><c> we</c><00:08:36.880><c> would</c><00:08:37.039><c> return</c>

00:08:37.430 --> 00:08:37.440 align:start position:0%
balanced and the height we would return
 

00:08:37.440 --> 00:08:39.990 align:start position:0%
balanced and the height we would return
is<00:08:38.000><c> 2</c><00:08:38.560><c> right</c><00:08:38.800><c> the</c><00:08:38.880><c> height</c><00:08:39.120><c> of</c><00:08:39.200><c> the</c><00:08:39.360><c> subtree</c><00:08:39.839><c> is</c>

00:08:39.990 --> 00:08:40.000 align:start position:0%
is 2 right the height of the subtree is
 

00:08:40.000 --> 00:08:41.509 align:start position:0%
is 2 right the height of the subtree is
2<00:08:40.240><c> so</c><00:08:40.560><c> this</c><00:08:40.719><c> is</c><00:08:40.800><c> kind</c><00:08:40.959><c> of</c><00:08:41.039><c> what</c><00:08:41.200><c> we</c><00:08:41.360><c> would</c>

00:08:41.509 --> 00:08:41.519 align:start position:0%
2 so this is kind of what we would
 

00:08:41.519 --> 00:08:44.230 align:start position:0%
2 so this is kind of what we would
return<00:08:42.080><c> now</c><00:08:42.320><c> if</c><00:08:42.399><c> we</c><00:08:42.719><c> ever</c><00:08:43.200><c> from</c><00:08:43.519><c> any</c><00:08:43.839><c> single</c>

00:08:44.230 --> 00:08:44.240 align:start position:0%
return now if we ever from any single
 

00:08:44.240 --> 00:08:46.230 align:start position:0%
return now if we ever from any single
subtree<00:08:44.640><c> if</c><00:08:44.800><c> we</c><00:08:44.959><c> ever</c><00:08:45.200><c> return</c><00:08:45.760><c> false</c><00:08:46.080><c> that</c>

00:08:46.230 --> 00:08:46.240 align:start position:0%
subtree if we ever return false that
 

00:08:46.240 --> 00:08:48.150 align:start position:0%
subtree if we ever return false that
means<00:08:46.480><c> we</c><00:08:46.640><c> found</c><00:08:46.959><c> at</c><00:08:47.040><c> least</c><00:08:47.440><c> one</c><00:08:47.760><c> subtree</c>

00:08:48.150 --> 00:08:48.160 align:start position:0%
means we found at least one subtree
 

00:08:48.160 --> 00:08:50.550 align:start position:0%
means we found at least one subtree
that's<00:08:48.480><c> not</c><00:08:48.720><c> balanced</c><00:08:49.440><c> if</c><00:08:49.519><c> we</c><00:08:49.680><c> find</c><00:08:50.000><c> even</c><00:08:50.320><c> one</c>

00:08:50.550 --> 00:08:50.560 align:start position:0%
that's not balanced if we find even one
 

00:08:50.560 --> 00:08:52.230 align:start position:0%
that's not balanced if we find even one
subtree<00:08:51.040><c> that's</c><00:08:51.200><c> not</c><00:08:51.360><c> balanced</c><00:08:51.839><c> that</c><00:08:52.000><c> means</c>

00:08:52.230 --> 00:08:52.240 align:start position:0%
subtree that's not balanced that means
 

00:08:52.240 --> 00:08:53.750 align:start position:0%
subtree that's not balanced that means
from<00:08:52.399><c> the</c><00:08:52.640><c> root</c><00:08:53.040><c> we're</c><00:08:53.279><c> going</c><00:08:53.360><c> to</c><00:08:53.519><c> end</c><00:08:53.680><c> up</c>

00:08:53.750 --> 00:08:53.760 align:start position:0%
from the root we're going to end up
 

00:08:53.760 --> 00:08:56.630 align:start position:0%
from the root we're going to end up
having<00:08:54.160><c> to</c><00:08:54.800><c> return</c><00:08:55.360><c> false</c><00:08:56.000><c> which</c><00:08:56.240><c> i'll</c><00:08:56.480><c> show</c>

00:08:56.630 --> 00:08:56.640 align:start position:0%
having to return false which i'll show
 

00:08:56.640 --> 00:08:57.990 align:start position:0%
having to return false which i'll show
you<00:08:56.800><c> how</c><00:08:56.959><c> we</c><00:08:57.120><c> can</c><00:08:57.279><c> implement</c><00:08:57.680><c> that</c><00:08:57.839><c> in</c><00:08:57.920><c> the</c>

00:08:57.990 --> 00:08:58.000 align:start position:0%
you how we can implement that in the
 

00:08:58.000 --> 00:09:00.949 align:start position:0%
you how we can implement that in the
code<00:08:58.320><c> it's</c><00:08:58.640><c> pretty</c><00:08:58.959><c> straightforward</c><00:09:00.080><c> okay</c><00:09:00.560><c> so</c>

00:09:00.949 --> 00:09:00.959 align:start position:0%
code it's pretty straightforward okay so
 

00:09:00.959 --> 00:09:03.509 align:start position:0%
code it's pretty straightforward okay so
now<00:09:01.200><c> let's</c><00:09:01.440><c> get</c><00:09:01.680><c> into</c><00:09:01.920><c> the</c><00:09:02.160><c> code</c><00:09:02.720><c> and</c>

00:09:03.509 --> 00:09:03.519 align:start position:0%
now let's get into the code and
 

00:09:03.519 --> 00:09:05.030 align:start position:0%
now let's get into the code and
main<00:09:04.000><c> thing</c><00:09:04.240><c> is</c><00:09:04.399><c> we're</c><00:09:04.560><c> going</c><00:09:04.640><c> to</c><00:09:04.720><c> do</c><00:09:04.880><c> this</c>

00:09:05.030 --> 00:09:05.040 align:start position:0%
main thing is we're going to do this
 

00:09:05.040 --> 00:09:07.190 align:start position:0%
main thing is we're going to do this
recursively<00:09:05.680><c> why</c><00:09:05.920><c> can't</c><00:09:06.160><c> i</c><00:09:06.320><c> just</c><00:09:06.560><c> use</c><00:09:06.880><c> this</c>

00:09:07.190 --> 00:09:07.200 align:start position:0%
recursively why can't i just use this
 

00:09:07.200 --> 00:09:09.350 align:start position:0%
recursively why can't i just use this
outer<00:09:07.519><c> function</c><00:09:08.000><c> to</c><00:09:08.160><c> do</c><00:09:08.320><c> it</c><00:09:08.720><c> because</c><00:09:09.120><c> this</c>

00:09:09.350 --> 00:09:09.360 align:start position:0%
outer function to do it because this
 

00:09:09.360 --> 00:09:11.030 align:start position:0%
outer function to do it because this
outer<00:09:09.680><c> function</c><00:09:10.000><c> just</c><00:09:10.160><c> returns</c><00:09:10.560><c> a</c><00:09:10.640><c> single</c>

00:09:11.030 --> 00:09:11.040 align:start position:0%
outer function just returns a single
 

00:09:11.040 --> 00:09:13.190 align:start position:0%
outer function just returns a single
value<00:09:11.440><c> right</c><00:09:11.600><c> the</c><00:09:11.760><c> boolean</c><00:09:12.320><c> but</c><00:09:12.720><c> we</c><00:09:12.880><c> actually</c>

00:09:13.190 --> 00:09:13.200 align:start position:0%
value right the boolean but we actually
 

00:09:13.200 --> 00:09:14.790 align:start position:0%
value right the boolean but we actually
want<00:09:13.360><c> to</c><00:09:13.519><c> implement</c><00:09:13.839><c> this</c><00:09:14.080><c> by</c><00:09:14.240><c> returning</c><00:09:14.640><c> two</c>

00:09:14.790 --> 00:09:14.800 align:start position:0%
want to implement this by returning two
 

00:09:14.800 --> 00:09:16.470 align:start position:0%
want to implement this by returning two
values<00:09:15.120><c> so</c><00:09:15.279><c> i'm</c><00:09:15.360><c> gonna</c><00:09:15.600><c> write</c><00:09:15.839><c> a</c><00:09:16.080><c> nested</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
values so i'm gonna write a nested
 

00:09:16.480 --> 00:09:18.389 align:start position:0%
values so i'm gonna write a nested
recursive<00:09:17.040><c> function</c><00:09:17.360><c> here</c><00:09:17.760><c> and</c><00:09:17.920><c> we're</c><00:09:18.160><c> gonna</c>

00:09:18.389 --> 00:09:18.399 align:start position:0%
recursive function here and we're gonna
 

00:09:18.399 --> 00:09:20.150 align:start position:0%
recursive function here and we're gonna
pass<00:09:18.720><c> in</c><00:09:18.959><c> a</c><00:09:19.040><c> single</c><00:09:19.279><c> parameter</c><00:09:19.760><c> which</c><00:09:19.920><c> is</c><00:09:20.000><c> the</c>

00:09:20.150 --> 00:09:20.160 align:start position:0%
pass in a single parameter which is the
 

00:09:20.160 --> 00:09:21.750 align:start position:0%
pass in a single parameter which is the
root<00:09:20.480><c> and</c><00:09:20.640><c> remember</c><00:09:21.040><c> this</c><00:09:21.200><c> function</c><00:09:21.519><c> is</c><00:09:21.600><c> going</c>

00:09:21.750 --> 00:09:21.760 align:start position:0%
root and remember this function is going
 

00:09:21.760 --> 00:09:24.389 align:start position:0%
root and remember this function is going
to<00:09:21.839><c> return</c><00:09:22.160><c> a</c><00:09:22.240><c> pair</c><00:09:22.480><c> of</c><00:09:22.640><c> values</c><00:09:23.360><c> a</c><00:09:23.519><c> boolean</c><00:09:24.080><c> and</c>

00:09:24.389 --> 00:09:24.399 align:start position:0%
to return a pair of values a boolean and
 

00:09:24.399 --> 00:09:27.030 align:start position:0%
to return a pair of values a boolean and
the<00:09:24.560><c> height</c><00:09:24.800><c> of</c><00:09:24.880><c> the</c><00:09:25.040><c> tree</c><00:09:25.760><c> so</c><00:09:26.320><c> first</c><00:09:26.640><c> things</c>

00:09:27.030 --> 00:09:27.040 align:start position:0%
the height of the tree so first things
 

00:09:27.040 --> 00:09:30.070 align:start position:0%
the height of the tree so first things
first<00:09:27.360><c> the</c><00:09:27.600><c> base</c><00:09:27.920><c> case</c><00:09:28.320><c> if</c><00:09:28.560><c> the</c><00:09:28.800><c> root</c><00:09:29.279><c> is</c><00:09:29.839><c> a</c>

00:09:30.070 --> 00:09:30.080 align:start position:0%
first the base case if the root is a
 

00:09:30.080 --> 00:09:33.670 align:start position:0%
first the base case if the root is a
null<00:09:30.720><c> right</c><00:09:31.279><c> this</c><00:09:31.920><c> means</c><00:09:32.399><c> that</c><00:09:33.040><c> we</c><00:09:33.279><c> have</c><00:09:33.519><c> an</c>

00:09:33.670 --> 00:09:33.680 align:start position:0%
null right this means that we have an
 

00:09:33.680 --> 00:09:35.509 align:start position:0%
null right this means that we have an
empty<00:09:34.000><c> tree</c><00:09:34.320><c> so</c><00:09:34.560><c> is</c><00:09:34.720><c> an</c><00:09:34.880><c> empty</c><00:09:35.200><c> tree</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
empty tree so is an empty tree
 

00:09:35.519 --> 00:09:37.829 align:start position:0%
empty tree so is an empty tree
considered<00:09:36.000><c> balanced</c><00:09:36.640><c> yeah</c><00:09:37.120><c> let's</c><00:09:37.360><c> say</c><00:09:37.519><c> it</c><00:09:37.680><c> is</c>

00:09:37.829 --> 00:09:37.839 align:start position:0%
considered balanced yeah let's say it is
 

00:09:37.839 --> 00:09:39.990 align:start position:0%
considered balanced yeah let's say it is
so<00:09:38.240><c> for</c><00:09:38.399><c> the</c><00:09:38.480><c> first</c><00:09:38.800><c> value</c><00:09:39.120><c> we'll</c><00:09:39.360><c> return</c><00:09:39.680><c> true</c>

00:09:39.990 --> 00:09:40.000 align:start position:0%
so for the first value we'll return true
 

00:09:40.000 --> 00:09:41.670 align:start position:0%
so for the first value we'll return true
in<00:09:40.080><c> this</c><00:09:40.240><c> case</c><00:09:40.640><c> and</c><00:09:40.800><c> the</c><00:09:40.880><c> second</c><00:09:41.200><c> value</c><00:09:41.519><c> which</c>

00:09:41.670 --> 00:09:41.680 align:start position:0%
in this case and the second value which
 

00:09:41.680 --> 00:09:43.350 align:start position:0%
in this case and the second value which
is<00:09:41.760><c> the</c><00:09:41.839><c> height</c><00:09:42.080><c> of</c><00:09:42.240><c> the</c><00:09:42.320><c> tree</c><00:09:42.640><c> an</c><00:09:42.880><c> empty</c><00:09:43.120><c> tree</c>

00:09:43.350 --> 00:09:43.360 align:start position:0%
is the height of the tree an empty tree
 

00:09:43.360 --> 00:09:45.190 align:start position:0%
is the height of the tree an empty tree
we<00:09:43.519><c> can</c><00:09:43.600><c> assume</c><00:09:43.920><c> just</c><00:09:44.160><c> has</c><00:09:44.320><c> a</c><00:09:44.399><c> height</c><00:09:44.640><c> of</c><00:09:44.800><c> zero</c>

00:09:45.190 --> 00:09:45.200 align:start position:0%
we can assume just has a height of zero
 

00:09:45.200 --> 00:09:48.070 align:start position:0%
we can assume just has a height of zero
let's<00:09:45.440><c> say</c><00:09:46.000><c> and</c><00:09:46.320><c> now</c><00:09:46.720><c> remember</c><00:09:47.360><c> before</c><00:09:47.839><c> we</c>

00:09:48.070 --> 00:09:48.080 align:start position:0%
let's say and now remember before we
 

00:09:48.080 --> 00:09:50.470 align:start position:0%
let's say and now remember before we
determine<00:09:48.560><c> from</c><00:09:48.800><c> this</c><00:09:49.200><c> root</c><00:09:49.519><c> node</c><00:09:50.000><c> is</c><00:09:50.240><c> this</c>

00:09:50.470 --> 00:09:50.480 align:start position:0%
determine from this root node is this
 

00:09:50.480 --> 00:09:52.870 align:start position:0%
determine from this root node is this
tree<00:09:50.800><c> balanced</c><00:09:51.279><c> first</c><00:09:51.600><c> we</c><00:09:51.760><c> want</c><00:09:51.920><c> to</c><00:09:52.320><c> determine</c>

00:09:52.870 --> 00:09:52.880 align:start position:0%
tree balanced first we want to determine
 

00:09:52.880 --> 00:09:55.670 align:start position:0%
tree balanced first we want to determine
if<00:09:53.279><c> from</c><00:09:53.600><c> the</c><00:09:53.839><c> left</c><00:09:54.080><c> sub</c><00:09:54.399><c> tree</c><00:09:54.880><c> it</c><00:09:55.040><c> is</c><00:09:55.200><c> balanced</c>

00:09:55.670 --> 00:09:55.680 align:start position:0%
if from the left sub tree it is balanced
 

00:09:55.680 --> 00:09:57.670 align:start position:0%
if from the left sub tree it is balanced
and<00:09:56.000><c> from</c><00:09:56.160><c> the</c><00:09:56.320><c> right</c><00:09:56.560><c> subtree</c><00:09:57.040><c> is</c><00:09:57.200><c> a</c><00:09:57.279><c> balance</c>

00:09:57.670 --> 00:09:57.680 align:start position:0%
and from the right subtree is a balance
 

00:09:57.680 --> 00:10:00.870 align:start position:0%
and from the right subtree is a balance
so<00:09:57.839><c> let's</c><00:09:58.160><c> call</c><00:09:58.399><c> dfs</c><00:09:58.959><c> recursively</c><00:10:00.160><c> on</c><00:10:00.560><c> the</c>

00:10:00.870 --> 00:10:00.880 align:start position:0%
so let's call dfs recursively on the
 

00:10:00.880 --> 00:10:03.750 align:start position:0%
so let's call dfs recursively on the
right<00:10:01.279><c> and</c><00:10:01.600><c> left</c><00:10:01.920><c> subtrees</c><00:10:02.800><c> and</c><00:10:02.959><c> then</c><00:10:03.279><c> assign</c>

00:10:03.750 --> 00:10:03.760 align:start position:0%
right and left subtrees and then assign
 

00:10:03.760 --> 00:10:05.750 align:start position:0%
right and left subtrees and then assign
it<00:10:03.920><c> to</c><00:10:04.160><c> the</c><00:10:04.320><c> result</c><00:10:04.720><c> variables</c><00:10:05.279><c> left</c><00:10:05.600><c> and</c>

00:10:05.750 --> 00:10:05.760 align:start position:0%
it to the result variables left and
 

00:10:05.760 --> 00:10:07.829 align:start position:0%
it to the result variables left and
right<00:10:06.320><c> so</c><00:10:06.959><c> that's</c><00:10:07.200><c> what</c><00:10:07.360><c> we're</c><00:10:07.519><c> doing</c><00:10:07.680><c> with</c>

00:10:07.829 --> 00:10:07.839 align:start position:0%
right so that's what we're doing with
 

00:10:07.839 --> 00:10:10.150 align:start position:0%
right so that's what we're doing with
the<00:10:07.920><c> single</c><00:10:08.160><c> line</c><00:10:08.399><c> of</c><00:10:08.480><c> code</c><00:10:08.959><c> calling</c><00:10:09.200><c> dfs</c><00:10:09.839><c> on</c>

00:10:10.150 --> 00:10:10.160 align:start position:0%
the single line of code calling dfs on
 

00:10:10.160 --> 00:10:12.949 align:start position:0%
the single line of code calling dfs on
both<00:10:10.480><c> subtrees</c><00:10:11.200><c> so</c><00:10:11.519><c> now</c><00:10:12.000><c> we</c><00:10:12.240><c> want</c><00:10:12.480><c> to</c><00:10:12.640><c> know</c>

00:10:12.949 --> 00:10:12.959 align:start position:0%
both subtrees so now we want to know
 

00:10:12.959 --> 00:10:15.750 align:start position:0%
both subtrees so now we want to know
from<00:10:13.200><c> the</c><00:10:13.519><c> root</c><00:10:13.839><c> node</c><00:10:14.320><c> is</c><00:10:14.480><c> it</c><00:10:14.640><c> balanced</c><00:10:15.279><c> right</c>

00:10:15.750 --> 00:10:15.760 align:start position:0%
from the root node is it balanced right
 

00:10:15.760 --> 00:10:17.509 align:start position:0%
from the root node is it balanced right
how<00:10:15.920><c> can</c><00:10:16.079><c> we</c><00:10:16.240><c> determine</c><00:10:16.720><c> that</c><00:10:16.959><c> well</c><00:10:17.360><c> we're</c>

00:10:17.509 --> 00:10:17.519 align:start position:0%
how can we determine that well we're
 

00:10:17.519 --> 00:10:19.350 align:start position:0%
how can we determine that well we're
gonna<00:10:17.680><c> have</c><00:10:17.600><c> to</c><00:10:17.920><c> take</c><00:10:18.079><c> the</c><00:10:18.240><c> absolute</c><00:10:18.640><c> value</c><00:10:19.040><c> of</c>

00:10:19.350 --> 00:10:19.360 align:start position:0%
gonna have to take the absolute value of
 

00:10:19.360 --> 00:10:21.750 align:start position:0%
gonna have to take the absolute value of
the<00:10:19.600><c> left</c><00:10:20.079><c> and</c><00:10:20.480><c> right</c><00:10:20.880><c> heights</c><00:10:21.279><c> right</c><00:10:21.440><c> so</c><00:10:21.600><c> how</c>

00:10:21.750 --> 00:10:21.760 align:start position:0%
the left and right heights right so how
 

00:10:21.760 --> 00:10:23.750 align:start position:0%
the left and right heights right so how
can<00:10:21.920><c> we</c><00:10:22.000><c> do</c><00:10:22.160><c> that</c><00:10:22.320><c> we</c><00:10:22.480><c> can</c><00:10:22.640><c> take</c><00:10:23.360><c> absolute</c>

00:10:23.750 --> 00:10:23.760 align:start position:0%
can we do that we can take absolute
 

00:10:23.760 --> 00:10:26.710 align:start position:0%
can we do that we can take absolute
value<00:10:24.560><c> left</c><00:10:25.120><c> of</c><00:10:25.360><c> index</c><00:10:25.839><c> one</c><00:10:26.160><c> because</c><00:10:26.399><c> remember</c>

00:10:26.710 --> 00:10:26.720 align:start position:0%
value left of index one because remember
 

00:10:26.720 --> 00:10:28.470 align:start position:0%
value left of index one because remember
the<00:10:26.880><c> second</c><00:10:27.200><c> value</c><00:10:27.680><c> is</c><00:10:27.839><c> where</c><00:10:28.000><c> the</c><00:10:28.160><c> height</c>

00:10:28.470 --> 00:10:28.480 align:start position:0%
the second value is where the height
 

00:10:28.480 --> 00:10:32.230 align:start position:0%
the second value is where the height
happens<00:10:28.800><c> to</c><00:10:28.959><c> be</c><00:10:29.519><c> left</c><00:10:29.920><c> of</c><00:10:30.079><c> one</c><00:10:30.560><c> minus</c><00:10:31.440><c> right</c><00:10:31.920><c> of</c>

00:10:32.230 --> 00:10:32.240 align:start position:0%
happens to be left of one minus right of
 

00:10:32.240 --> 00:10:35.190 align:start position:0%
happens to be left of one minus right of
one<00:10:32.959><c> so</c><00:10:33.440><c> this</c><00:10:33.600><c> will</c><00:10:33.760><c> give</c><00:10:34.000><c> us</c><00:10:34.160><c> that</c><00:10:34.480><c> so</c><00:10:34.800><c> as</c><00:10:34.959><c> long</c>

00:10:35.190 --> 00:10:35.200 align:start position:0%
one so this will give us that so as long
 

00:10:35.200 --> 00:10:37.269 align:start position:0%
one so this will give us that so as long
as<00:10:35.360><c> this</c><00:10:35.680><c> is</c><00:10:35.839><c> less</c><00:10:36.000><c> than</c><00:10:36.160><c> or</c><00:10:36.320><c> equal</c><00:10:36.480><c> to</c><00:10:36.640><c> one</c><00:10:37.120><c> we</c>

00:10:37.269 --> 00:10:37.279 align:start position:0%
as this is less than or equal to one we
 

00:10:37.279 --> 00:10:40.230 align:start position:0%
as this is less than or equal to one we
can<00:10:37.440><c> say</c><00:10:37.600><c> that</c><00:10:37.760><c> the</c><00:10:37.920><c> tree</c><00:10:38.240><c> is</c><00:10:38.399><c> balanced</c><00:10:39.120><c> right</c>

00:10:40.230 --> 00:10:40.240 align:start position:0%
can say that the tree is balanced right
 

00:10:40.240 --> 00:10:43.670 align:start position:0%
can say that the tree is balanced right
not<00:10:40.880><c> not</c><00:10:41.279><c> so</c><00:10:41.600><c> fast</c><00:10:42.000><c> because</c><00:10:42.480><c> remember</c><00:10:43.360><c> if</c>

00:10:43.670 --> 00:10:43.680 align:start position:0%
not not so fast because remember if
 

00:10:43.680 --> 00:10:46.150 align:start position:0%
not not so fast because remember if
either<00:10:44.079><c> of</c><00:10:44.160><c> these</c><00:10:44.560><c> left</c><00:10:44.800><c> or</c><00:10:45.120><c> right</c><00:10:45.360><c> subtrees</c>

00:10:46.150 --> 00:10:46.160 align:start position:0%
either of these left or right subtrees
 

00:10:46.160 --> 00:10:48.389 align:start position:0%
either of these left or right subtrees
ever<00:10:46.480><c> returned</c><00:10:47.200><c> false</c><00:10:47.760><c> in</c><00:10:47.839><c> the</c><00:10:48.079><c> first</c>

00:10:48.389 --> 00:10:48.399 align:start position:0%
ever returned false in the first
 

00:10:48.399 --> 00:10:50.150 align:start position:0%
ever returned false in the first
parameter<00:10:48.880><c> then</c><00:10:49.040><c> we</c><00:10:49.200><c> know</c><00:10:49.360><c> for</c><00:10:49.600><c> sure</c><00:10:49.839><c> that</c><00:10:50.000><c> the</c>

00:10:50.150 --> 00:10:50.160 align:start position:0%
parameter then we know for sure that the
 

00:10:50.160 --> 00:10:54.150 align:start position:0%
parameter then we know for sure that the
entire<00:10:50.640><c> tree</c><00:10:51.040><c> is</c><00:10:51.360><c> not</c><00:10:51.839><c> balanced</c><00:10:52.640><c> right</c><00:10:53.360><c> so</c>

00:10:54.150 --> 00:10:54.160 align:start position:0%
entire tree is not balanced right so
 

00:10:54.160 --> 00:10:56.790 align:start position:0%
entire tree is not balanced right so
before<00:10:54.560><c> we</c><00:10:54.800><c> say</c><00:10:55.360><c> uh</c><00:10:55.760><c> that</c><00:10:56.000><c> this</c><00:10:56.240><c> condition</c><00:10:56.720><c> is</c>

00:10:56.790 --> 00:10:56.800 align:start position:0%
before we say uh that this condition is
 

00:10:56.800 --> 00:10:58.550 align:start position:0%
before we say uh that this condition is
enough<00:10:57.279><c> we're</c><00:10:57.519><c> gonna</c><00:10:57.760><c> add</c><00:10:58.160><c> two</c><00:10:58.399><c> more</c>

00:10:58.550 --> 00:10:58.560 align:start position:0%
enough we're gonna add two more
 

00:10:58.560 --> 00:11:00.470 align:start position:0%
enough we're gonna add two more
conditions<00:10:59.120><c> we're</c><00:10:59.200><c> going</c><00:10:59.279><c> to</c><00:10:59.600><c> say</c><00:10:59.920><c> okay</c><00:11:00.240><c> as</c>

00:11:00.470 --> 00:11:00.480 align:start position:0%
conditions we're going to say okay as
 

00:11:00.480 --> 00:11:02.949 align:start position:0%
conditions we're going to say okay as
long<00:11:00.880><c> as</c><00:11:01.519><c> this</c><00:11:01.760><c> is</c><00:11:01.920><c> true</c><00:11:02.320><c> meaning</c><00:11:02.560><c> that</c><00:11:02.800><c> from</c>

00:11:02.949 --> 00:11:02.959 align:start position:0%
long as this is true meaning that from
 

00:11:02.959 --> 00:11:05.269 align:start position:0%
long as this is true meaning that from
the<00:11:03.200><c> root</c><00:11:03.519><c> it's</c><00:11:03.760><c> balanced</c><00:11:04.240><c> and</c><00:11:04.640><c> the</c><00:11:04.880><c> left</c><00:11:05.120><c> and</c>

00:11:05.269 --> 00:11:05.279 align:start position:0%
the root it's balanced and the left and
 

00:11:05.279 --> 00:11:07.829 align:start position:0%
the root it's balanced and the left and
right<00:11:05.519><c> sub</c><00:11:05.839><c> trees</c><00:11:06.160><c> were</c><00:11:06.480><c> also</c><00:11:06.880><c> balanced</c><00:11:07.519><c> so</c><00:11:07.680><c> we</c>

00:11:07.829 --> 00:11:07.839 align:start position:0%
right sub trees were also balanced so we
 

00:11:07.839 --> 00:11:10.470 align:start position:0%
right sub trees were also balanced so we
can<00:11:07.920><c> determine</c><00:11:08.320><c> that</c><00:11:08.480><c> by</c><00:11:08.720><c> just</c><00:11:08.959><c> taking</c><00:11:09.680><c> the</c><00:11:10.079><c> uh</c>

00:11:10.470 --> 00:11:10.480 align:start position:0%
can determine that by just taking the uh
 

00:11:10.480 --> 00:11:13.990 align:start position:0%
can determine that by just taking the uh
first<00:11:11.120><c> the</c><00:11:11.519><c> zero</c><00:11:11.920><c> index</c><00:11:12.240><c> of</c><00:11:12.399><c> left</c><00:11:13.040><c> and</c><00:11:13.680><c> the</c>

00:11:13.990 --> 00:11:14.000 align:start position:0%
first the zero index of left and the
 

00:11:14.000 --> 00:11:16.389 align:start position:0%
first the zero index of left and the
zero<00:11:14.399><c> index</c><00:11:14.800><c> of</c><00:11:15.519><c> right</c>

00:11:16.389 --> 00:11:16.399 align:start position:0%
zero index of right
 

00:11:16.399 --> 00:11:19.750 align:start position:0%
zero index of right
and<00:11:17.120><c> also</c><00:11:17.600><c> this</c><00:11:18.000><c> condition</c><00:11:18.720><c> over</c><00:11:19.120><c> here</c><00:11:19.440><c> let</c><00:11:19.600><c> me</c>

00:11:19.750 --> 00:11:19.760 align:start position:0%
and also this condition over here let me
 

00:11:19.760 --> 00:11:22.230 align:start position:0%
and also this condition over here let me
just<00:11:20.160><c> reformat</c><00:11:20.880><c> it</c><00:11:21.200><c> slightly</c><00:11:21.760><c> to</c><00:11:21.920><c> make</c><00:11:22.079><c> it</c><00:11:22.160><c> a</c>

00:11:22.230 --> 00:11:22.240 align:start position:0%
just reformat it slightly to make it a
 

00:11:22.240 --> 00:11:24.310 align:start position:0%
just reformat it slightly to make it a
little<00:11:22.399><c> bit</c><00:11:22.560><c> more</c><00:11:22.800><c> readable</c><00:11:23.519><c> this</c><00:11:23.839><c> balance</c><00:11:24.240><c> is</c>

00:11:24.310 --> 00:11:24.320 align:start position:0%
little bit more readable this balance is
 

00:11:24.320 --> 00:11:26.069 align:start position:0%
little bit more readable this balance is
what<00:11:24.480><c> we're</c><00:11:24.640><c> going</c><00:11:24.720><c> to</c><00:11:24.800><c> be</c><00:11:24.959><c> returning</c><00:11:25.519><c> as</c><00:11:25.760><c> the</c>

00:11:26.069 --> 00:11:26.079 align:start position:0%
what we're going to be returning as the
 

00:11:26.079 --> 00:11:27.030 align:start position:0%
what we're going to be returning as the
first

00:11:27.030 --> 00:11:27.040 align:start position:0%
first
 

00:11:27.040 --> 00:11:29.110 align:start position:0%
first
as<00:11:27.200><c> the</c><00:11:27.360><c> zeroth</c><00:11:27.839><c> index</c><00:11:28.320><c> let</c><00:11:28.480><c> me</c><00:11:28.560><c> just</c><00:11:28.720><c> show</c><00:11:28.880><c> you</c>

00:11:29.110 --> 00:11:29.120 align:start position:0%
as the zeroth index let me just show you
 

00:11:29.120 --> 00:11:30.949 align:start position:0%
as the zeroth index let me just show you
that<00:11:29.279><c> so</c><00:11:29.440><c> we're</c><00:11:29.600><c> going</c><00:11:29.680><c> to</c><00:11:29.760><c> return</c><00:11:30.480><c> a</c><00:11:30.640><c> pair</c><00:11:30.800><c> of</c>

00:11:30.949 --> 00:11:30.959 align:start position:0%
that so we're going to return a pair of
 

00:11:30.959 --> 00:11:32.790 align:start position:0%
that so we're going to return a pair of
values<00:11:31.440><c> the</c><00:11:31.519><c> first</c><00:11:31.839><c> is</c><00:11:31.920><c> going</c><00:11:32.000><c> to</c><00:11:32.079><c> be</c><00:11:32.320><c> is</c><00:11:32.480><c> this</c>

00:11:32.790 --> 00:11:32.800 align:start position:0%
values the first is going to be is this
 

00:11:32.800 --> 00:11:34.790 align:start position:0%
values the first is going to be is this
tree<00:11:33.120><c> balanced</c><00:11:33.839><c> and</c><00:11:34.000><c> the</c><00:11:34.160><c> second</c><00:11:34.560><c> is</c><00:11:34.640><c> going</c><00:11:34.720><c> to</c>

00:11:34.790 --> 00:11:34.800 align:start position:0%
tree balanced and the second is going to
 

00:11:34.800 --> 00:11:36.870 align:start position:0%
tree balanced and the second is going to
be<00:11:34.959><c> the</c><00:11:35.200><c> height</c><00:11:35.600><c> of</c><00:11:35.760><c> the</c><00:11:35.920><c> tree</c><00:11:36.399><c> how</c><00:11:36.560><c> do</c><00:11:36.720><c> we</c>

00:11:36.870 --> 00:11:36.880 align:start position:0%
be the height of the tree how do we
 

00:11:36.880 --> 00:11:38.069 align:start position:0%
be the height of the tree how do we
determine<00:11:37.279><c> the</c><00:11:37.360><c> height</c><00:11:37.600><c> of</c><00:11:37.680><c> the</c><00:11:37.760><c> tree</c><00:11:37.920><c> well</c>

00:11:38.069 --> 00:11:38.079 align:start position:0%
determine the height of the tree well
 

00:11:38.079 --> 00:11:40.069 align:start position:0%
determine the height of the tree well
it's<00:11:38.240><c> going</c><00:11:38.240><c> to</c><00:11:38.320><c> be</c><00:11:38.560><c> one</c>

00:11:40.069 --> 00:11:40.079 align:start position:0%
it's going to be one
 

00:11:40.079 --> 00:11:41.590 align:start position:0%
it's going to be one
one<00:11:40.399><c> comes</c><00:11:40.640><c> from</c><00:11:40.800><c> the</c><00:11:40.959><c> root</c><00:11:41.120><c> node</c><00:11:41.360><c> that</c><00:11:41.440><c> we're</c>

00:11:41.590 --> 00:11:41.600 align:start position:0%
one comes from the root node that we're
 

00:11:41.600 --> 00:11:44.389 align:start position:0%
one comes from the root node that we're
currently<00:11:42.160><c> at</c><00:11:42.640><c> plus</c><00:11:43.040><c> the</c><00:11:43.279><c> max</c><00:11:43.680><c> of</c><00:11:43.760><c> the</c><00:11:44.000><c> left</c>

00:11:44.389 --> 00:11:44.399 align:start position:0%
currently at plus the max of the left
 

00:11:44.399 --> 00:11:46.069 align:start position:0%
currently at plus the max of the left
and<00:11:44.560><c> right</c><00:11:44.800><c> subtree</c><00:11:45.279><c> so</c><00:11:45.440><c> we</c><00:11:45.519><c> can</c><00:11:45.680><c> get</c><00:11:45.839><c> that</c>

00:11:46.069 --> 00:11:46.079 align:start position:0%
and right subtree so we can get that
 

00:11:46.079 --> 00:11:49.030 align:start position:0%
and right subtree so we can get that
pretty<00:11:46.320><c> easily</c><00:11:46.720><c> left</c><00:11:47.120><c> at</c><00:11:47.360><c> index</c><00:11:47.760><c> one</c>

00:11:49.030 --> 00:11:49.040 align:start position:0%
pretty easily left at index one
 

00:11:49.040 --> 00:11:51.670 align:start position:0%
pretty easily left at index one
and<00:11:49.680><c> right</c><00:11:50.240><c> at</c><00:11:50.560><c> index</c><00:11:50.959><c> one</c><00:11:51.120><c> so</c><00:11:51.279><c> whatever</c><00:11:51.600><c> the</c>

00:11:51.670 --> 00:11:51.680 align:start position:0%
and right at index one so whatever the
 

00:11:51.680 --> 00:11:54.389 align:start position:0%
and right at index one so whatever the
max<00:11:51.920><c> of</c><00:11:52.079><c> those</c><00:11:52.399><c> two</c><00:11:52.720><c> is</c><00:11:53.120><c> plus</c><00:11:53.680><c> one</c><00:11:54.000><c> gives</c><00:11:54.240><c> us</c>

00:11:54.389 --> 00:11:54.399 align:start position:0%
max of those two is plus one gives us
 

00:11:54.399 --> 00:11:56.230 align:start position:0%
max of those two is plus one gives us
the<00:11:54.560><c> height</c><00:11:54.959><c> hopefully</c><00:11:55.440><c> this</c><00:11:55.760><c> is</c><00:11:55.920><c> pretty</c>

00:11:56.230 --> 00:11:56.240 align:start position:0%
the height hopefully this is pretty
 

00:11:56.240 --> 00:11:58.629 align:start position:0%
the height hopefully this is pretty
simple<00:11:56.560><c> but</c><00:11:56.959><c> the</c><00:11:57.120><c> balanced</c><00:11:57.680><c> might</c><00:11:57.920><c> not</c><00:11:58.160><c> be</c>

00:11:58.629 --> 00:11:58.639 align:start position:0%
simple but the balanced might not be
 

00:11:58.639 --> 00:12:01.590 align:start position:0%
simple but the balanced might not be
this<00:11:58.959><c> balance</c><00:11:59.680><c> doesn't</c><00:12:00.079><c> only</c><00:12:00.560><c> mean</c><00:12:00.880><c> is</c><00:12:01.120><c> the</c><00:12:01.440><c> is</c>

00:12:01.590 --> 00:12:01.600 align:start position:0%
this balance doesn't only mean is the is
 

00:12:01.600 --> 00:12:03.750 align:start position:0%
this balance doesn't only mean is the is
the<00:12:01.760><c> tree</c><00:12:02.000><c> balanced</c><00:12:02.480><c> from</c><00:12:02.639><c> the</c><00:12:02.880><c> root</c><00:12:03.120><c> position</c>

00:12:03.750 --> 00:12:03.760 align:start position:0%
the tree balanced from the root position
 

00:12:03.760 --> 00:12:06.230 align:start position:0%
the tree balanced from the root position
this<00:12:04.000><c> balanced</c><00:12:04.480><c> means</c><00:12:04.880><c> is</c><00:12:05.040><c> the</c><00:12:05.360><c> entire</c><00:12:05.839><c> tree</c>

00:12:06.230 --> 00:12:06.240 align:start position:0%
this balanced means is the entire tree
 

00:12:06.240 --> 00:12:09.030 align:start position:0%
this balanced means is the entire tree
balanced<00:12:06.800><c> at</c><00:12:07.120><c> all</c><00:12:07.519><c> because</c><00:12:07.760><c> remember</c><00:12:08.320><c> if</c><00:12:08.880><c> the</c>

00:12:09.030 --> 00:12:09.040 align:start position:0%
balanced at all because remember if the
 

00:12:09.040 --> 00:12:11.269 align:start position:0%
balanced at all because remember if the
left<00:12:09.360><c> subtree</c><00:12:09.760><c> for</c><00:12:10.000><c> example</c><00:12:10.639><c> was</c><00:12:10.959><c> not</c>

00:12:11.269 --> 00:12:11.279 align:start position:0%
left subtree for example was not
 

00:12:11.279 --> 00:12:13.829 align:start position:0%
left subtree for example was not
balanced<00:12:12.000><c> then</c><00:12:12.320><c> this</c><00:12:12.959><c> conditional</c><00:12:13.600><c> is</c><00:12:13.760><c> going</c>

00:12:13.829 --> 00:12:13.839 align:start position:0%
balanced then this conditional is going
 

00:12:13.839 --> 00:12:15.910 align:start position:0%
balanced then this conditional is going
to<00:12:14.000><c> evaluate</c><00:12:14.480><c> to</c><00:12:14.720><c> false</c><00:12:15.040><c> right</c><00:12:15.279><c> because</c><00:12:15.519><c> this</c>

00:12:15.910 --> 00:12:15.920 align:start position:0%
to evaluate to false right because this
 

00:12:15.920 --> 00:12:18.310 align:start position:0%
to evaluate to false right because this
balance<00:12:16.320><c> is</c><00:12:16.560><c> only</c><00:12:16.959><c> going</c><00:12:17.120><c> to</c><00:12:17.200><c> be</c><00:12:17.360><c> true</c><00:12:17.920><c> if</c><00:12:18.160><c> the</c>

00:12:18.310 --> 00:12:18.320 align:start position:0%
balance is only going to be true if the
 

00:12:18.320 --> 00:12:20.629 align:start position:0%
balance is only going to be true if the
left<00:12:18.639><c> sub</c><00:12:18.880><c> tree</c><00:12:19.040><c> was</c><00:12:19.279><c> balanced</c><00:12:20.000><c> and</c><00:12:20.240><c> the</c><00:12:20.399><c> right</c>

00:12:20.629 --> 00:12:20.639 align:start position:0%
left sub tree was balanced and the right
 

00:12:20.639 --> 00:12:23.269 align:start position:0%
left sub tree was balanced and the right
sub<00:12:20.880><c> tree</c><00:12:21.040><c> was</c><00:12:21.279><c> balanced</c><00:12:21.920><c> and</c><00:12:22.399><c> from</c><00:12:22.560><c> the</c><00:12:22.880><c> root</c>

00:12:23.269 --> 00:12:23.279 align:start position:0%
sub tree was balanced and from the root
 

00:12:23.279 --> 00:12:26.150 align:start position:0%
sub tree was balanced and from the root
subtree<00:12:24.079><c> are</c><00:12:24.240><c> we</c><00:12:24.399><c> balanced</c><00:12:25.120><c> right</c><00:12:25.360><c> so</c><00:12:25.920><c> all</c>

00:12:26.150 --> 00:12:26.160 align:start position:0%
subtree are we balanced right so all
 

00:12:26.160 --> 00:12:27.829 align:start position:0%
subtree are we balanced right so all
three<00:12:26.399><c> of</c><00:12:26.480><c> those</c><00:12:26.720><c> have</c><00:12:26.880><c> to</c><00:12:26.959><c> be</c><00:12:27.120><c> true</c><00:12:27.360><c> for</c><00:12:27.600><c> us</c><00:12:27.760><c> to</c>

00:12:27.829 --> 00:12:27.839 align:start position:0%
three of those have to be true for us to
 

00:12:27.839 --> 00:12:30.550 align:start position:0%
three of those have to be true for us to
return<00:12:28.320><c> true</c><00:12:28.800><c> as</c><00:12:29.040><c> the</c><00:12:29.200><c> balanced</c><00:12:29.760><c> variable</c>

00:12:30.550 --> 00:12:30.560 align:start position:0%
return true as the balanced variable
 

00:12:30.560 --> 00:12:32.629 align:start position:0%
return true as the balanced variable
hopefully<00:12:30.959><c> that</c><00:12:31.200><c> makes</c><00:12:31.519><c> sense</c><00:12:32.079><c> because</c><00:12:32.320><c> that</c>

00:12:32.629 --> 00:12:32.639 align:start position:0%
hopefully that makes sense because that
 

00:12:32.639 --> 00:12:34.230 align:start position:0%
hopefully that makes sense because that
is<00:12:32.720><c> the</c><00:12:32.880><c> entire</c><00:12:33.279><c> code</c><00:12:33.600><c> once</c><00:12:33.760><c> we're</c><00:12:33.920><c> done</c><00:12:34.079><c> with</c>

00:12:34.230 --> 00:12:34.240 align:start position:0%
is the entire code once we're done with
 

00:12:34.240 --> 00:12:35.910 align:start position:0%
is the entire code once we're done with
that<00:12:34.320><c> we</c><00:12:34.480><c> can</c><00:12:34.720><c> in</c><00:12:34.800><c> the</c><00:12:35.040><c> outer</c><00:12:35.360><c> function</c><00:12:35.680><c> we</c><00:12:35.839><c> can</c>

00:12:35.910 --> 00:12:35.920 align:start position:0%
that we can in the outer function we can
 

00:12:35.920 --> 00:12:38.389 align:start position:0%
that we can in the outer function we can
go<00:12:36.079><c> ahead</c><00:12:36.240><c> and</c><00:12:36.399><c> call</c><00:12:36.720><c> our</c><00:12:36.880><c> dfs</c><00:12:37.680><c> starting</c><00:12:38.160><c> from</c>

00:12:38.389 --> 00:12:38.399 align:start position:0%
go ahead and call our dfs starting from
 

00:12:38.399 --> 00:12:40.790 align:start position:0%
go ahead and call our dfs starting from
the<00:12:38.639><c> root</c><00:12:38.880><c> node</c><00:12:39.440><c> and</c><00:12:39.680><c> remember</c><00:12:40.000><c> this</c><00:12:40.160><c> dfs</c><00:12:40.720><c> is</c>

00:12:40.790 --> 00:12:40.800 align:start position:0%
the root node and remember this dfs is
 

00:12:40.800 --> 00:12:43.509 align:start position:0%
the root node and remember this dfs is
going<00:12:40.959><c> to</c><00:12:41.200><c> return</c><00:12:41.760><c> two</c><00:12:42.079><c> variable</c><00:12:42.560><c> or</c><00:12:43.200><c> a</c><00:12:43.279><c> pair</c>

00:12:43.509 --> 00:12:43.519 align:start position:0%
going to return two variable or a pair
 

00:12:43.519 --> 00:12:46.550 align:start position:0%
going to return two variable or a pair
of<00:12:44.000><c> values</c><00:12:44.480><c> right</c><00:12:44.959><c> a</c><00:12:45.120><c> boolean</c><00:12:45.680><c> and</c><00:12:46.079><c> the</c><00:12:46.240><c> height</c>

00:12:46.550 --> 00:12:46.560 align:start position:0%
of values right a boolean and the height
 

00:12:46.560 --> 00:12:48.310 align:start position:0%
of values right a boolean and the height
so<00:12:46.880><c> which</c><00:12:47.120><c> of</c><00:12:47.200><c> those</c><00:12:47.440><c> do</c><00:12:47.600><c> we</c><00:12:47.680><c> want</c><00:12:47.839><c> to</c><00:12:47.920><c> return</c>

00:12:48.310 --> 00:12:48.320 align:start position:0%
so which of those do we want to return
 

00:12:48.320 --> 00:12:49.910 align:start position:0%
so which of those do we want to return
in<00:12:48.399><c> the</c><00:12:48.560><c> outer</c><00:12:48.880><c> function</c><00:12:49.200><c> we</c><00:12:49.360><c> want</c><00:12:49.519><c> to</c><00:12:49.600><c> return</c>

00:12:49.910 --> 00:12:49.920 align:start position:0%
in the outer function we want to return
 

00:12:49.920 --> 00:12:52.710 align:start position:0%
in the outer function we want to return
the<00:12:50.000><c> boolean</c><00:12:50.480><c> so</c><00:12:50.639><c> we</c><00:12:50.800><c> can</c><00:12:51.279><c> return</c><00:12:52.079><c> this</c><00:12:52.399><c> at</c>

00:12:52.710 --> 00:12:52.720 align:start position:0%
the boolean so we can return this at
 

00:12:52.720 --> 00:12:55.190 align:start position:0%
the boolean so we can return this at
index<00:12:53.279><c> 0</c><00:12:53.760><c> and</c><00:12:53.839><c> then</c><00:12:54.000><c> that</c><00:12:54.160><c> will</c><00:12:54.320><c> be</c><00:12:54.480><c> the</c><00:12:54.720><c> entire</c>

00:12:55.190 --> 00:12:55.200 align:start position:0%
index 0 and then that will be the entire
 

00:12:55.200 --> 00:12:57.110 align:start position:0%
index 0 and then that will be the entire
code<00:12:55.680><c> so</c><00:12:55.920><c> let</c><00:12:56.079><c> me</c><00:12:56.240><c> submit</c><00:12:56.639><c> it</c><00:12:56.720><c> to</c><00:12:56.880><c> make</c><00:12:56.959><c> sure</c>

00:12:57.110 --> 00:12:57.120 align:start position:0%
code so let me submit it to make sure
 

00:12:57.120 --> 00:12:59.030 align:start position:0%
code so let me submit it to make sure
that<00:12:57.279><c> it</c><00:12:57.440><c> works</c><00:12:58.000><c> as</c><00:12:58.160><c> you</c><00:12:58.240><c> can</c><00:12:58.399><c> see</c><00:12:58.560><c> on</c><00:12:58.639><c> the</c><00:12:58.800><c> left</c>

00:12:59.030 --> 00:12:59.040 align:start position:0%
that it works as you can see on the left
 

00:12:59.040 --> 00:13:00.790 align:start position:0%
that it works as you can see on the left
it<00:12:59.200><c> does</c><00:12:59.440><c> work</c><00:12:59.680><c> and</c><00:12:59.839><c> it's</c><00:13:00.000><c> pretty</c><00:13:00.320><c> efficient</c>

00:13:00.790 --> 00:13:00.800 align:start position:0%
it does work and it's pretty efficient
 

00:13:00.800 --> 00:13:02.870 align:start position:0%
it does work and it's pretty efficient
so<00:13:01.040><c> i</c><00:13:01.200><c> hope</c><00:13:01.440><c> that</c><00:13:01.600><c> this</c><00:13:01.760><c> was</c><00:13:02.000><c> helpful</c><00:13:02.560><c> if</c><00:13:02.720><c> it</c>

00:13:02.870 --> 00:13:02.880 align:start position:0%
so i hope that this was helpful if it
 

00:13:02.880 --> 00:13:04.870 align:start position:0%
so i hope that this was helpful if it
was<00:13:03.519><c> please</c><00:13:03.839><c> like</c><00:13:04.079><c> and</c><00:13:04.160><c> subscribe</c><00:13:04.800><c> it</c>

00:13:04.870 --> 00:13:04.880 align:start position:0%
was please like and subscribe it
 

00:13:04.880 --> 00:13:06.870 align:start position:0%
was please like and subscribe it
supports<00:13:05.440><c> channel</c><00:13:05.920><c> a</c><00:13:06.160><c> lot</c><00:13:06.480><c> and</c><00:13:06.639><c> i'll</c>

00:13:06.870 --> 00:13:06.880 align:start position:0%
supports channel a lot and i'll
 

00:13:06.880 --> 00:13:09.269 align:start position:0%
supports channel a lot and i'll
hopefully<00:13:07.680><c> see</c><00:13:07.839><c> you</c><00:13:08.000><c> pretty</c><00:13:08.320><c> soon</c><00:13:08.880><c> thanks</c><00:13:09.120><c> for</c>

00:13:09.269 --> 00:13:09.279 align:start position:0%
hopefully see you pretty soon thanks for
 

00:13:09.279 --> 00:13:11.839 align:start position:0%
hopefully see you pretty soon thanks for
watching

