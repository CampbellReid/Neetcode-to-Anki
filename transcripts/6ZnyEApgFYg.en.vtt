WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.510 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:00.960><c> back</c><00:00:01.199><c> and</c><00:00:01.280><c> let's</c>

00:00:01.510 --> 00:00:01.520 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.520 --> 00:00:03.429 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.760><c> some</c><00:00:01.920><c> more</c><00:00:02.080><c> neat</c><00:00:02.399><c> code</c><00:00:02.639><c> today</c><00:00:02.960><c> so</c><00:00:03.120><c> today</c>

00:00:03.429 --> 00:00:03.439 align:start position:0%
write some more neat code today so today
 

00:00:03.439 --> 00:00:04.230 align:start position:0%
write some more neat code today so today
let's<00:00:03.760><c> solve</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
let's solve
 

00:00:04.240 --> 00:00:07.430 align:start position:0%
let's solve
binary<00:00:04.880><c> tree</c><00:00:05.440><c> level</c><00:00:06.000><c> order</c><00:00:06.480><c> traversal</c><00:00:07.200><c> it's</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
binary tree level order traversal it's
 

00:00:07.440 --> 00:00:09.430 align:start position:0%
binary tree level order traversal it's
basically<00:00:08.000><c> just</c><00:00:08.240><c> like</c><00:00:08.480><c> it</c><00:00:08.720><c> sounds</c><00:00:09.040><c> so</c><00:00:09.200><c> we're</c>

00:00:09.430 --> 00:00:09.440 align:start position:0%
basically just like it sounds so we're
 

00:00:09.440 --> 00:00:11.110 align:start position:0%
basically just like it sounds so we're
given<00:00:09.840><c> a</c><00:00:10.080><c> binary</c><00:00:10.639><c> tree</c>

00:00:11.110 --> 00:00:11.120 align:start position:0%
given a binary tree
 

00:00:11.120 --> 00:00:13.669 align:start position:0%
given a binary tree
and<00:00:11.360><c> we</c><00:00:11.519><c> want</c><00:00:11.679><c> to</c><00:00:11.759><c> return</c><00:00:12.240><c> the</c><00:00:12.719><c> level</c><00:00:13.200><c> order</c>

00:00:13.669 --> 00:00:13.679 align:start position:0%
and we want to return the level order
 

00:00:13.679 --> 00:00:14.549 align:start position:0%
and we want to return the level order
traversal

00:00:14.549 --> 00:00:14.559 align:start position:0%
traversal
 

00:00:14.559 --> 00:00:16.870 align:start position:0%
traversal
of<00:00:14.880><c> its</c><00:00:15.120><c> nodes</c><00:00:15.599><c> so</c><00:00:15.759><c> basically</c><00:00:16.320><c> going</c><00:00:16.640><c> through</c>

00:00:16.870 --> 00:00:16.880 align:start position:0%
of its nodes so basically going through
 

00:00:16.880 --> 00:00:17.670 align:start position:0%
of its nodes so basically going through
every<00:00:17.119><c> single</c>

00:00:17.670 --> 00:00:17.680 align:start position:0%
every single
 

00:00:17.680 --> 00:00:20.310 align:start position:0%
every single
level<00:00:18.080><c> of</c><00:00:18.240><c> the</c><00:00:18.400><c> tree</c><00:00:19.039><c> and</c><00:00:19.199><c> going</c><00:00:19.520><c> from</c><00:00:19.840><c> left</c><00:00:20.080><c> to</c>

00:00:20.310 --> 00:00:20.320 align:start position:0%
level of the tree and going from left to
 

00:00:20.320 --> 00:00:20.870 align:start position:0%
level of the tree and going from left to
right

00:00:20.870 --> 00:00:20.880 align:start position:0%
right
 

00:00:20.880 --> 00:00:23.269 align:start position:0%
right
so<00:00:21.119><c> for</c><00:00:21.279><c> example</c><00:00:21.760><c> for</c><00:00:22.000><c> this</c><00:00:22.240><c> tree</c><00:00:22.640><c> we</c><00:00:22.800><c> have</c>

00:00:23.269 --> 00:00:23.279 align:start position:0%
so for example for this tree we have
 

00:00:23.279 --> 00:00:24.150 align:start position:0%
so for example for this tree we have
this<00:00:23.680><c> level</c>

00:00:24.150 --> 00:00:24.160 align:start position:0%
this level
 

00:00:24.160 --> 00:00:26.390 align:start position:0%
this level
so<00:00:24.960><c> that's</c><00:00:25.199><c> going</c><00:00:25.279><c> to</c><00:00:25.359><c> be</c><00:00:25.599><c> one</c><00:00:25.840><c> list</c><00:00:26.160><c> we</c><00:00:26.240><c> have</c>

00:00:26.390 --> 00:00:26.400 align:start position:0%
so that's going to be one list we have
 

00:00:26.400 --> 00:00:27.269 align:start position:0%
so that's going to be one list we have
the<00:00:26.560><c> second</c><00:00:26.880><c> level</c>

00:00:27.269 --> 00:00:27.279 align:start position:0%
the second level
 

00:00:27.279 --> 00:00:29.429 align:start position:0%
the second level
9<00:00:27.680><c> and</c><00:00:27.920><c> 20</c><00:00:28.240><c> and</c><00:00:28.320><c> then</c><00:00:28.400><c> we</c><00:00:28.560><c> have</c><00:00:28.640><c> the</c><00:00:28.880><c> third</c>

00:00:29.429 --> 00:00:29.439 align:start position:0%
9 and 20 and then we have the third
 

00:00:29.439 --> 00:00:30.550 align:start position:0%
9 and 20 and then we have the third
level<00:00:29.840><c> 15</c>

00:00:30.550 --> 00:00:30.560 align:start position:0%
level 15
 

00:00:30.560 --> 00:00:33.990 align:start position:0%
level 15
and<00:00:30.800><c> seven</c><00:00:31.119><c> so</c><00:00:31.279><c> we</c><00:00:31.439><c> have</c><00:00:31.760><c> one</c><00:00:32.239><c> two</c><00:00:32.640><c> three</c><00:00:33.120><c> lists</c>

00:00:33.990 --> 00:00:34.000 align:start position:0%
and seven so we have one two three lists
 

00:00:34.000 --> 00:00:35.830 align:start position:0%
and seven so we have one two three lists
and<00:00:34.239><c> these</c><00:00:34.559><c> lists</c><00:00:35.120><c> are</c><00:00:35.280><c> going</c><00:00:35.360><c> to</c><00:00:35.440><c> be</c><00:00:35.600><c> put</c>

00:00:35.830 --> 00:00:35.840 align:start position:0%
and these lists are going to be put
 

00:00:35.840 --> 00:00:37.670 align:start position:0%
and these lists are going to be put
together<00:00:36.480><c> and</c><00:00:36.640><c> that's</c><00:00:36.960><c> going</c><00:00:37.200><c> to</c><00:00:37.360><c> be</c>

00:00:37.670 --> 00:00:37.680 align:start position:0%
together and that's going to be
 

00:00:37.680 --> 00:00:40.950 align:start position:0%
together and that's going to be
our<00:00:38.000><c> result</c><00:00:38.559><c> the</c><00:00:38.800><c> three</c><00:00:39.200><c> lists</c><00:00:39.760><c> in</c><00:00:39.920><c> that</c><00:00:40.239><c> order</c>

00:00:40.950 --> 00:00:40.960 align:start position:0%
our result the three lists in that order
 

00:00:40.960 --> 00:00:43.750 align:start position:0%
our result the three lists in that order
so<00:00:41.200><c> to</c><00:00:41.360><c> understand</c><00:00:41.920><c> what</c><00:00:42.160><c> we</c><00:00:42.480><c> want</c><00:00:42.800><c> to</c><00:00:43.040><c> do</c><00:00:43.440><c> is</c>

00:00:43.750 --> 00:00:43.760 align:start position:0%
so to understand what we want to do is
 

00:00:43.760 --> 00:00:45.510 align:start position:0%
so to understand what we want to do is
pretty<00:00:44.079><c> straightforward</c><00:00:44.879><c> right</c><00:00:45.120><c> so</c>

00:00:45.510 --> 00:00:45.520 align:start position:0%
pretty straightforward right so
 

00:00:45.520 --> 00:00:47.510 align:start position:0%
pretty straightforward right so
basically<00:00:46.079><c> we</c><00:00:46.239><c> have</c><00:00:46.399><c> the</c><00:00:46.559><c> first</c><00:00:46.879><c> level</c><00:00:47.200><c> right</c>

00:00:47.510 --> 00:00:47.520 align:start position:0%
basically we have the first level right
 

00:00:47.520 --> 00:00:48.950 align:start position:0%
basically we have the first level right
go<00:00:47.760><c> from</c><00:00:48.079><c> left</c><00:00:48.320><c> to</c><00:00:48.480><c> right</c>

00:00:48.950 --> 00:00:48.960 align:start position:0%
go from left to right
 

00:00:48.960 --> 00:00:50.790 align:start position:0%
go from left to right
we<00:00:49.120><c> see</c><00:00:49.280><c> that</c><00:00:49.440><c> there's</c><00:00:49.680><c> only</c><00:00:49.920><c> a</c><00:00:50.079><c> single</c><00:00:50.480><c> node</c>

00:00:50.790 --> 00:00:50.800 align:start position:0%
we see that there's only a single node
 

00:00:50.800 --> 00:00:52.229 align:start position:0%
we see that there's only a single node
in<00:00:50.960><c> this</c><00:00:51.120><c> level</c><00:00:51.600><c> three</c>

00:00:52.229 --> 00:00:52.239 align:start position:0%
in this level three
 

00:00:52.239 --> 00:00:54.470 align:start position:0%
in this level three
that's<00:00:52.480><c> going</c><00:00:52.559><c> to</c><00:00:52.640><c> be</c><00:00:52.879><c> one</c><00:00:53.120><c> list</c><00:00:53.920><c> we</c><00:00:54.160><c> see</c><00:00:54.320><c> the</c>

00:00:54.470 --> 00:00:54.480 align:start position:0%
that's going to be one list we see the
 

00:00:54.480 --> 00:00:55.990 align:start position:0%
that's going to be one list we see the
second<00:00:54.800><c> level</c><00:00:55.120><c> right</c><00:00:55.360><c> that's</c><00:00:55.600><c> what</c><00:00:55.680><c> we</c><00:00:55.840><c> want</c>

00:00:55.990 --> 00:00:56.000 align:start position:0%
second level right that's what we want
 

00:00:56.000 --> 00:00:57.670 align:start position:0%
second level right that's what we want
to<00:00:56.079><c> do</c><00:00:56.239><c> we</c><00:00:56.399><c> want</c><00:00:56.559><c> to</c><00:00:56.640><c> traverse</c><00:00:57.199><c> this</c>

00:00:57.670 --> 00:00:57.680 align:start position:0%
to do we want to traverse this
 

00:00:57.680 --> 00:01:00.229 align:start position:0%
to do we want to traverse this
tree<00:00:58.399><c> every</c><00:00:58.719><c> single</c><00:00:59.120><c> level</c><00:00:59.440><c> right</c><00:00:59.680><c> one</c><00:00:59.920><c> level</c>

00:01:00.229 --> 00:01:00.239 align:start position:0%
tree every single level right one level
 

00:01:00.239 --> 00:01:00.869 align:start position:0%
tree every single level right one level
at<00:01:00.399><c> a</c><00:01:00.480><c> time</c>

00:01:00.869 --> 00:01:00.879 align:start position:0%
at a time
 

00:01:00.879 --> 00:01:03.670 align:start position:0%
at a time
going<00:01:01.199><c> from</c><00:01:01.600><c> left</c><00:01:02.320><c> to</c><00:01:02.559><c> right</c><00:01:03.039><c> so</c><00:01:03.199><c> the</c><00:01:03.359><c> second</c>

00:01:03.670 --> 00:01:03.680 align:start position:0%
going from left to right so the second
 

00:01:03.680 --> 00:01:04.070 align:start position:0%
going from left to right so the second
level

00:01:04.070 --> 00:01:04.080 align:start position:0%
level
 

00:01:04.080 --> 00:01:06.630 align:start position:0%
level
we'll<00:01:04.320><c> see</c><00:01:04.640><c> 9</c><00:01:05.119><c> and</c><00:01:05.360><c> 20</c><00:01:05.680><c> right</c><00:01:05.920><c> we</c><00:01:06.000><c> want</c><00:01:06.159><c> to</c><00:01:06.320><c> add</c>

00:01:06.630 --> 00:01:06.640 align:start position:0%
we'll see 9 and 20 right we want to add
 

00:01:06.640 --> 00:01:07.429 align:start position:0%
we'll see 9 and 20 right we want to add
that<00:01:06.960><c> to</c><00:01:07.119><c> a</c>

00:01:07.429 --> 00:01:07.439 align:start position:0%
that to a
 

00:01:07.439 --> 00:01:10.469 align:start position:0%
that to a
separate<00:01:08.080><c> list</c><00:01:09.119><c> and</c><00:01:09.439><c> lastly</c><00:01:10.000><c> we'll</c><00:01:10.240><c> get</c><00:01:10.400><c> to</c>

00:01:10.469 --> 00:01:10.479 align:start position:0%
separate list and lastly we'll get to
 

00:01:10.479 --> 00:01:11.670 align:start position:0%
separate list and lastly we'll get to
the<00:01:10.720><c> third</c><00:01:11.040><c> level</c>

00:01:11.670 --> 00:01:11.680 align:start position:0%
the third level
 

00:01:11.680 --> 00:01:14.310 align:start position:0%
the third level
going<00:01:11.920><c> from</c><00:01:12.159><c> left</c><00:01:12.400><c> to</c><00:01:12.560><c> right</c><00:01:12.799><c> we</c><00:01:12.880><c> have</c><00:01:13.040><c> a</c><00:01:13.200><c> 15</c>

00:01:14.310 --> 00:01:14.320 align:start position:0%
going from left to right we have a 15
 

00:01:14.320 --> 00:01:14.870 align:start position:0%
going from left to right we have a 15
and<00:01:14.479><c> then</c>

00:01:14.870 --> 00:01:14.880 align:start position:0%
and then
 

00:01:14.880 --> 00:01:17.350 align:start position:0%
and then
a<00:01:15.119><c> seven</c><00:01:15.920><c> we're</c><00:01:16.080><c> going</c><00:01:16.159><c> to</c><00:01:16.320><c> add</c><00:01:16.640><c> that</c><00:01:16.880><c> to</c><00:01:17.119><c> the</c>

00:01:17.350 --> 00:01:17.360 align:start position:0%
a seven we're going to add that to the
 

00:01:17.360 --> 00:01:18.469 align:start position:0%
a seven we're going to add that to the
third<00:01:17.840><c> list</c>

00:01:18.469 --> 00:01:18.479 align:start position:0%
third list
 

00:01:18.479 --> 00:01:20.789 align:start position:0%
third list
and<00:01:18.640><c> so</c><00:01:18.799><c> we've</c><00:01:19.040><c> traversed</c><00:01:19.520><c> the</c><00:01:19.680><c> list</c><00:01:20.320><c> in</c><00:01:20.479><c> level</c>

00:01:20.789 --> 00:01:20.799 align:start position:0%
and so we've traversed the list in level
 

00:01:20.799 --> 00:01:23.109 align:start position:0%
and so we've traversed the list in level
order<00:01:21.119><c> traversal</c><00:01:21.759><c> and</c><00:01:22.080><c> each</c><00:01:22.320><c> of</c><00:01:22.479><c> these</c><00:01:22.799><c> sub</c>

00:01:23.109 --> 00:01:23.119 align:start position:0%
order traversal and each of these sub
 

00:01:23.119 --> 00:01:24.230 align:start position:0%
order traversal and each of these sub
lists<00:01:23.600><c> are</c><00:01:23.759><c> going</c><00:01:23.840><c> to</c><00:01:23.920><c> be</c>

00:01:24.230 --> 00:01:24.240 align:start position:0%
lists are going to be
 

00:01:24.240 --> 00:01:28.149 align:start position:0%
lists are going to be
put<00:01:24.840><c> together</c><00:01:25.920><c> into</c><00:01:26.479><c> a</c><00:01:27.040><c> single</c><00:01:27.520><c> list</c><00:01:27.920><c> and</c><00:01:28.000><c> then</c>

00:01:28.149 --> 00:01:28.159 align:start position:0%
put together into a single list and then
 

00:01:28.159 --> 00:01:29.910 align:start position:0%
put together into a single list and then
that's<00:01:28.479><c> going</c><00:01:28.560><c> to</c><00:01:28.720><c> be</c><00:01:28.880><c> our</c><00:01:29.119><c> results</c><00:01:29.439><c> so</c><00:01:29.600><c> that's</c>

00:01:29.910 --> 00:01:29.920 align:start position:0%
that's going to be our results so that's
 

00:01:29.920 --> 00:01:31.109 align:start position:0%
that's going to be our results so that's
what<00:01:30.079><c> we</c><00:01:30.240><c> want</c><00:01:30.400><c> to</c><00:01:30.560><c> do</c><00:01:30.799><c> we</c>

00:01:31.109 --> 00:01:31.119 align:start position:0%
what we want to do we
 

00:01:31.119 --> 00:01:33.749 align:start position:0%
what we want to do we
know<00:01:31.759><c> that</c><00:01:32.000><c> that's</c><00:01:32.479><c> pretty</c><00:01:32.799><c> straightforward</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
know that that's pretty straightforward
 

00:01:33.759 --> 00:01:34.310 align:start position:0%
know that that's pretty straightforward
so

00:01:34.310 --> 00:01:34.320 align:start position:0%
so
 

00:01:34.320 --> 00:01:36.950 align:start position:0%
so
the<00:01:34.479><c> only</c><00:01:34.880><c> question</c><00:01:35.360><c> now</c><00:01:35.680><c> is</c><00:01:36.000><c> do</c><00:01:36.240><c> you</c><00:01:36.400><c> know</c><00:01:36.720><c> an</c>

00:01:36.950 --> 00:01:36.960 align:start position:0%
the only question now is do you know an
 

00:01:36.960 --> 00:01:38.550 align:start position:0%
the only question now is do you know an
algorithm<00:01:37.520><c> that</c><00:01:37.680><c> can</c><00:01:37.920><c> do</c><00:01:38.159><c> that</c>

00:01:38.550 --> 00:01:38.560 align:start position:0%
algorithm that can do that
 

00:01:38.560 --> 00:01:41.030 align:start position:0%
algorithm that can do that
that<00:01:38.720><c> can</c><00:01:38.960><c> traverse</c><00:01:39.439><c> it</c><00:01:39.680><c> level</c><00:01:40.079><c> order</c><00:01:40.720><c> and</c><00:01:40.880><c> if</c>

00:01:41.030 --> 00:01:41.040 align:start position:0%
that can traverse it level order and if
 

00:01:41.040 --> 00:01:41.670 align:start position:0%
that can traverse it level order and if
you<00:01:41.200><c> don't</c>

00:01:41.670 --> 00:01:41.680 align:start position:0%
you don't
 

00:01:41.680 --> 00:01:44.550 align:start position:0%
you don't
the<00:01:41.920><c> algorithm</c><00:01:42.479><c> is</c><00:01:42.799><c> breadth</c><00:01:43.360><c> first</c><00:01:43.840><c> search</c><00:01:44.320><c> so</c>

00:01:44.550 --> 00:01:44.560 align:start position:0%
the algorithm is breadth first search so
 

00:01:44.560 --> 00:01:45.429 align:start position:0%
the algorithm is breadth first search so
we<00:01:44.720><c> want</c><00:01:44.880><c> to</c><00:01:45.040><c> run</c>

00:01:45.429 --> 00:01:45.439 align:start position:0%
we want to run
 

00:01:45.439 --> 00:01:48.710 align:start position:0%
we want to run
breadth<00:01:45.920><c> first</c><00:01:46.240><c> search</c><00:01:46.799><c> on</c><00:01:47.360><c> our</c><00:01:47.920><c> tree</c>

00:01:48.710 --> 00:01:48.720 align:start position:0%
breadth first search on our tree
 

00:01:48.720 --> 00:01:52.149 align:start position:0%
breadth first search on our tree
and<00:01:48.880><c> then</c><00:01:49.119><c> add</c><00:01:49.439><c> the</c><00:01:49.680><c> values</c><00:01:50.560><c> into</c><00:01:51.119><c> lists</c>

00:01:52.149 --> 00:01:52.159 align:start position:0%
and then add the values into lists
 

00:01:52.159 --> 00:01:54.870 align:start position:0%
and then add the values into lists
and<00:01:52.399><c> the</c><00:01:52.640><c> second</c><00:01:52.960><c> thing</c><00:01:53.200><c> to</c><00:01:53.360><c> notice</c><00:01:53.759><c> is</c><00:01:54.399><c> do</c><00:01:54.640><c> you</c>

00:01:54.870 --> 00:01:54.880 align:start position:0%
and the second thing to notice is do you
 

00:01:54.880 --> 00:01:55.429 align:start position:0%
and the second thing to notice is do you
know

00:01:55.429 --> 00:01:55.439 align:start position:0%
know
 

00:01:55.439 --> 00:01:57.429 align:start position:0%
know
how<00:01:55.680><c> to</c><00:01:56.079><c> implement</c><00:01:56.719><c> this</c><00:01:56.960><c> breadth</c><00:01:57.200><c> first</c>

00:01:57.429 --> 00:01:57.439 align:start position:0%
how to implement this breadth first
 

00:01:57.439 --> 00:01:58.950 align:start position:0%
how to implement this breadth first
search<00:01:57.680><c> so</c><00:01:57.920><c> we</c><00:01:58.079><c> need</c><00:01:58.240><c> to</c><00:01:58.399><c> know</c>

00:01:58.950 --> 00:01:58.960 align:start position:0%
search so we need to know
 

00:01:58.960 --> 00:02:01.030 align:start position:0%
search so we need to know
this<00:01:59.119><c> is</c><00:01:59.280><c> the</c><00:01:59.439><c> algorithm</c><00:01:59.920><c> to</c><00:02:00.079><c> use</c><00:02:00.560><c> and</c><00:02:00.719><c> now</c><00:02:00.880><c> we</c>

00:02:01.030 --> 00:02:01.040 align:start position:0%
this is the algorithm to use and now we
 

00:02:01.040 --> 00:02:02.630 align:start position:0%
this is the algorithm to use and now we
need<00:02:01.200><c> to</c><00:02:01.280><c> know</c><00:02:01.439><c> how</c><00:02:01.600><c> to</c><00:02:01.840><c> implement</c><00:02:02.240><c> it</c><00:02:02.399><c> and</c><00:02:02.479><c> let</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
need to know how to implement it and let
 

00:02:02.640 --> 00:02:04.069 align:start position:0%
need to know how to implement it and let
me<00:02:02.799><c> show</c><00:02:02.960><c> you</c><00:02:03.119><c> how</c><00:02:03.280><c> to</c><00:02:03.360><c> do</c><00:02:03.600><c> that</c>

00:02:04.069 --> 00:02:04.079 align:start position:0%
me show you how to do that
 

00:02:04.079 --> 00:02:06.709 align:start position:0%
me show you how to do that
so<00:02:04.399><c> we</c><00:02:04.719><c> have</c><00:02:04.960><c> a</c><00:02:05.200><c> tree</c><00:02:05.600><c> and</c><00:02:05.759><c> we</c><00:02:06.000><c> want</c><00:02:06.159><c> to</c><00:02:06.320><c> run</c><00:02:06.560><c> a</c>

00:02:06.709 --> 00:02:06.719 align:start position:0%
so we have a tree and we want to run a
 

00:02:06.719 --> 00:02:08.469 align:start position:0%
so we have a tree and we want to run a
pretty<00:02:07.119><c> standard</c><00:02:07.840><c> algorithm</c>

00:02:08.469 --> 00:02:08.479 align:start position:0%
pretty standard algorithm
 

00:02:08.479 --> 00:02:11.110 align:start position:0%
pretty standard algorithm
on<00:02:08.640><c> that</c><00:02:08.879><c> tree</c><00:02:09.200><c> called</c><00:02:09.599><c> breadth</c><00:02:10.000><c> first</c><00:02:10.479><c> search</c>

00:02:11.110 --> 00:02:11.120 align:start position:0%
on that tree called breadth first search
 

00:02:11.120 --> 00:02:12.550 align:start position:0%
on that tree called breadth first search
and<00:02:11.440><c> you</c><00:02:11.680><c> might</c><00:02:11.920><c> know</c><00:02:12.160><c> how</c><00:02:12.319><c> to</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
and you might know how to
 

00:02:12.560 --> 00:02:14.630 align:start position:0%
and you might know how to
already<00:02:12.959><c> implement</c><00:02:13.360><c> this</c><00:02:13.599><c> algorithm</c><00:02:14.319><c> you</c>

00:02:14.630 --> 00:02:14.640 align:start position:0%
already implement this algorithm you
 

00:02:14.640 --> 00:02:15.910 align:start position:0%
already implement this algorithm you
need<00:02:14.959><c> a</c><00:02:15.360><c> q</c>

00:02:15.910 --> 00:02:15.920 align:start position:0%
need a q
 

00:02:15.920 --> 00:02:18.070 align:start position:0%
need a q
data<00:02:16.319><c> structure</c><00:02:17.040><c> because</c><00:02:17.360><c> we're</c><00:02:17.520><c> going</c><00:02:17.599><c> to</c><00:02:17.680><c> be</c>

00:02:18.070 --> 00:02:18.080 align:start position:0%
data structure because we're going to be
 

00:02:18.080 --> 00:02:19.910 align:start position:0%
data structure because we're going to be
inserting<00:02:18.800><c> elements</c>

00:02:19.910 --> 00:02:19.920 align:start position:0%
inserting elements
 

00:02:19.920 --> 00:02:21.750 align:start position:0%
inserting elements
to<00:02:20.080><c> the</c><00:02:20.400><c> right</c><00:02:20.720><c> meaning</c><00:02:20.959><c> we're</c><00:02:21.120><c> gonna</c><00:02:21.599><c> you</c>

00:02:21.750 --> 00:02:21.760 align:start position:0%
to the right meaning we're gonna you
 

00:02:21.760 --> 00:02:23.910 align:start position:0%
to the right meaning we're gonna you
know<00:02:21.920><c> insert</c><00:02:22.239><c> an</c><00:02:22.400><c> element</c><00:02:22.720><c> here</c><00:02:23.040><c> here</c>

00:02:23.910 --> 00:02:23.920 align:start position:0%
know insert an element here here
 

00:02:23.920 --> 00:02:25.990 align:start position:0%
know insert an element here here
here<00:02:24.239><c> right</c><00:02:24.400><c> we're</c><00:02:24.560><c> gonna</c><00:02:24.800><c> be</c><00:02:25.360><c> adding</c>

00:02:25.990 --> 00:02:26.000 align:start position:0%
here right we're gonna be adding
 

00:02:26.000 --> 00:02:28.470 align:start position:0%
here right we're gonna be adding
elements<00:02:26.480><c> to</c><00:02:26.640><c> the</c><00:02:26.959><c> right</c><00:02:27.280><c> portion</c>

00:02:28.470 --> 00:02:28.480 align:start position:0%
elements to the right portion
 

00:02:28.480 --> 00:02:30.550 align:start position:0%
elements to the right portion
and<00:02:28.720><c> we're</c><00:02:28.879><c> gonna</c><00:02:29.040><c> be</c><00:02:29.360><c> popping</c><00:02:29.840><c> elements</c><00:02:30.400><c> from</c>

00:02:30.550 --> 00:02:30.560 align:start position:0%
and we're gonna be popping elements from
 

00:02:30.560 --> 00:02:32.949 align:start position:0%
and we're gonna be popping elements from
the<00:02:30.879><c> left</c><00:02:31.200><c> portion</c><00:02:31.599><c> so</c><00:02:31.840><c> as</c><00:02:32.000><c> soon</c><00:02:32.319><c> as</c><00:02:32.560><c> an</c>

00:02:32.949 --> 00:02:32.959 align:start position:0%
the left portion so as soon as an
 

00:02:32.959 --> 00:02:35.350 align:start position:0%
the left portion so as soon as an
so<00:02:33.120><c> basically</c><00:02:33.680><c> we're</c><00:02:33.920><c> following</c><00:02:34.560><c> first</c><00:02:35.040><c> in</c>

00:02:35.350 --> 00:02:35.360 align:start position:0%
so basically we're following first in
 

00:02:35.360 --> 00:02:37.350 align:start position:0%
so basically we're following first in
first<00:02:35.840><c> out</c><00:02:36.160><c> right</c><00:02:36.319><c> the</c><00:02:36.480><c> first</c><00:02:36.879><c> element</c><00:02:37.200><c> that</c>

00:02:37.350 --> 00:02:37.360 align:start position:0%
first out right the first element that
 

00:02:37.360 --> 00:02:38.550 align:start position:0%
first out right the first element that
gets<00:02:37.680><c> inserted</c>

00:02:38.550 --> 00:02:38.560 align:start position:0%
gets inserted
 

00:02:38.560 --> 00:02:39.830 align:start position:0%
gets inserted
over<00:02:38.800><c> here</c><00:02:39.040><c> is</c><00:02:39.120><c> going</c><00:02:39.200><c> to</c><00:02:39.280><c> be</c><00:02:39.440><c> the</c><00:02:39.519><c> first</c>

00:02:39.830 --> 00:02:39.840 align:start position:0%
over here is going to be the first
 

00:02:39.840 --> 00:02:41.750 align:start position:0%
over here is going to be the first
element<00:02:40.239><c> that</c><00:02:40.400><c> gets</c><00:02:40.640><c> removed</c><00:02:41.360><c> right</c><00:02:41.599><c> so</c>

00:02:41.750 --> 00:02:41.760 align:start position:0%
element that gets removed right so
 

00:02:41.760 --> 00:02:42.790 align:start position:0%
element that gets removed right so
that's<00:02:42.080><c> the</c><00:02:42.239><c> order</c>

00:02:42.790 --> 00:02:42.800 align:start position:0%
that's the order
 

00:02:42.800 --> 00:02:45.509 align:start position:0%
that's the order
we're<00:02:43.040><c> going</c><00:02:43.120><c> to</c><00:02:43.280><c> be</c><00:02:43.760><c> doing</c><00:02:44.080><c> things</c><00:02:44.560><c> in</c><00:02:45.120><c> so</c><00:02:45.360><c> the</c>

00:02:45.509 --> 00:02:45.519 align:start position:0%
we're going to be doing things in so the
 

00:02:45.519 --> 00:02:47.030 align:start position:0%
we're going to be doing things in so the
first<00:02:45.840><c> thing</c><00:02:46.000><c> we're</c><00:02:46.160><c> going</c><00:02:46.319><c> to</c><00:02:46.400><c> do</c><00:02:46.640><c> is</c><00:02:46.800><c> take</c>

00:02:47.030 --> 00:02:47.040 align:start position:0%
first thing we're going to do is take
 

00:02:47.040 --> 00:02:48.070 align:start position:0%
first thing we're going to do is take
the<00:02:47.200><c> first</c><00:02:47.519><c> element</c>

00:02:48.070 --> 00:02:48.080 align:start position:0%
the first element
 

00:02:48.080 --> 00:02:51.350 align:start position:0%
the first element
3<00:02:48.560><c> and</c><00:02:48.720><c> add</c><00:02:48.959><c> it</c><00:02:49.120><c> to</c><00:02:49.440><c> our</c><00:02:49.760><c> queue</c><00:02:50.560><c> this</c><00:02:50.800><c> is</c><00:02:50.879><c> based</c>

00:02:51.350 --> 00:02:51.360 align:start position:0%
3 and add it to our queue this is based
 

00:02:51.360 --> 00:02:53.910 align:start position:0%
3 and add it to our queue this is based
basically<00:02:51.920><c> to</c><00:02:52.239><c> initialize</c><00:02:53.120><c> the</c><00:02:53.360><c> queue</c><00:02:53.680><c> right</c>

00:02:53.910 --> 00:02:53.920 align:start position:0%
basically to initialize the queue right
 

00:02:53.920 --> 00:02:55.110 align:start position:0%
basically to initialize the queue right
and<00:02:54.000><c> we</c><00:02:54.160><c> know</c><00:02:54.319><c> we're</c><00:02:54.560><c> creating</c>

00:02:55.110 --> 00:02:55.120 align:start position:0%
and we know we're creating
 

00:02:55.120 --> 00:02:58.070 align:start position:0%
and we know we're creating
sub<00:02:55.440><c> lists</c><00:02:55.920><c> right</c><00:02:56.160><c> so</c><00:02:56.959><c> what</c><00:02:57.120><c> we're</c><00:02:57.280><c> gonna</c><00:02:57.519><c> do</c>

00:02:58.070 --> 00:02:58.080 align:start position:0%
sub lists right so what we're gonna do
 

00:02:58.080 --> 00:02:58.470 align:start position:0%
sub lists right so what we're gonna do
now

00:02:58.470 --> 00:02:58.480 align:start position:0%
now
 

00:02:58.480 --> 00:03:00.309 align:start position:0%
now
is<00:02:58.640><c> see</c><00:02:58.879><c> that</c><00:02:59.040><c> okay</c><00:02:59.280><c> how</c><00:02:59.599><c> count</c><00:02:59.840><c> how</c><00:03:00.000><c> many</c>

00:03:00.309 --> 00:03:00.319 align:start position:0%
is see that okay how count how many
 

00:03:00.319 --> 00:03:02.309 align:start position:0%
is see that okay how count how many
elements<00:03:00.800><c> are</c><00:03:01.040><c> in</c><00:03:01.200><c> our</c><00:03:01.519><c> queue</c><00:03:01.840><c> initially</c>

00:03:02.309 --> 00:03:02.319 align:start position:0%
elements are in our queue initially
 

00:03:02.319 --> 00:03:02.869 align:start position:0%
elements are in our queue initially
right<00:03:02.480><c> there's</c>

00:03:02.869 --> 00:03:02.879 align:start position:0%
right there's
 

00:03:02.879 --> 00:03:05.270 align:start position:0%
right there's
one<00:03:03.360><c> element</c><00:03:03.840><c> in</c><00:03:04.080><c> our</c><00:03:04.319><c> queue</c><00:03:04.800><c> so</c><00:03:04.959><c> we're</c><00:03:05.200><c> going</c>

00:03:05.270 --> 00:03:05.280 align:start position:0%
one element in our queue so we're going
 

00:03:05.280 --> 00:03:06.149 align:start position:0%
one element in our queue so we're going
to<00:03:05.360><c> basically</c>

00:03:06.149 --> 00:03:06.159 align:start position:0%
to basically
 

00:03:06.159 --> 00:03:08.470 align:start position:0%
to basically
remove<00:03:07.040><c> one</c><00:03:07.360><c> element</c><00:03:07.760><c> from</c><00:03:07.920><c> our</c><00:03:08.080><c> queue</c><00:03:08.319><c> we're</c>

00:03:08.470 --> 00:03:08.480 align:start position:0%
remove one element from our queue we're
 

00:03:08.480 --> 00:03:10.869 align:start position:0%
remove one element from our queue we're
going<00:03:08.560><c> to</c><00:03:08.640><c> see</c><00:03:08.959><c> okay</c><00:03:09.200><c> the</c><00:03:09.440><c> 3</c><00:03:09.920><c> is</c><00:03:10.080><c> in</c><00:03:10.159><c> the</c><00:03:10.319><c> queue</c>

00:03:10.869 --> 00:03:10.879 align:start position:0%
going to see okay the 3 is in the queue
 

00:03:10.879 --> 00:03:13.190 align:start position:0%
going to see okay the 3 is in the queue
now<00:03:11.120><c> let's</c><00:03:11.440><c> get</c><00:03:11.680><c> rid</c><00:03:11.840><c> of</c><00:03:11.920><c> the</c><00:03:12.159><c> 3</c><00:03:12.480><c> and</c><00:03:12.640><c> add</c><00:03:12.879><c> it</c><00:03:12.959><c> to</c>

00:03:13.190 --> 00:03:13.200 align:start position:0%
now let's get rid of the 3 and add it to
 

00:03:13.200 --> 00:03:13.990 align:start position:0%
now let's get rid of the 3 and add it to
a<00:03:13.360><c> sub</c><00:03:13.599><c> list</c>

00:03:13.990 --> 00:03:14.000 align:start position:0%
a sub list
 

00:03:14.000 --> 00:03:16.630 align:start position:0%
a sub list
right<00:03:14.480><c> now</c><00:03:14.720><c> the</c><00:03:14.879><c> queue</c><00:03:15.200><c> is</c><00:03:15.440><c> empty</c><00:03:16.080><c> so</c><00:03:16.239><c> we</c><00:03:16.480><c> know</c>

00:03:16.630 --> 00:03:16.640 align:start position:0%
right now the queue is empty so we know
 

00:03:16.640 --> 00:03:17.270 align:start position:0%
right now the queue is empty so we know
that<00:03:16.879><c> this</c>

00:03:17.270 --> 00:03:17.280 align:start position:0%
that this
 

00:03:17.280 --> 00:03:20.149 align:start position:0%
that this
sub<00:03:17.599><c> list</c><00:03:18.000><c> is</c><00:03:18.239><c> complete</c><00:03:19.040><c> and</c><00:03:19.200><c> what</c><00:03:19.440><c> that</c><00:03:19.760><c> tells</c>

00:03:20.149 --> 00:03:20.159 align:start position:0%
sub list is complete and what that tells
 

00:03:20.159 --> 00:03:21.350 align:start position:0%
sub list is complete and what that tells
us<00:03:20.319><c> is</c><00:03:20.480><c> basically</c><00:03:21.040><c> we</c>

00:03:21.350 --> 00:03:21.360 align:start position:0%
us is basically we
 

00:03:21.360 --> 00:03:24.229 align:start position:0%
us is basically we
we<00:03:21.599><c> went</c><00:03:21.840><c> through</c><00:03:22.080><c> the</c><00:03:22.319><c> entire</c><00:03:23.040><c> first</c><00:03:23.760><c> level</c>

00:03:24.229 --> 00:03:24.239 align:start position:0%
we went through the entire first level
 

00:03:24.239 --> 00:03:24.789 align:start position:0%
we went through the entire first level
right

00:03:24.789 --> 00:03:24.799 align:start position:0%
right
 

00:03:24.799 --> 00:03:25.990 align:start position:0%
right
that's<00:03:25.040><c> what</c><00:03:25.200><c> we're</c><00:03:25.360><c> trying</c><00:03:25.599><c> to</c><00:03:25.680><c> do</c><00:03:25.840><c> we're</c>

00:03:25.990 --> 00:03:26.000 align:start position:0%
that's what we're trying to do we're
 

00:03:26.000 --> 00:03:27.589 align:start position:0%
that's what we're trying to do we're
going<00:03:26.239><c> through</c><00:03:26.560><c> every</c><00:03:26.879><c> level</c><00:03:27.120><c> we</c><00:03:27.280><c> know</c><00:03:27.440><c> that</c>

00:03:27.589 --> 00:03:27.599 align:start position:0%
going through every level we know that
 

00:03:27.599 --> 00:03:29.830 align:start position:0%
going through every level we know that
the<00:03:27.680><c> first</c><00:03:28.080><c> level</c><00:03:28.400><c> only</c><00:03:28.640><c> had</c><00:03:28.959><c> one</c><00:03:29.200><c> element</c><00:03:29.680><c> in</c>

00:03:29.830 --> 00:03:29.840 align:start position:0%
the first level only had one element in
 

00:03:29.840 --> 00:03:30.149 align:start position:0%
the first level only had one element in
it

00:03:30.149 --> 00:03:30.159 align:start position:0%
it
 

00:03:30.159 --> 00:03:33.430 align:start position:0%
it
so<00:03:30.400><c> now</c><00:03:30.560><c> we're</c><00:03:30.879><c> done</c><00:03:31.519><c> but</c><00:03:31.840><c> when</c><00:03:32.080><c> we</c><00:03:32.480><c> pop</c><00:03:33.040><c> that</c>

00:03:33.430 --> 00:03:33.440 align:start position:0%
so now we're done but when we pop that
 

00:03:33.440 --> 00:03:36.630 align:start position:0%
so now we're done but when we pop that
three<00:03:34.239><c> we</c><00:03:34.560><c> need</c><00:03:34.799><c> to</c><00:03:35.120><c> add</c><00:03:35.519><c> its</c><00:03:35.920><c> children</c>

00:03:36.630 --> 00:03:36.640 align:start position:0%
three we need to add its children
 

00:03:36.640 --> 00:03:39.110 align:start position:0%
three we need to add its children
right<00:03:36.879><c> it</c><00:03:37.120><c> has</c><00:03:37.519><c> two</c><00:03:37.840><c> children</c><00:03:38.239><c> it</c><00:03:38.400><c> has</c><00:03:38.560><c> a</c><00:03:38.720><c> child</c>

00:03:39.110 --> 00:03:39.120 align:start position:0%
right it has two children it has a child
 

00:03:39.120 --> 00:03:39.750 align:start position:0%
right it has two children it has a child
nine

00:03:39.750 --> 00:03:39.760 align:start position:0%
nine
 

00:03:39.760 --> 00:03:42.070 align:start position:0%
nine
and<00:03:39.920><c> a</c><00:03:40.080><c> child</c><00:03:40.640><c> twenty</c><00:03:41.200><c> so</c><00:03:41.360><c> we're</c><00:03:41.599><c> gonna</c><00:03:41.840><c> add</c>

00:03:42.070 --> 00:03:42.080 align:start position:0%
and a child twenty so we're gonna add
 

00:03:42.080 --> 00:03:42.949 align:start position:0%
and a child twenty so we're gonna add
those<00:03:42.400><c> children</c>

00:03:42.949 --> 00:03:42.959 align:start position:0%
those children
 

00:03:42.959 --> 00:03:45.910 align:start position:0%
those children
to<00:03:43.280><c> our</c><00:03:43.760><c> cue</c><00:03:44.560><c> and</c><00:03:44.720><c> we're</c><00:03:44.959><c> to</c><00:03:45.040><c> do</c><00:03:45.200><c> it</c><00:03:45.360><c> from</c><00:03:45.680><c> left</c>

00:03:45.910 --> 00:03:45.920 align:start position:0%
to our cue and we're to do it from left
 

00:03:45.920 --> 00:03:47.589 align:start position:0%
to our cue and we're to do it from left
to<00:03:46.159><c> right</c><00:03:46.400><c> because</c><00:03:46.640><c> that's</c><00:03:46.959><c> important</c><00:03:47.440><c> right</c>

00:03:47.589 --> 00:03:47.599 align:start position:0%
to right because that's important right
 

00:03:47.599 --> 00:03:49.270 align:start position:0%
to right because that's important right
we're<00:03:47.840><c> doing</c><00:03:48.000><c> this</c><00:03:48.239><c> from</c><00:03:48.480><c> left</c><00:03:48.720><c> to</c><00:03:48.879><c> right</c><00:03:49.120><c> so</c>

00:03:49.270 --> 00:03:49.280 align:start position:0%
we're doing this from left to right so
 

00:03:49.280 --> 00:03:50.550 align:start position:0%
we're doing this from left to right so
we're<00:03:49.440><c> going</c><00:03:49.519><c> to</c><00:03:49.599><c> add</c><00:03:49.840><c> a</c><00:03:50.000><c> 9</c>

00:03:50.550 --> 00:03:50.560 align:start position:0%
we're going to add a 9
 

00:03:50.560 --> 00:03:52.550 align:start position:0%
we're going to add a 9
then<00:03:50.720><c> we're</c><00:03:50.879><c> going</c><00:03:50.959><c> to</c><00:03:51.120><c> add</c><00:03:51.280><c> a</c><00:03:51.519><c> 20.</c><00:03:52.080><c> okay</c><00:03:52.319><c> so</c>

00:03:52.550 --> 00:03:52.560 align:start position:0%
then we're going to add a 20. okay so
 

00:03:52.560 --> 00:03:54.869 align:start position:0%
then we're going to add a 20. okay so
now<00:03:52.799><c> we</c><00:03:52.959><c> want</c><00:03:53.200><c> to</c><00:03:53.439><c> go</c><00:03:53.680><c> through</c><00:03:53.920><c> the</c><00:03:54.239><c> second</c>

00:03:54.869 --> 00:03:54.879 align:start position:0%
now we want to go through the second
 

00:03:54.879 --> 00:03:56.390 align:start position:0%
now we want to go through the second
level<00:03:55.280><c> of</c><00:03:55.439><c> the</c><00:03:55.599><c> tree</c><00:03:55.920><c> right</c><00:03:56.080><c> so</c><00:03:56.239><c> we're</c><00:03:56.319><c> going</c>

00:03:56.390 --> 00:03:56.400 align:start position:0%
level of the tree right so we're going
 

00:03:56.400 --> 00:03:58.470 align:start position:0%
level of the tree right so we're going
to<00:03:56.480><c> have</c><00:03:56.640><c> a</c><00:03:56.799><c> sub</c><00:03:57.120><c> list</c><00:03:57.519><c> for</c><00:03:57.760><c> the</c><00:03:58.000><c> second</c>

00:03:58.470 --> 00:03:58.480 align:start position:0%
to have a sub list for the second
 

00:03:58.480 --> 00:04:01.670 align:start position:0%
to have a sub list for the second
level<00:03:59.120><c> clearly</c><00:03:59.599><c> we</c><00:03:59.840><c> have</c><00:04:00.319><c> two</c><00:04:01.040><c> elements</c>

00:04:01.670 --> 00:04:01.680 align:start position:0%
level clearly we have two elements
 

00:04:01.680 --> 00:04:03.429 align:start position:0%
level clearly we have two elements
in<00:04:01.840><c> our</c><00:04:02.000><c> queue</c><00:04:02.239><c> so</c><00:04:02.400><c> we're</c><00:04:02.640><c> gonna</c><00:04:02.879><c> basically</c>

00:04:03.429 --> 00:04:03.439 align:start position:0%
in our queue so we're gonna basically
 

00:04:03.439 --> 00:04:04.710 align:start position:0%
in our queue so we're gonna basically
pop<00:04:03.840><c> these</c><00:04:04.239><c> two</c>

00:04:04.710 --> 00:04:04.720 align:start position:0%
pop these two
 

00:04:04.720 --> 00:04:07.429 align:start position:0%
pop these two
elements<00:04:05.519><c> from</c><00:04:05.840><c> our</c><00:04:06.080><c> queue</c><00:04:06.640><c> from</c><00:04:06.959><c> left</c><00:04:07.200><c> to</c>

00:04:07.429 --> 00:04:07.439 align:start position:0%
elements from our queue from left to
 

00:04:07.439 --> 00:04:07.910 align:start position:0%
elements from our queue from left to
right

00:04:07.910 --> 00:04:07.920 align:start position:0%
right
 

00:04:07.920 --> 00:04:11.429 align:start position:0%
right
so<00:04:08.159><c> the</c><00:04:08.400><c> left</c><00:04:08.799><c> is</c><00:04:09.120><c> nine</c><00:04:09.439><c> we're</c><00:04:09.599><c> gonna</c><00:04:10.000><c> pop</c><00:04:10.720><c> nine</c>

00:04:11.429 --> 00:04:11.439 align:start position:0%
so the left is nine we're gonna pop nine
 

00:04:11.439 --> 00:04:14.470 align:start position:0%
so the left is nine we're gonna pop nine
from<00:04:11.599><c> the</c><00:04:11.840><c> queue</c><00:04:12.560><c> add</c><00:04:12.799><c> it</c><00:04:13.120><c> to</c><00:04:13.360><c> the</c><00:04:13.599><c> sub</c><00:04:13.920><c> list</c>

00:04:14.470 --> 00:04:14.480 align:start position:0%
from the queue add it to the sub list
 

00:04:14.480 --> 00:04:17.110 align:start position:0%
from the queue add it to the sub list
so<00:04:14.720><c> nine</c><00:04:15.040><c> is</c><00:04:15.200><c> added</c><00:04:15.439><c> to</c><00:04:15.599><c> the</c><00:04:15.760><c> sub</c><00:04:16.000><c> list</c><00:04:16.639><c> and</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
so nine is added to the sub list and
 

00:04:17.120 --> 00:04:17.909 align:start position:0%
so nine is added to the sub list and
notice<00:04:17.519><c> how</c>

00:04:17.909 --> 00:04:17.919 align:start position:0%
notice how
 

00:04:17.919 --> 00:04:20.949 align:start position:0%
notice how
nine<00:04:18.320><c> did</c><00:04:18.560><c> not</c><00:04:18.880><c> have</c><00:04:19.120><c> any</c><00:04:19.600><c> children</c><00:04:20.400><c> right</c><00:04:20.799><c> so</c>

00:04:20.949 --> 00:04:20.959 align:start position:0%
nine did not have any children right so
 

00:04:20.959 --> 00:04:22.870 align:start position:0%
nine did not have any children right so
we<00:04:21.199><c> don't</c><00:04:21.359><c> have</c><00:04:21.519><c> to</c><00:04:21.680><c> add</c><00:04:22.000><c> any</c><00:04:22.320><c> children</c>

00:04:22.870 --> 00:04:22.880 align:start position:0%
we don't have to add any children
 

00:04:22.880 --> 00:04:26.310 align:start position:0%
we don't have to add any children
for<00:04:23.280><c> nine</c><00:04:23.840><c> into</c><00:04:24.240><c> our</c><00:04:24.479><c> queue</c><00:04:25.040><c> so</c><00:04:25.360><c> next</c><00:04:25.840><c> we</c><00:04:26.000><c> still</c>

00:04:26.310 --> 00:04:26.320 align:start position:0%
for nine into our queue so next we still
 

00:04:26.320 --> 00:04:27.909 align:start position:0%
for nine into our queue so next we still
remember<00:04:26.639><c> we</c><00:04:26.800><c> had</c><00:04:27.040><c> two</c><00:04:27.280><c> elements</c><00:04:27.600><c> we</c><00:04:27.759><c> were</c>

00:04:27.909 --> 00:04:27.919 align:start position:0%
remember we had two elements we were
 

00:04:27.919 --> 00:04:29.670 align:start position:0%
remember we had two elements we were
trying<00:04:28.160><c> to</c><00:04:28.240><c> remove</c><00:04:28.639><c> we</c><00:04:28.800><c> have</c><00:04:28.880><c> two</c><00:04:29.120><c> elements</c><00:04:29.600><c> in</c>

00:04:29.670 --> 00:04:29.680 align:start position:0%
trying to remove we have two elements in
 

00:04:29.680 --> 00:04:30.950 align:start position:0%
trying to remove we have two elements in
this<00:04:29.919><c> level</c><00:04:30.240><c> so</c><00:04:30.479><c> let's</c>

00:04:30.950 --> 00:04:30.960 align:start position:0%
this level so let's
 

00:04:30.960 --> 00:04:34.230 align:start position:0%
this level so let's
now<00:04:31.199><c> pop</c><00:04:31.759><c> 20</c><00:04:32.479><c> so</c><00:04:32.720><c> we</c><00:04:32.880><c> can</c><00:04:33.040><c> add</c><00:04:33.360><c> 20</c><00:04:33.600><c> to</c><00:04:33.840><c> our</c><00:04:34.000><c> sub</c>

00:04:34.230 --> 00:04:34.240 align:start position:0%
now pop 20 so we can add 20 to our sub
 

00:04:34.240 --> 00:04:35.350 align:start position:0%
now pop 20 so we can add 20 to our sub
list<00:04:34.479><c> right</c><00:04:34.720><c> so</c><00:04:34.880><c> now</c>

00:04:35.350 --> 00:04:35.360 align:start position:0%
list right so now
 

00:04:35.360 --> 00:04:37.830 align:start position:0%
list right so now
clearly<00:04:35.840><c> this</c><00:04:36.160><c> level</c><00:04:36.639><c> is</c><00:04:36.800><c> complete</c><00:04:37.280><c> we</c><00:04:37.440><c> added</c>

00:04:37.830 --> 00:04:37.840 align:start position:0%
clearly this level is complete we added
 

00:04:37.840 --> 00:04:40.390 align:start position:0%
clearly this level is complete we added
both<00:04:38.160><c> nodes</c><00:04:38.639><c> in</c><00:04:38.800><c> the</c><00:04:39.040><c> order</c><00:04:39.440><c> 9</c><00:04:39.759><c> and</c><00:04:39.919><c> 20</c>

00:04:40.390 --> 00:04:40.400 align:start position:0%
both nodes in the order 9 and 20
 

00:04:40.400 --> 00:04:43.909 align:start position:0%
both nodes in the order 9 and 20
to<00:04:40.639><c> a</c><00:04:40.800><c> sub</c><00:04:41.040><c> list</c><00:04:41.520><c> but</c><00:04:41.919><c> notice</c><00:04:42.400><c> 20</c><00:04:42.880><c> had</c><00:04:43.199><c> a</c><00:04:43.360><c> couple</c>

00:04:43.909 --> 00:04:43.919 align:start position:0%
to a sub list but notice 20 had a couple
 

00:04:43.919 --> 00:04:46.950 align:start position:0%
to a sub list but notice 20 had a couple
children<00:04:44.479><c> had</c><00:04:44.800><c> 15</c><00:04:45.360><c> and</c><00:04:45.600><c> seven</c><00:04:46.160><c> so</c><00:04:46.560><c> as</c><00:04:46.800><c> we</c>

00:04:46.950 --> 00:04:46.960 align:start position:0%
children had 15 and seven so as we
 

00:04:46.960 --> 00:04:47.670 align:start position:0%
children had 15 and seven so as we
remove

00:04:47.670 --> 00:04:47.680 align:start position:0%
remove
 

00:04:47.680 --> 00:04:50.629 align:start position:0%
remove
20<00:04:48.320><c> from</c><00:04:48.560><c> our</c><00:04:48.800><c> q</c><00:04:49.040><c> we're</c><00:04:49.280><c> adding</c><00:04:49.600><c> its</c><00:04:49.919><c> children</c>

00:04:50.629 --> 00:04:50.639 align:start position:0%
20 from our q we're adding its children
 

00:04:50.639 --> 00:04:51.430 align:start position:0%
20 from our q we're adding its children
to<00:04:50.880><c> the</c><00:04:51.040><c> queue</c>

00:04:51.430 --> 00:04:51.440 align:start position:0%
to the queue
 

00:04:51.440 --> 00:04:53.909 align:start position:0%
to the queue
for<00:04:51.680><c> the</c><00:04:52.000><c> next</c><00:04:52.639><c> level</c><00:04:53.120><c> right</c><00:04:53.360><c> because</c><00:04:53.600><c> we</c><00:04:53.759><c> know</c>

00:04:53.909 --> 00:04:53.919 align:start position:0%
for the next level right because we know
 

00:04:53.919 --> 00:04:54.950 align:start position:0%
for the next level right because we know
we<00:04:54.080><c> want</c><00:04:54.240><c> to</c><00:04:54.400><c> keep</c>

00:04:54.950 --> 00:04:54.960 align:start position:0%
we want to keep
 

00:04:54.960 --> 00:04:58.230 align:start position:0%
we want to keep
going<00:04:55.600><c> down</c><00:04:56.160><c> a</c><00:04:56.400><c> level</c><00:04:56.800><c> so</c><00:04:57.040><c> when</c><00:04:57.199><c> we</c><00:04:57.360><c> get</c><00:04:57.520><c> here</c>

00:04:58.230 --> 00:04:58.240 align:start position:0%
going down a level so when we get here
 

00:04:58.240 --> 00:05:00.550 align:start position:0%
going down a level so when we get here
the<00:04:58.560><c> values</c><00:04:59.120><c> will</c><00:04:59.360><c> already</c><00:04:59.759><c> be</c><00:05:00.000><c> added</c><00:05:00.240><c> to</c><00:05:00.400><c> our</c>

00:05:00.550 --> 00:05:00.560 align:start position:0%
the values will already be added to our
 

00:05:00.560 --> 00:05:01.510 align:start position:0%
the values will already be added to our
queue<00:05:01.199><c> so</c>

00:05:01.510 --> 00:05:01.520 align:start position:0%
queue so
 

00:05:01.520 --> 00:05:04.070 align:start position:0%
queue so
15<00:05:02.000><c> and</c><00:05:02.240><c> 7</c><00:05:02.639><c> are</c><00:05:02.880><c> added</c><00:05:03.199><c> to</c><00:05:03.360><c> our</c><00:05:03.520><c> queue</c><00:05:03.840><c> we're</c>

00:05:04.070 --> 00:05:04.080 align:start position:0%
15 and 7 are added to our queue we're
 

00:05:04.080 --> 00:05:05.909 align:start position:0%
15 and 7 are added to our queue we're
done<00:05:04.320><c> with</c><00:05:04.479><c> the</c><00:05:04.639><c> second</c><00:05:04.960><c> level</c><00:05:05.360><c> now</c><00:05:05.600><c> time</c><00:05:05.840><c> to</c>

00:05:05.909 --> 00:05:05.919 align:start position:0%
done with the second level now time to
 

00:05:05.919 --> 00:05:07.189 align:start position:0%
done with the second level now time to
go<00:05:06.080><c> to</c><00:05:06.160><c> the</c><00:05:06.320><c> third</c><00:05:06.639><c> level</c>

00:05:07.189 --> 00:05:07.199 align:start position:0%
go to the third level
 

00:05:07.199 --> 00:05:10.310 align:start position:0%
go to the third level
we<00:05:07.360><c> see</c><00:05:07.520><c> that</c><00:05:07.680><c> there's</c><00:05:08.080><c> two</c><00:05:08.720><c> nodes</c><00:05:09.520><c> two</c><00:05:09.759><c> values</c>

00:05:10.310 --> 00:05:10.320 align:start position:0%
we see that there's two nodes two values
 

00:05:10.320 --> 00:05:11.110 align:start position:0%
we see that there's two nodes two values
in<00:05:10.479><c> our</c><00:05:10.720><c> queue</c>

00:05:11.110 --> 00:05:11.120 align:start position:0%
in our queue
 

00:05:11.120 --> 00:05:13.350 align:start position:0%
in our queue
so<00:05:11.280><c> we're</c><00:05:11.440><c> gonna</c><00:05:11.600><c> pop</c><00:05:11.919><c> both</c><00:05:12.240><c> of</c><00:05:12.320><c> these</c><00:05:12.560><c> values</c>

00:05:13.350 --> 00:05:13.360 align:start position:0%
so we're gonna pop both of these values
 

00:05:13.360 --> 00:05:14.710 align:start position:0%
so we're gonna pop both of these values
first<00:05:13.680><c> we</c><00:05:13.840><c> pop</c><00:05:14.080><c> 15</c>

00:05:14.710 --> 00:05:14.720 align:start position:0%
first we pop 15
 

00:05:14.720 --> 00:05:17.029 align:start position:0%
first we pop 15
add<00:05:14.960><c> it</c><00:05:15.120><c> to</c><00:05:15.440><c> the</c><00:05:15.759><c> sub</c><00:05:16.000><c> list</c><00:05:16.320><c> for</c><00:05:16.479><c> the</c><00:05:16.720><c> third</c>

00:05:17.029 --> 00:05:17.039 align:start position:0%
add it to the sub list for the third
 

00:05:17.039 --> 00:05:17.749 align:start position:0%
add it to the sub list for the third
level

00:05:17.749 --> 00:05:17.759 align:start position:0%
level
 

00:05:17.759 --> 00:05:20.870 align:start position:0%
level
and<00:05:18.240><c> then</c><00:05:18.479><c> we</c><00:05:18.720><c> pop</c><00:05:19.280><c> seven</c><00:05:20.080><c> add</c><00:05:20.320><c> it</c><00:05:20.400><c> to</c><00:05:20.560><c> the</c><00:05:20.639><c> sub</c>

00:05:20.870 --> 00:05:20.880 align:start position:0%
and then we pop seven add it to the sub
 

00:05:20.880 --> 00:05:22.710 align:start position:0%
and then we pop seven add it to the sub
list<00:05:21.280><c> for</c><00:05:21.520><c> the</c><00:05:21.680><c> third</c><00:05:22.000><c> level</c>

00:05:22.710 --> 00:05:22.720 align:start position:0%
list for the third level
 

00:05:22.720 --> 00:05:24.790 align:start position:0%
list for the third level
neither<00:05:23.039><c> of</c><00:05:23.120><c> these</c><00:05:23.360><c> nodes</c><00:05:23.759><c> had</c><00:05:24.080><c> any</c><00:05:24.320><c> children</c>

00:05:24.790 --> 00:05:24.800 align:start position:0%
neither of these nodes had any children
 

00:05:24.800 --> 00:05:26.870 align:start position:0%
neither of these nodes had any children
so<00:05:25.120><c> now</c><00:05:25.360><c> we're</c><00:05:25.680><c> done</c><00:05:26.000><c> we</c><00:05:26.240><c> know</c><00:05:26.400><c> we're</c><00:05:26.639><c> done</c>

00:05:26.870 --> 00:05:26.880 align:start position:0%
so now we're done we know we're done
 

00:05:26.880 --> 00:05:28.390 align:start position:0%
so now we're done we know we're done
because<00:05:27.199><c> our</c><00:05:27.440><c> queue</c><00:05:27.759><c> is</c><00:05:27.919><c> now</c>

00:05:28.390 --> 00:05:28.400 align:start position:0%
because our queue is now
 

00:05:28.400 --> 00:05:31.110 align:start position:0%
because our queue is now
empty<00:05:28.800><c> right</c><00:05:29.039><c> there's</c><00:05:29.280><c> nothing</c><00:05:30.160><c> left</c><00:05:30.639><c> in</c><00:05:30.880><c> our</c>

00:05:31.110 --> 00:05:31.120 align:start position:0%
empty right there's nothing left in our
 

00:05:31.120 --> 00:05:31.749 align:start position:0%
empty right there's nothing left in our
queue

00:05:31.749 --> 00:05:31.759 align:start position:0%
queue
 

00:05:31.759 --> 00:05:34.550 align:start position:0%
queue
so<00:05:32.000><c> we</c><00:05:32.240><c> created</c><00:05:32.880><c> a</c><00:05:33.120><c> sub</c><00:05:33.360><c> list</c><00:05:33.680><c> for</c><00:05:34.080><c> every</c>

00:05:34.550 --> 00:05:34.560 align:start position:0%
so we created a sub list for every
 

00:05:34.560 --> 00:05:35.110 align:start position:0%
so we created a sub list for every
single

00:05:35.110 --> 00:05:35.120 align:start position:0%
single
 

00:05:35.120 --> 00:05:37.670 align:start position:0%
single
level<00:05:35.759><c> and</c><00:05:36.000><c> as</c><00:05:36.320><c> the</c><00:05:36.720><c> question</c><00:05:37.120><c> wanted</c><00:05:37.440><c> us</c><00:05:37.600><c> to</c>

00:05:37.670 --> 00:05:37.680 align:start position:0%
level and as the question wanted us to
 

00:05:37.680 --> 00:05:38.870 align:start position:0%
level and as the question wanted us to
do<00:05:37.919><c> we're</c><00:05:38.080><c> going</c><00:05:38.160><c> to</c><00:05:38.320><c> package</c>

00:05:38.870 --> 00:05:38.880 align:start position:0%
do we're going to package
 

00:05:38.880 --> 00:05:41.430 align:start position:0%
do we're going to package
all<00:05:39.039><c> three</c><00:05:39.280><c> of</c><00:05:39.360><c> these</c><00:05:39.600><c> sub-lists</c><00:05:40.320><c> into</c><00:05:40.800><c> one</c>

00:05:41.430 --> 00:05:41.440 align:start position:0%
all three of these sub-lists into one
 

00:05:41.440 --> 00:05:43.270 align:start position:0%
all three of these sub-lists into one
list<00:05:41.919><c> and</c><00:05:42.000><c> then</c><00:05:42.240><c> return</c>

00:05:43.270 --> 00:05:43.280 align:start position:0%
list and then return
 

00:05:43.280 --> 00:05:46.230 align:start position:0%
list and then return
that<00:05:43.919><c> as</c><00:05:44.400><c> our</c><00:05:44.720><c> result</c><00:05:45.199><c> so</c><00:05:45.360><c> we're</c><00:05:45.680><c> really</c><00:05:46.000><c> just</c>

00:05:46.230 --> 00:05:46.240 align:start position:0%
that as our result so we're really just
 

00:05:46.240 --> 00:05:48.230 align:start position:0%
that as our result so we're really just
doing<00:05:46.479><c> a</c><00:05:46.560><c> breadth</c><00:05:46.880><c> first</c><00:05:47.120><c> search</c><00:05:47.520><c> algorithm</c>

00:05:48.230 --> 00:05:48.240 align:start position:0%
doing a breadth first search algorithm
 

00:05:48.240 --> 00:05:51.189 align:start position:0%
doing a breadth first search algorithm
with<00:05:48.479><c> a</c><00:05:48.639><c> queue</c><00:05:49.280><c> on</c><00:05:49.520><c> this</c><00:05:49.759><c> binary</c><00:05:50.320><c> search</c><00:05:50.720><c> tree</c>

00:05:51.189 --> 00:05:51.199 align:start position:0%
with a queue on this binary search tree
 

00:05:51.199 --> 00:05:53.029 align:start position:0%
with a queue on this binary search tree
and<00:05:51.440><c> since</c><00:05:51.680><c> we're</c><00:05:51.919><c> doing</c><00:05:52.160><c> it</c><00:05:52.320><c> like</c><00:05:52.639><c> that</c>

00:05:53.029 --> 00:05:53.039 align:start position:0%
and since we're doing it like that
 

00:05:53.039 --> 00:05:54.790 align:start position:0%
and since we're doing it like that
the<00:05:53.280><c> time</c><00:05:53.520><c> complexity</c><00:05:54.000><c> is</c><00:05:54.160><c> going</c><00:05:54.240><c> to</c><00:05:54.320><c> be</c><00:05:54.479><c> o</c><00:05:54.639><c> of</c>

00:05:54.790 --> 00:05:54.800 align:start position:0%
the time complexity is going to be o of
 

00:05:54.800 --> 00:05:57.029 align:start position:0%
the time complexity is going to be o of
n<00:05:55.039><c> we're</c><00:05:55.280><c> only</c><00:05:55.520><c> visiting</c><00:05:56.000><c> every</c><00:05:56.319><c> single</c><00:05:56.720><c> node</c>

00:05:57.029 --> 00:05:57.039 align:start position:0%
n we're only visiting every single node
 

00:05:57.039 --> 00:05:58.710 align:start position:0%
n we're only visiting every single node
a<00:05:57.280><c> single</c><00:05:57.840><c> time</c>

00:05:58.710 --> 00:05:58.720 align:start position:0%
a single time
 

00:05:58.720 --> 00:06:01.830 align:start position:0%
a single time
the<00:05:59.280><c> memory</c><00:05:59.680><c> complexity</c><00:06:00.479><c> is</c><00:06:00.880><c> also</c><00:06:01.440><c> o</c>

00:06:01.830 --> 00:06:01.840 align:start position:0%
the memory complexity is also o
 

00:06:01.840 --> 00:06:05.670 align:start position:0%
the memory complexity is also o
of<00:06:02.160><c> n</c><00:06:02.639><c> because</c><00:06:03.120><c> our</c><00:06:03.520><c> q</c><00:06:04.160><c> at</c><00:06:04.479><c> any</c><00:06:04.800><c> given</c><00:06:05.280><c> point</c><00:06:05.520><c> in</c>

00:06:05.670 --> 00:06:05.680 align:start position:0%
of n because our q at any given point in
 

00:06:05.680 --> 00:06:05.990 align:start position:0%
of n because our q at any given point in
time

00:06:05.990 --> 00:06:06.000 align:start position:0%
time
 

00:06:06.000 --> 00:06:09.909 align:start position:0%
time
our<00:06:06.319><c> q</c><00:06:06.639><c> could</c><00:06:06.880><c> have</c><00:06:07.440><c> up</c><00:06:07.759><c> to</c><00:06:08.479><c> n</c><00:06:08.720><c> divided</c><00:06:09.280><c> by</c><00:06:09.520><c> two</c>

00:06:09.909 --> 00:06:09.919 align:start position:0%
our q could have up to n divided by two
 

00:06:09.919 --> 00:06:12.870 align:start position:0%
our q could have up to n divided by two
elements<00:06:10.400><c> in</c><00:06:10.560><c> it</c><00:06:10.720><c> because</c><00:06:11.280><c> the</c><00:06:11.600><c> biggest</c><00:06:12.400><c> level</c>

00:06:12.870 --> 00:06:12.880 align:start position:0%
elements in it because the biggest level
 

00:06:12.880 --> 00:06:13.990 align:start position:0%
elements in it because the biggest level
of<00:06:13.039><c> a</c><00:06:13.199><c> tree</c>

00:06:13.990 --> 00:06:14.000 align:start position:0%
of a tree
 

00:06:14.000 --> 00:06:16.710 align:start position:0%
of a tree
could<00:06:14.240><c> be</c><00:06:14.960><c> n</c><00:06:15.360><c> divided</c><00:06:15.759><c> by</c><00:06:16.000><c> two</c><00:06:16.240><c> that's</c><00:06:16.479><c> how</c>

00:06:16.710 --> 00:06:16.720 align:start position:0%
could be n divided by two that's how
 

00:06:16.720 --> 00:06:17.510 align:start position:0%
could be n divided by two that's how
trees<00:06:17.120><c> work</c>

00:06:17.510 --> 00:06:17.520 align:start position:0%
trees work
 

00:06:17.520 --> 00:06:20.390 align:start position:0%
trees work
binary<00:06:18.000><c> trees</c><00:06:18.319><c> at</c><00:06:18.479><c> least</c><00:06:19.280><c> and</c><00:06:19.440><c> so</c><00:06:20.000><c> we</c><00:06:20.160><c> know</c>

00:06:20.390 --> 00:06:20.400 align:start position:0%
binary trees at least and so we know
 

00:06:20.400 --> 00:06:20.950 align:start position:0%
binary trees at least and so we know
that<00:06:20.720><c> n</c>

00:06:20.950 --> 00:06:20.960 align:start position:0%
that n
 

00:06:20.960 --> 00:06:24.309 align:start position:0%
that n
divided<00:06:21.360><c> by</c><00:06:21.520><c> 2</c><00:06:21.840><c> can</c><00:06:22.000><c> be</c><00:06:22.240><c> rounded</c><00:06:22.800><c> to</c><00:06:23.520><c> big</c><00:06:23.840><c> o</c><00:06:24.080><c> of</c>

00:06:24.309 --> 00:06:24.319 align:start position:0%
divided by 2 can be rounded to big o of
 

00:06:24.319 --> 00:06:25.909 align:start position:0%
divided by 2 can be rounded to big o of
n<00:06:24.560><c> so</c><00:06:24.720><c> the</c><00:06:24.880><c> memory</c><00:06:25.199><c> complexity</c>

00:06:25.909 --> 00:06:25.919 align:start position:0%
n so the memory complexity
 

00:06:25.919 --> 00:06:28.390 align:start position:0%
n so the memory complexity
is<00:06:26.160><c> big</c><00:06:26.400><c> o</c><00:06:26.560><c> of</c><00:06:26.720><c> n</c><00:06:26.960><c> with</c><00:06:27.280><c> breadth</c><00:06:27.919><c> with</c><00:06:28.160><c> breadth</c>

00:06:28.390 --> 00:06:28.400 align:start position:0%
is big o of n with breadth with breadth
 

00:06:28.400 --> 00:06:29.270 align:start position:0%
is big o of n with breadth with breadth
first<00:06:28.720><c> search</c>

00:06:29.270 --> 00:06:29.280 align:start position:0%
first search
 

00:06:29.280 --> 00:06:31.350 align:start position:0%
first search
so<00:06:29.440><c> with</c><00:06:29.600><c> that</c><00:06:29.840><c> being</c><00:06:30.080><c> said</c><00:06:30.319><c> let's</c><00:06:30.720><c> jump</c><00:06:31.039><c> into</c>

00:06:31.350 --> 00:06:31.360 align:start position:0%
so with that being said let's jump into
 

00:06:31.360 --> 00:06:32.629 align:start position:0%
so with that being said let's jump into
the<00:06:31.600><c> code</c>

00:06:32.629 --> 00:06:32.639 align:start position:0%
the code
 

00:06:32.639 --> 00:06:35.350 align:start position:0%
the code
so<00:06:32.960><c> first</c><00:06:33.360><c> let's</c><00:06:33.680><c> initialize</c><00:06:34.479><c> an</c><00:06:34.639><c> array</c><00:06:35.120><c> for</c>

00:06:35.350 --> 00:06:35.360 align:start position:0%
so first let's initialize an array for
 

00:06:35.360 --> 00:06:36.469 align:start position:0%
so first let's initialize an array for
the<00:06:35.600><c> result</c>

00:06:36.469 --> 00:06:36.479 align:start position:0%
the result
 

00:06:36.479 --> 00:06:39.350 align:start position:0%
the result
and<00:06:36.720><c> we</c><00:06:36.960><c> also</c><00:06:37.280><c> remember</c><00:06:37.759><c> want</c><00:06:38.000><c> to</c><00:06:38.240><c> have</c><00:06:38.479><c> a</c><00:06:38.639><c> q</c><00:06:39.039><c> so</c>

00:06:39.350 --> 00:06:39.360 align:start position:0%
and we also remember want to have a q so
 

00:06:39.360 --> 00:06:40.070 align:start position:0%
and we also remember want to have a q so
in<00:06:39.520><c> python</c>

00:06:40.070 --> 00:06:40.080 align:start position:0%
in python
 

00:06:40.080 --> 00:06:43.590 align:start position:0%
in python
we<00:06:40.160><c> can</c><00:06:40.319><c> do</c><00:06:40.479><c> that</c><00:06:40.720><c> with</c><00:06:41.039><c> collections</c><00:06:42.240><c> dot</c><00:06:42.639><c> deck</c>

00:06:43.590 --> 00:06:43.600 align:start position:0%
we can do that with collections dot deck
 

00:06:43.600 --> 00:06:46.070 align:start position:0%
we can do that with collections dot deck
this<00:06:43.840><c> will</c><00:06:44.080><c> give</c><00:06:44.240><c> us</c><00:06:44.479><c> a</c><00:06:44.639><c> q</c><00:06:45.120><c> and</c><00:06:45.520><c> the</c><00:06:45.680><c> first</c>

00:06:46.070 --> 00:06:46.080 align:start position:0%
this will give us a q and the first
 

00:06:46.080 --> 00:06:47.990 align:start position:0%
this will give us a q and the first
value<00:06:46.479><c> we</c><00:06:46.639><c> want</c><00:06:46.800><c> to</c><00:06:46.960><c> initialize</c><00:06:47.520><c> this</c><00:06:47.680><c> q</c>

00:06:47.990 --> 00:06:48.000 align:start position:0%
value we want to initialize this q
 

00:06:48.000 --> 00:06:50.550 align:start position:0%
value we want to initialize this q
with<00:06:48.400><c> is</c><00:06:48.560><c> the</c><00:06:48.960><c> root</c><00:06:49.280><c> node</c><00:06:49.599><c> that</c><00:06:49.759><c> we're</c><00:06:50.000><c> given</c>

00:06:50.550 --> 00:06:50.560 align:start position:0%
with is the root node that we're given
 

00:06:50.560 --> 00:06:52.629 align:start position:0%
with is the root node that we're given
so<00:06:50.720><c> with</c><00:06:50.960><c> that</c><00:06:51.280><c> we</c><00:06:51.440><c> can</c><00:06:51.759><c> start</c><00:06:52.160><c> running</c><00:06:52.479><c> the</c>

00:06:52.629 --> 00:06:52.639 align:start position:0%
so with that we can start running the
 

00:06:52.639 --> 00:06:54.230 align:start position:0%
so with that we can start running the
breadth<00:06:52.960><c> first</c><00:06:53.280><c> search</c><00:06:53.680><c> and</c><00:06:53.840><c> we're</c><00:06:54.000><c> going</c><00:06:54.080><c> to</c>

00:06:54.230 --> 00:06:54.240 align:start position:0%
breadth first search and we're going to
 

00:06:54.240 --> 00:06:55.430 align:start position:0%
breadth first search and we're going to
run<00:06:54.479><c> breadth</c><00:06:54.720><c> first</c><00:06:54.960><c> search</c>

00:06:55.430 --> 00:06:55.440 align:start position:0%
run breadth first search
 

00:06:55.440 --> 00:06:58.309 align:start position:0%
run breadth first search
while<00:06:55.840><c> our</c><00:06:56.160><c> queue</c><00:06:56.560><c> is</c><00:06:56.720><c> non-empty</c><00:06:57.360><c> remember</c>

00:06:58.309 --> 00:06:58.319 align:start position:0%
while our queue is non-empty remember
 

00:06:58.319 --> 00:06:59.670 align:start position:0%
while our queue is non-empty remember
and<00:06:58.560><c> since</c><00:06:58.880><c> the</c><00:06:58.960><c> queue</c><00:06:59.280><c> is</c><00:06:59.360><c> not</c>

00:06:59.670 --> 00:06:59.680 align:start position:0%
and since the queue is not
 

00:06:59.680 --> 00:07:01.350 align:start position:0%
and since the queue is not
empty<00:06:59.919><c> we're</c><00:07:00.080><c> going</c><00:07:00.160><c> to</c><00:07:00.240><c> get</c><00:07:00.400><c> the</c><00:07:00.800><c> length</c><00:07:01.280><c> of</c>

00:07:01.350 --> 00:07:01.360 align:start position:0%
empty we're going to get the length of
 

00:07:01.360 --> 00:07:02.870 align:start position:0%
empty we're going to get the length of
the<00:07:01.599><c> cube</c><00:07:01.919><c> right</c><00:07:02.080><c> so</c><00:07:02.240><c> we're</c><00:07:02.319><c> going</c><00:07:02.400><c> to</c><00:07:02.479><c> get</c><00:07:02.639><c> the</c>

00:07:02.870 --> 00:07:02.880 align:start position:0%
the cube right so we're going to get the
 

00:07:02.880 --> 00:07:03.990 align:start position:0%
the cube right so we're going to get the
number<00:07:03.280><c> of</c>

00:07:03.990 --> 00:07:04.000 align:start position:0%
number of
 

00:07:04.000 --> 00:07:07.110 align:start position:0%
number of
nodes<00:07:04.639><c> or</c><00:07:04.880><c> values</c><00:07:05.360><c> that</c><00:07:05.599><c> are</c><00:07:05.840><c> in</c><00:07:06.319><c> this</c><00:07:06.639><c> queue</c>

00:07:07.110 --> 00:07:07.120 align:start position:0%
nodes or values that are in this queue
 

00:07:07.120 --> 00:07:08.710 align:start position:0%
nodes or values that are in this queue
currently<00:07:07.680><c> and</c><00:07:07.759><c> we're</c><00:07:07.919><c> going</c><00:07:08.000><c> to</c><00:07:08.240><c> go</c><00:07:08.560><c> we're</c>

00:07:08.710 --> 00:07:08.720 align:start position:0%
currently and we're going to go we're
 

00:07:08.720 --> 00:07:10.150 align:start position:0%
currently and we're going to go we're
going<00:07:08.880><c> to</c><00:07:09.120><c> loop</c><00:07:09.680><c> through</c>

00:07:10.150 --> 00:07:10.160 align:start position:0%
going to loop through
 

00:07:10.160 --> 00:07:12.550 align:start position:0%
going to loop through
every<00:07:10.400><c> single</c><00:07:10.800><c> one</c><00:07:10.960><c> of</c><00:07:11.120><c> those</c><00:07:11.360><c> values</c><00:07:12.000><c> this</c><00:07:12.319><c> q</c>

00:07:12.550 --> 00:07:12.560 align:start position:0%
every single one of those values this q
 

00:07:12.560 --> 00:07:14.629 align:start position:0%
every single one of those values this q
length<00:07:12.880><c> is</c><00:07:12.960><c> basically</c><00:07:13.440><c> ensuring</c><00:07:13.919><c> that</c><00:07:14.080><c> we</c><00:07:14.319><c> we</c>

00:07:14.629 --> 00:07:14.639 align:start position:0%
length is basically ensuring that we we
 

00:07:14.639 --> 00:07:15.670 align:start position:0%
length is basically ensuring that we we
iterate<00:07:15.120><c> through</c>

00:07:15.670 --> 00:07:15.680 align:start position:0%
iterate through
 

00:07:15.680 --> 00:07:18.309 align:start position:0%
iterate through
one<00:07:16.319><c> level</c><00:07:16.720><c> at</c><00:07:16.880><c> a</c><00:07:17.039><c> time</c><00:07:17.360><c> we're</c><00:07:17.520><c> going</c><00:07:17.759><c> through</c>

00:07:18.309 --> 00:07:18.319 align:start position:0%
one level at a time we're going through
 

00:07:18.319 --> 00:07:18.950 align:start position:0%
one level at a time we're going through
one

00:07:18.950 --> 00:07:18.960 align:start position:0%
one
 

00:07:18.960 --> 00:07:21.909 align:start position:0%
one
level<00:07:19.360><c> at</c><00:07:19.520><c> a</c><00:07:19.680><c> time</c><00:07:20.560><c> and</c><00:07:20.960><c> with</c><00:07:21.199><c> those</c><00:07:21.520><c> nodes</c>

00:07:21.909 --> 00:07:21.919 align:start position:0%
level at a time and with those nodes
 

00:07:21.919 --> 00:07:23.589 align:start position:0%
level at a time and with those nodes
from<00:07:22.160><c> that</c><00:07:22.479><c> level</c><00:07:22.720><c> we're</c><00:07:22.880><c> going</c><00:07:22.960><c> to</c><00:07:23.039><c> be</c><00:07:23.280><c> adding</c>

00:07:23.589 --> 00:07:23.599 align:start position:0%
from that level we're going to be adding
 

00:07:23.599 --> 00:07:24.950 align:start position:0%
from that level we're going to be adding
them<00:07:23.759><c> to</c><00:07:24.080><c> its</c><00:07:24.400><c> own</c>

00:07:24.950 --> 00:07:24.960 align:start position:0%
them to its own
 

00:07:24.960 --> 00:07:26.550 align:start position:0%
them to its own
list<00:07:25.360><c> right</c><00:07:25.599><c> and</c><00:07:25.680><c> then</c><00:07:25.840><c> we're</c><00:07:26.000><c> going</c><00:07:26.080><c> to</c><00:07:26.240><c> add</c>

00:07:26.550 --> 00:07:26.560 align:start position:0%
list right and then we're going to add
 

00:07:26.560 --> 00:07:28.390 align:start position:0%
list right and then we're going to add
that<00:07:26.880><c> list</c><00:07:27.360><c> to</c><00:07:27.520><c> the</c><00:07:27.759><c> result</c>

00:07:28.390 --> 00:07:28.400 align:start position:0%
that list to the result
 

00:07:28.400 --> 00:07:31.510 align:start position:0%
that list to the result
list<00:07:29.039><c> so</c><00:07:29.199><c> i'm</c><00:07:29.360><c> going</c><00:07:29.440><c> to</c><00:07:29.599><c> loop</c><00:07:30.240><c> through</c><00:07:30.720><c> every</c>

00:07:31.510 --> 00:07:31.520 align:start position:0%
list so i'm going to loop through every
 

00:07:31.520 --> 00:07:34.950 align:start position:0%
list so i'm going to loop through every
value<00:07:32.400><c> in</c><00:07:32.880><c> this</c><00:07:33.440><c> queue</c><00:07:34.000><c> currently</c><00:07:34.479><c> so</c><00:07:34.639><c> for</c>

00:07:34.950 --> 00:07:34.960 align:start position:0%
value in this queue currently so for
 

00:07:34.960 --> 00:07:38.309 align:start position:0%
value in this queue currently so for
q<00:07:35.360><c> length</c><00:07:36.000><c> i'm</c><00:07:36.160><c> going</c><00:07:36.319><c> to</c><00:07:36.479><c> pop</c><00:07:37.039><c> nodes</c><00:07:37.599><c> from</c><00:07:37.919><c> the</c>

00:07:38.309 --> 00:07:38.319 align:start position:0%
q length i'm going to pop nodes from the
 

00:07:38.319 --> 00:07:38.710 align:start position:0%
q length i'm going to pop nodes from the
left

00:07:38.710 --> 00:07:38.720 align:start position:0%
left
 

00:07:38.720 --> 00:07:41.749 align:start position:0%
left
of<00:07:38.880><c> the</c><00:07:39.039><c> queue</c><00:07:39.440><c> right</c><00:07:39.759><c> first</c><00:07:40.240><c> in</c><00:07:40.560><c> first</c><00:07:41.039><c> out</c>

00:07:41.749 --> 00:07:41.759 align:start position:0%
of the queue right first in first out
 

00:07:41.759 --> 00:07:43.510 align:start position:0%
of the queue right first in first out
and<00:07:42.000><c> it's</c><00:07:42.240><c> technically</c><00:07:42.720><c> possible</c><00:07:43.120><c> that</c><00:07:43.280><c> the</c>

00:07:43.510 --> 00:07:43.520 align:start position:0%
and it's technically possible that the
 

00:07:43.520 --> 00:07:44.950 align:start position:0%
and it's technically possible that the
node<00:07:43.919><c> could</c><00:07:44.160><c> be</c><00:07:44.560><c> null</c>

00:07:44.950 --> 00:07:44.960 align:start position:0%
node could be null
 

00:07:44.960 --> 00:07:47.110 align:start position:0%
node could be null
so<00:07:45.199><c> i'm</c><00:07:45.360><c> going</c><00:07:45.440><c> to</c><00:07:45.520><c> have</c><00:07:45.840><c> a</c><00:07:46.400><c> check</c><00:07:46.800><c> to</c><00:07:46.960><c> make</c>

00:07:47.110 --> 00:07:47.120 align:start position:0%
so i'm going to have a check to make
 

00:07:47.120 --> 00:07:48.150 align:start position:0%
so i'm going to have a check to make
sure<00:07:47.280><c> it's</c><00:07:47.520><c> not</c><00:07:47.680><c> null</c>

00:07:48.150 --> 00:07:48.160 align:start position:0%
sure it's not null
 

00:07:48.160 --> 00:07:50.950 align:start position:0%
sure it's not null
then<00:07:48.400><c> we're</c><00:07:48.560><c> going</c><00:07:48.639><c> to</c><00:07:48.800><c> take</c><00:07:49.039><c> the</c><00:07:49.360><c> node</c><00:07:50.160><c> value</c>

00:07:50.950 --> 00:07:50.960 align:start position:0%
then we're going to take the node value
 

00:07:50.960 --> 00:07:51.270 align:start position:0%
then we're going to take the node value
and

00:07:51.270 --> 00:07:51.280 align:start position:0%
and
 

00:07:51.280 --> 00:07:54.309 align:start position:0%
and
append<00:07:51.759><c> it</c><00:07:52.000><c> to</c><00:07:52.240><c> the</c><00:07:52.560><c> list</c><00:07:53.360><c> level</c>

00:07:54.309 --> 00:07:54.319 align:start position:0%
append it to the list level
 

00:07:54.319 --> 00:07:56.869 align:start position:0%
append it to the list level
and<00:07:54.960><c> and</c><00:07:55.120><c> don't</c><00:07:55.360><c> forget</c><00:07:55.680><c> this</c><00:07:56.240><c> is</c><00:07:56.479><c> also</c>

00:07:56.869 --> 00:07:56.879 align:start position:0%
and and don't forget this is also
 

00:07:56.879 --> 00:07:58.790 align:start position:0%
and and don't forget this is also
important<00:07:57.440><c> that</c><00:07:57.840><c> to</c><00:07:58.080><c> our</c><00:07:58.400><c> queue</c>

00:07:58.790 --> 00:07:58.800 align:start position:0%
important that to our queue
 

00:07:58.800 --> 00:08:01.510 align:start position:0%
important that to our queue
we<00:07:58.960><c> make</c><00:07:59.199><c> sure</c><00:07:59.440><c> to</c><00:07:59.759><c> add</c><00:08:00.080><c> the</c><00:08:00.400><c> children</c><00:08:01.039><c> of</c><00:08:01.199><c> this</c>

00:08:01.510 --> 00:08:01.520 align:start position:0%
we make sure to add the children of this
 

00:08:01.520 --> 00:08:03.350 align:start position:0%
we make sure to add the children of this
node<00:08:01.759><c> so</c><00:08:01.960><c> node.left</c>

00:08:03.350 --> 00:08:03.360 align:start position:0%
node so node.left
 

00:08:03.360 --> 00:08:06.469 align:start position:0%
node so node.left
and<00:08:04.039><c> node.right</c><00:08:05.440><c> technically</c><00:08:05.919><c> these</c><00:08:06.160><c> could</c>

00:08:06.469 --> 00:08:06.479 align:start position:0%
and node.right technically these could
 

00:08:06.479 --> 00:08:06.790 align:start position:0%
and node.right technically these could
be

00:08:06.790 --> 00:08:06.800 align:start position:0%
be
 

00:08:06.800 --> 00:08:09.029 align:start position:0%
be
null<00:08:07.440><c> but</c><00:08:07.680><c> that's</c><00:08:08.000><c> why</c><00:08:08.160><c> we</c><00:08:08.319><c> have</c><00:08:08.479><c> this</c><00:08:08.800><c> if</c>

00:08:09.029 --> 00:08:09.039 align:start position:0%
null but that's why we have this if
 

00:08:09.039 --> 00:08:09.990 align:start position:0%
null but that's why we have this if
statement

00:08:09.990 --> 00:08:10.000 align:start position:0%
statement
 

00:08:10.000 --> 00:08:11.830 align:start position:0%
statement
so<00:08:10.160><c> then</c><00:08:10.400><c> when</c><00:08:10.560><c> the</c><00:08:10.720><c> next</c><00:08:11.039><c> loop</c><00:08:11.280><c> comes</c><00:08:11.520><c> around</c>

00:08:11.830 --> 00:08:11.840 align:start position:0%
so then when the next loop comes around
 

00:08:11.840 --> 00:08:13.430 align:start position:0%
so then when the next loop comes around
right<00:08:12.000><c> we</c><00:08:12.160><c> come</c><00:08:12.319><c> around</c><00:08:12.720><c> to</c><00:08:12.960><c> the</c><00:08:13.120><c> next</c>

00:08:13.430 --> 00:08:13.440 align:start position:0%
right we come around to the next
 

00:08:13.440 --> 00:08:14.550 align:start position:0%
right we come around to the next
iteration

00:08:14.550 --> 00:08:14.560 align:start position:0%
iteration
 

00:08:14.560 --> 00:08:16.629 align:start position:0%
iteration
of<00:08:14.720><c> the</c><00:08:14.879><c> while</c><00:08:15.199><c> loop</c><00:08:15.840><c> it'll</c><00:08:16.080><c> make</c><00:08:16.240><c> sure</c><00:08:16.479><c> to</c>

00:08:16.629 --> 00:08:16.639 align:start position:0%
of the while loop it'll make sure to
 

00:08:16.639 --> 00:08:18.550 align:start position:0%
of the while loop it'll make sure to
check<00:08:17.120><c> that</c><00:08:17.360><c> these</c><00:08:17.599><c> nodes</c><00:08:17.919><c> are</c><00:08:18.080><c> non-null</c>

00:08:18.550 --> 00:08:18.560 align:start position:0%
check that these nodes are non-null
 

00:08:18.560 --> 00:08:20.469 align:start position:0%
check that these nodes are non-null
before<00:08:19.039><c> adding</c><00:08:19.440><c> them</c><00:08:19.599><c> to</c><00:08:19.840><c> its</c><00:08:20.080><c> own</c>

00:08:20.469 --> 00:08:20.479 align:start position:0%
before adding them to its own
 

00:08:20.479 --> 00:08:23.270 align:start position:0%
before adding them to its own
level<00:08:20.960><c> list</c><00:08:21.599><c> okay</c><00:08:21.840><c> so</c><00:08:22.080><c> now</c><00:08:22.319><c> we</c><00:08:22.479><c> have</c><00:08:22.639><c> the</c><00:08:22.879><c> loop</c>

00:08:23.270 --> 00:08:23.280 align:start position:0%
level list okay so now we have the loop
 

00:08:23.280 --> 00:08:24.790 align:start position:0%
level list okay so now we have the loop
in<00:08:23.520><c> place</c><00:08:23.759><c> that's</c><00:08:24.000><c> going</c><00:08:24.080><c> to</c><00:08:24.240><c> iterate</c><00:08:24.560><c> through</c>

00:08:24.790 --> 00:08:24.800 align:start position:0%
in place that's going to iterate through
 

00:08:24.800 --> 00:08:26.710 align:start position:0%
in place that's going to iterate through
every<00:08:25.120><c> node</c><00:08:25.520><c> of</c><00:08:25.919><c> a</c><00:08:26.160><c> single</c>

00:08:26.710 --> 00:08:26.720 align:start position:0%
every node of a single
 

00:08:26.720 --> 00:08:29.670 align:start position:0%
every node of a single
level<00:08:27.360><c> after</c><00:08:27.759><c> we've</c><00:08:28.080><c> done</c><00:08:28.319><c> that</c><00:08:28.639><c> entire</c><00:08:29.360><c> level</c>

00:08:29.670 --> 00:08:29.680 align:start position:0%
level after we've done that entire level
 

00:08:29.680 --> 00:08:30.469 align:start position:0%
level after we've done that entire level
what<00:08:29.840><c> we're</c><00:08:30.000><c> going</c><00:08:30.080><c> to</c><00:08:30.160><c> do</c>

00:08:30.469 --> 00:08:30.479 align:start position:0%
what we're going to do
 

00:08:30.479 --> 00:08:33.029 align:start position:0%
what we're going to do
is<00:08:31.039><c> take</c><00:08:31.360><c> our</c><00:08:31.520><c> result</c><00:08:32.000><c> and</c><00:08:32.080><c> make</c><00:08:32.240><c> sure</c><00:08:32.479><c> we</c><00:08:32.640><c> add</c>

00:08:33.029 --> 00:08:33.039 align:start position:0%
is take our result and make sure we add
 

00:08:33.039 --> 00:08:34.389 align:start position:0%
is take our result and make sure we add
every<00:08:33.279><c> single</c><00:08:33.760><c> level</c>

00:08:34.389 --> 00:08:34.399 align:start position:0%
every single level
 

00:08:34.399 --> 00:08:36.230 align:start position:0%
every single level
to<00:08:34.640><c> that</c><00:08:34.880><c> result</c><00:08:35.360><c> right</c><00:08:35.839><c> and</c><00:08:35.919><c> then</c><00:08:36.080><c> we're</c>

00:08:36.230 --> 00:08:36.240 align:start position:0%
to that result right and then we're
 

00:08:36.240 --> 00:08:37.589 align:start position:0%
to that result right and then we're
going<00:08:36.320><c> to</c><00:08:36.479><c> keep</c><00:08:36.880><c> running</c>

00:08:37.589 --> 00:08:37.599 align:start position:0%
going to keep running
 

00:08:37.599 --> 00:08:40.230 align:start position:0%
going to keep running
this<00:08:38.080><c> outside</c><00:08:38.800><c> while</c><00:08:39.120><c> loop</c><00:08:39.360><c> the</c><00:08:39.599><c> outer</c><00:08:39.919><c> while</c>

00:08:40.230 --> 00:08:40.240 align:start position:0%
this outside while loop the outer while
 

00:08:40.240 --> 00:08:40.870 align:start position:0%
this outside while loop the outer while
loop

00:08:40.870 --> 00:08:40.880 align:start position:0%
loop
 

00:08:40.880 --> 00:08:44.310 align:start position:0%
loop
until<00:08:41.680><c> there</c><00:08:42.000><c> are</c><00:08:42.320><c> no</c><00:08:42.959><c> nodes</c><00:08:43.760><c> left</c>

00:08:44.310 --> 00:08:44.320 align:start position:0%
until there are no nodes left
 

00:08:44.320 --> 00:08:46.389 align:start position:0%
until there are no nodes left
in<00:08:44.640><c> our</c><00:08:44.880><c> queue</c><00:08:45.440><c> that's</c><00:08:45.760><c> how</c><00:08:45.839><c> we</c><00:08:46.000><c> know</c><00:08:46.240><c> we've</c>

00:08:46.389 --> 00:08:46.399 align:start position:0%
in our queue that's how we know we've
 

00:08:46.399 --> 00:08:48.310 align:start position:0%
in our queue that's how we know we've
gone<00:08:46.640><c> through</c><00:08:46.959><c> every</c><00:08:47.279><c> single</c><00:08:47.760><c> level</c>

00:08:48.310 --> 00:08:48.320 align:start position:0%
gone through every single level
 

00:08:48.320 --> 00:08:50.230 align:start position:0%
gone through every single level
added<00:08:48.720><c> it</c><00:08:48.800><c> to</c><00:08:48.880><c> the</c><00:08:49.040><c> result</c><00:08:49.600><c> and</c><00:08:49.680><c> then</c><00:08:49.920><c> at</c><00:08:50.080><c> the</c>

00:08:50.230 --> 00:08:50.240 align:start position:0%
added it to the result and then at the
 

00:08:50.240 --> 00:08:52.870 align:start position:0%
added it to the result and then at the
end<00:08:50.480><c> we</c><00:08:50.640><c> can</c><00:08:50.880><c> finally</c><00:08:51.360><c> return</c><00:08:51.920><c> the</c><00:08:52.080><c> result</c>

00:08:52.870 --> 00:08:52.880 align:start position:0%
end we can finally return the result
 

00:08:52.880 --> 00:08:55.350 align:start position:0%
end we can finally return the result
and<00:08:53.200><c> one</c><00:08:53.440><c> last</c><00:08:53.760><c> thing</c><00:08:54.000><c> we</c><00:08:54.160><c> want</c><00:08:54.320><c> to</c><00:08:54.480><c> do</c><00:08:54.800><c> is</c><00:08:55.120><c> make</c>

00:08:55.350 --> 00:08:55.360 align:start position:0%
and one last thing we want to do is make
 

00:08:55.360 --> 00:08:56.070 align:start position:0%
and one last thing we want to do is make
sure<00:08:55.519><c> that</c>

00:08:56.070 --> 00:08:56.080 align:start position:0%
sure that
 

00:08:56.080 --> 00:08:58.150 align:start position:0%
sure that
if<00:08:56.240><c> we're</c><00:08:56.480><c> adding</c><00:08:56.800><c> a</c><00:08:57.040><c> level</c><00:08:57.440><c> to</c><00:08:57.600><c> the</c><00:08:57.760><c> result</c><00:08:58.080><c> we</c>

00:08:58.150 --> 00:08:58.160 align:start position:0%
if we're adding a level to the result we
 

00:08:58.160 --> 00:08:59.670 align:start position:0%
if we're adding a level to the result we
want<00:08:58.320><c> to</c><00:08:58.399><c> make</c><00:08:58.480><c> sure</c><00:08:58.640><c> that</c><00:08:58.959><c> level</c><00:08:59.360><c> is</c>

00:08:59.670 --> 00:08:59.680 align:start position:0%
want to make sure that level is
 

00:08:59.680 --> 00:09:02.630 align:start position:0%
want to make sure that level is
non-empty<00:09:01.120><c> because</c><00:09:01.440><c> we</c><00:09:01.600><c> know</c><00:09:02.000><c> technically</c>

00:09:02.630 --> 00:09:02.640 align:start position:0%
non-empty because we know technically
 

00:09:02.640 --> 00:09:03.670 align:start position:0%
non-empty because we know technically
our<00:09:02.800><c> queue</c><00:09:03.120><c> could</c><00:09:03.360><c> have</c>

00:09:03.670 --> 00:09:03.680 align:start position:0%
our queue could have
 

00:09:03.680 --> 00:09:05.990 align:start position:0%
our queue could have
null<00:09:04.000><c> nodes</c><00:09:04.399><c> we're</c><00:09:04.560><c> not</c><00:09:04.800><c> adding</c><00:09:05.200><c> null</c><00:09:05.519><c> nodes</c>

00:09:05.990 --> 00:09:06.000 align:start position:0%
null nodes we're not adding null nodes
 

00:09:06.000 --> 00:09:07.350 align:start position:0%
null nodes we're not adding null nodes
to<00:09:06.240><c> the</c><00:09:06.399><c> level</c><00:09:06.720><c> list</c><00:09:06.959><c> so</c>

00:09:07.350 --> 00:09:07.360 align:start position:0%
to the level list so
 

00:09:07.360 --> 00:09:09.269 align:start position:0%
to the level list so
we<00:09:07.519><c> want</c><00:09:07.680><c> to</c><00:09:07.760><c> make</c><00:09:07.920><c> sure</c><00:09:08.080><c> that</c><00:09:08.399><c> level</c><00:09:08.880><c> is</c>

00:09:09.269 --> 00:09:09.279 align:start position:0%
we want to make sure that level is
 

00:09:09.279 --> 00:09:11.030 align:start position:0%
we want to make sure that level is
non-empty<00:09:10.240><c> if</c><00:09:10.320><c> we're</c><00:09:10.480><c> adding</c><00:09:10.720><c> it</c><00:09:10.800><c> to</c><00:09:10.959><c> the</c>

00:09:11.030 --> 00:09:11.040 align:start position:0%
non-empty if we're adding it to the
 

00:09:11.040 --> 00:09:11.750 align:start position:0%
non-empty if we're adding it to the
result

00:09:11.750 --> 00:09:11.760 align:start position:0%
result
 

00:09:11.760 --> 00:09:13.990 align:start position:0%
result
we<00:09:11.920><c> can</c><00:09:12.160><c> run</c><00:09:12.320><c> the</c><00:09:12.480><c> code</c><00:09:12.880><c> and</c><00:09:13.040><c> see</c><00:09:13.279><c> that</c><00:09:13.519><c> it</c><00:09:13.680><c> does</c>

00:09:13.990 --> 00:09:14.000 align:start position:0%
we can run the code and see that it does
 

00:09:14.000 --> 00:09:16.230 align:start position:0%
we can run the code and see that it does
work<00:09:14.399><c> and</c><00:09:14.560><c> it</c><00:09:14.720><c> is</c><00:09:15.040><c> pretty</c><00:09:15.360><c> efficient</c><00:09:15.920><c> this</c><00:09:16.080><c> is</c>

00:09:16.230 --> 00:09:16.240 align:start position:0%
work and it is pretty efficient this is
 

00:09:16.240 --> 00:09:17.910 align:start position:0%
work and it is pretty efficient this is
a<00:09:16.480><c> breadth-first</c><00:09:17.200><c> search</c>

00:09:17.910 --> 00:09:17.920 align:start position:0%
a breadth-first search
 

00:09:17.920 --> 00:09:21.350 align:start position:0%
a breadth-first search
level<00:09:18.320><c> order</c><00:09:18.800><c> traversal</c><00:09:19.600><c> of</c><00:09:19.839><c> a</c><00:09:20.080><c> binary</c><00:09:20.720><c> tree</c>

00:09:21.350 --> 00:09:21.360 align:start position:0%
level order traversal of a binary tree
 

00:09:21.360 --> 00:09:24.070 align:start position:0%
level order traversal of a binary tree
and<00:09:21.519><c> we</c><00:09:21.680><c> did</c><00:09:21.920><c> it</c><00:09:22.080><c> in</c><00:09:22.240><c> linear</c><00:09:22.720><c> time</c><00:09:23.440><c> and</c><00:09:23.680><c> i</c><00:09:23.839><c> hope</c>

00:09:24.070 --> 00:09:24.080 align:start position:0%
and we did it in linear time and i hope
 

00:09:24.080 --> 00:09:25.670 align:start position:0%
and we did it in linear time and i hope
that<00:09:24.320><c> this</c><00:09:24.560><c> was</c><00:09:24.880><c> helpful</c>

00:09:25.670 --> 00:09:25.680 align:start position:0%
that this was helpful
 

00:09:25.680 --> 00:09:28.070 align:start position:0%
that this was helpful
if<00:09:25.839><c> it</c><00:09:26.000><c> was</c><00:09:26.560><c> please</c><00:09:26.959><c> like</c><00:09:27.200><c> and</c><00:09:27.360><c> subscribe</c><00:09:27.920><c> it</c>

00:09:28.070 --> 00:09:28.080 align:start position:0%
if it was please like and subscribe it
 

00:09:28.080 --> 00:09:29.829 align:start position:0%
if it was please like and subscribe it
supports<00:09:28.480><c> the</c><00:09:28.640><c> channel</c><00:09:29.120><c> a</c><00:09:29.440><c> lot</c>

00:09:29.829 --> 00:09:29.839 align:start position:0%
supports the channel a lot
 

00:09:29.839 --> 00:09:37.200 align:start position:0%
supports the channel a lot
and<00:09:30.000><c> i'll</c><00:09:30.160><c> hopefully</c><00:09:30.880><c> see</c><00:09:31.040><c> you</c><00:09:31.200><c> pretty</c><00:09:34.200><c> soon</c>

