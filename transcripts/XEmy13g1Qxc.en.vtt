WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:01.829 align:start position:0%
 
everyone<00:00:00.560><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.439><c> let's</c><00:00:01.680><c> write</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
everyone welcome back and let's write
 

00:00:01.839 --> 00:00:03.990 align:start position:0%
everyone welcome back and let's write
some<00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.639><c> code</c><00:00:02.879><c> today</c><00:00:03.199><c> so</c><00:00:03.360><c> today</c><00:00:03.760><c> let's</c>

00:00:03.990 --> 00:00:04.000 align:start position:0%
some more neat code today so today let's
 

00:00:04.000 --> 00:00:07.349 align:start position:0%
some more neat code today so today let's
solve<00:00:04.240><c> the</c><00:00:04.480><c> problem</c><00:00:05.200><c> kth</c><00:00:05.759><c> largest</c><00:00:06.399><c> element</c><00:00:06.960><c> in</c>

00:00:07.349 --> 00:00:07.359 align:start position:0%
solve the problem kth largest element in
 

00:00:07.359 --> 00:00:09.990 align:start position:0%
solve the problem kth largest element in
an<00:00:07.680><c> array</c><00:00:08.400><c> so</c><00:00:08.559><c> we're</c><00:00:08.720><c> given</c><00:00:09.040><c> an</c><00:00:09.200><c> integer</c><00:00:09.599><c> array</c>

00:00:09.990 --> 00:00:10.000 align:start position:0%
an array so we're given an integer array
 

00:00:10.000 --> 00:00:12.310 align:start position:0%
an array so we're given an integer array
numsend<00:00:10.559><c> and</c><00:00:10.800><c> integer</c><00:00:11.280><c> k</c><00:00:11.519><c> we</c><00:00:11.679><c> want</c><00:00:11.840><c> to</c><00:00:11.920><c> return</c>

00:00:12.310 --> 00:00:12.320 align:start position:0%
numsend and integer k we want to return
 

00:00:12.320 --> 00:00:15.990 align:start position:0%
numsend and integer k we want to return
the<00:00:12.480><c> kth</c><00:00:13.120><c> largest</c><00:00:13.759><c> element</c><00:00:14.320><c> in</c><00:00:14.719><c> the</c><00:00:15.040><c> array</c><00:00:15.759><c> by</c>

00:00:15.990 --> 00:00:16.000 align:start position:0%
the kth largest element in the array by
 

00:00:16.000 --> 00:00:18.310 align:start position:0%
the kth largest element in the array by
largest<00:00:16.720><c> they</c><00:00:17.039><c> mean</c><00:00:17.359><c> largest</c><00:00:17.840><c> in</c><00:00:17.920><c> sorted</c>

00:00:18.310 --> 00:00:18.320 align:start position:0%
largest they mean largest in sorted
 

00:00:18.320 --> 00:00:20.470 align:start position:0%
largest they mean largest in sorted
order<00:00:18.560><c> not</c><00:00:18.800><c> the</c><00:00:18.960><c> largest</c><00:00:19.439><c> distinct</c><00:00:20.080><c> element</c>

00:00:20.470 --> 00:00:20.480 align:start position:0%
order not the largest distinct element
 

00:00:20.480 --> 00:00:22.790 align:start position:0%
order not the largest distinct element
so<00:00:20.640><c> we</c><00:00:20.800><c> could</c><00:00:21.039><c> have</c><00:00:21.279><c> duplicates</c><00:00:22.000><c> in</c><00:00:22.400><c> this</c>

00:00:22.790 --> 00:00:22.800 align:start position:0%
so we could have duplicates in this
 

00:00:22.800 --> 00:00:26.310 align:start position:0%
so we could have duplicates in this
array<00:00:23.439><c> and</c><00:00:23.920><c> so</c><00:00:24.160><c> when</c><00:00:24.320><c> they</c><00:00:24.560><c> say</c><00:00:24.880><c> let's</c><00:00:25.119><c> say</c><00:00:25.680><c> a</c><00:00:25.920><c> k</c>

00:00:26.310 --> 00:00:26.320 align:start position:0%
array and so when they say let's say a k
 

00:00:26.320 --> 00:00:28.950 align:start position:0%
array and so when they say let's say a k
equals<00:00:27.119><c> one</c><00:00:27.599><c> ray</c><00:00:27.760><c> if</c><00:00:27.920><c> k</c><00:00:28.160><c> was</c><00:00:28.320><c> one</c><00:00:28.640><c> and</c><00:00:28.800><c> let's</c>

00:00:28.950 --> 00:00:28.960 align:start position:0%
equals one ray if k was one and let's
 

00:00:28.960 --> 00:00:30.550 align:start position:0%
equals one ray if k was one and let's
say<00:00:29.119><c> this</c><00:00:29.439><c> array</c><00:00:29.679><c> was</c><00:00:29.840><c> sorted</c><00:00:30.160><c> then</c><00:00:30.400><c> that</c>

00:00:30.550 --> 00:00:30.560 align:start position:0%
say this array was sorted then that
 

00:00:30.560 --> 00:00:32.229 align:start position:0%
say this array was sorted then that
would<00:00:30.720><c> mean</c><00:00:30.960><c> we</c><00:00:31.119><c> want</c><00:00:31.279><c> the</c><00:00:31.519><c> right</c><00:00:31.840><c> most</c>

00:00:32.229 --> 00:00:32.239 align:start position:0%
would mean we want the right most
 

00:00:32.239 --> 00:00:34.150 align:start position:0%
would mean we want the right most
element<00:00:32.719><c> because</c><00:00:32.960><c> we</c><00:00:33.040><c> want</c><00:00:33.280><c> the</c><00:00:33.520><c> first</c>

00:00:34.150 --> 00:00:34.160 align:start position:0%
element because we want the first
 

00:00:34.160 --> 00:00:37.350 align:start position:0%
element because we want the first
largest<00:00:34.640><c> element</c><00:00:35.280><c> if</c><00:00:35.520><c> k</c><00:00:35.920><c> is</c><00:00:36.160><c> two</c><00:00:36.640><c> we</c><00:00:36.880><c> want</c><00:00:37.120><c> the</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
largest element if k is two we want the
 

00:00:37.360 --> 00:00:39.510 align:start position:0%
largest element if k is two we want the
second<00:00:37.920><c> largest</c><00:00:38.559><c> element</c><00:00:38.879><c> so</c><00:00:39.120><c> not</c><00:00:39.360><c> the</c>

00:00:39.510 --> 00:00:39.520 align:start position:0%
second largest element so not the
 

00:00:39.520 --> 00:00:42.389 align:start position:0%
second largest element so not the
largest<00:00:40.000><c> element</c><00:00:40.559><c> but</c><00:00:40.800><c> the</c><00:00:41.120><c> second</c><00:00:41.840><c> largest</c>

00:00:42.389 --> 00:00:42.399 align:start position:0%
largest element but the second largest
 

00:00:42.399 --> 00:00:44.549 align:start position:0%
largest element but the second largest
element<00:00:42.879><c> so</c><00:00:43.040><c> that's</c><00:00:43.280><c> how</c><00:00:43.520><c> it</c><00:00:43.680><c> works</c><00:00:44.239><c> now</c><00:00:44.399><c> the</c>

00:00:44.549 --> 00:00:44.559 align:start position:0%
element so that's how it works now the
 

00:00:44.559 --> 00:00:46.229 align:start position:0%
element so that's how it works now the
most<00:00:44.800><c> obvious</c><00:00:45.200><c> solution</c><00:00:45.600><c> you</c><00:00:45.760><c> probably</c><00:00:46.079><c> could</c>

00:00:46.229 --> 00:00:46.239 align:start position:0%
most obvious solution you probably could
 

00:00:46.239 --> 00:00:48.069 align:start position:0%
most obvious solution you probably could
already<00:00:46.559><c> come</c><00:00:46.719><c> up</c><00:00:46.800><c> with</c><00:00:46.960><c> by</c><00:00:47.200><c> yourself</c><00:00:47.600><c> is</c><00:00:47.840><c> just</c>

00:00:48.069 --> 00:00:48.079 align:start position:0%
already come up with by yourself is just
 

00:00:48.079 --> 00:00:49.510 align:start position:0%
already come up with by yourself is just
take<00:00:48.320><c> the</c><00:00:48.640><c> input</c><00:00:48.879><c> array</c><00:00:49.200><c> it's</c><00:00:49.360><c> not</c>

00:00:49.510 --> 00:00:49.520 align:start position:0%
take the input array it's not
 

00:00:49.520 --> 00:00:51.350 align:start position:0%
take the input array it's not
necessarily<00:00:50.160><c> gonna</c><00:00:50.399><c> be</c><00:00:50.559><c> sorted</c><00:00:50.960><c> but</c><00:00:51.120><c> we</c><00:00:51.199><c> could</c>

00:00:51.350 --> 00:00:51.360 align:start position:0%
necessarily gonna be sorted but we could
 

00:00:51.360 --> 00:00:53.510 align:start position:0%
necessarily gonna be sorted but we could
sort<00:00:51.680><c> it</c><00:00:51.760><c> ourselves</c><00:00:52.640><c> what</c><00:00:52.879><c> would</c><00:00:53.039><c> be</c><00:00:53.199><c> the</c><00:00:53.280><c> time</c>

00:00:53.510 --> 00:00:53.520 align:start position:0%
sort it ourselves what would be the time
 

00:00:53.520 --> 00:00:56.229 align:start position:0%
sort it ourselves what would be the time
complexity<00:00:54.000><c> well</c><00:00:54.160><c> it</c><00:00:54.239><c> would</c><00:00:54.399><c> be</c><00:00:54.719><c> uh</c><00:00:55.440><c> n</c>

00:00:56.229 --> 00:00:56.239 align:start position:0%
complexity well it would be uh n
 

00:00:56.239 --> 00:00:58.549 align:start position:0%
complexity well it would be uh n
log<00:00:57.039><c> n</c><00:00:57.440><c> right</c><00:00:57.600><c> that's</c><00:00:57.840><c> the</c><00:00:57.920><c> time</c><00:00:58.079><c> complexity</c>

00:00:58.549 --> 00:00:58.559 align:start position:0%
log n right that's the time complexity
 

00:00:58.559 --> 00:01:01.110 align:start position:0%
log n right that's the time complexity
to<00:00:58.800><c> sort</c><00:00:59.199><c> and</c><00:00:59.760><c> since</c><00:01:00.000><c> this</c><00:01:00.239><c> is</c><00:01:00.320><c> an</c><00:01:00.480><c> array</c><00:01:00.800><c> once</c>

00:01:01.110 --> 00:01:01.120 align:start position:0%
to sort and since this is an array once
 

00:01:01.120 --> 00:01:03.670 align:start position:0%
to sort and since this is an array once
we<00:01:01.280><c> sort</c><00:01:01.600><c> it</c><00:01:01.760><c> we</c><00:01:01.920><c> can</c><00:01:02.160><c> instantly</c><00:01:02.879><c> check</c><00:01:03.440><c> the</c>

00:01:03.670 --> 00:01:03.680 align:start position:0%
we sort it we can instantly check the
 

00:01:03.680 --> 00:01:05.750 align:start position:0%
we sort it we can instantly check the
index<00:01:04.080><c> that</c><00:01:04.159><c> we</c><00:01:04.400><c> want</c><00:01:04.879><c> what</c><00:01:05.119><c> index</c><00:01:05.519><c> are</c><00:01:05.600><c> we</c>

00:01:05.750 --> 00:01:05.760 align:start position:0%
index that we want what index are we
 

00:01:05.760 --> 00:01:08.070 align:start position:0%
index that we want what index are we
going<00:01:05.840><c> to</c><00:01:05.920><c> want</c><00:01:06.159><c> let's</c><00:01:06.320><c> say</c><00:01:06.560><c> k</c><00:01:06.960><c> is</c><00:01:07.280><c> 2</c><00:01:07.840><c> what</c>

00:01:08.070 --> 00:01:08.080 align:start position:0%
going to want let's say k is 2 what
 

00:01:08.080 --> 00:01:09.990 align:start position:0%
going to want let's say k is 2 what
index<00:01:08.479><c> would</c><00:01:08.640><c> we</c><00:01:08.799><c> want</c><00:01:09.040><c> in</c><00:01:09.360><c> nums</c><00:01:09.600><c> we'd</c><00:01:09.840><c> want</c>

00:01:09.990 --> 00:01:10.000 align:start position:0%
index would we want in nums we'd want
 

00:01:10.000 --> 00:01:11.670 align:start position:0%
index would we want in nums we'd want
the<00:01:10.080><c> second</c><00:01:10.400><c> largest</c><00:01:10.799><c> right</c><00:01:10.960><c> so</c><00:01:11.119><c> instead</c><00:01:11.360><c> of</c>

00:01:11.670 --> 00:01:11.680 align:start position:0%
the second largest right so instead of
 

00:01:11.680 --> 00:01:13.750 align:start position:0%
the second largest right so instead of
the<00:01:11.920><c> largest</c><00:01:12.479><c> we'd</c><00:01:12.720><c> want</c><00:01:12.960><c> the</c><00:01:13.119><c> second</c><00:01:13.360><c> largest</c>

00:01:13.750 --> 00:01:13.760 align:start position:0%
the largest we'd want the second largest
 

00:01:13.760 --> 00:01:15.109 align:start position:0%
the largest we'd want the second largest
so<00:01:13.840><c> how</c><00:01:14.000><c> would</c><00:01:14.159><c> we</c><00:01:14.240><c> do</c><00:01:14.400><c> that</c><00:01:14.560><c> we'd</c><00:01:14.720><c> just</c><00:01:14.880><c> take</c>

00:01:15.109 --> 00:01:15.119 align:start position:0%
so how would we do that we'd just take
 

00:01:15.119 --> 00:01:19.190 align:start position:0%
so how would we do that we'd just take
the<00:01:15.360><c> length</c><00:01:16.000><c> of</c><00:01:16.240><c> the</c><00:01:16.560><c> array</c><00:01:17.360><c> minus</c><00:01:18.320><c> k</c><00:01:19.040><c> that</c>

00:01:19.190 --> 00:01:19.200 align:start position:0%
the length of the array minus k that
 

00:01:19.200 --> 00:01:21.510 align:start position:0%
the length of the array minus k that
would<00:01:19.439><c> give</c><00:01:19.600><c> us</c><00:01:19.759><c> the</c><00:01:20.000><c> index</c><00:01:20.400><c> that</c><00:01:20.560><c> we</c><00:01:20.799><c> want</c><00:01:21.200><c> to</c>

00:01:21.510 --> 00:01:21.520 align:start position:0%
would give us the index that we want to
 

00:01:21.520 --> 00:01:23.910 align:start position:0%
would give us the index that we want to
get<00:01:21.759><c> to</c><00:01:22.240><c> but</c><00:01:22.479><c> this</c><00:01:22.640><c> is</c><00:01:22.799><c> a</c><00:01:22.880><c> medium</c><00:01:23.280><c> problem</c><00:01:23.680><c> so</c>

00:01:23.910 --> 00:01:23.920 align:start position:0%
get to but this is a medium problem so
 

00:01:23.920 --> 00:01:25.190 align:start position:0%
get to but this is a medium problem so
you<00:01:24.080><c> can</c><00:01:24.240><c> assume</c><00:01:24.479><c> that</c><00:01:24.640><c> there</c><00:01:24.799><c> are</c><00:01:24.960><c> going</c><00:01:25.119><c> to</c>

00:01:25.190 --> 00:01:25.200 align:start position:0%
you can assume that there are going to
 

00:01:25.200 --> 00:01:26.950 align:start position:0%
you can assume that there are going to
be<00:01:25.280><c> different</c><00:01:25.520><c> solutions</c><00:01:26.159><c> can</c><00:01:26.400><c> we</c><00:01:26.479><c> do</c><00:01:26.720><c> better</c>

00:01:26.950 --> 00:01:26.960 align:start position:0%
be different solutions can we do better
 

00:01:26.960 --> 00:01:30.149 align:start position:0%
be different solutions can we do better
than<00:01:27.200><c> n</c><00:01:27.360><c> log</c><00:01:27.680><c> n</c><00:01:28.159><c> well</c><00:01:28.799><c> it</c><00:01:28.960><c> turns</c><00:01:29.280><c> out</c><00:01:29.439><c> we</c><00:01:29.680><c> can</c>

00:01:30.149 --> 00:01:30.159 align:start position:0%
than n log n well it turns out we can
 

00:01:30.159 --> 00:01:33.830 align:start position:0%
than n log n well it turns out we can
and<00:01:30.400><c> one</c><00:01:30.640><c> solution</c><00:01:31.280><c> is</c><00:01:31.600><c> using</c><00:01:32.079><c> a</c><00:01:32.560><c> max</c><00:01:33.200><c> heap</c>

00:01:33.830 --> 00:01:33.840 align:start position:0%
and one solution is using a max heap
 

00:01:33.840 --> 00:01:36.069 align:start position:0%
and one solution is using a max heap
using<00:01:34.240><c> a</c><00:01:34.400><c> heap</c><00:01:34.799><c> will</c><00:01:34.960><c> be</c><00:01:35.200><c> slightly</c><00:01:35.680><c> better</c>

00:01:36.069 --> 00:01:36.079 align:start position:0%
using a heap will be slightly better
 

00:01:36.079 --> 00:01:37.990 align:start position:0%
using a heap will be slightly better
because<00:01:36.320><c> we</c><00:01:36.479><c> won't</c><00:01:36.640><c> have</c><00:01:36.799><c> to</c><00:01:36.960><c> sort</c><00:01:37.280><c> the</c><00:01:37.439><c> entire</c>

00:01:37.990 --> 00:01:38.000 align:start position:0%
because we won't have to sort the entire
 

00:01:38.000 --> 00:01:40.390 align:start position:0%
because we won't have to sort the entire
input<00:01:38.400><c> array</c><00:01:38.799><c> what</c><00:01:39.040><c> we</c><00:01:39.119><c> can</c><00:01:39.280><c> do</c><00:01:39.520><c> with</c><00:01:39.680><c> the</c><00:01:39.840><c> heap</c>

00:01:40.390 --> 00:01:40.400 align:start position:0%
input array what we can do with the heap
 

00:01:40.400 --> 00:01:42.469 align:start position:0%
input array what we can do with the heap
is<00:01:40.560><c> you</c><00:01:40.720><c> can</c><00:01:40.880><c> take</c><00:01:41.119><c> an</c><00:01:41.360><c> entire</c><00:01:41.840><c> input</c><00:01:42.159><c> array</c>

00:01:42.469 --> 00:01:42.479 align:start position:0%
is you can take an entire input array
 

00:01:42.479 --> 00:01:44.630 align:start position:0%
is you can take an entire input array
like<00:01:42.720><c> this</c><00:01:42.880><c> one</c><00:01:43.040><c> and</c><00:01:43.200><c> you</c><00:01:43.280><c> can</c><00:01:43.600><c> heapify</c><00:01:44.399><c> it</c><00:01:44.560><c> you</c>

00:01:44.630 --> 00:01:44.640 align:start position:0%
like this one and you can heapify it you
 

00:01:44.640 --> 00:01:46.950 align:start position:0%
like this one and you can heapify it you
can<00:01:44.799><c> turn</c><00:01:45.040><c> it</c><00:01:45.360><c> into</c><00:01:45.759><c> a</c><00:01:46.000><c> heap</c><00:01:46.399><c> and</c><00:01:46.560><c> you</c><00:01:46.640><c> can</c><00:01:46.799><c> do</c>

00:01:46.950 --> 00:01:46.960 align:start position:0%
can turn it into a heap and you can do
 

00:01:46.960 --> 00:01:49.910 align:start position:0%
can turn it into a heap and you can do
that<00:01:47.200><c> in</c><00:01:47.360><c> o</c><00:01:47.600><c> of</c><00:01:47.840><c> n</c><00:01:48.560><c> time</c><00:01:48.960><c> but</c><00:01:49.200><c> just</c><00:01:49.360><c> because</c><00:01:49.680><c> we</c>

00:01:49.910 --> 00:01:49.920 align:start position:0%
that in o of n time but just because we
 

00:01:49.920 --> 00:01:51.270 align:start position:0%
that in o of n time but just because we
have<00:01:50.159><c> a</c><00:01:50.240><c> heap</c><00:01:50.560><c> doesn't</c><00:01:50.799><c> mean</c><00:01:51.040><c> we've</c>

00:01:51.270 --> 00:01:51.280 align:start position:0%
have a heap doesn't mean we've
 

00:01:51.280 --> 00:01:53.190 align:start position:0%
have a heap doesn't mean we've
necessarily<00:01:52.000><c> solved</c><00:01:52.320><c> the</c><00:01:52.479><c> problem</c><00:01:52.960><c> because</c>

00:01:53.190 --> 00:01:53.200 align:start position:0%
necessarily solved the problem because
 

00:01:53.200 --> 00:01:55.190 align:start position:0%
necessarily solved the problem because
we<00:01:53.360><c> don't</c><00:01:53.680><c> necessarily</c><00:01:54.240><c> want</c><00:01:54.399><c> the</c><00:01:54.640><c> largest</c>

00:01:55.190 --> 00:01:55.200 align:start position:0%
we don't necessarily want the largest
 

00:01:55.200 --> 00:01:57.510 align:start position:0%
we don't necessarily want the largest
element<00:01:55.680><c> in</c><00:01:56.159><c> the</c><00:01:56.399><c> array</c><00:01:56.719><c> we</c><00:01:56.880><c> might</c><00:01:57.040><c> want</c><00:01:57.280><c> the</c>

00:01:57.510 --> 00:01:57.520 align:start position:0%
element in the array we might want the
 

00:01:57.520 --> 00:02:00.310 align:start position:0%
element in the array we might want the
kth<00:01:58.000><c> largest</c><00:01:58.479><c> element</c><00:01:59.040><c> so</c><00:01:59.280><c> from</c><00:01:59.680><c> that</c><00:01:59.920><c> heap</c>

00:02:00.310 --> 00:02:00.320 align:start position:0%
kth largest element so from that heap
 

00:02:00.320 --> 00:02:02.789 align:start position:0%
kth largest element so from that heap
after<00:02:00.560><c> we've</c><00:02:00.880><c> already</c><00:02:01.200><c> done</c><00:02:01.439><c> an</c><00:02:01.759><c> n</c><00:02:02.240><c> operation</c>

00:02:02.789 --> 00:02:02.799 align:start position:0%
after we've already done an n operation
 

00:02:02.799 --> 00:02:04.789 align:start position:0%
after we've already done an n operation
to<00:02:03.040><c> turn</c><00:02:03.280><c> this</c><00:02:03.600><c> array</c><00:02:03.920><c> into</c><00:02:04.159><c> a</c><00:02:04.240><c> heap</c><00:02:04.640><c> then</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
to turn this array into a heap then
 

00:02:04.799 --> 00:02:06.630 align:start position:0%
to turn this array into a heap then
we're<00:02:04.960><c> going</c><00:02:05.040><c> to</c><00:02:05.119><c> have</c><00:02:05.200><c> to</c><00:02:05.439><c> pop</c><00:02:06.079><c> from</c><00:02:06.320><c> that</c>

00:02:06.630 --> 00:02:06.640 align:start position:0%
we're going to have to pop from that
 

00:02:06.640 --> 00:02:09.749 align:start position:0%
we're going to have to pop from that
heap<00:02:07.280><c> k</c><00:02:07.840><c> times</c><00:02:08.239><c> because</c><00:02:08.479><c> it's</c><00:02:08.640><c> a</c><00:02:08.800><c> max</c><00:02:09.200><c> heap</c><00:02:09.599><c> so</c>

00:02:09.749 --> 00:02:09.759 align:start position:0%
heap k times because it's a max heap so
 

00:02:09.759 --> 00:02:11.270 align:start position:0%
heap k times because it's a max heap so
we're<00:02:09.840><c> going</c><00:02:09.920><c> to</c><00:02:10.000><c> pop</c><00:02:10.319><c> k</c><00:02:10.560><c> times</c><00:02:10.800><c> so</c><00:02:10.959><c> we</c><00:02:11.039><c> can</c><00:02:11.120><c> get</c>

00:02:11.270 --> 00:02:11.280 align:start position:0%
we're going to pop k times so we can get
 

00:02:11.280 --> 00:02:13.830 align:start position:0%
we're going to pop k times so we can get
the<00:02:11.520><c> kth</c><00:02:12.000><c> largest</c><00:02:12.480><c> element</c><00:02:13.120><c> every</c><00:02:13.360><c> time</c><00:02:13.599><c> you</c>

00:02:13.830 --> 00:02:13.840 align:start position:0%
the kth largest element every time you
 

00:02:13.840 --> 00:02:16.790 align:start position:0%
the kth largest element every time you
pop<00:02:14.160><c> from</c><00:02:14.400><c> a</c><00:02:14.480><c> heap</c><00:02:14.879><c> it</c><00:02:15.040><c> takes</c><00:02:15.360><c> a</c><00:02:15.680><c> log</c><00:02:16.400><c> n</c>

00:02:16.790 --> 00:02:16.800 align:start position:0%
pop from a heap it takes a log n
 

00:02:16.800 --> 00:02:18.309 align:start position:0%
pop from a heap it takes a log n
operation<00:02:17.280><c> where</c><00:02:17.520><c> n</c><00:02:17.599><c> is</c><00:02:17.680><c> the</c><00:02:17.840><c> size</c><00:02:18.080><c> of</c><00:02:18.160><c> the</c>

00:02:18.309 --> 00:02:18.319 align:start position:0%
operation where n is the size of the
 

00:02:18.319 --> 00:02:19.910 align:start position:0%
operation where n is the size of the
heap<00:02:18.720><c> how</c><00:02:18.879><c> many</c><00:02:19.040><c> times</c><00:02:19.280><c> are</c><00:02:19.440><c> we</c><00:02:19.520><c> going</c><00:02:19.599><c> to</c><00:02:19.680><c> pop</c>

00:02:19.910 --> 00:02:19.920 align:start position:0%
heap how many times are we going to pop
 

00:02:19.920 --> 00:02:21.430 align:start position:0%
heap how many times are we going to pop
we're<00:02:20.080><c> going</c><00:02:20.160><c> to</c><00:02:20.239><c> pop</c><00:02:20.480><c> k</c><00:02:20.800><c> times</c><00:02:21.040><c> because</c><00:02:21.280><c> we</c>

00:02:21.430 --> 00:02:21.440 align:start position:0%
we're going to pop k times because we
 

00:02:21.440 --> 00:02:23.990 align:start position:0%
we're going to pop k times because we
want<00:02:21.599><c> the</c><00:02:21.760><c> kth</c><00:02:22.160><c> largest</c><00:02:22.800><c> so</c><00:02:23.120><c> this</c><00:02:23.440><c> is</c><00:02:23.599><c> the</c><00:02:23.760><c> time</c>

00:02:23.990 --> 00:02:24.000 align:start position:0%
want the kth largest so this is the time
 

00:02:24.000 --> 00:02:25.830 align:start position:0%
want the kth largest so this is the time
complexity<00:02:24.959><c> of</c>

00:02:25.830 --> 00:02:25.840 align:start position:0%
complexity of
 

00:02:25.840 --> 00:02:27.910 align:start position:0%
complexity of
the<00:02:26.160><c> heap</c><00:02:26.560><c> solution</c><00:02:27.360><c> you</c><00:02:27.440><c> can</c><00:02:27.599><c> see</c><00:02:27.760><c> it's</c>

00:02:27.910 --> 00:02:27.920 align:start position:0%
the heap solution you can see it's
 

00:02:27.920 --> 00:02:30.790 align:start position:0%
the heap solution you can see it's
slightly<00:02:28.560><c> better</c><00:02:28.800><c> than</c><00:02:29.120><c> n</c><00:02:29.520><c> log</c><00:02:29.840><c> n</c><00:02:30.160><c> depending</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
slightly better than n log n depending
 

00:02:30.800 --> 00:02:33.110 align:start position:0%
slightly better than n log n depending
on<00:02:31.040><c> whatever</c><00:02:31.519><c> k</c><00:02:31.920><c> happens</c><00:02:32.319><c> to</c><00:02:32.480><c> be</c><00:02:32.640><c> so</c><00:02:32.800><c> in</c><00:02:32.879><c> some</c>

00:02:33.110 --> 00:02:33.120 align:start position:0%
on whatever k happens to be so in some
 

00:02:33.120 --> 00:02:35.830 align:start position:0%
on whatever k happens to be so in some
cases<00:02:33.760><c> it</c><00:02:33.920><c> will</c><00:02:34.160><c> be</c><00:02:34.400><c> better</c><00:02:34.879><c> than</c><00:02:35.120><c> the</c><00:02:35.360><c> sorting</c>

00:02:35.830 --> 00:02:35.840 align:start position:0%
cases it will be better than the sorting
 

00:02:35.840 --> 00:02:37.990 align:start position:0%
cases it will be better than the sorting
approach<00:02:36.319><c> if</c><00:02:36.640><c> k</c><00:02:37.120><c> is</c>

00:02:37.990 --> 00:02:38.000 align:start position:0%
approach if k is
 

00:02:38.000 --> 00:02:40.630 align:start position:0%
approach if k is
relatively<00:02:38.640><c> small</c><00:02:39.280><c> and</c><00:02:39.440><c> that's</c><00:02:39.760><c> about</c><00:02:40.400><c> as</c>

00:02:40.630 --> 00:02:40.640 align:start position:0%
relatively small and that's about as
 

00:02:40.640 --> 00:02:42.630 align:start position:0%
relatively small and that's about as
good<00:02:40.879><c> as</c><00:02:41.040><c> you</c><00:02:41.120><c> can</c><00:02:41.280><c> do</c><00:02:41.519><c> in</c><00:02:41.599><c> terms</c><00:02:41.920><c> of</c><00:02:42.160><c> worst</c>

00:02:42.630 --> 00:02:42.640 align:start position:0%
good as you can do in terms of worst
 

00:02:42.640 --> 00:02:44.710 align:start position:0%
good as you can do in terms of worst
case<00:02:42.959><c> time</c><00:02:43.200><c> complexity</c><00:02:43.920><c> but</c><00:02:44.160><c> there</c><00:02:44.400><c> is</c><00:02:44.560><c> a</c>

00:02:44.710 --> 00:02:44.720 align:start position:0%
case time complexity but there is a
 

00:02:44.720 --> 00:02:46.630 align:start position:0%
case time complexity but there is a
solution<00:02:45.200><c> that's</c><00:02:45.599><c> better</c><00:02:45.920><c> actually</c><00:02:46.319><c> if</c><00:02:46.480><c> you</c>

00:02:46.630 --> 00:02:46.640 align:start position:0%
solution that's better actually if you
 

00:02:46.640 --> 00:02:49.589 align:start position:0%
solution that's better actually if you
want<00:02:46.879><c> to</c><00:02:47.040><c> know</c><00:02:47.519><c> the</c><00:02:47.920><c> average</c><00:02:48.800><c> case</c><00:02:49.360><c> time</c>

00:02:49.589 --> 00:02:49.599 align:start position:0%
want to know the average case time
 

00:02:49.599 --> 00:02:51.270 align:start position:0%
want to know the average case time
complexity<00:02:50.480><c> and</c><00:02:50.640><c> that's</c><00:02:50.879><c> what</c><00:02:51.040><c> i'm</c><00:02:51.120><c> going</c><00:02:51.200><c> to</c>

00:02:51.270 --> 00:02:51.280 align:start position:0%
complexity and that's what i'm going to
 

00:02:51.280 --> 00:02:52.710 align:start position:0%
complexity and that's what i'm going to
be<00:02:51.440><c> focusing</c><00:02:51.840><c> on</c><00:02:52.000><c> because</c><00:02:52.239><c> that's</c><00:02:52.480><c> i</c><00:02:52.560><c> think</c>

00:02:52.710 --> 00:02:52.720 align:start position:0%
be focusing on because that's i think
 

00:02:52.720 --> 00:02:54.150 align:start position:0%
be focusing on because that's i think
the<00:02:52.879><c> more</c><00:02:53.120><c> difficult</c><00:02:53.599><c> of</c><00:02:53.680><c> the</c><00:02:53.920><c> three</c>

00:02:54.150 --> 00:02:54.160 align:start position:0%
the more difficult of the three
 

00:02:54.160 --> 00:02:56.550 align:start position:0%
the more difficult of the three
solutions<00:02:54.720><c> that</c><00:02:54.800><c> i've</c><00:02:54.959><c> talked</c><00:02:55.280><c> about</c><00:02:55.840><c> so</c><00:02:56.319><c> this</c>

00:02:56.550 --> 00:02:56.560 align:start position:0%
solutions that i've talked about so this
 

00:02:56.560 --> 00:02:59.430 align:start position:0%
solutions that i've talked about so this
third<00:02:56.879><c> solution</c><00:02:57.840><c> actually</c><00:02:58.400><c> can</c><00:02:58.640><c> be</c><00:02:58.879><c> achieved</c>

00:02:59.430 --> 00:02:59.440 align:start position:0%
third solution actually can be achieved
 

00:02:59.440 --> 00:03:03.190 align:start position:0%
third solution actually can be achieved
with<00:02:59.920><c> o</c><00:03:00.159><c> of</c><00:03:00.400><c> n</c><00:03:01.040><c> average</c><00:03:01.840><c> time</c><00:03:02.080><c> complexity</c><00:03:02.959><c> not</c>

00:03:03.190 --> 00:03:03.200 align:start position:0%
with o of n average time complexity not
 

00:03:03.200 --> 00:03:05.030 align:start position:0%
with o of n average time complexity not
worst<00:03:03.599><c> case</c><00:03:03.920><c> the</c><00:03:04.080><c> worst</c><00:03:04.400><c> case</c><00:03:04.720><c> actually</c>

00:03:05.030 --> 00:03:05.040 align:start position:0%
worst case the worst case actually
 

00:03:05.040 --> 00:03:08.149 align:start position:0%
worst case the worst case actually
happens<00:03:05.360><c> to</c><00:03:05.519><c> be</c><00:03:06.000><c> n</c><00:03:06.400><c> squared</c><00:03:07.280><c> so</c><00:03:07.680><c> in</c><00:03:07.760><c> the</c><00:03:07.920><c> worst</c>

00:03:08.149 --> 00:03:08.159 align:start position:0%
happens to be n squared so in the worst
 

00:03:08.159 --> 00:03:09.910 align:start position:0%
happens to be n squared so in the worst
case<00:03:08.400><c> it's</c><00:03:08.560><c> not</c><00:03:08.800><c> that</c><00:03:08.959><c> efficient</c><00:03:09.440><c> but</c><00:03:09.599><c> in</c><00:03:09.680><c> the</c>

00:03:09.910 --> 00:03:09.920 align:start position:0%
case it's not that efficient but in the
 

00:03:09.920 --> 00:03:12.070 align:start position:0%
case it's not that efficient but in the
average<00:03:10.319><c> case</c><00:03:10.640><c> it</c><00:03:10.879><c> is</c><00:03:11.120><c> pretty</c><00:03:11.360><c> efficient</c><00:03:11.840><c> what</c>

00:03:12.070 --> 00:03:12.080 align:start position:0%
average case it is pretty efficient what
 

00:03:12.080 --> 00:03:14.309 align:start position:0%
average case it is pretty efficient what
algorithm<00:03:12.560><c> am</c><00:03:12.720><c> i</c><00:03:12.800><c> talking</c><00:03:13.120><c> about</c><00:03:13.599><c> well</c><00:03:14.000><c> i'm</c>

00:03:14.309 --> 00:03:14.319 align:start position:0%
algorithm am i talking about well i'm
 

00:03:14.319 --> 00:03:17.190 align:start position:0%
algorithm am i talking about well i'm
talking<00:03:14.720><c> about</c><00:03:15.200><c> the</c><00:03:15.440><c> algorithm</c><00:03:16.159><c> quick</c><00:03:16.480><c> select</c>

00:03:17.190 --> 00:03:17.200 align:start position:0%
talking about the algorithm quick select
 

00:03:17.200 --> 00:03:18.869 align:start position:0%
talking about the algorithm quick select
it's<00:03:17.440><c> pretty</c><00:03:17.680><c> similar</c><00:03:18.080><c> to</c><00:03:18.239><c> a</c><00:03:18.319><c> standard</c>

00:03:18.869 --> 00:03:18.879 align:start position:0%
it's pretty similar to a standard
 

00:03:18.879 --> 00:03:20.710 align:start position:0%
it's pretty similar to a standard
algorithm<00:03:19.280><c> that</c><00:03:19.360><c> you</c><00:03:19.519><c> may</c><00:03:19.760><c> know</c><00:03:20.000><c> called</c><00:03:20.319><c> quick</c>

00:03:20.710 --> 00:03:20.720 align:start position:0%
algorithm that you may know called quick
 

00:03:20.720 --> 00:03:22.390 align:start position:0%
algorithm that you may know called quick
sort<00:03:21.360><c> and</c><00:03:21.519><c> if</c><00:03:21.599><c> you</c><00:03:21.680><c> haven't</c><00:03:21.920><c> heard</c><00:03:22.159><c> of</c><00:03:22.239><c> this</c>

00:03:22.390 --> 00:03:22.400 align:start position:0%
sort and if you haven't heard of this
 

00:03:22.400 --> 00:03:23.750 align:start position:0%
sort and if you haven't heard of this
algorithm<00:03:22.879><c> i'm</c><00:03:22.959><c> going</c><00:03:23.040><c> to</c><00:03:23.120><c> be</c><00:03:23.200><c> teaching</c><00:03:23.599><c> it</c><00:03:23.680><c> to</c>

00:03:23.750 --> 00:03:23.760 align:start position:0%
algorithm i'm going to be teaching it to
 

00:03:23.760 --> 00:03:26.070 align:start position:0%
algorithm i'm going to be teaching it to
you<00:03:23.920><c> today</c><00:03:24.480><c> if</c><00:03:24.640><c> you</c><00:03:24.799><c> have</c><00:03:25.200><c> then</c><00:03:25.440><c> you</c><00:03:25.760><c> can</c>

00:03:26.070 --> 00:03:26.080 align:start position:0%
you today if you have then you can
 

00:03:26.080 --> 00:03:28.070 align:start position:0%
you today if you have then you can
probably<00:03:26.480><c> implement</c><00:03:26.799><c> this</c><00:03:27.040><c> yourself</c><00:03:27.760><c> let</c><00:03:27.920><c> me</c>

00:03:28.070 --> 00:03:28.080 align:start position:0%
probably implement this yourself let me
 

00:03:28.080 --> 00:03:29.830 align:start position:0%
probably implement this yourself let me
show<00:03:28.159><c> you</c><00:03:28.319><c> how</c><00:03:28.400><c> to</c><00:03:28.480><c> do</c><00:03:28.640><c> that</c><00:03:28.879><c> now</c><00:03:29.360><c> so</c><00:03:29.519><c> let's</c>

00:03:29.830 --> 00:03:29.840 align:start position:0%
show you how to do that now so let's
 

00:03:29.840 --> 00:03:32.390 align:start position:0%
show you how to do that now so let's
take<00:03:30.080><c> a</c><00:03:30.239><c> look</c><00:03:30.480><c> at</c><00:03:30.799><c> this</c><00:03:31.120><c> first</c><00:03:31.519><c> example</c><00:03:32.239><c> and</c>

00:03:32.390 --> 00:03:32.400 align:start position:0%
take a look at this first example and
 

00:03:32.400 --> 00:03:33.750 align:start position:0%
take a look at this first example and
like<00:03:32.640><c> i</c><00:03:32.720><c> said</c><00:03:32.879><c> this</c><00:03:33.120><c> algorithm</c><00:03:33.519><c> is</c><00:03:33.599><c> going</c><00:03:33.680><c> to</c>

00:03:33.750 --> 00:03:33.760 align:start position:0%
like i said this algorithm is going to
 

00:03:33.760 --> 00:03:36.630 align:start position:0%
like i said this algorithm is going to
be<00:03:33.920><c> really</c><00:03:34.319><c> similar</c><00:03:34.799><c> to</c><00:03:35.040><c> quick</c><00:03:35.280><c> sort</c><00:03:36.000><c> and</c><00:03:36.480><c> the</c>

00:03:36.630 --> 00:03:36.640 align:start position:0%
be really similar to quick sort and the
 

00:03:36.640 --> 00:03:38.949 align:start position:0%
be really similar to quick sort and the
main<00:03:37.200><c> part</c><00:03:37.519><c> about</c><00:03:37.840><c> quicksort</c><00:03:38.480><c> is</c><00:03:38.720><c> the</c>

00:03:38.949 --> 00:03:38.959 align:start position:0%
main part about quicksort is the
 

00:03:38.959 --> 00:03:40.869 align:start position:0%
main part about quicksort is the
partition<00:03:39.920><c> so</c><00:03:40.080><c> that's</c><00:03:40.319><c> what</c><00:03:40.480><c> we're</c><00:03:40.640><c> going</c><00:03:40.720><c> to</c>

00:03:40.869 --> 00:03:40.879 align:start position:0%
partition so that's what we're going to
 

00:03:40.879 --> 00:03:43.190 align:start position:0%
partition so that's what we're going to
do<00:03:41.120><c> first</c><00:03:41.680><c> we're</c><00:03:41.840><c> going</c><00:03:42.000><c> to</c><00:03:42.080><c> take</c><00:03:42.400><c> this</c><00:03:42.720><c> entire</c>

00:03:43.190 --> 00:03:43.200 align:start position:0%
do first we're going to take this entire
 

00:03:43.200 --> 00:03:46.070 align:start position:0%
do first we're going to take this entire
array<00:03:43.599><c> and</c><00:03:43.840><c> partition</c><00:03:44.560><c> it</c><00:03:44.799><c> into</c><00:03:45.120><c> two</c><00:03:45.519><c> halves</c>

00:03:46.070 --> 00:03:46.080 align:start position:0%
array and partition it into two halves
 

00:03:46.080 --> 00:03:47.750 align:start position:0%
array and partition it into two halves
right<00:03:46.319><c> we're</c><00:03:46.480><c> gonna</c><00:03:46.879><c> somewhat</c><00:03:47.360><c> cut</c><00:03:47.519><c> it</c><00:03:47.680><c> in</c>

00:03:47.750 --> 00:03:47.760 align:start position:0%
right we're gonna somewhat cut it in
 

00:03:47.760 --> 00:03:50.789 align:start position:0%
right we're gonna somewhat cut it in
half<00:03:48.239><c> one</c><00:03:48.640><c> half</c><00:03:48.959><c> of</c><00:03:49.120><c> the</c><00:03:49.280><c> array</c><00:03:49.760><c> is</c><00:03:49.920><c> gonna</c><00:03:50.319><c> be</c>

00:03:50.789 --> 00:03:50.799 align:start position:0%
half one half of the array is gonna be
 

00:03:50.799 --> 00:03:52.550 align:start position:0%
half one half of the array is gonna be
every<00:03:51.120><c> value</c><00:03:51.519><c> in</c><00:03:51.760><c> let's</c><00:03:51.920><c> say</c><00:03:52.080><c> this</c><00:03:52.239><c> half</c><00:03:52.480><c> of</c>

00:03:52.550 --> 00:03:52.560 align:start position:0%
every value in let's say this half of
 

00:03:52.560 --> 00:03:55.910 align:start position:0%
every value in let's say this half of
the<00:03:52.640><c> array</c><00:03:52.959><c> is</c><00:03:53.200><c> less</c><00:03:53.519><c> than</c><00:03:53.840><c> or</c><00:03:54.159><c> equal</c><00:03:54.720><c> to</c><00:03:55.120><c> every</c>

00:03:55.910 --> 00:03:55.920 align:start position:0%
the array is less than or equal to every
 

00:03:55.920 --> 00:03:58.229 align:start position:0%
the array is less than or equal to every
value<00:03:56.560><c> in</c><00:03:56.879><c> the</c><00:03:57.200><c> right</c><00:03:57.439><c> half</c><00:03:57.760><c> of</c><00:03:57.840><c> the</c><00:03:57.920><c> array</c>

00:03:58.229 --> 00:03:58.239 align:start position:0%
value in the right half of the array
 

00:03:58.239 --> 00:04:00.149 align:start position:0%
value in the right half of the array
that's<00:03:58.480><c> how</c><00:03:58.560><c> we're</c><00:03:58.720><c> gonna</c><00:03:58.879><c> partition</c><00:03:59.439><c> it</c><00:03:59.680><c> so</c>

00:04:00.149 --> 00:04:00.159 align:start position:0%
that's how we're gonna partition it so
 

00:04:00.159 --> 00:04:01.670 align:start position:0%
that's how we're gonna partition it so
how<00:04:00.400><c> can</c><00:04:00.560><c> we</c><00:04:00.720><c> make</c><00:04:00.879><c> sure</c><00:04:01.040><c> that</c><00:04:01.200><c> it's</c><00:04:01.439><c> always</c>

00:04:01.670 --> 00:04:01.680 align:start position:0%
how can we make sure that it's always
 

00:04:01.680 --> 00:04:03.830 align:start position:0%
how can we make sure that it's always
going<00:04:01.840><c> to</c><00:04:01.920><c> be</c><00:04:02.159><c> half</c><00:04:02.640><c> well</c><00:04:03.040><c> it</c><00:04:03.120><c> turns</c><00:04:03.360><c> out</c><00:04:03.519><c> we</c>

00:04:03.830 --> 00:04:03.840 align:start position:0%
going to be half well it turns out we
 

00:04:03.840 --> 00:04:05.670 align:start position:0%
going to be half well it turns out we
can't<00:04:04.319><c> that's</c><00:04:04.560><c> why</c><00:04:04.799><c> the</c><00:04:04.959><c> worst</c><00:04:05.280><c> case</c><00:04:05.519><c> time</c>

00:04:05.670 --> 00:04:05.680 align:start position:0%
can't that's why the worst case time
 

00:04:05.680 --> 00:04:07.750 align:start position:0%
can't that's why the worst case time
complexity<00:04:06.159><c> is</c><00:04:06.239><c> going</c><00:04:06.319><c> to</c><00:04:06.400><c> be</c><00:04:06.640><c> n</c><00:04:06.959><c> squared</c><00:04:07.599><c> and</c>

00:04:07.750 --> 00:04:07.760 align:start position:0%
complexity is going to be n squared and
 

00:04:07.760 --> 00:04:09.350 align:start position:0%
complexity is going to be n squared and
the<00:04:07.920><c> average</c><00:04:08.319><c> case</c><00:04:08.480><c> time</c><00:04:08.640><c> complexity</c><00:04:09.200><c> is</c>

00:04:09.350 --> 00:04:09.360 align:start position:0%
the average case time complexity is
 

00:04:09.360 --> 00:04:11.190 align:start position:0%
the average case time complexity is
going<00:04:09.439><c> to</c><00:04:09.599><c> be</c><00:04:09.760><c> o</c><00:04:10.000><c> of</c><00:04:10.239><c> n</c><00:04:10.640><c> because</c><00:04:10.879><c> what</c><00:04:11.040><c> we're</c>

00:04:11.190 --> 00:04:11.200 align:start position:0%
going to be o of n because what we're
 

00:04:11.200 --> 00:04:12.949 align:start position:0%
going to be o of n because what we're
going<00:04:11.360><c> to</c><00:04:11.439><c> do</c><00:04:11.680><c> is</c><00:04:11.760><c> we're</c><00:04:11.920><c> going</c><00:04:12.080><c> to</c><00:04:12.319><c> randomly</c>

00:04:12.949 --> 00:04:12.959 align:start position:0%
going to do is we're going to randomly
 

00:04:12.959 --> 00:04:14.710 align:start position:0%
going to do is we're going to randomly
pick<00:04:13.200><c> a</c><00:04:13.360><c> pivot</c><00:04:13.840><c> let's</c><00:04:14.080><c> just</c><00:04:14.239><c> pick</c><00:04:14.480><c> the</c>

00:04:14.710 --> 00:04:14.720 align:start position:0%
pick a pivot let's just pick the
 

00:04:14.720 --> 00:04:17.110 align:start position:0%
pick a pivot let's just pick the
rightmost<00:04:15.280><c> element</c><00:04:15.680><c> each</c><00:04:15.920><c> time</c><00:04:16.239><c> as</c><00:04:16.479><c> the</c><00:04:16.720><c> pivot</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
rightmost element each time as the pivot
 

00:04:17.120 --> 00:04:20.069 align:start position:0%
rightmost element each time as the pivot
value<00:04:17.840><c> when</c><00:04:18.000><c> i</c><00:04:18.079><c> say</c><00:04:18.400><c> pivot</c><00:04:18.880><c> i</c><00:04:18.959><c> mean</c><00:04:19.440><c> this</c><00:04:19.680><c> value</c>

00:04:20.069 --> 00:04:20.079 align:start position:0%
value when i say pivot i mean this value
 

00:04:20.079 --> 00:04:22.230 align:start position:0%
value when i say pivot i mean this value
is<00:04:20.239><c> going</c><00:04:20.320><c> to</c><00:04:20.400><c> decide</c><00:04:21.120><c> what</c><00:04:21.359><c> goes</c><00:04:21.600><c> in</c><00:04:21.759><c> the</c><00:04:21.919><c> left</c>

00:04:22.230 --> 00:04:22.240 align:start position:0%
is going to decide what goes in the left
 

00:04:22.240 --> 00:04:24.870 align:start position:0%
is going to decide what goes in the left
half<00:04:22.720><c> and</c><00:04:22.880><c> what</c><00:04:23.120><c> goes</c><00:04:23.520><c> in</c><00:04:23.680><c> the</c><00:04:23.919><c> right</c><00:04:24.160><c> half</c><00:04:24.479><c> so</c>

00:04:24.870 --> 00:04:24.880 align:start position:0%
half and what goes in the right half so
 

00:04:24.880 --> 00:04:26.950 align:start position:0%
half and what goes in the right half so
what<00:04:25.040><c> we're</c><00:04:25.199><c> going</c><00:04:25.360><c> to</c><00:04:25.440><c> do</c><00:04:25.680><c> now</c><00:04:26.160><c> we</c><00:04:26.320><c> selected</c>

00:04:26.950 --> 00:04:26.960 align:start position:0%
what we're going to do now we selected
 

00:04:26.960 --> 00:04:29.030 align:start position:0%
what we're going to do now we selected
this<00:04:27.199><c> as</c><00:04:27.440><c> our</c><00:04:27.600><c> pivot</c><00:04:28.160><c> we're</c><00:04:28.320><c> going</c><00:04:28.479><c> to</c><00:04:28.639><c> start</c>

00:04:29.030 --> 00:04:29.040 align:start position:0%
this as our pivot we're going to start
 

00:04:29.040 --> 00:04:31.670 align:start position:0%
this as our pivot we're going to start
at<00:04:29.120><c> the</c><00:04:29.280><c> beginning</c><00:04:29.919><c> of</c><00:04:30.080><c> the</c><00:04:30.240><c> array</c><00:04:31.040><c> and</c><00:04:31.440><c> we're</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
at the beginning of the array and we're
 

00:04:31.680 --> 00:04:33.110 align:start position:0%
at the beginning of the array and we're
going<00:04:31.759><c> to</c><00:04:31.840><c> go</c><00:04:32.080><c> through</c><00:04:32.400><c> each</c><00:04:32.639><c> element</c><00:04:33.040><c> and</c>

00:04:33.110 --> 00:04:33.120 align:start position:0%
going to go through each element and
 

00:04:33.120 --> 00:04:35.110 align:start position:0%
going to go through each element and
we're<00:04:33.280><c> going</c><00:04:33.360><c> to</c><00:04:33.440><c> compare</c><00:04:34.080><c> each</c><00:04:34.400><c> element</c><00:04:34.880><c> to</c>

00:04:35.110 --> 00:04:35.120 align:start position:0%
we're going to compare each element to
 

00:04:35.120 --> 00:04:38.150 align:start position:0%
we're going to compare each element to
this<00:04:35.360><c> pivot</c><00:04:35.680><c> value</c><00:04:36.240><c> so</c><00:04:36.400><c> for</c><00:04:36.560><c> example</c><00:04:37.040><c> 3</c><00:04:37.680><c> is</c>

00:04:38.150 --> 00:04:38.160 align:start position:0%
this pivot value so for example 3 is
 

00:04:38.160 --> 00:04:40.629 align:start position:0%
this pivot value so for example 3 is
less<00:04:38.479><c> than</c><00:04:38.720><c> or</c><00:04:38.960><c> equal</c><00:04:39.280><c> to</c><00:04:39.600><c> 4</c><00:04:40.000><c> right</c><00:04:40.240><c> so</c><00:04:40.479><c> what</c>

00:04:40.629 --> 00:04:40.639 align:start position:0%
less than or equal to 4 right so what
 

00:04:40.639 --> 00:04:41.749 align:start position:0%
less than or equal to 4 right so what
are<00:04:40.720><c> we</c><00:04:40.880><c> going</c><00:04:40.960><c> to</c><00:04:41.040><c> do</c><00:04:41.199><c> we're</c><00:04:41.440><c> going</c><00:04:41.520><c> to</c><00:04:41.600><c> make</c>

00:04:41.749 --> 00:04:41.759 align:start position:0%
are we going to do we're going to make
 

00:04:41.759 --> 00:04:44.310 align:start position:0%
are we going to do we're going to make
sure<00:04:41.919><c> to</c><00:04:42.080><c> place</c><00:04:42.479><c> it</c><00:04:42.800><c> in</c><00:04:43.120><c> the</c><00:04:43.360><c> left</c><00:04:43.680><c> half</c><00:04:44.000><c> of</c><00:04:44.160><c> the</c>

00:04:44.310 --> 00:04:44.320 align:start position:0%
sure to place it in the left half of the
 

00:04:44.320 --> 00:04:46.629 align:start position:0%
sure to place it in the left half of the
array<00:04:44.720><c> it's</c><00:04:45.040><c> already</c><00:04:45.520><c> in</c><00:04:45.759><c> this</c><00:04:46.000><c> spot</c><00:04:46.320><c> so</c><00:04:46.479><c> what</c>

00:04:46.629 --> 00:04:46.639 align:start position:0%
array it's already in this spot so what
 

00:04:46.639 --> 00:04:48.150 align:start position:0%
array it's already in this spot so what
we're<00:04:46.800><c> going</c><00:04:46.880><c> to</c><00:04:46.960><c> do</c><00:04:47.120><c> is</c><00:04:47.199><c> basically</c><00:04:47.600><c> just</c><00:04:47.840><c> swap</c>

00:04:48.150 --> 00:04:48.160 align:start position:0%
we're going to do is basically just swap
 

00:04:48.160 --> 00:04:50.629 align:start position:0%
we're going to do is basically just swap
it<00:04:48.320><c> with</c><00:04:48.560><c> itself</c><00:04:49.440><c> and</c><00:04:49.600><c> then</c><00:04:50.080><c> we're</c><00:04:50.240><c> going</c><00:04:50.400><c> to</c>

00:04:50.629 --> 00:04:50.639 align:start position:0%
it with itself and then we're going to
 

00:04:50.639 --> 00:04:52.150 align:start position:0%
it with itself and then we're going to
shift<00:04:51.040><c> our</c>

00:04:52.150 --> 00:04:52.160 align:start position:0%
shift our
 

00:04:52.160 --> 00:04:53.670 align:start position:0%
shift our
pivot<00:04:52.560><c> pointer</c>

00:04:53.670 --> 00:04:53.680 align:start position:0%
pivot pointer
 

00:04:53.680 --> 00:04:55.990 align:start position:0%
pivot pointer
over<00:04:54.000><c> here</c><00:04:54.800><c> this</c><00:04:55.120><c> pointer</c><00:04:55.440><c> is</c><00:04:55.600><c> basically</c>

00:04:55.990 --> 00:04:56.000 align:start position:0%
over here this pointer is basically
 

00:04:56.000 --> 00:04:57.749 align:start position:0%
over here this pointer is basically
going<00:04:56.080><c> to</c><00:04:56.240><c> indicate</c><00:04:56.720><c> every</c><00:04:56.960><c> time</c><00:04:57.199><c> we</c><00:04:57.360><c> find</c><00:04:57.680><c> a</c>

00:04:57.749 --> 00:04:57.759 align:start position:0%
going to indicate every time we find a
 

00:04:57.759 --> 00:04:59.510 align:start position:0%
going to indicate every time we find a
value<00:04:58.160><c> such</c><00:04:58.400><c> as</c><00:04:58.479><c> this</c><00:04:58.720><c> one</c>

00:04:59.510 --> 00:04:59.520 align:start position:0%
value such as this one
 

00:04:59.520 --> 00:05:01.830 align:start position:0%
value such as this one
or<00:04:59.759><c> this</c><00:05:00.000><c> one</c><00:05:00.320><c> that's</c><00:05:00.639><c> less</c><00:05:00.880><c> than</c><00:05:01.039><c> or</c><00:05:01.199><c> equal</c><00:05:01.520><c> to</c>

00:05:01.830 --> 00:05:01.840 align:start position:0%
or this one that's less than or equal to
 

00:05:01.840 --> 00:05:04.629 align:start position:0%
or this one that's less than or equal to
4<00:05:02.479><c> then</c><00:05:02.720><c> we</c><00:05:02.880><c> can</c><00:05:03.199><c> put</c><00:05:03.440><c> it</c><00:05:03.600><c> in</c><00:05:04.000><c> this</c><00:05:04.320><c> spot</c>

00:05:04.629 --> 00:05:04.639 align:start position:0%
4 then we can put it in this spot
 

00:05:04.639 --> 00:05:06.550 align:start position:0%
4 then we can put it in this spot
wherever<00:05:05.039><c> this</c><00:05:05.360><c> pointer</c><00:05:05.840><c> happens</c><00:05:06.160><c> to</c><00:05:06.240><c> be</c><00:05:06.479><c> and</c>

00:05:06.550 --> 00:05:06.560 align:start position:0%
wherever this pointer happens to be and
 

00:05:06.560 --> 00:05:07.670 align:start position:0%
wherever this pointer happens to be and
then<00:05:06.720><c> once</c><00:05:06.960><c> we've</c><00:05:07.120><c> done</c><00:05:07.280><c> that</c><00:05:07.440><c> we're</c><00:05:07.600><c> going</c><00:05:07.600><c> to</c>

00:05:07.670 --> 00:05:07.680 align:start position:0%
then once we've done that we're going to
 

00:05:07.680 --> 00:05:09.909 align:start position:0%
then once we've done that we're going to
take<00:05:07.919><c> this</c><00:05:08.160><c> pointer</c><00:05:08.479><c> and</c><00:05:08.720><c> shift</c><00:05:08.960><c> it</c><00:05:09.120><c> again</c><00:05:09.680><c> to</c>

00:05:09.909 --> 00:05:09.919 align:start position:0%
take this pointer and shift it again to
 

00:05:09.919 --> 00:05:11.670 align:start position:0%
take this pointer and shift it again to
indicate<00:05:10.320><c> that</c><00:05:10.479><c> okay</c><00:05:10.720><c> next</c><00:05:10.960><c> time</c><00:05:11.120><c> we</c><00:05:11.280><c> find</c><00:05:11.520><c> a</c>

00:05:11.670 --> 00:05:11.680 align:start position:0%
indicate that okay next time we find a
 

00:05:11.680 --> 00:05:13.830 align:start position:0%
indicate that okay next time we find a
value<00:05:12.240><c> like</c><00:05:12.479><c> this</c><00:05:12.720><c> one</c><00:05:13.039><c> that's</c><00:05:13.360><c> less</c><00:05:13.520><c> than</c><00:05:13.680><c> or</c>

00:05:13.830 --> 00:05:13.840 align:start position:0%
value like this one that's less than or
 

00:05:13.840 --> 00:05:15.270 align:start position:0%
value like this one that's less than or
equal<00:05:14.000><c> to</c><00:05:14.160><c> four</c><00:05:14.639><c> then</c><00:05:14.800><c> we're</c><00:05:14.960><c> going</c><00:05:15.039><c> to</c><00:05:15.120><c> put</c>

00:05:15.270 --> 00:05:15.280 align:start position:0%
equal to four then we're going to put
 

00:05:15.280 --> 00:05:18.230 align:start position:0%
equal to four then we're going to put
the<00:05:15.440><c> value</c><00:05:15.840><c> in</c><00:05:16.160><c> this</c><00:05:16.560><c> uh</c><00:05:16.800><c> position</c><00:05:17.440><c> so</c><00:05:18.000><c> in</c><00:05:18.080><c> the</c>

00:05:18.230 --> 00:05:18.240 align:start position:0%
the value in this uh position so in the
 

00:05:18.240 --> 00:05:19.990 align:start position:0%
the value in this uh position so in the
actual<00:05:18.639><c> code</c><00:05:18.960><c> we're</c><00:05:19.120><c> going</c><00:05:19.199><c> to</c><00:05:19.280><c> be</c><00:05:19.440><c> doing</c><00:05:19.680><c> this</c>

00:05:19.990 --> 00:05:20.000 align:start position:0%
actual code we're going to be doing this
 

00:05:20.000 --> 00:05:22.469 align:start position:0%
actual code we're going to be doing this
in<00:05:20.320><c> place</c><00:05:20.720><c> but</c><00:05:20.880><c> i</c><00:05:20.960><c> just</c><00:05:21.199><c> drew</c><00:05:21.600><c> an</c><00:05:21.840><c> extra</c><00:05:22.160><c> piece</c>

00:05:22.469 --> 00:05:22.479 align:start position:0%
in place but i just drew an extra piece
 

00:05:22.479 --> 00:05:24.310 align:start position:0%
in place but i just drew an extra piece
of<00:05:22.720><c> memory</c><00:05:23.280><c> just</c><00:05:23.440><c> to</c><00:05:23.600><c> kind</c><00:05:23.759><c> of</c><00:05:23.919><c> help</c><00:05:24.160><c> you</c>

00:05:24.310 --> 00:05:24.320 align:start position:0%
of memory just to kind of help you
 

00:05:24.320 --> 00:05:26.230 align:start position:0%
of memory just to kind of help you
visualize<00:05:24.880><c> it</c><00:05:24.960><c> so</c><00:05:25.360><c> we're</c><00:05:25.680><c> going</c><00:05:25.759><c> to</c><00:05:25.840><c> take</c><00:05:26.080><c> our</c>

00:05:26.230 --> 00:05:26.240 align:start position:0%
visualize it so we're going to take our
 

00:05:26.240 --> 00:05:28.629 align:start position:0%
visualize it so we're going to take our
three<00:05:26.800><c> keep</c><00:05:27.039><c> it</c><00:05:27.280><c> in</c><00:05:27.520><c> this</c><00:05:27.759><c> spot</c><00:05:28.320><c> three</c><00:05:28.560><c> is</c>

00:05:28.629 --> 00:05:28.639 align:start position:0%
three keep it in this spot three is
 

00:05:28.639 --> 00:05:30.710 align:start position:0%
three keep it in this spot three is
going<00:05:28.720><c> to</c><00:05:28.800><c> go</c><00:05:28.960><c> here</c><00:05:29.440><c> our</c><00:05:29.759><c> our</c><00:05:30.000><c> p</c><00:05:30.240><c> pointer</c><00:05:30.639><c> is</c>

00:05:30.710 --> 00:05:30.720 align:start position:0%
going to go here our our p pointer is
 

00:05:30.720 --> 00:05:32.230 align:start position:0%
going to go here our our p pointer is
now<00:05:30.880><c> going</c><00:05:30.960><c> to</c><00:05:31.120><c> be</c><00:05:31.199><c> shifted</c><00:05:31.520><c> here</c><00:05:31.759><c> originally</c>

00:05:32.230 --> 00:05:32.240 align:start position:0%
now going to be shifted here originally
 

00:05:32.240 --> 00:05:34.310 align:start position:0%
now going to be shifted here originally
it<00:05:32.320><c> was</c><00:05:32.479><c> over</c><00:05:32.639><c> here</c><00:05:32.800><c> but</c><00:05:32.960><c> now</c><00:05:33.120><c> we</c><00:05:33.280><c> shifted</c><00:05:33.680><c> it</c>

00:05:34.310 --> 00:05:34.320 align:start position:0%
it was over here but now we shifted it
 

00:05:34.320 --> 00:05:36.629 align:start position:0%
it was over here but now we shifted it
over<00:05:34.560><c> here</c><00:05:34.960><c> so</c><00:05:35.440><c> now</c><00:05:35.840><c> we're</c><00:05:36.000><c> done</c><00:05:36.320><c> visiting</c>

00:05:36.629 --> 00:05:36.639 align:start position:0%
over here so now we're done visiting
 

00:05:36.639 --> 00:05:37.670 align:start position:0%
over here so now we're done visiting
this<00:05:36.880><c> element</c><00:05:37.120><c> we're</c><00:05:37.280><c> going</c><00:05:37.360><c> to</c><00:05:37.440><c> go</c><00:05:37.520><c> to</c><00:05:37.600><c> the</c>

00:05:37.670 --> 00:05:37.680 align:start position:0%
this element we're going to go to the
 

00:05:37.680 --> 00:05:40.310 align:start position:0%
this element we're going to go to the
next<00:05:37.919><c> element</c><00:05:38.400><c> 2</c><00:05:38.880><c> is</c><00:05:39.120><c> 2</c><00:05:39.520><c> less</c><00:05:39.759><c> than</c><00:05:39.919><c> or</c><00:05:40.080><c> equal</c>

00:05:40.310 --> 00:05:40.320 align:start position:0%
next element 2 is 2 less than or equal
 

00:05:40.320 --> 00:05:42.070 align:start position:0%
next element 2 is 2 less than or equal
to<00:05:40.479><c> 4</c><00:05:40.800><c> yes</c><00:05:41.039><c> it</c><00:05:41.199><c> is</c><00:05:41.440><c> so</c><00:05:41.600><c> we're</c><00:05:41.759><c> going</c><00:05:41.840><c> to</c><00:05:41.919><c> go</c>

00:05:42.070 --> 00:05:42.080 align:start position:0%
to 4 yes it is so we're going to go
 

00:05:42.080 --> 00:05:44.150 align:start position:0%
to 4 yes it is so we're going to go
ahead<00:05:42.240><c> and</c><00:05:42.400><c> put</c><00:05:42.639><c> this</c><00:05:42.800><c> value</c><00:05:43.199><c> 2</c><00:05:43.600><c> in</c><00:05:44.000><c> the</c>

00:05:44.150 --> 00:05:44.160 align:start position:0%
ahead and put this value 2 in the
 

00:05:44.160 --> 00:05:45.909 align:start position:0%
ahead and put this value 2 in the
position<00:05:44.560><c> where</c><00:05:44.800><c> p</c><00:05:45.039><c> points</c><00:05:45.440><c> at</c><00:05:45.600><c> so</c><00:05:45.759><c> we're</c>

00:05:45.909 --> 00:05:45.919 align:start position:0%
position where p points at so we're
 

00:05:45.919 --> 00:05:48.310 align:start position:0%
position where p points at so we're
going<00:05:46.000><c> to</c><00:05:46.080><c> put</c><00:05:46.320><c> our</c><00:05:46.720><c> 2</c><00:05:47.120><c> over</c><00:05:47.360><c> here</c><00:05:47.840><c> p</c><00:05:48.160><c> is</c><00:05:48.240><c> going</c>

00:05:48.310 --> 00:05:48.320 align:start position:0%
going to put our 2 over here p is going
 

00:05:48.320 --> 00:05:49.510 align:start position:0%
going to put our 2 over here p is going
to<00:05:48.400><c> be</c><00:05:48.560><c> shifted</c>

00:05:49.510 --> 00:05:49.520 align:start position:0%
to be shifted
 

00:05:49.520 --> 00:05:52.310 align:start position:0%
to be shifted
by<00:05:49.759><c> 1.</c><00:05:49.919><c> so</c><00:05:50.080><c> let's</c><00:05:50.400><c> put</c><00:05:50.800><c> p</c><00:05:51.039><c> over</c><00:05:51.280><c> here</c><00:05:51.680><c> we</c><00:05:51.840><c> find</c><00:05:52.000><c> a</c>

00:05:52.310 --> 00:05:52.320 align:start position:0%
by 1. so let's put p over here we find a
 

00:05:52.320 --> 00:05:53.749 align:start position:0%
by 1. so let's put p over here we find a
we<00:05:52.479><c> go</c><00:05:52.560><c> to</c><00:05:52.639><c> the</c><00:05:52.720><c> next</c><00:05:52.960><c> element</c><00:05:53.280><c> right</c><00:05:53.440><c> one</c>

00:05:53.749 --> 00:05:53.759 align:start position:0%
we go to the next element right one
 

00:05:53.759 --> 00:05:55.590 align:start position:0%
we go to the next element right one
again<00:05:54.080><c> it's</c><00:05:54.240><c> less</c><00:05:54.400><c> than</c><00:05:54.479><c> or</c><00:05:54.639><c> equal</c><00:05:54.800><c> to</c><00:05:54.960><c> four</c><00:05:55.360><c> we</c>

00:05:55.590 --> 00:05:55.600 align:start position:0%
again it's less than or equal to four we
 

00:05:55.600 --> 00:05:58.070 align:start position:0%
again it's less than or equal to four we
put<00:05:55.840><c> one</c><00:05:56.160><c> over</c><00:05:56.400><c> here</c><00:05:56.639><c> and</c><00:05:56.720><c> then</c><00:05:56.960><c> shift</c><00:05:57.280><c> our</c><00:05:57.440><c> p</c>

00:05:58.070 --> 00:05:58.080 align:start position:0%
put one over here and then shift our p
 

00:05:58.080 --> 00:06:01.189 align:start position:0%
put one over here and then shift our p
value<00:05:58.560><c> so</c><00:05:58.800><c> one</c><00:05:59.039><c> goes</c><00:05:59.280><c> here</c><00:05:59.919><c> p</c><00:06:00.400><c> is</c><00:06:00.880><c> going</c><00:06:00.960><c> to</c><00:06:01.039><c> be</c>

00:06:01.189 --> 00:06:01.199 align:start position:0%
value so one goes here p is going to be
 

00:06:01.199 --> 00:06:02.950 align:start position:0%
value so one goes here p is going to be
over<00:06:01.360><c> here</c><00:06:01.600><c> now</c><00:06:02.000><c> now</c><00:06:02.160><c> we</c><00:06:02.319><c> get</c><00:06:02.400><c> to</c><00:06:02.560><c> our</c><00:06:02.639><c> first</c>

00:06:02.950 --> 00:06:02.960 align:start position:0%
over here now now we get to our first
 

00:06:02.960 --> 00:06:05.029 align:start position:0%
over here now now we get to our first
element<00:06:03.520><c> that's</c><00:06:03.919><c> not</c><00:06:04.160><c> less</c><00:06:04.400><c> than</c><00:06:04.560><c> or</c><00:06:04.639><c> equal</c><00:06:04.880><c> to</c>

00:06:05.029 --> 00:06:05.039 align:start position:0%
element that's not less than or equal to
 

00:06:05.039 --> 00:06:06.950 align:start position:0%
element that's not less than or equal to
4<00:06:05.360><c> so</c><00:06:05.520><c> what</c><00:06:05.680><c> do</c><00:06:05.840><c> we</c><00:06:05.919><c> do</c><00:06:06.080><c> in</c><00:06:06.240><c> that</c><00:06:06.400><c> case</c><00:06:06.800><c> we're</c>

00:06:06.950 --> 00:06:06.960 align:start position:0%
4 so what do we do in that case we're
 

00:06:06.960 --> 00:06:09.029 align:start position:0%
4 so what do we do in that case we're
going<00:06:07.039><c> to</c><00:06:07.199><c> leave</c><00:06:07.520><c> this</c><00:06:07.759><c> exactly</c><00:06:08.240><c> where</c><00:06:08.400><c> it</c><00:06:08.560><c> is</c>

00:06:09.029 --> 00:06:09.039 align:start position:0%
going to leave this exactly where it is
 

00:06:09.039 --> 00:06:10.629 align:start position:0%
going to leave this exactly where it is
and<00:06:09.360><c> and</c><00:06:09.600><c> again</c><00:06:09.919><c> we're</c><00:06:10.080><c> going</c><00:06:10.160><c> to</c><00:06:10.240><c> get</c><00:06:10.400><c> to</c><00:06:10.560><c> the</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
and and again we're going to get to the
 

00:06:10.639 --> 00:06:13.430 align:start position:0%
and and again we're going to get to the
next<00:06:10.880><c> element</c><00:06:11.280><c> 6</c><00:06:12.000><c> is</c><00:06:12.479><c> again</c><00:06:12.800><c> not</c><00:06:13.039><c> less</c><00:06:13.199><c> than</c><00:06:13.280><c> or</c>

00:06:13.430 --> 00:06:13.440 align:start position:0%
next element 6 is again not less than or
 

00:06:13.440 --> 00:06:14.629 align:start position:0%
next element 6 is again not less than or
equal<00:06:13.600><c> to</c><00:06:13.759><c> 4</c><00:06:13.919><c> we're</c><00:06:14.080><c> going</c><00:06:14.160><c> to</c><00:06:14.240><c> leave</c><00:06:14.479><c> it</c>

00:06:14.629 --> 00:06:14.639 align:start position:0%
equal to 4 we're going to leave it
 

00:06:14.639 --> 00:06:17.590 align:start position:0%
equal to 4 we're going to leave it
exactly<00:06:15.280><c> where</c><00:06:15.520><c> it</c><00:06:15.840><c> is</c><00:06:16.400><c> and</c><00:06:16.880><c> before</c><00:06:17.360><c> we</c>

00:06:17.590 --> 00:06:17.600 align:start position:0%
exactly where it is and before we
 

00:06:17.600 --> 00:06:19.510 align:start position:0%
exactly where it is and before we
actually<00:06:18.000><c> get</c><00:06:18.319><c> to</c><00:06:18.560><c> the</c><00:06:18.720><c> last</c><00:06:19.039><c> element</c><00:06:19.360><c> we're</c>

00:06:19.510 --> 00:06:19.520 align:start position:0%
actually get to the last element we're
 

00:06:19.520 --> 00:06:22.469 align:start position:0%
actually get to the last element we're
going<00:06:19.600><c> to</c><00:06:19.840><c> stop</c><00:06:20.639><c> so</c><00:06:21.120><c> at</c><00:06:21.280><c> this</c><00:06:21.520><c> point</c><00:06:22.160><c> we've</c>

00:06:22.469 --> 00:06:22.479 align:start position:0%
going to stop so at this point we've
 

00:06:22.479 --> 00:06:23.830 align:start position:0%
going to stop so at this point we've
we're<00:06:22.720><c> basically</c><00:06:23.120><c> done</c><00:06:23.360><c> going</c><00:06:23.520><c> through</c><00:06:23.759><c> the</c>

00:06:23.830 --> 00:06:23.840 align:start position:0%
we're basically done going through the
 

00:06:23.840 --> 00:06:26.790 align:start position:0%
we're basically done going through the
entire<00:06:24.240><c> array</c><00:06:24.639><c> right</c><00:06:25.039><c> and</c><00:06:25.280><c> now</c><00:06:25.680><c> our</c><00:06:26.319><c> array</c>

00:06:26.790 --> 00:06:26.800 align:start position:0%
entire array right and now our array
 

00:06:26.800 --> 00:06:28.950 align:start position:0%
entire array right and now our array
looks<00:06:27.120><c> something</c><00:06:27.600><c> like</c><00:06:28.160><c> this</c><00:06:28.479><c> right</c><00:06:28.720><c> we</c><00:06:28.800><c> have</c>

00:06:28.950 --> 00:06:28.960 align:start position:0%
looks something like this right we have
 

00:06:28.960 --> 00:06:32.390 align:start position:0%
looks something like this right we have
a<00:06:29.199><c> 4</c><00:06:29.680><c> over</c><00:06:30.160><c> here</c><00:06:30.880><c> and</c><00:06:31.039><c> at</c><00:06:31.280><c> this</c><00:06:31.680><c> point</c><00:06:32.160><c> what</c>

00:06:32.390 --> 00:06:32.400 align:start position:0%
a 4 over here and at this point what
 

00:06:32.400 --> 00:06:35.430 align:start position:0%
a 4 over here and at this point what
this<00:06:32.800><c> p</c><00:06:33.280><c> pointer</c><00:06:33.759><c> tells</c><00:06:34.080><c> us</c><00:06:34.400><c> is</c><00:06:34.560><c> that</c><00:06:34.960><c> every</c>

00:06:35.430 --> 00:06:35.440 align:start position:0%
this p pointer tells us is that every
 

00:06:35.440 --> 00:06:37.990 align:start position:0%
this p pointer tells us is that every
element<00:06:35.919><c> before</c><00:06:36.479><c> the</c><00:06:36.720><c> p</c><00:06:37.039><c> pointer</c><00:06:37.520><c> everything</c>

00:06:37.990 --> 00:06:38.000 align:start position:0%
element before the p pointer everything
 

00:06:38.000 --> 00:06:40.870 align:start position:0%
element before the p pointer everything
over<00:06:38.240><c> here</c><00:06:38.800><c> is</c><00:06:39.199><c> less</c><00:06:39.520><c> than</c><00:06:39.759><c> or</c><00:06:40.000><c> equal</c><00:06:40.400><c> to</c><00:06:40.560><c> this</c>

00:06:40.870 --> 00:06:40.880 align:start position:0%
over here is less than or equal to this
 

00:06:40.880 --> 00:06:43.830 align:start position:0%
over here is less than or equal to this
value<00:06:41.440><c> four</c><00:06:41.919><c> and</c><00:06:42.080><c> then</c><00:06:42.400><c> every</c><00:06:42.720><c> value</c>

00:06:43.830 --> 00:06:43.840 align:start position:0%
value four and then every value
 

00:06:43.840 --> 00:06:45.670 align:start position:0%
value four and then every value
over<00:06:44.160><c> here</c><00:06:44.639><c> right</c><00:06:44.960><c> p</c>

00:06:45.670 --> 00:06:45.680 align:start position:0%
over here right p
 

00:06:45.680 --> 00:06:47.350 align:start position:0%
over here right p
and<00:06:46.319><c> you</c><00:06:46.400><c> know</c><00:06:46.639><c> all</c><00:06:46.720><c> these</c><00:06:46.960><c> remaining</c>

00:06:47.350 --> 00:06:47.360 align:start position:0%
and you know all these remaining
 

00:06:47.360 --> 00:06:48.790 align:start position:0%
and you know all these remaining
elements<00:06:47.680><c> except</c><00:06:47.919><c> for</c><00:06:48.160><c> the</c><00:06:48.240><c> last</c><00:06:48.479><c> one</c><00:06:48.720><c> of</c>

00:06:48.790 --> 00:06:48.800 align:start position:0%
elements except for the last one of
 

00:06:48.800 --> 00:06:50.629 align:start position:0%
elements except for the last one of
course<00:06:49.280><c> all</c><00:06:49.440><c> of</c><00:06:49.599><c> these</c><00:06:49.919><c> elements</c><00:06:50.400><c> are</c><00:06:50.560><c> going</c>

00:06:50.629 --> 00:06:50.639 align:start position:0%
course all of these elements are going
 

00:06:50.639 --> 00:06:53.029 align:start position:0%
course all of these elements are going
to<00:06:50.720><c> be</c><00:06:51.199><c> greater</c><00:06:52.000><c> than</c><00:06:52.240><c> 4</c><00:06:52.479><c> right</c><00:06:52.639><c> because</c><00:06:52.880><c> all</c>

00:06:53.029 --> 00:06:53.039 align:start position:0%
to be greater than 4 right because all
 

00:06:53.039 --> 00:06:55.189 align:start position:0%
to be greater than 4 right because all
of<00:06:53.199><c> these</c><00:06:53.440><c> are</c><00:06:53.680><c> less</c><00:06:53.840><c> than</c><00:06:54.000><c> or</c><00:06:54.160><c> equal</c><00:06:54.400><c> to</c><00:06:54.560><c> 4</c><00:06:54.880><c> so</c>

00:06:55.189 --> 00:06:55.199 align:start position:0%
of these are less than or equal to 4 so
 

00:06:55.199 --> 00:06:57.909 align:start position:0%
of these are less than or equal to 4 so
these<00:06:55.759><c> must</c><00:06:56.160><c> be</c><00:06:56.639><c> greater</c><00:06:57.039><c> than</c><00:06:57.280><c> 4.</c><00:06:57.680><c> that's</c>

00:06:57.909 --> 00:06:57.919 align:start position:0%
these must be greater than 4. that's
 

00:06:57.919 --> 00:07:00.230 align:start position:0%
these must be greater than 4. that's
what<00:06:58.080><c> we</c><00:06:58.240><c> mean</c><00:06:58.479><c> by</c><00:06:58.720><c> partitioning</c><00:06:59.599><c> the</c><00:06:59.759><c> array</c>

00:07:00.230 --> 00:07:00.240 align:start position:0%
what we mean by partitioning the array
 

00:07:00.240 --> 00:07:02.629 align:start position:0%
what we mean by partitioning the array
now<00:07:00.560><c> notice</c><00:07:01.440><c> just</c><00:07:01.680><c> because</c><00:07:01.919><c> we</c><00:07:02.160><c> partitioned</c>

00:07:02.629 --> 00:07:02.639 align:start position:0%
now notice just because we partitioned
 

00:07:02.639 --> 00:07:04.710 align:start position:0%
now notice just because we partitioned
the<00:07:02.800><c> array</c><00:07:03.199><c> this</c><00:07:03.440><c> is</c><00:07:03.599><c> not</c><00:07:03.919><c> in</c><00:07:04.080><c> sorted</c><00:07:04.479><c> order</c>

00:07:04.710 --> 00:07:04.720 align:start position:0%
the array this is not in sorted order
 

00:07:04.720 --> 00:07:06.469 align:start position:0%
the array this is not in sorted order
right<00:07:04.960><c> it's</c><00:07:05.120><c> not</c><00:07:05.360><c> necessary</c><00:07:05.840><c> the</c><00:07:06.000><c> halves</c><00:07:06.400><c> of</c>

00:07:06.469 --> 00:07:06.479 align:start position:0%
right it's not necessary the halves of
 

00:07:06.479 --> 00:07:08.469 align:start position:0%
right it's not necessary the halves of
the<00:07:06.639><c> array</c><00:07:07.120><c> the</c><00:07:07.280><c> partitions</c><00:07:08.080><c> are</c><00:07:08.240><c> not</c>

00:07:08.469 --> 00:07:08.479 align:start position:0%
the array the partitions are not
 

00:07:08.479 --> 00:07:10.790 align:start position:0%
the array the partitions are not
necessarily<00:07:09.280><c> going</c><00:07:09.360><c> to</c><00:07:09.440><c> be</c><00:07:09.599><c> in</c><00:07:09.759><c> sorted</c><00:07:10.240><c> order</c>

00:07:10.790 --> 00:07:10.800 align:start position:0%
necessarily going to be in sorted order
 

00:07:10.800 --> 00:07:12.390 align:start position:0%
necessarily going to be in sorted order
but<00:07:10.960><c> they</c><00:07:11.199><c> are</c><00:07:11.360><c> going</c><00:07:11.440><c> to</c><00:07:11.520><c> be</c><00:07:11.680><c> partitioned</c><00:07:12.240><c> so</c>

00:07:12.390 --> 00:07:12.400 align:start position:0%
but they are going to be partitioned so
 

00:07:12.400 --> 00:07:13.830 align:start position:0%
but they are going to be partitioned so
that<00:07:12.560><c> everything</c><00:07:12.880><c> here</c><00:07:13.120><c> is</c><00:07:13.360><c> less</c><00:07:13.599><c> than</c>

00:07:13.830 --> 00:07:13.840 align:start position:0%
that everything here is less than
 

00:07:13.840 --> 00:07:16.629 align:start position:0%
that everything here is less than
everything<00:07:14.560><c> here</c><00:07:15.039><c> and</c><00:07:15.440><c> one</c><00:07:15.759><c> last</c><00:07:16.160><c> swap</c><00:07:16.479><c> that</c>

00:07:16.629 --> 00:07:16.639 align:start position:0%
everything here and one last swap that
 

00:07:16.639 --> 00:07:18.230 align:start position:0%
everything here and one last swap that
we're<00:07:16.800><c> going</c><00:07:16.960><c> to</c><00:07:17.039><c> do</c><00:07:17.280><c> now</c><00:07:17.680><c> is</c><00:07:17.840><c> we're</c><00:07:18.000><c> going</c><00:07:18.080><c> to</c>

00:07:18.230 --> 00:07:18.240 align:start position:0%
we're going to do now is we're going to
 

00:07:18.240 --> 00:07:20.070 align:start position:0%
we're going to do now is we're going to
take<00:07:18.479><c> our</c><00:07:18.720><c> pivot</c><00:07:19.039><c> value</c><00:07:19.440><c> over</c><00:07:19.599><c> here</c><00:07:19.759><c> which</c><00:07:19.919><c> we</c>

00:07:20.070 --> 00:07:20.080 align:start position:0%
take our pivot value over here which we
 

00:07:20.080 --> 00:07:21.830 align:start position:0%
take our pivot value over here which we
selected<00:07:20.560><c> as</c><00:07:20.720><c> the</c><00:07:20.800><c> rightmost</c><00:07:21.280><c> element</c><00:07:21.759><c> and</c>

00:07:21.830 --> 00:07:21.840 align:start position:0%
selected as the rightmost element and
 

00:07:21.840 --> 00:07:23.990 align:start position:0%
selected as the rightmost element and
we're<00:07:22.000><c> going</c><00:07:22.080><c> to</c><00:07:22.240><c> swap</c><00:07:22.639><c> it</c><00:07:22.880><c> with</c><00:07:23.120><c> whatever</c>

00:07:23.990 --> 00:07:24.000 align:start position:0%
we're going to swap it with whatever
 

00:07:24.000 --> 00:07:27.270 align:start position:0%
we're going to swap it with whatever
happens<00:07:24.400><c> to</c><00:07:24.560><c> be</c><00:07:24.960><c> at</c><00:07:25.360><c> this</c><00:07:25.919><c> pointer</c><00:07:26.479><c> right</c><00:07:26.800><c> now</c>

00:07:27.270 --> 00:07:27.280 align:start position:0%
happens to be at this pointer right now
 

00:07:27.280 --> 00:07:28.870 align:start position:0%
happens to be at this pointer right now
so<00:07:27.440><c> let's</c><00:07:27.680><c> do</c><00:07:27.840><c> that</c><00:07:28.160><c> last</c><00:07:28.400><c> swap</c><00:07:28.720><c> we're</c><00:07:28.880><c> going</c>

00:07:28.870 --> 00:07:28.880 align:start position:0%
so let's do that last swap we're going
 

00:07:28.880 --> 00:07:30.710 align:start position:0%
so let's do that last swap we're going
gonna<00:07:29.120><c> put</c><00:07:29.440><c> we're</c><00:07:29.599><c> gonna</c><00:07:29.759><c> replace</c><00:07:30.160><c> this</c><00:07:30.400><c> value</c>

00:07:30.710 --> 00:07:30.720 align:start position:0%
gonna put we're gonna replace this value
 

00:07:30.720 --> 00:07:32.870 align:start position:0%
gonna put we're gonna replace this value
with<00:07:31.039><c> a</c><00:07:31.280><c> five</c><00:07:31.680><c> and</c><00:07:31.759><c> we're</c><00:07:31.919><c> gonna</c><00:07:32.080><c> replace</c><00:07:32.639><c> this</c>

00:07:32.870 --> 00:07:32.880 align:start position:0%
with a five and we're gonna replace this
 

00:07:32.880 --> 00:07:35.510 align:start position:0%
with a five and we're gonna replace this
value<00:07:33.360><c> with</c><00:07:33.680><c> a</c><00:07:34.160><c> four</c><00:07:34.800><c> so</c><00:07:35.039><c> this</c><00:07:35.199><c> might</c><00:07:35.360><c> be</c><00:07:35.440><c> a</c>

00:07:35.510 --> 00:07:35.520 align:start position:0%
value with a four so this might be a
 

00:07:35.520 --> 00:07:37.350 align:start position:0%
value with a four so this might be a
little<00:07:35.680><c> hard</c><00:07:35.840><c> to</c><00:07:36.000><c> read</c><00:07:36.240><c> but</c><00:07:36.639><c> so</c><00:07:36.880><c> the</c><00:07:37.039><c> reason</c>

00:07:37.350 --> 00:07:37.360 align:start position:0%
little hard to read but so the reason
 

00:07:37.360 --> 00:07:38.870 align:start position:0%
little hard to read but so the reason
why<00:07:37.599><c> we</c><00:07:37.759><c> did</c><00:07:38.000><c> that</c><00:07:38.479><c> you're</c><00:07:38.639><c> probably</c>

00:07:38.870 --> 00:07:38.880 align:start position:0%
why we did that you're probably
 

00:07:38.880 --> 00:07:39.990 align:start position:0%
why we did that you're probably
wondering<00:07:39.120><c> why</c><00:07:39.280><c> did</c><00:07:39.440><c> we</c><00:07:39.520><c> even</c><00:07:39.680><c> do</c><00:07:39.840><c> the</c>

00:07:39.990 --> 00:07:40.000 align:start position:0%
wondering why did we even do the
 

00:07:40.000 --> 00:07:41.749 align:start position:0%
wondering why did we even do the
partition<00:07:40.479><c> in</c><00:07:40.560><c> the</c><00:07:40.639><c> first</c><00:07:40.880><c> place</c><00:07:41.039><c> so</c><00:07:41.280><c> now</c><00:07:41.520><c> we</c>

00:07:41.749 --> 00:07:41.759 align:start position:0%
partition in the first place so now we
 

00:07:41.759 --> 00:07:43.189 align:start position:0%
partition in the first place so now we
know<00:07:42.000><c> all</c><00:07:42.160><c> we</c><00:07:42.319><c> know</c><00:07:42.560><c> at</c><00:07:42.639><c> this</c><00:07:42.720><c> point</c><00:07:42.960><c> is</c><00:07:43.120><c> we</c>

00:07:43.189 --> 00:07:43.199 align:start position:0%
know all we know at this point is we
 

00:07:43.199 --> 00:07:44.390 align:start position:0%
know all we know at this point is we
have<00:07:43.360><c> some</c><00:07:43.599><c> value</c>

00:07:44.390 --> 00:07:44.400 align:start position:0%
have some value
 

00:07:44.400 --> 00:07:46.710 align:start position:0%
have some value
at<00:07:44.560><c> this</c><00:07:44.800><c> point</c><00:07:45.039><c> our</c><00:07:45.199><c> p</c><00:07:45.680><c> this</c><00:07:45.919><c> is</c><00:07:46.080><c> the</c><00:07:46.160><c> value</c><00:07:46.560><c> we</c>

00:07:46.710 --> 00:07:46.720 align:start position:0%
at this point our p this is the value we
 

00:07:46.720 --> 00:07:48.469 align:start position:0%
at this point our p this is the value we
use<00:07:46.960><c> to</c><00:07:47.120><c> do</c><00:07:47.280><c> the</c><00:07:47.440><c> partition</c><00:07:47.919><c> right</c><00:07:48.080><c> now</c><00:07:48.319><c> it's</c>

00:07:48.469 --> 00:07:48.479 align:start position:0%
use to do the partition right now it's
 

00:07:48.479 --> 00:07:50.150 align:start position:0%
use to do the partition right now it's
over<00:07:48.720><c> here</c><00:07:49.199><c> and</c><00:07:49.280><c> we</c><00:07:49.440><c> know</c><00:07:49.599><c> that</c><00:07:49.840><c> everything</c>

00:07:50.150 --> 00:07:50.160 align:start position:0%
over here and we know that everything
 

00:07:50.160 --> 00:07:51.749 align:start position:0%
over here and we know that everything
over<00:07:50.400><c> here</c><00:07:50.560><c> is</c><00:07:50.800><c> greater</c><00:07:51.199><c> than</c><00:07:51.360><c> it</c><00:07:51.599><c> and</c>

00:07:51.749 --> 00:07:51.759 align:start position:0%
over here is greater than it and
 

00:07:51.759 --> 00:07:53.029 align:start position:0%
over here is greater than it and
everything<00:07:52.080><c> over</c><00:07:52.240><c> here</c><00:07:52.479><c> is</c><00:07:52.560><c> going</c><00:07:52.639><c> to</c><00:07:52.720><c> be</c><00:07:52.879><c> less</c>

00:07:53.029 --> 00:07:53.039 align:start position:0%
everything over here is going to be less
 

00:07:53.039 --> 00:07:55.189 align:start position:0%
everything over here is going to be less
than<00:07:53.280><c> or</c><00:07:53.440><c> equal</c><00:07:53.680><c> to</c><00:07:53.919><c> this</c><00:07:54.240><c> partition</c><00:07:54.720><c> value</c>

00:07:55.189 --> 00:07:55.199 align:start position:0%
than or equal to this partition value
 

00:07:55.199 --> 00:07:57.350 align:start position:0%
than or equal to this partition value
right<00:07:55.599><c> that's</c><00:07:56.000><c> good</c><00:07:56.479><c> so</c><00:07:56.800><c> now</c><00:07:57.039><c> what</c><00:07:57.199><c> we're</c>

00:07:57.350 --> 00:07:57.360 align:start position:0%
right that's good so now what we're
 

00:07:57.360 --> 00:08:01.029 align:start position:0%
right that's good so now what we're
going<00:07:57.440><c> to</c><00:07:57.599><c> check</c><00:07:58.319><c> is</c><00:07:58.960><c> where</c><00:07:59.520><c> is</c><00:08:00.000><c> that</c><00:08:00.400><c> k</c><00:08:00.720><c> value</c>

00:08:01.029 --> 00:08:01.039 align:start position:0%
going to check is where is that k value
 

00:08:01.039 --> 00:08:02.629 align:start position:0%
going to check is where is that k value
that<00:08:01.199><c> we're</c><00:08:01.360><c> looking</c><00:08:01.680><c> for</c><00:08:01.919><c> where</c><00:08:02.160><c> is</c><00:08:02.319><c> the</c>

00:08:02.629 --> 00:08:02.639 align:start position:0%
that we're looking for where is the
 

00:08:02.639 --> 00:08:05.749 align:start position:0%
that we're looking for where is the
second<00:08:03.199><c> largest</c><00:08:03.759><c> value</c><00:08:04.319><c> in</c><00:08:04.720><c> the</c><00:08:05.120><c> array</c>

00:08:05.749 --> 00:08:05.759 align:start position:0%
second largest value in the array
 

00:08:05.759 --> 00:08:07.670 align:start position:0%
second largest value in the array
remember<00:08:06.240><c> what</c><00:08:06.400><c> we</c><00:08:06.560><c> determined</c><00:08:07.120><c> earlier</c><00:08:07.520><c> that</c>

00:08:07.670 --> 00:08:07.680 align:start position:0%
remember what we determined earlier that
 

00:08:07.680 --> 00:08:09.909 align:start position:0%
remember what we determined earlier that
we<00:08:07.840><c> can</c><00:08:08.160><c> find</c><00:08:08.479><c> that</c><00:08:08.720><c> target</c><00:08:09.120><c> value</c><00:08:09.520><c> at</c><00:08:09.680><c> the</c>

00:08:09.909 --> 00:08:09.919 align:start position:0%
we can find that target value at the
 

00:08:09.919 --> 00:08:13.990 align:start position:0%
we can find that target value at the
index<00:08:10.560><c> length</c><00:08:11.360><c> minus</c><00:08:12.240><c> k</c><00:08:12.800><c> right</c><00:08:13.039><c> so</c><00:08:13.599><c> what</c><00:08:13.840><c> the</c>

00:08:13.990 --> 00:08:14.000 align:start position:0%
index length minus k right so what the
 

00:08:14.000 --> 00:08:16.150 align:start position:0%
index length minus k right so what the
length<00:08:14.240><c> of</c><00:08:14.319><c> this</c><00:08:14.560><c> entire</c><00:08:14.879><c> thing</c><00:08:15.039><c> is</c><00:08:15.280><c> six</c>

00:08:16.150 --> 00:08:16.160 align:start position:0%
length of this entire thing is six
 

00:08:16.160 --> 00:08:18.150 align:start position:0%
length of this entire thing is six
minus<00:08:16.720><c> k</c><00:08:16.960><c> which</c><00:08:17.120><c> is</c><00:08:17.360><c> two</c><00:08:17.680><c> so</c><00:08:17.840><c> we're</c><00:08:18.000><c> going</c><00:08:18.080><c> to</c>

00:08:18.150 --> 00:08:18.160 align:start position:0%
minus k which is two so we're going to
 

00:08:18.160 --> 00:08:20.869 align:start position:0%
minus k which is two so we're going to
go<00:08:18.319><c> to</c><00:08:18.560><c> index</c><00:08:18.960><c> four</c><00:08:19.360><c> this</c><00:08:19.599><c> is</c><00:08:19.759><c> zero</c><00:08:20.160><c> one</c><00:08:20.479><c> two</c>

00:08:20.869 --> 00:08:20.879 align:start position:0%
go to index four this is zero one two
 

00:08:20.879 --> 00:08:24.390 align:start position:0%
go to index four this is zero one two
three<00:08:21.360><c> four</c><00:08:21.759><c> this</c><00:08:22.160><c> is</c><00:08:22.400><c> index</c><00:08:22.960><c> four</c><00:08:23.440><c> so</c><00:08:23.840><c> all</c><00:08:24.160><c> we</c>

00:08:24.390 --> 00:08:24.400 align:start position:0%
three four this is index four so all we
 

00:08:24.400 --> 00:08:26.869 align:start position:0%
three four this is index four so all we
have<00:08:24.560><c> determined</c><00:08:25.199><c> at</c><00:08:25.520><c> this</c><00:08:25.919><c> point</c><00:08:26.240><c> so</c><00:08:26.400><c> far</c><00:08:26.639><c> is</c>

00:08:26.869 --> 00:08:26.879 align:start position:0%
have determined at this point so far is
 

00:08:26.879 --> 00:08:30.309 align:start position:0%
have determined at this point so far is
there<00:08:27.120><c> are</c><00:08:27.360><c> two</c><00:08:28.000><c> elements</c><00:08:28.720><c> on</c><00:08:29.199><c> this</c><00:08:29.759><c> half</c><00:08:30.160><c> of</c>

00:08:30.309 --> 00:08:30.319 align:start position:0%
there are two elements on this half of
 

00:08:30.319 --> 00:08:33.190 align:start position:0%
there are two elements on this half of
the<00:08:30.479><c> array</c><00:08:30.879><c> right</c><00:08:31.120><c> so</c><00:08:31.599><c> we</c><00:08:31.840><c> know</c><00:08:32.159><c> for</c><00:08:32.399><c> sure</c><00:08:32.959><c> that</c>

00:08:33.190 --> 00:08:33.200 align:start position:0%
the array right so we know for sure that
 

00:08:33.200 --> 00:08:36.709 align:start position:0%
the array right so we know for sure that
the<00:08:33.599><c> the</c><00:08:33.919><c> second</c><00:08:34.479><c> largest</c><00:08:35.120><c> element</c><00:08:35.919><c> must</c><00:08:36.399><c> be</c>

00:08:36.709 --> 00:08:36.719 align:start position:0%
the the second largest element must be
 

00:08:36.719 --> 00:08:38.709 align:start position:0%
the the second largest element must be
somewhere<00:08:37.200><c> here</c><00:08:37.519><c> we</c><00:08:37.680><c> don't</c><00:08:37.919><c> know</c><00:08:38.159><c> for</c><00:08:38.399><c> sure</c>

00:08:38.709 --> 00:08:38.719 align:start position:0%
somewhere here we don't know for sure
 

00:08:38.719 --> 00:08:40.709 align:start position:0%
somewhere here we don't know for sure
that<00:08:38.959><c> this</c><00:08:39.279><c> is</c><00:08:39.360><c> the</c><00:08:39.519><c> second</c><00:08:39.839><c> largest</c><00:08:40.240><c> element</c>

00:08:40.709 --> 00:08:40.719 align:start position:0%
that this is the second largest element
 

00:08:40.719 --> 00:08:42.469 align:start position:0%
that this is the second largest element
or<00:08:40.959><c> that</c><00:08:41.279><c> this</c><00:08:41.519><c> is</c><00:08:41.599><c> the</c><00:08:41.760><c> second</c><00:08:42.080><c> largest</c>

00:08:42.469 --> 00:08:42.479 align:start position:0%
or that this is the second largest
 

00:08:42.479 --> 00:08:44.630 align:start position:0%
or that this is the second largest
element<00:08:42.880><c> because</c><00:08:43.120><c> remember</c><00:08:43.839><c> these</c><00:08:44.240><c> are</c><00:08:44.399><c> not</c>

00:08:44.630 --> 00:08:44.640 align:start position:0%
element because remember these are not
 

00:08:44.640 --> 00:08:46.550 align:start position:0%
element because remember these are not
necessarily<00:08:45.279><c> going</c><00:08:45.440><c> to</c><00:08:45.519><c> be</c><00:08:45.680><c> sorted</c><00:08:46.240><c> in</c><00:08:46.320><c> this</c>

00:08:46.550 --> 00:08:46.560 align:start position:0%
necessarily going to be sorted in this
 

00:08:46.560 --> 00:08:48.949 align:start position:0%
necessarily going to be sorted in this
case<00:08:47.040><c> they're</c><00:08:47.279><c> not</c><00:08:47.839><c> so</c><00:08:48.240><c> so</c><00:08:48.480><c> we</c><00:08:48.640><c> don't</c><00:08:48.800><c> know</c>

00:08:48.949 --> 00:08:48.959 align:start position:0%
case they're not so so we don't know
 

00:08:48.959 --> 00:08:50.630 align:start position:0%
case they're not so so we don't know
it's<00:08:49.200><c> over</c><00:08:49.440><c> here</c><00:08:49.760><c> but</c><00:08:49.920><c> we</c><00:08:50.080><c> know</c><00:08:50.320><c> it's</c>

00:08:50.630 --> 00:08:50.640 align:start position:0%
it's over here but we know it's
 

00:08:50.640 --> 00:08:53.910 align:start position:0%
it's over here but we know it's
somewhere<00:08:51.279><c> in</c><00:08:51.600><c> this</c><00:08:52.080><c> half</c><00:08:52.560><c> of</c><00:08:52.720><c> the</c><00:08:53.040><c> partition</c>

00:08:53.910 --> 00:08:53.920 align:start position:0%
somewhere in this half of the partition
 

00:08:53.920 --> 00:08:56.710 align:start position:0%
somewhere in this half of the partition
right<00:08:54.160><c> it's</c><00:08:54.480><c> definitely</c><00:08:55.200><c> not</c><00:08:55.519><c> here</c><00:08:56.080><c> and</c><00:08:56.399><c> it's</c>

00:08:56.710 --> 00:08:56.720 align:start position:0%
right it's definitely not here and it's
 

00:08:56.720 --> 00:09:00.790 align:start position:0%
right it's definitely not here and it's
definitely<00:08:57.600><c> not</c><00:08:58.080><c> here</c><00:08:58.720><c> right</c><00:08:59.200><c> if</c><00:08:59.600><c> the</c><00:09:00.160><c> the</c><00:09:00.560><c> k</c>

00:09:00.790 --> 00:09:00.800 align:start position:0%
definitely not here right if the the k
 

00:09:00.800 --> 00:09:03.269 align:start position:0%
definitely not here right if the the k
value<00:09:01.200><c> is</c><00:09:01.440><c> different</c><00:09:01.839><c> right</c><00:09:02.080><c> maybe</c><00:09:02.480><c> k</c><00:09:02.720><c> was</c><00:09:03.120><c> a</c>

00:09:03.269 --> 00:09:03.279 align:start position:0%
value is different right maybe k was a
 

00:09:03.279 --> 00:09:05.110 align:start position:0%
value is different right maybe k was a
really<00:09:03.600><c> big</c><00:09:03.839><c> number</c><00:09:04.240><c> then</c><00:09:04.399><c> we'd</c><00:09:04.560><c> get</c><00:09:04.800><c> length</c>

00:09:05.110 --> 00:09:05.120 align:start position:0%
really big number then we'd get length
 

00:09:05.120 --> 00:09:07.829 align:start position:0%
really big number then we'd get length
which<00:09:05.360><c> is</c><00:09:05.519><c> six</c><00:09:06.000><c> minus</c><00:09:06.320><c> let's</c><00:09:06.560><c> say</c><00:09:06.720><c> k</c><00:09:06.959><c> was</c><00:09:07.200><c> four</c>

00:09:07.829 --> 00:09:07.839 align:start position:0%
which is six minus let's say k was four
 

00:09:07.839 --> 00:09:09.829 align:start position:0%
which is six minus let's say k was four
uh<00:09:08.240><c> then</c><00:09:08.399><c> we'd</c><00:09:08.560><c> get</c><00:09:08.800><c> two</c><00:09:09.279><c> right</c><00:09:09.519><c> that</c><00:09:09.680><c> would</c>

00:09:09.829 --> 00:09:09.839 align:start position:0%
uh then we'd get two right that would
 

00:09:09.839 --> 00:09:12.310 align:start position:0%
uh then we'd get two right that would
tell<00:09:10.000><c> us</c><00:09:10.240><c> that</c><00:09:10.480><c> okay</c><00:09:11.120><c> the</c><00:09:11.519><c> target</c><00:09:11.920><c> value</c><00:09:12.240><c> is</c>

00:09:12.310 --> 00:09:12.320 align:start position:0%
tell us that okay the target value is
 

00:09:12.320 --> 00:09:13.990 align:start position:0%
tell us that okay the target value is
going<00:09:12.399><c> to</c><00:09:12.480><c> be</c><00:09:12.640><c> in</c><00:09:12.800><c> the</c><00:09:12.959><c> left</c><00:09:13.360><c> half</c><00:09:13.680><c> of</c><00:09:13.839><c> the</c>

00:09:13.990 --> 00:09:14.000 align:start position:0%
going to be in the left half of the
 

00:09:14.000 --> 00:09:17.590 align:start position:0%
going to be in the left half of the
array<00:09:14.880><c> or</c><00:09:15.519><c> it</c><00:09:15.680><c> could</c><00:09:15.920><c> even</c><00:09:16.240><c> be</c><00:09:16.800><c> such</c><00:09:17.200><c> that</c>

00:09:17.590 --> 00:09:17.600 align:start position:0%
array or it could even be such that
 

00:09:17.600 --> 00:09:20.630 align:start position:0%
array or it could even be such that
let's<00:09:17.839><c> say</c><00:09:18.160><c> k</c><00:09:18.480><c> was</c><00:09:18.720><c> equal</c><00:09:19.120><c> to</c><00:09:19.600><c> three</c><00:09:20.160><c> then</c><00:09:20.399><c> we'd</c>

00:09:20.630 --> 00:09:20.640 align:start position:0%
let's say k was equal to three then we'd
 

00:09:20.640 --> 00:09:23.190 align:start position:0%
let's say k was equal to three then we'd
get<00:09:20.959><c> length</c><00:09:21.279><c> which</c><00:09:21.519><c> is</c><00:09:21.680><c> six</c><00:09:22.240><c> minus</c><00:09:22.640><c> k</c><00:09:22.880><c> which</c><00:09:23.040><c> is</c>

00:09:23.190 --> 00:09:23.200 align:start position:0%
get length which is six minus k which is
 

00:09:23.200 --> 00:09:25.430 align:start position:0%
get length which is six minus k which is
three<00:09:23.839><c> then</c><00:09:24.000><c> we'd</c><00:09:24.240><c> get</c><00:09:24.399><c> the</c><00:09:24.560><c> value</c><00:09:25.040><c> three</c><00:09:25.279><c> so</c>

00:09:25.430 --> 00:09:25.440 align:start position:0%
three then we'd get the value three so
 

00:09:25.440 --> 00:09:28.310 align:start position:0%
three then we'd get the value three so
then<00:09:25.600><c> we'd</c><00:09:25.839><c> go</c><00:09:26.000><c> to</c><00:09:26.240><c> index</c><00:09:27.200><c> equals</c><00:09:27.760><c> three</c><00:09:28.240><c> and</c>

00:09:28.310 --> 00:09:28.320 align:start position:0%
then we'd go to index equals three and
 

00:09:28.320 --> 00:09:30.389 align:start position:0%
then we'd go to index equals three and
then<00:09:28.560><c> we'd</c><00:09:28.959><c> we'd</c><00:09:29.200><c> see</c><00:09:29.360><c> that</c><00:09:29.600><c> this</c><00:09:29.920><c> is</c><00:09:30.160><c> that</c>

00:09:30.389 --> 00:09:30.399 align:start position:0%
then we'd we'd see that this is that
 

00:09:30.399 --> 00:09:32.550 align:start position:0%
then we'd we'd see that this is that
index<00:09:30.800><c> right</c><00:09:30.959><c> and</c><00:09:31.120><c> then</c><00:09:31.519><c> if</c><00:09:31.839><c> if</c><00:09:32.080><c> it's</c><00:09:32.320><c> ever</c>

00:09:32.550 --> 00:09:32.560 align:start position:0%
index right and then if if it's ever
 

00:09:32.560 --> 00:09:34.630 align:start position:0%
index right and then if if it's ever
this<00:09:32.880><c> case</c><00:09:33.200><c> right</c><00:09:33.360><c> where</c><00:09:33.839><c> that</c><00:09:34.160><c> value</c><00:09:34.480><c> that</c>

00:09:34.630 --> 00:09:34.640 align:start position:0%
this case right where that value that
 

00:09:34.640 --> 00:09:37.430 align:start position:0%
this case right where that value that
target<00:09:34.959><c> value</c><00:09:35.279><c> is</c><00:09:35.440><c> exactly</c><00:09:36.160><c> at</c><00:09:36.560><c> p</c><00:09:37.040><c> wherever</c>

00:09:37.430 --> 00:09:37.440 align:start position:0%
target value is exactly at p wherever
 

00:09:37.440 --> 00:09:39.829 align:start position:0%
target value is exactly at p wherever
that<00:09:37.600><c> partition</c><00:09:38.240><c> happened</c><00:09:38.560><c> to</c><00:09:38.800><c> be</c><00:09:39.279><c> then</c><00:09:39.519><c> we've</c>

00:09:39.829 --> 00:09:39.839 align:start position:0%
that partition happened to be then we've
 

00:09:39.839 --> 00:09:41.990 align:start position:0%
that partition happened to be then we've
actually<00:09:40.320><c> found</c><00:09:40.800><c> our</c><00:09:40.959><c> result</c><00:09:41.440><c> do</c><00:09:41.519><c> you</c><00:09:41.680><c> know</c>

00:09:41.990 --> 00:09:42.000 align:start position:0%
actually found our result do you know
 

00:09:42.000 --> 00:09:44.550 align:start position:0%
actually found our result do you know
why<00:09:42.240><c> that's</c><00:09:42.560><c> the</c><00:09:42.720><c> case</c><00:09:43.200><c> it's</c><00:09:43.440><c> because</c><00:09:44.080><c> we</c><00:09:44.320><c> know</c>

00:09:44.550 --> 00:09:44.560 align:start position:0%
why that's the case it's because we know
 

00:09:44.560 --> 00:09:47.990 align:start position:0%
why that's the case it's because we know
for<00:09:44.800><c> sure</c><00:09:45.360><c> that</c><00:09:45.760><c> this</c><00:09:46.240><c> is</c><00:09:46.640><c> the</c><00:09:46.959><c> kth</c><00:09:47.440><c> largest</c>

00:09:47.990 --> 00:09:48.000 align:start position:0%
for sure that this is the kth largest
 

00:09:48.000 --> 00:09:50.310 align:start position:0%
for sure that this is the kth largest
value<00:09:48.399><c> in</c><00:09:48.560><c> this</c><00:09:48.800><c> case</c><00:09:49.279><c> we</c><00:09:49.519><c> know</c><00:09:49.760><c> for</c><00:09:50.000><c> sure</c>

00:09:50.310 --> 00:09:50.320 align:start position:0%
value in this case we know for sure
 

00:09:50.320 --> 00:09:53.829 align:start position:0%
value in this case we know for sure
right<00:09:50.640><c> now</c><00:09:51.200><c> that</c><00:09:51.600><c> this</c><00:09:51.920><c> value</c><00:09:52.399><c> is</c><00:09:52.560><c> the</c><00:09:53.040><c> third</c>

00:09:53.829 --> 00:09:53.839 align:start position:0%
right now that this value is the third
 

00:09:53.839 --> 00:09:57.190 align:start position:0%
right now that this value is the third
largest<00:09:54.720><c> value</c><00:09:55.519><c> because</c><00:09:56.160><c> we</c><00:09:56.320><c> know</c><00:09:56.640><c> for</c><00:09:56.880><c> sure</c>

00:09:57.190 --> 00:09:57.200 align:start position:0%
largest value because we know for sure
 

00:09:57.200 --> 00:09:59.350 align:start position:0%
largest value because we know for sure
that<00:09:57.519><c> everything</c><00:09:58.000><c> in</c><00:09:58.080><c> the</c><00:09:58.320><c> left</c><00:09:58.560><c> half</c><00:09:58.880><c> is</c><00:09:59.120><c> less</c>

00:09:59.350 --> 00:09:59.360 align:start position:0%
that everything in the left half is less
 

00:09:59.360 --> 00:10:01.190 align:start position:0%
that everything in the left half is less
than<00:09:59.600><c> or</c><00:09:59.760><c> equal</c><00:10:00.000><c> to</c><00:10:00.160><c> this</c><00:10:00.399><c> value</c><00:10:00.800><c> and</c><00:10:00.880><c> we</c><00:10:01.040><c> know</c>

00:10:01.190 --> 00:10:01.200 align:start position:0%
than or equal to this value and we know
 

00:10:01.200 --> 00:10:03.350 align:start position:0%
than or equal to this value and we know
for<00:10:01.360><c> sure</c><00:10:01.600><c> that</c><00:10:01.680><c> there</c><00:10:01.839><c> are</c><00:10:02.079><c> two</c><00:10:02.560><c> values</c><00:10:03.200><c> that</c>

00:10:03.350 --> 00:10:03.360 align:start position:0%
for sure that there are two values that
 

00:10:03.360 --> 00:10:05.670 align:start position:0%
for sure that there are two values that
are<00:10:03.680><c> greater</c><00:10:04.160><c> than</c><00:10:04.320><c> this</c><00:10:04.560><c> value</c>

00:10:05.670 --> 00:10:05.680 align:start position:0%
are greater than this value
 

00:10:05.680 --> 00:10:08.790 align:start position:0%
are greater than this value
so<00:10:05.920><c> that</c><00:10:06.320><c> must</c><00:10:06.720><c> mean</c><00:10:07.040><c> that</c><00:10:07.279><c> this</c><00:10:07.600><c> is</c><00:10:07.760><c> the</c><00:10:08.079><c> third</c>

00:10:08.790 --> 00:10:08.800 align:start position:0%
so that must mean that this is the third
 

00:10:08.800 --> 00:10:11.030 align:start position:0%
so that must mean that this is the third
largest<00:10:09.440><c> value</c><00:10:09.920><c> right</c><00:10:10.079><c> so</c><00:10:10.240><c> we</c><00:10:10.480><c> found</c><00:10:10.720><c> the</c>

00:10:11.030 --> 00:10:11.040 align:start position:0%
largest value right so we found the
 

00:10:11.040 --> 00:10:13.670 align:start position:0%
largest value right so we found the
third<00:10:11.680><c> largest</c><00:10:12.320><c> value</c><00:10:12.880><c> but</c><00:10:13.040><c> we're</c><00:10:13.279><c> looking</c>

00:10:13.670 --> 00:10:13.680 align:start position:0%
third largest value but we're looking
 

00:10:13.680 --> 00:10:15.509 align:start position:0%
third largest value but we're looking
for<00:10:13.920><c> the</c><00:10:14.160><c> second</c><00:10:14.480><c> largest</c><00:10:14.880><c> value</c><00:10:15.200><c> so</c>

00:10:15.509 --> 00:10:15.519 align:start position:0%
for the second largest value so
 

00:10:15.519 --> 00:10:17.110 align:start position:0%
for the second largest value so
basically<00:10:15.920><c> what</c><00:10:16.079><c> i'm</c><00:10:16.160><c> getting</c><00:10:16.480><c> at</c><00:10:16.640><c> is</c><00:10:16.959><c> we're</c>

00:10:17.110 --> 00:10:17.120 align:start position:0%
basically what i'm getting at is we're
 

00:10:17.120 --> 00:10:19.269 align:start position:0%
basically what i'm getting at is we're
going<00:10:17.200><c> to</c><00:10:17.360><c> do</c><00:10:17.519><c> this</c><00:10:17.760><c> recursively</c><00:10:18.640><c> so</c><00:10:18.959><c> instead</c>

00:10:19.269 --> 00:10:19.279 align:start position:0%
going to do this recursively so instead
 

00:10:19.279 --> 00:10:19.990 align:start position:0%
going to do this recursively so instead
of

00:10:19.990 --> 00:10:20.000 align:start position:0%
of
 

00:10:20.000 --> 00:10:21.910 align:start position:0%
of
basically<00:10:20.399><c> we've</c><00:10:20.640><c> eliminated</c><00:10:21.360><c> that</c><00:10:21.600><c> these</c>

00:10:21.910 --> 00:10:21.920 align:start position:0%
basically we've eliminated that these
 

00:10:21.920 --> 00:10:23.670 align:start position:0%
basically we've eliminated that these
cannot<00:10:22.320><c> possibly</c><00:10:22.800><c> be</c><00:10:22.959><c> the</c><00:10:23.040><c> result</c><00:10:23.360><c> so</c><00:10:23.519><c> now</c>

00:10:23.670 --> 00:10:23.680 align:start position:0%
cannot possibly be the result so now
 

00:10:23.680 --> 00:10:25.110 align:start position:0%
cannot possibly be the result so now
we're<00:10:23.839><c> going</c><00:10:23.920><c> to</c><00:10:24.079><c> run</c><00:10:24.240><c> the</c><00:10:24.399><c> exact</c><00:10:24.800><c> same</c>

00:10:25.110 --> 00:10:25.120 align:start position:0%
we're going to run the exact same
 

00:10:25.120 --> 00:10:26.870 align:start position:0%
we're going to run the exact same
algorithm<00:10:25.600><c> i</c><00:10:25.680><c> just</c><00:10:25.920><c> showed</c><00:10:26.160><c> you</c><00:10:26.480><c> the</c><00:10:26.640><c> quick</c>

00:10:26.870 --> 00:10:26.880 align:start position:0%
algorithm i just showed you the quick
 

00:10:26.880 --> 00:10:30.069 align:start position:0%
algorithm i just showed you the quick
sort<00:10:27.200><c> partition</c><00:10:27.839><c> on</c><00:10:28.480><c> this</c><00:10:29.120><c> part</c><00:10:29.360><c> of</c><00:10:29.440><c> the</c><00:10:29.600><c> array</c>

00:10:30.069 --> 00:10:30.079 align:start position:0%
sort partition on this part of the array
 

00:10:30.079 --> 00:10:33.030 align:start position:0%
sort partition on this part of the array
until<00:10:30.480><c> we</c><00:10:30.800><c> find</c><00:10:31.200><c> that</c><00:10:31.440><c> result</c><00:10:31.920><c> until</c><00:10:32.240><c> we</c><00:10:32.399><c> find</c>

00:10:33.030 --> 00:10:33.040 align:start position:0%
until we find that result until we find
 

00:10:33.040 --> 00:10:36.150 align:start position:0%
until we find that result until we find
k<00:10:33.440><c> equals</c><00:10:34.079><c> to</c><00:10:34.560><c> the</c><00:10:34.720><c> second</c><00:10:35.040><c> largest</c><00:10:35.519><c> element</c>

00:10:36.150 --> 00:10:36.160 align:start position:0%
k equals to the second largest element
 

00:10:36.160 --> 00:10:37.910 align:start position:0%
k equals to the second largest element
and<00:10:36.399><c> when</c><00:10:36.560><c> we</c><00:10:36.720><c> actually</c><00:10:37.040><c> do</c><00:10:37.200><c> that</c><00:10:37.360><c> partition</c>

00:10:37.910 --> 00:10:37.920 align:start position:0%
and when we actually do that partition
 

00:10:37.920 --> 00:10:40.470 align:start position:0%
and when we actually do that partition
on<00:10:38.160><c> this</c><00:10:38.399><c> we're</c><00:10:38.560><c> gonna</c><00:10:39.040><c> use</c><00:10:39.440><c> 5</c><00:10:39.760><c> as</c><00:10:39.839><c> the</c><00:10:40.000><c> pivot</c>

00:10:40.470 --> 00:10:40.480 align:start position:0%
on this we're gonna use 5 as the pivot
 

00:10:40.480 --> 00:10:43.110 align:start position:0%
on this we're gonna use 5 as the pivot
we're<00:10:40.640><c> going</c><00:10:40.720><c> to</c><00:10:40.800><c> say</c><00:10:41.040><c> 6</c><00:10:41.440><c> is</c><00:10:41.680><c> greater</c><00:10:42.079><c> than</c><00:10:42.320><c> 5.</c>

00:10:43.110 --> 00:10:43.120 align:start position:0%
we're going to say 6 is greater than 5.
 

00:10:43.120 --> 00:10:44.470 align:start position:0%
we're going to say 6 is greater than 5.
our<00:10:43.279><c> p</c><00:10:43.600><c> pointer</c><00:10:43.839><c> is</c><00:10:43.920><c> going</c><00:10:44.000><c> to</c><00:10:44.079><c> be</c><00:10:44.240><c> here</c><00:10:44.399><c> and</c>

00:10:44.470 --> 00:10:44.480 align:start position:0%
our p pointer is going to be here and
 

00:10:44.480 --> 00:10:45.750 align:start position:0%
our p pointer is going to be here and
then<00:10:44.640><c> at</c><00:10:44.720><c> the</c><00:10:44.880><c> end</c><00:10:45.040><c> we're</c><00:10:45.200><c> going</c><00:10:45.279><c> to</c><00:10:45.360><c> take</c><00:10:45.519><c> this</c>

00:10:45.750 --> 00:10:45.760 align:start position:0%
then at the end we're going to take this
 

00:10:45.760 --> 00:10:47.750 align:start position:0%
then at the end we're going to take this
swap<00:10:46.079><c> it</c><00:10:46.160><c> with</c><00:10:46.320><c> whatever</c><00:10:46.640><c> is</c><00:10:46.800><c> with</c><00:10:47.040><c> p</c><00:10:47.440><c> so</c><00:10:47.600><c> then</c>

00:10:47.750 --> 00:10:47.760 align:start position:0%
swap it with whatever is with p so then
 

00:10:47.760 --> 00:10:49.030 align:start position:0%
swap it with whatever is with p so then
we're<00:10:47.920><c> going</c><00:10:48.000><c> to</c><00:10:48.079><c> have</c><00:10:48.320><c> an</c><00:10:48.480><c> array</c><00:10:48.720><c> like</c>

00:10:49.030 --> 00:10:49.040 align:start position:0%
we're going to have an array like
 

00:10:49.040 --> 00:10:51.350 align:start position:0%
we're going to have an array like
looking<00:10:49.360><c> like</c><00:10:49.519><c> this</c><00:10:49.839><c> 5</c><00:10:50.160><c> and</c><00:10:50.320><c> 6</c><00:10:50.800><c> where</c><00:10:50.959><c> this</c><00:10:51.200><c> is</c>

00:10:51.350 --> 00:10:51.360 align:start position:0%
looking like this 5 and 6 where this is
 

00:10:51.360 --> 00:10:52.710 align:start position:0%
looking like this 5 and 6 where this is
our<00:10:51.519><c> partition</c>

00:10:52.710 --> 00:10:52.720 align:start position:0%
our partition
 

00:10:52.720 --> 00:10:55.110 align:start position:0%
our partition
value<00:10:53.279><c> this</c><00:10:53.440><c> is</c><00:10:53.600><c> where</c><00:10:53.760><c> p</c><00:10:54.000><c> is</c><00:10:54.160><c> at</c><00:10:54.480><c> and</c><00:10:54.800><c> like</c><00:10:55.040><c> i</c>

00:10:55.110 --> 00:10:55.120 align:start position:0%
value this is where p is at and like i
 

00:10:55.120 --> 00:10:56.470 align:start position:0%
value this is where p is at and like i
said<00:10:55.360><c> all</c><00:10:55.519><c> of</c><00:10:55.519><c> this</c><00:10:55.760><c> is</c><00:10:55.920><c> actually</c><00:10:56.160><c> going</c><00:10:56.240><c> to</c><00:10:56.399><c> be</c>

00:10:56.470 --> 00:10:56.480 align:start position:0%
said all of this is actually going to be
 

00:10:56.480 --> 00:10:58.389 align:start position:0%
said all of this is actually going to be
done<00:10:56.800><c> in</c><00:10:57.040><c> place</c><00:10:57.519><c> so</c><00:10:57.680><c> we</c><00:10:57.839><c> will</c><00:10:58.079><c> have</c><00:10:58.240><c> the</c>

00:10:58.389 --> 00:10:58.399 align:start position:0%
done in place so we will have the
 

00:10:58.399 --> 00:11:01.269 align:start position:0%
done in place so we will have the
ultimate<00:10:58.800><c> array</c><00:10:59.440><c> and</c><00:10:59.920><c> then</c><00:11:00.160><c> we're</c><00:11:00.320><c> gonna</c><00:11:00.959><c> look</c>

00:11:01.269 --> 00:11:01.279 align:start position:0%
ultimate array and then we're gonna look
 

00:11:01.279 --> 00:11:03.590 align:start position:0%
ultimate array and then we're gonna look
at<00:11:01.600><c> k</c><00:11:02.079><c> you</c><00:11:02.160><c> know</c><00:11:02.320><c> the</c><00:11:02.399><c> length</c><00:11:02.720><c> minus</c><00:11:03.120><c> two</c><00:11:03.360><c> which</c>

00:11:03.590 --> 00:11:03.600 align:start position:0%
at k you know the length minus two which
 

00:11:03.600 --> 00:11:05.750 align:start position:0%
at k you know the length minus two which
is<00:11:03.680><c> gonna</c><00:11:04.000><c> find</c><00:11:04.320><c> put</c><00:11:04.480><c> us</c><00:11:04.640><c> at</c><00:11:04.800><c> this</c><00:11:05.040><c> index</c><00:11:05.600><c> then</c>

00:11:05.750 --> 00:11:05.760 align:start position:0%
is gonna find put us at this index then
 

00:11:05.760 --> 00:11:07.829 align:start position:0%
is gonna find put us at this index then
we're<00:11:05.920><c> gonna</c><00:11:06.079><c> have</c><00:11:06.240><c> found</c><00:11:06.640><c> our</c><00:11:06.800><c> result</c><00:11:07.360><c> five</c>

00:11:07.829 --> 00:11:07.839 align:start position:0%
we're gonna have found our result five
 

00:11:07.839 --> 00:11:09.829 align:start position:0%
we're gonna have found our result five
is<00:11:08.000><c> the</c><00:11:08.240><c> second</c><00:11:08.640><c> largest</c><00:11:09.120><c> element</c><00:11:09.519><c> because</c><00:11:09.680><c> we</c>

00:11:09.829 --> 00:11:09.839 align:start position:0%
is the second largest element because we
 

00:11:09.839 --> 00:11:11.509 align:start position:0%
is the second largest element because we
know<00:11:10.000><c> for</c><00:11:10.160><c> sure</c><00:11:10.399><c> there's</c><00:11:10.720><c> at</c><00:11:10.800><c> least</c><00:11:11.200><c> there's</c>

00:11:11.509 --> 00:11:11.519 align:start position:0%
know for sure there's at least there's
 

00:11:11.519 --> 00:11:13.670 align:start position:0%
know for sure there's at least there's
exactly<00:11:12.079><c> one</c><00:11:12.320><c> element</c><00:11:12.720><c> that's</c><00:11:13.040><c> greater</c><00:11:13.440><c> than</c>

00:11:13.670 --> 00:11:13.680 align:start position:0%
exactly one element that's greater than
 

00:11:13.680 --> 00:11:15.350 align:start position:0%
exactly one element that's greater than
five<00:11:14.240><c> right</c><00:11:14.399><c> there's</c><00:11:14.640><c> one</c><00:11:14.800><c> element</c><00:11:15.120><c> that's</c>

00:11:15.350 --> 00:11:15.360 align:start position:0%
five right there's one element that's
 

00:11:15.360 --> 00:11:17.509 align:start position:0%
five right there's one element that's
greater<00:11:15.600><c> than</c><00:11:15.839><c> five</c><00:11:16.240><c> that</c><00:11:16.480><c> must</c><00:11:16.800><c> mean</c><00:11:17.040><c> five</c><00:11:17.360><c> is</c>

00:11:17.509 --> 00:11:17.519 align:start position:0%
greater than five that must mean five is
 

00:11:17.519 --> 00:11:19.750 align:start position:0%
greater than five that must mean five is
the<00:11:17.680><c> second</c><00:11:18.079><c> largest</c><00:11:18.560><c> element</c><00:11:19.120><c> so</c><00:11:19.360><c> that's</c>

00:11:19.750 --> 00:11:19.760 align:start position:0%
the second largest element so that's
 

00:11:19.760 --> 00:11:22.630 align:start position:0%
the second largest element so that's
mainly<00:11:20.160><c> how</c><00:11:20.399><c> the</c><00:11:20.560><c> code</c><00:11:20.959><c> is</c><00:11:21.120><c> going</c><00:11:21.200><c> to</c><00:11:21.440><c> work</c><00:11:22.079><c> so</c>

00:11:22.630 --> 00:11:22.640 align:start position:0%
mainly how the code is going to work so
 

00:11:22.640 --> 00:11:25.430 align:start position:0%
mainly how the code is going to work so
if<00:11:22.800><c> you</c><00:11:23.200><c> recall</c><00:11:23.760><c> how</c><00:11:24.000><c> quick</c><00:11:24.240><c> sort</c><00:11:24.640><c> works</c><00:11:25.200><c> it's</c>

00:11:25.430 --> 00:11:25.440 align:start position:0%
if you recall how quick sort works it's
 

00:11:25.440 --> 00:11:27.190 align:start position:0%
if you recall how quick sort works it's
a<00:11:25.600><c> little</c><00:11:25.760><c> bit</c><00:11:26.000><c> different</c><00:11:26.399><c> right</c><00:11:26.800><c> let's</c><00:11:27.040><c> just</c>

00:11:27.190 --> 00:11:27.200 align:start position:0%
a little bit different right let's just
 

00:11:27.200 --> 00:11:28.949 align:start position:0%
a little bit different right let's just
analyze<00:11:27.600><c> the</c><00:11:27.680><c> time</c><00:11:28.000><c> complexity</c><00:11:28.560><c> right</c><00:11:28.720><c> now</c><00:11:28.800><c> so</c>

00:11:28.949 --> 00:11:28.959 align:start position:0%
analyze the time complexity right now so
 

00:11:28.959 --> 00:11:30.710 align:start position:0%
analyze the time complexity right now so
with<00:11:29.120><c> quick</c><00:11:29.360><c> sort</c><00:11:29.920><c> when</c><00:11:30.079><c> you</c><00:11:30.399><c> do</c><00:11:30.560><c> the</c>

00:11:30.710 --> 00:11:30.720 align:start position:0%
with quick sort when you do the
 

00:11:30.720 --> 00:11:32.230 align:start position:0%
with quick sort when you do the
partition<00:11:31.120><c> then</c><00:11:31.279><c> you</c><00:11:31.360><c> have</c><00:11:31.519><c> to</c><00:11:31.600><c> recursively</c>

00:11:32.230 --> 00:11:32.240 align:start position:0%
partition then you have to recursively
 

00:11:32.240 --> 00:11:34.470 align:start position:0%
partition then you have to recursively
run<00:11:32.640><c> uh</c><00:11:33.040><c> you</c><00:11:33.200><c> know</c><00:11:33.600><c> quicksort</c><00:11:34.000><c> on</c><00:11:34.160><c> the</c><00:11:34.240><c> left</c>

00:11:34.470 --> 00:11:34.480 align:start position:0%
run uh you know quicksort on the left
 

00:11:34.480 --> 00:11:36.389 align:start position:0%
run uh you know quicksort on the left
half<00:11:34.720><c> and</c><00:11:34.959><c> on</c><00:11:35.120><c> the</c><00:11:35.200><c> right</c><00:11:35.440><c> half</c><00:11:35.760><c> which</c><00:11:36.079><c> ends</c><00:11:36.240><c> up</c>

00:11:36.389 --> 00:11:36.399 align:start position:0%
half and on the right half which ends up
 

00:11:36.399 --> 00:11:39.190 align:start position:0%
half and on the right half which ends up
giving<00:11:36.640><c> us</c><00:11:37.120><c> a</c><00:11:37.519><c> average</c><00:11:38.000><c> case</c><00:11:38.240><c> time</c><00:11:38.480><c> complexity</c>

00:11:39.190 --> 00:11:39.200 align:start position:0%
giving us a average case time complexity
 

00:11:39.200 --> 00:11:42.389 align:start position:0%
giving us a average case time complexity
of<00:11:39.760><c> n</c><00:11:40.000><c> log</c><00:11:40.320><c> n</c><00:11:40.720><c> but</c><00:11:40.880><c> in</c><00:11:41.040><c> this</c><00:11:41.360><c> case</c><00:11:42.000><c> uh</c><00:11:42.240><c> the</c>

00:11:42.389 --> 00:11:42.399 align:start position:0%
of n log n but in this case uh the
 

00:11:42.399 --> 00:11:43.750 align:start position:0%
of n log n but in this case uh the
average<00:11:42.720><c> case</c><00:11:42.959><c> is</c><00:11:43.040><c> actually</c><00:11:43.279><c> going</c><00:11:43.360><c> to</c><00:11:43.440><c> be</c><00:11:43.519><c> big</c>

00:11:43.750 --> 00:11:43.760 align:start position:0%
average case is actually going to be big
 

00:11:43.760 --> 00:11:45.430 align:start position:0%
average case is actually going to be big
o<00:11:43.839><c> of</c><00:11:44.079><c> n</c><00:11:44.480><c> because</c><00:11:44.720><c> we're</c><00:11:44.959><c> not</c><00:11:45.120><c> going</c><00:11:45.200><c> to</c><00:11:45.279><c> be</c>

00:11:45.430 --> 00:11:45.440 align:start position:0%
o of n because we're not going to be
 

00:11:45.440 --> 00:11:47.910 align:start position:0%
o of n because we're not going to be
looking<00:11:45.760><c> at</c><00:11:46.160><c> both</c><00:11:46.720><c> halfs</c><00:11:47.200><c> of</c><00:11:47.360><c> the</c><00:11:47.519><c> partition</c>

00:11:47.910 --> 00:11:47.920 align:start position:0%
looking at both halfs of the partition
 

00:11:47.920 --> 00:11:49.269 align:start position:0%
looking at both halfs of the partition
we're<00:11:48.160><c> only</c><00:11:48.320><c> going</c><00:11:48.399><c> to</c><00:11:48.480><c> be</c><00:11:48.640><c> looking</c><00:11:48.880><c> at</c><00:11:49.120><c> at</c>

00:11:49.269 --> 00:11:49.279 align:start position:0%
we're only going to be looking at at
 

00:11:49.279 --> 00:11:51.350 align:start position:0%
we're only going to be looking at at
most<00:11:49.680><c> one</c><00:11:50.000><c> half</c><00:11:50.240><c> of</c><00:11:50.320><c> the</c><00:11:50.480><c> partition</c><00:11:50.880><c> wherever</c>

00:11:51.350 --> 00:11:51.360 align:start position:0%
most one half of the partition wherever
 

00:11:51.360 --> 00:11:53.750 align:start position:0%
most one half of the partition wherever
we<00:11:51.519><c> know</c><00:11:51.680><c> that</c><00:11:51.839><c> the</c><00:11:52.000><c> target</c><00:11:52.399><c> value</c><00:11:52.959><c> happens</c><00:11:53.519><c> to</c>

00:11:53.750 --> 00:11:53.760 align:start position:0%
we know that the target value happens to
 

00:11:53.760 --> 00:11:56.310 align:start position:0%
we know that the target value happens to
be<00:11:54.160><c> and</c><00:11:54.480><c> assuming</c><00:11:55.040><c> in</c><00:11:55.120><c> the</c><00:11:55.279><c> average</c><00:11:55.760><c> case</c>

00:11:56.310 --> 00:11:56.320 align:start position:0%
be and assuming in the average case
 

00:11:56.320 --> 00:11:58.470 align:start position:0%
be and assuming in the average case
every<00:11:56.560><c> time</c><00:11:56.720><c> we</c><00:11:56.880><c> choose</c><00:11:57.279><c> a</c><00:11:57.440><c> pivot</c><00:11:57.839><c> that</c><00:11:58.079><c> pivot</c>

00:11:58.470 --> 00:11:58.480 align:start position:0%
every time we choose a pivot that pivot
 

00:11:58.480 --> 00:12:00.150 align:start position:0%
every time we choose a pivot that pivot
is<00:11:58.560><c> going</c><00:11:58.639><c> to</c><00:11:58.720><c> be</c><00:11:58.959><c> somewhere</c><00:11:59.440><c> in</c><00:11:59.519><c> the</c><00:11:59.760><c> middle</c>

00:12:00.150 --> 00:12:00.160 align:start position:0%
is going to be somewhere in the middle
 

00:12:00.160 --> 00:12:01.670 align:start position:0%
is going to be somewhere in the middle
of<00:12:00.399><c> the</c><00:12:00.639><c> array</c><00:12:00.880><c> it's</c><00:12:01.040><c> going</c><00:12:01.120><c> to</c><00:12:01.200><c> be</c><00:12:01.360><c> middle</c><00:12:01.600><c> of</c>

00:12:01.670 --> 00:12:01.680 align:start position:0%
of the array it's going to be middle of
 

00:12:01.680 --> 00:12:03.190 align:start position:0%
of the array it's going to be middle of
the<00:12:01.839><c> pack</c><00:12:02.079><c> where</c><00:12:02.320><c> half</c><00:12:02.560><c> the</c><00:12:02.639><c> elements</c><00:12:03.040><c> are</c>

00:12:03.190 --> 00:12:03.200 align:start position:0%
the pack where half the elements are
 

00:12:03.200 --> 00:12:04.949 align:start position:0%
the pack where half the elements are
less<00:12:03.360><c> than</c><00:12:03.600><c> half</c><00:12:03.839><c> of</c><00:12:04.000><c> them</c><00:12:04.160><c> are</c><00:12:04.320><c> greater</c><00:12:04.720><c> than</c>

00:12:04.949 --> 00:12:04.959 align:start position:0%
less than half of them are greater than
 

00:12:04.959 --> 00:12:06.550 align:start position:0%
less than half of them are greater than
it<00:12:05.200><c> that's</c><00:12:05.519><c> going</c><00:12:05.600><c> to</c><00:12:05.680><c> give</c><00:12:05.920><c> us</c><00:12:06.320><c> you</c><00:12:06.480><c> can</c>

00:12:06.550 --> 00:12:06.560 align:start position:0%
it that's going to give us you can
 

00:12:06.560 --> 00:12:07.910 align:start position:0%
it that's going to give us you can
probably<00:12:06.800><c> skip</c><00:12:07.120><c> over</c><00:12:07.360><c> this</c><00:12:07.519><c> part</c><00:12:07.760><c> you</c>

00:12:07.910 --> 00:12:07.920 align:start position:0%
probably skip over this part you
 

00:12:07.920 --> 00:12:09.509 align:start position:0%
probably skip over this part you
probably<00:12:08.160><c> don't</c><00:12:08.399><c> care</c><00:12:08.560><c> but</c><00:12:08.800><c> just</c><00:12:08.959><c> to</c><00:12:09.120><c> analyze</c>

00:12:09.509 --> 00:12:09.519 align:start position:0%
probably don't care but just to analyze
 

00:12:09.519 --> 00:12:10.949 align:start position:0%
probably don't care but just to analyze
the<00:12:09.680><c> time</c><00:12:09.839><c> complexity</c><00:12:10.480><c> we're</c><00:12:10.639><c> gonna</c><00:12:10.800><c> have</c><00:12:10.880><c> to</c>

00:12:10.949 --> 00:12:10.959 align:start position:0%
the time complexity we're gonna have to
 

00:12:10.959 --> 00:12:12.710 align:start position:0%
the time complexity we're gonna have to
iterate<00:12:11.360><c> through</c><00:12:11.519><c> the</c><00:12:11.680><c> entire</c><00:12:12.079><c> array</c><00:12:12.399><c> once</c>

00:12:12.710 --> 00:12:12.720 align:start position:0%
iterate through the entire array once
 

00:12:12.720 --> 00:12:14.949 align:start position:0%
iterate through the entire array once
right<00:12:12.959><c> so</c><00:12:13.200><c> let's</c><00:12:13.360><c> say</c><00:12:13.519><c> that's</c><00:12:13.760><c> an</c><00:12:14.000><c> n</c><00:12:14.320><c> operation</c>

00:12:14.949 --> 00:12:14.959 align:start position:0%
right so let's say that's an n operation
 

00:12:14.959 --> 00:12:15.990 align:start position:0%
right so let's say that's an n operation
then<00:12:15.200><c> we're</c><00:12:15.360><c> gonna</c><00:12:15.519><c> have</c><00:12:15.600><c> to</c><00:12:15.680><c> let's</c><00:12:15.839><c> say</c>

00:12:15.990 --> 00:12:16.000 align:start position:0%
then we're gonna have to let's say
 

00:12:16.000 --> 00:12:17.670 align:start position:0%
then we're gonna have to let's say
iterate<00:12:16.320><c> through</c><00:12:16.560><c> half</c><00:12:16.800><c> of</c><00:12:16.880><c> the</c><00:12:17.040><c> array</c><00:12:17.440><c> which</c>

00:12:17.670 --> 00:12:17.680 align:start position:0%
iterate through half of the array which
 

00:12:17.680 --> 00:12:19.910 align:start position:0%
iterate through half of the array which
is<00:12:17.760><c> gonna</c><00:12:17.920><c> be</c><00:12:18.399><c> n</c><00:12:18.639><c> over</c><00:12:18.880><c> two</c><00:12:19.120><c> operation</c><00:12:19.680><c> then</c>

00:12:19.910 --> 00:12:19.920 align:start position:0%
is gonna be n over two operation then
 

00:12:19.920 --> 00:12:21.269 align:start position:0%
is gonna be n over two operation then
we're<00:12:20.079><c> gonna</c><00:12:20.160><c> have</c><00:12:20.240><c> to</c><00:12:20.320><c> iterate</c><00:12:20.639><c> through</c><00:12:21.040><c> half</c>

00:12:21.269 --> 00:12:21.279 align:start position:0%
we're gonna have to iterate through half
 

00:12:21.279 --> 00:12:23.430 align:start position:0%
we're gonna have to iterate through half
of<00:12:21.600><c> that</c><00:12:21.920><c> array</c><00:12:22.240><c> which</c><00:12:22.399><c> is</c><00:12:22.480><c> gonna</c><00:12:22.639><c> be</c><00:12:22.800><c> n</c><00:12:23.120><c> over</c>

00:12:23.430 --> 00:12:23.440 align:start position:0%
of that array which is gonna be n over
 

00:12:23.440 --> 00:12:25.350 align:start position:0%
of that array which is gonna be n over
4.<00:12:23.680><c> this</c><00:12:23.920><c> is</c><00:12:24.079><c> an</c><00:12:24.320><c> infinite</c><00:12:24.720><c> series</c><00:12:25.120><c> that</c><00:12:25.200><c> you</c>

00:12:25.350 --> 00:12:25.360 align:start position:0%
4. this is an infinite series that you
 

00:12:25.360 --> 00:12:27.110 align:start position:0%
4. this is an infinite series that you
might<00:12:25.519><c> remember</c><00:12:25.920><c> from</c><00:12:26.079><c> calculus</c><00:12:26.800><c> this</c>

00:12:27.110 --> 00:12:27.120 align:start position:0%
might remember from calculus this
 

00:12:27.120 --> 00:12:30.069 align:start position:0%
might remember from calculus this
infinite<00:12:27.519><c> series</c><00:12:27.920><c> evaluates</c><00:12:28.639><c> to</c><00:12:29.200><c> 2</c><00:12:29.440><c> times</c><00:12:29.920><c> n</c>

00:12:30.069 --> 00:12:30.079 align:start position:0%
infinite series evaluates to 2 times n
 

00:12:30.079 --> 00:12:31.990 align:start position:0%
infinite series evaluates to 2 times n
which<00:12:30.240><c> we</c><00:12:30.399><c> know</c><00:12:30.639><c> is</c><00:12:30.880><c> linear</c><00:12:31.440><c> so</c><00:12:31.600><c> that</c><00:12:31.760><c> means</c>

00:12:31.990 --> 00:12:32.000 align:start position:0%
which we know is linear so that means
 

00:12:32.000 --> 00:12:33.269 align:start position:0%
which we know is linear so that means
the<00:12:32.160><c> average</c><00:12:32.480><c> taste</c>

00:12:33.269 --> 00:12:33.279 align:start position:0%
the average taste
 

00:12:33.279 --> 00:12:36.069 align:start position:0%
the average taste
average<00:12:33.600><c> case</c><00:12:33.839><c> time</c><00:12:34.079><c> complexity</c><00:12:34.720><c> is</c><00:12:34.959><c> big</c><00:12:35.279><c> o</c><00:12:35.680><c> of</c>

00:12:36.069 --> 00:12:36.079 align:start position:0%
average case time complexity is big o of
 

00:12:36.079 --> 00:12:38.389 align:start position:0%
average case time complexity is big o of
n<00:12:36.720><c> that's</c><00:12:36.959><c> the</c><00:12:37.120><c> average</c><00:12:37.519><c> case</c><00:12:37.839><c> but</c><00:12:38.000><c> we</c><00:12:38.240><c> know</c>

00:12:38.389 --> 00:12:38.399 align:start position:0%
n that's the average case but we know
 

00:12:38.399 --> 00:12:40.550 align:start position:0%
n that's the average case but we know
that<00:12:38.639><c> actually</c><00:12:39.200><c> in</c><00:12:39.360><c> some</c><00:12:39.600><c> cases</c>

00:12:40.550 --> 00:12:40.560 align:start position:0%
that actually in some cases
 

00:12:40.560 --> 00:12:42.230 align:start position:0%
that actually in some cases
we<00:12:40.639><c> could</c><00:12:40.800><c> have</c><00:12:40.959><c> a</c><00:12:41.120><c> pivot</c><00:12:41.440><c> value</c><00:12:41.760><c> let's</c><00:12:41.920><c> say</c>

00:12:42.230 --> 00:12:42.240 align:start position:0%
we could have a pivot value let's say
 

00:12:42.240 --> 00:12:44.069 align:start position:0%
we could have a pivot value let's say
six<00:12:42.480><c> was</c><00:12:42.720><c> our</c><00:12:42.800><c> pivot</c><00:12:43.120><c> value</c><00:12:43.440><c> right</c><00:12:43.600><c> six</c><00:12:43.839><c> was</c>

00:12:44.069 --> 00:12:44.079 align:start position:0%
six was our pivot value right six was
 

00:12:44.079 --> 00:12:46.069 align:start position:0%
six was our pivot value right six was
here<00:12:44.399><c> then</c><00:12:44.639><c> when</c><00:12:44.800><c> we</c><00:12:44.959><c> partitioned</c><00:12:45.440><c> the</c><00:12:45.600><c> array</c>

00:12:46.069 --> 00:12:46.079 align:start position:0%
here then when we partitioned the array
 

00:12:46.079 --> 00:12:47.750 align:start position:0%
here then when we partitioned the array
our<00:12:46.240><c> p</c><00:12:46.560><c> pointer</c><00:12:46.959><c> is</c><00:12:47.120><c> actually</c><00:12:47.360><c> going</c><00:12:47.440><c> to</c><00:12:47.519><c> be</c>

00:12:47.750 --> 00:12:47.760 align:start position:0%
our p pointer is actually going to be
 

00:12:47.760 --> 00:12:49.269 align:start position:0%
our p pointer is actually going to be
over<00:12:48.079><c> here</c><00:12:48.560><c> so</c>

00:12:49.269 --> 00:12:49.279 align:start position:0%
over here so
 

00:12:49.279 --> 00:12:50.790 align:start position:0%
over here so
and<00:12:49.440><c> let's</c><00:12:49.600><c> say</c><00:12:49.760><c> we</c><00:12:49.920><c> didn't</c><00:12:50.160><c> find</c><00:12:50.399><c> the</c><00:12:50.560><c> result</c>

00:12:50.790 --> 00:12:50.800 align:start position:0%
and let's say we didn't find the result
 

00:12:50.800 --> 00:12:52.470 align:start position:0%
and let's say we didn't find the result
then<00:12:50.959><c> we're</c><00:12:51.120><c> gonna</c><00:12:51.279><c> have</c><00:12:51.440><c> to</c><00:12:52.000><c> look</c><00:12:52.160><c> through</c>

00:12:52.470 --> 00:12:52.480 align:start position:0%
then we're gonna have to look through
 

00:12:52.480 --> 00:12:54.710 align:start position:0%
then we're gonna have to look through
pretty<00:12:52.639><c> much</c><00:12:52.880><c> the</c><00:12:53.040><c> entire</c><00:12:53.519><c> array</c><00:12:53.920><c> except</c><00:12:54.399><c> one</c>

00:12:54.710 --> 00:12:54.720 align:start position:0%
pretty much the entire array except one
 

00:12:54.720 --> 00:12:57.030 align:start position:0%
pretty much the entire array except one
element<00:12:55.120><c> and</c><00:12:55.279><c> let's</c><00:12:55.600><c> and</c><00:12:55.680><c> it</c><00:12:55.760><c> could</c><00:12:56.000><c> be</c><00:12:56.560><c> uh</c><00:12:56.880><c> the</c>

00:12:57.030 --> 00:12:57.040 align:start position:0%
element and let's and it could be uh the
 

00:12:57.040 --> 00:12:58.870 align:start position:0%
element and let's and it could be uh the
array<00:12:57.360><c> could</c><00:12:57.519><c> be</c><00:12:57.760><c> organized</c><00:12:58.240><c> in</c><00:12:58.320><c> such</c><00:12:58.560><c> a</c><00:12:58.639><c> way</c>

00:12:58.870 --> 00:12:58.880 align:start position:0%
array could be organized in such a way
 

00:12:58.880 --> 00:13:01.110 align:start position:0%
array could be organized in such a way
that<00:12:59.040><c> every</c><00:12:59.279><c> time</c><00:12:59.519><c> we</c><00:12:59.680><c> choose</c><00:13:00.240><c> a</c><00:13:00.560><c> pivot</c><00:13:00.959><c> that</c>

00:13:01.110 --> 00:13:01.120 align:start position:0%
that every time we choose a pivot that
 

00:13:01.120 --> 00:13:03.509 align:start position:0%
that every time we choose a pivot that
pivot<00:13:01.440><c> is</c><00:13:01.600><c> always</c><00:13:01.920><c> the</c><00:13:02.079><c> greatest</c><00:13:02.639><c> value</c><00:13:03.200><c> so</c>

00:13:03.509 --> 00:13:03.519 align:start position:0%
pivot is always the greatest value so
 

00:13:03.519 --> 00:13:05.190 align:start position:0%
pivot is always the greatest value so
basically<00:13:04.000><c> each</c><00:13:04.160><c> time</c><00:13:04.560><c> we</c><00:13:04.720><c> iterate</c><00:13:05.040><c> through</c>

00:13:05.190 --> 00:13:05.200 align:start position:0%
basically each time we iterate through
 

00:13:05.200 --> 00:13:07.430 align:start position:0%
basically each time we iterate through
the<00:13:05.279><c> entire</c><00:13:05.680><c> array</c><00:13:06.160><c> we</c><00:13:06.320><c> eliminate</c><00:13:06.720><c> one</c><00:13:06.959><c> value</c>

00:13:07.430 --> 00:13:07.440 align:start position:0%
the entire array we eliminate one value
 

00:13:07.440 --> 00:13:08.790 align:start position:0%
the entire array we eliminate one value
we<00:13:07.600><c> iterate</c><00:13:07.920><c> through</c><00:13:08.079><c> the</c><00:13:08.160><c> entire</c><00:13:08.480><c> array</c>

00:13:08.790 --> 00:13:08.800 align:start position:0%
we iterate through the entire array
 

00:13:08.800 --> 00:13:11.430 align:start position:0%
we iterate through the entire array
again<00:13:09.279><c> we</c><00:13:09.440><c> eliminate</c><00:13:09.839><c> one</c><00:13:10.079><c> value</c><00:13:10.720><c> we</c><00:13:11.120><c> iterate</c>

00:13:11.430 --> 00:13:11.440 align:start position:0%
again we eliminate one value we iterate
 

00:13:11.440 --> 00:13:13.430 align:start position:0%
again we eliminate one value we iterate
through<00:13:11.600><c> the</c><00:13:11.680><c> entire</c><00:13:11.920><c> array</c><00:13:12.240><c> again</c><00:13:13.040><c> eliminate</c>

00:13:13.430 --> 00:13:13.440 align:start position:0%
through the entire array again eliminate
 

00:13:13.440 --> 00:13:15.590 align:start position:0%
through the entire array again eliminate
one<00:13:13.600><c> value</c><00:13:13.920><c> so</c><00:13:14.079><c> that's</c><00:13:14.320><c> an</c><00:13:14.560><c> n</c><00:13:14.800><c> squared</c><00:13:15.360><c> time</c>

00:13:15.590 --> 00:13:15.600 align:start position:0%
one value so that's an n squared time
 

00:13:15.600 --> 00:13:17.829 align:start position:0%
one value so that's an n squared time
complexity<00:13:16.240><c> in</c><00:13:16.320><c> the</c><00:13:16.560><c> worst</c><00:13:16.959><c> case</c><00:13:17.360><c> but</c><00:13:17.519><c> like</c><00:13:17.760><c> i</c>

00:13:17.829 --> 00:13:17.839 align:start position:0%
complexity in the worst case but like i
 

00:13:17.839 --> 00:13:20.069 align:start position:0%
complexity in the worst case but like i
said<00:13:18.079><c> the</c><00:13:18.240><c> average</c><00:13:18.639><c> case</c><00:13:18.880><c> is</c><00:13:19.040><c> actually</c><00:13:19.440><c> big</c><00:13:19.839><c> o</c>

00:13:20.069 --> 00:13:20.079 align:start position:0%
said the average case is actually big o
 

00:13:20.079 --> 00:13:22.790 align:start position:0%
said the average case is actually big o
of<00:13:20.399><c> n</c><00:13:20.959><c> okay</c><00:13:21.200><c> that</c><00:13:21.360><c> was</c><00:13:21.600><c> definitely</c><00:13:22.000><c> a</c><00:13:22.079><c> mouthful</c>

00:13:22.790 --> 00:13:22.800 align:start position:0%
of n okay that was definitely a mouthful
 

00:13:22.800 --> 00:13:25.190 align:start position:0%
of n okay that was definitely a mouthful
so<00:13:23.360><c> now</c><00:13:23.680><c> we</c><00:13:23.839><c> are</c><00:13:24.000><c> ready</c><00:13:24.240><c> to</c><00:13:24.399><c> get</c><00:13:24.560><c> into</c><00:13:24.800><c> the</c><00:13:24.880><c> code</c>

00:13:25.190 --> 00:13:25.200 align:start position:0%
so now we are ready to get into the code
 

00:13:25.200 --> 00:13:27.509 align:start position:0%
so now we are ready to get into the code
it's<00:13:25.440><c> not</c><00:13:25.760><c> too</c><00:13:26.160><c> difficult</c><00:13:26.720><c> the</c><00:13:26.880><c> code</c><00:13:27.200><c> and</c><00:13:27.279><c> like</c>

00:13:27.509 --> 00:13:27.519 align:start position:0%
it's not too difficult the code and like
 

00:13:27.519 --> 00:13:29.190 align:start position:0%
it's not too difficult the code and like
i<00:13:27.600><c> mentioned</c><00:13:27.920><c> earlier</c><00:13:28.399><c> the</c><00:13:28.560><c> easiest</c><00:13:28.880><c> way</c><00:13:29.040><c> to</c>

00:13:29.190 --> 00:13:29.200 align:start position:0%
i mentioned earlier the easiest way to
 

00:13:29.200 --> 00:13:30.790 align:start position:0%
i mentioned earlier the easiest way to
solve<00:13:29.440><c> this</c><00:13:29.600><c> problem</c><00:13:29.920><c> is</c><00:13:30.000><c> just</c><00:13:30.160><c> two</c><00:13:30.399><c> lines</c><00:13:30.639><c> of</c>

00:13:30.790 --> 00:13:30.800 align:start position:0%
solve this problem is just two lines of
 

00:13:30.800 --> 00:13:32.790 align:start position:0%
solve this problem is just two lines of
code<00:13:31.120><c> sort</c><00:13:31.440><c> it</c><00:13:31.519><c> and</c><00:13:31.600><c> then</c><00:13:31.760><c> return</c>

00:13:32.790 --> 00:13:32.800 align:start position:0%
code sort it and then return
 

00:13:32.800 --> 00:13:35.750 align:start position:0%
code sort it and then return
the<00:13:32.959><c> length</c><00:13:33.279><c> minus</c><00:13:33.680><c> k</c><00:13:34.320><c> you</c><00:13:34.480><c> know</c><00:13:34.639><c> that</c><00:13:34.880><c> index</c>

00:13:35.750 --> 00:13:35.760 align:start position:0%
the length minus k you know that index
 

00:13:35.760 --> 00:13:37.750 align:start position:0%
the length minus k you know that index
and<00:13:35.920><c> that</c><00:13:36.160><c> actually</c><00:13:36.480><c> happens</c><00:13:36.800><c> to</c><00:13:36.880><c> be</c><00:13:37.200><c> faster</c>

00:13:37.750 --> 00:13:37.760 align:start position:0%
and that actually happens to be faster
 

00:13:37.760 --> 00:13:40.389 align:start position:0%
and that actually happens to be faster
on<00:13:38.000><c> leak</c><00:13:38.240><c> code</c><00:13:38.560><c> than</c><00:13:38.959><c> the</c><00:13:39.120><c> quick</c><00:13:39.360><c> select</c>

00:13:40.389 --> 00:13:40.399 align:start position:0%
on leak code than the quick select
 

00:13:40.399 --> 00:13:42.790 align:start position:0%
on leak code than the quick select
the<00:13:40.639><c> quick</c><00:13:40.880><c> select</c><00:13:41.440><c> algorithm</c><00:13:42.160><c> but</c><00:13:42.399><c> i'm</c><00:13:42.639><c> still</c>

00:13:42.790 --> 00:13:42.800 align:start position:0%
the quick select algorithm but i'm still
 

00:13:42.800 --> 00:13:44.310 align:start position:0%
the quick select algorithm but i'm still
going<00:13:42.959><c> to</c><00:13:43.040><c> code</c><00:13:43.279><c> the</c><00:13:43.360><c> quick</c><00:13:43.600><c> select</c><00:13:44.000><c> anyway</c>

00:13:44.310 --> 00:13:44.320 align:start position:0%
going to code the quick select anyway
 

00:13:44.320 --> 00:13:45.910 align:start position:0%
going to code the quick select anyway
because<00:13:44.560><c> the</c><00:13:44.639><c> average</c><00:13:45.040><c> case</c><00:13:45.360><c> happens</c><00:13:45.680><c> to</c><00:13:45.760><c> be</c>

00:13:45.910 --> 00:13:45.920 align:start position:0%
because the average case happens to be
 

00:13:45.920 --> 00:13:47.430 align:start position:0%
because the average case happens to be
more<00:13:46.160><c> efficient</c><00:13:46.639><c> and</c><00:13:46.720><c> it's</c><00:13:46.880><c> definitely</c><00:13:47.360><c> a</c>

00:13:47.430 --> 00:13:47.440 align:start position:0%
more efficient and it's definitely a
 

00:13:47.440 --> 00:13:50.230 align:start position:0%
more efficient and it's definitely a
more<00:13:47.680><c> interesting</c><00:13:48.160><c> solution</c><00:13:48.639><c> so</c><00:13:49.199><c> like</c><00:13:49.440><c> i</c><00:13:49.680><c> said</c>

00:13:50.230 --> 00:13:50.240 align:start position:0%
more interesting solution so like i said
 

00:13:50.240 --> 00:13:51.670 align:start position:0%
more interesting solution so like i said
the<00:13:50.480><c> index</c><00:13:50.880><c> that</c><00:13:50.959><c> we're</c><00:13:51.120><c> going</c><00:13:51.199><c> to</c><00:13:51.279><c> be</c><00:13:51.360><c> looking</c>

00:13:51.670 --> 00:13:51.680 align:start position:0%
the index that we're going to be looking
 

00:13:51.680 --> 00:13:53.590 align:start position:0%
the index that we're going to be looking
for<00:13:51.920><c> the</c><00:13:52.079><c> target</c><00:13:52.560><c> index</c><00:13:53.040><c> that</c><00:13:53.199><c> we're</c><00:13:53.360><c> looking</c>

00:13:53.590 --> 00:13:53.600 align:start position:0%
for the target index that we're looking
 

00:13:53.600 --> 00:13:55.189 align:start position:0%
for the target index that we're looking
for<00:13:53.760><c> is</c><00:13:53.839><c> going</c><00:13:53.920><c> to</c><00:13:54.000><c> be</c><00:13:54.160><c> the</c><00:13:54.399><c> length</c><00:13:54.800><c> of</c><00:13:55.040><c> the</c>

00:13:55.189 --> 00:13:55.199 align:start position:0%
for is going to be the length of the
 

00:13:55.199 --> 00:13:57.670 align:start position:0%
for is going to be the length of the
array<00:13:55.920><c> minus</c><00:13:56.399><c> k</c><00:13:56.639><c> so</c><00:13:56.800><c> what</c><00:13:56.959><c> i'm</c><00:13:57.120><c> going</c><00:13:57.199><c> to</c><00:13:57.279><c> do</c><00:13:57.519><c> is</c>

00:13:57.670 --> 00:13:57.680 align:start position:0%
array minus k so what i'm going to do is
 

00:13:57.680 --> 00:13:58.629 align:start position:0%
array minus k so what i'm going to do is
just

00:13:58.629 --> 00:13:58.639 align:start position:0%
just
 

00:13:58.639 --> 00:14:00.710 align:start position:0%
just
take<00:13:58.959><c> k</c><00:13:59.199><c> and</c><00:13:59.360><c> reassign</c><00:13:59.920><c> it</c><00:14:00.000><c> to</c><00:14:00.160><c> this</c><00:14:00.399><c> just</c><00:14:00.639><c> to</c>

00:14:00.710 --> 00:14:00.720 align:start position:0%
take k and reassign it to this just to
 

00:14:00.720 --> 00:14:02.949 align:start position:0%
take k and reassign it to this just to
make<00:14:00.880><c> it</c><00:14:01.040><c> easier</c><00:14:01.440><c> for</c><00:14:01.600><c> us</c><00:14:02.000><c> because</c><00:14:02.560><c> this</c><00:14:02.800><c> is</c>

00:14:02.949 --> 00:14:02.959 align:start position:0%
make it easier for us because this is
 

00:14:02.959 --> 00:14:05.030 align:start position:0%
make it easier for us because this is
the<00:14:03.199><c> index</c><00:14:03.680><c> right</c><00:14:03.839><c> k</c><00:14:04.160><c> i'm</c><00:14:04.320><c> going</c><00:14:04.399><c> to</c><00:14:04.480><c> use</c><00:14:04.639><c> k</c><00:14:04.959><c> as</c>

00:14:05.030 --> 00:14:05.040 align:start position:0%
the index right k i'm going to use k as
 

00:14:05.040 --> 00:14:07.189 align:start position:0%
the index right k i'm going to use k as
the<00:14:05.279><c> index</c><00:14:05.680><c> that</c><00:14:05.760><c> we're</c><00:14:06.000><c> looking</c><00:14:06.320><c> for</c><00:14:06.480><c> the</c><00:14:06.639><c> kth</c>

00:14:07.189 --> 00:14:07.199 align:start position:0%
the index that we're looking for the kth
 

00:14:07.199 --> 00:14:09.590 align:start position:0%
the index that we're looking for the kth
largest<00:14:07.680><c> element</c><00:14:08.160><c> if</c><00:14:08.240><c> the</c><00:14:08.399><c> array</c><00:14:08.720><c> was</c><00:14:08.959><c> sorted</c>

00:14:09.590 --> 00:14:09.600 align:start position:0%
largest element if the array was sorted
 

00:14:09.600 --> 00:14:10.790 align:start position:0%
largest element if the array was sorted
so<00:14:10.000><c> now</c>

00:14:10.790 --> 00:14:10.800 align:start position:0%
so now
 

00:14:10.800 --> 00:14:12.389 align:start position:0%
so now
we're<00:14:10.959><c> going</c><00:14:11.040><c> to</c><00:14:11.120><c> do</c><00:14:11.279><c> that</c><00:14:11.519><c> recursive</c><00:14:12.160><c> quick</c>

00:14:12.389 --> 00:14:12.399 align:start position:0%
we're going to do that recursive quick
 

00:14:12.399 --> 00:14:15.350 align:start position:0%
we're going to do that recursive quick
select<00:14:12.800><c> algorithm</c><00:14:13.600><c> and</c><00:14:14.079><c> since</c><00:14:14.560><c> every</c><00:14:14.880><c> time</c>

00:14:15.350 --> 00:14:15.360 align:start position:0%
select algorithm and since every time
 

00:14:15.360 --> 00:14:17.269 align:start position:0%
select algorithm and since every time
the<00:14:15.839><c> subarray</c><00:14:16.399><c> that</c><00:14:16.480><c> we're</c><00:14:16.720><c> looking</c><00:14:17.040><c> at</c><00:14:17.199><c> and</c>

00:14:17.269 --> 00:14:17.279 align:start position:0%
the subarray that we're looking at and
 

00:14:17.279 --> 00:14:18.710 align:start position:0%
the subarray that we're looking at and
running<00:14:17.600><c> quick</c><00:14:17.760><c> select</c><00:14:18.079><c> changes</c><00:14:18.480><c> we're</c><00:14:18.639><c> going</c>

00:14:18.710 --> 00:14:18.720 align:start position:0%
running quick select changes we're going
 

00:14:18.720 --> 00:14:20.150 align:start position:0%
running quick select changes we're going
to<00:14:18.800><c> pass</c><00:14:19.040><c> in</c><00:14:19.199><c> two</c><00:14:19.440><c> variables</c><00:14:19.839><c> we're</c><00:14:20.000><c> going</c><00:14:20.079><c> to</c>

00:14:20.150 --> 00:14:20.160 align:start position:0%
to pass in two variables we're going to
 

00:14:20.160 --> 00:14:21.670 align:start position:0%
to pass in two variables we're going to
pass<00:14:20.399><c> in</c><00:14:20.560><c> the</c><00:14:20.639><c> left</c><00:14:20.880><c> and</c><00:14:20.959><c> right</c><00:14:21.199><c> pointer</c><00:14:21.519><c> this</c>

00:14:21.670 --> 00:14:21.680 align:start position:0%
pass in the left and right pointer this
 

00:14:21.680 --> 00:14:23.990 align:start position:0%
pass in the left and right pointer this
tells<00:14:22.000><c> us</c><00:14:22.240><c> on</c><00:14:22.480><c> which</c><00:14:22.800><c> portion</c><00:14:23.360><c> of</c><00:14:23.440><c> the</c><00:14:23.600><c> array</c>

00:14:23.990 --> 00:14:24.000 align:start position:0%
tells us on which portion of the array
 

00:14:24.000 --> 00:14:26.550 align:start position:0%
tells us on which portion of the array
are<00:14:24.160><c> we</c><00:14:24.399><c> currently</c><00:14:24.880><c> running</c><00:14:25.279><c> quick</c><00:14:25.519><c> select</c><00:14:26.079><c> on</c>

00:14:26.550 --> 00:14:26.560 align:start position:0%
are we currently running quick select on
 

00:14:26.560 --> 00:14:28.069 align:start position:0%
are we currently running quick select on
then<00:14:26.880><c> when</c><00:14:27.040><c> you</c><00:14:27.199><c> actually</c><00:14:27.519><c> implement</c><00:14:27.920><c> quick</c>

00:14:28.069 --> 00:14:28.079 align:start position:0%
then when you actually implement quick
 

00:14:28.079 --> 00:14:30.230 align:start position:0%
then when you actually implement quick
select<00:14:28.639><c> you</c><00:14:28.880><c> choose</c><00:14:29.279><c> the</c><00:14:29.600><c> pivot</c><00:14:30.000><c> we're</c><00:14:30.160><c> going</c>

00:14:30.230 --> 00:14:30.240 align:start position:0%
select you choose the pivot we're going
 

00:14:30.240 --> 00:14:31.910 align:start position:0%
select you choose the pivot we're going
to<00:14:30.320><c> choose</c><00:14:30.560><c> the</c><00:14:30.720><c> right</c><00:14:30.959><c> most</c><00:14:31.279><c> value</c><00:14:31.680><c> because</c>

00:14:31.910 --> 00:14:31.920 align:start position:0%
to choose the right most value because
 

00:14:31.920 --> 00:14:33.350 align:start position:0%
to choose the right most value because
it's<00:14:32.160><c> easy</c>

00:14:33.350 --> 00:14:33.360 align:start position:0%
it's easy
 

00:14:33.360 --> 00:14:35.189 align:start position:0%
it's easy
and<00:14:33.760><c> we're</c><00:14:33.920><c> going</c><00:14:34.000><c> to</c><00:14:34.079><c> have</c><00:14:34.320><c> our</c><00:14:34.480><c> p</c><00:14:34.720><c> pointer</c>

00:14:35.189 --> 00:14:35.199 align:start position:0%
and we're going to have our p pointer
 

00:14:35.199 --> 00:14:39.110 align:start position:0%
and we're going to have our p pointer
initially<00:14:35.680><c> being</c><00:14:36.000><c> at</c><00:14:36.240><c> the</c><00:14:36.399><c> leftmost</c><00:14:37.040><c> value</c><00:14:37.600><c> so</c>

00:14:39.110 --> 00:14:39.120 align:start position:0%
initially being at the leftmost value so
 

00:14:39.120 --> 00:14:41.590 align:start position:0%
initially being at the leftmost value so
pivot<00:14:39.600><c> is</c><00:14:39.760><c> going</c><00:14:39.839><c> to</c><00:14:39.920><c> be</c><00:14:40.079><c> set</c><00:14:40.320><c> to</c><00:14:40.560><c> nums</c><00:14:41.120><c> of</c>

00:14:41.590 --> 00:14:41.600 align:start position:0%
pivot is going to be set to nums of
 

00:14:41.600 --> 00:14:44.150 align:start position:0%
pivot is going to be set to nums of
right<00:14:42.240><c> p</c><00:14:42.560><c> the</c><00:14:42.800><c> pointer</c><00:14:43.360><c> is</c><00:14:43.519><c> going</c><00:14:43.600><c> to</c><00:14:43.680><c> be</c><00:14:43.839><c> set</c>

00:14:44.150 --> 00:14:44.160 align:start position:0%
right p the pointer is going to be set
 

00:14:44.160 --> 00:14:47.030 align:start position:0%
right p the pointer is going to be set
to<00:14:44.639><c> the</c><00:14:44.880><c> leftmost</c><00:14:45.680><c> position</c><00:14:46.480><c> just</c><00:14:46.720><c> like</c><00:14:46.880><c> i</c>

00:14:47.030 --> 00:14:47.040 align:start position:0%
to the leftmost position just like i
 

00:14:47.040 --> 00:14:49.829 align:start position:0%
to the leftmost position just like i
showed<00:14:47.360><c> in</c><00:14:47.440><c> the</c><00:14:47.600><c> drawing</c><00:14:48.240><c> and</c><00:14:48.480><c> then</c><00:14:49.040><c> uh</c>

00:14:49.829 --> 00:14:49.839 align:start position:0%
showed in the drawing and then uh
 

00:14:49.839 --> 00:14:50.949 align:start position:0%
showed in the drawing and then uh
pretty<00:14:50.000><c> much</c><00:14:50.160><c> like</c><00:14:50.320><c> the</c><00:14:50.480><c> drawing</c><00:14:50.720><c> we're</c><00:14:50.800><c> just</c>

00:14:50.949 --> 00:14:50.959 align:start position:0%
pretty much like the drawing we're just
 

00:14:50.959 --> 00:14:52.069 align:start position:0%
pretty much like the drawing we're just
going<00:14:51.040><c> to</c><00:14:51.120><c> go</c><00:14:51.279><c> ahead</c><00:14:51.360><c> and</c><00:14:51.519><c> iterate</c><00:14:51.920><c> through</c>

00:14:52.069 --> 00:14:52.079 align:start position:0%
going to go ahead and iterate through
 

00:14:52.079 --> 00:14:54.230 align:start position:0%
going to go ahead and iterate through
the<00:14:52.320><c> entire</c><00:14:52.800><c> array</c><00:14:53.120><c> except</c><00:14:53.440><c> the</c><00:14:53.600><c> last</c><00:14:53.920><c> element</c>

00:14:54.230 --> 00:14:54.240 align:start position:0%
the entire array except the last element
 

00:14:54.240 --> 00:14:55.829 align:start position:0%
the entire array except the last element
so<00:14:54.399><c> we're</c><00:14:54.480><c> going</c><00:14:54.560><c> to</c><00:14:54.639><c> go</c><00:14:54.800><c> from</c><00:14:55.040><c> index</c><00:14:55.440><c> left</c><00:14:55.680><c> all</c>

00:14:55.829 --> 00:14:55.839 align:start position:0%
so we're going to go from index left all
 

00:14:55.839 --> 00:14:57.189 align:start position:0%
so we're going to go from index left all
the<00:14:55.920><c> way</c><00:14:56.079><c> to</c><00:14:56.320><c> right</c>

00:14:57.189 --> 00:14:57.199 align:start position:0%
the way to right
 

00:14:57.199 --> 00:14:59.350 align:start position:0%
the way to right
right<00:14:57.519><c> is</c><00:14:57.760><c> non-inclusive</c><00:14:58.560><c> in</c><00:14:58.639><c> python</c><00:14:59.040><c> so</c><00:14:59.199><c> it's</c>

00:14:59.350 --> 00:14:59.360 align:start position:0%
right is non-inclusive in python so it's
 

00:14:59.360 --> 00:15:00.710 align:start position:0%
right is non-inclusive in python so it's
not<00:14:59.519><c> actually</c><00:14:59.760><c> going</c><00:14:59.839><c> to</c><00:15:00.000><c> reach</c><00:15:00.320><c> the</c><00:15:00.480><c> right</c>

00:15:00.710 --> 00:15:00.720 align:start position:0%
not actually going to reach the right
 

00:15:00.720 --> 00:15:03.350 align:start position:0%
not actually going to reach the right
index<00:15:01.360><c> and</c><00:15:01.839><c> we'll</c><00:15:02.079><c> go</c><00:15:02.240><c> through</c><00:15:02.480><c> each</c><00:15:02.639><c> element</c>

00:15:03.350 --> 00:15:03.360 align:start position:0%
index and we'll go through each element
 

00:15:03.360 --> 00:15:06.470 align:start position:0%
index and we'll go through each element
if<00:15:03.839><c> this</c><00:15:04.079><c> element</c><00:15:04.480><c> nums</c><00:15:04.800><c> of</c><00:15:04.959><c> i</c><00:15:05.199><c> happens</c><00:15:05.519><c> to</c><00:15:05.680><c> be</c>

00:15:06.470 --> 00:15:06.480 align:start position:0%
if this element nums of i happens to be
 

00:15:06.480 --> 00:15:08.389 align:start position:0%
if this element nums of i happens to be
less<00:15:06.720><c> than</c><00:15:06.880><c> or</c><00:15:07.040><c> equal</c><00:15:07.360><c> to</c><00:15:07.519><c> the</c><00:15:07.680><c> pivot</c><00:15:08.079><c> value</c>

00:15:08.389 --> 00:15:08.399 align:start position:0%
less than or equal to the pivot value
 

00:15:08.399 --> 00:15:10.710 align:start position:0%
less than or equal to the pivot value
then<00:15:08.560><c> we're</c><00:15:08.720><c> going</c><00:15:08.800><c> to</c><00:15:08.959><c> swap</c><00:15:09.360><c> it</c><00:15:09.839><c> with</c>

00:15:10.710 --> 00:15:10.720 align:start position:0%
then we're going to swap it with
 

00:15:10.720 --> 00:15:13.030 align:start position:0%
then we're going to swap it with
the<00:15:10.959><c> left</c><00:15:11.440><c> index</c><00:15:12.000><c> or</c><00:15:12.160><c> not</c><00:15:12.320><c> the</c><00:15:12.399><c> left</c><00:15:12.720><c> index</c>

00:15:13.030 --> 00:15:13.040 align:start position:0%
the left index or not the left index
 

00:15:13.040 --> 00:15:15.110 align:start position:0%
the left index or not the left index
actually<00:15:13.360><c> the</c><00:15:13.680><c> p</c><00:15:14.079><c> index</c><00:15:14.560><c> right</c><00:15:14.720><c> wherever</c>

00:15:15.110 --> 00:15:15.120 align:start position:0%
actually the p index right wherever
 

00:15:15.120 --> 00:15:18.790 align:start position:0%
actually the p index right wherever
we're<00:15:15.360><c> putting</c><00:15:16.160><c> uh</c><00:15:16.560><c> the</c><00:15:16.720><c> partition</c><00:15:17.279><c> values</c><00:15:18.079><c> so</c>

00:15:18.790 --> 00:15:18.800 align:start position:0%
we're putting uh the partition values so
 

00:15:18.800 --> 00:15:21.350 align:start position:0%
we're putting uh the partition values so
if<00:15:18.959><c> this</c><00:15:19.199><c> is</c><00:15:19.279><c> the</c><00:15:19.440><c> case</c><00:15:20.000><c> we're</c><00:15:20.240><c> gonna</c><00:15:20.720><c> set</c><00:15:21.040><c> nums</c>

00:15:21.350 --> 00:15:21.360 align:start position:0%
if this is the case we're gonna set nums
 

00:15:21.360 --> 00:15:24.870 align:start position:0%
if this is the case we're gonna set nums
of<00:15:21.600><c> p</c><00:15:22.240><c> equal</c><00:15:22.639><c> to</c><00:15:22.800><c> nums</c><00:15:23.199><c> of</c><00:15:23.519><c> i</c><00:15:24.240><c> and</c><00:15:24.480><c> we're</c><00:15:24.639><c> gonna</c>

00:15:24.870 --> 00:15:24.880 align:start position:0%
of p equal to nums of i and we're gonna
 

00:15:24.880 --> 00:15:27.509 align:start position:0%
of p equal to nums of i and we're gonna
set<00:15:25.120><c> nums</c><00:15:25.440><c> of</c><00:15:25.600><c> i</c><00:15:26.079><c> equal</c><00:15:26.399><c> to</c><00:15:26.560><c> nums</c><00:15:26.880><c> of</c><00:15:27.040><c> p</c><00:15:27.279><c> you</c><00:15:27.360><c> can</c>

00:15:27.509 --> 00:15:27.519 align:start position:0%
set nums of i equal to nums of p you can
 

00:15:27.519 --> 00:15:29.509 align:start position:0%
set nums of i equal to nums of p you can
do<00:15:27.680><c> that</c><00:15:27.839><c> in</c><00:15:28.000><c> one</c><00:15:28.320><c> line</c><00:15:28.639><c> in</c><00:15:28.800><c> python</c><00:15:29.279><c> you</c><00:15:29.440><c> don't</c>

00:15:29.509 --> 00:15:29.519 align:start position:0%
do that in one line in python you don't
 

00:15:29.519 --> 00:15:31.749 align:start position:0%
do that in one line in python you don't
need<00:15:29.759><c> a</c><00:15:29.839><c> swap</c><00:15:30.240><c> helper</c><00:15:30.639><c> function</c><00:15:31.279><c> we</c><00:15:31.440><c> can</c><00:15:31.519><c> do</c><00:15:31.680><c> it</c>

00:15:31.749 --> 00:15:31.759 align:start position:0%
need a swap helper function we can do it
 

00:15:31.759 --> 00:15:33.350 align:start position:0%
need a swap helper function we can do it
just<00:15:32.000><c> like</c><00:15:32.399><c> this</c>

00:15:33.350 --> 00:15:33.360 align:start position:0%
just like this
 

00:15:33.360 --> 00:15:35.829 align:start position:0%
just like this
so<00:15:33.600><c> we're</c><00:15:33.759><c> just</c><00:15:34.000><c> swapping</c><00:15:34.480><c> these</c><00:15:34.880><c> two</c><00:15:35.199><c> values</c>

00:15:35.829 --> 00:15:35.839 align:start position:0%
so we're just swapping these two values
 

00:15:35.839 --> 00:15:38.150 align:start position:0%
so we're just swapping these two values
it's<00:15:36.399><c> pretty</c><00:15:36.800><c> straight</c><00:15:37.199><c> forward</c>

00:15:38.150 --> 00:15:38.160 align:start position:0%
it's pretty straight forward
 

00:15:38.160 --> 00:15:40.069 align:start position:0%
it's pretty straight forward
remember<00:15:38.480><c> every</c><00:15:38.720><c> time</c><00:15:38.880><c> we</c><00:15:39.040><c> do</c><00:15:39.279><c> do</c><00:15:39.519><c> a</c><00:15:39.600><c> swap</c>

00:15:40.069 --> 00:15:40.079 align:start position:0%
remember every time we do do a swap
 

00:15:40.079 --> 00:15:41.990 align:start position:0%
remember every time we do do a swap
though<00:15:40.480><c> then</c><00:15:40.720><c> we</c><00:15:40.880><c> want</c><00:15:41.040><c> to</c><00:15:41.199><c> increment</c><00:15:41.600><c> the</c><00:15:41.759><c> p</c>

00:15:41.990 --> 00:15:42.000 align:start position:0%
though then we want to increment the p
 

00:15:42.000 --> 00:15:43.590 align:start position:0%
though then we want to increment the p
pointer<00:15:42.320><c> because</c><00:15:42.560><c> next</c><00:15:42.720><c> time</c><00:15:42.880><c> we</c><00:15:43.040><c> do</c><00:15:43.120><c> a</c><00:15:43.199><c> swap</c>

00:15:43.590 --> 00:15:43.600 align:start position:0%
pointer because next time we do a swap
 

00:15:43.600 --> 00:15:46.710 align:start position:0%
pointer because next time we do a swap
we<00:15:43.759><c> want</c><00:15:43.920><c> to</c><00:15:44.079><c> put</c><00:15:44.320><c> it</c><00:15:44.480><c> in</c><00:15:44.880><c> the</c><00:15:45.279><c> next</c><00:15:45.839><c> position</c>

00:15:46.710 --> 00:15:46.720 align:start position:0%
we want to put it in the next position
 

00:15:46.720 --> 00:15:48.710 align:start position:0%
we want to put it in the next position
okay<00:15:46.959><c> so</c><00:15:47.199><c> that's</c><00:15:47.680><c> the</c><00:15:47.920><c> partition</c><00:15:48.480><c> and</c><00:15:48.560><c> the</c>

00:15:48.710 --> 00:15:48.720 align:start position:0%
okay so that's the partition and the
 

00:15:48.720 --> 00:15:52.230 align:start position:0%
okay so that's the partition and the
last<00:15:49.120><c> part</c><00:15:49.440><c> of</c><00:15:49.519><c> the</c><00:15:49.680><c> partition</c><00:15:50.399><c> is</c><00:15:50.959><c> to</c><00:15:51.600><c> swap</c>

00:15:52.230 --> 00:15:52.240 align:start position:0%
last part of the partition is to swap
 

00:15:52.240 --> 00:15:55.509 align:start position:0%
last part of the partition is to swap
the<00:15:52.480><c> pivot</c><00:15:52.880><c> value</c><00:15:53.680><c> with</c><00:15:54.240><c> the</c><00:15:54.560><c> p</c><00:15:54.959><c> index</c><00:15:55.360><c> so</c>

00:15:55.509 --> 00:15:55.519 align:start position:0%
the pivot value with the p index so
 

00:15:55.519 --> 00:15:58.550 align:start position:0%
the pivot value with the p index so
we're<00:15:55.680><c> going</c><00:15:55.759><c> to</c><00:15:55.920><c> set</c><00:15:56.320><c> nums</c><00:15:56.959><c> of</c><00:15:57.680><c> p</c>

00:15:58.550 --> 00:15:58.560 align:start position:0%
we're going to set nums of p
 

00:15:58.560 --> 00:16:01.430 align:start position:0%
we're going to set nums of p
equal<00:15:59.360><c> to</c><00:15:59.920><c> the</c><00:16:00.079><c> pivot</c><00:16:00.480><c> value</c><00:16:00.959><c> and</c><00:16:01.120><c> we're</c><00:16:01.279><c> going</c>

00:16:01.430 --> 00:16:01.440 align:start position:0%
equal to the pivot value and we're going
 

00:16:01.440 --> 00:16:05.110 align:start position:0%
equal to the pivot value and we're going
to<00:16:01.600><c> set</c><00:16:02.240><c> nums</c><00:16:02.800><c> of</c><00:16:03.360><c> right</c><00:16:04.079><c> the</c><00:16:04.399><c> you</c><00:16:04.480><c> know</c><00:16:04.720><c> what</c>

00:16:05.110 --> 00:16:05.120 align:start position:0%
to set nums of right the you know what
 

00:16:05.120 --> 00:16:07.110 align:start position:0%
to set nums of right the you know what
this<00:16:05.680><c> pivot</c><00:16:06.000><c> value</c><00:16:06.320><c> is</c><00:16:06.480><c> currently</c><00:16:06.880><c> in</c><00:16:07.040><c> the</c>

00:16:07.110 --> 00:16:07.120 align:start position:0%
this pivot value is currently in the
 

00:16:07.120 --> 00:16:08.550 align:start position:0%
this pivot value is currently in the
rightmost<00:16:07.519><c> position</c><00:16:07.920><c> we're</c><00:16:08.079><c> going</c><00:16:08.160><c> to</c><00:16:08.240><c> swap</c>

00:16:08.550 --> 00:16:08.560 align:start position:0%
rightmost position we're going to swap
 

00:16:08.560 --> 00:16:10.870 align:start position:0%
rightmost position we're going to swap
that<00:16:08.720><c> with</c><00:16:08.880><c> whatever</c><00:16:09.199><c> happens</c><00:16:09.519><c> to</c><00:16:09.680><c> be</c><00:16:10.240><c> in</c><00:16:10.560><c> nums</c>

00:16:10.870 --> 00:16:10.880 align:start position:0%
that with whatever happens to be in nums
 

00:16:10.880 --> 00:16:14.629 align:start position:0%
that with whatever happens to be in nums
of<00:16:11.120><c> p</c><00:16:11.440><c> so</c><00:16:12.079><c> nums</c><00:16:12.639><c> of</c><00:16:13.279><c> right</c><00:16:13.600><c> is</c><00:16:13.759><c> going</c><00:16:13.920><c> to</c><00:16:14.000><c> be</c><00:16:14.240><c> set</c>

00:16:14.629 --> 00:16:14.639 align:start position:0%
of p so nums of right is going to be set
 

00:16:14.639 --> 00:16:15.350 align:start position:0%
of p so nums of right is going to be set
to

00:16:15.350 --> 00:16:15.360 align:start position:0%
to
 

00:16:15.360 --> 00:16:17.430 align:start position:0%
to
nums<00:16:16.000><c> of</c><00:16:16.720><c> p</c>

00:16:17.430 --> 00:16:17.440 align:start position:0%
nums of p
 

00:16:17.440 --> 00:16:19.110 align:start position:0%
nums of p
this<00:16:17.680><c> might</c><00:16:17.839><c> be</c><00:16:18.000><c> confusing</c><00:16:18.560><c> maybe</c><00:16:18.800><c> because</c><00:16:18.959><c> i</c>

00:16:19.110 --> 00:16:19.120 align:start position:0%
this might be confusing maybe because i
 

00:16:19.120 --> 00:16:21.030 align:start position:0%
this might be confusing maybe because i
use<00:16:19.360><c> pivot</c><00:16:19.680><c> so</c><00:16:20.079><c> you</c><00:16:20.240><c> can</c><00:16:20.320><c> actually</c><00:16:20.560><c> rewrite</c><00:16:20.959><c> it</c>

00:16:21.030 --> 00:16:21.040 align:start position:0%
use pivot so you can actually rewrite it
 

00:16:21.040 --> 00:16:22.389 align:start position:0%
use pivot so you can actually rewrite it
so<00:16:21.199><c> instead</c><00:16:21.440><c> of</c><00:16:21.600><c> using</c><00:16:21.839><c> pivot</c><00:16:22.160><c> i</c><00:16:22.240><c> could</c>

00:16:22.389 --> 00:16:22.399 align:start position:0%
so instead of using pivot i could
 

00:16:22.399 --> 00:16:24.230 align:start position:0%
so instead of using pivot i could
actually<00:16:22.639><c> just</c><00:16:22.800><c> go</c><00:16:22.959><c> ahead</c><00:16:23.120><c> and</c><00:16:23.199><c> write</c><00:16:23.440><c> nums</c><00:16:23.759><c> of</c>

00:16:24.230 --> 00:16:24.240 align:start position:0%
actually just go ahead and write nums of
 

00:16:24.240 --> 00:16:25.990 align:start position:0%
actually just go ahead and write nums of
r<00:16:24.639><c> we're</c><00:16:24.800><c> just</c><00:16:24.959><c> swapping</c><00:16:25.360><c> the</c><00:16:25.519><c> rightmost</c>

00:16:25.990 --> 00:16:26.000 align:start position:0%
r we're just swapping the rightmost
 

00:16:26.000 --> 00:16:28.069 align:start position:0%
r we're just swapping the rightmost
value<00:16:26.639><c> with</c><00:16:26.880><c> whatever</c><00:16:27.199><c> happens</c><00:16:27.519><c> to</c><00:16:27.600><c> be</c><00:16:27.759><c> at</c>

00:16:28.069 --> 00:16:28.079 align:start position:0%
value with whatever happens to be at
 

00:16:28.079 --> 00:16:31.430 align:start position:0%
value with whatever happens to be at
nums<00:16:28.399><c> of</c><00:16:28.800><c> p</c><00:16:29.120><c> right</c><00:16:29.360><c> at</c><00:16:29.600><c> our</c><00:16:29.839><c> p</c><00:16:30.160><c> index</c><00:16:30.959><c> okay</c><00:16:31.279><c> and</c>

00:16:31.430 --> 00:16:31.440 align:start position:0%
nums of p right at our p index okay and
 

00:16:31.440 --> 00:16:33.829 align:start position:0%
nums of p right at our p index okay and
once<00:16:31.759><c> that</c><00:16:32.000><c> is</c><00:16:32.160><c> done</c><00:16:32.720><c> then</c><00:16:32.959><c> we</c><00:16:33.199><c> potentially</c>

00:16:33.829 --> 00:16:33.839 align:start position:0%
once that is done then we potentially
 

00:16:33.839 --> 00:16:35.990 align:start position:0%
once that is done then we potentially
may<00:16:34.079><c> have</c><00:16:34.240><c> found</c><00:16:34.560><c> a</c><00:16:34.639><c> solution</c><00:16:35.199><c> or</c><00:16:35.360><c> we</c><00:16:35.519><c> may</c><00:16:35.759><c> not</c>

00:16:35.990 --> 00:16:36.000 align:start position:0%
may have found a solution or we may not
 

00:16:36.000 --> 00:16:38.069 align:start position:0%
may have found a solution or we may not
have<00:16:36.160><c> found</c><00:16:36.399><c> a</c><00:16:36.480><c> solution</c><00:16:36.880><c> so</c><00:16:37.199><c> so</c><00:16:37.440><c> let's</c><00:16:37.759><c> check</c>

00:16:38.069 --> 00:16:38.079 align:start position:0%
have found a solution so so let's check
 

00:16:38.079 --> 00:16:41.590 align:start position:0%
have found a solution so so let's check
is<00:16:38.320><c> our</c><00:16:38.639><c> k</c><00:16:38.959><c> value</c><00:16:39.839><c> less</c><00:16:40.399><c> than</c><00:16:40.880><c> p</c>

00:16:41.590 --> 00:16:41.600 align:start position:0%
is our k value less than p
 

00:16:41.600 --> 00:16:43.509 align:start position:0%
is our k value less than p
the<00:16:41.839><c> k</c><00:16:42.079><c> is</c><00:16:42.160><c> the</c><00:16:42.320><c> target</c><00:16:42.800><c> index</c><00:16:43.040><c> we're</c><00:16:43.279><c> looking</c>

00:16:43.509 --> 00:16:43.519 align:start position:0%
the k is the target index we're looking
 

00:16:43.519 --> 00:16:45.749 align:start position:0%
the k is the target index we're looking
for<00:16:43.839><c> if</c><00:16:44.000><c> it's</c><00:16:44.320><c> less</c><00:16:44.639><c> than</c><00:16:44.880><c> p</c><00:16:45.199><c> that</c><00:16:45.360><c> means</c><00:16:45.600><c> we</c>

00:16:45.749 --> 00:16:45.759 align:start position:0%
for if it's less than p that means we
 

00:16:45.759 --> 00:16:48.389 align:start position:0%
for if it's less than p that means we
have<00:16:45.839><c> to</c><00:16:46.079><c> run</c><00:16:46.480><c> quick</c><00:16:46.720><c> select</c><00:16:47.199><c> now</c><00:16:47.440><c> on</c><00:16:47.680><c> the</c><00:16:48.000><c> left</c>

00:16:48.389 --> 00:16:48.399 align:start position:0%
have to run quick select now on the left
 

00:16:48.399 --> 00:16:49.749 align:start position:0%
have to run quick select now on the left
portion<00:16:48.720><c> of</c><00:16:48.800><c> the</c><00:16:48.959><c> array</c><00:16:49.199><c> because</c><00:16:49.440><c> we</c><00:16:49.519><c> have</c><00:16:49.600><c> to</c>

00:16:49.749 --> 00:16:49.759 align:start position:0%
portion of the array because we have to
 

00:16:49.759 --> 00:16:51.829 align:start position:0%
portion of the array because we have to
look<00:16:50.000><c> for</c><00:16:50.160><c> a</c><00:16:50.320><c> smaller</c><00:16:50.880><c> index</c><00:16:51.440><c> so</c><00:16:51.600><c> we're</c><00:16:51.759><c> going</c>

00:16:51.829 --> 00:16:51.839 align:start position:0%
look for a smaller index so we're going
 

00:16:51.839 --> 00:16:55.269 align:start position:0%
look for a smaller index so we're going
to<00:16:51.920><c> call</c><00:16:52.240><c> quick</c><00:16:52.560><c> select</c><00:16:53.440><c> and</c><00:16:54.079><c> for</c><00:16:54.320><c> the</c><00:16:54.800><c> indices</c>

00:16:55.269 --> 00:16:55.279 align:start position:0%
to call quick select and for the indices
 

00:16:55.279 --> 00:16:57.350 align:start position:0%
to call quick select and for the indices
we're<00:16:55.440><c> going</c><00:16:55.519><c> to</c><00:16:55.759><c> pass</c><00:16:56.079><c> in</c><00:16:56.320><c> left</c><00:16:56.800><c> remains</c><00:16:57.199><c> the</c>

00:16:57.350 --> 00:16:57.360 align:start position:0%
we're going to pass in left remains the
 

00:16:57.360 --> 00:16:58.790 align:start position:0%
we're going to pass in left remains the
same<00:16:57.600><c> but</c><00:16:57.759><c> the</c><00:16:58.000><c> right</c><00:16:58.240><c> pointer</c><00:16:58.480><c> is</c><00:16:58.560><c> now</c><00:16:58.720><c> going</c>

00:16:58.790 --> 00:16:58.800 align:start position:0%
same but the right pointer is now going
 

00:16:58.800 --> 00:17:01.509 align:start position:0%
same but the right pointer is now going
to<00:16:58.880><c> be</c><00:16:59.120><c> shifted</c><00:16:59.839><c> towards</c><00:17:00.240><c> the</c><00:17:00.560><c> left</c><00:17:01.120><c> right</c><00:17:01.360><c> is</c>

00:17:01.509 --> 00:17:01.519 align:start position:0%
to be shifted towards the left right is
 

00:17:01.519 --> 00:17:03.590 align:start position:0%
to be shifted towards the left right is
now<00:17:01.759><c> going</c><00:17:01.920><c> to</c><00:17:02.000><c> be</c><00:17:02.160><c> set</c><00:17:02.480><c> to</c><00:17:02.880><c> p</c>

00:17:03.590 --> 00:17:03.600 align:start position:0%
now going to be set to p
 

00:17:03.600 --> 00:17:06.390 align:start position:0%
now going to be set to p
minus<00:17:04.319><c> 1</c><00:17:04.640><c> because</c><00:17:04.959><c> we</c><00:17:05.120><c> can</c><00:17:05.280><c> look</c><00:17:05.520><c> at</c><00:17:05.679><c> the</c><00:17:05.919><c> left</c>

00:17:06.390 --> 00:17:06.400 align:start position:0%
minus 1 because we can look at the left
 

00:17:06.400 --> 00:17:08.230 align:start position:0%
minus 1 because we can look at the left
portion<00:17:06.959><c> of</c><00:17:07.199><c> this</c>

00:17:08.230 --> 00:17:08.240 align:start position:0%
portion of this
 

00:17:08.240 --> 00:17:10.390 align:start position:0%
portion of this
array<00:17:08.559><c> now</c><00:17:08.799><c> this</c><00:17:09.039><c> partitioned</c><00:17:09.600><c> array</c><00:17:10.160><c> that's</c>

00:17:10.390 --> 00:17:10.400 align:start position:0%
array now this partitioned array that's
 

00:17:10.400 --> 00:17:12.789 align:start position:0%
array now this partitioned array that's
if<00:17:10.640><c> k</c><00:17:10.880><c> is</c><00:17:11.039><c> less</c><00:17:11.280><c> than</c><00:17:11.520><c> p</c><00:17:12.000><c> we</c><00:17:12.160><c> could</c><00:17:12.400><c> have</c>

00:17:12.789 --> 00:17:12.799 align:start position:0%
if k is less than p we could have
 

00:17:12.799 --> 00:17:14.789 align:start position:0%
if k is less than p we could have
another<00:17:13.439><c> case</c><00:17:14.079><c> and</c><00:17:14.240><c> we're</c><00:17:14.400><c> actually</c><00:17:14.640><c> going</c><00:17:14.720><c> to</c>

00:17:14.789 --> 00:17:14.799 align:start position:0%
another case and we're actually going to
 

00:17:14.799 --> 00:17:17.590 align:start position:0%
another case and we're actually going to
be<00:17:14.959><c> returning</c><00:17:16.000><c> this</c><00:17:16.400><c> value</c><00:17:16.799><c> whatever</c><00:17:17.199><c> happens</c>

00:17:17.590 --> 00:17:17.600 align:start position:0%
be returning this value whatever happens
 

00:17:17.600 --> 00:17:18.390 align:start position:0%
be returning this value whatever happens
to<00:17:17.679><c> be</c>

00:17:18.390 --> 00:17:18.400 align:start position:0%
to be
 

00:17:18.400 --> 00:17:22.470 align:start position:0%
to be
and<00:17:18.880><c> the</c><00:17:19.039><c> else</c><00:17:19.360><c> case</c><00:17:19.760><c> is</c><00:17:20.480><c> if</c><00:17:21.039><c> uh</c><00:17:21.520><c> k</c><00:17:21.839><c> is</c><00:17:22.000><c> greater</c>

00:17:22.470 --> 00:17:22.480 align:start position:0%
and the else case is if uh k is greater
 

00:17:22.480 --> 00:17:24.710 align:start position:0%
and the else case is if uh k is greater
than<00:17:22.799><c> p</c><00:17:23.280><c> if</c><00:17:23.520><c> k</c><00:17:23.679><c> is</c><00:17:23.839><c> greater</c><00:17:24.079><c> than</c><00:17:24.240><c> p</c><00:17:24.480><c> that</c><00:17:24.559><c> means</c>

00:17:24.710 --> 00:17:24.720 align:start position:0%
than p if k is greater than p that means
 

00:17:24.720 --> 00:17:27.270 align:start position:0%
than p if k is greater than p that means
we<00:17:24.880><c> have</c><00:17:24.959><c> to</c><00:17:25.039><c> look</c><00:17:25.360><c> in</c><00:17:25.679><c> the</c><00:17:26.079><c> right</c><00:17:26.480><c> portion</c><00:17:27.039><c> of</c>

00:17:27.270 --> 00:17:27.280 align:start position:0%
we have to look in the right portion of
 

00:17:27.280 --> 00:17:29.590 align:start position:0%
we have to look in the right portion of
the<00:17:27.520><c> array</c><00:17:27.919><c> so</c><00:17:28.240><c> in</c><00:17:28.400><c> that</c><00:17:28.559><c> case</c><00:17:28.799><c> we</c><00:17:28.960><c> can</c><00:17:29.120><c> return</c>

00:17:29.590 --> 00:17:29.600 align:start position:0%
the array so in that case we can return
 

00:17:29.600 --> 00:17:31.190 align:start position:0%
the array so in that case we can return
quick<00:17:29.840><c> select</c>

00:17:31.190 --> 00:17:31.200 align:start position:0%
quick select
 

00:17:31.200 --> 00:17:32.549 align:start position:0%
quick select
looking<00:17:31.440><c> at</c><00:17:31.600><c> the</c><00:17:31.760><c> right</c><00:17:32.000><c> portion</c><00:17:32.320><c> of</c><00:17:32.480><c> the</c>

00:17:32.549 --> 00:17:32.559 align:start position:0%
looking at the right portion of the
 

00:17:32.559 --> 00:17:34.710 align:start position:0%
looking at the right portion of the
array<00:17:32.880><c> which</c><00:17:33.120><c> means</c><00:17:33.760><c> our</c><00:17:34.000><c> left</c><00:17:34.320><c> pointer</c><00:17:34.640><c> is</c>

00:17:34.710 --> 00:17:34.720 align:start position:0%
array which means our left pointer is
 

00:17:34.720 --> 00:17:35.669 align:start position:0%
array which means our left pointer is
going<00:17:34.799><c> to</c><00:17:34.880><c> be</c>

00:17:35.669 --> 00:17:35.679 align:start position:0%
going to be
 

00:17:35.679 --> 00:17:37.270 align:start position:0%
going to be
changed<00:17:36.160><c> to</c><00:17:36.320><c> be</c><00:17:36.559><c> p</c>

00:17:37.270 --> 00:17:37.280 align:start position:0%
changed to be p
 

00:17:37.280 --> 00:17:39.750 align:start position:0%
changed to be p
plus<00:17:37.760><c> 1</c><00:17:38.000><c> now</c><00:17:38.720><c> and</c><00:17:38.960><c> our</c><00:17:39.120><c> right</c><00:17:39.360><c> pointer</c><00:17:39.600><c> is</c>

00:17:39.750 --> 00:17:39.760 align:start position:0%
plus 1 now and our right pointer is
 

00:17:39.760 --> 00:17:41.750 align:start position:0%
plus 1 now and our right pointer is
going<00:17:39.840><c> to</c><00:17:39.919><c> stay</c><00:17:40.160><c> the</c><00:17:40.240><c> same</c><00:17:40.799><c> that's</c><00:17:41.360><c> the</c><00:17:41.520><c> other</c>

00:17:41.750 --> 00:17:41.760 align:start position:0%
going to stay the same that's the other
 

00:17:41.760 --> 00:17:44.630 align:start position:0%
going to stay the same that's the other
case<00:17:42.240><c> the</c><00:17:42.400><c> last</c><00:17:42.720><c> case</c><00:17:43.120><c> else</c><00:17:43.600><c> is</c><00:17:43.760><c> if</c><00:17:44.000><c> p</c><00:17:44.400><c> is</c>

00:17:44.630 --> 00:17:44.640 align:start position:0%
case the last case else is if p is
 

00:17:44.640 --> 00:17:47.669 align:start position:0%
case the last case else is if p is
exactly<00:17:45.360><c> equal</c><00:17:45.760><c> to</c><00:17:46.080><c> k</c><00:17:46.640><c> in</c><00:17:46.799><c> that</c><00:17:47.039><c> case</c><00:17:47.440><c> we</c><00:17:47.520><c> can</c>

00:17:47.669 --> 00:17:47.679 align:start position:0%
exactly equal to k in that case we can
 

00:17:47.679 --> 00:17:51.190 align:start position:0%
exactly equal to k in that case we can
just<00:17:47.840><c> go</c><00:17:48.000><c> ahead</c><00:17:48.240><c> and</c><00:17:48.400><c> return</c><00:17:49.200><c> nums</c><00:17:49.760><c> of</c><00:17:50.240><c> p</c>

00:17:51.190 --> 00:17:51.200 align:start position:0%
just go ahead and return nums of p
 

00:17:51.200 --> 00:17:53.590 align:start position:0%
just go ahead and return nums of p
because<00:17:51.440><c> we</c><00:17:51.520><c> know</c><00:17:51.760><c> for</c><00:17:51.919><c> sure</c><00:17:52.160><c> p</c><00:17:52.640><c> is</c><00:17:52.880><c> the</c><00:17:53.120><c> kth</c>

00:17:53.590 --> 00:17:53.600 align:start position:0%
because we know for sure p is the kth
 

00:17:53.600 --> 00:17:55.909 align:start position:0%
because we know for sure p is the kth
largest<00:17:54.240><c> element</c><00:17:54.799><c> and</c><00:17:55.039><c> yes</c><00:17:55.360><c> since</c><00:17:55.679><c> all</c><00:17:55.840><c> of</c>

00:17:55.909 --> 00:17:55.919 align:start position:0%
largest element and yes since all of
 

00:17:55.919 --> 00:17:56.630 align:start position:0%
largest element and yes since all of
these

00:17:56.630 --> 00:17:56.640 align:start position:0%
these
 

00:17:56.640 --> 00:17:58.470 align:start position:0%
these
end<00:17:56.799><c> up</c><00:17:56.960><c> returning</c><00:17:57.440><c> something</c><00:17:57.919><c> that</c><00:17:58.160><c> is</c><00:17:58.320><c> the</c>

00:17:58.470 --> 00:17:58.480 align:start position:0%
end up returning something that is the
 

00:17:58.480 --> 00:18:00.070 align:start position:0%
end up returning something that is the
entire<00:17:58.880><c> code</c><00:17:59.120><c> that's</c><00:17:59.360><c> the</c><00:17:59.520><c> entire</c><00:17:59.840><c> quick</c>

00:18:00.070 --> 00:18:00.080 align:start position:0%
entire code that's the entire quick
 

00:18:00.080 --> 00:18:02.230 align:start position:0%
entire code that's the entire quick
select<00:18:00.480><c> algorithm</c><00:18:01.440><c> now</c><00:18:01.679><c> all</c><00:18:01.840><c> we</c><00:18:01.919><c> have</c><00:18:02.000><c> to</c><00:18:02.080><c> do</c>

00:18:02.230 --> 00:18:02.240 align:start position:0%
select algorithm now all we have to do
 

00:18:02.240 --> 00:18:04.150 align:start position:0%
select algorithm now all we have to do
is<00:18:02.400><c> actually</c><00:18:02.799><c> call</c><00:18:03.039><c> it</c><00:18:03.200><c> so</c><00:18:03.440><c> we</c><00:18:03.520><c> can</c><00:18:03.679><c> call</c><00:18:03.919><c> quick</c>

00:18:04.150 --> 00:18:04.160 align:start position:0%
is actually call it so we can call quick
 

00:18:04.160 --> 00:18:05.990 align:start position:0%
is actually call it so we can call quick
select<00:18:04.720><c> for</c><00:18:04.880><c> the</c><00:18:05.039><c> pointers</c><00:18:05.520><c> of</c><00:18:05.600><c> course</c><00:18:05.840><c> we'll</c>

00:18:05.990 --> 00:18:06.000 align:start position:0%
select for the pointers of course we'll
 

00:18:06.000 --> 00:18:08.310 align:start position:0%
select for the pointers of course we'll
just<00:18:06.160><c> pass</c><00:18:06.480><c> in</c><00:18:06.720><c> zero</c><00:18:07.039><c> for</c><00:18:07.200><c> the</c><00:18:07.360><c> left</c><00:18:07.679><c> boundary</c>

00:18:08.310 --> 00:18:08.320 align:start position:0%
just pass in zero for the left boundary
 

00:18:08.320 --> 00:18:10.070 align:start position:0%
just pass in zero for the left boundary
and<00:18:08.480><c> for</c><00:18:08.640><c> the</c><00:18:08.720><c> right</c><00:18:08.960><c> boundary</c><00:18:09.360><c> we'll</c><00:18:09.520><c> pass</c><00:18:09.760><c> in</c>

00:18:10.070 --> 00:18:10.080 align:start position:0%
and for the right boundary we'll pass in
 

00:18:10.080 --> 00:18:10.950 align:start position:0%
and for the right boundary we'll pass in
length

00:18:10.950 --> 00:18:10.960 align:start position:0%
length
 

00:18:10.960 --> 00:18:13.270 align:start position:0%
length
minus<00:18:11.679><c> one</c><00:18:12.240><c> so</c><00:18:12.480><c> that</c><00:18:12.559><c> we</c><00:18:12.720><c> can</c><00:18:12.799><c> run</c><00:18:13.039><c> quick</c>

00:18:13.270 --> 00:18:13.280 align:start position:0%
minus one so that we can run quick
 

00:18:13.280 --> 00:18:15.430 align:start position:0%
minus one so that we can run quick
select<00:18:13.679><c> on</c><00:18:13.760><c> the</c><00:18:14.080><c> entire</c><00:18:14.559><c> input</c><00:18:14.880><c> array</c><00:18:15.360><c> and</c>

00:18:15.430 --> 00:18:15.440 align:start position:0%
select on the entire input array and
 

00:18:15.440 --> 00:18:17.909 align:start position:0%
select on the entire input array and
then<00:18:15.600><c> return</c><00:18:16.320><c> whatever</c><00:18:16.720><c> the</c><00:18:16.960><c> result</c><00:18:17.440><c> is</c><00:18:17.760><c> so</c>

00:18:17.909 --> 00:18:17.919 align:start position:0%
then return whatever the result is so
 

00:18:17.919 --> 00:18:19.350 align:start position:0%
then return whatever the result is so
i'm<00:18:18.080><c> going</c><00:18:18.160><c> to</c><00:18:18.240><c> run</c><00:18:18.480><c> it</c><00:18:18.559><c> to</c><00:18:18.720><c> prove</c><00:18:18.960><c> to</c><00:18:19.120><c> you</c><00:18:19.200><c> that</c>

00:18:19.350 --> 00:18:19.360 align:start position:0%
i'm going to run it to prove to you that
 

00:18:19.360 --> 00:18:21.990 align:start position:0%
i'm going to run it to prove to you that
it<00:18:19.520><c> works</c><00:18:19.919><c> even</c><00:18:20.320><c> though</c><00:18:20.960><c> since</c><00:18:21.520><c> the</c><00:18:21.679><c> worst</c>

00:18:21.990 --> 00:18:22.000 align:start position:0%
it works even though since the worst
 

00:18:22.000 --> 00:18:23.909 align:start position:0%
it works even though since the worst
case<00:18:22.240><c> is</c><00:18:22.400><c> n</c><00:18:22.640><c> squared</c><00:18:22.960><c> and</c><00:18:23.120><c> some</c><00:18:23.280><c> of</c><00:18:23.360><c> the</c><00:18:23.679><c> uh</c>

00:18:23.909 --> 00:18:23.919 align:start position:0%
case is n squared and some of the uh
 

00:18:23.919 --> 00:18:25.750 align:start position:0%
case is n squared and some of the uh
test<00:18:24.160><c> cases</c><00:18:24.559><c> on</c><00:18:24.720><c> leak</c><00:18:24.880><c> code</c><00:18:25.200><c> actually</c><00:18:25.440><c> happen</c>

00:18:25.750 --> 00:18:25.760 align:start position:0%
test cases on leak code actually happen
 

00:18:25.760 --> 00:18:28.230 align:start position:0%
test cases on leak code actually happen
to<00:18:26.000><c> be</c><00:18:26.480><c> you</c><00:18:26.640><c> know</c><00:18:26.880><c> poor</c><00:18:27.200><c> cases</c><00:18:27.679><c> for</c><00:18:28.000><c> quick</c>

00:18:28.230 --> 00:18:28.240 align:start position:0%
to be you know poor cases for quick
 

00:18:28.240 --> 00:18:29.830 align:start position:0%
to be you know poor cases for quick
select<00:18:28.559><c> it</c><00:18:28.720><c> doesn't</c><00:18:28.960><c> run</c><00:18:29.120><c> very</c><00:18:29.360><c> efficiently</c>

00:18:29.830 --> 00:18:29.840 align:start position:0%
select it doesn't run very efficiently
 

00:18:29.840 --> 00:18:31.270 align:start position:0%
select it doesn't run very efficiently
on<00:18:29.919><c> some</c><00:18:30.080><c> of</c><00:18:30.160><c> those</c><00:18:30.400><c> test</c><00:18:30.640><c> cases</c><00:18:30.880><c> so</c><00:18:31.039><c> this</c>

00:18:31.270 --> 00:18:31.280 align:start position:0%
on some of those test cases so this
 

00:18:31.280 --> 00:18:32.870 align:start position:0%
on some of those test cases so this
actually<00:18:31.600><c> isn't</c><00:18:31.840><c> very</c><00:18:32.080><c> efficient</c><00:18:32.480><c> on</c><00:18:32.640><c> leak</c>

00:18:32.870 --> 00:18:32.880 align:start position:0%
actually isn't very efficient on leak
 

00:18:32.880 --> 00:18:34.710 align:start position:0%
actually isn't very efficient on leak
code<00:18:33.360><c> but</c><00:18:33.760><c> you</c><00:18:33.840><c> know</c><00:18:34.000><c> this</c><00:18:34.160><c> is</c><00:18:34.240><c> definitely</c><00:18:34.640><c> a</c>

00:18:34.710 --> 00:18:34.720 align:start position:0%
code but you know this is definitely a
 

00:18:34.720 --> 00:18:36.630 align:start position:0%
code but you know this is definitely a
good<00:18:34.880><c> algorithm</c><00:18:35.360><c> to</c><00:18:35.600><c> know</c><00:18:36.080><c> in</c><00:18:36.160><c> the</c><00:18:36.320><c> average</c>

00:18:36.630 --> 00:18:36.640 align:start position:0%
good algorithm to know in the average
 

00:18:36.640 --> 00:18:38.950 align:start position:0%
good algorithm to know in the average
case<00:18:36.960><c> it</c><00:18:37.200><c> does</c><00:18:37.520><c> beat</c><00:18:37.760><c> the</c><00:18:37.919><c> sorting</c><00:18:38.400><c> approach</c>

00:18:38.950 --> 00:18:38.960 align:start position:0%
case it does beat the sorting approach
 

00:18:38.960 --> 00:18:41.190 align:start position:0%
case it does beat the sorting approach
so<00:18:39.120><c> i</c><00:18:39.200><c> hope</c><00:18:39.360><c> this</c><00:18:39.520><c> was</c><00:18:39.760><c> helpful</c><00:18:40.320><c> if</c><00:18:40.480><c> it</c><00:18:40.640><c> was</c>

00:18:41.190 --> 00:18:41.200 align:start position:0%
so i hope this was helpful if it was
 

00:18:41.200 --> 00:18:42.950 align:start position:0%
so i hope this was helpful if it was
please<00:18:41.520><c> like</c><00:18:41.679><c> and</c><00:18:41.840><c> subscribe</c><00:18:42.400><c> it</c><00:18:42.559><c> supports</c>

00:18:42.950 --> 00:18:42.960 align:start position:0%
please like and subscribe it supports
 

00:18:42.960 --> 00:18:45.510 align:start position:0%
please like and subscribe it supports
the<00:18:43.120><c> channel</c><00:18:43.520><c> a</c><00:18:43.760><c> lot</c><00:18:44.080><c> and</c><00:18:44.240><c> i'll</c><00:18:44.480><c> hopefully</c><00:18:45.360><c> see</c>

00:18:45.510 --> 00:18:45.520 align:start position:0%
the channel a lot and i'll hopefully see
 

00:18:45.520 --> 00:18:49.440 align:start position:0%
the channel a lot and i'll hopefully see
you<00:18:45.679><c> pretty</c><00:18:45.919><c> soon</c><00:18:46.480><c> thanks</c><00:18:46.799><c> for</c><00:18:46.960><c> watching</c>

