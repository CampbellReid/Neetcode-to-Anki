WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.589 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c>

00:00:01.589 --> 00:00:01.599 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.599 --> 00:00:03.830 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.760><c> some</c><00:00:01.920><c> more</c><00:00:02.159><c> neat</c><00:00:02.480><c> code</c><00:00:02.720><c> today</c><00:00:03.120><c> so</c><00:00:03.360><c> today</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
write some more neat code today so today
 

00:00:03.840 --> 00:00:05.269 align:start position:0%
write some more neat code today so today
let's<00:00:04.160><c> solve</c><00:00:04.480><c> a</c><00:00:04.720><c> pretty</c>

00:00:05.269 --> 00:00:05.279 align:start position:0%
let's solve a pretty
 

00:00:05.279 --> 00:00:08.150 align:start position:0%
let's solve a pretty
difficult<00:00:05.920><c> problem</c><00:00:06.560><c> median</c><00:00:07.120><c> of</c><00:00:07.359><c> two</c><00:00:07.680><c> sorted</c>

00:00:08.150 --> 00:00:08.160 align:start position:0%
difficult problem median of two sorted
 

00:00:08.160 --> 00:00:08.790 align:start position:0%
difficult problem median of two sorted
arrays

00:00:08.790 --> 00:00:08.800 align:start position:0%
arrays
 

00:00:08.800 --> 00:00:11.669 align:start position:0%
arrays
so<00:00:08.960><c> we're</c><00:00:09.200><c> given</c><00:00:09.920><c> two</c><00:00:10.240><c> arrays</c><00:00:11.040><c> nums</c><00:00:11.360><c> one</c><00:00:11.599><c> and</c>

00:00:11.669 --> 00:00:11.679 align:start position:0%
so we're given two arrays nums one and
 

00:00:11.679 --> 00:00:13.270 align:start position:0%
so we're given two arrays nums one and
nums<00:00:12.080><c> two</c><00:00:12.240><c> that</c><00:00:12.400><c> are</c><00:00:12.639><c> already</c>

00:00:13.270 --> 00:00:13.280 align:start position:0%
nums two that are already
 

00:00:13.280 --> 00:00:15.589 align:start position:0%
nums two that are already
in<00:00:13.440><c> sorted</c><00:00:13.840><c> order</c><00:00:14.320><c> but</c><00:00:14.480><c> they</c><00:00:14.719><c> could</c><00:00:14.960><c> be</c><00:00:15.360><c> of</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
in sorted order but they could be of
 

00:00:15.599 --> 00:00:16.870 align:start position:0%
in sorted order but they could be of
different<00:00:16.080><c> sizes</c>

00:00:16.870 --> 00:00:16.880 align:start position:0%
different sizes
 

00:00:16.880 --> 00:00:20.070 align:start position:0%
different sizes
m<00:00:17.279><c> and</c><00:00:17.600><c> n</c><00:00:18.240><c> and</c><00:00:18.400><c> we</c><00:00:18.560><c> want</c><00:00:18.800><c> to</c><00:00:18.880><c> return</c><00:00:19.279><c> the</c><00:00:19.439><c> median</c>

00:00:20.070 --> 00:00:20.080 align:start position:0%
m and n and we want to return the median
 

00:00:20.080 --> 00:00:23.109 align:start position:0%
m and n and we want to return the median
of<00:00:20.960><c> both</c><00:00:21.520><c> of</c><00:00:21.680><c> the</c><00:00:21.920><c> arrays</c><00:00:22.480><c> when</c><00:00:22.640><c> they</c><00:00:22.800><c> have</c>

00:00:23.109 --> 00:00:23.119 align:start position:0%
of both of the arrays when they have
 

00:00:23.119 --> 00:00:24.470 align:start position:0%
of both of the arrays when they have
been<00:00:23.439><c> put</c><00:00:23.680><c> together</c>

00:00:24.470 --> 00:00:24.480 align:start position:0%
been put together
 

00:00:24.480 --> 00:00:26.950 align:start position:0%
been put together
and<00:00:24.720><c> sorted</c><00:00:25.359><c> so</c><00:00:25.599><c> not</c><00:00:25.920><c> individually</c><00:00:26.640><c> but</c><00:00:26.800><c> we</c>

00:00:26.950 --> 00:00:26.960 align:start position:0%
and sorted so not individually but we
 

00:00:26.960 --> 00:00:29.189 align:start position:0%
and sorted so not individually but we
want<00:00:27.119><c> to</c><00:00:27.279><c> put</c><00:00:27.519><c> them</c><00:00:27.760><c> together</c><00:00:28.480><c> and</c><00:00:28.560><c> then</c><00:00:28.880><c> find</c>

00:00:29.189 --> 00:00:29.199 align:start position:0%
want to put them together and then find
 

00:00:29.199 --> 00:00:31.029 align:start position:0%
want to put them together and then find
the<00:00:29.359><c> median</c><00:00:29.920><c> of</c><00:00:30.160><c> both</c><00:00:30.400><c> of</c><00:00:30.640><c> them</c>

00:00:31.029 --> 00:00:31.039 align:start position:0%
the median of both of them
 

00:00:31.039 --> 00:00:34.069 align:start position:0%
the median of both of them
and<00:00:31.439><c> not</c><00:00:31.679><c> only</c><00:00:32.160><c> that</c><00:00:32.719><c> but</c><00:00:32.880><c> we</c><00:00:33.120><c> want</c><00:00:33.280><c> to</c><00:00:33.520><c> do</c><00:00:33.760><c> it</c>

00:00:34.069 --> 00:00:34.079 align:start position:0%
and not only that but we want to do it
 

00:00:34.079 --> 00:00:37.110 align:start position:0%
and not only that but we want to do it
efficiently<00:00:35.200><c> so</c><00:00:35.760><c> log</c><00:00:36.239><c> of</c><00:00:36.800><c> m</c>

00:00:37.110 --> 00:00:37.120 align:start position:0%
efficiently so log of m
 

00:00:37.120 --> 00:00:40.389 align:start position:0%
efficiently so log of m
plus<00:00:37.520><c> n</c><00:00:38.000><c> worst</c><00:00:38.480><c> case</c><00:00:39.120><c> right</c><00:00:39.920><c> so</c>

00:00:40.389 --> 00:00:40.399 align:start position:0%
plus n worst case right so
 

00:00:40.399 --> 00:00:42.950 align:start position:0%
plus n worst case right so
one<00:00:40.719><c> example</c><00:00:41.200><c> we</c><00:00:41.360><c> can</c><00:00:41.680><c> see</c><00:00:42.160><c> one</c><00:00:42.399><c> array</c><00:00:42.719><c> could</c>

00:00:42.950 --> 00:00:42.960 align:start position:0%
one example we can see one array could
 

00:00:42.960 --> 00:00:43.510 align:start position:0%
one example we can see one array could
be<00:00:43.200><c> one</c>

00:00:43.510 --> 00:00:43.520 align:start position:0%
be one
 

00:00:43.520 --> 00:00:46.470 align:start position:0%
be one
three<00:00:43.920><c> another</c><00:00:44.320><c> array</c><00:00:44.559><c> could</c><00:00:44.800><c> be</c><00:00:45.120><c> two</c><00:00:45.760><c> and</c><00:00:46.320><c> in</c>

00:00:46.470 --> 00:00:46.480 align:start position:0%
three another array could be two and in
 

00:00:46.480 --> 00:00:47.270 align:start position:0%
three another array could be two and in
this<00:00:46.719><c> case</c>

00:00:47.270 --> 00:00:47.280 align:start position:0%
this case
 

00:00:47.280 --> 00:00:49.510 align:start position:0%
this case
when<00:00:47.440><c> you</c><00:00:47.600><c> put</c><00:00:47.760><c> the</c><00:00:48.079><c> two</c><00:00:48.320><c> arrays</c><00:00:48.800><c> together</c>

00:00:49.510 --> 00:00:49.520 align:start position:0%
when you put the two arrays together
 

00:00:49.520 --> 00:00:50.869 align:start position:0%
when you put the two arrays together
it's<00:00:49.760><c> pretty</c><00:00:50.079><c> obvious</c><00:00:50.480><c> that</c>

00:00:50.869 --> 00:00:50.879 align:start position:0%
it's pretty obvious that
 

00:00:50.879 --> 00:00:53.510 align:start position:0%
it's pretty obvious that
two<00:00:51.280><c> is</c><00:00:51.440><c> the</c><00:00:51.680><c> median</c><00:00:52.160><c> that</c><00:00:52.480><c> the</c><00:00:52.719><c> median</c><00:00:53.199><c> is</c><00:00:53.360><c> the</c>

00:00:53.510 --> 00:00:53.520 align:start position:0%
two is the median that the median is the
 

00:00:53.520 --> 00:00:54.549 align:start position:0%
two is the median that the median is the
middle<00:00:53.920><c> value</c>

00:00:54.549 --> 00:00:54.559 align:start position:0%
middle value
 

00:00:54.559 --> 00:00:56.549 align:start position:0%
middle value
now<00:00:54.800><c> we</c><00:00:55.039><c> know</c><00:00:55.360><c> that</c><00:00:55.760><c> there</c><00:00:56.000><c> are</c><00:00:56.239><c> other</c>

00:00:56.549 --> 00:00:56.559 align:start position:0%
now we know that there are other
 

00:00:56.559 --> 00:00:58.790 align:start position:0%
now we know that there are other
examples<00:00:57.120><c> where</c><00:00:57.440><c> we</c><00:00:57.600><c> might</c><00:00:57.840><c> have</c><00:00:58.079><c> an</c><00:00:58.320><c> even</c>

00:00:58.790 --> 00:00:58.800 align:start position:0%
examples where we might have an even
 

00:00:58.800 --> 00:01:00.709 align:start position:0%
examples where we might have an even
number<00:00:59.280><c> of</c><00:00:59.600><c> total</c><00:01:00.000><c> elements</c>

00:01:00.709 --> 00:01:00.719 align:start position:0%
number of total elements
 

00:01:00.719 --> 00:01:03.189 align:start position:0%
number of total elements
one<00:01:01.039><c> two</c><00:01:01.520><c> three</c><00:01:01.840><c> four</c><00:01:02.160><c> when</c><00:01:02.320><c> you</c><00:01:02.480><c> put</c><00:01:02.800><c> those</c>

00:01:03.189 --> 00:01:03.199 align:start position:0%
one two three four when you put those
 

00:01:03.199 --> 00:01:03.830 align:start position:0%
one two three four when you put those
together

00:01:03.830 --> 00:01:03.840 align:start position:0%
together
 

00:01:03.840 --> 00:01:06.789 align:start position:0%
together
we<00:01:04.080><c> get</c><00:01:04.400><c> one</c><00:01:04.640><c> two</c><00:01:04.879><c> three</c><00:01:05.280><c> four</c><00:01:05.840><c> in</c><00:01:06.000><c> this</c><00:01:06.240><c> case</c>

00:01:06.789 --> 00:01:06.799 align:start position:0%
we get one two three four in this case
 

00:01:06.799 --> 00:01:07.510 align:start position:0%
we get one two three four in this case
we<00:01:07.040><c> have</c>

00:01:07.510 --> 00:01:07.520 align:start position:0%
we have
 

00:01:07.520 --> 00:01:09.750 align:start position:0%
we have
two<00:01:07.840><c> numbers</c><00:01:08.240><c> that</c><00:01:08.400><c> are</c><00:01:08.640><c> in</c><00:01:08.799><c> the</c><00:01:08.880><c> middle</c><00:01:09.520><c> two</c>

00:01:09.750 --> 00:01:09.760 align:start position:0%
two numbers that are in the middle two
 

00:01:09.760 --> 00:01:11.830 align:start position:0%
two numbers that are in the middle two
and<00:01:10.000><c> three</c><00:01:10.400><c> so</c><00:01:10.560><c> what</c><00:01:10.720><c> do</c><00:01:10.799><c> we</c><00:01:10.960><c> do</c><00:01:11.280><c> we</c><00:01:11.439><c> can</c><00:01:11.600><c> just</c>

00:01:11.830 --> 00:01:11.840 align:start position:0%
and three so what do we do we can just
 

00:01:11.840 --> 00:01:12.950 align:start position:0%
and three so what do we do we can just
take<00:01:12.080><c> the</c><00:01:12.320><c> average</c>

00:01:12.950 --> 00:01:12.960 align:start position:0%
take the average
 

00:01:12.960 --> 00:01:15.510 align:start position:0%
take the average
of<00:01:13.119><c> these</c><00:01:13.439><c> two</c><00:01:14.080><c> and</c><00:01:14.479><c> we</c><00:01:14.640><c> know</c><00:01:14.799><c> the</c><00:01:14.960><c> average</c><00:01:15.360><c> is</c>

00:01:15.510 --> 00:01:15.520 align:start position:0%
of these two and we know the average is
 

00:01:15.520 --> 00:01:16.710 align:start position:0%
of these two and we know the average is
2.5

00:01:16.710 --> 00:01:16.720 align:start position:0%
2.5
 

00:01:16.720 --> 00:01:20.630 align:start position:0%
2.5
but<00:01:17.119><c> both</c><00:01:17.439><c> of</c><00:01:17.600><c> these</c><00:01:17.840><c> examples</c><00:01:18.720><c> used</c><00:01:19.360><c> a</c>

00:01:20.630 --> 00:01:20.640 align:start position:0%
but both of these examples used a
 

00:01:20.640 --> 00:01:23.270 align:start position:0%
but both of these examples used a
merged<00:01:21.280><c> array</c><00:01:21.840><c> but</c><00:01:22.000><c> we</c><00:01:22.159><c> know</c><00:01:22.479><c> if</c><00:01:22.560><c> we</c><00:01:22.799><c> actually</c>

00:01:23.270 --> 00:01:23.280 align:start position:0%
merged array but we know if we actually
 

00:01:23.280 --> 00:01:23.830 align:start position:0%
merged array but we know if we actually
merged

00:01:23.830 --> 00:01:23.840 align:start position:0%
merged
 

00:01:23.840 --> 00:01:26.870 align:start position:0%
merged
two<00:01:24.159><c> arrays</c><00:01:24.640><c> together</c><00:01:25.600><c> like</c><00:01:26.159><c> one</c><00:01:26.400><c> two</c><00:01:26.720><c> and</c>

00:01:26.870 --> 00:01:26.880 align:start position:0%
two arrays together like one two and
 

00:01:26.880 --> 00:01:27.670 align:start position:0%
two arrays together like one two and
three<00:01:27.119><c> four</c>

00:01:27.670 --> 00:01:27.680 align:start position:0%
three four
 

00:01:27.680 --> 00:01:31.270 align:start position:0%
three four
the<00:01:27.840><c> worst</c><00:01:28.240><c> case</c><00:01:28.560><c> is</c><00:01:28.720><c> actually</c><00:01:29.200><c> big</c><00:01:29.439><c> o</c><00:01:29.920><c> n</c><00:01:30.479><c> plus</c>

00:01:31.270 --> 00:01:31.280 align:start position:0%
the worst case is actually big o n plus
 

00:01:31.280 --> 00:01:34.310 align:start position:0%
the worst case is actually big o n plus
m<00:01:31.920><c> and</c><00:01:32.479><c> that's</c><00:01:32.960><c> not</c><00:01:33.600><c> log</c>

00:01:34.310 --> 00:01:34.320 align:start position:0%
m and that's not log
 

00:01:34.320 --> 00:01:37.030 align:start position:0%
m and that's not log
so<00:01:34.560><c> we</c><00:01:34.799><c> know</c><00:01:35.520><c> in</c><00:01:35.759><c> most</c><00:01:36.000><c> cases</c><00:01:36.400><c> when</c><00:01:36.640><c> people</c>

00:01:37.030 --> 00:01:37.040 align:start position:0%
so we know in most cases when people
 

00:01:37.040 --> 00:01:37.590 align:start position:0%
so we know in most cases when people
want<00:01:37.280><c> a</c>

00:01:37.590 --> 00:01:37.600 align:start position:0%
want a
 

00:01:37.600 --> 00:01:40.069 align:start position:0%
want a
log<00:01:38.000><c> algorithm</c><00:01:38.479><c> you</c><00:01:38.640><c> need</c><00:01:38.960><c> binary</c><00:01:39.600><c> search</c><00:01:40.000><c> and</c>

00:01:40.069 --> 00:01:40.079 align:start position:0%
log algorithm you need binary search and
 

00:01:40.079 --> 00:01:41.670 align:start position:0%
log algorithm you need binary search and
that's<00:01:40.400><c> exactly</c><00:01:40.880><c> what</c><00:01:41.040><c> i'm</c><00:01:41.200><c> going</c><00:01:41.280><c> to</c><00:01:41.439><c> show</c>

00:01:41.670 --> 00:01:41.680 align:start position:0%
that's exactly what i'm going to show
 

00:01:41.680 --> 00:01:44.069 align:start position:0%
that's exactly what i'm going to show
you<00:01:41.920><c> right</c><00:01:42.159><c> now</c><00:01:42.479><c> how</c><00:01:42.640><c> to</c><00:01:42.799><c> solve</c><00:01:43.040><c> this</c><00:01:43.360><c> problem</c>

00:01:44.069 --> 00:01:44.079 align:start position:0%
you right now how to solve this problem
 

00:01:44.079 --> 00:01:47.109 align:start position:0%
you right now how to solve this problem
with<00:01:44.720><c> binary</c><00:01:45.360><c> search</c><00:01:45.920><c> so</c><00:01:46.240><c> let's</c><00:01:46.479><c> say</c><00:01:46.799><c> we</c><00:01:46.960><c> are</c>

00:01:47.109 --> 00:01:47.119 align:start position:0%
with binary search so let's say we are
 

00:01:47.119 --> 00:01:49.030 align:start position:0%
with binary search so let's say we are
given<00:01:47.520><c> a</c><00:01:47.680><c> different</c><00:01:48.079><c> example</c><00:01:48.479><c> let's</c><00:01:48.799><c> call</c>

00:01:49.030 --> 00:01:49.040 align:start position:0%
given a different example let's call
 

00:01:49.040 --> 00:01:49.990 align:start position:0%
given a different example let's call
this<00:01:49.280><c> array</c><00:01:49.680><c> b</c>

00:01:49.990 --> 00:01:50.000 align:start position:0%
this array b
 

00:01:50.000 --> 00:01:52.789 align:start position:0%
this array b
and<00:01:50.079><c> let's</c><00:01:50.320><c> call</c><00:01:50.560><c> this</c><00:01:50.799><c> array</c><00:01:51.360><c> a</c><00:01:52.000><c> so</c><00:01:52.240><c> we</c><00:01:52.479><c> know</c>

00:01:52.789 --> 00:01:52.799 align:start position:0%
and let's call this array a so we know
 

00:01:52.799 --> 00:01:53.590 align:start position:0%
and let's call this array a so we know
we<00:01:52.960><c> can</c>

00:01:53.590 --> 00:01:53.600 align:start position:0%
we can
 

00:01:53.600 --> 00:01:56.950 align:start position:0%
we can
merge<00:01:54.240><c> these</c><00:01:54.720><c> two</c><00:01:55.119><c> arrays</c><00:01:56.000><c> right</c><00:01:56.320><c> and</c><00:01:56.479><c> then</c>

00:01:56.950 --> 00:01:56.960 align:start position:0%
merge these two arrays right and then
 

00:01:56.960 --> 00:01:59.910 align:start position:0%
merge these two arrays right and then
the<00:01:57.119><c> median</c><00:01:57.759><c> is</c><00:01:58.079><c> obvious</c><00:01:58.640><c> but</c><00:01:58.880><c> what</c><00:01:59.119><c> exactly</c>

00:01:59.910 --> 00:01:59.920 align:start position:0%
the median is obvious but what exactly
 

00:01:59.920 --> 00:02:02.149 align:start position:0%
the median is obvious but what exactly
is<00:02:00.159><c> a</c><00:02:00.399><c> median</c><00:02:00.880><c> well</c><00:02:01.040><c> it's</c><00:02:01.280><c> the</c><00:02:01.520><c> middle</c>

00:02:02.149 --> 00:02:02.159 align:start position:0%
is a median well it's the middle
 

00:02:02.159 --> 00:02:04.789 align:start position:0%
is a median well it's the middle
value<00:02:02.719><c> right</c><00:02:03.280><c> in</c><00:02:03.360><c> this</c><00:02:03.600><c> case</c><00:02:04.240><c> this</c><00:02:04.560><c> is</c><00:02:04.640><c> the</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
value right in this case this is the
 

00:02:04.799 --> 00:02:05.670 align:start position:0%
value right in this case this is the
middle<00:02:05.119><c> value</c>

00:02:05.670 --> 00:02:05.680 align:start position:0%
middle value
 

00:02:05.680 --> 00:02:08.550 align:start position:0%
middle value
and<00:02:05.840><c> we</c><00:02:06.320><c> know</c><00:02:06.640><c> that</c><00:02:07.040><c> because</c><00:02:07.439><c> we</c><00:02:07.600><c> know</c><00:02:07.920><c> to</c><00:02:08.160><c> the</c>

00:02:08.550 --> 00:02:08.560 align:start position:0%
and we know that because we know to the
 

00:02:08.560 --> 00:02:09.430 align:start position:0%
and we know that because we know to the
left<00:02:08.959><c> of</c><00:02:09.119><c> it</c>

00:02:09.430 --> 00:02:09.440 align:start position:0%
left of it
 

00:02:09.440 --> 00:02:12.630 align:start position:0%
left of it
there<00:02:09.679><c> are</c><00:02:10.000><c> six</c><00:02:10.319><c> elements</c><00:02:11.120><c> and</c><00:02:11.440><c> to</c><00:02:11.680><c> the</c><00:02:12.239><c> right</c>

00:02:12.630 --> 00:02:12.640 align:start position:0%
there are six elements and to the right
 

00:02:12.640 --> 00:02:13.430 align:start position:0%
there are six elements and to the right
of<00:02:12.879><c> it</c>

00:02:13.430 --> 00:02:13.440 align:start position:0%
of it
 

00:02:13.440 --> 00:02:16.309 align:start position:0%
of it
there<00:02:13.760><c> are</c><00:02:14.080><c> six</c><00:02:14.400><c> elements</c><00:02:15.120><c> so</c><00:02:15.440><c> in</c><00:02:15.599><c> this</c><00:02:15.840><c> case</c>

00:02:16.309 --> 00:02:16.319 align:start position:0%
there are six elements so in this case
 

00:02:16.319 --> 00:02:17.190 align:start position:0%
there are six elements so in this case
we<00:02:16.480><c> have</c><00:02:16.800><c> a</c>

00:02:17.190 --> 00:02:17.200 align:start position:0%
we have a
 

00:02:17.200 --> 00:02:20.470 align:start position:0%
we have a
array<00:02:17.599><c> of</c><00:02:17.840><c> 13</c><00:02:18.480><c> elements</c><00:02:19.040><c> and</c><00:02:19.280><c> this</c><00:02:19.680><c> happens</c>

00:02:20.470 --> 00:02:20.480 align:start position:0%
array of 13 elements and this happens
 

00:02:20.480 --> 00:02:24.309 align:start position:0%
array of 13 elements and this happens
to<00:02:20.720><c> be</c><00:02:21.200><c> the</c><00:02:21.440><c> middle</c><00:02:22.080><c> the</c><00:02:22.480><c> left</c><00:02:22.879><c> partition</c>

00:02:24.309 --> 00:02:24.319 align:start position:0%
to be the middle the left partition
 

00:02:24.319 --> 00:02:27.670 align:start position:0%
to be the middle the left partition
of<00:02:24.640><c> six</c><00:02:24.959><c> elements</c><00:02:25.520><c> is</c><00:02:25.760><c> the</c><00:02:26.000><c> same</c><00:02:26.480><c> size</c><00:02:26.959><c> as</c><00:02:27.200><c> the</c>

00:02:27.670 --> 00:02:27.680 align:start position:0%
of six elements is the same size as the
 

00:02:27.680 --> 00:02:30.150 align:start position:0%
of six elements is the same size as the
right<00:02:28.000><c> partition</c><00:02:28.800><c> of</c><00:02:29.120><c> six</c><00:02:29.440><c> elements</c><00:02:29.840><c> so</c><00:02:30.000><c> what</c>

00:02:30.150 --> 00:02:30.160 align:start position:0%
right partition of six elements so what
 

00:02:30.160 --> 00:02:30.949 align:start position:0%
right partition of six elements so what
we're<00:02:30.480><c> doing</c>

00:02:30.949 --> 00:02:30.959 align:start position:0%
we're doing
 

00:02:30.959 --> 00:02:34.550 align:start position:0%
we're doing
is<00:02:31.519><c> partitioning</c><00:02:32.400><c> the</c><00:02:32.640><c> array</c><00:02:33.280><c> into</c><00:02:33.760><c> two</c><00:02:34.080><c> equal</c>

00:02:34.550 --> 00:02:34.560 align:start position:0%
is partitioning the array into two equal
 

00:02:34.560 --> 00:02:35.030 align:start position:0%
is partitioning the array into two equal
halves

00:02:35.030 --> 00:02:35.040 align:start position:0%
halves
 

00:02:35.040 --> 00:02:36.949 align:start position:0%
halves
roughly<00:02:35.599><c> right</c><00:02:35.840><c> because</c><00:02:36.080><c> we</c><00:02:36.239><c> know</c><00:02:36.400><c> there's</c><00:02:36.720><c> an</c>

00:02:36.949 --> 00:02:36.959 align:start position:0%
roughly right because we know there's an
 

00:02:36.959 --> 00:02:38.949 align:start position:0%
roughly right because we know there's an
odd<00:02:37.280><c> case</c><00:02:37.680><c> and</c><00:02:37.840><c> an</c><00:02:38.000><c> even</c><00:02:38.319><c> case</c>

00:02:38.949 --> 00:02:38.959 align:start position:0%
odd case and an even case
 

00:02:38.959 --> 00:02:41.430 align:start position:0%
odd case and an even case
now<00:02:39.200><c> let's</c><00:02:39.440><c> just</c><00:02:39.599><c> take</c><00:02:39.840><c> hypothetically</c><00:02:41.040><c> this</c>

00:02:41.430 --> 00:02:41.440 align:start position:0%
now let's just take hypothetically this
 

00:02:41.440 --> 00:02:42.710 align:start position:0%
now let's just take hypothetically this
eight<00:02:41.760><c> doesn't</c><00:02:42.160><c> exist</c>

00:02:42.710 --> 00:02:42.720 align:start position:0%
eight doesn't exist
 

00:02:42.720 --> 00:02:45.830 align:start position:0%
eight doesn't exist
then<00:02:43.120><c> in</c><00:02:43.280><c> reality</c><00:02:43.840><c> we</c><00:02:44.000><c> have</c><00:02:44.239><c> 12</c><00:02:44.640><c> elements</c><00:02:45.519><c> so</c>

00:02:45.830 --> 00:02:45.840 align:start position:0%
then in reality we have 12 elements so
 

00:02:45.840 --> 00:02:48.790 align:start position:0%
then in reality we have 12 elements so
we<00:02:46.080><c> take</c><00:02:46.560><c> the</c><00:02:46.959><c> left</c><00:02:47.360><c> partition</c><00:02:48.080><c> to</c><00:02:48.239><c> be</c><00:02:48.480><c> six</c>

00:02:48.790 --> 00:02:48.800 align:start position:0%
we take the left partition to be six
 

00:02:48.800 --> 00:02:50.949 align:start position:0%
we take the left partition to be six
elements<00:02:49.360><c> and</c><00:02:49.519><c> the</c><00:02:49.840><c> right</c><00:02:50.080><c> partition</c><00:02:50.640><c> to</c><00:02:50.800><c> be</c>

00:02:50.949 --> 00:02:50.959 align:start position:0%
elements and the right partition to be
 

00:02:50.959 --> 00:02:51.830 align:start position:0%
elements and the right partition to be
six<00:02:51.280><c> elements</c>

00:02:51.830 --> 00:02:51.840 align:start position:0%
six elements
 

00:02:51.840 --> 00:02:54.390 align:start position:0%
six elements
so<00:02:52.080><c> in</c><00:02:52.160><c> that</c><00:02:52.400><c> case</c><00:02:52.720><c> we</c><00:02:52.879><c> know</c><00:02:53.120><c> we</c><00:02:53.280><c> can</c><00:02:53.440><c> take</c><00:02:54.080><c> the</c>

00:02:54.390 --> 00:02:54.400 align:start position:0%
so in that case we know we can take the
 

00:02:54.400 --> 00:02:55.270 align:start position:0%
so in that case we know we can take the
two

00:02:55.270 --> 00:02:55.280 align:start position:0%
two
 

00:02:55.280 --> 00:02:57.830 align:start position:0%
two
middle<00:02:55.599><c> most</c><00:02:56.000><c> elements</c><00:02:56.480><c> or</c><00:02:56.879><c> in</c><00:02:57.040><c> other</c><00:02:57.280><c> words</c>

00:02:57.830 --> 00:02:57.840 align:start position:0%
middle most elements or in other words
 

00:02:57.840 --> 00:02:59.910 align:start position:0%
middle most elements or in other words
the<00:02:58.239><c> right</c><00:02:58.640><c> most</c><00:02:59.040><c> value</c><00:02:59.599><c> in</c>

00:02:59.910 --> 00:02:59.920 align:start position:0%
the right most value in
 

00:02:59.920 --> 00:03:02.390 align:start position:0%
the right most value in
our<00:03:00.159><c> left</c><00:03:00.400><c> partition</c><00:03:01.040><c> and</c><00:03:01.280><c> the</c><00:03:01.680><c> leftmost</c>

00:03:02.390 --> 00:03:02.400 align:start position:0%
our left partition and the leftmost
 

00:03:02.400 --> 00:03:03.190 align:start position:0%
our left partition and the leftmost
value

00:03:03.190 --> 00:03:03.200 align:start position:0%
value
 

00:03:03.200 --> 00:03:05.190 align:start position:0%
value
in<00:03:03.519><c> our</c><00:03:03.840><c> right</c><00:03:04.159><c> partition</c><00:03:04.640><c> and</c><00:03:04.800><c> take</c><00:03:04.959><c> the</c>

00:03:05.190 --> 00:03:05.200 align:start position:0%
in our right partition and take the
 

00:03:05.200 --> 00:03:07.030 align:start position:0%
in our right partition and take the
average<00:03:05.760><c> so</c><00:03:06.000><c> add</c><00:03:06.239><c> them</c><00:03:06.400><c> together</c>

00:03:07.030 --> 00:03:07.040 align:start position:0%
average so add them together
 

00:03:07.040 --> 00:03:08.869 align:start position:0%
average so add them together
and<00:03:07.200><c> divide</c><00:03:07.599><c> by</c><00:03:07.840><c> two</c><00:03:08.159><c> we</c><00:03:08.319><c> know</c><00:03:08.560><c> that's</c><00:03:08.800><c> going</c>

00:03:08.869 --> 00:03:08.879 align:start position:0%
and divide by two we know that's going
 

00:03:08.879 --> 00:03:10.149 align:start position:0%
and divide by two we know that's going
to<00:03:08.959><c> be</c><00:03:09.120><c> 3.5</c>

00:03:10.149 --> 00:03:10.159 align:start position:0%
to be 3.5
 

00:03:10.159 --> 00:03:12.790 align:start position:0%
to be 3.5
so<00:03:10.319><c> how</c><00:03:10.480><c> can</c><00:03:10.720><c> we</c><00:03:11.040><c> simulate</c><00:03:11.680><c> that</c><00:03:12.000><c> without</c>

00:03:12.790 --> 00:03:12.800 align:start position:0%
so how can we simulate that without
 

00:03:12.800 --> 00:03:13.350 align:start position:0%
so how can we simulate that without
actually

00:03:13.350 --> 00:03:13.360 align:start position:0%
actually
 

00:03:13.360 --> 00:03:16.070 align:start position:0%
actually
merging<00:03:13.920><c> these</c><00:03:14.239><c> two</c><00:03:14.720><c> arrays</c><00:03:15.519><c> how</c><00:03:15.680><c> can</c><00:03:15.840><c> we</c>

00:03:16.070 --> 00:03:16.080 align:start position:0%
merging these two arrays how can we
 

00:03:16.080 --> 00:03:17.589 align:start position:0%
merging these two arrays how can we
simulate<00:03:16.560><c> that</c><00:03:16.800><c> with</c><00:03:17.120><c> just</c>

00:03:17.589 --> 00:03:17.599 align:start position:0%
simulate that with just
 

00:03:17.599 --> 00:03:20.070 align:start position:0%
simulate that with just
the<00:03:17.840><c> original</c><00:03:18.400><c> arrays</c><00:03:18.959><c> which</c><00:03:19.280><c> are</c><00:03:19.519><c> still</c><00:03:19.840><c> in</c>

00:03:20.070 --> 00:03:20.080 align:start position:0%
the original arrays which are still in
 

00:03:20.080 --> 00:03:21.270 align:start position:0%
the original arrays which are still in
sorted<00:03:20.480><c> order</c><00:03:20.879><c> right</c>

00:03:21.270 --> 00:03:21.280 align:start position:0%
sorted order right
 

00:03:21.280 --> 00:03:23.430 align:start position:0%
sorted order right
luckily<00:03:21.680><c> for</c><00:03:21.840><c> us</c><00:03:22.080><c> they</c><00:03:22.239><c> are</c><00:03:22.480><c> given</c><00:03:22.879><c> in</c><00:03:23.040><c> sorted</c>

00:03:23.430 --> 00:03:23.440 align:start position:0%
luckily for us they are given in sorted
 

00:03:23.440 --> 00:03:25.750 align:start position:0%
luckily for us they are given in sorted
order<00:03:24.080><c> so</c><00:03:24.319><c> keep</c><00:03:24.560><c> in</c><00:03:24.720><c> mind</c><00:03:24.959><c> that</c><00:03:25.200><c> the</c><00:03:25.360><c> total</c>

00:03:25.750 --> 00:03:25.760 align:start position:0%
order so keep in mind that the total
 

00:03:25.760 --> 00:03:27.350 align:start position:0%
order so keep in mind that the total
number<00:03:26.080><c> of</c><00:03:26.239><c> elements</c><00:03:26.720><c> we</c><00:03:26.879><c> have</c>

00:03:27.350 --> 00:03:27.360 align:start position:0%
number of elements we have
 

00:03:27.360 --> 00:03:30.710 align:start position:0%
number of elements we have
in<00:03:27.519><c> this</c><00:03:27.680><c> case</c><00:03:28.000><c> is</c><00:03:28.239><c> 13</c><00:03:29.200><c> and</c><00:03:29.680><c> half</c><00:03:30.239><c> the</c><00:03:30.400><c> number</c>

00:03:30.710 --> 00:03:30.720 align:start position:0%
in this case is 13 and half the number
 

00:03:30.720 --> 00:03:32.070 align:start position:0%
in this case is 13 and half the number
of<00:03:30.879><c> elements</c><00:03:31.519><c> we</c><00:03:31.680><c> have</c>

00:03:32.070 --> 00:03:32.080 align:start position:0%
of elements we have
 

00:03:32.080 --> 00:03:35.670 align:start position:0%
of elements we have
is<00:03:32.720><c> roughly</c><00:03:33.599><c> six</c><00:03:34.000><c> i'm</c><00:03:34.239><c> going</c><00:03:34.319><c> to</c><00:03:34.480><c> round</c><00:03:34.879><c> down</c>

00:03:35.670 --> 00:03:35.680 align:start position:0%
is roughly six i'm going to round down
 

00:03:35.680 --> 00:03:37.750 align:start position:0%
is roughly six i'm going to round down
in<00:03:35.840><c> this</c><00:03:36.000><c> case</c><00:03:36.560><c> and</c><00:03:36.720><c> when</c><00:03:36.959><c> we</c><00:03:37.120><c> talk</c><00:03:37.440><c> about</c>

00:03:37.750 --> 00:03:37.760 align:start position:0%
in this case and when we talk about
 

00:03:37.760 --> 00:03:39.670 align:start position:0%
in this case and when we talk about
partitioning<00:03:38.640><c> we</c><00:03:38.959><c> want</c><00:03:39.200><c> our</c>

00:03:39.670 --> 00:03:39.680 align:start position:0%
partitioning we want our
 

00:03:39.680 --> 00:03:43.030 align:start position:0%
partitioning we want our
left<00:03:40.159><c> partition</c><00:03:41.120><c> to</c><00:03:41.360><c> be</c><00:03:41.760><c> roughly</c><00:03:42.400><c> equal</c>

00:03:43.030 --> 00:03:43.040 align:start position:0%
left partition to be roughly equal
 

00:03:43.040 --> 00:03:46.149 align:start position:0%
left partition to be roughly equal
to<00:03:43.680><c> half</c><00:03:44.080><c> so</c><00:03:44.560><c> when</c><00:03:44.799><c> we</c><00:03:44.959><c> partition</c><00:03:45.519><c> this</c>

00:03:46.149 --> 00:03:46.159 align:start position:0%
to half so when we partition this
 

00:03:46.159 --> 00:03:49.190 align:start position:0%
to half so when we partition this
we<00:03:46.319><c> want</c><00:03:46.720><c> the</c><00:03:46.959><c> left</c><00:03:47.200><c> to</c><00:03:47.360><c> be</c><00:03:47.519><c> roughly</c><00:03:48.080><c> 6.</c><00:03:48.799><c> so</c><00:03:49.040><c> the</c>

00:03:49.190 --> 00:03:49.200 align:start position:0%
we want the left to be roughly 6. so the
 

00:03:49.200 --> 00:03:51.030 align:start position:0%
we want the left to be roughly 6. so the
most<00:03:49.519><c> intuitive</c><00:03:50.159><c> way</c><00:03:50.319><c> to</c><00:03:50.480><c> do</c><00:03:50.720><c> this</c>

00:03:51.030 --> 00:03:51.040 align:start position:0%
most intuitive way to do this
 

00:03:51.040 --> 00:03:53.990 align:start position:0%
most intuitive way to do this
is<00:03:51.680><c> let's</c><00:03:52.080><c> get</c><00:03:52.400><c> half</c><00:03:52.720><c> of</c><00:03:52.879><c> the</c><00:03:53.040><c> elements</c><00:03:53.680><c> of</c>

00:03:53.990 --> 00:03:54.000 align:start position:0%
is let's get half of the elements of
 

00:03:54.000 --> 00:03:54.550 align:start position:0%
is let's get half of the elements of
let's<00:03:54.239><c> say</c>

00:03:54.550 --> 00:03:54.560 align:start position:0%
let's say
 

00:03:54.560 --> 00:03:56.390 align:start position:0%
let's say
a<00:03:54.799><c> right</c><00:03:55.040><c> so</c><00:03:55.280><c> i'm</c><00:03:55.439><c> going</c><00:03:55.519><c> to</c><00:03:55.599><c> have</c><00:03:55.760><c> a</c><00:03:56.080><c> left</c>

00:03:56.390 --> 00:03:56.400 align:start position:0%
a right so i'm going to have a left
 

00:03:56.400 --> 00:03:58.470 align:start position:0%
a right so i'm going to have a left
pointer<00:03:57.120><c> initialized</c><00:03:57.840><c> here</c><00:03:58.159><c> and</c><00:03:58.319><c> i'm</c><00:03:58.400><c> going</c>

00:03:58.470 --> 00:03:58.480 align:start position:0%
pointer initialized here and i'm going
 

00:03:58.480 --> 00:04:00.710 align:start position:0%
pointer initialized here and i'm going
to<00:03:58.560><c> have</c><00:03:58.720><c> a</c><00:03:58.959><c> right</c><00:03:59.280><c> pointer</c><00:03:59.680><c> initialized</c>

00:04:00.710 --> 00:04:00.720 align:start position:0%
to have a right pointer initialized
 

00:04:00.720 --> 00:04:03.270 align:start position:0%
to have a right pointer initialized
here<00:04:01.360><c> and</c><00:04:01.680><c> i'm</c><00:04:01.840><c> gonna</c><00:04:02.080><c> find</c><00:04:02.319><c> the</c><00:04:02.560><c> middle</c><00:04:02.959><c> so</c><00:04:03.120><c> we</c>

00:04:03.270 --> 00:04:03.280 align:start position:0%
here and i'm gonna find the middle so we
 

00:04:03.280 --> 00:04:05.190 align:start position:0%
here and i'm gonna find the middle so we
know<00:04:03.439><c> this</c><00:04:03.599><c> is</c><00:04:03.760><c> index</c><00:04:04.159><c> zero</c><00:04:04.480><c> this</c><00:04:04.720><c> is</c><00:04:04.799><c> index</c>

00:04:05.190 --> 00:04:05.200 align:start position:0%
know this is index zero this is index
 

00:04:05.200 --> 00:04:07.429 align:start position:0%
know this is index zero this is index
four<00:04:05.519><c> i</c><00:04:05.680><c> add</c><00:04:05.920><c> them</c><00:04:06.159><c> together</c><00:04:06.560><c> on</c><00:04:06.799><c> average</c>

00:04:07.429 --> 00:04:07.439 align:start position:0%
four i add them together on average
 

00:04:07.439 --> 00:04:09.910 align:start position:0%
four i add them together on average
so<00:04:07.599><c> we</c><00:04:07.760><c> know</c><00:04:07.920><c> that</c><00:04:08.080><c> the</c><00:04:08.400><c> middle</c><00:04:08.959><c> is</c><00:04:09.200><c> gonna</c><00:04:09.439><c> be</c>

00:04:09.910 --> 00:04:09.920 align:start position:0%
so we know that the middle is gonna be
 

00:04:09.920 --> 00:04:11.750 align:start position:0%
so we know that the middle is gonna be
two<00:04:10.239><c> right</c><00:04:10.560><c> so</c><00:04:10.720><c> what</c><00:04:10.959><c> are</c><00:04:11.040><c> we</c><00:04:11.280><c> actually</c><00:04:11.519><c> gonna</c>

00:04:11.750 --> 00:04:11.760 align:start position:0%
two right so what are we actually gonna
 

00:04:11.760 --> 00:04:12.390 align:start position:0%
two right so what are we actually gonna
do

00:04:12.390 --> 00:04:12.400 align:start position:0%
do
 

00:04:12.400 --> 00:04:15.110 align:start position:0%
do
so<00:04:12.640><c> this</c><00:04:12.879><c> is</c><00:04:13.120><c> going</c><00:04:13.280><c> to</c><00:04:13.360><c> be</c><00:04:13.680><c> our</c><00:04:14.239><c> middle</c><00:04:14.640><c> value</c>

00:04:15.110 --> 00:04:15.120 align:start position:0%
so this is going to be our middle value
 

00:04:15.120 --> 00:04:15.509 align:start position:0%
so this is going to be our middle value
right

00:04:15.509 --> 00:04:15.519 align:start position:0%
right
 

00:04:15.519 --> 00:04:17.990 align:start position:0%
right
and<00:04:16.160><c> basically</c><00:04:16.720><c> what</c><00:04:16.959><c> that</c><00:04:17.120><c> means</c><00:04:17.519><c> is</c><00:04:17.680><c> our</c>

00:04:17.990 --> 00:04:18.000 align:start position:0%
and basically what that means is our
 

00:04:18.000 --> 00:04:20.390 align:start position:0%
and basically what that means is our
left<00:04:18.320><c> partition</c><00:04:18.959><c> is</c><00:04:19.120><c> going</c><00:04:19.199><c> to</c><00:04:19.440><c> include</c><00:04:19.919><c> that</c>

00:04:20.390 --> 00:04:20.400 align:start position:0%
left partition is going to include that
 

00:04:20.400 --> 00:04:23.590 align:start position:0%
left partition is going to include that
so<00:04:21.120><c> so</c><00:04:21.600><c> far</c><00:04:22.240><c> our</c><00:04:22.479><c> left</c><00:04:22.800><c> partition</c>

00:04:23.590 --> 00:04:23.600 align:start position:0%
so so far our left partition
 

00:04:23.600 --> 00:04:25.909 align:start position:0%
so so far our left partition
initially<00:04:24.400><c> is</c><00:04:24.560><c> going</c><00:04:24.720><c> to</c><00:04:24.800><c> be</c><00:04:24.960><c> like</c><00:04:25.280><c> this</c><00:04:25.600><c> now</c>

00:04:25.909 --> 00:04:25.919 align:start position:0%
initially is going to be like this now
 

00:04:25.919 --> 00:04:28.150 align:start position:0%
initially is going to be like this now
obviously<00:04:26.400><c> we</c><00:04:26.560><c> can</c><00:04:26.800><c> increase</c><00:04:27.360><c> it</c><00:04:27.600><c> by</c><00:04:27.840><c> adding</c>

00:04:28.150 --> 00:04:28.160 align:start position:0%
obviously we can increase it by adding
 

00:04:28.160 --> 00:04:28.870 align:start position:0%
obviously we can increase it by adding
an<00:04:28.400><c> element</c>

00:04:28.870 --> 00:04:28.880 align:start position:0%
an element
 

00:04:28.880 --> 00:04:31.350 align:start position:0%
an element
we<00:04:29.040><c> can</c><00:04:29.199><c> also</c><00:04:29.680><c> decrease</c><00:04:30.320><c> it</c><00:04:30.479><c> by</c><00:04:30.720><c> removing</c><00:04:31.199><c> an</c>

00:04:31.350 --> 00:04:31.360 align:start position:0%
we can also decrease it by removing an
 

00:04:31.360 --> 00:04:31.909 align:start position:0%
we can also decrease it by removing an
element

00:04:31.909 --> 00:04:31.919 align:start position:0%
element
 

00:04:31.919 --> 00:04:34.150 align:start position:0%
element
but<00:04:32.160><c> initially</c><00:04:32.800><c> let's</c><00:04:33.120><c> have</c><00:04:33.680><c> our</c><00:04:33.919><c> left</c>

00:04:34.150 --> 00:04:34.160 align:start position:0%
but initially let's have our left
 

00:04:34.160 --> 00:04:35.430 align:start position:0%
but initially let's have our left
partition<00:04:34.800><c> have</c>

00:04:35.430 --> 00:04:35.440 align:start position:0%
partition have
 

00:04:35.440 --> 00:04:38.230 align:start position:0%
partition have
three<00:04:36.160><c> values</c><00:04:36.800><c> in</c><00:04:36.960><c> it</c><00:04:37.360><c> so</c><00:04:37.520><c> it</c><00:04:37.600><c> has</c><00:04:37.919><c> three</c>

00:04:38.230 --> 00:04:38.240 align:start position:0%
three values in it so it has three
 

00:04:38.240 --> 00:04:40.710 align:start position:0%
three values in it so it has three
values<00:04:38.720><c> great</c><00:04:39.040><c> now</c><00:04:39.199><c> can</c><00:04:39.360><c> we</c><00:04:39.600><c> repeat</c><00:04:40.080><c> that</c><00:04:40.320><c> same</c>

00:04:40.710 --> 00:04:40.720 align:start position:0%
values great now can we repeat that same
 

00:04:40.720 --> 00:04:41.350 align:start position:0%
values great now can we repeat that same
process

00:04:41.350 --> 00:04:41.360 align:start position:0%
process
 

00:04:41.360 --> 00:04:43.510 align:start position:0%
process
up<00:04:41.600><c> here</c><00:04:42.080><c> well</c><00:04:42.320><c> the</c><00:04:42.479><c> good</c><00:04:42.720><c> thing</c><00:04:42.960><c> is</c><00:04:43.120><c> we</c><00:04:43.280><c> don't</c>

00:04:43.510 --> 00:04:43.520 align:start position:0%
up here well the good thing is we don't
 

00:04:43.520 --> 00:04:45.270 align:start position:0%
up here well the good thing is we don't
actually<00:04:43.919><c> need</c><00:04:44.160><c> to</c><00:04:44.400><c> because</c><00:04:44.720><c> look</c><00:04:44.960><c> in</c><00:04:45.120><c> this</c>

00:04:45.270 --> 00:04:45.280 align:start position:0%
actually need to because look in this
 

00:04:45.280 --> 00:04:47.670 align:start position:0%
actually need to because look in this
case<00:04:45.520><c> if</c><00:04:45.680><c> we</c><00:04:45.840><c> do</c><00:04:46.000><c> that</c><00:04:46.240><c> we're</c><00:04:46.400><c> gonna</c><00:04:46.720><c> get</c>

00:04:47.670 --> 00:04:47.680 align:start position:0%
case if we do that we're gonna get
 

00:04:47.680 --> 00:04:50.629 align:start position:0%
case if we do that we're gonna get
four<00:04:48.479><c> and</c><00:04:48.639><c> we</c><00:04:48.800><c> can</c><00:04:49.040><c> basic</c><00:04:49.440><c> if</c><00:04:49.520><c> we</c><00:04:49.759><c> want</c><00:04:50.080><c> we</c><00:04:50.320><c> can</c>

00:04:50.629 --> 00:04:50.639 align:start position:0%
four and we can basic if we want we can
 

00:04:50.639 --> 00:04:52.950 align:start position:0%
four and we can basic if we want we can
run<00:04:50.880><c> binary</c><00:04:51.360><c> search</c><00:04:51.759><c> up</c><00:04:51.919><c> here</c><00:04:52.240><c> too</c><00:04:52.560><c> but</c><00:04:52.800><c> is</c>

00:04:52.950 --> 00:04:52.960 align:start position:0%
run binary search up here too but is
 

00:04:52.960 --> 00:04:55.270 align:start position:0%
run binary search up here too but is
that<00:04:53.120><c> even</c><00:04:53.520><c> necessary</c><00:04:54.320><c> because</c>

00:04:55.270 --> 00:04:55.280 align:start position:0%
that even necessary because
 

00:04:55.280 --> 00:04:58.550 align:start position:0%
that even necessary because
look<00:04:55.520><c> at</c><00:04:55.840><c> this</c><00:04:56.639><c> half</c><00:04:57.040><c> our</c><00:04:57.280><c> elements</c><00:04:58.160><c> are</c>

00:04:58.550 --> 00:04:58.560 align:start position:0%
look at this half our elements are
 

00:04:58.560 --> 00:05:02.230 align:start position:0%
look at this half our elements are
six<00:04:59.120><c> so</c><00:04:59.440><c> really</c><00:04:59.840><c> what</c><00:05:00.000><c> we</c><00:05:00.160><c> can</c><00:05:00.400><c> do</c><00:05:00.639><c> is</c><00:05:00.800><c> say</c><00:05:01.440><c> half</c>

00:05:02.230 --> 00:05:02.240 align:start position:0%
six so really what we can do is say half
 

00:05:02.240 --> 00:05:05.270 align:start position:0%
six so really what we can do is say half
minus<00:05:03.280><c> three</c><00:05:03.919><c> over</c><00:05:04.320><c> here</c>

00:05:05.270 --> 00:05:05.280 align:start position:0%
minus three over here
 

00:05:05.280 --> 00:05:08.390 align:start position:0%
minus three over here
is<00:05:05.440><c> going</c><00:05:05.600><c> to</c><00:05:05.680><c> be</c><00:05:06.080><c> equal</c><00:05:06.800><c> to</c><00:05:07.120><c> three</c><00:05:07.600><c> so</c><00:05:08.000><c> if</c><00:05:08.160><c> we</c>

00:05:08.390 --> 00:05:08.400 align:start position:0%
is going to be equal to three so if we
 

00:05:08.400 --> 00:05:10.150 align:start position:0%
is going to be equal to three so if we
run<00:05:08.639><c> binary</c><00:05:09.039><c> search</c><00:05:09.440><c> on</c><00:05:09.680><c> just</c>

00:05:10.150 --> 00:05:10.160 align:start position:0%
run binary search on just
 

00:05:10.160 --> 00:05:12.870 align:start position:0%
run binary search on just
this<00:05:10.560><c> bottom</c><00:05:10.960><c> ray</c><00:05:11.520><c> on</c><00:05:11.680><c> this</c><00:05:11.919><c> bottom</c><00:05:12.320><c> array</c><00:05:12.720><c> we</c>

00:05:12.870 --> 00:05:12.880 align:start position:0%
this bottom ray on this bottom array we
 

00:05:12.880 --> 00:05:13.350 align:start position:0%
this bottom ray on this bottom array we
can

00:05:13.350 --> 00:05:13.360 align:start position:0%
can
 

00:05:13.360 --> 00:05:15.990 align:start position:0%
can
compute<00:05:14.160><c> the</c><00:05:14.479><c> size</c><00:05:14.880><c> of</c><00:05:14.960><c> the</c><00:05:15.120><c> left</c><00:05:15.440><c> partition</c>

00:05:15.990 --> 00:05:16.000 align:start position:0%
compute the size of the left partition
 

00:05:16.000 --> 00:05:17.110 align:start position:0%
compute the size of the left partition
for<00:05:16.320><c> the</c><00:05:16.639><c> second</c>

00:05:17.110 --> 00:05:17.120 align:start position:0%
for the second
 

00:05:17.120 --> 00:05:19.749 align:start position:0%
for the second
array<00:05:17.520><c> right</c><00:05:17.840><c> we</c><00:05:18.000><c> can</c><00:05:18.080><c> just</c><00:05:18.320><c> compute</c><00:05:18.800><c> it</c><00:05:18.960><c> using</c>

00:05:19.749 --> 00:05:19.759 align:start position:0%
array right we can just compute it using
 

00:05:19.759 --> 00:05:20.629 align:start position:0%
array right we can just compute it using
our<00:05:20.160><c> half</c>

00:05:20.629 --> 00:05:20.639 align:start position:0%
our half
 

00:05:20.639 --> 00:05:23.350 align:start position:0%
our half
value<00:05:21.520><c> and</c><00:05:21.680><c> since</c><00:05:21.919><c> we</c><00:05:22.080><c> know</c><00:05:22.320><c> 6</c><00:05:22.560><c> minus</c><00:05:22.960><c> three</c><00:05:23.199><c> is</c>

00:05:23.350 --> 00:05:23.360 align:start position:0%
value and since we know 6 minus three is
 

00:05:23.360 --> 00:05:25.350 align:start position:0%
value and since we know 6 minus three is
three<00:05:23.680><c> we</c><00:05:23.919><c> know</c><00:05:24.160><c> initially</c><00:05:24.639><c> we</c><00:05:24.800><c> can</c><00:05:24.960><c> say</c><00:05:25.199><c> that</c>

00:05:25.350 --> 00:05:25.360 align:start position:0%
three we know initially we can say that
 

00:05:25.360 --> 00:05:27.270 align:start position:0%
three we know initially we can say that
the<00:05:25.600><c> left</c><00:05:25.919><c> partition</c><00:05:26.560><c> of</c><00:05:26.800><c> this</c>

00:05:27.270 --> 00:05:27.280 align:start position:0%
the left partition of this
 

00:05:27.280 --> 00:05:30.070 align:start position:0%
the left partition of this
is<00:05:27.440><c> gonna</c><00:05:27.759><c> be</c><00:05:28.160><c> three</c><00:05:28.720><c> as</c><00:05:28.880><c> well</c><00:05:29.360><c> we</c><00:05:29.520><c> don't</c><00:05:29.759><c> even</c>

00:05:30.070 --> 00:05:30.080 align:start position:0%
is gonna be three as well we don't even
 

00:05:30.080 --> 00:05:31.110 align:start position:0%
is gonna be three as well we don't even
need<00:05:30.400><c> to</c><00:05:30.639><c> keep</c>

00:05:31.110 --> 00:05:31.120 align:start position:0%
need to keep
 

00:05:31.120 --> 00:05:33.670 align:start position:0%
need to keep
a<00:05:31.360><c> left</c><00:05:31.600><c> and</c><00:05:31.759><c> right</c><00:05:32.000><c> pointer</c><00:05:32.400><c> for</c><00:05:32.639><c> this</c><00:05:32.960><c> array</c>

00:05:33.670 --> 00:05:33.680 align:start position:0%
a left and right pointer for this array
 

00:05:33.680 --> 00:05:35.430 align:start position:0%
a left and right pointer for this array
so<00:05:34.000><c> these</c><00:05:34.560><c> two</c>

00:05:35.430 --> 00:05:35.440 align:start position:0%
so these two
 

00:05:35.440 --> 00:05:38.550 align:start position:0%
so these two
uh<00:05:35.919><c> sub</c><00:05:36.240><c> arrays</c><00:05:36.800><c> make</c><00:05:37.199><c> up</c><00:05:37.440><c> our</c><00:05:37.680><c> left</c><00:05:38.080><c> partition</c>

00:05:38.550 --> 00:05:38.560 align:start position:0%
uh sub arrays make up our left partition
 

00:05:38.560 --> 00:05:40.310 align:start position:0%
uh sub arrays make up our left partition
now<00:05:38.800><c> my</c><00:05:39.039><c> question</c><00:05:39.440><c> is</c><00:05:39.600><c> how</c><00:05:39.840><c> do</c><00:05:40.000><c> we</c>

00:05:40.310 --> 00:05:40.320 align:start position:0%
now my question is how do we
 

00:05:40.320 --> 00:05:43.029 align:start position:0%
now my question is how do we
know<00:05:40.560><c> if</c><00:05:40.720><c> we</c><00:05:41.120><c> found</c><00:05:41.680><c> the</c><00:05:41.840><c> correct</c><00:05:42.720><c> left</c>

00:05:43.029 --> 00:05:43.039 align:start position:0%
know if we found the correct left
 

00:05:43.039 --> 00:05:44.469 align:start position:0%
know if we found the correct left
partition<00:05:43.680><c> or</c><00:05:43.919><c> not</c>

00:05:44.469 --> 00:05:44.479 align:start position:0%
partition or not
 

00:05:44.479 --> 00:05:46.710 align:start position:0%
partition or not
well<00:05:44.639><c> we</c><00:05:44.880><c> want</c><00:05:45.120><c> them</c><00:05:45.360><c> to</c><00:05:45.520><c> be</c><00:05:45.759><c> in</c><00:05:45.919><c> order</c><00:05:46.400><c> right</c>

00:05:46.710 --> 00:05:46.720 align:start position:0%
well we want them to be in order right
 

00:05:46.720 --> 00:05:49.110 align:start position:0%
well we want them to be in order right
so<00:05:47.120><c> notice</c><00:05:47.520><c> how</c><00:05:47.680><c> we</c><00:05:48.000><c> already</c><00:05:48.400><c> know</c><00:05:48.639><c> that</c><00:05:48.800><c> this</c>

00:05:49.110 --> 00:05:49.120 align:start position:0%
so notice how we already know that this
 

00:05:49.120 --> 00:05:50.310 align:start position:0%
so notice how we already know that this
3<00:05:49.680><c> is</c><00:05:49.840><c> going</c><00:05:49.919><c> to</c><00:05:50.000><c> be</c>

00:05:50.310 --> 00:05:50.320 align:start position:0%
3 is going to be
 

00:05:50.320 --> 00:05:52.230 align:start position:0%
3 is going to be
less<00:05:50.639><c> than</c><00:05:50.800><c> or</c><00:05:51.039><c> equal</c><00:05:51.360><c> to</c><00:05:51.520><c> the</c><00:05:51.680><c> element</c><00:05:52.080><c> that</c>

00:05:52.230 --> 00:05:52.240 align:start position:0%
less than or equal to the element that
 

00:05:52.240 --> 00:05:54.469 align:start position:0%
less than or equal to the element that
comes<00:05:52.639><c> after</c><00:05:52.960><c> it</c><00:05:53.120><c> that's</c><00:05:53.360><c> what</c><00:05:53.600><c> sorted</c><00:05:54.080><c> order</c>

00:05:54.469 --> 00:05:54.479 align:start position:0%
comes after it that's what sorted order
 

00:05:54.479 --> 00:05:55.189 align:start position:0%
comes after it that's what sorted order
means

00:05:55.189 --> 00:05:55.199 align:start position:0%
means
 

00:05:55.199 --> 00:05:57.270 align:start position:0%
means
and<00:05:55.360><c> we</c><00:05:55.520><c> already</c><00:05:55.919><c> know</c><00:05:56.160><c> this</c><00:05:56.639><c> value</c><00:05:57.039><c> is</c><00:05:57.199><c> going</c>

00:05:57.270 --> 00:05:57.280 align:start position:0%
and we already know this value is going
 

00:05:57.280 --> 00:05:59.110 align:start position:0%
and we already know this value is going
to<00:05:57.360><c> be</c><00:05:57.759><c> less</c><00:05:58.000><c> than</c><00:05:58.240><c> or</c><00:05:58.479><c> equal</c>

00:05:59.110 --> 00:05:59.120 align:start position:0%
to be less than or equal
 

00:05:59.120 --> 00:06:01.110 align:start position:0%
to be less than or equal
to<00:05:59.360><c> the</c><00:05:59.520><c> value</c><00:05:59.919><c> to</c><00:06:00.080><c> the</c><00:06:00.240><c> right</c><00:06:00.479><c> of</c><00:06:00.639><c> it</c><00:06:00.880><c> because</c>

00:06:01.110 --> 00:06:01.120 align:start position:0%
to the value to the right of it because
 

00:06:01.120 --> 00:06:03.110 align:start position:0%
to the value to the right of it because
this<00:06:01.280><c> is</c><00:06:01.440><c> also</c><00:06:01.759><c> in</c><00:06:01.919><c> sorted</c><00:06:02.319><c> order</c>

00:06:03.110 --> 00:06:03.120 align:start position:0%
this is also in sorted order
 

00:06:03.120 --> 00:06:05.350 align:start position:0%
this is also in sorted order
but<00:06:03.440><c> we</c><00:06:03.680><c> want</c><00:06:03.919><c> to</c><00:06:04.000><c> make</c><00:06:04.240><c> sure</c><00:06:04.400><c> that</c><00:06:04.639><c> the</c><00:06:04.960><c> left</c>

00:06:05.350 --> 00:06:05.360 align:start position:0%
but we want to make sure that the left
 

00:06:05.360 --> 00:06:06.469 align:start position:0%
but we want to make sure that the left
partition

00:06:06.469 --> 00:06:06.479 align:start position:0%
partition
 

00:06:06.479 --> 00:06:09.830 align:start position:0%
partition
is<00:06:07.039><c> less</c><00:06:07.360><c> than</c><00:06:07.680><c> or</c><00:06:07.919><c> equal</c><00:06:08.639><c> to</c><00:06:09.199><c> every</c>

00:06:09.830 --> 00:06:09.840 align:start position:0%
is less than or equal to every
 

00:06:09.840 --> 00:06:12.790 align:start position:0%
is less than or equal to every
element<00:06:10.400><c> in</c><00:06:10.800><c> the</c><00:06:11.120><c> right</c><00:06:11.520><c> partition</c><00:06:12.160><c> and</c><00:06:12.400><c> this</c>

00:06:12.790 --> 00:06:12.800 align:start position:0%
element in the right partition and this
 

00:06:12.800 --> 00:06:14.469 align:start position:0%
element in the right partition and this
is<00:06:12.960><c> our</c><00:06:13.280><c> right</c><00:06:13.520><c> partition</c><00:06:14.160><c> so</c>

00:06:14.469 --> 00:06:14.479 align:start position:0%
is our right partition so
 

00:06:14.479 --> 00:06:17.189 align:start position:0%
is our right partition so
how<00:06:14.800><c> can</c><00:06:14.960><c> we</c><00:06:15.120><c> determine</c><00:06:15.759><c> that</c><00:06:16.319><c> well</c><00:06:16.639><c> one</c><00:06:16.960><c> thing</c>

00:06:17.189 --> 00:06:17.199 align:start position:0%
how can we determine that well one thing
 

00:06:17.199 --> 00:06:18.070 align:start position:0%
how can we determine that well one thing
we<00:06:17.360><c> can</c><00:06:17.600><c> ask</c>

00:06:18.070 --> 00:06:18.080 align:start position:0%
we can ask
 

00:06:18.080 --> 00:06:21.110 align:start position:0%
we can ask
is<00:06:18.720><c> is</c><00:06:19.120><c> this</c><00:06:19.759><c> is</c><00:06:20.000><c> the</c><00:06:20.319><c> right</c><00:06:20.639><c> most</c>

00:06:21.110 --> 00:06:21.120 align:start position:0%
is is this is the right most
 

00:06:21.120 --> 00:06:23.990 align:start position:0%
is is this is the right most
element<00:06:21.759><c> in</c><00:06:22.160><c> this</c><00:06:22.400><c> part</c><00:06:22.639><c> of</c><00:06:22.720><c> the</c><00:06:22.880><c> partition</c>

00:06:23.990 --> 00:06:24.000 align:start position:0%
element in this part of the partition
 

00:06:24.000 --> 00:06:25.110 align:start position:0%
element in this part of the partition
less<00:06:24.319><c> than</c><00:06:24.720><c> or</c>

00:06:25.110 --> 00:06:25.120 align:start position:0%
less than or
 

00:06:25.120 --> 00:06:28.950 align:start position:0%
less than or
equal<00:06:26.000><c> to</c><00:06:27.120><c> this</c><00:06:28.080><c> value</c>

00:06:28.950 --> 00:06:28.960 align:start position:0%
equal to this value
 

00:06:28.960 --> 00:06:32.550 align:start position:0%
equal to this value
and<00:06:29.280><c> in</c><00:06:29.520><c> this</c><00:06:29.759><c> case</c><00:06:30.080><c> it</c><00:06:30.400><c> is</c><00:06:31.120><c> we</c><00:06:31.520><c> also</c><00:06:32.080><c> want</c><00:06:32.319><c> to</c>

00:06:32.550 --> 00:06:32.560 align:start position:0%
and in this case it is we also want to
 

00:06:32.560 --> 00:06:33.350 align:start position:0%
and in this case it is we also want to
ask

00:06:33.350 --> 00:06:33.360 align:start position:0%
ask
 

00:06:33.360 --> 00:06:37.510 align:start position:0%
ask
is<00:06:34.240><c> this</c><00:06:34.639><c> value</c><00:06:35.680><c> less</c><00:06:36.000><c> than</c><00:06:36.319><c> or</c><00:06:36.560><c> equal</c>

00:06:37.510 --> 00:06:37.520 align:start position:0%
is this value less than or equal
 

00:06:37.520 --> 00:06:40.629 align:start position:0%
is this value less than or equal
to<00:06:38.240><c> the</c><00:06:38.800><c> left</c><00:06:39.199><c> most</c><00:06:39.600><c> value</c><00:06:40.160><c> in</c>

00:06:40.629 --> 00:06:40.639 align:start position:0%
to the left most value in
 

00:06:40.639 --> 00:06:43.029 align:start position:0%
to the left most value in
this<00:06:41.039><c> part</c><00:06:41.280><c> of</c><00:06:41.360><c> the</c><00:06:41.600><c> partition</c><00:06:42.319><c> in</c><00:06:42.479><c> the</c><00:06:42.720><c> right</c>

00:06:43.029 --> 00:06:43.039 align:start position:0%
this part of the partition in the right
 

00:06:43.039 --> 00:06:43.670 align:start position:0%
this part of the partition in the right
partition

00:06:43.670 --> 00:06:43.680 align:start position:0%
partition
 

00:06:43.680 --> 00:06:46.230 align:start position:0%
partition
is<00:06:43.840><c> it</c><00:06:44.080><c> less</c><00:06:44.319><c> than</c><00:06:44.560><c> or</c><00:06:44.720><c> equal</c><00:06:45.039><c> to</c><00:06:45.199><c> that</c><00:06:45.680><c> in</c><00:06:45.919><c> this</c>

00:06:46.230 --> 00:06:46.240 align:start position:0%
is it less than or equal to that in this
 

00:06:46.240 --> 00:06:46.790 align:start position:0%
is it less than or equal to that in this
case

00:06:46.790 --> 00:06:46.800 align:start position:0%
case
 

00:06:46.800 --> 00:06:50.070 align:start position:0%
case
it<00:06:47.199><c> is</c><00:06:48.000><c> and</c><00:06:48.240><c> what</c><00:06:48.400><c> this</c><00:06:48.800><c> tells</c><00:06:49.120><c> us</c><00:06:49.360><c> is</c><00:06:49.520><c> that</c>

00:06:50.070 --> 00:06:50.080 align:start position:0%
it is and what this tells us is that
 

00:06:50.080 --> 00:06:52.629 align:start position:0%
it is and what this tells us is that
our<00:06:50.560><c> left</c><00:06:50.880><c> partition</c><00:06:51.520><c> has</c><00:06:51.759><c> been</c><00:06:52.080><c> done</c>

00:06:52.629 --> 00:06:52.639 align:start position:0%
our left partition has been done
 

00:06:52.639 --> 00:06:53.749 align:start position:0%
our left partition has been done
correctly

00:06:53.749 --> 00:06:53.759 align:start position:0%
correctly
 

00:06:53.759 --> 00:06:55.510 align:start position:0%
correctly
and<00:06:53.919><c> if</c><00:06:54.000><c> it's</c><00:06:54.160><c> not</c><00:06:54.400><c> clear</c><00:06:54.639><c> enough</c><00:06:54.960><c> let</c><00:06:55.120><c> me</c><00:06:55.280><c> just</c>

00:06:55.510 --> 00:06:55.520 align:start position:0%
and if it's not clear enough let me just
 

00:06:55.520 --> 00:06:57.909 align:start position:0%
and if it's not clear enough let me just
write<00:06:55.759><c> it</c><00:06:55.919><c> out</c><00:06:56.080><c> again</c><00:06:56.720><c> so</c><00:06:56.960><c> remember</c><00:06:57.520><c> if</c><00:06:57.599><c> we</c>

00:06:57.909 --> 00:06:57.919 align:start position:0%
write it out again so remember if we
 

00:06:57.919 --> 00:07:00.150 align:start position:0%
write it out again so remember if we
merge<00:06:58.479><c> these</c><00:06:58.800><c> two</c><00:06:59.039><c> arrays</c><00:06:59.520><c> this</c><00:06:59.680><c> is</c><00:06:59.840><c> what</c><00:07:00.000><c> it's</c>

00:07:00.150 --> 00:07:00.160 align:start position:0%
merge these two arrays this is what it's
 

00:07:00.160 --> 00:07:01.189 align:start position:0%
merge these two arrays this is what it's
going<00:07:00.240><c> to</c><00:07:00.400><c> look</c><00:07:00.639><c> like</c>

00:07:01.189 --> 00:07:01.199 align:start position:0%
going to look like
 

00:07:01.199 --> 00:07:04.629 align:start position:0%
going to look like
and<00:07:01.360><c> our</c><00:07:01.680><c> left</c><00:07:02.160><c> partition</c><00:07:03.120><c> is</c><00:07:03.360><c> going</c><00:07:03.599><c> to</c><00:07:03.919><c> be</c>

00:07:04.629 --> 00:07:04.639 align:start position:0%
and our left partition is going to be
 

00:07:04.639 --> 00:07:07.029 align:start position:0%
and our left partition is going to be
this<00:07:05.120><c> right</c><00:07:05.360><c> we</c><00:07:05.520><c> have</c><00:07:05.759><c> 13</c><00:07:06.240><c> elements</c><00:07:06.720><c> this</c><00:07:06.880><c> is</c>

00:07:07.029 --> 00:07:07.039 align:start position:0%
this right we have 13 elements this is
 

00:07:07.039 --> 00:07:08.550 align:start position:0%
this right we have 13 elements this is
our<00:07:07.280><c> left</c><00:07:07.599><c> partition</c>

00:07:08.550 --> 00:07:08.560 align:start position:0%
our left partition
 

00:07:08.560 --> 00:07:11.270 align:start position:0%
our left partition
and<00:07:08.720><c> we</c><00:07:08.960><c> can</c><00:07:09.199><c> say</c><00:07:09.599><c> that</c><00:07:10.160><c> this</c><00:07:10.639><c> is</c><00:07:10.800><c> our</c><00:07:11.039><c> right</c>

00:07:11.270 --> 00:07:11.280 align:start position:0%
and we can say that this is our right
 

00:07:11.280 --> 00:07:11.990 align:start position:0%
and we can say that this is our right
partition

00:07:11.990 --> 00:07:12.000 align:start position:0%
partition
 

00:07:12.000 --> 00:07:14.790 align:start position:0%
partition
but<00:07:12.240><c> since</c><00:07:12.560><c> it's</c><00:07:12.800><c> odd</c><00:07:13.120><c> we</c><00:07:13.440><c> can</c><00:07:13.759><c> add</c><00:07:14.080><c> that</c><00:07:14.319><c> extra</c>

00:07:14.790 --> 00:07:14.800 align:start position:0%
but since it's odd we can add that extra
 

00:07:14.800 --> 00:07:15.350 align:start position:0%
but since it's odd we can add that extra
element

00:07:15.350 --> 00:07:15.360 align:start position:0%
element
 

00:07:15.360 --> 00:07:17.110 align:start position:0%
element
and<00:07:15.599><c> you</c><00:07:15.759><c> can</c><00:07:15.919><c> see</c><00:07:16.080><c> that</c><00:07:16.240><c> that's</c><00:07:16.479><c> exactly</c><00:07:16.880><c> what</c>

00:07:17.110 --> 00:07:17.120 align:start position:0%
and you can see that that's exactly what
 

00:07:17.120 --> 00:07:18.950 align:start position:0%
and you can see that that's exactly what
we<00:07:17.520><c> found</c><00:07:17.919><c> here</c><00:07:18.319><c> right</c>

00:07:18.950 --> 00:07:18.960 align:start position:0%
we found here right
 

00:07:18.960 --> 00:07:21.110 align:start position:0%
we found here right
okay<00:07:19.199><c> so</c><00:07:19.360><c> we</c><00:07:19.599><c> know</c><00:07:19.840><c> we</c><00:07:20.160><c> found</c><00:07:20.560><c> the</c><00:07:20.800><c> left</c>

00:07:21.110 --> 00:07:21.120 align:start position:0%
okay so we know we found the left
 

00:07:21.120 --> 00:07:23.270 align:start position:0%
okay so we know we found the left
partition<00:07:21.680><c> correctly</c><00:07:22.240><c> right</c><00:07:22.479><c> so</c><00:07:22.720><c> the</c><00:07:22.880><c> left</c>

00:07:23.270 --> 00:07:23.280 align:start position:0%
partition correctly right so the left
 

00:07:23.280 --> 00:07:25.110 align:start position:0%
partition correctly right so the left
is<00:07:23.440><c> going</c><00:07:23.680><c> to</c><00:07:23.840><c> be</c><00:07:24.000><c> this</c><00:07:24.319><c> sixth</c><00:07:24.560><c> element</c><00:07:24.960><c> but</c>

00:07:25.110 --> 00:07:25.120 align:start position:0%
is going to be this sixth element but
 

00:07:25.120 --> 00:07:27.670 align:start position:0%
is going to be this sixth element but
how<00:07:25.280><c> do</c><00:07:25.360><c> we</c><00:07:25.599><c> find</c><00:07:26.160><c> that</c><00:07:26.479><c> middle</c><00:07:26.880><c> value</c>

00:07:27.670 --> 00:07:27.680 align:start position:0%
how do we find that middle value
 

00:07:27.680 --> 00:07:30.790 align:start position:0%
how do we find that middle value
well<00:07:27.919><c> in</c><00:07:28.080><c> this</c><00:07:28.400><c> case</c><00:07:29.280><c> either</c><00:07:29.680><c> of</c><00:07:29.840><c> these</c><00:07:30.240><c> two</c><00:07:30.639><c> is</c>

00:07:30.790 --> 00:07:30.800 align:start position:0%
well in this case either of these two is
 

00:07:30.800 --> 00:07:31.110 align:start position:0%
well in this case either of these two is
a

00:07:31.110 --> 00:07:31.120 align:start position:0%
a
 

00:07:31.120 --> 00:07:34.550 align:start position:0%
a
four<00:07:31.919><c> so</c><00:07:32.880><c> either</c><00:07:33.199><c> of</c><00:07:33.360><c> them</c><00:07:33.840><c> is</c><00:07:34.000><c> going</c><00:07:34.240><c> to</c><00:07:34.400><c> be</c>

00:07:34.550 --> 00:07:34.560 align:start position:0%
four so either of them is going to be
 

00:07:34.560 --> 00:07:36.629 align:start position:0%
four so either of them is going to be
the<00:07:34.720><c> median</c><00:07:35.120><c> right</c><00:07:35.280><c> we</c><00:07:35.440><c> have</c><00:07:35.599><c> two</c><00:07:35.919><c> fours</c>

00:07:36.629 --> 00:07:36.639 align:start position:0%
the median right we have two fours
 

00:07:36.639 --> 00:07:38.870 align:start position:0%
the median right we have two fours
either<00:07:36.960><c> of</c><00:07:37.120><c> them</c><00:07:37.360><c> could</c><00:07:37.520><c> be</c><00:07:37.680><c> the</c><00:07:37.840><c> median</c><00:07:38.560><c> but</c>

00:07:38.870 --> 00:07:38.880 align:start position:0%
either of them could be the median but
 

00:07:38.880 --> 00:07:40.469 align:start position:0%
either of them could be the median but
hypothetically<00:07:39.919><c> let's</c><00:07:40.160><c> say</c>

00:07:40.469 --> 00:07:40.479 align:start position:0%
hypothetically let's say
 

00:07:40.479 --> 00:07:42.390 align:start position:0%
hypothetically let's say
one<00:07:40.639><c> of</c><00:07:40.800><c> these</c><00:07:41.039><c> was</c><00:07:41.280><c> a</c><00:07:41.520><c> five</c><00:07:41.919><c> so</c><00:07:42.080><c> let's</c><00:07:42.240><c> say</c>

00:07:42.390 --> 00:07:42.400 align:start position:0%
one of these was a five so let's say
 

00:07:42.400 --> 00:07:43.589 align:start position:0%
one of these was a five so let's say
maybe<00:07:42.720><c> in</c><00:07:42.800><c> the</c><00:07:43.039><c> top</c>

00:07:43.589 --> 00:07:43.599 align:start position:0%
maybe in the top
 

00:07:43.599 --> 00:07:47.110 align:start position:0%
maybe in the top
we<00:07:43.840><c> had</c><00:07:44.240><c> a</c><00:07:44.560><c> 5</c><00:07:44.960><c> so</c><00:07:45.599><c> this</c><00:07:45.840><c> would</c><00:07:46.000><c> be</c><00:07:46.160><c> a</c><00:07:46.400><c> 5.</c>

00:07:47.110 --> 00:07:47.120 align:start position:0%
we had a 5 so this would be a 5.
 

00:07:47.120 --> 00:07:49.029 align:start position:0%
we had a 5 so this would be a 5.
how<00:07:47.360><c> would</c><00:07:47.599><c> we</c><00:07:47.759><c> find</c><00:07:48.080><c> the</c><00:07:48.240><c> median</c><00:07:48.720><c> in</c><00:07:48.800><c> that</c>

00:07:49.029 --> 00:07:49.039 align:start position:0%
how would we find the median in that
 

00:07:49.039 --> 00:07:50.390 align:start position:0%
how would we find the median in that
case<00:07:49.840><c> well</c>

00:07:50.390 --> 00:07:50.400 align:start position:0%
case well
 

00:07:50.400 --> 00:07:53.110 align:start position:0%
case well
from<00:07:51.199><c> these</c><00:07:51.599><c> two</c><00:07:51.840><c> values</c><00:07:52.319><c> right</c><00:07:52.560><c> we</c><00:07:52.720><c> know</c><00:07:52.960><c> one</c>

00:07:53.110 --> 00:07:53.120 align:start position:0%
from these two values right we know one
 

00:07:53.120 --> 00:07:55.270 align:start position:0%
from these two values right we know one
of<00:07:53.280><c> them</c><00:07:53.520><c> has</c><00:07:53.680><c> to</c><00:07:53.840><c> be</c><00:07:54.080><c> the</c><00:07:54.319><c> median</c>

00:07:55.270 --> 00:07:55.280 align:start position:0%
of them has to be the median
 

00:07:55.280 --> 00:07:57.990 align:start position:0%
of them has to be the median
what<00:07:55.440><c> we</c><00:07:55.599><c> would</c><00:07:55.759><c> do</c><00:07:56.080><c> is</c><00:07:56.400><c> take</c><00:07:56.639><c> the</c><00:07:56.879><c> minimum</c><00:07:57.520><c> of</c>

00:07:57.990 --> 00:07:58.000 align:start position:0%
what we would do is take the minimum of
 

00:07:58.000 --> 00:07:58.869 align:start position:0%
what we would do is take the minimum of
both<00:07:58.319><c> of</c><00:07:58.400><c> them</c>

00:07:58.869 --> 00:07:58.879 align:start position:0%
both of them
 

00:07:58.879 --> 00:08:01.749 align:start position:0%
both of them
so<00:07:59.120><c> we</c><00:07:59.360><c> take</c><00:07:59.520><c> the</c><00:07:59.759><c> minimum</c><00:08:00.560><c> of</c><00:08:00.720><c> the</c><00:08:01.039><c> leftmost</c>

00:08:01.749 --> 00:08:01.759 align:start position:0%
so we take the minimum of the leftmost
 

00:08:01.759 --> 00:08:03.909 align:start position:0%
so we take the minimum of the leftmost
values<00:08:02.319><c> in</c><00:08:02.479><c> both</c><00:08:02.800><c> partitions</c><00:08:03.520><c> so</c>

00:08:03.909 --> 00:08:03.919 align:start position:0%
values in both partitions so
 

00:08:03.919 --> 00:08:07.110 align:start position:0%
values in both partitions so
so<00:08:04.080><c> the</c><00:08:04.240><c> min</c><00:08:04.720><c> of</c><00:08:05.199><c> 5</c><00:08:05.680><c> and</c><00:08:05.919><c> 4</c><00:08:06.400><c> and</c><00:08:06.560><c> we</c><00:08:06.639><c> know</c><00:08:06.879><c> that's</c>

00:08:07.110 --> 00:08:07.120 align:start position:0%
so the min of 5 and 4 and we know that's
 

00:08:07.120 --> 00:08:07.909 align:start position:0%
so the min of 5 and 4 and we know that's
going<00:08:07.280><c> to</c><00:08:07.360><c> be</c>

00:08:07.909 --> 00:08:07.919 align:start position:0%
going to be
 

00:08:07.919 --> 00:08:11.270 align:start position:0%
going to be
4<00:08:08.240><c> so</c><00:08:08.560><c> 4</c><00:08:09.039><c> is</c><00:08:09.280><c> our</c><00:08:09.520><c> median</c><00:08:10.240><c> so</c><00:08:10.400><c> this</c><00:08:10.720><c> example</c><00:08:11.120><c> was</c>

00:08:11.270 --> 00:08:11.280 align:start position:0%
4 so 4 is our median so this example was
 

00:08:11.280 --> 00:08:11.990 align:start position:0%
4 so 4 is our median so this example was
a<00:08:11.360><c> little</c><00:08:11.680><c> too</c>

00:08:11.990 --> 00:08:12.000 align:start position:0%
a little too
 

00:08:12.000 --> 00:08:13.749 align:start position:0%
a little too
easy<00:08:12.319><c> because</c><00:08:12.639><c> we</c><00:08:12.720><c> didn't</c><00:08:13.039><c> actually</c><00:08:13.360><c> really</c>

00:08:13.749 --> 00:08:13.759 align:start position:0%
easy because we didn't actually really
 

00:08:13.759 --> 00:08:15.189 align:start position:0%
easy because we didn't actually really
need<00:08:14.000><c> to</c><00:08:14.160><c> run</c><00:08:14.400><c> a</c><00:08:14.560><c> search</c>

00:08:15.189 --> 00:08:15.199 align:start position:0%
need to run a search
 

00:08:15.199 --> 00:08:18.150 align:start position:0%
need to run a search
so<00:08:15.520><c> let's</c><00:08:15.840><c> remove</c><00:08:16.720><c> one</c><00:08:17.039><c> element</c><00:08:17.520><c> and</c><00:08:17.759><c> let's</c>

00:08:18.150 --> 00:08:18.160 align:start position:0%
so let's remove one element and let's
 

00:08:18.160 --> 00:08:19.589 align:start position:0%
so let's remove one element and let's
update<00:08:18.639><c> our</c><00:08:19.039><c> total</c>

00:08:19.589 --> 00:08:19.599 align:start position:0%
update our total
 

00:08:19.599 --> 00:08:22.550 align:start position:0%
update our total
to<00:08:20.240><c> 12</c><00:08:20.720><c> now</c><00:08:20.960><c> instead</c><00:08:21.280><c> of</c><00:08:21.440><c> 13</c><00:08:22.000><c> because</c><00:08:22.240><c> we</c><00:08:22.319><c> just</c>

00:08:22.550 --> 00:08:22.560 align:start position:0%
to 12 now instead of 13 because we just
 

00:08:22.560 --> 00:08:23.430 align:start position:0%
to 12 now instead of 13 because we just
removed<00:08:23.039><c> one</c>

00:08:23.430 --> 00:08:23.440 align:start position:0%
removed one
 

00:08:23.440 --> 00:08:26.070 align:start position:0%
removed one
the<00:08:23.680><c> half</c><00:08:24.080><c> is</c><00:08:24.240><c> still</c><00:08:24.479><c> going</c><00:08:24.639><c> to</c><00:08:24.800><c> be</c><00:08:25.120><c> six</c><00:08:25.599><c> so</c><00:08:25.759><c> now</c>

00:08:26.070 --> 00:08:26.080 align:start position:0%
the half is still going to be six so now
 

00:08:26.080 --> 00:08:27.589 align:start position:0%
the half is still going to be six so now
let's<00:08:26.400><c> do</c><00:08:26.639><c> the</c><00:08:26.720><c> same</c><00:08:26.960><c> thing</c><00:08:27.199><c> our</c><00:08:27.360><c> right</c>

00:08:27.589 --> 00:08:27.599 align:start position:0%
let's do the same thing our right
 

00:08:27.599 --> 00:08:28.790 align:start position:0%
let's do the same thing our right
pointer<00:08:27.919><c> is</c><00:08:28.080><c> going</c><00:08:28.160><c> to</c><00:08:28.240><c> be</c><00:08:28.400><c> here</c>

00:08:28.790 --> 00:08:28.800 align:start position:0%
pointer is going to be here
 

00:08:28.800 --> 00:08:30.869 align:start position:0%
pointer is going to be here
this<00:08:28.960><c> is</c><00:08:29.120><c> index</c><00:08:29.520><c> zero</c><00:08:29.840><c> this</c><00:08:30.000><c> is</c><00:08:30.160><c> index</c><00:08:30.560><c> three</c>

00:08:30.869 --> 00:08:30.879 align:start position:0%
this is index zero this is index three
 

00:08:30.879 --> 00:08:33.029 align:start position:0%
this is index zero this is index three
we<00:08:31.039><c> divide</c><00:08:31.759><c> three</c><00:08:32.080><c> by</c><00:08:32.399><c> two</c>

00:08:33.029 --> 00:08:33.039 align:start position:0%
we divide three by two
 

00:08:33.039 --> 00:08:36.310 align:start position:0%
we divide three by two
we're<00:08:33.200><c> going</c><00:08:33.360><c> to</c><00:08:33.440><c> round</c><00:08:33.760><c> down</c><00:08:34.240><c> to</c><00:08:34.560><c> one</c><00:08:35.360><c> so</c>

00:08:36.310 --> 00:08:36.320 align:start position:0%
we're going to round down to one so
 

00:08:36.320 --> 00:08:39.589 align:start position:0%
we're going to round down to one so
this<00:08:36.880><c> is</c><00:08:37.039><c> going</c><00:08:37.200><c> to</c><00:08:37.279><c> be</c><00:08:37.599><c> our</c><00:08:38.159><c> middle</c><00:08:38.800><c> position</c>

00:08:39.589 --> 00:08:39.599 align:start position:0%
this is going to be our middle position
 

00:08:39.599 --> 00:08:41.750 align:start position:0%
this is going to be our middle position
and<00:08:39.760><c> what</c><00:08:40.000><c> that</c><00:08:40.240><c> tells</c><00:08:40.560><c> us</c><00:08:40.800><c> is</c><00:08:41.039><c> our</c><00:08:41.440><c> left</c>

00:08:41.750 --> 00:08:41.760 align:start position:0%
and what that tells us is our left
 

00:08:41.760 --> 00:08:42.630 align:start position:0%
and what that tells us is our left
partition

00:08:42.630 --> 00:08:42.640 align:start position:0%
partition
 

00:08:42.640 --> 00:08:45.990 align:start position:0%
partition
is<00:08:43.200><c> going</c><00:08:43.519><c> to</c><00:08:43.760><c> be</c><00:08:44.320><c> like</c><00:08:44.880><c> this</c><00:08:45.440><c> and</c><00:08:45.519><c> now</c><00:08:45.680><c> how</c><00:08:45.920><c> do</c>

00:08:45.990 --> 00:08:46.000 align:start position:0%
is going to be like this and now how do
 

00:08:46.000 --> 00:08:47.829 align:start position:0%
is going to be like this and now how do
we<00:08:46.160><c> get</c><00:08:46.399><c> the</c><00:08:46.720><c> left</c><00:08:47.040><c> partition</c>

00:08:47.829 --> 00:08:47.839 align:start position:0%
we get the left partition
 

00:08:47.839 --> 00:08:51.910 align:start position:0%
we get the left partition
of<00:08:48.320><c> this</c><00:08:48.720><c> well</c><00:08:49.360><c> similarly</c><00:08:49.920><c> we</c><00:08:50.399><c> can</c><00:08:50.800><c> take</c><00:08:51.120><c> 6</c>

00:08:51.910 --> 00:08:51.920 align:start position:0%
of this well similarly we can take 6
 

00:08:51.920 --> 00:08:55.190 align:start position:0%
of this well similarly we can take 6
minus<00:08:52.640><c> 2</c><00:08:53.120><c> which</c><00:08:53.360><c> is</c><00:08:53.519><c> the</c><00:08:53.839><c> size</c><00:08:54.399><c> of</c><00:08:54.640><c> our</c><00:08:54.959><c> left</c>

00:08:55.190 --> 00:08:55.200 align:start position:0%
minus 2 which is the size of our left
 

00:08:55.200 --> 00:08:57.430 align:start position:0%
minus 2 which is the size of our left
partition<00:08:55.760><c> so</c><00:08:55.920><c> we</c><00:08:56.080><c> get</c><00:08:56.399><c> four</c><00:08:56.800><c> so</c><00:08:57.040><c> the</c><00:08:57.200><c> left</c>

00:08:57.430 --> 00:08:57.440 align:start position:0%
partition so we get four so the left
 

00:08:57.440 --> 00:08:58.310 align:start position:0%
partition so we get four so the left
partition

00:08:58.310 --> 00:08:58.320 align:start position:0%
partition
 

00:08:58.320 --> 00:09:01.430 align:start position:0%
partition
of<00:08:58.480><c> this</c><00:08:58.800><c> is</c><00:08:58.959><c> going</c><00:08:59.200><c> to</c><00:08:59.440><c> be</c><00:08:59.600><c> of</c><00:08:59.839><c> size</c><00:09:00.640><c> four</c><00:09:01.279><c> we</c>

00:09:01.430 --> 00:09:01.440 align:start position:0%
of this is going to be of size four we
 

00:09:01.440 --> 00:09:02.550 align:start position:0%
of this is going to be of size four we
take<00:09:01.680><c> the</c><00:09:01.839><c> first</c>

00:09:02.550 --> 00:09:02.560 align:start position:0%
take the first
 

00:09:02.560 --> 00:09:05.430 align:start position:0%
take the first
four<00:09:03.120><c> elements</c><00:09:03.839><c> so</c><00:09:04.160><c> now</c><00:09:04.399><c> let's</c><00:09:04.720><c> check</c><00:09:05.120><c> do</c><00:09:05.279><c> we</c>

00:09:05.430 --> 00:09:05.440 align:start position:0%
four elements so now let's check do we
 

00:09:05.440 --> 00:09:07.269 align:start position:0%
four elements so now let's check do we
have<00:09:05.680><c> our</c><00:09:05.839><c> left</c><00:09:06.160><c> partition</c><00:09:06.720><c> correctly</c><00:09:07.120><c> have</c>

00:09:07.269 --> 00:09:07.279 align:start position:0%
have our left partition correctly have
 

00:09:07.279 --> 00:09:08.870 align:start position:0%
have our left partition correctly have
we<00:09:07.440><c> done</c><00:09:07.600><c> it</c><00:09:07.760><c> correctly</c><00:09:08.160><c> how</c><00:09:08.320><c> can</c><00:09:08.480><c> we</c><00:09:08.640><c> check</c>

00:09:08.870 --> 00:09:08.880 align:start position:0%
we done it correctly how can we check
 

00:09:08.880 --> 00:09:10.470 align:start position:0%
we done it correctly how can we check
that<00:09:09.120><c> well</c><00:09:09.360><c> let's</c><00:09:09.600><c> check</c><00:09:09.839><c> that</c><00:09:10.080><c> this</c>

00:09:10.470 --> 00:09:10.480 align:start position:0%
that well let's check that this
 

00:09:10.480 --> 00:09:14.150 align:start position:0%
that well let's check that this
2<00:09:11.200><c> is</c><00:09:11.920><c> less</c><00:09:12.240><c> than</c><00:09:12.399><c> or</c><00:09:12.640><c> equal</c><00:09:13.120><c> to</c><00:09:13.360><c> the</c><00:09:13.600><c> 5.</c><00:09:14.000><c> we</c>

00:09:14.150 --> 00:09:14.160 align:start position:0%
2 is less than or equal to the 5. we
 

00:09:14.160 --> 00:09:15.269 align:start position:0%
2 is less than or equal to the 5. we
know<00:09:14.399><c> that's</c><00:09:14.800><c> true</c>

00:09:15.269 --> 00:09:15.279 align:start position:0%
know that's true
 

00:09:15.279 --> 00:09:17.750 align:start position:0%
know that's true
right<00:09:15.519><c> 2</c><00:09:15.760><c> is</c><00:09:15.839><c> less</c><00:09:16.000><c> than</c><00:09:16.320><c> 5.</c><00:09:16.800><c> what</c><00:09:16.959><c> about</c><00:09:17.440><c> this</c>

00:09:17.750 --> 00:09:17.760 align:start position:0%
right 2 is less than 5. what about this
 

00:09:17.760 --> 00:09:18.310 align:start position:0%
right 2 is less than 5. what about this
value

00:09:18.310 --> 00:09:18.320 align:start position:0%
value
 

00:09:18.320 --> 00:09:21.590 align:start position:0%
value
is<00:09:18.480><c> the</c><00:09:18.880><c> rightmost</c><00:09:19.440><c> value</c><00:09:19.920><c> in</c><00:09:20.320><c> this</c><00:09:20.560><c> partition</c>

00:09:21.590 --> 00:09:21.600 align:start position:0%
is the rightmost value in this partition
 

00:09:21.600 --> 00:09:24.790 align:start position:0%
is the rightmost value in this partition
less<00:09:21.920><c> than</c><00:09:22.160><c> or</c><00:09:22.399><c> equal</c><00:09:23.040><c> to</c><00:09:23.920><c> this</c>

00:09:24.790 --> 00:09:24.800 align:start position:0%
less than or equal to this
 

00:09:24.800 --> 00:09:27.670 align:start position:0%
less than or equal to this
it's<00:09:25.120><c> not</c><00:09:25.440><c> right</c><00:09:25.760><c> four</c><00:09:26.240><c> is</c><00:09:26.640><c> not</c><00:09:27.040><c> less</c><00:09:27.279><c> than</c><00:09:27.519><c> or</c>

00:09:27.670 --> 00:09:27.680 align:start position:0%
it's not right four is not less than or
 

00:09:27.680 --> 00:09:30.150 align:start position:0%
it's not right four is not less than or
equal<00:09:28.080><c> to</c><00:09:28.399><c> three</c><00:09:28.720><c> that's</c><00:09:28.959><c> just</c><00:09:29.200><c> not</c><00:09:29.519><c> true</c>

00:09:30.150 --> 00:09:30.160 align:start position:0%
equal to three that's just not true
 

00:09:30.160 --> 00:09:33.509 align:start position:0%
equal to three that's just not true
so<00:09:30.640><c> our</c><00:09:30.959><c> left</c><00:09:31.200><c> partition</c><00:09:31.920><c> is</c><00:09:32.480><c> not</c><00:09:32.880><c> correct</c><00:09:33.440><c> in</c>

00:09:33.509 --> 00:09:33.519 align:start position:0%
so our left partition is not correct in
 

00:09:33.519 --> 00:09:35.509 align:start position:0%
so our left partition is not correct in
this<00:09:33.760><c> case</c><00:09:34.080><c> right</c><00:09:34.399><c> how</c><00:09:34.640><c> can</c><00:09:34.880><c> our</c><00:09:35.120><c> left</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
this case right how can our left
 

00:09:35.519 --> 00:09:36.150 align:start position:0%
this case right how can our left
partition

00:09:36.150 --> 00:09:36.160 align:start position:0%
partition
 

00:09:36.160 --> 00:09:39.269 align:start position:0%
partition
have<00:09:36.399><c> a</c><00:09:36.800><c> 4</c><00:09:37.519><c> where</c><00:09:37.839><c> our</c><00:09:38.160><c> right</c><00:09:38.480><c> partition</c>

00:09:39.269 --> 00:09:39.279 align:start position:0%
have a 4 where our right partition
 

00:09:39.279 --> 00:09:41.509 align:start position:0%
have a 4 where our right partition
has<00:09:39.600><c> a</c><00:09:39.839><c> 3</c><00:09:40.240><c> that</c><00:09:40.480><c> means</c><00:09:41.040><c> we</c><00:09:41.200><c> have</c><00:09:41.360><c> not</c>

00:09:41.509 --> 00:09:41.519 align:start position:0%
has a 3 that means we have not
 

00:09:41.519 --> 00:09:43.110 align:start position:0%
has a 3 that means we have not
partitioned<00:09:42.080><c> it</c><00:09:42.240><c> correctly</c>

00:09:43.110 --> 00:09:43.120 align:start position:0%
partitioned it correctly
 

00:09:43.120 --> 00:09:45.110 align:start position:0%
partitioned it correctly
so<00:09:43.279><c> what</c><00:09:43.440><c> that</c><00:09:43.680><c> tells</c><00:09:44.000><c> us</c><00:09:44.240><c> is</c><00:09:44.399><c> we</c><00:09:44.640><c> have</c><00:09:44.800><c> to</c>

00:09:45.110 --> 00:09:45.120 align:start position:0%
so what that tells us is we have to
 

00:09:45.120 --> 00:09:47.030 align:start position:0%
so what that tells us is we have to
update<00:09:45.600><c> these</c><00:09:45.920><c> pointers</c><00:09:46.320><c> right</c><00:09:46.560><c> because</c><00:09:46.800><c> we</c>

00:09:47.030 --> 00:09:47.040 align:start position:0%
update these pointers right because we
 

00:09:47.040 --> 00:09:48.949 align:start position:0%
update these pointers right because we
are<00:09:47.200><c> doing</c><00:09:47.600><c> binary</c><00:09:48.320><c> search</c>

00:09:48.949 --> 00:09:48.959 align:start position:0%
are doing binary search
 

00:09:48.959 --> 00:09:52.389 align:start position:0%
are doing binary search
so<00:09:49.279><c> initially</c><00:09:50.160><c> our</c><00:09:50.880><c> left</c><00:09:51.519><c> our</c><00:09:51.839><c> middle</c><00:09:52.160><c> was</c>

00:09:52.389 --> 00:09:52.399 align:start position:0%
so initially our left our middle was
 

00:09:52.399 --> 00:09:54.389 align:start position:0%
so initially our left our middle was
over<00:09:52.640><c> here</c><00:09:52.959><c> so</c><00:09:53.120><c> what</c><00:09:53.279><c> we're</c><00:09:53.440><c> going</c><00:09:53.519><c> to</c><00:09:53.680><c> do</c>

00:09:54.389 --> 00:09:54.399 align:start position:0%
over here so what we're going to do
 

00:09:54.399 --> 00:09:57.190 align:start position:0%
over here so what we're going to do
is<00:09:54.800><c> take</c><00:09:55.120><c> our</c><00:09:55.519><c> left</c><00:09:55.839><c> pointer</c><00:09:56.320><c> and</c><00:09:56.480><c> then</c><00:09:56.800><c> shift</c>

00:09:57.190 --> 00:09:57.200 align:start position:0%
is take our left pointer and then shift
 

00:09:57.200 --> 00:09:57.590 align:start position:0%
is take our left pointer and then shift
it

00:09:57.590 --> 00:09:57.600 align:start position:0%
it
 

00:09:57.600 --> 00:10:00.310 align:start position:0%
it
one<00:09:58.080><c> plus</c><00:09:58.560><c> the</c><00:09:58.720><c> middle</c><00:09:59.120><c> value</c><00:09:59.519><c> the</c><00:09:59.680><c> old</c><00:10:00.000><c> middle</c>

00:10:00.310 --> 00:10:00.320 align:start position:0%
one plus the middle value the old middle
 

00:10:00.320 --> 00:10:01.670 align:start position:0%
one plus the middle value the old middle
value<00:10:00.720><c> because</c><00:10:01.040><c> we</c><00:10:01.200><c> know</c>

00:10:01.670 --> 00:10:01.680 align:start position:0%
value because we know
 

00:10:01.680 --> 00:10:04.069 align:start position:0%
value because we know
that<00:10:01.839><c> we're</c><00:10:02.000><c> going</c><00:10:02.160><c> to</c><00:10:02.240><c> need</c><00:10:02.720><c> extra</c><00:10:03.279><c> elements</c>

00:10:04.069 --> 00:10:04.079 align:start position:0%
that we're going to need extra elements
 

00:10:04.079 --> 00:10:05.110 align:start position:0%
that we're going to need extra elements
from<00:10:04.480><c> array</c>

00:10:05.110 --> 00:10:05.120 align:start position:0%
from array
 

00:10:05.120 --> 00:10:08.069 align:start position:0%
from array
a<00:10:05.839><c> so</c><00:10:06.000><c> with</c><00:10:06.240><c> our</c><00:10:06.480><c> left</c><00:10:06.800><c> shifted</c><00:10:07.279><c> over</c><00:10:07.600><c> here</c>

00:10:08.069 --> 00:10:08.079 align:start position:0%
a so with our left shifted over here
 

00:10:08.079 --> 00:10:09.590 align:start position:0%
a so with our left shifted over here
we're<00:10:08.320><c> going</c><00:10:08.399><c> to</c><00:10:08.480><c> recompute</c><00:10:09.040><c> the</c><00:10:09.200><c> middle</c><00:10:09.440><c> we</c>

00:10:09.590 --> 00:10:09.600 align:start position:0%
we're going to recompute the middle we
 

00:10:09.600 --> 00:10:11.430 align:start position:0%
we're going to recompute the middle we
know<00:10:09.839><c> the</c><00:10:10.160><c> index</c><00:10:10.640><c> of</c><00:10:10.720><c> this</c><00:10:10.959><c> is</c><00:10:11.120><c> 2</c>

00:10:11.430 --> 00:10:11.440 align:start position:0%
know the index of this is 2
 

00:10:11.440 --> 00:10:14.470 align:start position:0%
know the index of this is 2
this<00:10:11.600><c> is</c><00:10:11.760><c> 3</c><00:10:12.079><c> we</c><00:10:12.320><c> add</c><00:10:12.560><c> them</c><00:10:12.800><c> together</c><00:10:13.440><c> 2</c><00:10:13.760><c> plus</c>

00:10:14.470 --> 00:10:14.480 align:start position:0%
this is 3 we add them together 2 plus
 

00:10:14.480 --> 00:10:17.509 align:start position:0%
this is 3 we add them together 2 plus
3<00:10:14.880><c> divided</c><00:10:15.279><c> by</c><00:10:15.519><c> 2</c><00:10:16.240><c> if</c><00:10:16.399><c> we</c><00:10:16.640><c> round</c><00:10:16.959><c> down</c><00:10:17.279><c> is</c><00:10:17.440><c> going</c>

00:10:17.509 --> 00:10:17.519 align:start position:0%
3 divided by 2 if we round down is going
 

00:10:17.519 --> 00:10:19.430 align:start position:0%
3 divided by 2 if we round down is going
to<00:10:17.600><c> be</c><00:10:17.920><c> 2.</c><00:10:18.240><c> so</c><00:10:18.480><c> what's</c><00:10:18.720><c> going</c><00:10:18.880><c> to</c><00:10:19.040><c> end</c><00:10:19.200><c> up</c>

00:10:19.430 --> 00:10:19.440 align:start position:0%
to be 2. so what's going to end up
 

00:10:19.440 --> 00:10:20.150 align:start position:0%
to be 2. so what's going to end up
happening

00:10:20.150 --> 00:10:20.160 align:start position:0%
happening
 

00:10:20.160 --> 00:10:24.150 align:start position:0%
happening
is<00:10:20.720><c> our</c><00:10:21.120><c> left</c><00:10:21.440><c> partition</c><00:10:22.560><c> is</c><00:10:22.880><c> now</c><00:10:23.200><c> going</c><00:10:23.519><c> to</c><00:10:23.680><c> be</c>

00:10:24.150 --> 00:10:24.160 align:start position:0%
is our left partition is now going to be
 

00:10:24.160 --> 00:10:26.870 align:start position:0%
is our left partition is now going to be
these<00:10:25.120><c> three</c><00:10:25.519><c> elements</c><00:10:26.000><c> because</c><00:10:26.399><c> mid</c><00:10:26.800><c> is</c>

00:10:26.870 --> 00:10:26.880 align:start position:0%
these three elements because mid is
 

00:10:26.880 --> 00:10:28.150 align:start position:0%
these three elements because mid is
going<00:10:27.040><c> to</c><00:10:27.120><c> be</c><00:10:27.360><c> over</c><00:10:27.600><c> here</c>

00:10:28.150 --> 00:10:28.160 align:start position:0%
going to be over here
 

00:10:28.160 --> 00:10:31.269 align:start position:0%
going to be over here
and<00:10:28.399><c> so</c><00:10:28.640><c> how</c><00:10:28.800><c> many</c><00:10:29.120><c> elements</c><00:10:29.920><c> from</c><00:10:30.399><c> our</c><00:10:30.880><c> array</c>

00:10:31.269 --> 00:10:31.279 align:start position:0%
and so how many elements from our array
 

00:10:31.279 --> 00:10:31.590 align:start position:0%
and so how many elements from our array
b

00:10:31.590 --> 00:10:31.600 align:start position:0%
b
 

00:10:31.600 --> 00:10:33.110 align:start position:0%
b
are<00:10:31.680><c> we</c><00:10:31.839><c> going</c><00:10:31.920><c> to</c><00:10:32.079><c> need</c><00:10:32.320><c> well</c><00:10:32.640><c> let's</c><00:10:32.880><c> just</c>

00:10:33.110 --> 00:10:33.120 align:start position:0%
are we going to need well let's just
 

00:10:33.120 --> 00:10:35.350 align:start position:0%
are we going to need well let's just
compute<00:10:33.519><c> it</c><00:10:33.600><c> right</c><00:10:33.920><c> half</c><00:10:34.320><c> is</c><00:10:34.560><c> 6</c>

00:10:35.350 --> 00:10:35.360 align:start position:0%
compute it right half is 6
 

00:10:35.360 --> 00:10:38.150 align:start position:0%
compute it right half is 6
minus<00:10:36.079><c> 3</c><00:10:36.480><c> because</c><00:10:36.720><c> that's</c><00:10:37.040><c> the</c><00:10:37.200><c> size</c><00:10:37.600><c> of</c><00:10:37.760><c> this</c>

00:10:38.150 --> 00:10:38.160 align:start position:0%
minus 3 because that's the size of this
 

00:10:38.160 --> 00:10:38.949 align:start position:0%
minus 3 because that's the size of this
partition

00:10:38.949 --> 00:10:38.959 align:start position:0%
partition
 

00:10:38.959 --> 00:10:41.030 align:start position:0%
partition
is<00:10:39.120><c> going</c><00:10:39.279><c> to</c><00:10:39.360><c> total</c><00:10:39.680><c> to</c><00:10:39.839><c> be</c><00:10:40.079><c> 3</c><00:10:40.320><c> so</c><00:10:40.480><c> we</c><00:10:40.640><c> know</c>

00:10:41.030 --> 00:10:41.040 align:start position:0%
is going to total to be 3 so we know
 

00:10:41.040 --> 00:10:42.470 align:start position:0%
is going to total to be 3 so we know
that<00:10:41.360><c> the</c><00:10:41.519><c> partition</c><00:10:42.079><c> from</c>

00:10:42.470 --> 00:10:42.480 align:start position:0%
that the partition from
 

00:10:42.480 --> 00:10:44.949 align:start position:0%
that the partition from
b<00:10:42.800><c> is</c><00:10:42.959><c> also</c><00:10:43.200><c> going</c><00:10:43.360><c> to</c><00:10:43.440><c> be</c><00:10:43.600><c> need</c><00:10:43.760><c> to</c><00:10:44.240><c> be</c><00:10:44.480><c> size</c>

00:10:44.949 --> 00:10:44.959 align:start position:0%
b is also going to be need to be size
 

00:10:44.959 --> 00:10:45.670 align:start position:0%
b is also going to be need to be size
three

00:10:45.670 --> 00:10:45.680 align:start position:0%
three
 

00:10:45.680 --> 00:10:48.310 align:start position:0%
three
so<00:10:45.920><c> let's</c><00:10:46.160><c> get</c><00:10:46.399><c> the</c><00:10:46.640><c> first</c><00:10:47.279><c> three</c><00:10:47.680><c> elements</c><00:10:48.160><c> of</c>

00:10:48.310 --> 00:10:48.320 align:start position:0%
so let's get the first three elements of
 

00:10:48.320 --> 00:10:49.350 align:start position:0%
so let's get the first three elements of
this<00:10:48.640><c> now</c><00:10:48.959><c> let's</c>

00:10:49.350 --> 00:10:49.360 align:start position:0%
this now let's
 

00:10:49.360 --> 00:10:52.870 align:start position:0%
this now let's
check<00:10:49.920><c> have</c><00:10:50.240><c> we</c><00:10:50.560><c> partitioned</c><00:10:52.000><c> our</c>

00:10:52.870 --> 00:10:52.880 align:start position:0%
check have we partitioned our
 

00:10:52.880 --> 00:10:55.430 align:start position:0%
check have we partitioned our
left<00:10:53.519><c> have</c><00:10:53.760><c> we</c><00:10:53.839><c> partitioned</c><00:10:54.399><c> this</c><00:10:54.720><c> correctly</c>

00:10:55.430 --> 00:10:55.440 align:start position:0%
left have we partitioned this correctly
 

00:10:55.440 --> 00:10:56.550 align:start position:0%
left have we partitioned this correctly
so<00:10:55.600><c> let's</c><00:10:55.920><c> check</c>

00:10:56.550 --> 00:10:56.560 align:start position:0%
so let's check
 

00:10:56.560 --> 00:11:00.069 align:start position:0%
so let's check
is<00:10:56.720><c> this</c><00:10:57.120><c> three</c><00:10:58.160><c> less</c><00:10:58.480><c> than</c><00:10:58.880><c> or</c><00:10:59.120><c> equal</c>

00:11:00.069 --> 00:11:00.079 align:start position:0%
is this three less than or equal
 

00:11:00.079 --> 00:11:02.949 align:start position:0%
is this three less than or equal
to<00:11:00.480><c> this</c><00:11:00.880><c> value</c><00:11:01.760><c> yes</c><00:11:02.000><c> it</c><00:11:02.160><c> is</c><00:11:02.399><c> three</c><00:11:02.640><c> is</c><00:11:02.800><c> less</c>

00:11:02.949 --> 00:11:02.959 align:start position:0%
to this value yes it is three is less
 

00:11:02.959 --> 00:11:03.590 align:start position:0%
to this value yes it is three is less
than<00:11:03.200><c> four</c>

00:11:03.590 --> 00:11:03.600 align:start position:0%
than four
 

00:11:03.600 --> 00:11:07.030 align:start position:0%
than four
is<00:11:03.920><c> this</c><00:11:04.399><c> three</c><00:11:05.360><c> less</c><00:11:05.760><c> than</c><00:11:06.079><c> or</c><00:11:06.320><c> equal</c>

00:11:07.030 --> 00:11:07.040 align:start position:0%
is this three less than or equal
 

00:11:07.040 --> 00:11:10.069 align:start position:0%
is this three less than or equal
to<00:11:07.600><c> this</c><00:11:07.839><c> value</c><00:11:08.480><c> yes</c><00:11:08.959><c> three</c><00:11:09.360><c> is</c><00:11:09.519><c> less</c><00:11:09.680><c> than</c><00:11:09.839><c> or</c>

00:11:10.069 --> 00:11:10.079 align:start position:0%
to this value yes three is less than or
 

00:11:10.079 --> 00:11:10.949 align:start position:0%
to this value yes three is less than or
equal<00:11:10.320><c> to</c><00:11:10.560><c> four</c>

00:11:10.949 --> 00:11:10.959 align:start position:0%
equal to four
 

00:11:10.959 --> 00:11:14.790 align:start position:0%
equal to four
so<00:11:11.279><c> that</c><00:11:11.519><c> tells</c><00:11:11.839><c> us</c><00:11:12.480><c> we</c><00:11:12.720><c> finally</c><00:11:13.440><c> partitioned</c>

00:11:14.790 --> 00:11:14.800 align:start position:0%
so that tells us we finally partitioned
 

00:11:14.800 --> 00:11:17.990 align:start position:0%
so that tells us we finally partitioned
our<00:11:15.600><c> our</c><00:11:15.839><c> arrays</c><00:11:16.399><c> correctly</c><00:11:17.120><c> but</c><00:11:17.279><c> you</c><00:11:17.600><c> saw</c>

00:11:17.990 --> 00:11:18.000 align:start position:0%
our our arrays correctly but you saw
 

00:11:18.000 --> 00:11:20.710 align:start position:0%
our our arrays correctly but you saw
originally<00:11:18.720><c> we</c><00:11:18.880><c> had</c><00:11:19.279><c> 13</c><00:11:19.839><c> elements</c><00:11:20.160><c> so</c><00:11:20.399><c> it</c><00:11:20.480><c> was</c>

00:11:20.710 --> 00:11:20.720 align:start position:0%
originally we had 13 elements so it was
 

00:11:20.720 --> 00:11:22.790 align:start position:0%
originally we had 13 elements so it was
odd<00:11:21.200><c> and</c><00:11:21.279><c> when</c><00:11:21.440><c> it's</c><00:11:21.760><c> odd</c><00:11:22.079><c> in</c><00:11:22.160><c> that</c><00:11:22.399><c> case</c><00:11:22.640><c> what</c>

00:11:22.790 --> 00:11:22.800 align:start position:0%
odd and when it's odd in that case what
 

00:11:22.800 --> 00:11:24.790 align:start position:0%
odd and when it's odd in that case what
we<00:11:22.880><c> had</c><00:11:23.040><c> to</c><00:11:23.120><c> do</c><00:11:23.279><c> was</c><00:11:23.519><c> take</c><00:11:23.839><c> the</c><00:11:24.240><c> minimum</c>

00:11:24.790 --> 00:11:24.800 align:start position:0%
we had to do was take the minimum
 

00:11:24.800 --> 00:11:26.870 align:start position:0%
we had to do was take the minimum
of<00:11:25.200><c> these</c><00:11:25.440><c> two</c><00:11:25.680><c> values</c><00:11:26.160><c> right</c><00:11:26.320><c> but</c><00:11:26.560><c> in</c><00:11:26.720><c> this</c>

00:11:26.870 --> 00:11:26.880 align:start position:0%
of these two values right but in this
 

00:11:26.880 --> 00:11:29.030 align:start position:0%
of these two values right but in this
case<00:11:27.200><c> it's</c><00:11:27.519><c> even</c><00:11:27.920><c> so</c><00:11:28.079><c> what</c><00:11:28.240><c> are</c><00:11:28.399><c> we</c><00:11:28.640><c> actually</c>

00:11:29.030 --> 00:11:29.040 align:start position:0%
case it's even so what are we actually
 

00:11:29.040 --> 00:11:30.069 align:start position:0%
case it's even so what are we actually
going<00:11:29.120><c> to</c><00:11:29.279><c> do</c><00:11:29.519><c> now</c>

00:11:30.069 --> 00:11:30.079 align:start position:0%
going to do now
 

00:11:30.079 --> 00:11:31.590 align:start position:0%
going to do now
so<00:11:30.240><c> how</c><00:11:30.480><c> are</c><00:11:30.560><c> we</c><00:11:30.720><c> going</c><00:11:30.800><c> to</c><00:11:30.880><c> find</c><00:11:31.120><c> the</c><00:11:31.200><c> median</c>

00:11:31.590 --> 00:11:31.600 align:start position:0%
so how are we going to find the median
 

00:11:31.600 --> 00:11:33.269 align:start position:0%
so how are we going to find the median
well<00:11:31.839><c> how</c><00:11:32.079><c> would</c><00:11:32.240><c> we</c><00:11:32.399><c> do</c><00:11:32.560><c> it</c><00:11:32.720><c> if</c><00:11:32.800><c> we</c><00:11:32.959><c> had</c><00:11:33.120><c> a</c>

00:11:33.269 --> 00:11:33.279 align:start position:0%
well how would we do it if we had a
 

00:11:33.279 --> 00:11:34.949 align:start position:0%
well how would we do it if we had a
sorted<00:11:33.760><c> array</c><00:11:34.079><c> so</c><00:11:34.320><c> this</c><00:11:34.560><c> is</c>

00:11:34.949 --> 00:11:34.959 align:start position:0%
sorted array so this is
 

00:11:34.959 --> 00:11:37.190 align:start position:0%
sorted array so this is
how<00:11:35.440><c> the</c><00:11:35.600><c> sorted</c><00:11:36.000><c> array</c><00:11:36.399><c> would</c><00:11:36.560><c> look</c><00:11:36.880><c> if</c><00:11:36.959><c> we</c>

00:11:37.190 --> 00:11:37.200 align:start position:0%
how the sorted array would look if we
 

00:11:37.200 --> 00:11:38.230 align:start position:0%
how the sorted array would look if we
merged<00:11:37.600><c> these</c><00:11:37.920><c> two</c>

00:11:38.230 --> 00:11:38.240 align:start position:0%
merged these two
 

00:11:38.240 --> 00:11:40.310 align:start position:0%
merged these two
right<00:11:38.720><c> and</c><00:11:39.120><c> we</c><00:11:39.279><c> can</c><00:11:39.440><c> see</c><00:11:39.600><c> that</c><00:11:39.839><c> look</c><00:11:40.000><c> at</c><00:11:40.160><c> our</c>

00:11:40.310 --> 00:11:40.320 align:start position:0%
right and we can see that look at our
 

00:11:40.320 --> 00:11:42.310 align:start position:0%
right and we can see that look at our
left<00:11:40.560><c> partition</c><00:11:41.200><c> we</c><00:11:41.360><c> have</c><00:11:41.839><c> one</c>

00:11:42.310 --> 00:11:42.320 align:start position:0%
left partition we have one
 

00:11:42.320 --> 00:11:45.110 align:start position:0%
left partition we have one
two<00:11:42.560><c> and</c><00:11:42.800><c> three</c><00:11:43.040><c> right</c><00:11:43.279><c> so</c><00:11:43.600><c> this</c><00:11:44.079><c> is</c><00:11:44.399><c> our</c><00:11:44.720><c> left</c>

00:11:45.110 --> 00:11:45.120 align:start position:0%
two and three right so this is our left
 

00:11:45.120 --> 00:11:46.310 align:start position:0%
two and three right so this is our left
partition<00:11:45.760><c> right</c><00:11:46.000><c> now</c>

00:11:46.310 --> 00:11:46.320 align:start position:0%
partition right now
 

00:11:46.320 --> 00:11:50.310 align:start position:0%
partition right now
right<00:11:46.800><c> it's</c><00:11:47.279><c> size</c><00:11:48.000><c> six</c><00:11:48.720><c> this</c><00:11:49.279><c> is</c><00:11:49.600><c> our</c>

00:11:50.310 --> 00:11:50.320 align:start position:0%
right it's size six this is our
 

00:11:50.320 --> 00:11:53.670 align:start position:0%
right it's size six this is our
right<00:11:50.720><c> partition</c><00:11:51.680><c> it's</c><00:11:52.079><c> also</c><00:11:52.959><c> size</c>

00:11:53.670 --> 00:11:53.680 align:start position:0%
right partition it's also size
 

00:11:53.680 --> 00:11:56.790 align:start position:0%
right partition it's also size
six<00:11:54.320><c> so</c><00:11:54.720><c> clearly</c><00:11:55.360><c> if</c><00:11:55.519><c> we</c><00:11:55.839><c> actually</c><00:11:56.240><c> want</c><00:11:56.399><c> to</c>

00:11:56.790 --> 00:11:56.800 align:start position:0%
six so clearly if we actually want to
 

00:11:56.800 --> 00:12:00.069 align:start position:0%
six so clearly if we actually want to
find<00:11:57.360><c> the</c><00:11:57.680><c> median</c><00:11:58.639><c> what</c><00:11:58.880><c> we</c><00:11:59.040><c> have</c><00:11:59.200><c> to</c><00:11:59.440><c> do</c><00:11:59.760><c> is</c>

00:12:00.069 --> 00:12:00.079 align:start position:0%
find the median what we have to do is
 

00:12:00.079 --> 00:12:00.710 align:start position:0%
find the median what we have to do is
take

00:12:00.710 --> 00:12:00.720 align:start position:0%
take
 

00:12:00.720 --> 00:12:03.750 align:start position:0%
take
the<00:12:01.440><c> max</c><00:12:02.320><c> value</c><00:12:03.200><c> from</c>

00:12:03.750 --> 00:12:03.760 align:start position:0%
the max value from
 

00:12:03.760 --> 00:12:07.590 align:start position:0%
the max value from
our<00:12:04.320><c> left</c><00:12:04.720><c> partition</c><00:12:05.760><c> and</c><00:12:06.079><c> take</c><00:12:06.639><c> the</c><00:12:07.040><c> minimum</c>

00:12:07.590 --> 00:12:07.600 align:start position:0%
our left partition and take the minimum
 

00:12:07.600 --> 00:12:08.470 align:start position:0%
our left partition and take the minimum
value

00:12:08.470 --> 00:12:08.480 align:start position:0%
value
 

00:12:08.480 --> 00:12:11.670 align:start position:0%
value
from<00:12:09.200><c> our</c><00:12:10.000><c> right</c><00:12:10.320><c> partition</c><00:12:11.200><c> right</c><00:12:11.440><c> like</c>

00:12:11.670 --> 00:12:11.680 align:start position:0%
from our right partition right like
 

00:12:11.680 --> 00:12:12.150 align:start position:0%
from our right partition right like
that's

00:12:12.150 --> 00:12:12.160 align:start position:0%
that's
 

00:12:12.160 --> 00:12:14.790 align:start position:0%
that's
pretty<00:12:12.560><c> obvious</c><00:12:13.040><c> so</c><00:12:13.519><c> how</c><00:12:13.680><c> do</c><00:12:13.839><c> we</c><00:12:14.160><c> translate</c>

00:12:14.790 --> 00:12:14.800 align:start position:0%
pretty obvious so how do we translate
 

00:12:14.800 --> 00:12:16.389 align:start position:0%
pretty obvious so how do we translate
that<00:12:15.040><c> when</c><00:12:15.200><c> we</c><00:12:15.360><c> actually</c><00:12:15.760><c> have</c>

00:12:16.389 --> 00:12:16.399 align:start position:0%
that when we actually have
 

00:12:16.399 --> 00:12:18.470 align:start position:0%
that when we actually have
two<00:12:16.880><c> separate</c><00:12:17.360><c> arrays</c><00:12:17.760><c> how</c><00:12:17.920><c> do</c><00:12:18.000><c> we</c><00:12:18.079><c> actually</c>

00:12:18.470 --> 00:12:18.480 align:start position:0%
two separate arrays how do we actually
 

00:12:18.480 --> 00:12:20.389 align:start position:0%
two separate arrays how do we actually
translate<00:12:18.959><c> that</c><00:12:19.120><c> let</c><00:12:19.279><c> me</c><00:12:19.519><c> show</c><00:12:19.680><c> you</c>

00:12:20.389 --> 00:12:20.399 align:start position:0%
translate that let me show you
 

00:12:20.399 --> 00:12:23.829 align:start position:0%
translate that let me show you
well<00:12:20.880><c> we</c><00:12:21.040><c> can</c><00:12:21.279><c> take</c><00:12:21.839><c> the</c><00:12:22.240><c> minimum</c><00:12:23.120><c> of</c>

00:12:23.829 --> 00:12:23.839 align:start position:0%
well we can take the minimum of
 

00:12:23.839 --> 00:12:26.870 align:start position:0%
well we can take the minimum of
these<00:12:24.480><c> two</c><00:12:24.800><c> values</c><00:12:25.440><c> right</c><00:12:26.000><c> and</c><00:12:26.240><c> in</c><00:12:26.399><c> this</c><00:12:26.560><c> case</c>

00:12:26.870 --> 00:12:26.880 align:start position:0%
these two values right and in this case
 

00:12:26.880 --> 00:12:27.829 align:start position:0%
these two values right and in this case
they're<00:12:27.120><c> clearly</c>

00:12:27.829 --> 00:12:27.839 align:start position:0%
they're clearly
 

00:12:27.839 --> 00:12:29.910 align:start position:0%
they're clearly
the<00:12:28.079><c> same</c><00:12:28.720><c> but</c><00:12:29.040><c> if</c><00:12:29.120><c> they</c><00:12:29.279><c> were</c><00:12:29.440><c> different</c><00:12:29.760><c> we</c>

00:12:29.910 --> 00:12:29.920 align:start position:0%
the same but if they were different we
 

00:12:29.920 --> 00:12:31.190 align:start position:0%
the same but if they were different we
would<00:12:30.079><c> want</c><00:12:30.240><c> to</c><00:12:30.320><c> take</c><00:12:30.480><c> the</c><00:12:30.639><c> minimum</c>

00:12:31.190 --> 00:12:31.200 align:start position:0%
would want to take the minimum
 

00:12:31.200 --> 00:12:33.350 align:start position:0%
would want to take the minimum
of<00:12:31.360><c> both</c><00:12:31.600><c> of</c><00:12:31.760><c> them</c><00:12:32.000><c> right</c><00:12:32.480><c> and</c><00:12:32.720><c> we</c><00:12:32.880><c> would</c><00:12:33.120><c> want</c>

00:12:33.350 --> 00:12:33.360 align:start position:0%
of both of them right and we would want
 

00:12:33.360 --> 00:12:34.230 align:start position:0%
of both of them right and we would want
to<00:12:33.600><c> take</c>

00:12:34.230 --> 00:12:34.240 align:start position:0%
to take
 

00:12:34.240 --> 00:12:37.990 align:start position:0%
to take
the<00:12:34.720><c> max</c><00:12:35.680><c> of</c><00:12:36.480><c> these</c><00:12:37.040><c> two</c><00:12:37.279><c> values</c>

00:12:37.990 --> 00:12:38.000 align:start position:0%
the max of these two values
 

00:12:38.000 --> 00:12:41.509 align:start position:0%
the max of these two values
of<00:12:38.160><c> that</c><00:12:39.120><c> and</c><00:12:39.760><c> this</c><00:12:40.399><c> right</c><00:12:40.959><c> in</c><00:12:41.120><c> this</c><00:12:41.279><c> case</c>

00:12:41.509 --> 00:12:41.519 align:start position:0%
of that and this right in this case
 

00:12:41.519 --> 00:12:41.910 align:start position:0%
of that and this right in this case
they're

00:12:41.910 --> 00:12:41.920 align:start position:0%
they're
 

00:12:41.920 --> 00:12:43.910 align:start position:0%
they're
also<00:12:42.320><c> the</c><00:12:42.560><c> same</c><00:12:42.959><c> but</c><00:12:43.120><c> they</c><00:12:43.440><c> could</c><00:12:43.680><c> be</c>

00:12:43.910 --> 00:12:43.920 align:start position:0%
also the same but they could be
 

00:12:43.920 --> 00:12:45.590 align:start position:0%
also the same but they could be
different<00:12:44.320><c> hypothetically</c><00:12:45.120><c> so</c><00:12:45.279><c> we</c><00:12:45.440><c> would</c>

00:12:45.590 --> 00:12:45.600 align:start position:0%
different hypothetically so we would
 

00:12:45.600 --> 00:12:46.310 align:start position:0%
different hypothetically so we would
take

00:12:46.310 --> 00:12:46.320 align:start position:0%
take
 

00:12:46.320 --> 00:12:47.829 align:start position:0%
take
that<00:12:46.720><c> right</c><00:12:46.959><c> and</c><00:12:47.040><c> that's</c><00:12:47.360><c> going</c><00:12:47.440><c> to</c><00:12:47.519><c> get</c><00:12:47.680><c> us</c>

00:12:47.829 --> 00:12:47.839 align:start position:0%
that right and that's going to get us
 

00:12:47.839 --> 00:12:50.230 align:start position:0%
that right and that's going to get us
the<00:12:48.079><c> two</c><00:12:48.320><c> values</c><00:12:48.800><c> we</c><00:12:48.959><c> need</c><00:12:49.200><c> to</c><00:12:49.360><c> compute</c><00:12:50.000><c> the</c>

00:12:50.230 --> 00:12:50.240 align:start position:0%
the two values we need to compute the
 

00:12:50.240 --> 00:12:52.310 align:start position:0%
the two values we need to compute the
median<00:12:50.720><c> and</c><00:12:50.880><c> of</c><00:12:50.959><c> course</c><00:12:51.279><c> we</c><00:12:51.440><c> can</c><00:12:51.600><c> just</c><00:12:51.839><c> divide</c>

00:12:52.310 --> 00:12:52.320 align:start position:0%
median and of course we can just divide
 

00:12:52.320 --> 00:12:52.710 align:start position:0%
median and of course we can just divide
them

00:12:52.710 --> 00:12:52.720 align:start position:0%
them
 

00:12:52.720 --> 00:12:55.910 align:start position:0%
them
by<00:12:53.040><c> two</c><00:12:54.079><c> so</c><00:12:54.399><c> this</c><00:12:54.800><c> is</c><00:12:54.959><c> the</c><00:12:55.279><c> main</c>

00:12:55.910 --> 00:12:55.920 align:start position:0%
by two so this is the main
 

00:12:55.920 --> 00:12:58.069 align:start position:0%
by two so this is the main
idea<00:12:56.480><c> of</c><00:12:56.560><c> this</c><00:12:56.800><c> algorithm</c><00:12:57.279><c> you</c><00:12:57.440><c> can</c><00:12:57.680><c> see</c><00:12:57.920><c> that</c>

00:12:58.069 --> 00:12:58.079 align:start position:0%
idea of this algorithm you can see that
 

00:12:58.079 --> 00:12:59.269 align:start position:0%
idea of this algorithm you can see that
it's<00:12:58.399><c> actually</c>

00:12:59.269 --> 00:12:59.279 align:start position:0%
it's actually
 

00:12:59.279 --> 00:13:01.509 align:start position:0%
it's actually
somewhat<00:12:59.839><c> intuitive</c><00:13:00.560><c> once</c><00:13:00.800><c> you</c><00:13:00.959><c> understand</c>

00:13:01.509 --> 00:13:01.519 align:start position:0%
somewhat intuitive once you understand
 

00:13:01.519 --> 00:13:03.030 align:start position:0%
somewhat intuitive once you understand
some<00:13:01.680><c> of</c><00:13:01.760><c> the</c><00:13:01.920><c> basic</c><00:13:02.320><c> ideas</c>

00:13:03.030 --> 00:13:03.040 align:start position:0%
some of the basic ideas
 

00:13:03.040 --> 00:13:04.710 align:start position:0%
some of the basic ideas
let<00:13:03.200><c> me</c><00:13:03.279><c> just</c><00:13:03.519><c> show</c><00:13:03.680><c> you</c><00:13:04.000><c> one</c><00:13:04.240><c> last</c><00:13:04.560><c> thing</c>

00:13:04.710 --> 00:13:04.720 align:start position:0%
let me just show you one last thing
 

00:13:04.720 --> 00:13:06.389 align:start position:0%
let me just show you one last thing
that's<00:13:04.959><c> gonna</c><00:13:05.120><c> make</c><00:13:05.279><c> the</c><00:13:05.519><c> code</c><00:13:05.760><c> a</c><00:13:06.000><c> lot</c>

00:13:06.389 --> 00:13:06.399 align:start position:0%
that's gonna make the code a lot
 

00:13:06.399 --> 00:13:09.430 align:start position:0%
that's gonna make the code a lot
easier<00:13:06.800><c> for</c><00:13:07.040><c> us</c><00:13:07.639><c> hypothetically</c><00:13:08.720><c> our</c><00:13:09.040><c> left</c>

00:13:09.430 --> 00:13:09.440 align:start position:0%
easier for us hypothetically our left
 

00:13:09.440 --> 00:13:10.389 align:start position:0%
easier for us hypothetically our left
partition

00:13:10.389 --> 00:13:10.399 align:start position:0%
partition
 

00:13:10.399 --> 00:13:13.350 align:start position:0%
partition
from<00:13:10.880><c> this</c><00:13:11.200><c> array</c><00:13:11.519><c> right</c><00:13:11.839><c> a</c><00:13:12.399><c> hypothetically</c>

00:13:13.350 --> 00:13:13.360 align:start position:0%
from this array right a hypothetically
 

00:13:13.360 --> 00:13:13.990 align:start position:0%
from this array right a hypothetically
it<00:13:13.519><c> could</c><00:13:13.680><c> be</c>

00:13:13.990 --> 00:13:14.000 align:start position:0%
it could be
 

00:13:14.000 --> 00:13:17.910 align:start position:0%
it could be
one<00:13:14.480><c> it</c><00:13:14.639><c> could</c><00:13:14.800><c> also</c><00:13:15.200><c> be</c><00:13:15.519><c> zero</c><00:13:16.000><c> right</c><00:13:16.720><c> we</c><00:13:16.880><c> want</c>

00:13:17.910 --> 00:13:17.920 align:start position:0%
one it could also be zero right we want
 

00:13:17.920 --> 00:13:19.910 align:start position:0%
one it could also be zero right we want
our<00:13:18.079><c> left</c><00:13:18.320><c> partition</c><00:13:18.720><c> to</c><00:13:18.880><c> be</c><00:13:19.120><c> six</c><00:13:19.440><c> elements</c>

00:13:19.910 --> 00:13:19.920 align:start position:0%
our left partition to be six elements
 

00:13:19.920 --> 00:13:21.110 align:start position:0%
our left partition to be six elements
what<00:13:20.079><c> if</c><00:13:20.160><c> we</c><00:13:20.320><c> just</c><00:13:20.720><c> took</c>

00:13:21.110 --> 00:13:21.120 align:start position:0%
what if we just took
 

00:13:21.120 --> 00:13:24.150 align:start position:0%
what if we just took
the<00:13:21.360><c> six</c><00:13:21.680><c> elements</c><00:13:22.320><c> from</c><00:13:22.639><c> over</c><00:13:23.040><c> here</c><00:13:23.920><c> that's</c>

00:13:24.150 --> 00:13:24.160 align:start position:0%
the six elements from over here that's
 

00:13:24.160 --> 00:13:25.990 align:start position:0%
the six elements from over here that's
gonna<00:13:24.320><c> make</c><00:13:24.560><c> edge</c><00:13:24.880><c> cases</c><00:13:25.279><c> a</c><00:13:25.360><c> little</c><00:13:25.519><c> annoying</c>

00:13:25.990 --> 00:13:26.000 align:start position:0%
gonna make edge cases a little annoying
 

00:13:26.000 --> 00:13:27.269 align:start position:0%
gonna make edge cases a little annoying
like<00:13:26.160><c> you</c><00:13:26.240><c> know</c><00:13:26.399><c> how</c><00:13:26.480><c> we</c><00:13:26.639><c> always</c><00:13:26.880><c> wanna</c><00:13:27.120><c> make</c>

00:13:27.269 --> 00:13:27.279 align:start position:0%
like you know how we always wanna make
 

00:13:27.279 --> 00:13:27.990 align:start position:0%
like you know how we always wanna make
sure<00:13:27.519><c> that</c>

00:13:27.990 --> 00:13:28.000 align:start position:0%
sure that
 

00:13:28.000 --> 00:13:30.550 align:start position:0%
sure that
the<00:13:28.160><c> value</c><00:13:28.880><c> from</c><00:13:29.120><c> over</c><00:13:29.360><c> here</c><00:13:29.760><c> is</c><00:13:30.000><c> less</c><00:13:30.240><c> than</c><00:13:30.399><c> or</c>

00:13:30.550 --> 00:13:30.560 align:start position:0%
the value from over here is less than or
 

00:13:30.560 --> 00:13:31.110 align:start position:0%
the value from over here is less than or
equal

00:13:31.110 --> 00:13:31.120 align:start position:0%
equal
 

00:13:31.120 --> 00:13:33.350 align:start position:0%
equal
to<00:13:31.519><c> that</c><00:13:32.079><c> and</c><00:13:32.240><c> we</c><00:13:32.399><c> wanna</c><00:13:32.639><c> make</c><00:13:32.800><c> sure</c><00:13:32.959><c> that</c><00:13:33.120><c> this</c>

00:13:33.350 --> 00:13:33.360 align:start position:0%
to that and we wanna make sure that this
 

00:13:33.360 --> 00:13:34.790 align:start position:0%
to that and we wanna make sure that this
is<00:13:33.519><c> going</c><00:13:33.600><c> to</c><00:13:33.680><c> be</c><00:13:33.839><c> less</c><00:13:34.079><c> than</c><00:13:34.240><c> or</c><00:13:34.399><c> equal</c><00:13:34.639><c> to</c>

00:13:34.790 --> 00:13:34.800 align:start position:0%
is going to be less than or equal to
 

00:13:34.800 --> 00:13:36.790 align:start position:0%
is going to be less than or equal to
something<00:13:35.120><c> like</c><00:13:35.360><c> this</c><00:13:35.600><c> but</c><00:13:35.760><c> if</c><00:13:35.920><c> we</c><00:13:36.079><c> had</c><00:13:36.399><c> 0</c>

00:13:36.790 --> 00:13:36.800 align:start position:0%
something like this but if we had 0
 

00:13:36.800 --> 00:13:37.829 align:start position:0%
something like this but if we had 0
values<00:13:37.279><c> here</c>

00:13:37.829 --> 00:13:37.839 align:start position:0%
values here
 

00:13:37.839 --> 00:13:41.030 align:start position:0%
values here
i'm<00:13:38.079><c> going</c><00:13:38.240><c> to</c><00:13:38.320><c> basically</c><00:13:38.880><c> default</c><00:13:39.920><c> that</c><00:13:40.800><c> like</c>

00:13:41.030 --> 00:13:41.040 align:start position:0%
i'm going to basically default that like
 

00:13:41.040 --> 00:13:41.590 align:start position:0%
i'm going to basically default that like
there's

00:13:41.590 --> 00:13:41.600 align:start position:0%
there's
 

00:13:41.600 --> 00:13:44.150 align:start position:0%
there's
a<00:13:42.240><c> positive</c><00:13:42.720><c> infinity</c><00:13:43.199><c> over</c><00:13:43.440><c> here</c><00:13:43.760><c> and</c>

00:13:44.150 --> 00:13:44.160 align:start position:0%
a positive infinity over here and
 

00:13:44.160 --> 00:13:46.470 align:start position:0%
a positive infinity over here and
there's<00:13:44.480><c> a</c><00:13:44.720><c> negative</c><00:13:45.199><c> infinity</c><00:13:45.760><c> over</c><00:13:46.000><c> here</c>

00:13:46.470 --> 00:13:46.480 align:start position:0%
there's a negative infinity over here
 

00:13:46.480 --> 00:13:49.110 align:start position:0%
there's a negative infinity over here
so<00:13:46.639><c> that</c><00:13:46.880><c> if</c><00:13:47.040><c> we</c><00:13:47.519><c> wanted</c><00:13:48.240><c> all</c><00:13:48.560><c> elements</c><00:13:48.959><c> to</c>

00:13:49.110 --> 00:13:49.120 align:start position:0%
so that if we wanted all elements to
 

00:13:49.120 --> 00:13:50.550 align:start position:0%
so that if we wanted all elements to
come<00:13:49.279><c> from</c><00:13:49.519><c> a</c><00:13:49.600><c> single</c><00:13:50.000><c> array</c><00:13:50.320><c> we</c><00:13:50.399><c> would</c>

00:13:50.550 --> 00:13:50.560 align:start position:0%
come from a single array we would
 

00:13:50.560 --> 00:13:52.230 align:start position:0%
come from a single array we would
actually<00:13:50.959><c> be</c><00:13:51.199><c> checking</c><00:13:51.600><c> okay</c><00:13:51.839><c> is</c><00:13:51.920><c> this</c><00:13:52.079><c> less</c>

00:13:52.230 --> 00:13:52.240 align:start position:0%
actually be checking okay is this less
 

00:13:52.240 --> 00:13:54.790 align:start position:0%
actually be checking okay is this less
than<00:13:52.399><c> or</c><00:13:52.560><c> equal</c><00:13:52.880><c> to</c><00:13:53.120><c> the</c><00:13:53.440><c> positive</c><00:13:53.920><c> infinity</c>

00:13:54.790 --> 00:13:54.800 align:start position:0%
than or equal to the positive infinity
 

00:13:54.800 --> 00:13:56.230 align:start position:0%
than or equal to the positive infinity
and<00:13:55.040><c> i'm</c><00:13:55.120><c> going</c><00:13:55.279><c> to</c><00:13:55.360><c> show</c><00:13:55.519><c> you</c><00:13:55.680><c> basically</c><00:13:56.079><c> what</c>

00:13:56.230 --> 00:13:56.240 align:start position:0%
and i'm going to show you basically what
 

00:13:56.240 --> 00:13:58.389 align:start position:0%
and i'm going to show you basically what
i<00:13:56.399><c> mean</c><00:13:56.639><c> in</c><00:13:56.800><c> the</c><00:13:56.959><c> code</c><00:13:57.440><c> but</c><00:13:57.680><c> i</c><00:13:57.760><c> hope</c><00:13:58.000><c> that</c><00:13:58.160><c> the</c>

00:13:58.389 --> 00:13:58.399 align:start position:0%
i mean in the code but i hope that the
 

00:13:58.399 --> 00:13:59.269 align:start position:0%
i mean in the code but i hope that the
main<00:13:58.720><c> idea</c>

00:13:59.269 --> 00:13:59.279 align:start position:0%
main idea
 

00:13:59.279 --> 00:14:01.829 align:start position:0%
main idea
of<00:13:59.360><c> what</c><00:13:59.519><c> we're</c><00:13:59.760><c> doing</c><00:14:00.320><c> the</c><00:14:00.560><c> binary</c><00:14:01.120><c> search</c><00:14:01.600><c> to</c>

00:14:01.829 --> 00:14:01.839 align:start position:0%
of what we're doing the binary search to
 

00:14:01.839 --> 00:14:03.110 align:start position:0%
of what we're doing the binary search to
find<00:14:02.079><c> the</c><00:14:02.240><c> median</c>

00:14:03.110 --> 00:14:03.120 align:start position:0%
find the median
 

00:14:03.120 --> 00:14:06.470 align:start position:0%
find the median
is<00:14:03.760><c> at</c><00:14:03.920><c> least</c><00:14:04.399><c> somewhat</c><00:14:04.800><c> obvious</c><00:14:05.360><c> now</c><00:14:06.079><c> so</c><00:14:06.320><c> we</c>

00:14:06.470 --> 00:14:06.480 align:start position:0%
is at least somewhat obvious now so we
 

00:14:06.480 --> 00:14:07.110 align:start position:0%
is at least somewhat obvious now so we
have<00:14:06.800><c> two</c>

00:14:07.110 --> 00:14:07.120 align:start position:0%
have two
 

00:14:07.120 --> 00:14:09.269 align:start position:0%
have two
arrays<00:14:07.680><c> nums</c><00:14:08.000><c> one</c><00:14:08.160><c> and</c><00:14:08.320><c> nums</c><00:14:08.639><c> two</c><00:14:08.959><c> i'm</c><00:14:09.120><c> going</c>

00:14:09.269 --> 00:14:09.279 align:start position:0%
arrays nums one and nums two i'm going
 

00:14:09.279 --> 00:14:10.470 align:start position:0%
arrays nums one and nums two i'm going
to<00:14:09.440><c> assign</c><00:14:10.000><c> them</c>

00:14:10.470 --> 00:14:10.480 align:start position:0%
to assign them
 

00:14:10.480 --> 00:14:12.790 align:start position:0%
to assign them
two<00:14:11.040><c> different</c><00:14:11.680><c> variables</c><00:14:12.240><c> we'll</c><00:14:12.399><c> call</c><00:14:12.639><c> them</c>

00:14:12.790 --> 00:14:12.800 align:start position:0%
two different variables we'll call them
 

00:14:12.800 --> 00:14:13.910 align:start position:0%
two different variables we'll call them
a<00:14:13.040><c> and</c><00:14:13.279><c> b</c>

00:14:13.910 --> 00:14:13.920 align:start position:0%
a and b
 

00:14:13.920 --> 00:14:16.150 align:start position:0%
a and b
and<00:14:14.639><c> you</c><00:14:14.800><c> know</c><00:14:14.959><c> how</c><00:14:15.120><c> we</c><00:14:15.360><c> only</c><00:14:15.680><c> have</c><00:14:15.760><c> to</c><00:14:16.000><c> run</c>

00:14:16.150 --> 00:14:16.160 align:start position:0%
and you know how we only have to run
 

00:14:16.160 --> 00:14:17.990 align:start position:0%
and you know how we only have to run
binary<00:14:16.639><c> search</c><00:14:16.880><c> on</c><00:14:17.040><c> one</c><00:14:17.279><c> of</c><00:14:17.360><c> them</c><00:14:17.600><c> i'm</c><00:14:17.760><c> gonna</c>

00:14:17.990 --> 00:14:18.000 align:start position:0%
binary search on one of them i'm gonna
 

00:14:18.000 --> 00:14:20.069 align:start position:0%
binary search on one of them i'm gonna
make<00:14:18.160><c> sure</c><00:14:18.320><c> that</c><00:14:18.480><c> we</c><00:14:18.639><c> run</c><00:14:18.800><c> binary</c><00:14:19.279><c> search</c><00:14:19.600><c> on</c><00:14:19.839><c> a</c>

00:14:20.069 --> 00:14:20.079 align:start position:0%
make sure that we run binary search on a
 

00:14:20.079 --> 00:14:21.350 align:start position:0%
make sure that we run binary search on a
and<00:14:20.160><c> i'm</c><00:14:20.240><c> gonna</c><00:14:20.480><c> make</c><00:14:20.560><c> sure</c><00:14:20.720><c> that</c><00:14:21.040><c> a</c>

00:14:21.350 --> 00:14:21.360 align:start position:0%
and i'm gonna make sure that a
 

00:14:21.360 --> 00:14:24.389 align:start position:0%
and i'm gonna make sure that a
is<00:14:21.519><c> the</c><00:14:21.839><c> smaller</c><00:14:22.800><c> of</c><00:14:22.959><c> these</c><00:14:23.360><c> two</c><00:14:23.680><c> arrays</c>

00:14:24.389 --> 00:14:24.399 align:start position:0%
is the smaller of these two arrays
 

00:14:24.399 --> 00:14:27.030 align:start position:0%
is the smaller of these two arrays
so<00:14:24.639><c> we'll</c><00:14:24.880><c> check</c><00:14:25.360><c> if</c><00:14:26.000><c> the</c><00:14:26.240><c> length</c><00:14:26.480><c> of</c><00:14:26.639><c> a</c><00:14:26.880><c> is</c>

00:14:27.030 --> 00:14:27.040 align:start position:0%
so we'll check if the length of a is
 

00:14:27.040 --> 00:14:27.750 align:start position:0%
so we'll check if the length of a is
bigger<00:14:27.279><c> than</c><00:14:27.519><c> b</c>

00:14:27.750 --> 00:14:27.760 align:start position:0%
bigger than b
 

00:14:27.760 --> 00:14:29.910 align:start position:0%
bigger than b
then<00:14:27.920><c> we're</c><00:14:28.079><c> gonna</c><00:14:28.399><c> we're</c><00:14:28.639><c> gonna</c><00:14:29.040><c> swap</c><00:14:29.519><c> these</c>

00:14:29.910 --> 00:14:29.920 align:start position:0%
then we're gonna we're gonna swap these
 

00:14:29.920 --> 00:14:31.189 align:start position:0%
then we're gonna we're gonna swap these
two<00:14:30.720><c> uh</c>

00:14:31.189 --> 00:14:31.199 align:start position:0%
two uh
 

00:14:31.199 --> 00:14:34.069 align:start position:0%
two uh
arrays<00:14:31.680><c> we're</c><00:14:31.839><c> gonna</c><00:14:32.000><c> swap</c><00:14:32.399><c> a</c><00:14:32.639><c> and</c><00:14:32.800><c> b</c><00:14:33.360><c> so</c><00:14:33.680><c> let's</c>

00:14:34.069 --> 00:14:34.079 align:start position:0%
arrays we're gonna swap a and b so let's
 

00:14:34.079 --> 00:14:34.710 align:start position:0%
arrays we're gonna swap a and b so let's
also

00:14:34.710 --> 00:14:34.720 align:start position:0%
also
 

00:14:34.720 --> 00:14:38.069 align:start position:0%
also
get<00:14:34.959><c> the</c><00:14:35.360><c> total</c><00:14:35.839><c> and</c><00:14:36.399><c> half</c><00:14:37.040><c> length</c><00:14:37.519><c> of</c>

00:14:38.069 --> 00:14:38.079 align:start position:0%
get the total and half length of
 

00:14:38.079 --> 00:14:39.829 align:start position:0%
get the total and half length of
each<00:14:38.320><c> of</c><00:14:38.399><c> these</c><00:14:38.639><c> so</c><00:14:38.800><c> the</c><00:14:38.959><c> total</c><00:14:39.360><c> is</c><00:14:39.440><c> just</c><00:14:39.680><c> gonna</c>

00:14:39.829 --> 00:14:39.839 align:start position:0%
each of these so the total is just gonna
 

00:14:39.839 --> 00:14:41.590 align:start position:0%
each of these so the total is just gonna
be<00:14:40.560><c> the</c><00:14:40.720><c> length</c><00:14:40.959><c> of</c><00:14:41.120><c> each</c>

00:14:41.590 --> 00:14:41.600 align:start position:0%
be the length of each
 

00:14:41.600 --> 00:14:44.230 align:start position:0%
be the length of each
added<00:14:42.000><c> together</c><00:14:42.959><c> and</c><00:14:43.279><c> half</c><00:14:43.600><c> is</c><00:14:43.760><c> just</c><00:14:44.000><c> going</c><00:14:44.160><c> to</c>

00:14:44.230 --> 00:14:44.240 align:start position:0%
added together and half is just going to
 

00:14:44.240 --> 00:14:44.949 align:start position:0%
added together and half is just going to
be

00:14:44.949 --> 00:14:44.959 align:start position:0%
be
 

00:14:44.959 --> 00:14:48.949 align:start position:0%
be
total<00:14:45.839><c> divided</c><00:14:46.399><c> by</c><00:14:46.639><c> 2.</c><00:14:47.519><c> in</c><00:14:47.760><c> python</c><00:14:48.240><c> we</c><00:14:48.399><c> need</c>

00:14:48.949 --> 00:14:48.959 align:start position:0%
total divided by 2. in python we need
 

00:14:48.959 --> 00:14:50.790 align:start position:0%
total divided by 2. in python we need
the<00:14:49.279><c> double</c><00:14:49.760><c> if</c><00:14:49.839><c> we</c><00:14:50.000><c> want</c><00:14:50.079><c> to</c><00:14:50.160><c> do</c><00:14:50.399><c> integer</c>

00:14:50.790 --> 00:14:50.800 align:start position:0%
the double if we want to do integer
 

00:14:50.800 --> 00:14:52.949 align:start position:0%
the double if we want to do integer
division<00:14:51.440><c> so</c><00:14:51.680><c> now</c><00:14:51.920><c> i'm</c><00:14:52.079><c> going</c><00:14:52.160><c> to</c><00:14:52.240><c> run</c><00:14:52.480><c> binary</c>

00:14:52.949 --> 00:14:52.959 align:start position:0%
division so now i'm going to run binary
 

00:14:52.959 --> 00:14:53.829 align:start position:0%
division so now i'm going to run binary
search<00:14:53.360><c> on</c>

00:14:53.829 --> 00:14:53.839 align:start position:0%
search on
 

00:14:53.839 --> 00:14:56.710 align:start position:0%
search on
a<00:14:54.160><c> because</c><00:14:54.480><c> a</c><00:14:54.720><c> is</c><00:14:54.880><c> the</c><00:14:55.120><c> smaller</c><00:14:55.760><c> so</c><00:14:56.160><c> the</c><00:14:56.480><c> left</c>

00:14:56.710 --> 00:14:56.720 align:start position:0%
a because a is the smaller so the left
 

00:14:56.720 --> 00:14:58.550 align:start position:0%
a because a is the smaller so the left
and<00:14:56.880><c> right</c><00:14:57.199><c> pointers</c><00:14:57.600><c> are</c><00:14:57.839><c> going</c><00:14:58.079><c> to</c><00:14:58.240><c> be</c>

00:14:58.550 --> 00:14:58.560 align:start position:0%
and right pointers are going to be
 

00:14:58.560 --> 00:15:02.150 align:start position:0%
and right pointers are going to be
zero<00:14:59.120><c> and</c><00:14:59.680><c> length</c><00:15:00.079><c> of</c><00:15:00.240><c> a</c><00:15:01.040><c> minus</c><00:15:01.519><c> one</c>

00:15:02.150 --> 00:15:02.160 align:start position:0%
zero and length of a minus one
 

00:15:02.160 --> 00:15:04.069 align:start position:0%
zero and length of a minus one
and<00:15:02.399><c> remember</c><00:15:02.720><c> that</c><00:15:03.040><c> half</c><00:15:03.440><c> is</c><00:15:03.600><c> going</c><00:15:03.680><c> to</c><00:15:03.839><c> tell</c>

00:15:04.069 --> 00:15:04.079 align:start position:0%
and remember that half is going to tell
 

00:15:04.079 --> 00:15:05.590 align:start position:0%
and remember that half is going to tell
us<00:15:04.320><c> the</c><00:15:04.639><c> total</c><00:15:05.040><c> elements</c>

00:15:05.590 --> 00:15:05.600 align:start position:0%
us the total elements
 

00:15:05.600 --> 00:15:08.389 align:start position:0%
us the total elements
in<00:15:05.680><c> the</c><00:15:06.079><c> left</c><00:15:06.399><c> partition</c><00:15:07.199><c> so</c><00:15:07.680><c> now</c><00:15:08.079><c> i'm</c><00:15:08.240><c> just</c>

00:15:08.389 --> 00:15:08.399 align:start position:0%
in the left partition so now i'm just
 

00:15:08.399 --> 00:15:08.870 align:start position:0%
in the left partition so now i'm just
gonna<00:15:08.560><c> be</c>

00:15:08.870 --> 00:15:08.880 align:start position:0%
gonna be
 

00:15:08.880 --> 00:15:11.670 align:start position:0%
gonna be
lazy<00:15:09.360><c> and</c><00:15:09.600><c> say</c><00:15:09.920><c> while</c><00:15:10.399><c> true</c><00:15:11.199><c> we're</c><00:15:11.519><c> going</c><00:15:11.600><c> to</c>

00:15:11.670 --> 00:15:11.680 align:start position:0%
lazy and say while true we're going to
 

00:15:11.680 --> 00:15:12.150 align:start position:0%
lazy and say while true we're going to
start

00:15:12.150 --> 00:15:12.160 align:start position:0%
start
 

00:15:12.160 --> 00:15:13.670 align:start position:0%
start
looping<00:15:12.560><c> we're</c><00:15:12.720><c> going</c><00:15:12.800><c> to</c><00:15:12.880><c> run</c><00:15:13.040><c> our</c><00:15:13.199><c> binary</c>

00:15:13.670 --> 00:15:13.680 align:start position:0%
looping we're going to run our binary
 

00:15:13.680 --> 00:15:14.870 align:start position:0%
looping we're going to run our binary
search<00:15:14.000><c> because</c><00:15:14.240><c> we</c><00:15:14.320><c> know</c><00:15:14.480><c> that</c><00:15:14.639><c> there's</c>

00:15:14.870 --> 00:15:14.880 align:start position:0%
search because we know that there's
 

00:15:14.880 --> 00:15:16.790 align:start position:0%
search because we know that there's
guaranteed<00:15:15.440><c> a</c><00:15:15.519><c> minimum</c><00:15:16.000><c> so</c><00:15:16.240><c> once</c><00:15:16.480><c> we</c>

00:15:16.790 --> 00:15:16.800 align:start position:0%
guaranteed a minimum so once we
 

00:15:16.800 --> 00:15:18.790 align:start position:0%
guaranteed a minimum so once we
are<00:15:17.279><c> there's</c><00:15:17.519><c> guaranteed</c><00:15:17.920><c> a</c><00:15:18.000><c> median</c><00:15:18.399><c> so</c><00:15:18.560><c> once</c>

00:15:18.790 --> 00:15:18.800 align:start position:0%
are there's guaranteed a median so once
 

00:15:18.800 --> 00:15:20.150 align:start position:0%
are there's guaranteed a median so once
we<00:15:18.959><c> find</c><00:15:19.199><c> it</c><00:15:19.279><c> we</c><00:15:19.440><c> can</c><00:15:19.519><c> just</c><00:15:19.680><c> return</c>

00:15:20.150 --> 00:15:20.160 align:start position:0%
we find it we can just return
 

00:15:20.160 --> 00:15:22.389 align:start position:0%
we find it we can just return
it<00:15:20.560><c> so</c><00:15:20.880><c> now</c><00:15:21.199><c> of</c><00:15:21.360><c> course</c><00:15:21.600><c> we</c><00:15:21.760><c> want</c><00:15:21.920><c> to</c><00:15:22.000><c> compute</c>

00:15:22.389 --> 00:15:22.399 align:start position:0%
it so now of course we want to compute
 

00:15:22.399 --> 00:15:23.750 align:start position:0%
it so now of course we want to compute
the<00:15:22.639><c> middle</c><00:15:23.040><c> value</c>

00:15:23.750 --> 00:15:23.760 align:start position:0%
the middle value
 

00:15:23.760 --> 00:15:25.590 align:start position:0%
the middle value
of<00:15:24.079><c> array</c><00:15:24.560><c> a</c><00:15:24.800><c> that</c><00:15:24.880><c> we're</c><00:15:25.040><c> gonna</c><00:15:25.120><c> use</c><00:15:25.360><c> to</c><00:15:25.440><c> get</c>

00:15:25.590 --> 00:15:25.600 align:start position:0%
of array a that we're gonna use to get
 

00:15:25.600 --> 00:15:27.269 align:start position:0%
of array a that we're gonna use to get
our<00:15:25.920><c> left</c><00:15:26.480><c> partition</c>

00:15:27.269 --> 00:15:27.279 align:start position:0%
our left partition
 

00:15:27.279 --> 00:15:29.189 align:start position:0%
our left partition
so<00:15:27.440><c> we're</c><00:15:27.600><c> gonna</c><00:15:27.760><c> take</c><00:15:28.079><c> left</c><00:15:28.480><c> and</c><00:15:28.880><c> right</c>

00:15:29.189 --> 00:15:29.199 align:start position:0%
so we're gonna take left and right
 

00:15:29.199 --> 00:15:31.110 align:start position:0%
so we're gonna take left and right
pointers<00:15:29.920><c> add</c><00:15:30.160><c> them</c><00:15:30.320><c> together</c>

00:15:31.110 --> 00:15:31.120 align:start position:0%
pointers add them together
 

00:15:31.120 --> 00:15:34.389 align:start position:0%
pointers add them together
divide<00:15:31.519><c> by</c><00:15:31.839><c> two</c><00:15:32.800><c> now</c><00:15:33.040><c> how</c><00:15:33.199><c> do</c><00:15:33.360><c> we</c><00:15:33.440><c> get</c><00:15:33.920><c> the</c>

00:15:34.389 --> 00:15:34.399 align:start position:0%
divide by two now how do we get the
 

00:15:34.399 --> 00:15:37.509 align:start position:0%
divide by two now how do we get the
and<00:15:34.800><c> so</c><00:15:34.959><c> this</c><00:15:35.199><c> is</c><00:15:35.440><c> referring</c><00:15:35.920><c> to</c><00:15:36.160><c> a</c><00:15:36.560><c> so</c><00:15:37.199><c> we'll</c>

00:15:37.509 --> 00:15:37.519 align:start position:0%
and so this is referring to a so we'll
 

00:15:37.519 --> 00:15:38.389 align:start position:0%
and so this is referring to a so we'll
call<00:15:37.759><c> this</c>

00:15:38.389 --> 00:15:38.399 align:start position:0%
call this
 

00:15:38.399 --> 00:15:40.949 align:start position:0%
call this
this<00:15:38.560><c> is</c><00:15:38.720><c> for</c><00:15:38.880><c> a</c><00:15:39.440><c> this</c><00:15:39.680><c> is</c><00:15:39.759><c> the</c><00:15:39.920><c> pointer</c><00:15:40.320><c> for</c><00:15:40.639><c> b</c>

00:15:40.949 --> 00:15:40.959 align:start position:0%
this is for a this is the pointer for b
 

00:15:40.959 --> 00:15:41.430 align:start position:0%
this is for a this is the pointer for b
now

00:15:41.430 --> 00:15:41.440 align:start position:0%
now
 

00:15:41.440 --> 00:15:43.670 align:start position:0%
now
we<00:15:41.680><c> don't</c><00:15:41.920><c> actually</c><00:15:42.240><c> need</c><00:15:42.480><c> to</c><00:15:43.279><c> divide</c>

00:15:43.670 --> 00:15:43.680 align:start position:0%
we don't actually need to divide
 

00:15:43.680 --> 00:15:45.829 align:start position:0%
we don't actually need to divide
anything<00:15:43.920><c> by</c><00:15:44.160><c> two</c><00:15:44.320><c> we</c><00:15:44.480><c> can</c><00:15:44.560><c> just</c><00:15:44.720><c> take</c><00:15:45.040><c> half</c>

00:15:45.829 --> 00:15:45.839 align:start position:0%
anything by two we can just take half
 

00:15:45.839 --> 00:15:49.350 align:start position:0%
anything by two we can just take half
and<00:15:46.240><c> subtract</c><00:15:47.440><c> i</c><00:15:47.839><c> from</c><00:15:48.079><c> it</c><00:15:48.480><c> but</c><00:15:48.720><c> one</c><00:15:48.959><c> thing</c>

00:15:49.350 --> 00:15:49.360 align:start position:0%
and subtract i from it but one thing
 

00:15:49.360 --> 00:15:51.110 align:start position:0%
and subtract i from it but one thing
you<00:15:49.600><c> need</c><00:15:49.759><c> to</c><00:15:49.920><c> know</c><00:15:50.079><c> that</c><00:15:50.320><c> this</c><00:15:50.560><c> is</c><00:15:50.639><c> going</c><00:15:50.800><c> to</c>

00:15:51.110 --> 00:15:51.120 align:start position:0%
you need to know that this is going to
 

00:15:51.120 --> 00:15:52.389 align:start position:0%
you need to know that this is going to
be<00:15:51.279><c> the</c><00:15:51.600><c> index</c>

00:15:52.389 --> 00:15:52.399 align:start position:0%
be the index
 

00:15:52.399 --> 00:15:55.430 align:start position:0%
be the index
so<00:15:52.959><c> to</c><00:15:53.279><c> get</c><00:15:53.440><c> rid</c><00:15:53.600><c> of</c><00:15:53.680><c> the</c><00:15:53.920><c> off</c><00:15:54.240><c> by</c><00:15:54.480><c> one</c><00:15:54.720><c> errors</c>

00:15:55.430 --> 00:15:55.440 align:start position:0%
so to get rid of the off by one errors
 

00:15:55.440 --> 00:15:57.590 align:start position:0%
so to get rid of the off by one errors
j<00:15:55.680><c> is</c><00:15:55.759><c> not</c><00:15:56.000><c> actually</c><00:15:56.240><c> the</c><00:15:56.399><c> number</c><00:15:56.720><c> of</c><00:15:56.880><c> elements</c>

00:15:57.590 --> 00:15:57.600 align:start position:0%
j is not actually the number of elements
 

00:15:57.600 --> 00:15:59.829 align:start position:0%
j is not actually the number of elements
in<00:15:57.839><c> array</c><00:15:58.240><c> b</c><00:15:58.399><c> it's</c><00:15:58.560><c> actually</c><00:15:58.880><c> the</c><00:15:59.199><c> index</c><00:15:59.680><c> of</c>

00:15:59.829 --> 00:15:59.839 align:start position:0%
in array b it's actually the index of
 

00:15:59.839 --> 00:16:01.430 align:start position:0%
in array b it's actually the index of
the<00:16:00.000><c> midpoint</c><00:16:00.560><c> so</c><00:16:00.720><c> we're</c><00:16:00.880><c> going</c><00:16:00.959><c> to</c><00:16:01.120><c> take</c>

00:16:01.430 --> 00:16:01.440 align:start position:0%
the midpoint so we're going to take
 

00:16:01.440 --> 00:16:03.030 align:start position:0%
the midpoint so we're going to take
subtract<00:16:02.079><c> i</c><00:16:02.399><c> and</c><00:16:02.480><c> we're</c><00:16:02.639><c> also</c><00:16:02.880><c> going</c><00:16:02.959><c> to</c>

00:16:03.030 --> 00:16:03.040 align:start position:0%
subtract i and we're also going to
 

00:16:03.040 --> 00:16:05.430 align:start position:0%
subtract i and we're also going to
subtract<00:16:04.000><c> 2</c><00:16:04.320><c> from</c><00:16:04.560><c> it</c><00:16:04.720><c> because</c><00:16:05.040><c> we</c><00:16:05.199><c> know</c>

00:16:05.430 --> 00:16:05.440 align:start position:0%
subtract 2 from it because we know
 

00:16:05.440 --> 00:16:07.670 align:start position:0%
subtract 2 from it because we know
arrays<00:16:06.000><c> are</c><00:16:06.160><c> indexed</c><00:16:06.639><c> at</c><00:16:06.880><c> zero</c>

00:16:07.670 --> 00:16:07.680 align:start position:0%
arrays are indexed at zero
 

00:16:07.680 --> 00:16:09.350 align:start position:0%
arrays are indexed at zero
and<00:16:07.839><c> we're</c><00:16:08.079><c> doing</c><00:16:08.240><c> this</c><00:16:08.480><c> because</c><00:16:08.720><c> we</c><00:16:08.800><c> know</c><00:16:09.120><c> j</c>

00:16:09.350 --> 00:16:09.360 align:start position:0%
and we're doing this because we know j
 

00:16:09.360 --> 00:16:11.430 align:start position:0%
and we're doing this because we know j
starts<00:16:09.680><c> at</c><00:16:09.759><c> zero</c><00:16:10.160><c> and</c><00:16:10.399><c> i</c><00:16:10.639><c> starts</c><00:16:10.959><c> at</c><00:16:11.040><c> zero</c><00:16:11.279><c> so</c>

00:16:11.430 --> 00:16:11.440 align:start position:0%
starts at zero and i starts at zero so
 

00:16:11.440 --> 00:16:13.509 align:start position:0%
starts at zero and i starts at zero so
we<00:16:11.519><c> gotta</c><00:16:11.759><c> do</c><00:16:11.920><c> the</c><00:16:12.079><c> extra</c><00:16:12.480><c> minus</c><00:16:12.800><c> by</c><00:16:13.040><c> two</c>

00:16:13.509 --> 00:16:13.519 align:start position:0%
we gotta do the extra minus by two
 

00:16:13.519 --> 00:16:16.790 align:start position:0%
we gotta do the extra minus by two
so<00:16:13.839><c> now</c><00:16:14.160><c> we</c><00:16:14.320><c> wanna</c><00:16:14.800><c> get</c><00:16:15.279><c> the</c><00:16:15.839><c> values</c>

00:16:16.790 --> 00:16:16.800 align:start position:0%
so now we wanna get the values
 

00:16:16.800 --> 00:16:17.990 align:start position:0%
so now we wanna get the values
right<00:16:17.040><c> the</c><00:16:17.199><c> values</c><00:16:17.600><c> that</c><00:16:17.680><c> we're</c><00:16:17.759><c> actually</c>

00:16:17.990 --> 00:16:18.000 align:start position:0%
right the values that we're actually
 

00:16:18.000 --> 00:16:20.310 align:start position:0%
right the values that we're actually
gonna<00:16:18.240><c> need</c><00:16:18.399><c> to</c><00:16:18.560><c> compare</c><00:16:19.279><c> to</c><00:16:19.680><c> find</c>

00:16:20.310 --> 00:16:20.320 align:start position:0%
gonna need to compare to find
 

00:16:20.320 --> 00:16:22.150 align:start position:0%
gonna need to compare to find
to<00:16:20.480><c> determine</c><00:16:20.959><c> if</c><00:16:21.040><c> we</c><00:16:21.199><c> actually</c><00:16:21.600><c> found</c><00:16:22.000><c> the</c>

00:16:22.150 --> 00:16:22.160 align:start position:0%
to determine if we actually found the
 

00:16:22.160 --> 00:16:23.590 align:start position:0%
to determine if we actually found the
median<00:16:22.480><c> right</c><00:16:22.639><c> if</c><00:16:22.800><c> we</c><00:16:22.880><c> actually</c><00:16:23.199><c> have</c><00:16:23.360><c> a</c>

00:16:23.590 --> 00:16:23.600 align:start position:0%
median right if we actually have a
 

00:16:23.600 --> 00:16:24.150 align:start position:0%
median right if we actually have a
correct

00:16:24.150 --> 00:16:24.160 align:start position:0%
correct
 

00:16:24.160 --> 00:16:27.749 align:start position:0%
correct
left<00:16:24.399><c> partition</c><00:16:25.279><c> so</c><00:16:26.240><c> you</c><00:16:26.320><c> know</c><00:16:26.800><c> we</c><00:16:26.959><c> can</c><00:16:27.120><c> take</c>

00:16:27.749 --> 00:16:27.759 align:start position:0%
left partition so you know we can take
 

00:16:27.759 --> 00:16:31.110 align:start position:0%
left partition so you know we can take
a<00:16:28.240><c> left</c><00:16:28.639><c> to</c><00:16:28.800><c> be</c><00:16:29.120><c> a</c><00:16:29.440><c> of</c><00:16:29.600><c> index</c><00:16:30.079><c> i</c><00:16:30.399><c> right</c>

00:16:31.110 --> 00:16:31.120 align:start position:0%
a left to be a of index i right
 

00:16:31.120 --> 00:16:33.110 align:start position:0%
a left to be a of index i right
that's<00:16:31.360><c> going</c><00:16:31.600><c> to</c><00:16:31.759><c> be</c><00:16:31.920><c> the</c><00:16:32.160><c> value</c><00:16:32.639><c> in</c><00:16:32.720><c> the</c><00:16:32.880><c> left</c>

00:16:33.110 --> 00:16:33.120 align:start position:0%
that's going to be the value in the left
 

00:16:33.120 --> 00:16:34.230 align:start position:0%
that's going to be the value in the left
partition<00:16:33.600><c> that</c><00:16:33.680><c> we're</c><00:16:33.839><c> going</c><00:16:33.839><c> to</c><00:16:33.920><c> need</c><00:16:34.079><c> to</c>

00:16:34.230 --> 00:16:34.240 align:start position:0%
partition that we're going to need to
 

00:16:34.240 --> 00:16:35.430 align:start position:0%
partition that we're going to need to
use<00:16:34.480><c> to</c><00:16:34.639><c> compare</c>

00:16:35.430 --> 00:16:35.440 align:start position:0%
use to compare
 

00:16:35.440 --> 00:16:37.509 align:start position:0%
use to compare
and<00:16:35.600><c> there's</c><00:16:35.920><c> also</c><00:16:36.320><c> going</c><00:16:36.560><c> to</c><00:16:36.720><c> be</c><00:16:36.880><c> a</c><00:16:37.040><c> value</c><00:16:37.440><c> in</c>

00:16:37.509 --> 00:16:37.519 align:start position:0%
and there's also going to be a value in
 

00:16:37.519 --> 00:16:38.870 align:start position:0%
and there's also going to be a value in
the<00:16:37.759><c> right</c><00:16:38.000><c> partition</c><00:16:38.480><c> of</c>

00:16:38.870 --> 00:16:38.880 align:start position:0%
the right partition of
 

00:16:38.880 --> 00:16:41.590 align:start position:0%
the right partition of
of<00:16:39.199><c> a</c><00:16:39.519><c> right</c><00:16:40.079><c> and</c><00:16:40.160><c> we</c><00:16:40.320><c> know</c><00:16:40.560><c> it's</c><00:16:40.800><c> adjacent</c>

00:16:41.590 --> 00:16:41.600 align:start position:0%
of a right and we know it's adjacent
 

00:16:41.600 --> 00:16:43.350 align:start position:0%
of a right and we know it's adjacent
right<00:16:41.839><c> so</c><00:16:42.000><c> what</c><00:16:42.160><c> we</c><00:16:42.320><c> can</c><00:16:42.480><c> do</c><00:16:42.639><c> is</c><00:16:42.800><c> just</c><00:16:43.040><c> take</c>

00:16:43.350 --> 00:16:43.360 align:start position:0%
right so what we can do is just take
 

00:16:43.360 --> 00:16:46.949 align:start position:0%
right so what we can do is just take
i<00:16:43.680><c> plus</c><00:16:44.240><c> one</c><00:16:45.040><c> and</c><00:16:45.279><c> we</c><00:16:45.440><c> can</c><00:16:45.600><c> repeat</c><00:16:46.000><c> this</c><00:16:46.320><c> with</c><00:16:46.639><c> b</c>

00:16:46.949 --> 00:16:46.959 align:start position:0%
i plus one and we can repeat this with b
 

00:16:46.959 --> 00:16:50.069 align:start position:0%
i plus one and we can repeat this with b
right<00:16:47.199><c> so</c><00:16:47.440><c> b</c><00:16:48.480><c> left</c><00:16:48.800><c> is</c><00:16:48.880><c> going</c><00:16:49.040><c> to</c><00:16:49.120><c> be</c><00:16:49.440><c> b</c><00:16:49.839><c> at</c>

00:16:50.069 --> 00:16:50.079 align:start position:0%
right so b left is going to be b at
 

00:16:50.079 --> 00:16:51.430 align:start position:0%
right so b left is going to be b at
index<00:16:50.639><c> j</c>

00:16:51.430 --> 00:16:51.440 align:start position:0%
index j
 

00:16:51.440 --> 00:16:54.710 align:start position:0%
index j
b<00:16:52.079><c> right</c><00:16:52.560><c> is</c><00:16:52.720><c> going</c><00:16:52.959><c> to</c><00:16:53.120><c> be</c><00:16:53.759><c> b</c><00:16:54.320><c> at</c>

00:16:54.710 --> 00:16:54.720 align:start position:0%
b right is going to be b at
 

00:16:54.720 --> 00:16:57.829 align:start position:0%
b right is going to be b at
index<00:16:55.360><c> j</c><00:16:55.680><c> plus</c><00:16:56.240><c> one</c><00:16:56.800><c> but</c><00:16:57.040><c> here's</c><00:16:57.440><c> the</c><00:16:57.600><c> part</c>

00:16:57.829 --> 00:16:57.839 align:start position:0%
index j plus one but here's the part
 

00:16:57.839 --> 00:16:59.509 align:start position:0%
index j plus one but here's the part
where<00:16:58.079><c> i'm</c><00:16:58.160><c> gonna</c><00:16:58.399><c> make</c><00:16:58.639><c> our</c><00:16:58.800><c> lives</c><00:16:59.120><c> a</c><00:16:59.199><c> lot</c>

00:16:59.509 --> 00:16:59.519 align:start position:0%
where i'm gonna make our lives a lot
 

00:16:59.519 --> 00:17:01.829 align:start position:0%
where i'm gonna make our lives a lot
easier<00:17:00.000><c> and</c><00:17:00.160><c> avoid</c><00:17:00.480><c> some</c><00:17:00.720><c> edge</c><00:17:00.880><c> cases</c><00:17:01.279><c> now</c><00:17:01.600><c> any</c>

00:17:01.829 --> 00:17:01.839 align:start position:0%
easier and avoid some edge cases now any
 

00:17:01.839 --> 00:17:02.470 align:start position:0%
easier and avoid some edge cases now any
of<00:17:02.000><c> these</c>

00:17:02.470 --> 00:17:02.480 align:start position:0%
of these
 

00:17:02.480 --> 00:17:05.350 align:start position:0%
of these
indices<00:17:03.440><c> technically</c><00:17:04.319><c> could</c><00:17:04.559><c> be</c><00:17:04.880><c> out</c><00:17:05.039><c> of</c>

00:17:05.350 --> 00:17:05.360 align:start position:0%
indices technically could be out of
 

00:17:05.360 --> 00:17:06.150 align:start position:0%
indices technically could be out of
bounds<00:17:05.839><c> right</c>

00:17:06.150 --> 00:17:06.160 align:start position:0%
bounds right
 

00:17:06.160 --> 00:17:09.669 align:start position:0%
bounds right
isn't<00:17:06.319><c> that</c><00:17:06.720><c> true</c><00:17:07.199><c> so</c><00:17:07.439><c> if</c><00:17:08.000><c> i</c><00:17:08.480><c> is</c><00:17:08.720><c> out</c><00:17:08.959><c> of</c><00:17:09.120><c> bounds</c>

00:17:09.669 --> 00:17:09.679 align:start position:0%
isn't that true so if i is out of bounds
 

00:17:09.679 --> 00:17:11.590 align:start position:0%
isn't that true so if i is out of bounds
hypothetically<00:17:10.480><c> what</c><00:17:10.640><c> would</c><00:17:10.799><c> that</c><00:17:11.120><c> mean</c><00:17:11.439><c> that</c>

00:17:11.590 --> 00:17:11.600 align:start position:0%
hypothetically what would that mean that
 

00:17:11.600 --> 00:17:12.949 align:start position:0%
hypothetically what would that mean that
would<00:17:11.839><c> mean</c><00:17:12.319><c> i</c>

00:17:12.949 --> 00:17:12.959 align:start position:0%
would mean i
 

00:17:12.959 --> 00:17:16.470 align:start position:0%
would mean i
is<00:17:13.520><c> less</c><00:17:14.000><c> than</c><00:17:14.400><c> zero</c><00:17:15.039><c> so</c><00:17:15.199><c> if</c><00:17:15.439><c> i</c><00:17:15.760><c> is</c><00:17:16.000><c> less</c><00:17:16.240><c> than</c>

00:17:16.470 --> 00:17:16.480 align:start position:0%
is less than zero so if i is less than
 

00:17:16.480 --> 00:17:18.549 align:start position:0%
is less than zero so if i is less than
zero<00:17:16.799><c> is</c><00:17:16.880><c> there</c><00:17:17.039><c> a</c><00:17:17.199><c> default</c><00:17:17.839><c> value</c><00:17:18.240><c> that</c><00:17:18.400><c> we</c>

00:17:18.549 --> 00:17:18.559 align:start position:0%
zero is there a default value that we
 

00:17:18.559 --> 00:17:19.590 align:start position:0%
zero is there a default value that we
can<00:17:18.799><c> give</c><00:17:19.039><c> to</c><00:17:19.280><c> a</c>

00:17:19.590 --> 00:17:19.600 align:start position:0%
can give to a
 

00:17:19.600 --> 00:17:22.630 align:start position:0%
can give to a
left<00:17:20.319><c> there</c><00:17:20.720><c> is</c><00:17:21.360><c> and</c><00:17:21.760><c> it's</c><00:17:22.000><c> called</c>

00:17:22.630 --> 00:17:22.640 align:start position:0%
left there is and it's called
 

00:17:22.640 --> 00:17:25.990 align:start position:0%
left there is and it's called
negative<00:17:23.280><c> infinity</c><00:17:24.319><c> right</c><00:17:25.039><c> so</c><00:17:25.520><c> it's</c><00:17:25.679><c> going</c><00:17:25.839><c> to</c>

00:17:25.990 --> 00:17:26.000 align:start position:0%
negative infinity right so it's going to
 

00:17:26.000 --> 00:17:27.429 align:start position:0%
negative infinity right so it's going to
be<00:17:26.160><c> set</c><00:17:26.400><c> to</c><00:17:26.640><c> a</c><00:17:26.880><c> of</c><00:17:27.039><c> i</c>

00:17:27.429 --> 00:17:27.439 align:start position:0%
be set to a of i
 

00:17:27.439 --> 00:17:29.990 align:start position:0%
be set to a of i
if<00:17:28.000><c> i</c><00:17:28.400><c> is</c><00:17:28.640><c> greater</c><00:17:28.960><c> than</c><00:17:29.120><c> or</c><00:17:29.280><c> equal</c><00:17:29.440><c> to</c><00:17:29.600><c> zero</c><00:17:29.840><c> so</c>

00:17:29.990 --> 00:17:30.000 align:start position:0%
if i is greater than or equal to zero so
 

00:17:30.000 --> 00:17:30.470 align:start position:0%
if i is greater than or equal to zero so
if<00:17:30.160><c> i</c>

00:17:30.470 --> 00:17:30.480 align:start position:0%
if i
 

00:17:30.480 --> 00:17:33.669 align:start position:0%
if i
is<00:17:30.640><c> still</c><00:17:30.960><c> in</c><00:17:31.120><c> bounds</c><00:17:31.600><c> set</c><00:17:31.760><c> it</c><00:17:32.240><c> to</c><00:17:32.480><c> the</c><00:17:32.640><c> value</c>

00:17:33.669 --> 00:17:33.679 align:start position:0%
is still in bounds set it to the value
 

00:17:33.679 --> 00:17:36.789 align:start position:0%
is still in bounds set it to the value
at<00:17:33.840><c> this</c><00:17:34.080><c> position</c><00:17:34.960><c> if</c><00:17:35.200><c> it's</c><00:17:35.520><c> not</c><00:17:36.400><c> let's</c>

00:17:36.789 --> 00:17:36.799 align:start position:0%
at this position if it's not let's
 

00:17:36.799 --> 00:17:37.830 align:start position:0%
at this position if it's not let's
default

00:17:37.830 --> 00:17:37.840 align:start position:0%
default
 

00:17:37.840 --> 00:17:40.789 align:start position:0%
default
the<00:17:38.000><c> default</c><00:17:38.640><c> value</c><00:17:38.960><c> we</c><00:17:39.120><c> can</c><00:17:39.360><c> give</c><00:17:39.679><c> this</c><00:17:40.160><c> is</c>

00:17:40.789 --> 00:17:40.799 align:start position:0%
the default value we can give this is
 

00:17:40.799 --> 00:17:41.510 align:start position:0%
the default value we can give this is
negative

00:17:41.510 --> 00:17:41.520 align:start position:0%
negative
 

00:17:41.520 --> 00:17:43.830 align:start position:0%
negative
infinity<00:17:42.240><c> and</c><00:17:42.400><c> we</c><00:17:42.559><c> can</c><00:17:42.720><c> do</c><00:17:42.880><c> the</c><00:17:43.039><c> exact</c><00:17:43.520><c> same</c>

00:17:43.830 --> 00:17:43.840 align:start position:0%
infinity and we can do the exact same
 

00:17:43.840 --> 00:17:45.350 align:start position:0%
infinity and we can do the exact same
thing<00:17:44.160><c> for</c><00:17:44.400><c> this</c><00:17:44.720><c> one</c>

00:17:45.350 --> 00:17:45.360 align:start position:0%
thing for this one
 

00:17:45.360 --> 00:17:48.549 align:start position:0%
thing for this one
if<00:17:45.679><c> this</c><00:17:46.160><c> j</c><00:17:46.559><c> is</c><00:17:46.720><c> actually</c><00:17:47.120><c> out</c><00:17:47.280><c> of</c><00:17:47.440><c> bounds</c><00:17:48.240><c> it's</c>

00:17:48.549 --> 00:17:48.559 align:start position:0%
if this j is actually out of bounds it's
 

00:17:48.559 --> 00:17:49.669 align:start position:0%
if this j is actually out of bounds it's
going<00:17:48.799><c> to</c><00:17:48.960><c> be</c><00:17:49.200><c> that</c>

00:17:49.669 --> 00:17:49.679 align:start position:0%
going to be that
 

00:17:49.679 --> 00:17:52.870 align:start position:0%
going to be that
j<00:17:50.080><c> is</c><00:17:50.400><c> less</c><00:17:50.720><c> than</c><00:17:51.200><c> or</c><00:17:51.440><c> equal</c><00:17:52.240><c> is</c><00:17:52.400><c> basically</c>

00:17:52.870 --> 00:17:52.880 align:start position:0%
j is less than or equal is basically
 

00:17:52.880 --> 00:17:54.950 align:start position:0%
j is less than or equal is basically
less<00:17:53.120><c> than</c><00:17:53.280><c> zero</c><00:17:53.679><c> so</c><00:17:53.840><c> it's</c><00:17:54.000><c> gone</c><00:17:54.320><c> too</c><00:17:54.559><c> far</c><00:17:54.799><c> to</c>

00:17:54.950 --> 00:17:54.960 align:start position:0%
less than zero so it's gone too far to
 

00:17:54.960 --> 00:17:55.830 align:start position:0%
less than zero so it's gone too far to
the<00:17:55.280><c> left</c>

00:17:55.830 --> 00:17:55.840 align:start position:0%
the left
 

00:17:55.840 --> 00:17:58.710 align:start position:0%
the left
so<00:17:56.080><c> if</c><00:17:56.320><c> j</c><00:17:56.640><c> is</c><00:17:57.200><c> greater</c><00:17:57.440><c> than</c><00:17:57.600><c> or</c><00:17:57.679><c> equal</c><00:17:57.919><c> to</c><00:17:58.080><c> zero</c>

00:17:58.710 --> 00:17:58.720 align:start position:0%
so if j is greater than or equal to zero
 

00:17:58.720 --> 00:17:59.990 align:start position:0%
so if j is greater than or equal to zero
leave<00:17:58.960><c> it</c><00:17:59.120><c> as</c><00:17:59.280><c> it</c><00:17:59.440><c> is</c>

00:17:59.990 --> 00:18:00.000 align:start position:0%
leave it as it is
 

00:18:00.000 --> 00:18:03.990 align:start position:0%
leave it as it is
otherwise<00:18:01.200><c> set</c><00:18:01.600><c> this</c><00:18:02.080><c> to</c><00:18:02.480><c> negative</c><00:18:02.960><c> infinity</c>

00:18:03.990 --> 00:18:04.000 align:start position:0%
otherwise set this to negative infinity
 

00:18:04.000 --> 00:18:07.110 align:start position:0%
otherwise set this to negative infinity
and<00:18:04.240><c> what</c><00:18:04.400><c> about</c><00:18:05.039><c> this</c><00:18:05.360><c> value</c><00:18:05.919><c> if</c><00:18:06.320><c> i</c><00:18:06.640><c> plus</c>

00:18:07.110 --> 00:18:07.120 align:start position:0%
and what about this value if i plus
 

00:18:07.120 --> 00:18:09.909 align:start position:0%
and what about this value if i plus
1<00:18:07.520><c> is</c><00:18:07.760><c> out</c><00:18:07.919><c> of</c><00:18:08.000><c> bounds</c><00:18:08.799><c> that</c><00:18:09.039><c> must</c><00:18:09.360><c> mean</c><00:18:09.679><c> we</c>

00:18:09.909 --> 00:18:09.919 align:start position:0%
1 is out of bounds that must mean we
 

00:18:09.919 --> 00:18:10.470 align:start position:0%
1 is out of bounds that must mean we
want

00:18:10.470 --> 00:18:10.480 align:start position:0%
want
 

00:18:10.480 --> 00:18:13.909 align:start position:0%
want
all<00:18:10.880><c> the</c><00:18:11.039><c> values</c><00:18:11.760><c> in</c><00:18:12.080><c> array</c><00:18:12.720><c> a</c><00:18:13.200><c> to</c><00:18:13.440><c> be</c><00:18:13.600><c> a</c><00:18:13.679><c> part</c>

00:18:13.909 --> 00:18:13.919 align:start position:0%
all the values in array a to be a part
 

00:18:13.919 --> 00:18:15.669 align:start position:0%
all the values in array a to be a part
of<00:18:14.080><c> our</c><00:18:14.240><c> left</c><00:18:14.480><c> partition</c><00:18:14.960><c> so</c><00:18:15.120><c> if</c><00:18:15.360><c> i</c>

00:18:15.669 --> 00:18:15.679 align:start position:0%
of our left partition so if i
 

00:18:15.679 --> 00:18:17.990 align:start position:0%
of our left partition so if i
plus<00:18:16.080><c> 1</c><00:18:16.320><c> is</c><00:18:16.480><c> out</c><00:18:16.640><c> of</c><00:18:16.799><c> bounds</c><00:18:17.120><c> the</c><00:18:17.280><c> default</c>

00:18:17.990 --> 00:18:18.000 align:start position:0%
plus 1 is out of bounds the default
 

00:18:18.000 --> 00:18:18.870 align:start position:0%
plus 1 is out of bounds the default
value

00:18:18.870 --> 00:18:18.880 align:start position:0%
value
 

00:18:18.880 --> 00:18:20.470 align:start position:0%
value
that<00:18:19.039><c> means</c><00:18:19.280><c> that</c><00:18:19.440><c> the</c><00:18:19.600><c> default</c><00:18:20.000><c> value</c><00:18:20.400><c> we</c>

00:18:20.470 --> 00:18:20.480 align:start position:0%
that means that the default value we
 

00:18:20.480 --> 00:18:23.510 align:start position:0%
that means that the default value we
want<00:18:20.640><c> to</c><00:18:20.799><c> give</c><00:18:20.960><c> it</c><00:18:21.280><c> is</c><00:18:21.679><c> infinity</c>

00:18:23.510 --> 00:18:23.520 align:start position:0%
want to give it is infinity
 

00:18:23.520 --> 00:18:25.990 align:start position:0%
want to give it is infinity
because<00:18:23.760><c> we've</c><00:18:23.919><c> gone</c><00:18:24.240><c> too</c><00:18:24.559><c> far</c><00:18:24.799><c> to</c><00:18:24.960><c> the</c><00:18:25.280><c> right</c>

00:18:25.990 --> 00:18:26.000 align:start position:0%
because we've gone too far to the right
 

00:18:26.000 --> 00:18:27.350 align:start position:0%
because we've gone too far to the right
and<00:18:26.240><c> otherwise</c><00:18:26.960><c> if</c>

00:18:27.350 --> 00:18:27.360 align:start position:0%
and otherwise if
 

00:18:27.360 --> 00:18:30.470 align:start position:0%
and otherwise if
i<00:18:28.000><c> is</c><00:18:28.720><c> less</c><00:18:29.039><c> than</c><00:18:29.760><c> length</c>

00:18:30.470 --> 00:18:30.480 align:start position:0%
i is less than length
 

00:18:30.480 --> 00:18:34.310 align:start position:0%
i is less than length
of<00:18:31.360><c> a</c><00:18:32.080><c> then</c><00:18:32.640><c> we</c><00:18:32.880><c> will</c><00:18:33.120><c> leave</c><00:18:33.440><c> it</c><00:18:33.600><c> as</c><00:18:33.760><c> it</c><00:18:33.919><c> is</c>

00:18:34.310 --> 00:18:34.320 align:start position:0%
of a then we will leave it as it is
 

00:18:34.320 --> 00:18:36.390 align:start position:0%
of a then we will leave it as it is
or<00:18:34.559><c> i</c><00:18:34.799><c> plus</c><00:18:35.120><c> 1</c><00:18:35.440><c> rather</c><00:18:35.760><c> right</c><00:18:36.000><c> we're</c><00:18:36.160><c> checking</c>

00:18:36.390 --> 00:18:36.400 align:start position:0%
or i plus 1 rather right we're checking
 

00:18:36.400 --> 00:18:37.590 align:start position:0%
or i plus 1 rather right we're checking
if<00:18:36.640><c> i</c><00:18:36.799><c> plus</c><00:18:37.200><c> 1</c>

00:18:37.590 --> 00:18:37.600 align:start position:0%
if i plus 1
 

00:18:37.600 --> 00:18:39.430 align:start position:0%
if i plus 1
is<00:18:38.000><c> out</c><00:18:38.160><c> of</c><00:18:38.240><c> bounds</c><00:18:38.799><c> and</c><00:18:38.960><c> we're</c><00:18:39.120><c> going</c><00:18:39.200><c> to</c><00:18:39.280><c> do</c>

00:18:39.430 --> 00:18:39.440 align:start position:0%
is out of bounds and we're going to do
 

00:18:39.440 --> 00:18:40.870 align:start position:0%
is out of bounds and we're going to do
the<00:18:39.600><c> exact</c><00:18:39.919><c> same</c><00:18:40.160><c> thing</c><00:18:40.559><c> for</c>

00:18:40.870 --> 00:18:40.880 align:start position:0%
the exact same thing for
 

00:18:40.880 --> 00:18:44.789 align:start position:0%
the exact same thing for
b<00:18:41.200><c> so</c><00:18:41.360><c> if</c><00:18:41.520><c> j</c><00:18:41.919><c> plus</c><00:18:42.320><c> 1</c><00:18:43.200><c> is</c><00:18:43.520><c> within</c><00:18:44.160><c> bounds</c>

00:18:44.789 --> 00:18:44.799 align:start position:0%
b so if j plus 1 is within bounds
 

00:18:44.799 --> 00:18:47.909 align:start position:0%
b so if j plus 1 is within bounds
we<00:18:44.960><c> can</c><00:18:45.280><c> leave</c><00:18:45.520><c> it</c><00:18:46.080><c> as</c><00:18:46.320><c> it</c><00:18:46.480><c> is</c><00:18:46.720><c> get</c><00:18:47.039><c> b</c><00:18:47.280><c> of</c><00:18:47.440><c> j</c><00:18:47.679><c> plus</c>

00:18:47.909 --> 00:18:47.919 align:start position:0%
we can leave it as it is get b of j plus
 

00:18:47.919 --> 00:18:48.710 align:start position:0%
we can leave it as it is get b of j plus
1

00:18:48.710 --> 00:18:48.720 align:start position:0%
1
 

00:18:48.720 --> 00:18:51.190 align:start position:0%
1
otherwise<00:18:49.840><c> we're</c><00:18:50.000><c> going</c><00:18:50.160><c> to</c><00:18:50.240><c> set</c><00:18:50.480><c> it</c><00:18:50.720><c> to</c>

00:18:51.190 --> 00:18:51.200 align:start position:0%
otherwise we're going to set it to
 

00:18:51.200 --> 00:18:52.710 align:start position:0%
otherwise we're going to set it to
positive<00:18:51.840><c> infinity</c>

00:18:52.710 --> 00:18:52.720 align:start position:0%
positive infinity
 

00:18:52.720 --> 00:18:55.029 align:start position:0%
positive infinity
so<00:18:52.880><c> now</c><00:18:53.280><c> finally</c><00:18:53.840><c> with</c><00:18:54.160><c> these</c><00:18:54.559><c> you'll</c><00:18:54.880><c> see</c>

00:18:55.029 --> 00:18:55.039 align:start position:0%
so now finally with these you'll see
 

00:18:55.039 --> 00:18:56.630 align:start position:0%
so now finally with these you'll see
that<00:18:55.200><c> we've</c><00:18:55.440><c> actually</c><00:18:55.840><c> just</c><00:18:56.160><c> done</c>

00:18:56.630 --> 00:18:56.640 align:start position:0%
that we've actually just done
 

00:18:56.640 --> 00:18:59.750 align:start position:0%
that we've actually just done
the<00:18:56.799><c> algorithm</c><00:18:57.440><c> now</c><00:18:57.919><c> our</c><00:18:58.240><c> life</c><00:18:58.640><c> is</c><00:18:58.960><c> so</c><00:18:59.200><c> easy</c>

00:18:59.750 --> 00:18:59.760 align:start position:0%
the algorithm now our life is so easy
 

00:18:59.760 --> 00:19:02.950 align:start position:0%
the algorithm now our life is so easy
we<00:18:59.919><c> can</c><00:19:00.240><c> check</c><00:19:00.960><c> if</c><00:19:01.440><c> a</c><00:19:01.919><c> left</c><00:19:02.559><c> is</c>

00:19:02.950 --> 00:19:02.960 align:start position:0%
we can check if a left is
 

00:19:02.960 --> 00:19:06.310 align:start position:0%
we can check if a left is
less<00:19:03.280><c> than</c><00:19:03.520><c> or</c><00:19:03.760><c> equal</c><00:19:04.640><c> to</c><00:19:05.360><c> b</c><00:19:05.919><c> right</c>

00:19:06.310 --> 00:19:06.320 align:start position:0%
less than or equal to b right
 

00:19:06.320 --> 00:19:08.070 align:start position:0%
less than or equal to b right
because<00:19:06.559><c> that's</c><00:19:06.799><c> what</c><00:19:06.960><c> we</c><00:19:07.039><c> were</c><00:19:07.280><c> doing</c><00:19:07.760><c> in</c><00:19:07.919><c> the</c>

00:19:08.070 --> 00:19:08.080 align:start position:0%
because that's what we were doing in the
 

00:19:08.080 --> 00:19:09.350 align:start position:0%
because that's what we were doing in the
picture<00:19:08.480><c> right</c>

00:19:09.350 --> 00:19:09.360 align:start position:0%
picture right
 

00:19:09.360 --> 00:19:12.789 align:start position:0%
picture right
if<00:19:09.520><c> that's</c><00:19:09.840><c> true</c><00:19:10.400><c> and</c><00:19:10.880><c> if</c><00:19:11.440><c> b</c><00:19:11.840><c> left</c>

00:19:12.789 --> 00:19:12.799 align:start position:0%
if that's true and if b left
 

00:19:12.799 --> 00:19:16.070 align:start position:0%
if that's true and if b left
is<00:19:13.120><c> less</c><00:19:13.360><c> than</c><00:19:13.600><c> or</c><00:19:13.760><c> equal</c><00:19:14.400><c> to</c><00:19:14.799><c> a</c><00:19:15.280><c> right</c>

00:19:16.070 --> 00:19:16.080 align:start position:0%
is less than or equal to a right
 

00:19:16.080 --> 00:19:19.510 align:start position:0%
is less than or equal to a right
that<00:19:16.400><c> means</c><00:19:16.720><c> our</c><00:19:17.039><c> left</c><00:19:17.360><c> partition</c><00:19:18.240><c> is</c><00:19:18.559><c> correct</c>

00:19:19.510 --> 00:19:19.520 align:start position:0%
that means our left partition is correct
 

00:19:19.520 --> 00:19:21.350 align:start position:0%
that means our left partition is correct
so<00:19:19.679><c> we</c><00:19:20.000><c> found</c><00:19:20.240><c> the</c><00:19:20.480><c> median</c><00:19:20.799><c> but</c><00:19:21.039><c> remember</c>

00:19:21.350 --> 00:19:21.360 align:start position:0%
so we found the median but remember
 

00:19:21.360 --> 00:19:22.549 align:start position:0%
so we found the median but remember
there's<00:19:21.679><c> two</c><00:19:21.919><c> cases</c>

00:19:22.549 --> 00:19:22.559 align:start position:0%
there's two cases
 

00:19:22.559 --> 00:19:24.470 align:start position:0%
there's two cases
there's<00:19:22.880><c> one</c><00:19:23.200><c> case</c><00:19:23.440><c> that</c><00:19:23.600><c> we</c><00:19:23.679><c> have</c><00:19:23.919><c> an</c><00:19:24.080><c> odd</c>

00:19:24.470 --> 00:19:24.480 align:start position:0%
there's one case that we have an odd
 

00:19:24.480 --> 00:19:26.310 align:start position:0%
there's one case that we have an odd
number<00:19:24.799><c> of</c><00:19:24.960><c> elements</c><00:19:25.520><c> so</c><00:19:25.760><c> how</c><00:19:25.919><c> do</c><00:19:26.000><c> we</c><00:19:26.080><c> know</c><00:19:26.240><c> if</c>

00:19:26.310 --> 00:19:26.320 align:start position:0%
number of elements so how do we know if
 

00:19:26.320 --> 00:19:28.070 align:start position:0%
number of elements so how do we know if
we<00:19:26.480><c> have</c><00:19:26.640><c> an</c><00:19:26.799><c> odd</c><00:19:27.039><c> number</c><00:19:27.360><c> we</c><00:19:27.520><c> can</c><00:19:27.679><c> take</c><00:19:27.840><c> the</c>

00:19:28.070 --> 00:19:28.080 align:start position:0%
we have an odd number we can take the
 

00:19:28.080 --> 00:19:29.190 align:start position:0%
we have an odd number we can take the
total<00:19:28.480><c> number</c>

00:19:29.190 --> 00:19:29.200 align:start position:0%
total number
 

00:19:29.200 --> 00:19:32.630 align:start position:0%
total number
mod<00:19:29.520><c> it</c><00:19:29.679><c> by</c><00:19:30.000><c> two</c><00:19:30.559><c> if</c><00:19:30.720><c> this</c><00:19:31.039><c> equals</c><00:19:31.919><c> one</c>

00:19:32.630 --> 00:19:32.640 align:start position:0%
mod it by two if this equals one
 

00:19:32.640 --> 00:19:35.669 align:start position:0%
mod it by two if this equals one
then<00:19:33.120><c> we</c><00:19:33.280><c> have</c><00:19:33.520><c> to</c><00:19:34.160><c> compute</c><00:19:34.559><c> the</c><00:19:34.799><c> median</c>

00:19:35.669 --> 00:19:35.679 align:start position:0%
then we have to compute the median
 

00:19:35.679 --> 00:19:38.630 align:start position:0%
then we have to compute the median
odd<00:19:36.160><c> so</c><00:19:37.120><c> if</c><00:19:37.200><c> you</c><00:19:37.440><c> remember</c><00:19:37.840><c> from</c><00:19:38.080><c> the</c><00:19:38.160><c> picture</c>

00:19:38.630 --> 00:19:38.640 align:start position:0%
odd so if you remember from the picture
 

00:19:38.640 --> 00:19:40.470 align:start position:0%
odd so if you remember from the picture
we<00:19:38.799><c> can</c><00:19:39.039><c> get</c><00:19:39.280><c> that</c><00:19:39.520><c> by</c><00:19:39.760><c> taking</c>

00:19:40.470 --> 00:19:40.480 align:start position:0%
we can get that by taking
 

00:19:40.480 --> 00:19:43.830 align:start position:0%
we can get that by taking
the<00:19:40.880><c> minimum</c><00:19:41.760><c> of</c><00:19:42.400><c> a</c><00:19:42.799><c> right</c>

00:19:43.830 --> 00:19:43.840 align:start position:0%
the minimum of a right
 

00:19:43.840 --> 00:19:46.470 align:start position:0%
the minimum of a right
and<00:19:44.720><c> b</c><00:19:45.039><c> right</c><00:19:45.360><c> we</c><00:19:45.520><c> can</c><00:19:45.600><c> take</c><00:19:45.760><c> the</c><00:19:45.919><c> minimum</c><00:19:46.400><c> of</c>

00:19:46.470 --> 00:19:46.480 align:start position:0%
and b right we can take the minimum of
 

00:19:46.480 --> 00:19:47.909 align:start position:0%
and b right we can take the minimum of
these<00:19:46.799><c> two</c><00:19:46.960><c> values</c>

00:19:47.909 --> 00:19:47.919 align:start position:0%
these two values
 

00:19:47.919 --> 00:19:50.789 align:start position:0%
these two values
and<00:19:48.320><c> return</c><00:19:48.799><c> it</c><00:19:49.360><c> notice</c><00:19:49.760><c> how</c><00:19:50.000><c> if</c><00:19:50.240><c> one</c><00:19:50.480><c> of</c><00:19:50.559><c> these</c>

00:19:50.789 --> 00:19:50.799 align:start position:0%
and return it notice how if one of these
 

00:19:50.799 --> 00:19:51.350 align:start position:0%
and return it notice how if one of these
values

00:19:51.350 --> 00:19:51.360 align:start position:0%
values
 

00:19:51.360 --> 00:19:54.070 align:start position:0%
values
is<00:19:51.600><c> an</c><00:19:51.840><c> actual</c><00:19:52.240><c> real</c><00:19:52.559><c> number</c><00:19:53.200><c> let's</c><00:19:53.440><c> say</c><00:19:53.679><c> four</c>

00:19:54.070 --> 00:19:54.080 align:start position:0%
is an actual real number let's say four
 

00:19:54.080 --> 00:19:54.950 align:start position:0%
is an actual real number let's say four
and<00:19:54.320><c> one</c><00:19:54.480><c> of</c><00:19:54.640><c> them</c>

00:19:54.950 --> 00:19:54.960 align:start position:0%
and one of them
 

00:19:54.960 --> 00:19:57.430 align:start position:0%
and one of them
is<00:19:55.200><c> positive</c><00:19:55.919><c> infinity</c><00:19:56.880><c> we're</c><00:19:57.039><c> going</c><00:19:57.200><c> to</c><00:19:57.280><c> take</c>

00:19:57.430 --> 00:19:57.440 align:start position:0%
is positive infinity we're going to take
 

00:19:57.440 --> 00:19:58.870 align:start position:0%
is positive infinity we're going to take
the<00:19:57.600><c> minimum</c><00:19:58.000><c> of</c><00:19:58.080><c> these</c><00:19:58.320><c> two</c><00:19:58.480><c> so</c><00:19:58.640><c> we're</c><00:19:58.799><c> going</c>

00:19:58.870 --> 00:19:58.880 align:start position:0%
the minimum of these two so we're going
 

00:19:58.880 --> 00:19:59.990 align:start position:0%
the minimum of these two so we're going
to<00:19:58.960><c> end</c><00:19:59.120><c> up</c><00:19:59.280><c> returning</c>

00:19:59.990 --> 00:20:00.000 align:start position:0%
to end up returning
 

00:20:00.000 --> 00:20:03.350 align:start position:0%
to end up returning
4.<00:20:00.880><c> now</c><00:20:01.200><c> both</c><00:20:01.520><c> of</c><00:20:01.679><c> these</c><00:20:02.159><c> will</c><00:20:02.480><c> never</c><00:20:02.960><c> be</c>

00:20:03.350 --> 00:20:03.360 align:start position:0%
4. now both of these will never be
 

00:20:03.360 --> 00:20:05.029 align:start position:0%
4. now both of these will never be
infinity<00:20:04.000><c> you</c><00:20:04.159><c> can</c><00:20:04.400><c> run</c><00:20:04.559><c> through</c><00:20:04.799><c> some</c>

00:20:05.029 --> 00:20:05.039 align:start position:0%
infinity you can run through some
 

00:20:05.039 --> 00:20:07.590 align:start position:0%
infinity you can run through some
examples<00:20:05.600><c> to</c><00:20:05.919><c> prove</c><00:20:06.240><c> that</c><00:20:06.480><c> to</c><00:20:06.640><c> yourself</c>

00:20:07.590 --> 00:20:07.600 align:start position:0%
examples to prove that to yourself
 

00:20:07.600 --> 00:20:10.230 align:start position:0%
examples to prove that to yourself
and<00:20:07.840><c> if</c><00:20:08.000><c> it's</c><00:20:08.240><c> not</c><00:20:08.559><c> odd</c><00:20:08.880><c> that</c><00:20:09.120><c> means</c><00:20:09.520><c> it's</c><00:20:09.840><c> even</c>

00:20:10.230 --> 00:20:10.240 align:start position:0%
and if it's not odd that means it's even
 

00:20:10.240 --> 00:20:10.789 align:start position:0%
and if it's not odd that means it's even
length

00:20:10.789 --> 00:20:10.799 align:start position:0%
length
 

00:20:10.799 --> 00:20:13.029 align:start position:0%
length
so<00:20:11.120><c> how</c><00:20:11.280><c> can</c><00:20:11.440><c> we</c><00:20:11.600><c> get</c><00:20:11.919><c> the</c><00:20:12.159><c> median</c><00:20:12.640><c> in</c><00:20:12.799><c> that</c>

00:20:13.029 --> 00:20:13.039 align:start position:0%
so how can we get the median in that
 

00:20:13.039 --> 00:20:13.830 align:start position:0%
so how can we get the median in that
case

00:20:13.830 --> 00:20:13.840 align:start position:0%
case
 

00:20:13.840 --> 00:20:17.029 align:start position:0%
case
well<00:20:14.080><c> we</c><00:20:14.320><c> take</c><00:20:14.960><c> the</c><00:20:15.360><c> max</c><00:20:16.240><c> of</c>

00:20:17.029 --> 00:20:17.039 align:start position:0%
well we take the max of
 

00:20:17.039 --> 00:20:20.149 align:start position:0%
well we take the max of
a<00:20:17.360><c> left</c><00:20:18.159><c> and</c><00:20:18.480><c> b</c><00:20:18.799><c> left</c><00:20:19.360><c> just</c><00:20:19.520><c> like</c><00:20:19.679><c> we</c><00:20:19.840><c> did</c><00:20:20.080><c> in</c>

00:20:20.149 --> 00:20:20.159 align:start position:0%
a left and b left just like we did in
 

00:20:20.159 --> 00:20:21.029 align:start position:0%
a left and b left just like we did in
the<00:20:20.320><c> picture</c>

00:20:21.029 --> 00:20:21.039 align:start position:0%
the picture
 

00:20:21.039 --> 00:20:24.070 align:start position:0%
the picture
we<00:20:21.360><c> add</c><00:20:21.600><c> that</c><00:20:21.919><c> to</c><00:20:22.159><c> the</c><00:20:22.480><c> minimum</c><00:20:23.360><c> of</c>

00:20:24.070 --> 00:20:24.080 align:start position:0%
we add that to the minimum of
 

00:20:24.080 --> 00:20:27.430 align:start position:0%
we add that to the minimum of
a<00:20:24.400><c> right</c><00:20:25.360><c> and</c><00:20:25.840><c> b</c><00:20:26.159><c> right</c><00:20:26.799><c> so</c><00:20:27.039><c> these</c><00:20:27.280><c> are</c><00:20:27.360><c> going</c>

00:20:27.430 --> 00:20:27.440 align:start position:0%
a right and b right so these are going
 

00:20:27.440 --> 00:20:28.310 align:start position:0%
a right and b right so these are going
to<00:20:27.520><c> be</c><00:20:27.600><c> the</c><00:20:27.840><c> two</c>

00:20:28.310 --> 00:20:28.320 align:start position:0%
to be the two
 

00:20:28.320 --> 00:20:31.110 align:start position:0%
to be the two
values<00:20:28.799><c> in</c><00:20:28.960><c> the</c><00:20:29.039><c> middle</c><00:20:29.520><c> and</c><00:20:29.840><c> we</c><00:20:30.080><c> can</c><00:20:30.640><c> divide</c>

00:20:31.110 --> 00:20:31.120 align:start position:0%
values in the middle and we can divide
 

00:20:31.120 --> 00:20:31.750 align:start position:0%
values in the middle and we can divide
them

00:20:31.750 --> 00:20:31.760 align:start position:0%
them
 

00:20:31.760 --> 00:20:34.710 align:start position:0%
them
by<00:20:32.400><c> two</c><00:20:32.960><c> we</c><00:20:33.120><c> want</c><00:20:33.440><c> decimal</c><00:20:33.919><c> division</c><00:20:34.400><c> in</c><00:20:34.480><c> this</c>

00:20:34.710 --> 00:20:34.720 align:start position:0%
by two we want decimal division in this
 

00:20:34.720 --> 00:20:35.350 align:start position:0%
by two we want decimal division in this
case

00:20:35.350 --> 00:20:35.360 align:start position:0%
case
 

00:20:35.360 --> 00:20:38.310 align:start position:0%
case
and<00:20:35.520><c> then</c><00:20:35.679><c> we</c><00:20:35.840><c> can</c><00:20:36.000><c> return</c><00:20:36.400><c> that</c><00:20:36.720><c> value</c><00:20:37.520><c> so</c><00:20:37.840><c> now</c>

00:20:38.310 --> 00:20:38.320 align:start position:0%
and then we can return that value so now
 

00:20:38.320 --> 00:20:39.590 align:start position:0%
and then we can return that value so now
in<00:20:38.559><c> the</c><00:20:38.799><c> case</c><00:20:39.120><c> that</c><00:20:39.280><c> we</c>

00:20:39.590 --> 00:20:39.600 align:start position:0%
in the case that we
 

00:20:39.600 --> 00:20:41.590 align:start position:0%
in the case that we
don't<00:20:40.000><c> find</c><00:20:40.240><c> the</c><00:20:40.400><c> median</c><00:20:40.960><c> it</c><00:20:41.120><c> could</c><00:20:41.280><c> be</c>

00:20:41.590 --> 00:20:41.600 align:start position:0%
don't find the median it could be
 

00:20:41.600 --> 00:20:42.789 align:start position:0%
don't find the median it could be
possible<00:20:42.159><c> that</c><00:20:42.480><c> a</c>

00:20:42.789 --> 00:20:42.799 align:start position:0%
possible that a
 

00:20:42.799 --> 00:20:46.149 align:start position:0%
possible that a
left<00:20:43.600><c> is</c><00:20:44.240><c> greater</c><00:20:44.880><c> than</c><00:20:45.760><c> b</c>

00:20:46.149 --> 00:20:46.159 align:start position:0%
left is greater than b
 

00:20:46.159 --> 00:20:48.950 align:start position:0%
left is greater than b
right<00:20:46.799><c> like</c><00:20:47.039><c> that's</c><00:20:47.440><c> a</c><00:20:47.679><c> possibility</c><00:20:48.480><c> right</c>

00:20:48.950 --> 00:20:48.960 align:start position:0%
right like that's a possibility right
 

00:20:48.960 --> 00:20:50.070 align:start position:0%
right like that's a possibility right
and<00:20:49.200><c> in</c><00:20:49.440><c> that</c><00:20:49.679><c> case</c>

00:20:50.070 --> 00:20:50.080 align:start position:0%
and in that case
 

00:20:50.080 --> 00:20:52.230 align:start position:0%
and in that case
basically<00:20:50.559><c> that</c><00:20:50.720><c> tells</c><00:20:51.039><c> us</c><00:20:51.200><c> that</c><00:20:51.440><c> a</c><00:20:51.679><c> left</c><00:20:52.000><c> is</c>

00:20:52.230 --> 00:20:52.240 align:start position:0%
basically that tells us that a left is
 

00:20:52.240 --> 00:20:53.510 align:start position:0%
basically that tells us that a left is
too<00:20:52.480><c> big</c><00:20:52.720><c> so</c><00:20:52.960><c> we</c><00:20:53.120><c> have</c>

00:20:53.510 --> 00:20:53.520 align:start position:0%
too big so we have
 

00:20:53.520 --> 00:20:55.669 align:start position:0%
too big so we have
too<00:20:53.840><c> many</c><00:20:54.320><c> elements</c><00:20:54.799><c> from</c><00:20:55.120><c> a</c><00:20:55.280><c> so</c><00:20:55.440><c> we're</c><00:20:55.600><c> going</c>

00:20:55.669 --> 00:20:55.679 align:start position:0%
too many elements from a so we're going
 

00:20:55.679 --> 00:20:57.430 align:start position:0%
too many elements from a so we're going
to<00:20:55.840><c> reduce</c><00:20:56.400><c> the</c><00:20:56.640><c> size</c><00:20:56.960><c> of</c><00:20:57.120><c> a</c>

00:20:57.430 --> 00:20:57.440 align:start position:0%
to reduce the size of a
 

00:20:57.440 --> 00:20:59.750 align:start position:0%
to reduce the size of a
so<00:20:57.679><c> what</c><00:20:57.919><c> we</c><00:20:58.080><c> can</c><00:20:58.240><c> do</c><00:20:58.559><c> is</c><00:20:58.799><c> take</c><00:20:59.120><c> our</c><00:20:59.440><c> right</c>

00:20:59.750 --> 00:20:59.760 align:start position:0%
so what we can do is take our right
 

00:20:59.760 --> 00:21:00.549 align:start position:0%
so what we can do is take our right
pointer

00:21:00.549 --> 00:21:00.559 align:start position:0%
pointer
 

00:21:00.559 --> 00:21:03.909 align:start position:0%
pointer
and<00:21:01.200><c> shift</c><00:21:01.600><c> it</c><00:21:02.000><c> to</c><00:21:02.400><c> i</c><00:21:02.799><c> minus</c><00:21:03.360><c> one</c><00:21:03.600><c> so</c><00:21:03.760><c> we're</c>

00:21:03.909 --> 00:21:03.919 align:start position:0%
and shift it to i minus one so we're
 

00:21:03.919 --> 00:21:06.870 align:start position:0%
and shift it to i minus one so we're
reducing<00:21:04.720><c> the</c><00:21:04.880><c> size</c><00:21:05.280><c> of</c><00:21:05.360><c> the</c><00:21:05.600><c> left</c><00:21:05.919><c> partition</c>

00:21:06.870 --> 00:21:06.880 align:start position:0%
reducing the size of the left partition
 

00:21:06.880 --> 00:21:10.390 align:start position:0%
reducing the size of the left partition
from<00:21:07.360><c> a</c><00:21:07.919><c> and</c><00:21:08.320><c> the</c><00:21:08.640><c> third</c><00:21:09.200><c> case</c><00:21:09.760><c> is</c><00:21:09.919><c> just</c><00:21:10.159><c> the</c>

00:21:10.390 --> 00:21:10.400 align:start position:0%
from a and the third case is just the
 

00:21:10.400 --> 00:21:11.270 align:start position:0%
from a and the third case is just the
else<00:21:10.720><c> case</c>

00:21:11.270 --> 00:21:11.280 align:start position:0%
else case
 

00:21:11.280 --> 00:21:13.750 align:start position:0%
else case
where<00:21:11.600><c> it</c><00:21:11.679><c> would</c><00:21:11.919><c> be</c><00:21:12.240><c> that</c><00:21:13.039><c> this</c><00:21:13.280><c> condition</c>

00:21:13.750 --> 00:21:13.760 align:start position:0%
where it would be that this condition
 

00:21:13.760 --> 00:21:14.630 align:start position:0%
where it would be that this condition
was<00:21:14.000><c> not</c><00:21:14.240><c> true</c>

00:21:14.630 --> 00:21:14.640 align:start position:0%
was not true
 

00:21:14.640 --> 00:21:16.470 align:start position:0%
was not true
in<00:21:14.720><c> that</c><00:21:14.960><c> case</c><00:21:15.200><c> we</c><00:21:15.360><c> would</c><00:21:15.520><c> need</c><00:21:15.679><c> to</c><00:21:16.000><c> increase</c>

00:21:16.470 --> 00:21:16.480 align:start position:0%
in that case we would need to increase
 

00:21:16.480 --> 00:21:18.549 align:start position:0%
in that case we would need to increase
the<00:21:16.640><c> size</c><00:21:16.960><c> of</c><00:21:17.120><c> our</c><00:21:17.280><c> left</c><00:21:17.520><c> partition</c><00:21:18.000><c> from</c><00:21:18.240><c> a</c>

00:21:18.549 --> 00:21:18.559 align:start position:0%
the size of our left partition from a
 

00:21:18.559 --> 00:21:21.990 align:start position:0%
the size of our left partition from a
so<00:21:18.799><c> we</c><00:21:18.960><c> would</c><00:21:19.280><c> say</c><00:21:19.919><c> left</c><00:21:20.400><c> is</c><00:21:20.799><c> equal</c><00:21:21.520><c> to</c>

00:21:21.990 --> 00:21:22.000 align:start position:0%
so we would say left is equal to
 

00:21:22.000 --> 00:21:25.750 align:start position:0%
so we would say left is equal to
i<00:21:22.480><c> plus</c><00:21:23.120><c> 1.</c><00:21:23.760><c> and</c><00:21:24.159><c> that's</c><00:21:24.559><c> actually</c><00:21:24.960><c> the</c><00:21:25.200><c> entire</c>

00:21:25.750 --> 00:21:25.760 align:start position:0%
i plus 1. and that's actually the entire
 

00:21:25.760 --> 00:21:28.070 align:start position:0%
i plus 1. and that's actually the entire
code<00:21:26.159><c> so</c><00:21:26.400><c> we</c><00:21:26.480><c> don't</c><00:21:26.720><c> need</c><00:21:27.039><c> a</c><00:21:27.280><c> return</c><00:21:27.679><c> statement</c>

00:21:28.070 --> 00:21:28.080 align:start position:0%
code so we don't need a return statement
 

00:21:28.080 --> 00:21:29.510 align:start position:0%
code so we don't need a return statement
outside<00:21:28.559><c> because</c><00:21:28.799><c> we</c><00:21:29.039><c> know</c>

00:21:29.510 --> 00:21:29.520 align:start position:0%
outside because we know
 

00:21:29.520 --> 00:21:31.430 align:start position:0%
outside because we know
that<00:21:29.760><c> our</c><00:21:30.000><c> loop</c><00:21:30.320><c> is</c><00:21:30.480><c> eventually</c><00:21:31.039><c> going</c><00:21:31.200><c> to</c>

00:21:31.430 --> 00:21:31.440 align:start position:0%
that our loop is eventually going to
 

00:21:31.440 --> 00:21:33.669 align:start position:0%
that our loop is eventually going to
find<00:21:31.840><c> a</c><00:21:32.000><c> median</c><00:21:32.480><c> and</c><00:21:32.640><c> we're</c><00:21:32.880><c> going</c><00:21:33.039><c> to</c><00:21:33.200><c> return</c>

00:21:33.669 --> 00:21:33.679 align:start position:0%
find a median and we're going to return
 

00:21:33.679 --> 00:21:34.789 align:start position:0%
find a median and we're going to return
it<00:21:33.760><c> whether</c><00:21:34.080><c> it's</c><00:21:34.240><c> odd</c>

00:21:34.789 --> 00:21:34.799 align:start position:0%
it whether it's odd
 

00:21:34.799 --> 00:21:37.590 align:start position:0%
it whether it's odd
or<00:21:35.039><c> whether</c><00:21:35.360><c> it's</c><00:21:35.600><c> even</c><00:21:36.720><c> so</c><00:21:36.880><c> you</c><00:21:37.039><c> can</c><00:21:37.200><c> see</c><00:21:37.440><c> we</c>

00:21:37.590 --> 00:21:37.600 align:start position:0%
or whether it's even so you can see we
 

00:21:37.600 --> 00:21:39.990 align:start position:0%
or whether it's even so you can see we
did<00:21:37.760><c> this</c><00:21:38.000><c> in</c><00:21:38.080><c> about</c><00:21:38.400><c> 30</c><00:21:38.799><c> lines</c><00:21:39.200><c> of</c><00:21:39.360><c> code</c>

00:21:39.990 --> 00:21:40.000 align:start position:0%
did this in about 30 lines of code
 

00:21:40.000 --> 00:21:41.590 align:start position:0%
did this in about 30 lines of code
and<00:21:40.240><c> it</c><00:21:40.400><c> would</c><00:21:40.559><c> probably</c><00:21:40.799><c> be</c><00:21:41.039><c> less</c><00:21:41.280><c> if</c><00:21:41.440><c> i</c>

00:21:41.590 --> 00:21:41.600 align:start position:0%
and it would probably be less if i
 

00:21:41.600 --> 00:21:43.190 align:start position:0%
and it would probably be less if i
removed<00:21:42.000><c> some</c><00:21:42.159><c> of</c><00:21:42.320><c> the</c><00:21:42.400><c> spaces</c><00:21:42.960><c> in</c><00:21:43.039><c> the</c>

00:21:43.190 --> 00:21:43.200 align:start position:0%
removed some of the spaces in the
 

00:21:43.200 --> 00:21:44.070 align:start position:0%
removed some of the spaces in the
comments

00:21:44.070 --> 00:21:44.080 align:start position:0%
comments
 

00:21:44.080 --> 00:21:46.390 align:start position:0%
comments
and<00:21:44.320><c> the</c><00:21:44.480><c> time</c><00:21:44.799><c> complexity</c><00:21:45.600><c> is</c><00:21:45.760><c> basically</c>

00:21:46.390 --> 00:21:46.400 align:start position:0%
and the time complexity is basically
 

00:21:46.400 --> 00:21:47.669 align:start position:0%
and the time complexity is basically
going<00:21:46.640><c> to</c><00:21:46.799><c> be</c>

00:21:47.669 --> 00:21:47.679 align:start position:0%
going to be
 

00:21:47.679 --> 00:21:51.430 align:start position:0%
going to be
log<00:21:48.320><c> of</c><00:21:48.640><c> the</c><00:21:48.960><c> minimum</c><00:21:49.679><c> of</c><00:21:50.240><c> n</c>

00:21:51.430 --> 00:21:51.440 align:start position:0%
log of the minimum of n
 

00:21:51.440 --> 00:21:53.990 align:start position:0%
log of the minimum of n
of<00:21:51.760><c> n</c><00:21:52.159><c> or</c><00:21:52.559><c> m</c><00:21:52.880><c> because</c><00:21:53.120><c> we're</c><00:21:53.280><c> running</c><00:21:53.600><c> binary</c>

00:21:53.990 --> 00:21:54.000 align:start position:0%
of n or m because we're running binary
 

00:21:54.000 --> 00:21:56.470 align:start position:0%
of n or m because we're running binary
search<00:21:54.400><c> on</c><00:21:54.559><c> the</c><00:21:54.799><c> smaller</c><00:21:55.440><c> of</c><00:21:55.679><c> the</c><00:21:55.840><c> two</c>

00:21:56.470 --> 00:21:56.480 align:start position:0%
search on the smaller of the two
 

00:21:56.480 --> 00:21:58.230 align:start position:0%
search on the smaller of the two
and<00:21:56.720><c> as</c><00:21:56.960><c> you</c><00:21:57.039><c> can</c><00:21:57.200><c> see</c><00:21:57.600><c> it's</c><00:21:57.760><c> a</c><00:21:57.919><c> pretty</c>

00:21:58.230 --> 00:21:58.240 align:start position:0%
and as you can see it's a pretty
 

00:21:58.240 --> 00:21:59.909 align:start position:0%
and as you can see it's a pretty
efficient<00:21:58.640><c> solution</c>

00:21:59.909 --> 00:21:59.919 align:start position:0%
efficient solution
 

00:21:59.919 --> 00:22:02.070 align:start position:0%
efficient solution
and<00:22:00.159><c> i</c><00:22:00.320><c> really</c><00:22:00.559><c> hope</c><00:22:00.799><c> that</c><00:22:00.880><c> this</c><00:22:01.120><c> was</c><00:22:01.280><c> helpful</c>

00:22:02.070 --> 00:22:02.080 align:start position:0%
and i really hope that this was helpful
 

00:22:02.080 --> 00:22:03.270 align:start position:0%
and i really hope that this was helpful
to<00:22:02.400><c> understand</c>

00:22:03.270 --> 00:22:03.280 align:start position:0%
to understand
 

00:22:03.280 --> 00:22:05.190 align:start position:0%
to understand
like<00:22:03.600><c> the</c><00:22:03.840><c> big</c><00:22:04.080><c> picture</c><00:22:04.480><c> it's</c><00:22:04.640><c> a</c><00:22:04.720><c> difficult</c>

00:22:05.190 --> 00:22:05.200 align:start position:0%
like the big picture it's a difficult
 

00:22:05.200 --> 00:22:06.870 align:start position:0%
like the big picture it's a difficult
problem<00:22:05.840><c> i</c><00:22:06.000><c> probably</c><00:22:06.240><c> wouldn't</c><00:22:06.480><c> be</c><00:22:06.640><c> able</c><00:22:06.720><c> to</c>

00:22:06.870 --> 00:22:06.880 align:start position:0%
problem i probably wouldn't be able to
 

00:22:06.880 --> 00:22:08.710 align:start position:0%
problem i probably wouldn't be able to
figure<00:22:07.120><c> this</c><00:22:07.360><c> out</c><00:22:07.600><c> on</c><00:22:07.679><c> my</c><00:22:08.000><c> own</c><00:22:08.240><c> but</c><00:22:08.400><c> you</c><00:22:08.559><c> can</c>

00:22:08.710 --> 00:22:08.720 align:start position:0%
figure this out on my own but you can
 

00:22:08.720 --> 00:22:09.270 align:start position:0%
figure this out on my own but you can
see<00:22:08.960><c> it</c>

00:22:09.270 --> 00:22:09.280 align:start position:0%
see it
 

00:22:09.280 --> 00:22:11.430 align:start position:0%
see it
is<00:22:09.520><c> definitely</c><00:22:10.080><c> understandable</c><00:22:10.960><c> once</c><00:22:11.280><c> you</c>

00:22:11.430 --> 00:22:11.440 align:start position:0%
is definitely understandable once you
 

00:22:11.440 --> 00:22:13.430 align:start position:0%
is definitely understandable once you
know<00:22:11.679><c> some</c><00:22:11.919><c> of</c><00:22:12.080><c> the</c><00:22:12.240><c> tricks</c><00:22:12.720><c> behind</c><00:22:13.120><c> it</c>

00:22:13.430 --> 00:22:13.440 align:start position:0%
know some of the tricks behind it
 

00:22:13.440 --> 00:22:15.029 align:start position:0%
know some of the tricks behind it
don't<00:22:13.600><c> forget</c><00:22:13.919><c> to</c><00:22:14.000><c> like</c><00:22:14.240><c> and</c><00:22:14.320><c> subscribe</c><00:22:14.880><c> if</c>

00:22:15.029 --> 00:22:15.039 align:start position:0%
don't forget to like and subscribe if
 

00:22:15.039 --> 00:22:16.950 align:start position:0%
don't forget to like and subscribe if
this<00:22:15.200><c> was</c><00:22:15.360><c> helpful</c><00:22:15.840><c> it</c><00:22:15.919><c> supports</c><00:22:16.400><c> the</c><00:22:16.559><c> channel</c>

00:22:16.950 --> 00:22:16.960 align:start position:0%
this was helpful it supports the channel
 

00:22:16.960 --> 00:22:18.549 align:start position:0%
this was helpful it supports the channel
a<00:22:17.200><c> lot</c><00:22:17.600><c> and</c><00:22:17.760><c> i'll</c><00:22:17.919><c> hopefully</c>

00:22:18.549 --> 00:22:18.559 align:start position:0%
a lot and i'll hopefully
 

00:22:18.559 --> 00:22:22.880 align:start position:0%
a lot and i'll hopefully
see<00:22:18.720><c> you</c><00:22:18.880><c> pretty</c><00:22:19.880><c> soon</c>

