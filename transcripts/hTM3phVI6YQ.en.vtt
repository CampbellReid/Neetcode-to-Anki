WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:01.750 align:start position:0%
 
everyone<00:00:00.560><c> welcome</c><00:00:01.040><c> back</c><00:00:01.199><c> and</c><00:00:01.360><c> let's</c><00:00:01.599><c> write</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
everyone welcome back and let's write
 

00:00:01.760 --> 00:00:03.669 align:start position:0%
everyone welcome back and let's write
some<00:00:01.920><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.639><c> today</c><00:00:02.960><c> so</c><00:00:03.120><c> today</c><00:00:03.439><c> let's</c>

00:00:03.669 --> 00:00:03.679 align:start position:0%
some more neat code today so today let's
 

00:00:03.679 --> 00:00:06.309 align:start position:0%
some more neat code today so today let's
solve<00:00:04.000><c> maximum</c><00:00:04.640><c> depth</c><00:00:04.960><c> of</c><00:00:05.120><c> a</c><00:00:05.200><c> binary</c><00:00:05.759><c> tree</c>

00:00:06.309 --> 00:00:06.319 align:start position:0%
solve maximum depth of a binary tree
 

00:00:06.319 --> 00:00:07.829 align:start position:0%
solve maximum depth of a binary tree
and<00:00:06.480><c> the</c><00:00:06.560><c> main</c><00:00:06.799><c> reason</c><00:00:07.040><c> i'm</c><00:00:07.200><c> solving</c><00:00:07.600><c> this</c>

00:00:07.829 --> 00:00:07.839 align:start position:0%
and the main reason i'm solving this
 

00:00:07.839 --> 00:00:09.910 align:start position:0%
and the main reason i'm solving this
today<00:00:08.240><c> is</c><00:00:08.400><c> just</c><00:00:08.559><c> for</c><00:00:08.720><c> the</c><00:00:08.880><c> sake</c><00:00:09.120><c> of</c><00:00:09.280><c> completion</c>

00:00:09.910 --> 00:00:09.920 align:start position:0%
today is just for the sake of completion
 

00:00:09.920 --> 00:00:11.749 align:start position:0%
today is just for the sake of completion
we<00:00:10.080><c> have</c><00:00:10.240><c> solved</c><00:00:10.559><c> harder</c><00:00:10.960><c> tree</c><00:00:11.280><c> problems</c>

00:00:11.749 --> 00:00:11.759 align:start position:0%
we have solved harder tree problems
 

00:00:11.759 --> 00:00:12.549 align:start position:0%
we have solved harder tree problems
before

00:00:12.549 --> 00:00:12.559 align:start position:0%
before
 

00:00:12.559 --> 00:00:15.509 align:start position:0%
before
but<00:00:12.880><c> this</c><00:00:13.120><c> one</c><00:00:13.759><c> is</c><00:00:14.000><c> on</c><00:00:14.160><c> the</c><00:00:14.320><c> blind</c><00:00:14.719><c> 75</c><00:00:15.200><c> list</c><00:00:15.360><c> so</c>

00:00:15.509 --> 00:00:15.519 align:start position:0%
but this one is on the blind 75 list so
 

00:00:15.519 --> 00:00:17.029 align:start position:0%
but this one is on the blind 75 list so
i<00:00:15.599><c> do</c><00:00:15.759><c> want</c><00:00:15.920><c> to</c><00:00:16.000><c> solve</c><00:00:16.240><c> this</c><00:00:16.480><c> problem</c>

00:00:17.029 --> 00:00:17.039 align:start position:0%
i do want to solve this problem
 

00:00:17.039 --> 00:00:18.950 align:start position:0%
i do want to solve this problem
today<00:00:17.600><c> and</c><00:00:17.840><c> this</c><00:00:18.000><c> problem</c><00:00:18.400><c> actually</c><00:00:18.640><c> has</c>

00:00:18.950 --> 00:00:18.960 align:start position:0%
today and this problem actually has
 

00:00:18.960 --> 00:00:20.790 align:start position:0%
today and this problem actually has
multiple<00:00:19.439><c> ways</c><00:00:19.680><c> to</c><00:00:19.840><c> solve</c><00:00:20.080><c> it</c><00:00:20.160><c> so</c><00:00:20.320><c> i</c><00:00:20.400><c> do</c><00:00:20.640><c> think</c>

00:00:20.790 --> 00:00:20.800 align:start position:0%
multiple ways to solve it so i do think
 

00:00:20.800 --> 00:00:22.630 align:start position:0%
multiple ways to solve it so i do think
it's<00:00:20.960><c> a</c><00:00:21.039><c> good</c><00:00:21.199><c> problem</c><00:00:21.600><c> to</c><00:00:21.680><c> understand</c><00:00:22.320><c> of</c>

00:00:22.630 --> 00:00:22.640 align:start position:0%
it's a good problem to understand of
 

00:00:22.640 --> 00:00:24.790 align:start position:0%
it's a good problem to understand of
like<00:00:22.800><c> the</c><00:00:22.960><c> fundamentals</c><00:00:23.760><c> on</c><00:00:24.320><c> uh</c><00:00:24.560><c> tree</c>

00:00:24.790 --> 00:00:24.800 align:start position:0%
like the fundamentals on uh tree
 

00:00:24.800 --> 00:00:26.710 align:start position:0%
like the fundamentals on uh tree
traversals<00:00:25.519><c> we</c><00:00:25.680><c> can</c><00:00:25.840><c> do</c><00:00:26.000><c> it</c><00:00:26.240><c> three</c><00:00:26.480><c> different</c>

00:00:26.710 --> 00:00:26.720 align:start position:0%
traversals we can do it three different
 

00:00:26.720 --> 00:00:28.230 align:start position:0%
traversals we can do it three different
ways<00:00:26.960><c> and</c><00:00:27.039><c> i'm</c><00:00:27.199><c> actually</c><00:00:27.439><c> going</c><00:00:27.519><c> to</c><00:00:27.680><c> show</c>

00:00:28.230 --> 00:00:28.240 align:start position:0%
ways and i'm actually going to show
 

00:00:28.240 --> 00:00:29.429 align:start position:0%
ways and i'm actually going to show
the<00:00:28.400><c> three</c><00:00:28.640><c> different</c><00:00:28.880><c> ways</c><00:00:29.119><c> there</c><00:00:29.279><c> might</c>

00:00:29.429 --> 00:00:29.439 align:start position:0%
the three different ways there might
 

00:00:29.439 --> 00:00:30.710 align:start position:0%
the three different ways there might
even<00:00:29.599><c> be</c><00:00:29.760><c> more</c><00:00:30.000><c> than</c><00:00:30.160><c> three</c><00:00:30.400><c> but</c><00:00:30.560><c> i'm</c><00:00:30.640><c> going</c><00:00:30.640><c> to</c>

00:00:30.710 --> 00:00:30.720 align:start position:0%
even be more than three but i'm going to
 

00:00:30.720 --> 00:00:32.389 align:start position:0%
even be more than three but i'm going to
show<00:00:30.880><c> you</c><00:00:31.039><c> the</c><00:00:31.199><c> three</c><00:00:31.519><c> main</c><00:00:31.840><c> ways</c>

00:00:32.389 --> 00:00:32.399 align:start position:0%
show you the three main ways
 

00:00:32.399 --> 00:00:34.950 align:start position:0%
show you the three main ways
basically<00:00:32.880><c> recursive</c><00:00:33.600><c> depth</c><00:00:33.840><c> first</c><00:00:34.160><c> search</c>

00:00:34.950 --> 00:00:34.960 align:start position:0%
basically recursive depth first search
 

00:00:34.960 --> 00:00:36.069 align:start position:0%
basically recursive depth first search
iterative<00:00:35.520><c> depth</c>

00:00:36.069 --> 00:00:36.079 align:start position:0%
iterative depth
 

00:00:36.079 --> 00:00:37.990 align:start position:0%
iterative depth
first<00:00:36.480><c> search</c><00:00:36.960><c> basically</c><00:00:37.440><c> depth</c><00:00:37.760><c> first</c>

00:00:37.990 --> 00:00:38.000 align:start position:0%
first search basically depth first
 

00:00:38.000 --> 00:00:39.990 align:start position:0%
first search basically depth first
search<00:00:38.320><c> without</c><00:00:38.800><c> using</c><00:00:39.120><c> recursion</c>

00:00:39.990 --> 00:00:40.000 align:start position:0%
search without using recursion
 

00:00:40.000 --> 00:00:42.950 align:start position:0%
search without using recursion
and<00:00:40.559><c> of</c><00:00:40.719><c> course</c><00:00:41.280><c> another</c><00:00:41.680><c> way</c><00:00:41.920><c> is</c><00:00:42.000><c> going</c><00:00:42.160><c> to</c><00:00:42.239><c> be</c>

00:00:42.950 --> 00:00:42.960 align:start position:0%
and of course another way is going to be
 

00:00:42.960 --> 00:00:44.310 align:start position:0%
and of course another way is going to be
breadth<00:00:43.280><c> first</c><00:00:43.600><c> search</c>

00:00:44.310 --> 00:00:44.320 align:start position:0%
breadth first search
 

00:00:44.320 --> 00:00:45.750 align:start position:0%
breadth first search
so<00:00:44.559><c> i'm</c><00:00:44.640><c> going</c><00:00:44.719><c> to</c><00:00:44.800><c> be</c><00:00:44.879><c> showing</c><00:00:45.280><c> all</c><00:00:45.520><c> three</c>

00:00:45.750 --> 00:00:45.760 align:start position:0%
so i'm going to be showing all three
 

00:00:45.760 --> 00:00:48.069 align:start position:0%
so i'm going to be showing all three
today<00:00:46.480><c> so</c><00:00:46.719><c> the</c><00:00:46.879><c> problem</c><00:00:47.280><c> is</c><00:00:47.440><c> pretty</c><00:00:47.760><c> simple</c>

00:00:48.069 --> 00:00:48.079 align:start position:0%
today so the problem is pretty simple
 

00:00:48.079 --> 00:00:49.990 align:start position:0%
today so the problem is pretty simple
we're<00:00:48.320><c> given</c><00:00:48.640><c> a</c><00:00:48.800><c> root</c><00:00:49.120><c> binary</c><00:00:49.520><c> tree</c><00:00:49.760><c> and</c><00:00:49.840><c> we</c>

00:00:49.990 --> 00:00:50.000 align:start position:0%
we're given a root binary tree and we
 

00:00:50.000 --> 00:00:52.310 align:start position:0%
we're given a root binary tree and we
want<00:00:50.160><c> to</c><00:00:50.239><c> return</c><00:00:50.719><c> its</c><00:00:51.039><c> maximum</c><00:00:51.760><c> depth</c><00:00:52.079><c> and</c><00:00:52.239><c> the</c>

00:00:52.310 --> 00:00:52.320 align:start position:0%
want to return its maximum depth and the
 

00:00:52.320 --> 00:00:55.270 align:start position:0%
want to return its maximum depth and the
maximum<00:00:52.960><c> depth</c><00:00:53.360><c> is</c><00:00:53.520><c> defined</c><00:00:54.320><c> as</c><00:00:54.640><c> being</c>

00:00:55.270 --> 00:00:55.280 align:start position:0%
maximum depth is defined as being
 

00:00:55.280 --> 00:00:58.310 align:start position:0%
maximum depth is defined as being
the<00:00:55.680><c> longest</c><00:00:56.399><c> path</c><00:00:57.039><c> from</c><00:00:57.280><c> the</c><00:00:57.600><c> root</c>

00:00:58.310 --> 00:00:58.320 align:start position:0%
the longest path from the root
 

00:00:58.320 --> 00:01:01.189 align:start position:0%
the longest path from the root
to<00:00:58.640><c> one</c><00:00:58.879><c> of</c><00:00:59.039><c> the</c><00:00:59.280><c> no</c><00:00:59.840><c> to</c><00:01:00.320><c> one</c><00:01:00.480><c> of</c><00:01:00.559><c> the</c><00:01:00.800><c> leaf</c>

00:01:01.189 --> 00:01:01.199 align:start position:0%
to one of the no to one of the leaf
 

00:01:01.199 --> 00:01:03.349 align:start position:0%
to one of the no to one of the leaf
nodes<00:01:01.680><c> and</c><00:01:01.920><c> basically</c><00:01:02.399><c> along</c><00:01:02.879><c> that</c><00:01:03.120><c> path</c>

00:01:03.349 --> 00:01:03.359 align:start position:0%
nodes and basically along that path
 

00:01:03.359 --> 00:01:05.109 align:start position:0%
nodes and basically along that path
we're<00:01:03.680><c> counting</c><00:01:04.080><c> the</c><00:01:04.239><c> number</c><00:01:04.479><c> of</c><00:01:04.640><c> nodes</c><00:01:04.879><c> so</c><00:01:05.040><c> in</c>

00:01:05.109 --> 00:01:05.119 align:start position:0%
we're counting the number of nodes so in
 

00:01:05.119 --> 00:01:07.030 align:start position:0%
we're counting the number of nodes so in
this<00:01:05.280><c> case</c><00:01:05.519><c> you</c><00:01:05.600><c> can</c><00:01:05.680><c> see</c><00:01:05.840><c> we</c><00:01:06.000><c> have</c><00:01:06.159><c> two</c><00:01:06.479><c> paths</c>

00:01:07.030 --> 00:01:07.040 align:start position:0%
this case you can see we have two paths
 

00:01:07.040 --> 00:01:08.870 align:start position:0%
this case you can see we have two paths
that<00:01:07.200><c> are</c><00:01:07.360><c> of</c><00:01:07.520><c> the</c><00:01:07.680><c> same</c><00:01:08.080><c> length</c><00:01:08.320><c> so</c><00:01:08.560><c> from</c><00:01:08.720><c> the</c>

00:01:08.870 --> 00:01:08.880 align:start position:0%
that are of the same length so from the
 

00:01:08.880 --> 00:01:10.550 align:start position:0%
that are of the same length so from the
root<00:01:09.200><c> down</c><00:01:09.760><c> to</c><00:01:10.080><c> here</c>

00:01:10.550 --> 00:01:10.560 align:start position:0%
root down to here
 

00:01:10.560 --> 00:01:12.630 align:start position:0%
root down to here
we<00:01:10.720><c> have</c><00:01:10.960><c> three</c><00:01:11.280><c> nodes</c><00:01:11.840><c> from</c><00:01:12.000><c> the</c><00:01:12.080><c> root</c><00:01:12.400><c> down</c>

00:01:12.630 --> 00:01:12.640 align:start position:0%
we have three nodes from the root down
 

00:01:12.640 --> 00:01:14.310 align:start position:0%
we have three nodes from the root down
to<00:01:12.799><c> here</c><00:01:13.040><c> we</c><00:01:13.200><c> have</c><00:01:13.360><c> three</c><00:01:13.600><c> nodes</c><00:01:13.840><c> as</c><00:01:14.000><c> well</c><00:01:14.159><c> so</c>

00:01:14.310 --> 00:01:14.320 align:start position:0%
to here we have three nodes as well so
 

00:01:14.320 --> 00:01:15.990 align:start position:0%
to here we have three nodes as well so
those<00:01:14.560><c> are</c><00:01:14.720><c> the</c><00:01:14.960><c> two</c><00:01:15.200><c> leaf</c><00:01:15.439><c> nodes</c><00:01:15.759><c> we</c><00:01:15.840><c> have</c>

00:01:15.990 --> 00:01:16.000 align:start position:0%
those are the two leaf nodes we have
 

00:01:16.000 --> 00:01:16.390 align:start position:0%
those are the two leaf nodes we have
here

00:01:16.390 --> 00:01:16.400 align:start position:0%
here
 

00:01:16.400 --> 00:01:18.149 align:start position:0%
here
we<00:01:16.640><c> also</c><00:01:16.799><c> have</c><00:01:16.960><c> a</c><00:01:17.119><c> leaf</c><00:01:17.360><c> node</c><00:01:17.680><c> on</c><00:01:17.759><c> the</c><00:01:17.920><c> left</c>

00:01:18.149 --> 00:01:18.159 align:start position:0%
we also have a leaf node on the left
 

00:01:18.159 --> 00:01:19.590 align:start position:0%
we also have a leaf node on the left
side<00:01:18.479><c> but</c><00:01:18.640><c> clearly</c><00:01:18.960><c> we</c><00:01:19.200><c> see</c>

00:01:19.590 --> 00:01:19.600 align:start position:0%
side but clearly we see
 

00:01:19.600 --> 00:01:22.070 align:start position:0%
side but clearly we see
that<00:01:19.759><c> there's</c><00:01:20.000><c> only</c><00:01:20.320><c> two</c><00:01:20.560><c> nodes</c><00:01:21.040><c> in</c><00:01:21.280><c> this</c><00:01:21.520><c> path</c>

00:01:22.070 --> 00:01:22.080 align:start position:0%
that there's only two nodes in this path
 

00:01:22.080 --> 00:01:23.910 align:start position:0%
that there's only two nodes in this path
so<00:01:22.240><c> out</c><00:01:22.400><c> of</c><00:01:22.560><c> all</c><00:01:22.640><c> those</c><00:01:22.880><c> paths</c><00:01:23.200><c> what's</c><00:01:23.439><c> the</c><00:01:23.600><c> max</c>

00:01:23.910 --> 00:01:23.920 align:start position:0%
so out of all those paths what's the max
 

00:01:23.920 --> 00:01:25.590 align:start position:0%
so out of all those paths what's the max
length<00:01:24.240><c> of</c><00:01:24.320><c> course</c><00:01:24.640><c> it's</c><00:01:24.880><c> three</c><00:01:25.200><c> so</c><00:01:25.360><c> you</c><00:01:25.520><c> can</c>

00:01:25.590 --> 00:01:25.600 align:start position:0%
length of course it's three so you can
 

00:01:25.600 --> 00:01:27.350 align:start position:0%
length of course it's three so you can
see<00:01:25.759><c> that</c><00:01:25.920><c> that's</c><00:01:26.240><c> what</c><00:01:26.400><c> our</c><00:01:26.640><c> output</c><00:01:27.040><c> is</c><00:01:27.200><c> going</c>

00:01:27.350 --> 00:01:27.360 align:start position:0%
see that that's what our output is going
 

00:01:27.360 --> 00:01:28.789 align:start position:0%
see that that's what our output is going
to<00:01:27.520><c> be</c><00:01:27.759><c> in</c><00:01:27.920><c> this</c><00:01:28.159><c> problem</c>

00:01:28.789 --> 00:01:28.799 align:start position:0%
to be in this problem
 

00:01:28.799 --> 00:01:30.390 align:start position:0%
to be in this problem
so<00:01:29.040><c> the</c><00:01:29.200><c> simplest</c><00:01:29.600><c> way</c><00:01:29.759><c> to</c><00:01:29.920><c> solve</c><00:01:30.159><c> this</c>

00:01:30.390 --> 00:01:30.400 align:start position:0%
so the simplest way to solve this
 

00:01:30.400 --> 00:01:32.550 align:start position:0%
so the simplest way to solve this
problem<00:01:30.799><c> is</c><00:01:30.960><c> recursive</c><00:01:31.759><c> depth</c><00:01:32.000><c> first</c><00:01:32.240><c> search</c>

00:01:32.550 --> 00:01:32.560 align:start position:0%
problem is recursive depth first search
 

00:01:32.560 --> 00:01:33.030 align:start position:0%
problem is recursive depth first search
now

00:01:33.030 --> 00:01:33.040 align:start position:0%
now
 

00:01:33.040 --> 00:01:34.469 align:start position:0%
now
what's<00:01:33.360><c> the</c><00:01:33.520><c> base</c><00:01:33.759><c> case</c><00:01:34.000><c> we're</c><00:01:34.240><c> using</c>

00:01:34.469 --> 00:01:34.479 align:start position:0%
what's the base case we're using
 

00:01:34.479 --> 00:01:36.310 align:start position:0%
what's the base case we're using
recursion<00:01:35.040><c> so</c><00:01:35.360><c> first</c><00:01:35.600><c> let's</c><00:01:35.840><c> think</c><00:01:36.079><c> of</c><00:01:36.159><c> the</c>

00:01:36.310 --> 00:01:36.320 align:start position:0%
recursion so first let's think of the
 

00:01:36.320 --> 00:01:38.230 align:start position:0%
recursion so first let's think of the
base<00:01:36.560><c> case</c><00:01:36.880><c> obviously</c><00:01:37.360><c> if</c><00:01:37.439><c> we</c><00:01:37.600><c> had</c><00:01:37.759><c> just</c><00:01:38.000><c> an</c>

00:01:38.230 --> 00:01:38.240 align:start position:0%
base case obviously if we had just an
 

00:01:38.240 --> 00:01:39.670 align:start position:0%
base case obviously if we had just an
empty<00:01:38.479><c> tree</c><00:01:38.799><c> right</c><00:01:38.960><c> like</c><00:01:39.119><c> what's</c><00:01:39.439><c> what</c><00:01:39.600><c> if</c>

00:01:39.670 --> 00:01:39.680 align:start position:0%
empty tree right like what's what if
 

00:01:39.680 --> 00:01:40.789 align:start position:0%
empty tree right like what's what if
this<00:01:39.840><c> was</c><00:01:40.000><c> our</c><00:01:40.159><c> tree</c><00:01:40.320><c> what</c><00:01:40.479><c> are</c><00:01:40.560><c> we</c><00:01:40.640><c> gonna</c>

00:01:40.789 --> 00:01:40.799 align:start position:0%
this was our tree what are we gonna
 

00:01:40.799 --> 00:01:41.749 align:start position:0%
this was our tree what are we gonna
return<00:01:41.280><c> of</c><00:01:41.439><c> course</c>

00:01:41.749 --> 00:01:41.759 align:start position:0%
return of course
 

00:01:41.759 --> 00:01:43.590 align:start position:0%
return of course
zero<00:01:42.159><c> right</c><00:01:42.399><c> the</c><00:01:42.479><c> max</c><00:01:42.799><c> depth</c><00:01:43.119><c> of</c><00:01:43.200><c> an</c><00:01:43.360><c> empty</c>

00:01:43.590 --> 00:01:43.600 align:start position:0%
zero right the max depth of an empty
 

00:01:43.600 --> 00:01:44.950 align:start position:0%
zero right the max depth of an empty
tree<00:01:43.920><c> is</c><00:01:44.079><c> just</c><00:01:44.320><c> zero</c>

00:01:44.950 --> 00:01:44.960 align:start position:0%
tree is just zero
 

00:01:44.960 --> 00:01:47.670 align:start position:0%
tree is just zero
what<00:01:45.119><c> about</c><00:01:45.360><c> if</c><00:01:45.520><c> we</c><00:01:45.680><c> just</c><00:01:45.840><c> had</c><00:01:46.159><c> one</c><00:01:46.479><c> node</c><00:01:47.040><c> and</c>

00:01:47.670 --> 00:01:47.680 align:start position:0%
what about if we just had one node and
 

00:01:47.680 --> 00:01:48.069 align:start position:0%
what about if we just had one node and
no

00:01:48.069 --> 00:01:48.079 align:start position:0%
no
 

00:01:48.079 --> 00:01:50.149 align:start position:0%
no
children<00:01:48.560><c> right</c><00:01:49.439><c> okay</c><00:01:49.680><c> we'd</c><00:01:49.840><c> do</c><00:01:50.000><c> this</c>

00:01:50.149 --> 00:01:50.159 align:start position:0%
children right okay we'd do this
 

00:01:50.159 --> 00:01:52.149 align:start position:0%
children right okay we'd do this
recursively<00:01:50.799><c> so</c><00:01:50.960><c> we'd</c><00:01:51.200><c> get</c><00:01:51.520><c> to</c><00:01:51.680><c> the</c><00:01:51.840><c> first</c>

00:01:52.149 --> 00:01:52.159 align:start position:0%
recursively so we'd get to the first
 

00:01:52.159 --> 00:01:53.670 align:start position:0%
recursively so we'd get to the first
node<00:01:52.399><c> right</c><00:01:52.560><c> we'd</c><00:01:52.720><c> say</c><00:01:52.880><c> okay</c><00:01:53.119><c> we</c><00:01:53.360><c> at</c><00:01:53.439><c> least</c>

00:01:53.670 --> 00:01:53.680 align:start position:0%
node right we'd say okay we at least
 

00:01:53.680 --> 00:01:54.069 align:start position:0%
node right we'd say okay we at least
have

00:01:54.069 --> 00:01:54.079 align:start position:0%
have
 

00:01:54.079 --> 00:01:56.069 align:start position:0%
have
one<00:01:54.320><c> node</c><00:01:54.799><c> then</c><00:01:54.960><c> we'd</c><00:01:55.200><c> say</c><00:01:55.360><c> okay</c><00:01:55.600><c> let's</c><00:01:55.840><c> just</c>

00:01:56.069 --> 00:01:56.079 align:start position:0%
one node then we'd say okay let's just
 

00:01:56.079 --> 00:01:58.389 align:start position:0%
one node then we'd say okay let's just
find<00:01:56.399><c> the</c><00:01:56.560><c> max</c><00:01:57.040><c> of</c><00:01:57.280><c> the</c><00:01:57.439><c> left</c><00:01:57.680><c> subtree</c><00:01:58.159><c> and</c><00:01:58.320><c> the</c>

00:01:58.389 --> 00:01:58.399 align:start position:0%
find the max of the left subtree and the
 

00:01:58.399 --> 00:01:59.270 align:start position:0%
find the max of the left subtree and the
max<00:01:58.719><c> of</c><00:01:58.799><c> the</c>

00:01:59.270 --> 00:01:59.280 align:start position:0%
max of the
 

00:01:59.280 --> 00:02:01.190 align:start position:0%
max of the
the<00:01:59.520><c> right</c><00:01:59.680><c> subtree</c><00:02:00.320><c> both</c><00:02:00.640><c> of</c><00:02:00.799><c> those</c><00:02:01.040><c> are</c>

00:02:01.190 --> 00:02:01.200 align:start position:0%
the right subtree both of those are
 

00:02:01.200 --> 00:02:02.789 align:start position:0%
the right subtree both of those are
gonna<00:02:01.360><c> return</c><00:02:01.840><c> zero</c><00:02:02.240><c> right</c><00:02:02.399><c> so</c>

00:02:02.789 --> 00:02:02.799 align:start position:0%
gonna return zero right so
 

00:02:02.799 --> 00:02:05.030 align:start position:0%
gonna return zero right so
once<00:02:03.040><c> we</c><00:02:03.200><c> get</c><00:02:03.520><c> back</c><00:02:03.840><c> to</c><00:02:04.000><c> the</c><00:02:04.240><c> root</c><00:02:04.640><c> what</c><00:02:04.799><c> are</c><00:02:04.960><c> we</c>

00:02:05.030 --> 00:02:05.040 align:start position:0%
once we get back to the root what are we
 

00:02:05.040 --> 00:02:06.630 align:start position:0%
once we get back to the root what are we
gonna<00:02:05.280><c> say</c><00:02:05.439><c> we're</c><00:02:05.600><c> gonna</c><00:02:05.759><c> say</c><00:02:05.920><c> okay</c><00:02:06.159><c> the</c><00:02:06.320><c> left</c>

00:02:06.630 --> 00:02:06.640 align:start position:0%
gonna say we're gonna say okay the left
 

00:02:06.640 --> 00:02:07.990 align:start position:0%
gonna say we're gonna say okay the left
and<00:02:06.880><c> right</c><00:02:07.119><c> subtree</c><00:02:07.520><c> were</c><00:02:07.680><c> zero</c>

00:02:07.990 --> 00:02:08.000 align:start position:0%
and right subtree were zero
 

00:02:08.000 --> 00:02:10.150 align:start position:0%
and right subtree were zero
so<00:02:08.160><c> the</c><00:02:08.399><c> maximum</c><00:02:09.119><c> of</c><00:02:09.440><c> the</c><00:02:09.599><c> left</c><00:02:09.840><c> and</c><00:02:10.000><c> right</c>

00:02:10.150 --> 00:02:10.160 align:start position:0%
so the maximum of the left and right
 

00:02:10.160 --> 00:02:12.070 align:start position:0%
so the maximum of the left and right
subtree<00:02:10.640><c> is</c><00:02:10.879><c> also</c><00:02:11.200><c> zero</c><00:02:11.520><c> so</c><00:02:11.680><c> what</c><00:02:11.840><c> we're</c><00:02:12.000><c> going</c>

00:02:12.070 --> 00:02:12.080 align:start position:0%
subtree is also zero so what we're going
 

00:02:12.080 --> 00:02:13.830 align:start position:0%
subtree is also zero so what we're going
to<00:02:12.160><c> return</c><00:02:12.560><c> from</c><00:02:12.720><c> the</c><00:02:12.879><c> perspective</c><00:02:13.440><c> of</c><00:02:13.599><c> this</c>

00:02:13.830 --> 00:02:13.840 align:start position:0%
to return from the perspective of this
 

00:02:13.840 --> 00:02:15.589 align:start position:0%
to return from the perspective of this
root<00:02:14.080><c> node</c><00:02:14.319><c> is</c><00:02:14.400><c> just</c><00:02:14.560><c> going</c><00:02:14.640><c> to</c><00:02:14.720><c> be</c><00:02:14.959><c> 1</c>

00:02:15.589 --> 00:02:15.599 align:start position:0%
root node is just going to be 1
 

00:02:15.599 --> 00:02:18.869 align:start position:0%
root node is just going to be 1
plus<00:02:16.239><c> the</c><00:02:16.560><c> max</c><00:02:17.200><c> 1</c><00:02:17.760><c> plus</c><00:02:18.160><c> the</c><00:02:18.400><c> max</c>

00:02:18.869 --> 00:02:18.879 align:start position:0%
plus the max 1 plus the max
 

00:02:18.879 --> 00:02:21.350 align:start position:0%
plus the max 1 plus the max
of<00:02:18.959><c> the</c><00:02:19.280><c> left</c><00:02:19.680><c> and</c><00:02:19.920><c> right</c><00:02:20.319><c> results</c><00:02:20.959><c> basically</c>

00:02:21.350 --> 00:02:21.360 align:start position:0%
of the left and right results basically
 

00:02:21.360 --> 00:02:22.470 align:start position:0%
of the left and right results basically
the<00:02:21.520><c> max</c><00:02:21.920><c> of</c>

00:02:22.470 --> 00:02:22.480 align:start position:0%
the max of
 

00:02:22.480 --> 00:02:24.550 align:start position:0%
the max of
the<00:02:22.640><c> left</c><00:02:22.879><c> and</c><00:02:23.040><c> right</c><00:02:23.360><c> subtrees</c><00:02:24.160><c> in</c><00:02:24.239><c> which</c>

00:02:24.550 --> 00:02:24.560 align:start position:0%
the left and right subtrees in which
 

00:02:24.560 --> 00:02:26.309 align:start position:0%
the left and right subtrees in which
case<00:02:25.440><c> it</c><00:02:25.599><c> was</c><00:02:25.840><c> both</c>

00:02:26.309 --> 00:02:26.319 align:start position:0%
case it was both
 

00:02:26.319 --> 00:02:28.390 align:start position:0%
case it was both
zero<00:02:26.800><c> so</c><00:02:27.360><c> of</c><00:02:27.440><c> course</c><00:02:27.680><c> in</c><00:02:27.840><c> this</c><00:02:28.000><c> problem</c><00:02:28.239><c> we're</c>

00:02:28.390 --> 00:02:28.400 align:start position:0%
zero so of course in this problem we're
 

00:02:28.400 --> 00:02:30.790 align:start position:0%
zero so of course in this problem we're
going<00:02:28.480><c> to</c><00:02:28.560><c> return</c><00:02:29.120><c> one</c><00:02:29.440><c> as</c><00:02:29.680><c> the</c><00:02:29.840><c> max</c><00:02:30.160><c> step</c><00:02:30.400><c> now</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
going to return one as the max step now
 

00:02:30.800 --> 00:02:32.710 align:start position:0%
going to return one as the max step now
let's<00:02:31.040><c> look</c><00:02:31.200><c> at</c><00:02:31.280><c> this</c><00:02:31.519><c> more</c><00:02:31.840><c> general</c><00:02:32.319><c> example</c>

00:02:32.710 --> 00:02:32.720 align:start position:0%
let's look at this more general example
 

00:02:32.720 --> 00:02:34.470 align:start position:0%
let's look at this more general example
that<00:02:32.879><c> they</c><00:02:33.040><c> gave</c><00:02:33.360><c> us</c><00:02:33.680><c> so</c><00:02:33.920><c> obviously</c><00:02:34.319><c> we're</c>

00:02:34.470 --> 00:02:34.480 align:start position:0%
that they gave us so obviously we're
 

00:02:34.480 --> 00:02:35.350 align:start position:0%
that they gave us so obviously we're
going<00:02:34.560><c> to</c><00:02:34.640><c> do</c><00:02:34.720><c> the</c><00:02:34.800><c> same</c><00:02:34.959><c> thing</c><00:02:35.120><c> we're</c><00:02:35.280><c> going</c>

00:02:35.350 --> 00:02:35.360 align:start position:0%
going to do the same thing we're going
 

00:02:35.360 --> 00:02:37.110 align:start position:0%
going to do the same thing we're going
to<00:02:35.440><c> get</c><00:02:35.599><c> to</c><00:02:35.680><c> the</c><00:02:35.840><c> root</c><00:02:36.080><c> say</c><00:02:36.239><c> okay</c><00:02:36.480><c> we</c><00:02:36.640><c> found</c>

00:02:37.110 --> 00:02:37.120 align:start position:0%
to get to the root say okay we found
 

00:02:37.120 --> 00:02:40.229 align:start position:0%
to get to the root say okay we found
at<00:02:37.360><c> least</c><00:02:37.840><c> one</c><00:02:39.440><c> node</c>

00:02:40.229 --> 00:02:40.239 align:start position:0%
at least one node
 

00:02:40.239 --> 00:02:41.830 align:start position:0%
at least one node
so<00:02:40.400><c> the</c><00:02:40.560><c> depth</c><00:02:40.879><c> is</c><00:02:40.959><c> at</c><00:02:41.120><c> least</c><00:02:41.360><c> one</c><00:02:41.599><c> and</c><00:02:41.680><c> then</c>

00:02:41.830 --> 00:02:41.840 align:start position:0%
so the depth is at least one and then
 

00:02:41.840 --> 00:02:43.990 align:start position:0%
so the depth is at least one and then
we're<00:02:41.920><c> going</c><00:02:42.000><c> to</c><00:02:42.080><c> return</c><00:02:42.959><c> the</c><00:02:43.280><c> max</c>

00:02:43.990 --> 00:02:44.000 align:start position:0%
we're going to return the max
 

00:02:44.000 --> 00:02:47.110 align:start position:0%
we're going to return the max
of<00:02:44.879><c> we're</c><00:02:45.040><c> going</c><00:02:45.120><c> to</c><00:02:45.200><c> return</c><00:02:45.599><c> the</c><00:02:45.760><c> max</c><00:02:46.560><c> of</c>

00:02:47.110 --> 00:02:47.120 align:start position:0%
of we're going to return the max of
 

00:02:47.120 --> 00:02:50.150 align:start position:0%
of we're going to return the max of
the<00:02:47.360><c> left</c><00:02:47.760><c> and</c><00:02:47.920><c> right</c><00:02:48.319><c> subtrees</c><00:02:48.959><c> plus</c><00:02:49.360><c> one</c><00:02:49.920><c> and</c>

00:02:50.150 --> 00:02:50.160 align:start position:0%
the left and right subtrees plus one and
 

00:02:50.160 --> 00:02:51.670 align:start position:0%
the left and right subtrees plus one and
why<00:02:50.319><c> are</c><00:02:50.480><c> we</c><00:02:50.560><c> doing</c><00:02:50.879><c> it</c><00:02:50.959><c> this</c><00:02:51.120><c> way</c><00:02:51.280><c> well</c><00:02:51.599><c> you</c>

00:02:51.670 --> 00:02:51.680 align:start position:0%
why are we doing it this way well you
 

00:02:51.680 --> 00:02:51.990 align:start position:0%
why are we doing it this way well you
can

00:02:51.990 --> 00:02:52.000 align:start position:0%
can
 

00:02:52.000 --> 00:02:54.150 align:start position:0%
can
see<00:02:52.239><c> that</c><00:02:52.400><c> we</c><00:02:52.640><c> found</c><00:02:52.959><c> this</c><00:02:53.440><c> node</c><00:02:53.680><c> but</c><00:02:53.840><c> now</c><00:02:54.000><c> we</c>

00:02:54.150 --> 00:02:54.160 align:start position:0%
see that we found this node but now we
 

00:02:54.160 --> 00:02:56.229 align:start position:0%
see that we found this node but now we
have<00:02:54.480><c> sub</c><00:02:54.800><c> problems</c><00:02:55.200><c> right</c><00:02:55.440><c> we</c><00:02:55.599><c> need</c><00:02:55.760><c> to</c><00:02:55.920><c> know</c>

00:02:56.229 --> 00:02:56.239 align:start position:0%
have sub problems right we need to know
 

00:02:56.239 --> 00:02:58.149 align:start position:0%
have sub problems right we need to know
what's<00:02:56.560><c> the</c><00:02:56.640><c> max</c><00:02:57.040><c> path</c><00:02:57.360><c> what's</c><00:02:57.599><c> the</c><00:02:57.680><c> max</c>

00:02:58.149 --> 00:02:58.159 align:start position:0%
what's the max path what's the max
 

00:02:58.159 --> 00:03:00.229 align:start position:0%
what's the max path what's the max
depth<00:02:58.640><c> and</c><00:02:59.040><c> we'll</c><00:02:59.200><c> have</c><00:02:59.360><c> to</c><00:02:59.519><c> search</c><00:02:59.840><c> the</c><00:03:00.000><c> left</c>

00:03:00.229 --> 00:03:00.239 align:start position:0%
depth and we'll have to search the left
 

00:03:00.239 --> 00:03:01.830 align:start position:0%
depth and we'll have to search the left
subtree<00:03:00.800><c> and</c><00:03:00.959><c> we'll</c><00:03:01.120><c> have</c><00:03:01.200><c> to</c><00:03:01.360><c> search</c><00:03:01.680><c> the</c>

00:03:01.830 --> 00:03:01.840 align:start position:0%
subtree and we'll have to search the
 

00:03:01.840 --> 00:03:03.190 align:start position:0%
subtree and we'll have to search the
right<00:03:02.080><c> subtree</c><00:03:02.480><c> so</c><00:03:02.560><c> we're</c><00:03:02.720><c> not</c><00:03:02.879><c> even</c>

00:03:03.190 --> 00:03:03.200 align:start position:0%
right subtree so we're not even
 

00:03:03.200 --> 00:03:05.030 align:start position:0%
right subtree so we're not even
considering<00:03:03.840><c> this</c><00:03:04.159><c> node</c><00:03:04.480><c> anymore</c><00:03:04.879><c> we're</c>

00:03:05.030 --> 00:03:05.040 align:start position:0%
considering this node anymore we're
 

00:03:05.040 --> 00:03:06.790 align:start position:0%
considering this node anymore we're
doing<00:03:05.280><c> recursion</c><00:03:05.840><c> we're</c><00:03:06.080><c> looking</c><00:03:06.239><c> at</c><00:03:06.400><c> the</c><00:03:06.560><c> sub</c>

00:03:06.790 --> 00:03:06.800 align:start position:0%
doing recursion we're looking at the sub
 

00:03:06.800 --> 00:03:08.949 align:start position:0%
doing recursion we're looking at the sub
problem<00:03:07.200><c> what's</c><00:03:07.519><c> the</c><00:03:07.680><c> max</c><00:03:08.000><c> depth</c><00:03:08.400><c> of</c><00:03:08.560><c> this</c>

00:03:08.949 --> 00:03:08.959 align:start position:0%
problem what's the max depth of this
 

00:03:08.959 --> 00:03:11.990 align:start position:0%
problem what's the max depth of this
left<00:03:09.280><c> subtree</c><00:03:10.000><c> well</c><00:03:10.239><c> of</c><00:03:10.319><c> course</c><00:03:10.720><c> it's</c><00:03:10.959><c> just</c><00:03:11.680><c> a</c>

00:03:11.990 --> 00:03:12.000 align:start position:0%
left subtree well of course it's just a
 

00:03:12.000 --> 00:03:14.390 align:start position:0%
left subtree well of course it's just a
node<00:03:12.879><c> a</c><00:03:13.040><c> single</c><00:03:13.360><c> node</c><00:03:13.599><c> with</c><00:03:13.760><c> no</c><00:03:13.920><c> children</c><00:03:14.239><c> so</c>

00:03:14.390 --> 00:03:14.400 align:start position:0%
node a single node with no children so
 

00:03:14.400 --> 00:03:15.830 align:start position:0%
node a single node with no children so
of<00:03:14.480><c> course</c><00:03:14.720><c> the</c><00:03:14.879><c> max</c><00:03:15.120><c> depth</c><00:03:15.440><c> is</c><00:03:15.519><c> going</c><00:03:15.599><c> to</c><00:03:15.680><c> be</c>

00:03:15.830 --> 00:03:15.840 align:start position:0%
of course the max depth is going to be
 

00:03:15.840 --> 00:03:16.390 align:start position:0%
of course the max depth is going to be
1.

00:03:16.390 --> 00:03:16.400 align:start position:0%
1.
 

00:03:16.400 --> 00:03:18.390 align:start position:0%
1.
similarly<00:03:16.959><c> let's</c><00:03:17.120><c> do</c><00:03:17.280><c> the</c><00:03:17.440><c> right</c><00:03:17.680><c> subtree</c><00:03:18.239><c> and</c>

00:03:18.390 --> 00:03:18.400 align:start position:0%
similarly let's do the right subtree and
 

00:03:18.400 --> 00:03:19.830 align:start position:0%
similarly let's do the right subtree and
so<00:03:18.879><c> again</c><00:03:19.200><c> this</c><00:03:19.360><c> is</c><00:03:19.440><c> going</c><00:03:19.519><c> to</c><00:03:19.599><c> be</c><00:03:19.760><c> our</c>

00:03:19.830 --> 00:03:19.840 align:start position:0%
so again this is going to be our
 

00:03:19.840 --> 00:03:21.990 align:start position:0%
so again this is going to be our
recursive<00:03:20.400><c> case</c><00:03:20.640><c> right</c><00:03:20.879><c> we</c><00:03:20.959><c> have</c><00:03:21.200><c> one</c><00:03:21.519><c> node</c>

00:03:21.990 --> 00:03:22.000 align:start position:0%
recursive case right we have one node
 

00:03:22.000 --> 00:03:23.830 align:start position:0%
recursive case right we have one node
and<00:03:22.239><c> from</c><00:03:22.720><c> then</c><00:03:22.959><c> this</c><00:03:23.120><c> node's</c><00:03:23.440><c> perspective</c>

00:03:23.830 --> 00:03:23.840 align:start position:0%
and from then this node's perspective
 

00:03:23.840 --> 00:03:25.270 align:start position:0%
and from then this node's perspective
we're<00:03:24.000><c> going</c><00:03:24.080><c> to</c><00:03:24.159><c> run</c><00:03:24.319><c> recursion</c><00:03:24.879><c> again</c><00:03:25.120><c> we're</c>

00:03:25.270 --> 00:03:25.280 align:start position:0%
we're going to run recursion again we're
 

00:03:25.280 --> 00:03:26.710 align:start position:0%
we're going to run recursion again we're
going<00:03:25.360><c> to</c><00:03:25.440><c> look</c><00:03:25.599><c> at</c><00:03:25.680><c> the</c><00:03:25.840><c> left</c><00:03:26.000><c> subtree</c><00:03:26.560><c> and</c>

00:03:26.710 --> 00:03:26.720 align:start position:0%
going to look at the left subtree and
 

00:03:26.720 --> 00:03:28.149 align:start position:0%
going to look at the left subtree and
the<00:03:26.879><c> right</c><00:03:27.120><c> subtree</c><00:03:27.519><c> both</c><00:03:27.760><c> of</c><00:03:27.840><c> which</c><00:03:28.080><c> are</c>

00:03:28.149 --> 00:03:28.159 align:start position:0%
the right subtree both of which are
 

00:03:28.159 --> 00:03:29.270 align:start position:0%
the right subtree both of which are
going<00:03:28.239><c> to</c><00:03:28.400><c> return</c><00:03:28.799><c> one</c>

00:03:29.270 --> 00:03:29.280 align:start position:0%
going to return one
 

00:03:29.280 --> 00:03:31.110 align:start position:0%
going to return one
so<00:03:29.519><c> then</c><00:03:29.760><c> of</c><00:03:29.920><c> course</c><00:03:30.400><c> from</c><00:03:30.560><c> this</c><00:03:30.799><c> node's</c>

00:03:31.110 --> 00:03:31.120 align:start position:0%
so then of course from this node's
 

00:03:31.120 --> 00:03:33.110 align:start position:0%
so then of course from this node's
perspective<00:03:31.680><c> we're</c><00:03:31.840><c> going</c><00:03:32.000><c> to</c><00:03:32.080><c> return</c><00:03:32.560><c> to</c>

00:03:33.110 --> 00:03:33.120 align:start position:0%
perspective we're going to return to
 

00:03:33.120 --> 00:03:35.990 align:start position:0%
perspective we're going to return to
the<00:03:33.280><c> max</c><00:03:33.680><c> depth</c><00:03:34.159><c> of</c><00:03:34.400><c> this</c><00:03:34.640><c> subtree</c><00:03:35.200><c> is</c><00:03:35.440><c> 2</c><00:03:35.840><c> the</c>

00:03:35.990 --> 00:03:36.000 align:start position:0%
the max depth of this subtree is 2 the
 

00:03:36.000 --> 00:03:37.830 align:start position:0%
the max depth of this subtree is 2 the
max<00:03:36.239><c> depth</c><00:03:36.480><c> of</c><00:03:36.640><c> the</c><00:03:36.799><c> left</c><00:03:37.040><c> sub</c><00:03:37.280><c> tree</c>

00:03:37.830 --> 00:03:37.840 align:start position:0%
max depth of the left sub tree
 

00:03:37.840 --> 00:03:41.270 align:start position:0%
max depth of the left sub tree
is<00:03:38.159><c> 1.</c><00:03:38.720><c> so</c><00:03:38.959><c> now</c><00:03:39.440><c> when</c><00:03:39.680><c> we</c><00:03:39.760><c> get</c><00:03:40.080><c> back</c><00:03:40.640><c> up</c><00:03:40.799><c> here</c>

00:03:41.270 --> 00:03:41.280 align:start position:0%
is 1. so now when we get back up here
 

00:03:41.280 --> 00:03:43.110 align:start position:0%
is 1. so now when we get back up here
we're<00:03:41.519><c> saying</c><00:03:41.920><c> okay</c><00:03:42.159><c> from</c><00:03:42.400><c> the</c><00:03:42.560><c> perspective</c>

00:03:43.110 --> 00:03:43.120 align:start position:0%
we're saying okay from the perspective
 

00:03:43.120 --> 00:03:44.949 align:start position:0%
we're saying okay from the perspective
of<00:03:43.280><c> this</c><00:03:43.599><c> node</c><00:03:44.000><c> we're</c><00:03:44.159><c> going</c><00:03:44.239><c> to</c><00:03:44.319><c> return</c><00:03:44.720><c> 1</c>

00:03:44.949 --> 00:03:44.959 align:start position:0%
of this node we're going to return 1
 

00:03:44.959 --> 00:03:46.710 align:start position:0%
of this node we're going to return 1
plus<00:03:45.200><c> the</c><00:03:45.280><c> max</c><00:03:45.599><c> of</c><00:03:45.680><c> left</c><00:03:45.920><c> and</c><00:03:46.080><c> right</c><00:03:46.239><c> the</c><00:03:46.400><c> max</c>

00:03:46.710 --> 00:03:46.720 align:start position:0%
plus the max of left and right the max
 

00:03:46.720 --> 00:03:47.830 align:start position:0%
plus the max of left and right the max
is<00:03:46.799><c> clearly</c><00:03:47.280><c> 2.</c>

00:03:47.830 --> 00:03:47.840 align:start position:0%
is clearly 2.
 

00:03:47.840 --> 00:03:49.910 align:start position:0%
is clearly 2.
so<00:03:48.480><c> from</c><00:03:48.799><c> this</c><00:03:48.959><c> node's</c><00:03:49.280><c> perspective</c><00:03:49.760><c> we're</c>

00:03:49.910 --> 00:03:49.920 align:start position:0%
so from this node's perspective we're
 

00:03:49.920 --> 00:03:52.149 align:start position:0%
so from this node's perspective we're
going<00:03:50.000><c> to</c><00:03:50.080><c> return</c><00:03:50.480><c> 3</c><00:03:50.799><c> the</c><00:03:50.959><c> max</c><00:03:51.280><c> depth</c><00:03:51.599><c> is</c><00:03:51.760><c> 3.</c><00:03:52.000><c> so</c>

00:03:52.149 --> 00:03:52.159 align:start position:0%
going to return 3 the max depth is 3. so
 

00:03:52.159 --> 00:03:53.830 align:start position:0%
going to return 3 the max depth is 3. so
let's<00:03:52.400><c> code</c><00:03:52.640><c> this</c><00:03:52.879><c> up</c><00:03:52.959><c> recursively</c>

00:03:53.830 --> 00:03:53.840 align:start position:0%
let's code this up recursively
 

00:03:53.840 --> 00:03:55.670 align:start position:0%
let's code this up recursively
it's<00:03:54.080><c> literally</c><00:03:54.480><c> just</c><00:03:54.720><c> going</c><00:03:54.959><c> to</c><00:03:55.120><c> be</c><00:03:55.280><c> this</c>

00:03:55.670 --> 00:03:55.680 align:start position:0%
it's literally just going to be this
 

00:03:55.680 --> 00:03:58.390 align:start position:0%
it's literally just going to be this
line<00:03:56.159><c> that</c><00:03:56.319><c> i</c><00:03:56.400><c> just</c><00:03:56.640><c> wrote</c><00:03:57.040><c> and</c><00:03:57.280><c> the</c><00:03:57.439><c> base</c><00:03:57.760><c> case</c>

00:03:58.390 --> 00:03:58.400 align:start position:0%
line that i just wrote and the base case
 

00:03:58.400 --> 00:04:00.309 align:start position:0%
line that i just wrote and the base case
and<00:03:58.560><c> since</c><00:03:58.799><c> we</c><00:03:58.959><c> are</c><00:03:59.200><c> traversing</c><00:03:59.680><c> the</c><00:03:59.920><c> entire</c>

00:04:00.309 --> 00:04:00.319 align:start position:0%
and since we are traversing the entire
 

00:04:00.319 --> 00:04:01.670 align:start position:0%
and since we are traversing the entire
tree<00:04:00.480><c> the</c><00:04:00.640><c> time</c><00:04:00.799><c> complexity</c><00:04:01.280><c> is</c><00:04:01.360><c> going</c><00:04:01.439><c> to</c><00:04:01.519><c> be</c>

00:04:01.670 --> 00:04:01.680 align:start position:0%
tree the time complexity is going to be
 

00:04:01.680 --> 00:04:02.149 align:start position:0%
tree the time complexity is going to be
big<00:04:01.920><c> o</c>

00:04:02.149 --> 00:04:02.159 align:start position:0%
big o
 

00:04:02.159 --> 00:04:03.750 align:start position:0%
big o
of<00:04:02.400><c> n</c><00:04:02.560><c> the</c><00:04:02.640><c> memory</c><00:04:02.959><c> complexity</c><00:04:03.439><c> is</c><00:04:03.519><c> just</c><00:04:03.680><c> going</c>

00:04:03.750 --> 00:04:03.760 align:start position:0%
of n the memory complexity is just going
 

00:04:03.760 --> 00:04:05.350 align:start position:0%
of n the memory complexity is just going
to<00:04:03.840><c> be</c><00:04:04.000><c> the</c><00:04:04.080><c> height</c><00:04:04.319><c> of</c><00:04:04.400><c> the</c><00:04:04.560><c> tree</c><00:04:04.799><c> which</c><00:04:05.040><c> also</c>

00:04:05.350 --> 00:04:05.360 align:start position:0%
to be the height of the tree which also
 

00:04:05.360 --> 00:04:07.429 align:start position:0%
to be the height of the tree which also
could<00:04:05.519><c> be</c><00:04:05.760><c> worst</c><00:04:06.080><c> case</c><00:04:06.400><c> big</c><00:04:06.640><c> of</c><00:04:06.879><c> n</c><00:04:07.040><c> if</c><00:04:07.120><c> it's</c><00:04:07.280><c> a</c>

00:04:07.429 --> 00:04:07.439 align:start position:0%
could be worst case big of n if it's a
 

00:04:07.439 --> 00:04:08.070 align:start position:0%
could be worst case big of n if it's a
not

00:04:08.070 --> 00:04:08.080 align:start position:0%
not
 

00:04:08.080 --> 00:04:10.630 align:start position:0%
not
if<00:04:08.239><c> it's</c><00:04:08.400><c> not</c><00:04:08.560><c> a</c><00:04:08.720><c> balanced</c><00:04:09.280><c> binary</c><00:04:09.760><c> tree</c><00:04:10.400><c> so</c>

00:04:10.630 --> 00:04:10.640 align:start position:0%
if it's not a balanced binary tree so
 

00:04:10.640 --> 00:04:12.070 align:start position:0%
if it's not a balanced binary tree so
with<00:04:10.879><c> recursion</c><00:04:11.360><c> we</c><00:04:11.519><c> always</c><00:04:11.760><c> want</c><00:04:11.920><c> to</c><00:04:12.000><c> take</c>

00:04:12.070 --> 00:04:12.080 align:start position:0%
with recursion we always want to take
 

00:04:12.080 --> 00:04:13.670 align:start position:0%
with recursion we always want to take
care<00:04:12.239><c> of</c><00:04:12.400><c> the</c><00:04:12.480><c> base</c><00:04:12.720><c> case</c><00:04:12.959><c> first</c><00:04:13.200><c> so</c><00:04:13.439><c> if</c><00:04:13.519><c> the</c>

00:04:13.670 --> 00:04:13.680 align:start position:0%
care of the base case first so if the
 

00:04:13.680 --> 00:04:14.070 align:start position:0%
care of the base case first so if the
root

00:04:14.070 --> 00:04:14.080 align:start position:0%
root
 

00:04:14.080 --> 00:04:15.990 align:start position:0%
root
is<00:04:14.319><c> null</c><00:04:14.959><c> then</c><00:04:15.200><c> of</c><00:04:15.280><c> course</c><00:04:15.599><c> we're</c><00:04:15.760><c> just</c><00:04:15.920><c> going</c>

00:04:15.990 --> 00:04:16.000 align:start position:0%
is null then of course we're just going
 

00:04:16.000 --> 00:04:18.150 align:start position:0%
is null then of course we're just going
to<00:04:16.160><c> return</c><00:04:16.560><c> 0</c><00:04:16.880><c> that's</c><00:04:17.120><c> the</c><00:04:17.280><c> max</c><00:04:17.600><c> depth</c>

00:04:18.150 --> 00:04:18.160 align:start position:0%
to return 0 that's the max depth
 

00:04:18.160 --> 00:04:21.189 align:start position:0%
to return 0 that's the max depth
otherwise<00:04:18.880><c> we're</c><00:04:19.040><c> going</c><00:04:19.120><c> to</c><00:04:19.280><c> return</c><00:04:20.160><c> 1</c>

00:04:21.189 --> 00:04:21.199 align:start position:0%
otherwise we're going to return 1
 

00:04:21.199 --> 00:04:24.550 align:start position:0%
otherwise we're going to return 1
plus<00:04:22.079><c> the</c><00:04:22.320><c> max</c><00:04:22.720><c> of</c><00:04:22.800><c> what</c><00:04:23.040><c> our</c><00:04:23.199><c> dfs</c><00:04:23.840><c> of</c><00:04:24.160><c> left</c>

00:04:24.550 --> 00:04:24.560 align:start position:0%
plus the max of what our dfs of left
 

00:04:24.560 --> 00:04:26.870 align:start position:0%
plus the max of what our dfs of left
returns<00:04:25.199><c> or</c><00:04:25.440><c> in</c><00:04:25.600><c> this</c><00:04:25.759><c> case</c><00:04:26.000><c> it's</c><00:04:26.160><c> not</c><00:04:26.320><c> dfs</c>

00:04:26.870 --> 00:04:26.880 align:start position:0%
returns or in this case it's not dfs
 

00:04:26.880 --> 00:04:28.070 align:start position:0%
returns or in this case it's not dfs
it's<00:04:27.040><c> actually</c><00:04:27.360><c> called</c><00:04:27.600><c> max</c>

00:04:28.070 --> 00:04:28.080 align:start position:0%
it's actually called max
 

00:04:28.080 --> 00:04:30.070 align:start position:0%
it's actually called max
depth<00:04:28.560><c> and</c><00:04:28.880><c> since</c><00:04:29.199><c> we're</c><00:04:29.440><c> inside</c><00:04:29.840><c> of</c><00:04:29.919><c> the</c>

00:04:30.070 --> 00:04:30.080 align:start position:0%
depth and since we're inside of the
 

00:04:30.080 --> 00:04:32.150 align:start position:0%
depth and since we're inside of the
function<00:04:31.040><c> in</c><00:04:31.199><c> python</c><00:04:31.600><c> you</c><00:04:31.680><c> have</c><00:04:31.759><c> to</c>

00:04:32.150 --> 00:04:32.160 align:start position:0%
function in python you have to
 

00:04:32.160 --> 00:04:35.350 align:start position:0%
function in python you have to
you<00:04:32.240><c> know</c><00:04:32.400><c> say</c><00:04:32.720><c> self.max</c><00:04:33.680><c> depth</c><00:04:34.400><c> and</c><00:04:34.560><c> then</c><00:04:35.120><c> run</c>

00:04:35.350 --> 00:04:35.360 align:start position:0%
you know say self.max depth and then run
 

00:04:35.360 --> 00:04:35.670 align:start position:0%
you know say self.max depth and then run
that

00:04:35.670 --> 00:04:35.680 align:start position:0%
that
 

00:04:35.680 --> 00:04:39.350 align:start position:0%
that
on<00:04:35.840><c> the</c><00:04:36.160><c> left</c><00:04:36.479><c> subtree</c><00:04:37.440><c> and</c><00:04:37.759><c> also</c><00:04:38.639><c> run</c><00:04:38.880><c> it</c><00:04:39.120><c> on</c>

00:04:39.350 --> 00:04:39.360 align:start position:0%
on the left subtree and also run it on
 

00:04:39.360 --> 00:04:39.749 align:start position:0%
on the left subtree and also run it on
the

00:04:39.749 --> 00:04:39.759 align:start position:0%
the
 

00:04:39.759 --> 00:04:42.150 align:start position:0%
the
right<00:04:40.240><c> subtree</c><00:04:41.040><c> now</c><00:04:41.280><c> to</c><00:04:41.440><c> make</c><00:04:41.600><c> this</c><00:04:41.840><c> line</c>

00:04:42.150 --> 00:04:42.160 align:start position:0%
right subtree now to make this line
 

00:04:42.160 --> 00:04:43.909 align:start position:0%
right subtree now to make this line
shorter<00:04:42.560><c> i</c><00:04:42.720><c> could</c><00:04:43.040><c> actually</c><00:04:43.440><c> store</c><00:04:43.759><c> the</c>

00:04:43.909 --> 00:04:43.919 align:start position:0%
shorter i could actually store the
 

00:04:43.919 --> 00:04:46.150 align:start position:0%
shorter i could actually store the
result<00:04:44.479><c> of</c><00:04:44.720><c> both</c><00:04:44.960><c> of</c><00:04:45.120><c> these</c><00:04:45.280><c> function</c><00:04:45.680><c> calls</c>

00:04:46.150 --> 00:04:46.160 align:start position:0%
result of both of these function calls
 

00:04:46.160 --> 00:04:48.950 align:start position:0%
result of both of these function calls
in<00:04:46.400><c> variables</c><00:04:47.280><c> but</c><00:04:47.600><c> i</c><00:04:47.759><c> think</c><00:04:47.919><c> this</c><00:04:48.240><c> one</c><00:04:48.560><c> liner</c>

00:04:48.950 --> 00:04:48.960 align:start position:0%
in variables but i think this one liner
 

00:04:48.960 --> 00:04:50.390 align:start position:0%
in variables but i think this one liner
is<00:04:49.120><c> pretty</c><00:04:49.280><c> much</c><00:04:49.520><c> good</c><00:04:49.680><c> enough</c><00:04:49.919><c> so</c><00:04:50.080><c> we're</c><00:04:50.240><c> just</c>

00:04:50.390 --> 00:04:50.400 align:start position:0%
is pretty much good enough so we're just
 

00:04:50.400 --> 00:04:50.950 align:start position:0%
is pretty much good enough so we're just
taking

00:04:50.950 --> 00:04:50.960 align:start position:0%
taking
 

00:04:50.960 --> 00:04:52.790 align:start position:0%
taking
the<00:04:51.120><c> result</c><00:04:51.600><c> of</c><00:04:51.759><c> both</c><00:04:52.080><c> of</c><00:04:52.160><c> these</c><00:04:52.479><c> function</c>

00:04:52.790 --> 00:04:52.800 align:start position:0%
the result of both of these function
 

00:04:52.800 --> 00:04:54.870 align:start position:0%
the result of both of these function
calls<00:04:53.360><c> figuring</c><00:04:53.759><c> out</c><00:04:53.919><c> what's</c><00:04:54.160><c> the</c><00:04:54.400><c> max</c><00:04:54.720><c> of</c><00:04:54.800><c> it</c>

00:04:54.870 --> 00:04:54.880 align:start position:0%
calls figuring out what's the max of it
 

00:04:54.880 --> 00:04:57.270 align:start position:0%
calls figuring out what's the max of it
so<00:04:55.040><c> what's</c><00:04:55.280><c> the</c><00:04:55.440><c> max</c><00:04:55.840><c> subtree's</c><00:04:56.639><c> depth</c>

00:04:57.270 --> 00:04:57.280 align:start position:0%
so what's the max subtree's depth
 

00:04:57.280 --> 00:04:58.950 align:start position:0%
so what's the max subtree's depth
of<00:04:57.440><c> both</c><00:04:57.680><c> of</c><00:04:57.759><c> the</c><00:04:57.919><c> sub</c><00:04:58.160><c> trees</c><00:04:58.479><c> and</c><00:04:58.560><c> then</c><00:04:58.720><c> just</c>

00:04:58.950 --> 00:04:58.960 align:start position:0%
of both of the sub trees and then just
 

00:04:58.960 --> 00:05:00.310 align:start position:0%
of both of the sub trees and then just
adding<00:04:59.280><c> one</c><00:04:59.440><c> to</c><00:04:59.680><c> it</c><00:04:59.759><c> because</c><00:04:59.919><c> we</c><00:05:00.080><c> know</c><00:05:00.240><c> that</c>

00:05:00.310 --> 00:05:00.320 align:start position:0%
adding one to it because we know that
 

00:05:00.320 --> 00:05:02.230 align:start position:0%
adding one to it because we know that
the<00:05:00.560><c> current</c><00:05:00.960><c> node</c><00:05:01.280><c> the</c><00:05:01.440><c> current</c><00:05:01.759><c> root</c><00:05:02.000><c> node</c>

00:05:02.230 --> 00:05:02.240 align:start position:0%
the current node the current root node
 

00:05:02.240 --> 00:05:03.110 align:start position:0%
the current node the current root node
that<00:05:02.320><c> we're</c><00:05:02.479><c> traversing</c>

00:05:03.110 --> 00:05:03.120 align:start position:0%
that we're traversing
 

00:05:03.120 --> 00:05:05.270 align:start position:0%
that we're traversing
is<00:05:03.199><c> definitely</c><00:05:03.680><c> not</c><00:05:04.080><c> null</c><00:05:04.639><c> so</c><00:05:05.039><c> this</c>

00:05:05.270 --> 00:05:05.280 align:start position:0%
is definitely not null so this
 

00:05:05.280 --> 00:05:07.110 align:start position:0%
is definitely not null so this
calculation<00:05:05.919><c> will</c><00:05:06.080><c> work</c><00:05:06.320><c> out</c><00:05:06.479><c> let's</c><00:05:06.720><c> submit</c>

00:05:07.110 --> 00:05:07.120 align:start position:0%
calculation will work out let's submit
 

00:05:07.120 --> 00:05:07.590 align:start position:0%
calculation will work out let's submit
it

00:05:07.590 --> 00:05:07.600 align:start position:0%
it
 

00:05:07.600 --> 00:05:09.350 align:start position:0%
it
and<00:05:07.840><c> of</c><00:05:07.919><c> course</c><00:05:08.320><c> i'm</c><00:05:08.639><c> showing</c><00:05:08.880><c> that</c><00:05:09.039><c> i</c><00:05:09.120><c> can't</c>

00:05:09.350 --> 00:05:09.360 align:start position:0%
and of course i'm showing that i can't
 

00:05:09.360 --> 00:05:10.870 align:start position:0%
and of course i'm showing that i can't
even<00:05:09.520><c> solve</c><00:05:09.840><c> easy</c><00:05:10.160><c> problems</c><00:05:10.400><c> so</c><00:05:10.560><c> it's</c><00:05:10.720><c> not</c>

00:05:10.870 --> 00:05:10.880 align:start position:0%
even solve easy problems so it's not
 

00:05:10.880 --> 00:05:11.270 align:start position:0%
even solve easy problems so it's not
called

00:05:11.270 --> 00:05:11.280 align:start position:0%
called
 

00:05:11.280 --> 00:05:13.270 align:start position:0%
called
node<00:05:11.600><c> it's</c><00:05:11.759><c> actually</c><00:05:12.080><c> called</c><00:05:12.400><c> root</c><00:05:12.800><c> hopefully</c>

00:05:13.270 --> 00:05:13.280 align:start position:0%
node it's actually called root hopefully
 

00:05:13.280 --> 00:05:14.870 align:start position:0%
node it's actually called root hopefully
you<00:05:13.440><c> were</c><00:05:13.680><c> able</c><00:05:13.840><c> to</c><00:05:14.000><c> catch</c><00:05:14.240><c> that</c>

00:05:14.870 --> 00:05:14.880 align:start position:0%
you were able to catch that
 

00:05:14.880 --> 00:05:17.670 align:start position:0%
you were able to catch that
but<00:05:15.120><c> yeah</c><00:05:15.440><c> so</c><00:05:16.000><c> this</c><00:05:16.320><c> is</c><00:05:16.400><c> the</c><00:05:16.560><c> entire</c><00:05:16.960><c> problem</c>

00:05:17.670 --> 00:05:17.680 align:start position:0%
but yeah so this is the entire problem
 

00:05:17.680 --> 00:05:18.790 align:start position:0%
but yeah so this is the entire problem
but<00:05:17.919><c> what</c><00:05:18.160><c> if</c><00:05:18.320><c> your</c>

00:05:18.790 --> 00:05:18.800 align:start position:0%
but what if your
 

00:05:18.800 --> 00:05:20.390 align:start position:0%
but what if your
interviewer<00:05:19.360><c> or</c><00:05:19.520><c> what</c><00:05:19.759><c> if</c><00:05:19.840><c> you</c><00:05:20.000><c> just</c><00:05:20.160><c> want</c><00:05:20.320><c> to</c>

00:05:20.390 --> 00:05:20.400 align:start position:0%
interviewer or what if you just want to
 

00:05:20.400 --> 00:05:21.830 align:start position:0%
interviewer or what if you just want to
do<00:05:20.560><c> this</c><00:05:20.639><c> for</c><00:05:20.880><c> learning</c><00:05:21.199><c> purposes</c>

00:05:21.830 --> 00:05:21.840 align:start position:0%
do this for learning purposes
 

00:05:21.840 --> 00:05:23.590 align:start position:0%
do this for learning purposes
you<00:05:22.000><c> want</c><00:05:22.160><c> to</c><00:05:22.240><c> solve</c><00:05:22.560><c> this</c><00:05:22.720><c> problem</c><00:05:23.120><c> without</c>

00:05:23.590 --> 00:05:23.600 align:start position:0%
you want to solve this problem without
 

00:05:23.600 --> 00:05:25.749 align:start position:0%
you want to solve this problem without
recursion<00:05:24.160><c> well</c><00:05:24.320><c> there's</c><00:05:24.639><c> two</c><00:05:24.800><c> ways</c><00:05:25.120><c> to</c><00:05:25.199><c> do</c><00:05:25.440><c> it</c>

00:05:25.749 --> 00:05:25.759 align:start position:0%
recursion well there's two ways to do it
 

00:05:25.759 --> 00:05:27.749 align:start position:0%
recursion well there's two ways to do it
iterative<00:05:26.320><c> depth</c><00:05:26.560><c> first</c><00:05:26.800><c> search</c><00:05:27.199><c> or</c>

00:05:27.749 --> 00:05:27.759 align:start position:0%
iterative depth first search or
 

00:05:27.759 --> 00:05:29.749 align:start position:0%
iterative depth first search or
iterative<00:05:28.560><c> breadth</c><00:05:28.960><c> first</c><00:05:29.199><c> search</c><00:05:29.520><c> and</c><00:05:29.680><c> i'm</c>

00:05:29.749 --> 00:05:29.759 align:start position:0%
iterative breadth first search and i'm
 

00:05:29.759 --> 00:05:31.110 align:start position:0%
iterative breadth first search and i'm
going<00:05:29.840><c> to</c><00:05:29.919><c> show</c><00:05:30.080><c> you</c><00:05:30.240><c> both</c><00:05:30.479><c> of</c><00:05:30.639><c> those</c><00:05:30.880><c> right</c>

00:05:31.110 --> 00:05:31.120 align:start position:0%
going to show you both of those right
 

00:05:31.120 --> 00:05:31.670 align:start position:0%
going to show you both of those right
now

00:05:31.670 --> 00:05:31.680 align:start position:0%
now
 

00:05:31.680 --> 00:05:33.590 align:start position:0%
now
now<00:05:31.840><c> there's</c><00:05:32.080><c> not</c><00:05:32.320><c> a</c><00:05:32.400><c> lot</c><00:05:32.560><c> of</c><00:05:32.880><c> benefits</c><00:05:33.360><c> to</c>

00:05:33.590 --> 00:05:33.600 align:start position:0%
now there's not a lot of benefits to
 

00:05:33.600 --> 00:05:35.350 align:start position:0%
now there's not a lot of benefits to
using<00:05:34.000><c> breadth</c><00:05:34.320><c> first</c><00:05:34.560><c> search</c><00:05:34.960><c> on</c><00:05:35.120><c> this</c>

00:05:35.350 --> 00:05:35.360 align:start position:0%
using breadth first search on this
 

00:05:35.360 --> 00:05:35.990 align:start position:0%
using breadth first search on this
problem

00:05:35.990 --> 00:05:36.000 align:start position:0%
problem
 

00:05:36.000 --> 00:05:38.950 align:start position:0%
problem
compared<00:05:36.400><c> to</c><00:05:36.560><c> just</c><00:05:36.800><c> doing</c><00:05:37.199><c> dfs</c><00:05:37.840><c> recursively</c>

00:05:38.950 --> 00:05:38.960 align:start position:0%
compared to just doing dfs recursively
 

00:05:38.960 --> 00:05:40.390 align:start position:0%
compared to just doing dfs recursively
mainly<00:05:39.360><c> that</c><00:05:39.440><c> you</c><00:05:39.600><c> just</c><00:05:39.759><c> don't</c><00:05:39.919><c> have</c><00:05:40.080><c> to</c><00:05:40.240><c> do</c>

00:05:40.390 --> 00:05:40.400 align:start position:0%
mainly that you just don't have to do
 

00:05:40.400 --> 00:05:41.670 align:start position:0%
mainly that you just don't have to do
recursion<00:05:41.039><c> at</c><00:05:41.199><c> all</c>

00:05:41.670 --> 00:05:41.680 align:start position:0%
recursion at all
 

00:05:41.680 --> 00:05:43.270 align:start position:0%
recursion at all
the<00:05:41.840><c> time</c><00:05:42.080><c> complexity</c><00:05:42.639><c> is</c><00:05:42.720><c> still</c><00:05:42.960><c> going</c><00:05:43.039><c> to</c><00:05:43.120><c> be</c>

00:05:43.270 --> 00:05:43.280 align:start position:0%
the time complexity is still going to be
 

00:05:43.280 --> 00:05:44.790 align:start position:0%
the time complexity is still going to be
the<00:05:43.360><c> same</c><00:05:43.600><c> the</c><00:05:43.680><c> memory</c><00:05:44.000><c> complexity</c><00:05:44.479><c> is</c><00:05:44.560><c> still</c>

00:05:44.790 --> 00:05:44.800 align:start position:0%
the same the memory complexity is still
 

00:05:44.800 --> 00:05:45.830 align:start position:0%
the same the memory complexity is still
going<00:05:44.880><c> to</c><00:05:44.960><c> be</c><00:05:45.120><c> the</c><00:05:45.360><c> same</c>

00:05:45.830 --> 00:05:45.840 align:start position:0%
going to be the same
 

00:05:45.840 --> 00:05:47.350 align:start position:0%
going to be the same
but<00:05:46.080><c> let's</c><00:05:46.320><c> still</c><00:05:46.560><c> do</c><00:05:46.720><c> this</c><00:05:46.880><c> for</c><00:05:47.039><c> learning</c>

00:05:47.350 --> 00:05:47.360 align:start position:0%
but let's still do this for learning
 

00:05:47.360 --> 00:05:49.110 align:start position:0%
but let's still do this for learning
purposes<00:05:47.759><c> so</c><00:05:48.000><c> breadth</c><00:05:48.240><c> first</c><00:05:48.479><c> search</c><00:05:48.880><c> on</c><00:05:49.039><c> a</c>

00:05:49.110 --> 00:05:49.120 align:start position:0%
purposes so breadth first search on a
 

00:05:49.120 --> 00:05:50.550 align:start position:0%
purposes so breadth first search on a
tree<00:05:49.520><c> is</c><00:05:49.759><c> basically</c>

00:05:50.550 --> 00:05:50.560 align:start position:0%
tree is basically
 

00:05:50.560 --> 00:05:52.870 align:start position:0%
tree is basically
level<00:05:50.960><c> order</c><00:05:51.360><c> traversal</c><00:05:52.080><c> we're</c><00:05:52.240><c> traversing</c>

00:05:52.870 --> 00:05:52.880 align:start position:0%
level order traversal we're traversing
 

00:05:52.880 --> 00:05:54.150 align:start position:0%
level order traversal we're traversing
each<00:05:53.360><c> level</c>

00:05:54.150 --> 00:05:54.160 align:start position:0%
each level
 

00:05:54.160 --> 00:05:57.590 align:start position:0%
each level
by<00:05:55.120><c> level</c><00:05:55.680><c> until</c><00:05:56.080><c> we</c><00:05:56.240><c> get</c><00:05:56.479><c> to</c><00:05:56.639><c> the</c><00:05:56.880><c> end</c><00:05:57.120><c> or</c><00:05:57.280><c> the</c>

00:05:57.590 --> 00:05:57.600 align:start position:0%
by level until we get to the end or the
 

00:05:57.600 --> 00:05:58.070 align:start position:0%
by level until we get to the end or the
last

00:05:58.070 --> 00:05:58.080 align:start position:0%
last
 

00:05:58.080 --> 00:05:59.909 align:start position:0%
last
level<00:05:58.400><c> and</c><00:05:58.479><c> then</c><00:05:58.639><c> we</c><00:05:58.800><c> can't</c><00:05:58.960><c> continue</c><00:05:59.520><c> anymore</c>

00:05:59.909 --> 00:05:59.919 align:start position:0%
level and then we can't continue anymore
 

00:05:59.919 --> 00:06:01.510 align:start position:0%
level and then we can't continue anymore
so<00:06:00.080><c> you</c><00:06:00.240><c> can</c><00:06:00.319><c> kind</c><00:06:00.479><c> of</c><00:06:00.639><c> see</c><00:06:00.880><c> how</c><00:06:01.120><c> breath</c><00:06:01.360><c> for</c>

00:06:01.510 --> 00:06:01.520 align:start position:0%
so you can kind of see how breath for
 

00:06:01.520 --> 00:06:03.590 align:start position:0%
so you can kind of see how breath for
search<00:06:01.840><c> is</c><00:06:02.000><c> a</c><00:06:02.080><c> pretty</c><00:06:02.319><c> intuitive</c><00:06:02.800><c> way</c><00:06:03.039><c> to</c><00:06:03.280><c> find</c>

00:06:03.590 --> 00:06:03.600 align:start position:0%
search is a pretty intuitive way to find
 

00:06:03.600 --> 00:06:04.230 align:start position:0%
search is a pretty intuitive way to find
the<00:06:03.840><c> max</c>

00:06:04.230 --> 00:06:04.240 align:start position:0%
the max
 

00:06:04.240 --> 00:06:06.469 align:start position:0%
the max
depth<00:06:04.639><c> right</c><00:06:04.960><c> we're</c><00:06:05.199><c> basically</c><00:06:05.840><c> counting</c><00:06:06.240><c> the</c>

00:06:06.469 --> 00:06:06.479 align:start position:0%
depth right we're basically counting the
 

00:06:06.479 --> 00:06:07.909 align:start position:0%
depth right we're basically counting the
number<00:06:06.720><c> of</c><00:06:06.960><c> levels</c><00:06:07.360><c> we</c><00:06:07.520><c> have</c>

00:06:07.909 --> 00:06:07.919 align:start position:0%
number of levels we have
 

00:06:07.919 --> 00:06:10.469 align:start position:0%
number of levels we have
so<00:06:08.160><c> here</c><00:06:08.400><c> we</c><00:06:08.639><c> see</c><00:06:09.039><c> okay</c><00:06:09.280><c> we</c><00:06:09.440><c> have</c><00:06:09.600><c> one</c><00:06:09.840><c> level</c>

00:06:10.469 --> 00:06:10.479 align:start position:0%
so here we see okay we have one level
 

00:06:10.479 --> 00:06:11.350 align:start position:0%
so here we see okay we have one level
next<00:06:10.800><c> we</c><00:06:10.960><c> see</c>

00:06:11.350 --> 00:06:11.360 align:start position:0%
next we see
 

00:06:11.360 --> 00:06:13.590 align:start position:0%
next we see
we<00:06:11.520><c> have</c><00:06:11.680><c> two</c><00:06:12.000><c> levels</c><00:06:12.479><c> oh</c><00:06:12.800><c> this</c><00:06:13.039><c> is</c><00:06:13.120><c> the</c><00:06:13.280><c> third</c>

00:06:13.590 --> 00:06:13.600 align:start position:0%
we have two levels oh this is the third
 

00:06:13.600 --> 00:06:15.270 align:start position:0%
we have two levels oh this is the third
level<00:06:13.919><c> and</c><00:06:14.080><c> we</c><00:06:14.240><c> can't</c><00:06:14.479><c> go</c><00:06:14.639><c> any</c><00:06:14.800><c> lower</c><00:06:15.120><c> so</c>

00:06:15.270 --> 00:06:15.280 align:start position:0%
level and we can't go any lower so
 

00:06:15.280 --> 00:06:16.870 align:start position:0%
level and we can't go any lower so
what's<00:06:15.520><c> the</c><00:06:15.600><c> number</c><00:06:15.840><c> of</c><00:06:16.080><c> levels</c><00:06:16.400><c> that</c><00:06:16.560><c> we</c><00:06:16.639><c> had</c>

00:06:16.870 --> 00:06:16.880 align:start position:0%
what's the number of levels that we had
 

00:06:16.880 --> 00:06:17.990 align:start position:0%
what's the number of levels that we had
we<00:06:17.039><c> had</c><00:06:17.280><c> three</c>

00:06:17.990 --> 00:06:18.000 align:start position:0%
we had three
 

00:06:18.000 --> 00:06:20.150 align:start position:0%
we had three
that's<00:06:18.319><c> the</c><00:06:18.560><c> number</c><00:06:18.800><c> of</c><00:06:18.960><c> levels</c><00:06:19.520><c> is</c><00:06:19.680><c> basically</c>

00:06:20.150 --> 00:06:20.160 align:start position:0%
that's the number of levels is basically
 

00:06:20.160 --> 00:06:21.909 align:start position:0%
that's the number of levels is basically
going<00:06:20.319><c> to</c><00:06:20.400><c> be</c><00:06:20.560><c> the</c><00:06:20.720><c> same</c><00:06:21.120><c> as</c><00:06:21.280><c> the</c><00:06:21.520><c> max</c>

00:06:21.909 --> 00:06:21.919 align:start position:0%
going to be the same as the max
 

00:06:21.919 --> 00:06:24.230 align:start position:0%
going to be the same as the max
depth<00:06:22.400><c> so</c><00:06:22.880><c> now</c><00:06:23.039><c> the</c><00:06:23.199><c> only</c><00:06:23.440><c> problem</c><00:06:23.840><c> is</c><00:06:24.000><c> how</c><00:06:24.160><c> are</c>

00:06:24.230 --> 00:06:24.240 align:start position:0%
depth so now the only problem is how are
 

00:06:24.240 --> 00:06:25.749 align:start position:0%
depth so now the only problem is how are
we<00:06:24.479><c> actually</c><00:06:24.720><c> going</c><00:06:24.880><c> to</c><00:06:25.039><c> code</c><00:06:25.360><c> this</c>

00:06:25.749 --> 00:06:25.759 align:start position:0%
we actually going to code this
 

00:06:25.759 --> 00:06:29.029 align:start position:0%
we actually going to code this
up<00:06:26.240><c> now</c><00:06:26.479><c> typically</c><00:06:26.960><c> bfs</c><00:06:27.600><c> involves</c><00:06:28.080><c> a</c><00:06:28.400><c> queue</c><00:06:28.800><c> or</c>

00:06:29.029 --> 00:06:29.039 align:start position:0%
up now typically bfs involves a queue or
 

00:06:29.039 --> 00:06:29.270 align:start position:0%
up now typically bfs involves a queue or
a

00:06:29.270 --> 00:06:29.280 align:start position:0%
a
 

00:06:29.280 --> 00:06:32.629 align:start position:0%
a
deck<00:06:30.160><c> a</c><00:06:30.400><c> dq</c><00:06:30.880><c> or</c><00:06:31.039><c> however</c><00:06:31.360><c> you</c><00:06:31.520><c> call</c><00:06:31.759><c> it</c><00:06:32.160><c> and</c><00:06:32.400><c> so</c>

00:06:32.629 --> 00:06:32.639 align:start position:0%
deck a dq or however you call it and so
 

00:06:32.639 --> 00:06:33.990 align:start position:0%
deck a dq or however you call it and so
the<00:06:32.800><c> way</c><00:06:32.880><c> it's</c><00:06:33.039><c> going</c><00:06:33.120><c> to</c><00:06:33.199><c> work</c><00:06:33.440><c> is</c><00:06:33.520><c> the</c><00:06:33.680><c> queue</c>

00:06:33.990 --> 00:06:34.000 align:start position:0%
the way it's going to work is the queue
 

00:06:34.000 --> 00:06:36.390 align:start position:0%
the way it's going to work is the queue
is<00:06:34.080><c> initially</c><00:06:34.560><c> just</c><00:06:34.720><c> going</c><00:06:34.880><c> to</c><00:06:34.960><c> have</c><00:06:35.199><c> the</c><00:06:35.520><c> root</c>

00:06:36.390 --> 00:06:36.400 align:start position:0%
is initially just going to have the root
 

00:06:36.400 --> 00:06:37.189 align:start position:0%
is initially just going to have the root
value

00:06:37.189 --> 00:06:37.199 align:start position:0%
value
 

00:06:37.199 --> 00:06:38.870 align:start position:0%
value
so<00:06:37.360><c> i'm</c><00:06:37.440><c> going</c><00:06:37.520><c> to</c><00:06:37.600><c> kind</c><00:06:37.759><c> of</c><00:06:38.080><c> represent</c><00:06:38.560><c> this</c>

00:06:38.870 --> 00:06:38.880 align:start position:0%
so i'm going to kind of represent this
 

00:06:38.880 --> 00:06:40.550 align:start position:0%
so i'm going to kind of represent this
array<00:06:39.360><c> as</c><00:06:39.600><c> the</c><00:06:39.680><c> queue</c><00:06:39.919><c> so</c><00:06:40.080><c> initially</c><00:06:40.400><c> we're</c>

00:06:40.550 --> 00:06:40.560 align:start position:0%
array as the queue so initially we're
 

00:06:40.560 --> 00:06:41.909 align:start position:0%
array as the queue so initially we're
just<00:06:40.720><c> going</c><00:06:40.880><c> to</c><00:06:40.960><c> put</c><00:06:41.120><c> the</c><00:06:41.360><c> root</c>

00:06:41.909 --> 00:06:41.919 align:start position:0%
just going to put the root
 

00:06:41.919 --> 00:06:43.670 align:start position:0%
just going to put the root
in<00:06:42.080><c> the</c><00:06:42.319><c> queue</c><00:06:42.639><c> right</c><00:06:43.039><c> so</c><00:06:43.280><c> now</c><00:06:43.440><c> we're</c><00:06:43.520><c> going</c><00:06:43.600><c> to</c>

00:06:43.670 --> 00:06:43.680 align:start position:0%
in the queue right so now we're going to
 

00:06:43.680 --> 00:06:45.830 align:start position:0%
in the queue right so now we're going to
say<00:06:43.840><c> okay</c><00:06:44.080><c> what's</c><00:06:44.560><c> the</c><00:06:44.800><c> length</c><00:06:45.039><c> of</c><00:06:45.199><c> our</c><00:06:45.360><c> queue</c>

00:06:45.830 --> 00:06:45.840 align:start position:0%
say okay what's the length of our queue
 

00:06:45.840 --> 00:06:47.749 align:start position:0%
say okay what's the length of our queue
this<00:06:46.160><c> is</c><00:06:46.639><c> these</c><00:06:46.800><c> are</c><00:06:46.960><c> the</c><00:06:47.039><c> elements</c><00:06:47.440><c> currently</c>

00:06:47.749 --> 00:06:47.759 align:start position:0%
this is these are the elements currently
 

00:06:47.759 --> 00:06:49.589 align:start position:0%
this is these are the elements currently
in<00:06:47.840><c> our</c><00:06:48.000><c> queue</c><00:06:48.319><c> and</c><00:06:48.400><c> this</c><00:06:48.639><c> these</c><00:06:48.880><c> are</c><00:06:49.039><c> all</c><00:06:49.280><c> at</c>

00:06:49.589 --> 00:06:49.599 align:start position:0%
in our queue and this these are all at
 

00:06:49.599 --> 00:06:50.629 align:start position:0%
in our queue and this these are all at
level<00:06:50.080><c> one</c>

00:06:50.629 --> 00:06:50.639 align:start position:0%
level one
 

00:06:50.639 --> 00:06:52.150 align:start position:0%
level one
so<00:06:50.800><c> now</c><00:06:50.960><c> we're</c><00:06:51.120><c> going</c><00:06:51.199><c> to</c><00:06:51.360><c> go</c><00:06:51.599><c> through</c><00:06:51.840><c> every</c>

00:06:52.150 --> 00:06:52.160 align:start position:0%
so now we're going to go through every
 

00:06:52.160 --> 00:06:53.909 align:start position:0%
so now we're going to go through every
node<00:06:52.479><c> in</c><00:06:52.639><c> our</c><00:06:52.800><c> queue</c><00:06:53.039><c> we</c><00:06:53.199><c> only</c><00:06:53.360><c> have</c><00:06:53.599><c> one</c><00:06:53.840><c> and</c>

00:06:53.909 --> 00:06:53.919 align:start position:0%
node in our queue we only have one and
 

00:06:53.919 --> 00:06:55.110 align:start position:0%
node in our queue we only have one and
we're<00:06:54.080><c> going</c><00:06:54.160><c> to</c><00:06:54.240><c> take</c><00:06:54.560><c> three</c>

00:06:55.110 --> 00:06:55.120 align:start position:0%
we're going to take three
 

00:06:55.120 --> 00:06:56.550 align:start position:0%
we're going to take three
now<00:06:55.360><c> we're</c><00:06:55.520><c> going</c><00:06:55.599><c> to</c><00:06:55.680><c> remove</c><00:06:56.080><c> it</c><00:06:56.160><c> from</c><00:06:56.400><c> our</c>

00:06:56.550 --> 00:06:56.560 align:start position:0%
now we're going to remove it from our
 

00:06:56.560 --> 00:06:58.390 align:start position:0%
now we're going to remove it from our
queue<00:06:56.800><c> and</c><00:06:56.880><c> we're</c><00:06:57.039><c> going</c><00:06:57.120><c> to</c><00:06:57.199><c> replace</c><00:06:57.759><c> it</c><00:06:58.080><c> with</c>

00:06:58.390 --> 00:06:58.400 align:start position:0%
queue and we're going to replace it with
 

00:06:58.400 --> 00:06:59.430 align:start position:0%
queue and we're going to replace it with
its<00:06:58.720><c> children</c>

00:06:59.430 --> 00:06:59.440 align:start position:0%
its children
 

00:06:59.440 --> 00:07:02.790 align:start position:0%
its children
9<00:06:59.840><c> and</c><00:07:00.000><c> 20.</c><00:07:00.400><c> so</c><00:07:00.560><c> let's</c><00:07:00.800><c> add</c><00:07:01.199><c> 9</c><00:07:02.000><c> and</c>

00:07:02.790 --> 00:07:02.800 align:start position:0%
9 and 20. so let's add 9 and
 

00:07:02.800 --> 00:07:05.909 align:start position:0%
9 and 20. so let's add 9 and
20<00:07:03.680><c> to</c><00:07:03.919><c> the</c><00:07:04.080><c> queue</c><00:07:04.720><c> so</c><00:07:04.960><c> now</c>

00:07:05.909 --> 00:07:05.919 align:start position:0%
20 to the queue so now
 

00:07:05.919 --> 00:07:08.870 align:start position:0%
20 to the queue so now
this<00:07:06.479><c> is</c><00:07:06.880><c> our</c><00:07:07.360><c> second</c><00:07:07.919><c> level</c><00:07:08.319><c> right</c><00:07:08.560><c> these</c>

00:07:08.870 --> 00:07:08.880 align:start position:0%
this is our second level right these
 

00:07:08.880 --> 00:07:10.710 align:start position:0%
this is our second level right these
elements<00:07:09.360><c> that</c><00:07:09.440><c> we</c><00:07:09.599><c> have</c><00:07:09.840><c> here</c><00:07:10.160><c> are</c><00:07:10.400><c> our</c>

00:07:10.710 --> 00:07:10.720 align:start position:0%
elements that we have here are our
 

00:07:10.720 --> 00:07:11.270 align:start position:0%
elements that we have here are our
second

00:07:11.270 --> 00:07:11.280 align:start position:0%
second
 

00:07:11.280 --> 00:07:13.589 align:start position:0%
second
level<00:07:11.759><c> of</c><00:07:11.919><c> the</c><00:07:12.479><c> queue</c><00:07:12.720><c> the</c><00:07:12.880><c> second</c><00:07:13.199><c> level</c><00:07:13.520><c> of</c>

00:07:13.589 --> 00:07:13.599 align:start position:0%
level of the queue the second level of
 

00:07:13.599 --> 00:07:14.950 align:start position:0%
level of the queue the second level of
the<00:07:13.759><c> tree</c><00:07:13.919><c> so</c><00:07:14.080><c> we're</c><00:07:14.240><c> going</c><00:07:14.240><c> to</c><00:07:14.319><c> do</c><00:07:14.479><c> the</c><00:07:14.639><c> exact</c>

00:07:14.950 --> 00:07:14.960 align:start position:0%
the tree so we're going to do the exact
 

00:07:14.960 --> 00:07:15.670 align:start position:0%
the tree so we're going to do the exact
same<00:07:15.280><c> thing</c>

00:07:15.670 --> 00:07:15.680 align:start position:0%
same thing
 

00:07:15.680 --> 00:07:17.510 align:start position:0%
same thing
with<00:07:16.160><c> these</c><00:07:16.560><c> two</c><00:07:16.800><c> nodes</c><00:07:17.039><c> we're</c><00:07:17.199><c> going</c><00:07:17.280><c> to</c><00:07:17.360><c> take</c>

00:07:17.510 --> 00:07:17.520 align:start position:0%
with these two nodes we're going to take
 

00:07:17.520 --> 00:07:18.790 align:start position:0%
with these two nodes we're going to take
the<00:07:17.680><c> first</c><00:07:17.919><c> one</c><00:07:18.240><c> 9</c>

00:07:18.790 --> 00:07:18.800 align:start position:0%
the first one 9
 

00:07:18.800 --> 00:07:20.950 align:start position:0%
the first one 9
get<00:07:19.039><c> rid</c><00:07:19.199><c> of</c><00:07:19.360><c> it</c><00:07:19.599><c> we</c><00:07:19.840><c> see</c><00:07:20.080><c> 9</c><00:07:20.319><c> is</c><00:07:20.400><c> here</c><00:07:20.639><c> now</c><00:07:20.800><c> we're</c>

00:07:20.950 --> 00:07:20.960 align:start position:0%
get rid of it we see 9 is here now we're
 

00:07:20.960 --> 00:07:22.710 align:start position:0%
get rid of it we see 9 is here now we're
going<00:07:21.039><c> to</c><00:07:21.120><c> replace</c><00:07:21.599><c> it</c><00:07:21.680><c> with</c><00:07:21.919><c> its</c><00:07:22.080><c> children</c><00:07:22.560><c> it</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
going to replace it with its children it
 

00:07:22.720 --> 00:07:24.150 align:start position:0%
going to replace it with its children it
doesn't<00:07:22.960><c> have</c><00:07:23.199><c> any</c><00:07:23.440><c> children</c><00:07:23.759><c> so</c><00:07:23.919><c> we</c><00:07:24.000><c> don't</c>

00:07:24.150 --> 00:07:24.160 align:start position:0%
doesn't have any children so we don't
 

00:07:24.160 --> 00:07:25.670 align:start position:0%
doesn't have any children so we don't
have<00:07:24.240><c> to</c><00:07:24.400><c> replace</c><00:07:24.720><c> it</c><00:07:24.800><c> with</c><00:07:24.960><c> anything</c><00:07:25.360><c> right</c>

00:07:25.670 --> 00:07:25.680 align:start position:0%
have to replace it with anything right
 

00:07:25.680 --> 00:07:26.950 align:start position:0%
have to replace it with anything right
but<00:07:25.840><c> we're</c><00:07:26.000><c> going</c><00:07:26.160><c> to</c><00:07:26.240><c> keep</c><00:07:26.479><c> going</c>

00:07:26.950 --> 00:07:26.960 align:start position:0%
but we're going to keep going
 

00:07:26.960 --> 00:07:29.029 align:start position:0%
but we're going to keep going
now<00:07:27.120><c> we're</c><00:07:27.280><c> going</c><00:07:27.360><c> to</c><00:07:27.440><c> go</c><00:07:27.759><c> to</c><00:07:28.000><c> the</c><00:07:28.400><c> second</c><00:07:28.720><c> one</c>

00:07:29.029 --> 00:07:29.039 align:start position:0%
now we're going to go to the second one
 

00:07:29.039 --> 00:07:31.029 align:start position:0%
now we're going to go to the second one
20<00:07:29.680><c> remove</c><00:07:30.160><c> that</c><00:07:30.479><c> from</c>

00:07:31.029 --> 00:07:31.039 align:start position:0%
20 remove that from
 

00:07:31.039 --> 00:07:33.270 align:start position:0%
20 remove that from
our<00:07:31.280><c> q</c><00:07:31.759><c> and</c><00:07:31.919><c> replace</c><00:07:32.400><c> it</c><00:07:32.560><c> with</c><00:07:32.720><c> its</c><00:07:32.960><c> children</c>

00:07:33.270 --> 00:07:33.280 align:start position:0%
our q and replace it with its children
 

00:07:33.280 --> 00:07:35.270 align:start position:0%
our q and replace it with its children
what<00:07:33.520><c> are</c><00:07:33.599><c> its</c><00:07:33.840><c> children</c><00:07:34.240><c> we</c><00:07:34.400><c> have</c><00:07:34.720><c> 15</c>

00:07:35.270 --> 00:07:35.280 align:start position:0%
what are its children we have 15
 

00:07:35.280 --> 00:07:38.309 align:start position:0%
what are its children we have 15
and<00:07:35.440><c> 17</c><00:07:35.919><c> so</c><00:07:36.080><c> let's</c><00:07:36.319><c> add</c><00:07:36.960><c> 15</c><00:07:37.680><c> i</c><00:07:37.840><c> ran</c><00:07:38.080><c> out</c><00:07:38.240><c> of</c>

00:07:38.309 --> 00:07:38.319 align:start position:0%
and 17 so let's add 15 i ran out of
 

00:07:38.319 --> 00:07:39.589 align:start position:0%
and 17 so let's add 15 i ran out of
space<00:07:38.720><c> but</c><00:07:38.880><c> that's</c><00:07:39.199><c> okay</c>

00:07:39.589 --> 00:07:39.599 align:start position:0%
space but that's okay
 

00:07:39.599 --> 00:07:42.629 align:start position:0%
space but that's okay
and<00:07:39.840><c> 17</c><00:07:40.720><c> to</c><00:07:41.039><c> our</c><00:07:41.360><c> q</c><00:07:41.759><c> now</c><00:07:42.080><c> this</c>

00:07:42.629 --> 00:07:42.639 align:start position:0%
and 17 to our q now this
 

00:07:42.639 --> 00:07:45.589 align:start position:0%
and 17 to our q now this
portion<00:07:43.120><c> is</c><00:07:43.440><c> the</c><00:07:43.599><c> next</c><00:07:44.240><c> level</c><00:07:44.800><c> it's</c><00:07:45.120><c> level</c>

00:07:45.589 --> 00:07:45.599 align:start position:0%
portion is the next level it's level
 

00:07:45.599 --> 00:07:46.309 align:start position:0%
portion is the next level it's level
three

00:07:46.309 --> 00:07:46.319 align:start position:0%
three
 

00:07:46.319 --> 00:07:49.270 align:start position:0%
three
so<00:07:46.560><c> let's</c><00:07:46.800><c> continue</c><00:07:47.199><c> to</c><00:07:47.360><c> go</c><00:07:47.680><c> so</c><00:07:48.560><c> 15</c><00:07:49.120><c> is</c><00:07:49.199><c> the</c>

00:07:49.270 --> 00:07:49.280 align:start position:0%
so let's continue to go so 15 is the
 

00:07:49.280 --> 00:07:50.950 align:start position:0%
so let's continue to go so 15 is the
first<00:07:49.520><c> one</c><00:07:49.759><c> let's</c><00:07:50.000><c> pop</c><00:07:50.240><c> it</c><00:07:50.400><c> let's</c><00:07:50.560><c> get</c><00:07:50.720><c> rid</c><00:07:50.879><c> of</c>

00:07:50.950 --> 00:07:50.960 align:start position:0%
first one let's pop it let's get rid of
 

00:07:50.960 --> 00:07:52.309 align:start position:0%
first one let's pop it let's get rid of
it<00:07:51.039><c> replace</c><00:07:51.440><c> it</c><00:07:51.520><c> with</c><00:07:51.680><c> its</c><00:07:51.840><c> children</c><00:07:52.240><c> it</c>

00:07:52.309 --> 00:07:52.319 align:start position:0%
it replace it with its children it
 

00:07:52.319 --> 00:07:53.749 align:start position:0%
it replace it with its children it
doesn't<00:07:52.560><c> have</c><00:07:52.720><c> any</c><00:07:52.960><c> children</c>

00:07:53.749 --> 00:07:53.759 align:start position:0%
doesn't have any children
 

00:07:53.759 --> 00:07:56.790 align:start position:0%
doesn't have any children
so<00:07:53.919><c> it's</c><00:07:54.080><c> a</c><00:07:54.160><c> base</c><00:07:54.479><c> case</c><00:07:55.280><c> next</c><00:07:55.599><c> one</c><00:07:56.080><c> seven</c><00:07:56.560><c> okay</c>

00:07:56.790 --> 00:07:56.800 align:start position:0%
so it's a base case next one seven okay
 

00:07:56.800 --> 00:07:59.029 align:start position:0%
so it's a base case next one seven okay
i<00:07:56.879><c> wrote</c><00:07:57.199><c> 17</c><00:07:57.680><c> but</c><00:07:57.840><c> it's</c><00:07:58.000><c> actually</c><00:07:58.400><c> seven</c><00:07:58.720><c> sorry</c>

00:07:59.029 --> 00:07:59.039 align:start position:0%
i wrote 17 but it's actually seven sorry
 

00:07:59.039 --> 00:08:00.869 align:start position:0%
i wrote 17 but it's actually seven sorry
about<00:07:59.280><c> that</c><00:07:59.520><c> i'm</c><00:07:59.680><c> not</c><00:07:59.919><c> paying</c><00:08:00.160><c> attention</c>

00:08:00.869 --> 00:08:00.879 align:start position:0%
about that i'm not paying attention
 

00:08:00.879 --> 00:08:02.390 align:start position:0%
about that i'm not paying attention
but<00:08:01.199><c> okay</c><00:08:01.440><c> we're</c><00:08:01.520><c> gonna</c><00:08:01.680><c> get</c><00:08:01.840><c> rid</c><00:08:02.000><c> of</c><00:08:02.080><c> this</c>

00:08:02.390 --> 00:08:02.400 align:start position:0%
but okay we're gonna get rid of this
 

00:08:02.400 --> 00:08:04.550 align:start position:0%
but okay we're gonna get rid of this
seven<00:08:03.039><c> and</c><00:08:03.360><c> we're</c><00:08:03.520><c> gonna</c><00:08:03.680><c> see</c><00:08:03.919><c> okay</c><00:08:04.160><c> seven</c><00:08:04.400><c> did</c>

00:08:04.550 --> 00:08:04.560 align:start position:0%
seven and we're gonna see okay seven did
 

00:08:04.560 --> 00:08:05.990 align:start position:0%
seven and we're gonna see okay seven did
not<00:08:04.720><c> have</c><00:08:04.879><c> any</c><00:08:05.039><c> children</c><00:08:05.520><c> either</c>

00:08:05.990 --> 00:08:06.000 align:start position:0%
not have any children either
 

00:08:06.000 --> 00:08:08.230 align:start position:0%
not have any children either
so<00:08:06.400><c> now</c><00:08:06.560><c> when</c><00:08:06.720><c> we</c><00:08:07.039><c> when</c><00:08:07.199><c> we</c><00:08:07.360><c> continue</c><00:08:07.680><c> to</c><00:08:07.840><c> go</c>

00:08:08.230 --> 00:08:08.240 align:start position:0%
so now when we when we continue to go
 

00:08:08.240 --> 00:08:09.510 align:start position:0%
so now when we when we continue to go
we're<00:08:08.400><c> gonna</c><00:08:08.560><c> see</c><00:08:08.720><c> okay</c><00:08:08.960><c> there's</c><00:08:09.199><c> nothing</c>

00:08:09.510 --> 00:08:09.520 align:start position:0%
we're gonna see okay there's nothing
 

00:08:09.520 --> 00:08:11.270 align:start position:0%
we're gonna see okay there's nothing
left<00:08:09.759><c> in</c><00:08:09.919><c> our</c><00:08:10.000><c> queue</c><00:08:10.240><c> so</c><00:08:10.400><c> we</c><00:08:10.560><c> have</c><00:08:10.720><c> to</c><00:08:10.879><c> stop</c>

00:08:11.270 --> 00:08:11.280 align:start position:0%
left in our queue so we have to stop
 

00:08:11.280 --> 00:08:11.749 align:start position:0%
left in our queue so we have to stop
right

00:08:11.749 --> 00:08:11.759 align:start position:0%
right
 

00:08:11.759 --> 00:08:13.670 align:start position:0%
right
that's<00:08:12.080><c> how</c><00:08:12.240><c> we</c><00:08:12.400><c> know</c><00:08:12.560><c> we're</c><00:08:12.879><c> done</c><00:08:13.199><c> traversing</c>

00:08:13.670 --> 00:08:13.680 align:start position:0%
that's how we know we're done traversing
 

00:08:13.680 --> 00:08:15.270 align:start position:0%
that's how we know we're done traversing
the<00:08:13.840><c> entire</c><00:08:14.240><c> tree</c><00:08:14.400><c> when</c><00:08:14.639><c> we</c><00:08:14.800><c> went</c><00:08:15.039><c> through</c>

00:08:15.270 --> 00:08:15.280 align:start position:0%
the entire tree when we went through
 

00:08:15.280 --> 00:08:16.230 align:start position:0%
the entire tree when we went through
every<00:08:15.520><c> single</c><00:08:15.840><c> node</c>

00:08:16.230 --> 00:08:16.240 align:start position:0%
every single node
 

00:08:16.240 --> 00:08:17.909 align:start position:0%
every single node
what's<00:08:16.479><c> the</c><00:08:16.560><c> max</c><00:08:17.039><c> level</c><00:08:17.360><c> that</c><00:08:17.440><c> we</c><00:08:17.599><c> actually</c>

00:08:17.909 --> 00:08:17.919 align:start position:0%
what's the max level that we actually
 

00:08:17.919 --> 00:08:20.150 align:start position:0%
what's the max level that we actually
got<00:08:18.240><c> to</c><00:08:18.560><c> of</c><00:08:18.720><c> course</c><00:08:19.039><c> it</c><00:08:19.199><c> was</c><00:08:19.440><c> three</c><00:08:19.759><c> so</c><00:08:19.919><c> that's</c>

00:08:20.150 --> 00:08:20.160 align:start position:0%
got to of course it was three so that's
 

00:08:20.160 --> 00:08:21.350 align:start position:0%
got to of course it was three so that's
what<00:08:20.240><c> we're</c><00:08:20.400><c> going</c><00:08:20.479><c> to</c><00:08:20.560><c> end</c><00:08:20.720><c> up</c><00:08:20.800><c> returning</c><00:08:21.280><c> the</c>

00:08:21.350 --> 00:08:21.360 align:start position:0%
what we're going to end up returning the
 

00:08:21.360 --> 00:08:21.749 align:start position:0%
what we're going to end up returning the
max

00:08:21.749 --> 00:08:21.759 align:start position:0%
max
 

00:08:21.759 --> 00:08:24.390 align:start position:0%
max
depth<00:08:22.080><c> of</c><00:08:22.160><c> this</c><00:08:22.560><c> this</c><00:08:22.800><c> tree</c><00:08:23.120><c> was</c><00:08:23.520><c> three</c><00:08:24.080><c> okay</c>

00:08:24.390 --> 00:08:24.400 align:start position:0%
depth of this this tree was three okay
 

00:08:24.400 --> 00:08:25.830 align:start position:0%
depth of this this tree was three okay
so<00:08:24.720><c> now</c><00:08:24.879><c> let's</c><00:08:25.039><c> get</c><00:08:25.199><c> rid</c><00:08:25.360><c> of</c><00:08:25.440><c> this</c><00:08:25.599><c> and</c>

00:08:25.830 --> 00:08:25.840 align:start position:0%
so now let's get rid of this and
 

00:08:25.840 --> 00:08:26.550 align:start position:0%
so now let's get rid of this and
actually<00:08:26.160><c> do</c>

00:08:26.550 --> 00:08:26.560 align:start position:0%
actually do
 

00:08:26.560 --> 00:08:29.749 align:start position:0%
actually do
that<00:08:26.879><c> solution</c><00:08:27.840><c> so</c><00:08:28.800><c> another</c><00:08:29.120><c> base</c><00:08:29.360><c> case</c><00:08:29.680><c> or</c>

00:08:29.749 --> 00:08:29.759 align:start position:0%
that solution so another base case or
 

00:08:29.759 --> 00:08:31.189 align:start position:0%
that solution so another base case or
the<00:08:29.919><c> same</c><00:08:30.080><c> basis</c><00:08:30.479><c> i'm</c><00:08:30.560><c> just</c><00:08:30.720><c> going</c><00:08:30.800><c> to</c><00:08:30.879><c> say</c>

00:08:31.189 --> 00:08:31.199 align:start position:0%
the same basis i'm just going to say
 

00:08:31.199 --> 00:08:33.509 align:start position:0%
the same basis i'm just going to say
if<00:08:31.360><c> not</c><00:08:31.599><c> root</c><00:08:31.919><c> we</c><00:08:32.000><c> can</c><00:08:32.159><c> still</c><00:08:32.320><c> return</c><00:08:32.880><c> zero</c><00:08:33.279><c> so</c>

00:08:33.509 --> 00:08:33.519 align:start position:0%
if not root we can still return zero so
 

00:08:33.519 --> 00:08:34.790 align:start position:0%
if not root we can still return zero so
if<00:08:33.680><c> there's</c><00:08:34.080><c> no</c><00:08:34.240><c> root</c><00:08:34.399><c> then</c><00:08:34.640><c> we're</c><00:08:34.719><c> gonna</c>

00:08:34.790 --> 00:08:34.800 align:start position:0%
if there's no root then we're gonna
 

00:08:34.800 --> 00:08:35.589 align:start position:0%
if there's no root then we're gonna
return<00:08:35.120><c> zero</c>

00:08:35.589 --> 00:08:35.599 align:start position:0%
return zero
 

00:08:35.599 --> 00:08:37.509 align:start position:0%
return zero
and<00:08:35.760><c> we're</c><00:08:36.000><c> also</c><00:08:36.320><c> going</c><00:08:36.479><c> to</c><00:08:36.560><c> maintain</c><00:08:37.360><c> the</c>

00:08:37.509 --> 00:08:37.519 align:start position:0%
and we're also going to maintain the
 

00:08:37.519 --> 00:08:38.709 align:start position:0%
and we're also going to maintain the
current<00:08:37.839><c> level</c><00:08:38.080><c> that</c><00:08:38.240><c> we're</c><00:08:38.399><c> at</c><00:08:38.560><c> and</c><00:08:38.640><c> we're</c>

00:08:38.709 --> 00:08:38.719 align:start position:0%
current level that we're at and we're
 

00:08:38.719 --> 00:08:40.949 align:start position:0%
current level that we're at and we're
gonna<00:08:38.880><c> have</c><00:08:39.120><c> a</c><00:08:39.279><c> queue</c><00:08:39.599><c> which</c><00:08:39.839><c> in</c><00:08:40.000><c> this</c><00:08:40.240><c> case</c>

00:08:40.949 --> 00:08:40.959 align:start position:0%
gonna have a queue which in this case
 

00:08:40.959 --> 00:08:43.829 align:start position:0%
gonna have a queue which in this case
is<00:08:41.120><c> going</c><00:08:41.360><c> to</c><00:08:41.599><c> be</c><00:08:41.919><c> a</c><00:08:42.320><c> deck</c><00:08:42.880><c> and</c><00:08:43.279><c> initially</c>

00:08:43.829 --> 00:08:43.839 align:start position:0%
is going to be a deck and initially
 

00:08:43.839 --> 00:08:45.269 align:start position:0%
is going to be a deck and initially
we're<00:08:44.000><c> going</c><00:08:44.080><c> to</c><00:08:44.240><c> initialize</c><00:08:44.800><c> this</c><00:08:45.040><c> queue</c>

00:08:45.269 --> 00:08:45.279 align:start position:0%
we're going to initialize this queue
 

00:08:45.279 --> 00:08:46.949 align:start position:0%
we're going to initialize this queue
with<00:08:45.519><c> just</c><00:08:45.680><c> a</c><00:08:45.839><c> single</c><00:08:46.160><c> value</c><00:08:46.560><c> the</c>

00:08:46.949 --> 00:08:46.959 align:start position:0%
with just a single value the
 

00:08:46.959 --> 00:08:49.350 align:start position:0%
with just a single value the
root<00:08:47.600><c> i</c><00:08:47.680><c> think</c><00:08:47.920><c> most</c><00:08:48.240><c> libraries</c><00:08:48.800><c> do</c><00:08:48.959><c> have</c><00:08:49.200><c> a</c>

00:08:49.350 --> 00:08:49.360 align:start position:0%
root i think most libraries do have a
 

00:08:49.360 --> 00:08:50.710 align:start position:0%
root i think most libraries do have a
queue<00:08:49.680><c> structure</c><00:08:50.160><c> so</c>

00:08:50.710 --> 00:08:50.720 align:start position:0%
queue structure so
 

00:08:50.720 --> 00:08:52.070 align:start position:0%
queue structure so
we're<00:08:50.880><c> going</c><00:08:50.959><c> to</c><00:08:51.040><c> initialize</c><00:08:51.519><c> our</c><00:08:51.600><c> queue</c><00:08:51.839><c> like</c>

00:08:52.070 --> 00:08:52.080 align:start position:0%
we're going to initialize our queue like
 

00:08:52.080 --> 00:08:53.430 align:start position:0%
we're going to initialize our queue like
that<00:08:52.399><c> we're</c><00:08:52.560><c> going</c><00:08:52.640><c> to</c><00:08:52.720><c> have</c><00:08:52.880><c> our</c><00:08:53.120><c> level</c>

00:08:53.430 --> 00:08:53.440 align:start position:0%
that we're going to have our level
 

00:08:53.440 --> 00:08:54.790 align:start position:0%
that we're going to have our level
initially<00:08:53.760><c> at</c><00:08:53.839><c> one</c><00:08:54.000><c> we're</c><00:08:54.160><c> gonna</c><00:08:54.320><c> keep</c><00:08:54.560><c> going</c>

00:08:54.790 --> 00:08:54.800 align:start position:0%
initially at one we're gonna keep going
 

00:08:54.800 --> 00:08:56.630 align:start position:0%
initially at one we're gonna keep going
until<00:08:55.040><c> the</c><00:08:55.200><c> queue</c><00:08:55.440><c> is</c><00:08:55.600><c> empty</c><00:08:55.920><c> right</c><00:08:56.080><c> now</c><00:08:56.320><c> so</c>

00:08:56.630 --> 00:08:56.640 align:start position:0%
until the queue is empty right now so
 

00:08:56.640 --> 00:08:58.550 align:start position:0%
until the queue is empty right now so
now<00:08:56.880><c> we</c><00:08:57.120><c> want</c><00:08:57.279><c> to</c><00:08:57.519><c> go</c><00:08:57.760><c> through</c><00:08:57.920><c> the</c><00:08:58.160><c> queue</c><00:08:58.480><c> and</c>

00:08:58.550 --> 00:08:58.560 align:start position:0%
now we want to go through the queue and
 

00:08:58.560 --> 00:08:59.190 align:start position:0%
now we want to go through the queue and
remove

00:08:59.190 --> 00:08:59.200 align:start position:0%
remove
 

00:08:59.200 --> 00:09:01.350 align:start position:0%
remove
every<00:08:59.519><c> element</c><00:08:59.920><c> that's</c><00:09:00.320><c> currently</c><00:09:01.040><c> in</c><00:09:01.200><c> it</c>

00:09:01.350 --> 00:09:01.360 align:start position:0%
every element that's currently in it
 

00:09:01.360 --> 00:09:03.110 align:start position:0%
every element that's currently in it
right<00:09:01.600><c> so</c><00:09:01.839><c> however</c><00:09:02.160><c> many</c><00:09:02.480><c> are</c><00:09:02.640><c> in</c><00:09:02.720><c> it</c><00:09:02.800><c> so</c><00:09:02.959><c> we're</c>

00:09:03.110 --> 00:09:03.120 align:start position:0%
right so however many are in it so we're
 

00:09:03.120 --> 00:09:03.990 align:start position:0%
right so however many are in it so we're
gonna<00:09:03.279><c> say</c><00:09:03.440><c> for</c><00:09:03.680><c> i</c>

00:09:03.990 --> 00:09:04.000 align:start position:0%
gonna say for i
 

00:09:04.000 --> 00:09:06.630 align:start position:0%
gonna say for i
in<00:09:04.240><c> range</c><00:09:05.040><c> length</c><00:09:05.360><c> of</c><00:09:05.519><c> the</c><00:09:05.680><c> queue</c><00:09:06.080><c> at</c><00:09:06.240><c> this</c>

00:09:06.630 --> 00:09:06.640 align:start position:0%
in range length of the queue at this
 

00:09:06.640 --> 00:09:07.990 align:start position:0%
in range length of the queue at this
current<00:09:07.120><c> time</c><00:09:07.440><c> right</c><00:09:07.600><c> so</c><00:09:07.680><c> we're</c><00:09:07.839><c> going</c><00:09:07.920><c> to</c>

00:09:07.990 --> 00:09:08.000 align:start position:0%
current time right so we're going to
 

00:09:08.000 --> 00:09:09.910 align:start position:0%
current time right so we're going to
take<00:09:08.160><c> a</c><00:09:08.320><c> snapshot</c><00:09:09.040><c> of</c><00:09:09.200><c> the</c><00:09:09.360><c> length</c><00:09:09.680><c> of</c><00:09:09.760><c> the</c>

00:09:09.910 --> 00:09:09.920 align:start position:0%
take a snapshot of the length of the
 

00:09:09.920 --> 00:09:11.829 align:start position:0%
take a snapshot of the length of the
queue<00:09:10.160><c> maybe</c><00:09:10.399><c> it</c><00:09:10.560><c> has</c><00:09:10.720><c> one</c><00:09:11.040><c> element</c><00:09:11.360><c> maybe</c><00:09:11.680><c> it</c>

00:09:11.829 --> 00:09:11.839 align:start position:0%
queue maybe it has one element maybe it
 

00:09:11.839 --> 00:09:12.550 align:start position:0%
queue maybe it has one element maybe it
has<00:09:12.080><c> two</c>

00:09:12.550 --> 00:09:12.560 align:start position:0%
has two
 

00:09:12.560 --> 00:09:14.630 align:start position:0%
has two
we're<00:09:12.720><c> going</c><00:09:12.800><c> to</c><00:09:12.880><c> take</c><00:09:13.040><c> a</c><00:09:13.120><c> snapshot</c><00:09:13.920><c> remove</c>

00:09:14.630 --> 00:09:14.640 align:start position:0%
we're going to take a snapshot remove
 

00:09:14.640 --> 00:09:16.790 align:start position:0%
we're going to take a snapshot remove
all<00:09:14.880><c> of</c><00:09:15.040><c> those</c><00:09:15.279><c> and</c><00:09:15.360><c> then</c><00:09:15.680><c> add</c><00:09:16.000><c> the</c><00:09:16.240><c> children</c>

00:09:16.790 --> 00:09:16.800 align:start position:0%
all of those and then add the children
 

00:09:16.800 --> 00:09:19.509 align:start position:0%
all of those and then add the children
so<00:09:17.040><c> basically</c><00:09:17.600><c> traverse</c><00:09:18.080><c> the</c><00:09:18.240><c> entire</c><00:09:18.959><c> level</c>

00:09:19.509 --> 00:09:19.519 align:start position:0%
so basically traverse the entire level
 

00:09:19.519 --> 00:09:21.190 align:start position:0%
so basically traverse the entire level
and<00:09:19.680><c> then</c><00:09:19.920><c> add</c><00:09:20.160><c> the</c><00:09:20.399><c> next</c><00:09:20.800><c> level</c>

00:09:21.190 --> 00:09:21.200 align:start position:0%
and then add the next level
 

00:09:21.200 --> 00:09:22.470 align:start position:0%
and then add the next level
and<00:09:21.279><c> then</c><00:09:21.440><c> once</c><00:09:21.680><c> we're</c><00:09:21.920><c> done</c><00:09:22.080><c> with</c><00:09:22.240><c> that</c>

00:09:22.470 --> 00:09:22.480 align:start position:0%
and then once we're done with that
 

00:09:22.480 --> 00:09:24.389 align:start position:0%
and then once we're done with that
entire<00:09:22.959><c> loop</c><00:09:23.200><c> we're</c><00:09:23.360><c> going</c><00:09:23.440><c> to</c><00:09:23.760><c> increase</c><00:09:24.160><c> the</c>

00:09:24.389 --> 00:09:24.399 align:start position:0%
entire loop we're going to increase the
 

00:09:24.399 --> 00:09:25.910 align:start position:0%
entire loop we're going to increase the
number<00:09:24.800><c> of</c><00:09:25.040><c> levels</c>

00:09:25.910 --> 00:09:25.920 align:start position:0%
number of levels
 

00:09:25.920 --> 00:09:27.350 align:start position:0%
number of levels
so<00:09:26.160><c> for</c><00:09:26.399><c> every</c><00:09:26.640><c> node</c><00:09:26.880><c> in</c><00:09:26.959><c> the</c><00:09:27.040><c> queue</c><00:09:27.279><c> we're</c>

00:09:27.350 --> 00:09:27.360 align:start position:0%
so for every node in the queue we're
 

00:09:27.360 --> 00:09:29.509 align:start position:0%
so for every node in the queue we're
going<00:09:27.440><c> to</c><00:09:27.600><c> go</c><00:09:27.680><c> ahead</c><00:09:27.920><c> and</c><00:09:28.160><c> pop</c><00:09:28.560><c> from</c><00:09:28.720><c> the</c><00:09:29.040><c> left</c>

00:09:29.509 --> 00:09:29.519 align:start position:0%
going to go ahead and pop from the left
 

00:09:29.519 --> 00:09:31.269 align:start position:0%
going to go ahead and pop from the left
just<00:09:29.760><c> like</c><00:09:30.000><c> we</c><00:09:30.240><c> did</c><00:09:30.560><c> in</c><00:09:30.640><c> the</c><00:09:30.800><c> picture</c><00:09:31.120><c> we're</c>

00:09:31.269 --> 00:09:31.279 align:start position:0%
just like we did in the picture we're
 

00:09:31.279 --> 00:09:32.710 align:start position:0%
just like we did in the picture we're
always<00:09:31.519><c> going</c><00:09:31.600><c> to</c><00:09:31.680><c> be</c><00:09:31.839><c> popping</c><00:09:32.160><c> from</c><00:09:32.320><c> the</c><00:09:32.480><c> left</c>

00:09:32.710 --> 00:09:32.720 align:start position:0%
always going to be popping from the left
 

00:09:32.720 --> 00:09:33.750 align:start position:0%
always going to be popping from the left
of<00:09:32.800><c> the</c><00:09:32.959><c> queue</c><00:09:33.120><c> and</c><00:09:33.200><c> we're</c><00:09:33.360><c> always</c><00:09:33.600><c> going</c><00:09:33.680><c> to</c>

00:09:33.750 --> 00:09:33.760 align:start position:0%
of the queue and we're always going to
 

00:09:33.760 --> 00:09:35.509 align:start position:0%
of the queue and we're always going to
be<00:09:34.000><c> adding</c><00:09:34.320><c> to</c><00:09:34.560><c> the</c><00:09:34.720><c> right</c><00:09:34.959><c> of</c><00:09:35.040><c> the</c><00:09:35.200><c> queue</c><00:09:35.360><c> so</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
be adding to the right of the queue so
 

00:09:35.519 --> 00:09:36.710 align:start position:0%
be adding to the right of the queue so
we're<00:09:35.600><c> going</c><00:09:35.680><c> to</c><00:09:35.839><c> pop</c><00:09:36.080><c> a</c><00:09:36.240><c> node</c>

00:09:36.710 --> 00:09:36.720 align:start position:0%
we're going to pop a node
 

00:09:36.720 --> 00:09:38.150 align:start position:0%
we're going to pop a node
and<00:09:36.800><c> then</c><00:09:36.959><c> we're</c><00:09:37.120><c> going</c><00:09:37.200><c> to</c><00:09:37.360><c> go</c><00:09:37.519><c> ahead</c><00:09:37.680><c> and</c><00:09:37.839><c> add</c>

00:09:38.150 --> 00:09:38.160 align:start position:0%
and then we're going to go ahead and add
 

00:09:38.160 --> 00:09:39.990 align:start position:0%
and then we're going to go ahead and add
its<00:09:38.480><c> children</c><00:09:39.360><c> to</c>

00:09:39.990 --> 00:09:40.000 align:start position:0%
its children to
 

00:09:40.000 --> 00:09:42.150 align:start position:0%
its children to
the<00:09:40.240><c> queue</c><00:09:40.720><c> only</c><00:09:40.959><c> if</c><00:09:41.120><c> the</c><00:09:41.279><c> children</c><00:09:41.680><c> are</c><00:09:41.920><c> not</c>

00:09:42.150 --> 00:09:42.160 align:start position:0%
the queue only if the children are not
 

00:09:42.160 --> 00:09:45.030 align:start position:0%
the queue only if the children are not
null<00:09:42.480><c> so</c><00:09:42.640><c> if</c><00:09:42.880><c> node.left</c><00:09:43.920><c> is</c><00:09:44.240><c> non-null</c>

00:09:45.030 --> 00:09:45.040 align:start position:0%
null so if node.left is non-null
 

00:09:45.040 --> 00:09:46.470 align:start position:0%
null so if node.left is non-null
then<00:09:45.200><c> we're</c><00:09:45.360><c> going</c><00:09:45.440><c> to</c><00:09:45.519><c> go</c><00:09:45.680><c> ahead</c><00:09:45.839><c> and</c><00:09:45.920><c> say</c><00:09:46.160><c> q</c>

00:09:46.470 --> 00:09:46.480 align:start position:0%
then we're going to go ahead and say q
 

00:09:46.480 --> 00:09:48.230 align:start position:0%
then we're going to go ahead and say q
dot<00:09:46.800><c> append</c><00:09:47.680><c> node</c>

00:09:48.230 --> 00:09:48.240 align:start position:0%
dot append node
 

00:09:48.240 --> 00:09:51.910 align:start position:0%
dot append node
dot<00:09:48.640><c> left</c><00:09:49.519><c> if</c><00:09:49.800><c> node.right</c><00:09:50.959><c> is</c><00:09:51.200><c> non-null</c><00:09:51.760><c> then</c>

00:09:51.910 --> 00:09:51.920 align:start position:0%
dot left if node.right is non-null then
 

00:09:51.920 --> 00:09:53.269 align:start position:0%
dot left if node.right is non-null then
we're<00:09:52.080><c> going</c><00:09:52.160><c> to</c><00:09:52.240><c> append</c><00:09:52.640><c> that</c><00:09:52.959><c> one</c>

00:09:53.269 --> 00:09:53.279 align:start position:0%
we're going to append that one
 

00:09:53.279 --> 00:09:56.389 align:start position:0%
we're going to append that one
as<00:09:53.519><c> well</c><00:09:53.839><c> so</c><00:09:54.080><c> q</c><00:09:54.320><c> dot</c><00:09:54.560><c> append</c><00:09:55.519><c> no</c><00:09:55.920><c> dot</c>

00:09:56.389 --> 00:09:56.399 align:start position:0%
as well so q dot append no dot
 

00:09:56.399 --> 00:09:58.150 align:start position:0%
as well so q dot append no dot
right<00:09:57.040><c> and</c><00:09:57.279><c> actually</c><00:09:57.600><c> if</c><00:09:57.760><c> we're</c><00:09:57.839><c> going</c><00:09:57.920><c> to</c><00:09:58.000><c> be</c>

00:09:58.150 --> 00:09:58.160 align:start position:0%
right and actually if we're going to be
 

00:09:58.160 --> 00:09:59.509 align:start position:0%
right and actually if we're going to be
doing<00:09:58.399><c> it</c><00:09:58.480><c> this</c><00:09:58.640><c> way</c><00:09:58.800><c> we</c><00:09:58.959><c> should</c><00:09:59.120><c> probably</c>

00:09:59.509 --> 00:09:59.519 align:start position:0%
doing it this way we should probably
 

00:09:59.519 --> 00:10:01.030 align:start position:0%
doing it this way we should probably
initialize<00:10:00.080><c> our</c><00:10:00.320><c> level</c><00:10:00.640><c> to</c>

00:10:01.030 --> 00:10:01.040 align:start position:0%
initialize our level to
 

00:10:01.040 --> 00:10:03.030 align:start position:0%
initialize our level to
zero<00:10:01.600><c> so</c><00:10:02.079><c> you</c><00:10:02.240><c> can</c><00:10:02.320><c> see</c><00:10:02.480><c> that</c><00:10:02.560><c> we're</c><00:10:02.800><c> never</c>

00:10:03.030 --> 00:10:03.040 align:start position:0%
zero so you can see that we're never
 

00:10:03.040 --> 00:10:04.150 align:start position:0%
zero so you can see that we're never
going<00:10:03.120><c> to</c><00:10:03.200><c> be</c><00:10:03.440><c> adding</c>

00:10:04.150 --> 00:10:04.160 align:start position:0%
going to be adding
 

00:10:04.160 --> 00:10:07.350 align:start position:0%
going to be adding
null<00:10:04.560><c> nodes</c><00:10:04.959><c> to</c><00:10:05.200><c> our</c><00:10:05.600><c> our</c><00:10:06.160><c> queue</c><00:10:06.800><c> so</c><00:10:07.040><c> every</c>

00:10:07.350 --> 00:10:07.360 align:start position:0%
null nodes to our our queue so every
 

00:10:07.360 --> 00:10:07.670 align:start position:0%
null nodes to our our queue so every
time

00:10:07.670 --> 00:10:07.680 align:start position:0%
time
 

00:10:07.680 --> 00:10:09.509 align:start position:0%
time
our<00:10:07.839><c> queue</c><00:10:08.079><c> is</c><00:10:08.240><c> non-empty</c><00:10:08.800><c> we</c><00:10:08.880><c> can</c><00:10:09.040><c> be</c><00:10:09.279><c> sure</c>

00:10:09.509 --> 00:10:09.519 align:start position:0%
our queue is non-empty we can be sure
 

00:10:09.519 --> 00:10:11.110 align:start position:0%
our queue is non-empty we can be sure
that<00:10:09.680><c> there's</c><00:10:10.000><c> at</c><00:10:10.160><c> least</c>

00:10:11.110 --> 00:10:11.120 align:start position:0%
that there's at least
 

00:10:11.120 --> 00:10:13.509 align:start position:0%
that there's at least
a<00:10:11.279><c> non-empty</c><00:10:12.000><c> node</c><00:10:12.399><c> in</c><00:10:12.560><c> the</c><00:10:12.720><c> queue</c><00:10:13.120><c> right</c><00:10:13.279><c> so</c>

00:10:13.509 --> 00:10:13.519 align:start position:0%
a non-empty node in the queue right so
 

00:10:13.519 --> 00:10:15.190 align:start position:0%
a non-empty node in the queue right so
we're<00:10:13.760><c> basically</c><00:10:14.240><c> counting</c><00:10:14.640><c> the</c><00:10:14.800><c> number</c><00:10:15.040><c> of</c>

00:10:15.190 --> 00:10:15.200 align:start position:0%
we're basically counting the number of
 

00:10:15.200 --> 00:10:16.310 align:start position:0%
we're basically counting the number of
times<00:10:15.519><c> our</c><00:10:15.600><c> q</c><00:10:15.839><c> is</c><00:10:16.000><c> not</c>

00:10:16.310 --> 00:10:16.320 align:start position:0%
times our q is not
 

00:10:16.320 --> 00:10:18.470 align:start position:0%
times our q is not
is<00:10:16.480><c> going</c><00:10:16.560><c> to</c><00:10:16.640><c> be</c><00:10:16.800><c> non-empty</c><00:10:17.600><c> so</c><00:10:17.839><c> each</c><00:10:18.079><c> time</c><00:10:18.320><c> it</c>

00:10:18.470 --> 00:10:18.480 align:start position:0%
is going to be non-empty so each time it
 

00:10:18.480 --> 00:10:20.389 align:start position:0%
is going to be non-empty so each time it
is<00:10:18.720><c> we</c><00:10:18.880><c> can</c><00:10:19.040><c> basically</c><00:10:19.519><c> increment</c><00:10:19.920><c> the</c><00:10:20.079><c> number</c>

00:10:20.389 --> 00:10:20.399 align:start position:0%
is we can basically increment the number
 

00:10:20.399 --> 00:10:21.829 align:start position:0%
is we can basically increment the number
of<00:10:20.720><c> levels</c>

00:10:21.829 --> 00:10:21.839 align:start position:0%
of levels
 

00:10:21.839 --> 00:10:23.829 align:start position:0%
of levels
and<00:10:22.079><c> then</c><00:10:22.320><c> at</c><00:10:22.480><c> the</c><00:10:22.640><c> end</c><00:10:22.959><c> once</c><00:10:23.200><c> our</c><00:10:23.440><c> q</c><00:10:23.680><c> is</c>

00:10:23.829 --> 00:10:23.839 align:start position:0%
and then at the end once our q is
 

00:10:23.839 --> 00:10:26.310 align:start position:0%
and then at the end once our q is
finally<00:10:24.320><c> empty</c><00:10:24.800><c> we</c><00:10:24.959><c> know</c><00:10:25.200><c> that</c><00:10:25.360><c> we</c><00:10:25.600><c> have</c>

00:10:26.310 --> 00:10:26.320 align:start position:0%
finally empty we know that we have
 

00:10:26.320 --> 00:10:27.829 align:start position:0%
finally empty we know that we have
totaled<00:10:26.720><c> up</c><00:10:26.880><c> the</c><00:10:27.040><c> number</c><00:10:27.200><c> of</c><00:10:27.360><c> levels</c><00:10:27.680><c> and</c><00:10:27.760><c> we</c>

00:10:27.829 --> 00:10:27.839 align:start position:0%
totaled up the number of levels and we
 

00:10:27.839 --> 00:10:29.430 align:start position:0%
totaled up the number of levels and we
can<00:10:28.000><c> go</c><00:10:28.160><c> ahead</c><00:10:28.399><c> and</c><00:10:28.480><c> return</c><00:10:28.959><c> that</c>

00:10:29.430 --> 00:10:29.440 align:start position:0%
can go ahead and return that
 

00:10:29.440 --> 00:10:31.430 align:start position:0%
can go ahead and return that
so<00:10:29.600><c> you</c><00:10:29.760><c> can</c><00:10:29.920><c> see</c><00:10:30.160><c> this</c><00:10:30.320><c> solution</c><00:10:30.800><c> also</c><00:10:31.120><c> works</c>

00:10:31.430 --> 00:10:31.440 align:start position:0%
so you can see this solution also works
 

00:10:31.440 --> 00:10:33.269 align:start position:0%
so you can see this solution also works
and<00:10:31.600><c> it's</c><00:10:31.760><c> also</c><00:10:32.079><c> pretty</c><00:10:32.399><c> efficient</c><00:10:32.880><c> so</c><00:10:33.040><c> this</c>

00:10:33.269 --> 00:10:33.279 align:start position:0%
and it's also pretty efficient so this
 

00:10:33.279 --> 00:10:35.110 align:start position:0%
and it's also pretty efficient so this
is<00:10:33.360><c> the</c><00:10:33.519><c> breadth</c><00:10:33.839><c> first</c><00:10:34.079><c> search</c><00:10:34.399><c> solution</c>

00:10:35.110 --> 00:10:35.120 align:start position:0%
is the breadth first search solution
 

00:10:35.120 --> 00:10:36.710 align:start position:0%
is the breadth first search solution
but<00:10:35.279><c> there's</c><00:10:35.519><c> one</c><00:10:35.760><c> more</c><00:10:36.000><c> solution</c><00:10:36.399><c> i</c><00:10:36.480><c> want</c><00:10:36.640><c> to</c>

00:10:36.710 --> 00:10:36.720 align:start position:0%
but there's one more solution i want to
 

00:10:36.720 --> 00:10:38.230 align:start position:0%
but there's one more solution i want to
show<00:10:36.880><c> you</c><00:10:37.120><c> the</c><00:10:37.360><c> iterative</c>

00:10:38.230 --> 00:10:38.240 align:start position:0%
show you the iterative
 

00:10:38.240 --> 00:10:39.990 align:start position:0%
show you the iterative
depth<00:10:38.480><c> first</c><00:10:38.720><c> search</c><00:10:39.040><c> solution</c><00:10:39.440><c> basically</c>

00:10:39.990 --> 00:10:40.000 align:start position:0%
depth first search solution basically
 

00:10:40.000 --> 00:10:42.150 align:start position:0%
depth first search solution basically
depth<00:10:40.320><c> first</c><00:10:40.640><c> search</c><00:10:41.120><c> without</c><00:10:41.760><c> using</c>

00:10:42.150 --> 00:10:42.160 align:start position:0%
depth first search without using
 

00:10:42.160 --> 00:10:43.110 align:start position:0%
depth first search without using
recursion

00:10:43.110 --> 00:10:43.120 align:start position:0%
recursion
 

00:10:43.120 --> 00:10:44.870 align:start position:0%
recursion
so<00:10:43.360><c> now</c><00:10:43.519><c> we're</c><00:10:43.680><c> going</c><00:10:43.760><c> to</c><00:10:43.839><c> do</c><00:10:44.079><c> iterative</c><00:10:44.640><c> depth</c>

00:10:44.870 --> 00:10:44.880 align:start position:0%
so now we're going to do iterative depth
 

00:10:44.880 --> 00:10:46.230 align:start position:0%
so now we're going to do iterative depth
first<00:10:45.120><c> search</c><00:10:45.440><c> and</c><00:10:45.600><c> we're</c><00:10:45.839><c> going</c><00:10:46.000><c> to</c><00:10:46.079><c> be</c>

00:10:46.230 --> 00:10:46.240 align:start position:0%
first search and we're going to be
 

00:10:46.240 --> 00:10:48.069 align:start position:0%
first search and we're going to be
needing<00:10:46.560><c> a</c><00:10:46.720><c> stack</c><00:10:47.120><c> data</c><00:10:47.440><c> structure</c><00:10:47.839><c> because</c>

00:10:48.069 --> 00:10:48.079 align:start position:0%
needing a stack data structure because
 

00:10:48.079 --> 00:10:49.190 align:start position:0%
needing a stack data structure because
we're<00:10:48.320><c> basically</c><00:10:48.720><c> going</c><00:10:48.800><c> to</c><00:10:48.880><c> be</c>

00:10:49.190 --> 00:10:49.200 align:start position:0%
we're basically going to be
 

00:10:49.200 --> 00:10:51.670 align:start position:0%
we're basically going to be
emulating<00:10:49.839><c> the</c><00:10:50.079><c> call</c><00:10:50.480><c> stack</c><00:10:50.800><c> the</c><00:10:50.959><c> recursive</c>

00:10:51.670 --> 00:10:51.680 align:start position:0%
emulating the call stack the recursive
 

00:10:51.680 --> 00:10:52.790 align:start position:0%
emulating the call stack the recursive
call<00:10:51.920><c> stack</c><00:10:52.240><c> right</c><00:10:52.480><c> so</c>

00:10:52.790 --> 00:10:52.800 align:start position:0%
call stack right so
 

00:10:52.800 --> 00:10:55.110 align:start position:0%
call stack right so
you<00:10:52.959><c> know</c><00:10:53.200><c> in</c><00:10:53.360><c> a</c><00:10:53.440><c> recursive</c><00:10:54.000><c> dfs</c><00:10:54.640><c> we</c><00:10:54.800><c> go</c><00:10:54.959><c> to</c>

00:10:55.110 --> 00:10:55.120 align:start position:0%
you know in a recursive dfs we go to
 

00:10:55.120 --> 00:10:56.550 align:start position:0%
you know in a recursive dfs we go to
this<00:10:55.360><c> node</c><00:10:55.600><c> right</c><00:10:55.760><c> and</c><00:10:55.839><c> then</c><00:10:56.000><c> we</c><00:10:56.079><c> go</c><00:10:56.240><c> to</c><00:10:56.399><c> the</c>

00:10:56.550 --> 00:10:56.560 align:start position:0%
this node right and then we go to the
 

00:10:56.560 --> 00:10:57.990 align:start position:0%
this node right and then we go to the
left<00:10:56.800><c> sub</c><00:10:57.040><c> tree</c><00:10:57.200><c> right</c><00:10:57.360><c> and</c><00:10:57.440><c> when</c><00:10:57.600><c> we're</c><00:10:57.760><c> done</c>

00:10:57.990 --> 00:10:58.000 align:start position:0%
left sub tree right and when we're done
 

00:10:58.000 --> 00:10:58.949 align:start position:0%
left sub tree right and when we're done
with<00:10:58.079><c> the</c><00:10:58.240><c> left</c><00:10:58.399><c> sub</c><00:10:58.640><c> tree</c>

00:10:58.949 --> 00:10:58.959 align:start position:0%
with the left sub tree
 

00:10:58.959 --> 00:11:02.069 align:start position:0%
with the left sub tree
then<00:10:59.120><c> we</c><00:10:59.519><c> pop</c><00:11:00.240><c> back</c><00:11:00.720><c> up</c><00:11:01.120><c> to</c><00:11:01.279><c> the</c><00:11:01.519><c> three</c>

00:11:02.069 --> 00:11:02.079 align:start position:0%
then we pop back up to the three
 

00:11:02.079 --> 00:11:04.310 align:start position:0%
then we pop back up to the three
and<00:11:02.160><c> then</c><00:11:02.399><c> we</c><00:11:02.560><c> go</c><00:11:02.800><c> down</c><00:11:03.360><c> to</c><00:11:03.920><c> you</c><00:11:04.079><c> know</c><00:11:04.160><c> the</c>

00:11:04.310 --> 00:11:04.320 align:start position:0%
and then we go down to you know the
 

00:11:04.320 --> 00:11:05.990 align:start position:0%
and then we go down to you know the
right<00:11:04.560><c> subtree</c><00:11:05.200><c> etc</c>

00:11:05.990 --> 00:11:06.000 align:start position:0%
right subtree etc
 

00:11:06.000 --> 00:11:08.470 align:start position:0%
right subtree etc
right<00:11:06.240><c> that's</c><00:11:06.480><c> like</c><00:11:06.720><c> in</c><00:11:07.040><c> in</c><00:11:07.360><c> order</c><00:11:07.600><c> dfs</c><00:11:08.240><c> but</c>

00:11:08.470 --> 00:11:08.480 align:start position:0%
right that's like in in order dfs but
 

00:11:08.480 --> 00:11:09.910 align:start position:0%
right that's like in in order dfs but
we're<00:11:08.640><c> going</c><00:11:08.800><c> to</c><00:11:08.880><c> be</c><00:11:09.040><c> implementing</c>

00:11:09.910 --> 00:11:09.920 align:start position:0%
we're going to be implementing
 

00:11:09.920 --> 00:11:12.069 align:start position:0%
we're going to be implementing
pre-order<00:11:10.640><c> dfs</c><00:11:11.200><c> with</c><00:11:11.360><c> a</c><00:11:11.440><c> stack</c><00:11:11.760><c> because</c>

00:11:12.069 --> 00:11:12.079 align:start position:0%
pre-order dfs with a stack because
 

00:11:12.079 --> 00:11:13.990 align:start position:0%
pre-order dfs with a stack because
pre-order<00:11:12.640><c> is</c><00:11:12.800><c> actually</c><00:11:13.200><c> by</c><00:11:13.519><c> far</c><00:11:13.760><c> the</c>

00:11:13.990 --> 00:11:14.000 align:start position:0%
pre-order is actually by far the
 

00:11:14.000 --> 00:11:16.069 align:start position:0%
pre-order is actually by far the
easiest<00:11:14.480><c> one</c><00:11:14.720><c> to</c><00:11:14.880><c> do</c><00:11:15.200><c> iteratively</c><00:11:15.760><c> so</c><00:11:15.920><c> what</c>

00:11:16.069 --> 00:11:16.079 align:start position:0%
easiest one to do iteratively so what
 

00:11:16.079 --> 00:11:17.030 align:start position:0%
easiest one to do iteratively so what
we're<00:11:16.240><c> going</c><00:11:16.320><c> to</c><00:11:16.399><c> do</c><00:11:16.480><c> is</c><00:11:16.640><c> we're</c><00:11:16.720><c> going</c><00:11:16.800><c> to</c><00:11:16.880><c> say</c>

00:11:17.030 --> 00:11:17.040 align:start position:0%
we're going to do is we're going to say
 

00:11:17.040 --> 00:11:17.590 align:start position:0%
we're going to do is we're going to say
okay

00:11:17.590 --> 00:11:17.600 align:start position:0%
okay
 

00:11:17.600 --> 00:11:19.829 align:start position:0%
okay
come<00:11:17.839><c> to</c><00:11:18.000><c> this</c><00:11:18.240><c> node</c><00:11:18.720><c> process</c><00:11:19.279><c> this</c><00:11:19.519><c> node</c>

00:11:19.829 --> 00:11:19.839 align:start position:0%
come to this node process this node
 

00:11:19.839 --> 00:11:20.870 align:start position:0%
come to this node process this node
right<00:11:20.320><c> then</c>

00:11:20.870 --> 00:11:20.880 align:start position:0%
right then
 

00:11:20.880 --> 00:11:23.350 align:start position:0%
right then
add<00:11:21.440><c> the</c><00:11:21.680><c> children</c><00:11:22.320><c> to</c><00:11:22.480><c> the</c><00:11:22.640><c> stack</c><00:11:22.959><c> the</c><00:11:23.120><c> left</c>

00:11:23.350 --> 00:11:23.360 align:start position:0%
add the children to the stack the left
 

00:11:23.360 --> 00:11:24.550 align:start position:0%
add the children to the stack the left
and<00:11:23.440><c> right</c><00:11:23.760><c> children</c><00:11:24.160><c> right</c>

00:11:24.550 --> 00:11:24.560 align:start position:0%
and right children right
 

00:11:24.560 --> 00:11:26.470 align:start position:0%
and right children right
now<00:11:24.800><c> in</c><00:11:25.200><c> now</c><00:11:25.440><c> our</c><00:11:25.519><c> normal</c><00:11:25.920><c> pre-order</c>

00:11:26.470 --> 00:11:26.480 align:start position:0%
now in now our normal pre-order
 

00:11:26.480 --> 00:11:28.150 align:start position:0%
now in now our normal pre-order
traversal<00:11:26.959><c> we'll</c><00:11:27.120><c> do</c><00:11:27.279><c> the</c><00:11:27.360><c> left</c><00:11:27.600><c> subtree</c>

00:11:28.150 --> 00:11:28.160 align:start position:0%
traversal we'll do the left subtree
 

00:11:28.160 --> 00:11:29.670 align:start position:0%
traversal we'll do the left subtree
first<00:11:28.399><c> so</c><00:11:28.560><c> what</c><00:11:28.720><c> we're</c><00:11:28.880><c> going</c><00:11:28.959><c> to</c><00:11:29.040><c> do</c><00:11:29.279><c> is</c><00:11:29.440><c> now</c>

00:11:29.670 --> 00:11:29.680 align:start position:0%
first so what we're going to do is now
 

00:11:29.680 --> 00:11:30.310 align:start position:0%
first so what we're going to do is now
say<00:11:29.920><c> okay</c>

00:11:30.310 --> 00:11:30.320 align:start position:0%
say okay
 

00:11:30.320 --> 00:11:31.990 align:start position:0%
say okay
let's<00:11:30.560><c> do</c><00:11:30.720><c> the</c><00:11:30.880><c> left</c><00:11:31.040><c> subtree</c><00:11:31.519><c> well</c><00:11:31.760><c> well</c>

00:11:31.990 --> 00:11:32.000 align:start position:0%
let's do the left subtree well well
 

00:11:32.000 --> 00:11:33.350 align:start position:0%
let's do the left subtree well well
we're<00:11:32.160><c> going</c><00:11:32.240><c> to</c><00:11:32.320><c> go</c><00:11:32.480><c> to</c><00:11:32.640><c> the</c><00:11:32.720><c> left</c><00:11:32.959><c> subtree</c>

00:11:33.350 --> 00:11:33.360 align:start position:0%
we're going to go to the left subtree
 

00:11:33.360 --> 00:11:34.870 align:start position:0%
we're going to go to the left subtree
it's<00:11:33.519><c> pre-order</c><00:11:34.000><c> so</c><00:11:34.160><c> we're</c><00:11:34.240><c> going</c><00:11:34.320><c> to</c><00:11:34.480><c> process</c>

00:11:34.870 --> 00:11:34.880 align:start position:0%
it's pre-order so we're going to process
 

00:11:34.880 --> 00:11:36.230 align:start position:0%
it's pre-order so we're going to process
this<00:11:35.120><c> then</c><00:11:35.360><c> we're</c><00:11:35.440><c> going</c><00:11:35.519><c> to</c><00:11:35.600><c> do</c><00:11:35.680><c> its</c><00:11:35.839><c> children</c>

00:11:36.230 --> 00:11:36.240 align:start position:0%
this then we're going to do its children
 

00:11:36.240 --> 00:11:37.750 align:start position:0%
this then we're going to do its children
well<00:11:36.399><c> it</c><00:11:36.480><c> doesn't</c><00:11:36.720><c> have</c><00:11:36.800><c> any</c><00:11:37.040><c> children</c><00:11:37.440><c> right</c>

00:11:37.750 --> 00:11:37.760 align:start position:0%
well it doesn't have any children right
 

00:11:37.760 --> 00:11:39.509 align:start position:0%
well it doesn't have any children right
so<00:11:38.240><c> now</c><00:11:38.399><c> what</c><00:11:38.560><c> are</c><00:11:38.640><c> we</c><00:11:38.720><c> going</c><00:11:38.800><c> to</c><00:11:38.880><c> do</c><00:11:39.040><c> well</c><00:11:39.279><c> this</c>

00:11:39.509 --> 00:11:39.519 align:start position:0%
so now what are we going to do well this
 

00:11:39.519 --> 00:11:41.110 align:start position:0%
so now what are we going to do well this
one<00:11:39.760><c> was</c><00:11:40.000><c> added</c><00:11:40.320><c> to</c><00:11:40.399><c> the</c><00:11:40.640><c> stack</c>

00:11:41.110 --> 00:11:41.120 align:start position:0%
one was added to the stack
 

00:11:41.120 --> 00:11:43.110 align:start position:0%
one was added to the stack
so<00:11:41.360><c> then</c><00:11:41.600><c> we</c><00:11:41.760><c> can</c><00:11:41.839><c> go</c><00:11:42.000><c> ahead</c><00:11:42.160><c> and</c><00:11:42.320><c> process</c><00:11:42.880><c> this</c>

00:11:43.110 --> 00:11:43.120 align:start position:0%
so then we can go ahead and process this
 

00:11:43.120 --> 00:11:45.590 align:start position:0%
so then we can go ahead and process this
one<00:11:43.440><c> and</c><00:11:43.600><c> add</c><00:11:43.920><c> its</c><00:11:44.240><c> children</c><00:11:44.560><c> to</c><00:11:44.720><c> the</c><00:11:44.880><c> stack</c>

00:11:45.590 --> 00:11:45.600 align:start position:0%
one and add its children to the stack
 

00:11:45.600 --> 00:11:47.910 align:start position:0%
one and add its children to the stack
and<00:11:45.760><c> then</c><00:11:45.920><c> we're</c><00:11:46.079><c> going</c><00:11:46.240><c> to</c><00:11:46.320><c> process</c><00:11:47.120><c> this</c><00:11:47.440><c> one</c>

00:11:47.910 --> 00:11:47.920 align:start position:0%
and then we're going to process this one
 

00:11:47.920 --> 00:11:49.269 align:start position:0%
and then we're going to process this one
it<00:11:48.079><c> doesn't</c><00:11:48.320><c> have</c><00:11:48.480><c> any</c><00:11:48.640><c> children</c><00:11:49.040><c> and</c><00:11:49.120><c> then</c>

00:11:49.269 --> 00:11:49.279 align:start position:0%
it doesn't have any children and then
 

00:11:49.279 --> 00:11:50.629 align:start position:0%
it doesn't have any children and then
this<00:11:49.440><c> one's</c><00:11:49.760><c> going</c><00:11:49.839><c> to</c><00:11:49.920><c> be</c><00:11:50.079><c> at</c><00:11:50.160><c> the</c><00:11:50.240><c> top</c><00:11:50.480><c> of</c><00:11:50.560><c> the</c>

00:11:50.629 --> 00:11:50.639 align:start position:0%
this one's going to be at the top of the
 

00:11:50.639 --> 00:11:52.550 align:start position:0%
this one's going to be at the top of the
stack<00:11:50.880><c> because</c><00:11:51.120><c> we</c><00:11:51.279><c> just</c><00:11:51.519><c> popped</c><00:11:51.920><c> this</c><00:11:52.160><c> one</c>

00:11:52.550 --> 00:11:52.560 align:start position:0%
stack because we just popped this one
 

00:11:52.560 --> 00:11:53.829 align:start position:0%
stack because we just popped this one
and<00:11:52.639><c> then</c><00:11:52.800><c> we</c><00:11:52.959><c> can</c><00:11:53.120><c> process</c><00:11:53.440><c> this</c><00:11:53.600><c> one</c><00:11:53.760><c> and</c>

00:11:53.829 --> 00:11:53.839 align:start position:0%
and then we can process this one and
 

00:11:53.839 --> 00:11:55.269 align:start position:0%
and then we can process this one and
then<00:11:54.000><c> we're</c><00:11:54.240><c> done</c><00:11:54.480><c> right</c><00:11:54.720><c> so</c><00:11:54.880><c> we're</c><00:11:55.040><c> going</c><00:11:55.120><c> to</c>

00:11:55.269 --> 00:11:55.279 align:start position:0%
then we're done right so we're going to
 

00:11:55.279 --> 00:11:56.069 align:start position:0%
then we're done right so we're going to
do<00:11:55.519><c> that</c>

00:11:56.069 --> 00:11:56.079 align:start position:0%
do that
 

00:11:56.079 --> 00:11:58.310 align:start position:0%
do that
and<00:11:56.320><c> as</c><00:11:56.639><c> we</c><00:11:56.800><c> do</c><00:11:57.040><c> it</c><00:11:57.360><c> iteratively</c><00:11:58.000><c> we're</c><00:11:58.160><c> not</c>

00:11:58.310 --> 00:11:58.320 align:start position:0%
and as we do it iteratively we're not
 

00:11:58.320 --> 00:11:59.750 align:start position:0%
and as we do it iteratively we're not
just<00:11:58.480><c> going</c><00:11:58.560><c> to</c><00:11:58.720><c> be</c><00:11:58.880><c> adding</c><00:11:59.200><c> the</c><00:11:59.360><c> nodes</c>

00:11:59.750 --> 00:11:59.760 align:start position:0%
just going to be adding the nodes
 

00:11:59.760 --> 00:12:01.509 align:start position:0%
just going to be adding the nodes
themselves<00:12:00.399><c> to</c><00:12:00.480><c> the</c><00:12:00.639><c> stack</c><00:12:00.880><c> but</c><00:12:01.040><c> we're</c><00:12:01.200><c> also</c>

00:12:01.509 --> 00:12:01.519 align:start position:0%
themselves to the stack but we're also
 

00:12:01.519 --> 00:12:03.110 align:start position:0%
themselves to the stack but we're also
for<00:12:01.680><c> each</c><00:12:01.839><c> node</c><00:12:02.079><c> going</c><00:12:02.160><c> to</c><00:12:02.320><c> be</c><00:12:02.399><c> adding</c><00:12:02.720><c> to</c>

00:12:03.110 --> 00:12:03.120 align:start position:0%
for each node going to be adding to
 

00:12:03.120 --> 00:12:05.269 align:start position:0%
for each node going to be adding to
the<00:12:03.360><c> depth</c><00:12:04.000><c> of</c><00:12:04.240><c> each</c><00:12:04.480><c> node</c><00:12:04.720><c> because</c><00:12:05.040><c> we</c><00:12:05.120><c> can</c>

00:12:05.269 --> 00:12:05.279 align:start position:0%
the depth of each node because we can
 

00:12:05.279 --> 00:12:06.710 align:start position:0%
the depth of each node because we can
easily<00:12:05.600><c> do</c><00:12:05.760><c> that</c><00:12:06.000><c> right</c><00:12:06.160><c> we</c><00:12:06.240><c> know</c><00:12:06.399><c> this</c><00:12:06.639><c> is</c>

00:12:06.710 --> 00:12:06.720 align:start position:0%
easily do that right we know this is
 

00:12:06.720 --> 00:12:07.829 align:start position:0%
easily do that right we know this is
going<00:12:06.800><c> to</c><00:12:06.880><c> be</c><00:12:07.040><c> depth</c><00:12:07.360><c> one</c>

00:12:07.829 --> 00:12:07.839 align:start position:0%
going to be depth one
 

00:12:07.839 --> 00:12:09.430 align:start position:0%
going to be depth one
when<00:12:08.000><c> we</c><00:12:08.160><c> add</c><00:12:08.399><c> the</c><00:12:08.560><c> left</c><00:12:08.800><c> and</c><00:12:08.880><c> right</c><00:12:09.120><c> children</c>

00:12:09.430 --> 00:12:09.440 align:start position:0%
when we add the left and right children
 

00:12:09.440 --> 00:12:10.790 align:start position:0%
when we add the left and right children
we're<00:12:09.600><c> gonna</c><00:12:09.680><c> say</c><00:12:09.839><c> okay</c><00:12:10.000><c> these</c><00:12:10.240><c> are</c><00:12:10.320><c> at</c><00:12:10.480><c> depth</c>

00:12:10.790 --> 00:12:10.800 align:start position:0%
we're gonna say okay these are at depth
 

00:12:10.800 --> 00:12:11.269 align:start position:0%
we're gonna say okay these are at depth
two

00:12:11.269 --> 00:12:11.279 align:start position:0%
two
 

00:12:11.279 --> 00:12:12.949 align:start position:0%
two
when<00:12:11.440><c> we</c><00:12:11.600><c> add</c><00:12:11.839><c> these</c><00:12:12.079><c> two</c><00:12:12.480><c> we're</c><00:12:12.639><c> gonna</c><00:12:12.800><c> say</c>

00:12:12.949 --> 00:12:12.959 align:start position:0%
when we add these two we're gonna say
 

00:12:12.959 --> 00:12:14.389 align:start position:0%
when we add these two we're gonna say
these<00:12:13.200><c> are</c><00:12:13.279><c> at</c><00:12:13.440><c> depth</c><00:12:14.000><c> three</c>

00:12:14.389 --> 00:12:14.399 align:start position:0%
these are at depth three
 

00:12:14.399 --> 00:12:15.990 align:start position:0%
these are at depth three
so<00:12:14.560><c> we're</c><00:12:14.639><c> just</c><00:12:14.800><c> gonna</c><00:12:15.040><c> try</c><00:12:15.200><c> to</c><00:12:15.360><c> visit</c><00:12:15.760><c> every</c>

00:12:15.990 --> 00:12:16.000 align:start position:0%
so we're just gonna try to visit every
 

00:12:16.000 --> 00:12:18.230 align:start position:0%
so we're just gonna try to visit every
single<00:12:16.320><c> node</c><00:12:16.880><c> find</c><00:12:17.200><c> the</c><00:12:17.360><c> node</c><00:12:17.680><c> that</c><00:12:17.839><c> had</c><00:12:18.000><c> the</c>

00:12:18.230 --> 00:12:18.240 align:start position:0%
single node find the node that had the
 

00:12:18.240 --> 00:12:20.230 align:start position:0%
single node find the node that had the
greatest<00:12:18.880><c> depth</c><00:12:19.200><c> and</c><00:12:19.279><c> then</c><00:12:19.519><c> we</c><00:12:19.600><c> can</c><00:12:19.760><c> return</c>

00:12:20.230 --> 00:12:20.240 align:start position:0%
greatest depth and then we can return
 

00:12:20.240 --> 00:12:20.870 align:start position:0%
greatest depth and then we can return
that

00:12:20.870 --> 00:12:20.880 align:start position:0%
that
 

00:12:20.880 --> 00:12:22.710 align:start position:0%
that
so<00:12:21.120><c> initially</c><00:12:21.519><c> we're</c><00:12:21.680><c> gonna</c><00:12:21.839><c> start</c><00:12:22.079><c> with</c><00:12:22.320><c> node</c>

00:12:22.710 --> 00:12:22.720 align:start position:0%
so initially we're gonna start with node
 

00:12:22.720 --> 00:12:24.310 align:start position:0%
so initially we're gonna start with node
three<00:12:23.440><c> at</c><00:12:23.680><c> depth</c>

00:12:24.310 --> 00:12:24.320 align:start position:0%
three at depth
 

00:12:24.320 --> 00:12:26.629 align:start position:0%
three at depth
1<00:12:24.880><c> in</c><00:12:25.120><c> our</c><00:12:25.279><c> stack</c><00:12:25.600><c> so</c><00:12:25.760><c> now</c><00:12:25.920><c> we're</c><00:12:26.079><c> going</c><00:12:26.160><c> to</c><00:12:26.320><c> pop</c>

00:12:26.629 --> 00:12:26.639 align:start position:0%
1 in our stack so now we're going to pop
 

00:12:26.639 --> 00:12:28.150 align:start position:0%
1 in our stack so now we're going to pop
from<00:12:26.959><c> our</c><00:12:27.120><c> stack</c><00:12:27.519><c> so</c><00:12:27.680><c> let's</c>

00:12:28.150 --> 00:12:28.160 align:start position:0%
from our stack so let's
 

00:12:28.160 --> 00:12:31.430 align:start position:0%
from our stack so let's
pop<00:12:28.639><c> this</c><00:12:29.200><c> node</c><00:12:30.079><c> and</c><00:12:30.240><c> we</c><00:12:30.480><c> process</c><00:12:30.959><c> it</c><00:12:31.040><c> so</c><00:12:31.200><c> so</c>

00:12:31.430 --> 00:12:31.440 align:start position:0%
pop this node and we process it so so
 

00:12:31.440 --> 00:12:33.030 align:start position:0%
pop this node and we process it so so
far<00:12:31.600><c> the</c><00:12:31.760><c> max</c><00:12:32.000><c> depth</c><00:12:32.240><c> we</c><00:12:32.399><c> found</c><00:12:32.720><c> was</c>

00:12:33.030 --> 00:12:33.040 align:start position:0%
far the max depth we found was
 

00:12:33.040 --> 00:12:34.790 align:start position:0%
far the max depth we found was
1<00:12:33.360><c> and</c><00:12:33.519><c> let's</c><00:12:33.760><c> add</c><00:12:34.000><c> its</c><00:12:34.240><c> children</c><00:12:34.560><c> to</c><00:12:34.720><c> the</c>

00:12:34.790 --> 00:12:34.800 align:start position:0%
1 and let's add its children to the
 

00:12:34.800 --> 00:12:37.190 align:start position:0%
1 and let's add its children to the
stack<00:12:35.200><c> so</c><00:12:35.360><c> let's</c><00:12:35.680><c> add</c><00:12:36.000><c> 20</c><00:12:36.399><c> to</c><00:12:36.560><c> the</c><00:12:36.720><c> stack</c>

00:12:37.190 --> 00:12:37.200 align:start position:0%
stack so let's add 20 to the stack
 

00:12:37.200 --> 00:12:40.150 align:start position:0%
stack so let's add 20 to the stack
and<00:12:37.360><c> let's</c><00:12:37.680><c> add</c><00:12:38.480><c> 9</c><00:12:38.800><c> to</c><00:12:38.959><c> the</c><00:12:39.120><c> stack</c><00:12:39.680><c> and</c><00:12:39.839><c> each</c><00:12:40.079><c> of</c>

00:12:40.150 --> 00:12:40.160 align:start position:0%
and let's add 9 to the stack and each of
 

00:12:40.160 --> 00:12:41.829 align:start position:0%
and let's add 9 to the stack and each of
these<00:12:40.399><c> are</c><00:12:40.560><c> going</c><00:12:40.639><c> to</c><00:12:40.720><c> have</c><00:12:40.880><c> a</c><00:12:41.040><c> depth</c><00:12:41.440><c> of</c>

00:12:41.829 --> 00:12:41.839 align:start position:0%
these are going to have a depth of
 

00:12:41.839 --> 00:12:44.389 align:start position:0%
these are going to have a depth of
2.<00:12:42.639><c> so</c><00:12:42.800><c> now</c><00:12:43.120><c> this</c><00:12:43.360><c> is</c><00:12:43.519><c> technically</c><00:12:44.000><c> the</c><00:12:44.079><c> top</c><00:12:44.320><c> of</c>

00:12:44.389 --> 00:12:44.399 align:start position:0%
2. so now this is technically the top of
 

00:12:44.399 --> 00:12:45.829 align:start position:0%
2. so now this is technically the top of
the<00:12:44.480><c> stack</c><00:12:44.800><c> even</c><00:12:44.959><c> though</c><00:12:45.040><c> it's</c><00:12:45.200><c> the</c><00:12:45.360><c> bottom</c><00:12:45.680><c> so</c>

00:12:45.829 --> 00:12:45.839 align:start position:0%
the stack even though it's the bottom so
 

00:12:45.839 --> 00:12:47.590 align:start position:0%
the stack even though it's the bottom so
let's<00:12:46.079><c> pop</c><00:12:46.320><c> from</c><00:12:46.560><c> the</c><00:12:46.639><c> top</c><00:12:46.800><c> of</c><00:12:46.959><c> the</c><00:12:47.040><c> stack</c>

00:12:47.590 --> 00:12:47.600 align:start position:0%
let's pop from the top of the stack
 

00:12:47.600 --> 00:12:50.550 align:start position:0%
let's pop from the top of the stack
pop<00:12:47.920><c> this</c><00:12:48.079><c> one</c><00:12:48.240><c> that's</c><00:12:48.560><c> node</c><00:12:49.200><c> 9</c><00:12:49.760><c> so</c><00:12:50.160><c> now</c><00:12:50.399><c> we've</c>

00:12:50.550 --> 00:12:50.560 align:start position:0%
pop this one that's node 9 so now we've
 

00:12:50.560 --> 00:12:52.470 align:start position:0%
pop this one that's node 9 so now we've
found<00:12:50.720><c> a</c><00:12:50.880><c> max</c><00:12:51.120><c> depth</c><00:12:51.440><c> of</c><00:12:51.680><c> two</c><00:12:51.920><c> that's</c><00:12:52.160><c> better</c>

00:12:52.470 --> 00:12:52.480 align:start position:0%
found a max depth of two that's better
 

00:12:52.480 --> 00:12:53.190 align:start position:0%
found a max depth of two that's better
than<00:12:52.720><c> one</c>

00:12:53.190 --> 00:12:53.200 align:start position:0%
than one
 

00:12:53.200 --> 00:12:54.790 align:start position:0%
than one
and<00:12:53.360><c> now</c><00:12:53.519><c> let's</c><00:12:53.760><c> also</c><00:12:54.000><c> add</c><00:12:54.240><c> the</c><00:12:54.320><c> children</c><00:12:54.720><c> of</c>

00:12:54.790 --> 00:12:54.800 align:start position:0%
and now let's also add the children of
 

00:12:54.800 --> 00:12:55.910 align:start position:0%
and now let's also add the children of
this<00:12:54.959><c> of</c><00:12:55.040><c> course</c><00:12:55.279><c> it</c><00:12:55.360><c> doesn't</c><00:12:55.600><c> have</c><00:12:55.760><c> any</c>

00:12:55.910 --> 00:12:55.920 align:start position:0%
this of course it doesn't have any
 

00:12:55.920 --> 00:12:57.350 align:start position:0%
this of course it doesn't have any
children<00:12:56.160><c> so</c><00:12:56.320><c> we're</c><00:12:56.480><c> done</c><00:12:56.720><c> with</c>

00:12:57.350 --> 00:12:57.360 align:start position:0%
children so we're done with
 

00:12:57.360 --> 00:12:59.750 align:start position:0%
children so we're done with
these<00:12:58.399><c> so</c><00:12:58.639><c> now</c><00:12:58.880><c> what's</c><00:12:59.120><c> at</c><00:12:59.200><c> the</c><00:12:59.360><c> top</c><00:12:59.519><c> of</c><00:12:59.680><c> our</c>

00:12:59.750 --> 00:12:59.760 align:start position:0%
these so now what's at the top of our
 

00:12:59.760 --> 00:13:00.550 align:start position:0%
these so now what's at the top of our
stack<00:13:00.079><c> that's</c>

00:13:00.550 --> 00:13:00.560 align:start position:0%
stack that's
 

00:13:00.560 --> 00:13:02.550 align:start position:0%
stack that's
that's<00:13:00.959><c> well</c><00:13:01.120><c> we</c><00:13:01.279><c> popped</c><00:13:01.600><c> this</c><00:13:01.760><c> one</c><00:13:02.079><c> we</c><00:13:02.240><c> popped</c>

00:13:02.550 --> 00:13:02.560 align:start position:0%
that's well we popped this one we popped
 

00:13:02.560 --> 00:13:04.150 align:start position:0%
that's well we popped this one we popped
this<00:13:02.880><c> this</c><00:13:03.120><c> is</c><00:13:03.200><c> at</c><00:13:03.360><c> the</c><00:13:03.440><c> top</c><00:13:03.600><c> of</c><00:13:03.680><c> the</c><00:13:03.760><c> stack</c><00:13:04.000><c> now</c>

00:13:04.150 --> 00:13:04.160 align:start position:0%
this this is at the top of the stack now
 

00:13:04.160 --> 00:13:05.509 align:start position:0%
this this is at the top of the stack now
so<00:13:04.320><c> let's</c><00:13:04.560><c> pop</c><00:13:04.880><c> this</c><00:13:05.200><c> one</c>

00:13:05.509 --> 00:13:05.519 align:start position:0%
so let's pop this one
 

00:13:05.519 --> 00:13:08.069 align:start position:0%
so let's pop this one
we<00:13:05.760><c> pop</c><00:13:06.160><c> 20.</c><00:13:06.720><c> it</c><00:13:06.880><c> also</c><00:13:07.120><c> has</c><00:13:07.279><c> a</c><00:13:07.360><c> max</c><00:13:07.680><c> depth</c><00:13:07.920><c> of</c>

00:13:08.069 --> 00:13:08.079 align:start position:0%
we pop 20. it also has a max depth of
 

00:13:08.079 --> 00:13:09.910 align:start position:0%
we pop 20. it also has a max depth of
two<00:13:08.320><c> so</c><00:13:08.480><c> we</c><00:13:08.639><c> don't</c><00:13:08.880><c> update</c><00:13:09.120><c> the</c><00:13:09.279><c> result</c><00:13:09.760><c> but</c>

00:13:09.910 --> 00:13:09.920 align:start position:0%
two so we don't update the result but
 

00:13:09.920 --> 00:13:11.430 align:start position:0%
two so we don't update the result but
now<00:13:10.079><c> we</c><00:13:10.240><c> can</c><00:13:10.399><c> add</c><00:13:10.560><c> its</c><00:13:10.800><c> children</c>

00:13:11.430 --> 00:13:11.440 align:start position:0%
now we can add its children
 

00:13:11.440 --> 00:13:13.829 align:start position:0%
now we can add its children
to<00:13:11.600><c> the</c><00:13:11.760><c> stack</c><00:13:12.800><c> and</c><00:13:12.959><c> the</c><00:13:13.120><c> depth</c><00:13:13.360><c> of</c><00:13:13.440><c> course</c><00:13:13.760><c> is</c>

00:13:13.829 --> 00:13:13.839 align:start position:0%
to the stack and the depth of course is
 

00:13:13.839 --> 00:13:15.190 align:start position:0%
to the stack and the depth of course is
going<00:13:13.920><c> to</c><00:13:14.000><c> be</c><00:13:14.160><c> plus</c><00:13:14.399><c> one</c><00:13:14.560><c> so</c><00:13:14.720><c> both</c><00:13:14.959><c> of</c><00:13:15.040><c> these</c>

00:13:15.190 --> 00:13:15.200 align:start position:0%
going to be plus one so both of these
 

00:13:15.200 --> 00:13:16.629 align:start position:0%
going to be plus one so both of these
are<00:13:15.360><c> gonna</c><00:13:15.440><c> have</c><00:13:15.600><c> a</c><00:13:15.680><c> depth</c><00:13:15.920><c> of</c><00:13:16.079><c> 20</c>

00:13:16.629 --> 00:13:16.639 align:start position:0%
are gonna have a depth of 20
 

00:13:16.639 --> 00:13:19.750 align:start position:0%
are gonna have a depth of 20
of<00:13:16.800><c> three</c><00:13:17.360><c> we're</c><00:13:17.519><c> going</c><00:13:17.600><c> to</c><00:13:17.760><c> add</c><00:13:18.079><c> 7</c><00:13:18.880><c> and</c><00:13:19.200><c> 15</c><00:13:19.600><c> to</c>

00:13:19.750 --> 00:13:19.760 align:start position:0%
of three we're going to add 7 and 15 to
 

00:13:19.760 --> 00:13:21.430 align:start position:0%
of three we're going to add 7 and 15 to
the<00:13:19.839><c> stack</c><00:13:20.160><c> so</c><00:13:20.399><c> now</c><00:13:20.560><c> let's</c><00:13:20.800><c> pop</c><00:13:21.040><c> the</c><00:13:21.200><c> top</c><00:13:21.360><c> of</c>

00:13:21.430 --> 00:13:21.440 align:start position:0%
the stack so now let's pop the top of
 

00:13:21.440 --> 00:13:22.790 align:start position:0%
the stack so now let's pop the top of
the<00:13:21.600><c> stack</c><00:13:21.920><c> 15</c>

00:13:22.790 --> 00:13:22.800 align:start position:0%
the stack 15
 

00:13:22.800 --> 00:13:26.230 align:start position:0%
the stack 15
pop<00:13:23.120><c> this</c><00:13:24.160><c> it</c><00:13:24.320><c> has</c><00:13:24.480><c> a</c><00:13:24.560><c> max</c><00:13:24.800><c> depth</c><00:13:25.120><c> of</c><00:13:25.279><c> 3</c><00:13:25.760><c> so</c>

00:13:26.230 --> 00:13:26.240 align:start position:0%
pop this it has a max depth of 3 so
 

00:13:26.240 --> 00:13:28.550 align:start position:0%
pop this it has a max depth of 3 so
we've<00:13:26.480><c> updated</c><00:13:26.880><c> the</c><00:13:27.040><c> result</c><00:13:27.839><c> pop</c><00:13:28.079><c> one</c><00:13:28.320><c> more</c>

00:13:28.550 --> 00:13:28.560 align:start position:0%
we've updated the result pop one more
 

00:13:28.560 --> 00:13:29.509 align:start position:0%
we've updated the result pop one more
time<00:13:29.120><c> this</c>

00:13:29.509 --> 00:13:29.519 align:start position:0%
time this
 

00:13:29.519 --> 00:13:31.910 align:start position:0%
time this
also<00:13:29.839><c> had</c><00:13:30.160><c> a</c><00:13:30.480><c> max</c><00:13:30.800><c> depth</c><00:13:31.120><c> of</c><00:13:31.360><c> three</c><00:13:31.600><c> so</c><00:13:31.760><c> we're</c>

00:13:31.910 --> 00:13:31.920 align:start position:0%
also had a max depth of three so we're
 

00:13:31.920 --> 00:13:33.750 align:start position:0%
also had a max depth of three so we're
done<00:13:32.079><c> with</c><00:13:32.240><c> that</c><00:13:32.399><c> we</c><00:13:32.639><c> process</c><00:13:33.040><c> this</c><00:13:33.279><c> node</c>

00:13:33.750 --> 00:13:33.760 align:start position:0%
done with that we process this node
 

00:13:33.760 --> 00:13:35.430 align:start position:0%
done with that we process this node
and<00:13:34.000><c> neither</c><00:13:34.240><c> of</c><00:13:34.399><c> these</c><00:13:34.560><c> had</c><00:13:34.720><c> any</c><00:13:34.959><c> children</c><00:13:35.279><c> so</c>

00:13:35.430 --> 00:13:35.440 align:start position:0%
and neither of these had any children so
 

00:13:35.440 --> 00:13:36.949 align:start position:0%
and neither of these had any children so
now<00:13:35.600><c> we're</c><00:13:35.839><c> done</c><00:13:36.000><c> with</c><00:13:36.160><c> the</c><00:13:36.240><c> dfs</c>

00:13:36.949 --> 00:13:36.959 align:start position:0%
now we're done with the dfs
 

00:13:36.959 --> 00:13:38.389 align:start position:0%
now we're done with the dfs
so<00:13:37.200><c> that's</c><00:13:37.440><c> basically</c><00:13:37.839><c> how</c><00:13:38.000><c> it's</c><00:13:38.160><c> going</c><00:13:38.320><c> to</c>

00:13:38.389 --> 00:13:38.399 align:start position:0%
so that's basically how it's going to
 

00:13:38.399 --> 00:13:40.389 align:start position:0%
so that's basically how it's going to
work<00:13:38.880><c> it's</c><00:13:39.120><c> pretty</c><00:13:39.360><c> straightforward</c><00:13:40.240><c> at</c>

00:13:40.389 --> 00:13:40.399 align:start position:0%
work it's pretty straightforward at
 

00:13:40.399 --> 00:13:42.310 align:start position:0%
work it's pretty straightforward at
least<00:13:40.720><c> if</c><00:13:40.800><c> you're</c><00:13:40.959><c> doing</c><00:13:41.199><c> it</c><00:13:41.279><c> with</c><00:13:41.600><c> pre-order</c>

00:13:42.310 --> 00:13:42.320 align:start position:0%
least if you're doing it with pre-order
 

00:13:42.320 --> 00:13:43.110 align:start position:0%
least if you're doing it with pre-order
dfs

00:13:43.110 --> 00:13:43.120 align:start position:0%
dfs
 

00:13:43.120 --> 00:13:45.189 align:start position:0%
dfs
with<00:13:43.360><c> a</c><00:13:43.440><c> stack</c><00:13:44.160><c> okay</c><00:13:44.399><c> so</c><00:13:44.560><c> finally</c><00:13:44.880><c> for</c><00:13:45.120><c> the</c>

00:13:45.189 --> 00:13:45.199 align:start position:0%
with a stack okay so finally for the
 

00:13:45.199 --> 00:13:47.189 align:start position:0%
with a stack okay so finally for the
last<00:13:45.360><c> solution</c><00:13:45.839><c> so</c><00:13:46.000><c> this</c><00:13:46.160><c> was</c><00:13:46.399><c> bfs</c><00:13:46.880><c> but</c><00:13:47.040><c> now</c>

00:13:47.189 --> 00:13:47.199 align:start position:0%
last solution so this was bfs but now
 

00:13:47.199 --> 00:13:48.710 align:start position:0%
last solution so this was bfs but now
we're<00:13:47.279><c> going</c><00:13:47.360><c> to</c><00:13:47.440><c> be</c><00:13:47.600><c> doing</c><00:13:47.839><c> iterative</c><00:13:48.240><c> dfs</c>

00:13:48.710 --> 00:13:48.720 align:start position:0%
we're going to be doing iterative dfs
 

00:13:48.720 --> 00:13:49.750 align:start position:0%
we're going to be doing iterative dfs
we're<00:13:48.880><c> going</c><00:13:48.959><c> to</c><00:13:49.040><c> leave</c><00:13:49.360><c> this</c>

00:13:49.750 --> 00:13:49.760 align:start position:0%
we're going to leave this
 

00:13:49.760 --> 00:13:52.470 align:start position:0%
we're going to leave this
initial<00:13:50.399><c> case</c><00:13:50.959><c> if</c><00:13:51.199><c> the</c><00:13:51.440><c> root</c><00:13:51.760><c> is</c><00:13:52.079><c> null</c><00:13:52.320><c> we're</c>

00:13:52.470 --> 00:13:52.480 align:start position:0%
initial case if the root is null we're
 

00:13:52.480 --> 00:13:53.829 align:start position:0%
initial case if the root is null we're
going<00:13:52.560><c> to</c><00:13:52.639><c> return</c><00:13:53.040><c> 0</c>

00:13:53.829 --> 00:13:53.839 align:start position:0%
going to return 0
 

00:13:53.839 --> 00:13:56.230 align:start position:0%
going to return 0
and<00:13:54.079><c> our</c><00:13:54.240><c> stack</c><00:13:54.959><c> otherwise</c><00:13:55.519><c> is</c><00:13:55.680><c> just</c><00:13:55.839><c> going</c><00:13:55.920><c> to</c>

00:13:56.230 --> 00:13:56.240 align:start position:0%
and our stack otherwise is just going to
 

00:13:56.240 --> 00:13:57.829 align:start position:0%
and our stack otherwise is just going to
have<00:13:56.720><c> one</c><00:13:57.040><c> single</c>

00:13:57.829 --> 00:13:57.839 align:start position:0%
have one single
 

00:13:57.839 --> 00:13:59.509 align:start position:0%
have one single
value<00:13:58.320><c> on</c><00:13:58.480><c> it</c><00:13:58.560><c> the</c><00:13:58.720><c> root</c><00:13:58.880><c> but</c><00:13:59.040><c> remember</c><00:13:59.360><c> we're</c>

00:13:59.509 --> 00:13:59.519 align:start position:0%
value on it the root but remember we're
 

00:13:59.519 --> 00:14:00.949 align:start position:0%
value on it the root but remember we're
also<00:13:59.760><c> maintaining</c><00:14:00.240><c> the</c><00:14:00.399><c> depth</c><00:14:00.639><c> so</c><00:14:00.800><c> we're</c>

00:14:00.949 --> 00:14:00.959 align:start position:0%
also maintaining the depth so we're
 

00:14:00.959 --> 00:14:02.389 align:start position:0%
also maintaining the depth so we're
gonna<00:14:01.040><c> add</c><00:14:01.199><c> a</c><00:14:01.360><c> pair</c><00:14:01.680><c> of</c><00:14:01.760><c> values</c><00:14:02.160><c> we're</c><00:14:02.240><c> gonna</c>

00:14:02.389 --> 00:14:02.399 align:start position:0%
gonna add a pair of values we're gonna
 

00:14:02.399 --> 00:14:04.150 align:start position:0%
gonna add a pair of values we're gonna
add<00:14:02.560><c> the</c><00:14:02.720><c> root</c><00:14:03.040><c> which</c><00:14:03.199><c> is</c><00:14:03.279><c> the</c><00:14:03.440><c> node</c>

00:14:04.150 --> 00:14:04.160 align:start position:0%
add the root which is the node
 

00:14:04.160 --> 00:14:05.990 align:start position:0%
add the root which is the node
and<00:14:04.320><c> we're</c><00:14:04.480><c> gonna</c><00:14:04.639><c> add</c><00:14:04.959><c> it</c><00:14:05.040><c> has</c><00:14:05.279><c> a</c><00:14:05.360><c> depth</c><00:14:05.760><c> of</c>

00:14:05.990 --> 00:14:06.000 align:start position:0%
and we're gonna add it has a depth of
 

00:14:06.000 --> 00:14:08.230 align:start position:0%
and we're gonna add it has a depth of
one<00:14:06.560><c> and</c><00:14:06.720><c> now</c><00:14:07.040><c> we're</c><00:14:07.199><c> gonna</c><00:14:07.440><c> continue</c><00:14:07.839><c> to</c><00:14:07.920><c> go</c>

00:14:08.230 --> 00:14:08.240 align:start position:0%
one and now we're gonna continue to go
 

00:14:08.240 --> 00:14:10.310 align:start position:0%
one and now we're gonna continue to go
while<00:14:08.480><c> our</c><00:14:08.720><c> stack</c><00:14:09.120><c> is</c><00:14:09.279><c> non-empty</c><00:14:09.839><c> so</c><00:14:10.000><c> this</c><00:14:10.160><c> is</c>

00:14:10.310 --> 00:14:10.320 align:start position:0%
while our stack is non-empty so this is
 

00:14:10.320 --> 00:14:11.910 align:start position:0%
while our stack is non-empty so this is
pretty<00:14:10.560><c> similar</c><00:14:10.959><c> to</c><00:14:11.040><c> bfs</c>

00:14:11.910 --> 00:14:11.920 align:start position:0%
pretty similar to bfs
 

00:14:11.920 --> 00:14:14.710 align:start position:0%
pretty similar to bfs
but<00:14:12.160><c> we</c><00:14:12.320><c> don't</c><00:14:12.560><c> actually</c><00:14:12.880><c> need</c><00:14:13.279><c> nested</c><00:14:13.839><c> loops</c>

00:14:14.710 --> 00:14:14.720 align:start position:0%
but we don't actually need nested loops
 

00:14:14.720 --> 00:14:15.269 align:start position:0%
but we don't actually need nested loops
so

00:14:15.269 --> 00:14:15.279 align:start position:0%
so
 

00:14:15.279 --> 00:14:16.629 align:start position:0%
so
now<00:14:15.440><c> we're</c><00:14:15.600><c> going</c><00:14:15.680><c> to</c><00:14:15.839><c> pop</c><00:14:16.079><c> from</c><00:14:16.240><c> the</c><00:14:16.320><c> stack</c>

00:14:16.629 --> 00:14:16.639 align:start position:0%
now we're going to pop from the stack
 

00:14:16.639 --> 00:14:19.189 align:start position:0%
now we're going to pop from the stack
stack<00:14:17.040><c> dot</c><00:14:17.279><c> pop</c><00:14:17.839><c> we're</c><00:14:18.160><c> popping</c><00:14:18.560><c> two</c><00:14:18.800><c> values</c>

00:14:19.189 --> 00:14:19.199 align:start position:0%
stack dot pop we're popping two values
 

00:14:19.199 --> 00:14:20.710 align:start position:0%
stack dot pop we're popping two values
remember<00:14:19.519><c> we're</c><00:14:19.680><c> getting</c><00:14:20.000><c> the</c><00:14:20.160><c> node</c><00:14:20.560><c> and</c>

00:14:20.710 --> 00:14:20.720 align:start position:0%
remember we're getting the node and
 

00:14:20.720 --> 00:14:21.590 align:start position:0%
remember we're getting the node and
we're<00:14:20.880><c> getting</c><00:14:21.199><c> its</c>

00:14:21.590 --> 00:14:21.600 align:start position:0%
we're getting its
 

00:14:21.600 --> 00:14:24.470 align:start position:0%
we're getting its
depth<00:14:22.399><c> and</c><00:14:23.360><c> so</c><00:14:23.600><c> what</c><00:14:23.760><c> we're</c><00:14:23.920><c> going</c><00:14:24.000><c> to</c><00:14:24.079><c> say</c><00:14:24.320><c> now</c>

00:14:24.470 --> 00:14:24.480 align:start position:0%
depth and so what we're going to say now
 

00:14:24.480 --> 00:14:26.069 align:start position:0%
depth and so what we're going to say now
is<00:14:24.639><c> we're</c><00:14:24.800><c> going</c><00:14:24.800><c> to</c><00:14:24.880><c> say</c><00:14:25.120><c> if</c><00:14:25.279><c> the</c><00:14:25.440><c> node</c><00:14:25.839><c> is</c>

00:14:26.069 --> 00:14:26.079 align:start position:0%
is we're going to say if the node is
 

00:14:26.079 --> 00:14:27.350 align:start position:0%
is we're going to say if the node is
non-null

00:14:27.350 --> 00:14:27.360 align:start position:0%
non-null
 

00:14:27.360 --> 00:14:29.030 align:start position:0%
non-null
you'll<00:14:27.600><c> see</c><00:14:27.839><c> why</c><00:14:28.079><c> i'm</c><00:14:28.240><c> going</c><00:14:28.320><c> to</c><00:14:28.399><c> do</c><00:14:28.560><c> this</c><00:14:28.800><c> in</c><00:14:28.959><c> a</c>

00:14:29.030 --> 00:14:29.040 align:start position:0%
you'll see why i'm going to do this in a
 

00:14:29.040 --> 00:14:30.790 align:start position:0%
you'll see why i'm going to do this in a
moment<00:14:29.519><c> because</c><00:14:29.760><c> it's</c><00:14:30.000><c> possible</c><00:14:30.320><c> the</c><00:14:30.480><c> node</c>

00:14:30.790 --> 00:14:30.800 align:start position:0%
moment because it's possible the node
 

00:14:30.800 --> 00:14:33.430 align:start position:0%
moment because it's possible the node
could<00:14:31.040><c> be</c><00:14:31.279><c> null</c><00:14:31.519><c> so</c><00:14:31.680><c> if</c><00:14:31.920><c> it's</c><00:14:32.160><c> non-null</c>

00:14:33.430 --> 00:14:33.440 align:start position:0%
could be null so if it's non-null
 

00:14:33.440 --> 00:14:34.710 align:start position:0%
could be null so if it's non-null
what<00:14:33.600><c> we're</c><00:14:33.760><c> going</c><00:14:33.839><c> to</c><00:14:33.920><c> do</c><00:14:34.160><c> is</c><00:14:34.320><c> we</c><00:14:34.480><c> want</c><00:14:34.639><c> to</c>

00:14:34.710 --> 00:14:34.720 align:start position:0%
what we're going to do is we want to
 

00:14:34.720 --> 00:14:36.150 align:start position:0%
what we're going to do is we want to
update<00:14:35.040><c> our</c><00:14:35.120><c> result</c><00:14:35.440><c> now</c><00:14:35.680><c> initially</c><00:14:36.000><c> we're</c>

00:14:36.150 --> 00:14:36.160 align:start position:0%
update our result now initially we're
 

00:14:36.160 --> 00:14:37.509 align:start position:0%
update our result now initially we're
going<00:14:36.240><c> to</c><00:14:36.320><c> set</c><00:14:36.639><c> our</c><00:14:36.880><c> result</c>

00:14:37.509 --> 00:14:37.519 align:start position:0%
going to set our result
 

00:14:37.519 --> 00:14:40.470 align:start position:0%
going to set our result
equal<00:14:37.839><c> to</c><00:14:38.800><c> 1</c><00:14:39.199><c> because</c><00:14:39.440><c> we</c><00:14:39.600><c> know</c><00:14:39.839><c> we</c><00:14:40.000><c> do</c><00:14:40.160><c> have</c><00:14:40.399><c> at</c>

00:14:40.470 --> 00:14:40.480 align:start position:0%
equal to 1 because we know we do have at
 

00:14:40.480 --> 00:14:40.870 align:start position:0%
equal to 1 because we know we do have at
least

00:14:40.870 --> 00:14:40.880 align:start position:0%
least
 

00:14:40.880 --> 00:14:43.430 align:start position:0%
least
a<00:14:41.120><c> 1.</c><00:14:41.680><c> and</c><00:14:41.760><c> so</c><00:14:42.000><c> if</c><00:14:42.160><c> we</c><00:14:42.320><c> pop</c><00:14:42.560><c> this</c><00:14:42.800><c> node</c><00:14:43.120><c> and</c><00:14:43.279><c> it's</c>

00:14:43.430 --> 00:14:43.440 align:start position:0%
a 1. and so if we pop this node and it's
 

00:14:43.440 --> 00:14:45.189 align:start position:0%
a 1. and so if we pop this node and it's
non-null<00:14:43.920><c> then</c><00:14:44.079><c> we</c><00:14:44.240><c> can</c><00:14:44.399><c> potentially</c><00:14:44.880><c> update</c>

00:14:45.189 --> 00:14:45.199 align:start position:0%
non-null then we can potentially update
 

00:14:45.199 --> 00:14:46.790 align:start position:0%
non-null then we can potentially update
our<00:14:45.360><c> result</c><00:14:45.680><c> so</c><00:14:45.839><c> we'll</c><00:14:46.000><c> set</c><00:14:46.160><c> the</c><00:14:46.240><c> result</c><00:14:46.560><c> equal</c>

00:14:46.790 --> 00:14:46.800 align:start position:0%
our result so we'll set the result equal
 

00:14:46.800 --> 00:14:48.069 align:start position:0%
our result so we'll set the result equal
to<00:14:46.959><c> the</c><00:14:47.040><c> max</c><00:14:47.360><c> of</c><00:14:47.519><c> itself</c>

00:14:48.069 --> 00:14:48.079 align:start position:0%
to the max of itself
 

00:14:48.079 --> 00:14:49.990 align:start position:0%
to the max of itself
and<00:14:48.399><c> the</c><00:14:48.560><c> depth</c><00:14:48.959><c> of</c><00:14:49.120><c> the</c><00:14:49.279><c> node</c><00:14:49.519><c> that</c><00:14:49.600><c> we</c><00:14:49.760><c> just</c>

00:14:49.990 --> 00:14:50.000 align:start position:0%
and the depth of the node that we just
 

00:14:50.000 --> 00:14:51.110 align:start position:0%
and the depth of the node that we just
popped

00:14:51.110 --> 00:14:51.120 align:start position:0%
popped
 

00:14:51.120 --> 00:14:52.550 align:start position:0%
popped
and<00:14:51.279><c> then</c><00:14:51.519><c> what</c><00:14:51.680><c> we're</c><00:14:51.839><c> going</c><00:14:51.920><c> to</c><00:14:52.000><c> do</c><00:14:52.160><c> is</c><00:14:52.320><c> to</c>

00:14:52.550 --> 00:14:52.560 align:start position:0%
and then what we're going to do is to
 

00:14:52.560 --> 00:14:54.230 align:start position:0%
and then what we're going to do is to
our<00:14:52.720><c> stack</c><00:14:53.279><c> we're</c><00:14:53.440><c> going</c><00:14:53.519><c> to</c><00:14:53.680><c> add</c><00:14:53.920><c> the</c>

00:14:54.230 --> 00:14:54.240 align:start position:0%
our stack we're going to add the
 

00:14:54.240 --> 00:14:55.110 align:start position:0%
our stack we're going to add the
children

00:14:55.110 --> 00:14:55.120 align:start position:0%
children
 

00:14:55.120 --> 00:14:58.310 align:start position:0%
children
of<00:14:56.079><c> of</c><00:14:56.720><c> this</c><00:14:57.040><c> node</c><00:14:57.440><c> and</c><00:14:57.600><c> we're</c><00:14:57.760><c> gonna</c><00:14:57.920><c> add</c><00:14:58.079><c> both</c>

00:14:58.310 --> 00:14:58.320 align:start position:0%
of of this node and we're gonna add both
 

00:14:58.320 --> 00:15:00.670 align:start position:0%
of of this node and we're gonna add both
of<00:14:58.399><c> them</c><00:14:58.639><c> together</c><00:14:59.040><c> so</c><00:14:59.399><c> node.left</c>

00:15:00.670 --> 00:15:00.680 align:start position:0%
of them together so node.left
 

00:15:00.680 --> 00:15:02.949 align:start position:0%
of them together so node.left
node.right<00:15:01.680><c> but</c><00:15:01.839><c> we're</c><00:15:02.079><c> not</c><00:15:02.240><c> even</c><00:15:02.560><c> checking</c>

00:15:02.949 --> 00:15:02.959 align:start position:0%
node.right but we're not even checking
 

00:15:02.959 --> 00:15:04.790 align:start position:0%
node.right but we're not even checking
it<00:15:03.120><c> could</c><00:15:03.279><c> be</c><00:15:03.440><c> possible</c><00:15:03.839><c> that</c><00:15:04.000><c> these</c><00:15:04.320><c> children</c>

00:15:04.790 --> 00:15:04.800 align:start position:0%
it could be possible that these children
 

00:15:04.800 --> 00:15:07.430 align:start position:0%
it could be possible that these children
are<00:15:05.199><c> null</c><00:15:05.680><c> so</c><00:15:05.839><c> we</c><00:15:06.000><c> technically</c><00:15:06.639><c> might</c><00:15:06.959><c> add</c>

00:15:07.430 --> 00:15:07.440 align:start position:0%
are null so we technically might add
 

00:15:07.440 --> 00:15:09.189 align:start position:0%
are null so we technically might add
null<00:15:07.839><c> nodes</c><00:15:08.160><c> to</c><00:15:08.399><c> our</c><00:15:08.480><c> stack</c><00:15:08.880><c> which</c><00:15:09.120><c> is</c>

00:15:09.189 --> 00:15:09.199 align:start position:0%
null nodes to our stack which is
 

00:15:09.199 --> 00:15:11.350 align:start position:0%
null nodes to our stack which is
different<00:15:09.519><c> than</c><00:15:09.680><c> the</c><00:15:09.839><c> drawing</c><00:15:10.320><c> i</c><00:15:10.480><c> showed</c><00:15:10.880><c> but</c>

00:15:11.350 --> 00:15:11.360 align:start position:0%
different than the drawing i showed but
 

00:15:11.360 --> 00:15:13.189 align:start position:0%
different than the drawing i showed but
we're<00:15:11.600><c> showing</c><00:15:11.920><c> that</c><00:15:12.079><c> if</c><00:15:12.240><c> we</c><00:15:12.399><c> do</c><00:15:12.639><c> add</c><00:15:12.880><c> a</c><00:15:12.959><c> null</c>

00:15:13.189 --> 00:15:13.199 align:start position:0%
we're showing that if we do add a null
 

00:15:13.199 --> 00:15:14.790 align:start position:0%
we're showing that if we do add a null
node<00:15:13.680><c> we're</c><00:15:13.839><c> going</c><00:15:13.920><c> to</c><00:15:14.079><c> pop</c><00:15:14.320><c> from</c><00:15:14.560><c> we're</c><00:15:14.720><c> going</c>

00:15:14.790 --> 00:15:14.800 align:start position:0%
node we're going to pop from we're going
 

00:15:14.800 --> 00:15:16.389 align:start position:0%
node we're going to pop from we're going
to<00:15:14.880><c> pop</c><00:15:15.120><c> it</c><00:15:15.199><c> from</c><00:15:15.360><c> the</c><00:15:15.519><c> stack</c><00:15:15.920><c> but</c><00:15:16.000><c> we're</c><00:15:16.160><c> not</c>

00:15:16.389 --> 00:15:16.399 align:start position:0%
to pop it from the stack but we're not
 

00:15:16.399 --> 00:15:17.750 align:start position:0%
to pop it from the stack but we're not
actually<00:15:16.639><c> going</c><00:15:16.720><c> to</c><00:15:16.959><c> do</c><00:15:17.199><c> anything</c><00:15:17.519><c> with</c><00:15:17.680><c> it</c>

00:15:17.750 --> 00:15:17.760 align:start position:0%
actually going to do anything with it
 

00:15:17.760 --> 00:15:18.310 align:start position:0%
actually going to do anything with it
right<00:15:18.000><c> this</c>

00:15:18.310 --> 00:15:18.320 align:start position:0%
right this
 

00:15:18.320 --> 00:15:19.910 align:start position:0%
right this
if<00:15:18.480><c> statement</c><00:15:18.880><c> will</c><00:15:19.120><c> prevent</c><00:15:19.519><c> us</c><00:15:19.680><c> from</c>

00:15:19.910 --> 00:15:19.920 align:start position:0%
if statement will prevent us from
 

00:15:19.920 --> 00:15:21.350 align:start position:0%
if statement will prevent us from
actually<00:15:20.639><c> using</c><00:15:21.040><c> that</c>

00:15:21.350 --> 00:15:21.360 align:start position:0%
actually using that
 

00:15:21.360 --> 00:15:23.110 align:start position:0%
actually using that
null<00:15:21.680><c> node</c><00:15:21.920><c> so</c><00:15:22.079><c> we're</c><00:15:22.240><c> just</c><00:15:22.399><c> going</c><00:15:22.480><c> to</c><00:15:22.639><c> ignore</c>

00:15:23.110 --> 00:15:23.120 align:start position:0%
null node so we're just going to ignore
 

00:15:23.120 --> 00:15:24.389 align:start position:0%
null node so we're just going to ignore
the<00:15:23.360><c> null</c><00:15:23.680><c> nodes</c>

00:15:24.389 --> 00:15:24.399 align:start position:0%
the null nodes
 

00:15:24.399 --> 00:15:26.470 align:start position:0%
the null nodes
and<00:15:24.639><c> actually</c><00:15:25.040><c> we're</c><00:15:25.519><c> we're</c><00:15:25.760><c> adding</c><00:15:26.079><c> both</c><00:15:26.320><c> of</c>

00:15:26.470 --> 00:15:26.480 align:start position:0%
and actually we're we're adding both of
 

00:15:26.480 --> 00:15:28.150 align:start position:0%
and actually we're we're adding both of
these<00:15:26.639><c> nodes</c><00:15:26.959><c> but</c><00:15:27.120><c> we</c><00:15:27.279><c> also</c><00:15:27.440><c> want</c><00:15:27.600><c> to</c><00:15:27.680><c> add</c><00:15:27.920><c> the</c>

00:15:28.150 --> 00:15:28.160 align:start position:0%
these nodes but we also want to add the
 

00:15:28.160 --> 00:15:29.910 align:start position:0%
these nodes but we also want to add the
depth<00:15:28.480><c> of</c><00:15:28.639><c> each</c><00:15:28.800><c> of</c><00:15:28.959><c> them</c><00:15:29.040><c> so</c><00:15:29.279><c> that's</c><00:15:29.600><c> what</c><00:15:29.839><c> i'm</c>

00:15:29.910 --> 00:15:29.920 align:start position:0%
depth of each of them so that's what i'm
 

00:15:29.920 --> 00:15:30.230 align:start position:0%
depth of each of them so that's what i'm
going<00:15:30.000><c> to</c>

00:15:30.230 --> 00:15:30.240 align:start position:0%
going to
 

00:15:30.240 --> 00:15:31.509 align:start position:0%
going to
modify<00:15:30.720><c> right</c><00:15:30.880><c> now</c><00:15:31.040><c> so</c><00:15:31.199><c> we're</c><00:15:31.279><c> going</c><00:15:31.360><c> to</c>

00:15:31.509 --> 00:15:31.519 align:start position:0%
modify right now so we're going to
 

00:15:31.519 --> 00:15:33.430 align:start position:0%
modify right now so we're going to
append<00:15:32.320><c> the</c><00:15:32.560><c> left</c><00:15:32.880><c> node</c>

00:15:33.430 --> 00:15:33.440 align:start position:0%
append the left node
 

00:15:33.440 --> 00:15:34.790 align:start position:0%
append the left node
and<00:15:33.600><c> we're</c><00:15:33.759><c> going</c><00:15:33.839><c> to</c><00:15:33.920><c> append</c><00:15:34.240><c> it</c><00:15:34.320><c> with</c><00:15:34.560><c> its</c>

00:15:34.790 --> 00:15:34.800 align:start position:0%
and we're going to append it with its
 

00:15:34.800 --> 00:15:35.990 align:start position:0%
and we're going to append it with its
depth<00:15:35.040><c> which</c><00:15:35.279><c> is</c><00:15:35.360><c> just</c><00:15:35.519><c> going</c><00:15:35.600><c> to</c><00:15:35.680><c> be</c><00:15:35.839><c> the</c>

00:15:35.990 --> 00:15:36.000 align:start position:0%
depth which is just going to be the
 

00:15:36.000 --> 00:15:37.749 align:start position:0%
depth which is just going to be the
depth<00:15:36.240><c> of</c><00:15:36.320><c> the</c><00:15:36.480><c> node</c><00:15:36.639><c> that</c><00:15:36.800><c> we</c><00:15:36.880><c> just</c><00:15:37.199><c> popped</c>

00:15:37.749 --> 00:15:37.759 align:start position:0%
depth of the node that we just popped
 

00:15:37.759 --> 00:15:39.670 align:start position:0%
depth of the node that we just popped
plus<00:15:38.240><c> one</c><00:15:38.639><c> and</c><00:15:38.800><c> we're</c><00:15:38.959><c> going</c><00:15:38.959><c> to</c><00:15:39.040><c> do</c><00:15:39.279><c> the</c><00:15:39.360><c> exact</c>

00:15:39.670 --> 00:15:39.680 align:start position:0%
plus one and we're going to do the exact
 

00:15:39.680 --> 00:15:40.949 align:start position:0%
plus one and we're going to do the exact
same<00:15:39.920><c> thing</c><00:15:40.079><c> for</c><00:15:40.320><c> node</c>

00:15:40.949 --> 00:15:40.959 align:start position:0%
same thing for node
 

00:15:40.959 --> 00:15:44.230 align:start position:0%
same thing for node
dot<00:15:42.000><c> write</c><00:15:43.920><c> so</c>

00:15:44.230 --> 00:15:44.240 align:start position:0%
dot write so
 

00:15:44.240 --> 00:15:46.389 align:start position:0%
dot write so
copy<00:15:44.639><c> paste</c><00:15:45.040><c> and</c><00:15:45.279><c> update</c><00:15:45.759><c> this</c><00:15:46.000><c> so</c><00:15:46.240><c> we're</c>

00:15:46.389 --> 00:15:46.399 align:start position:0%
copy paste and update this so we're
 

00:15:46.399 --> 00:15:48.069 align:start position:0%
copy paste and update this so we're
adding<00:15:46.720><c> both</c><00:15:46.959><c> of</c><00:15:47.040><c> the</c><00:15:47.199><c> nodes</c><00:15:47.519><c> even</c><00:15:47.680><c> if</c><00:15:47.759><c> they're</c>

00:15:48.069 --> 00:15:48.079 align:start position:0%
adding both of the nodes even if they're
 

00:15:48.079 --> 00:15:49.670 align:start position:0%
adding both of the nodes even if they're
null<00:15:48.399><c> we're</c><00:15:48.560><c> adding</c><00:15:48.880><c> them</c>

00:15:49.670 --> 00:15:49.680 align:start position:0%
null we're adding them
 

00:15:49.680 --> 00:15:50.870 align:start position:0%
null we're adding them
and<00:15:49.759><c> then</c><00:15:49.920><c> we're</c><00:15:50.160><c> just</c><00:15:50.240><c> going</c><00:15:50.320><c> to</c><00:15:50.480><c> continue</c>

00:15:50.870 --> 00:15:50.880 align:start position:0%
and then we're just going to continue
 

00:15:50.880 --> 00:15:52.389 align:start position:0%
and then we're just going to continue
through<00:15:51.040><c> the</c><00:15:51.199><c> stack</c><00:15:51.600><c> until</c><00:15:51.920><c> the</c><00:15:52.079><c> stack</c>

00:15:52.389 --> 00:15:52.399 align:start position:0%
through the stack until the stack
 

00:15:52.399 --> 00:15:53.030 align:start position:0%
through the stack until the stack
becomes

00:15:53.030 --> 00:15:53.040 align:start position:0%
becomes
 

00:15:53.040 --> 00:15:55.350 align:start position:0%
becomes
empty<00:15:54.079><c> and</c><00:15:54.160><c> then</c><00:15:54.399><c> once</c><00:15:54.639><c> that</c><00:15:54.800><c> is</c><00:15:54.880><c> done</c><00:15:55.120><c> we</c><00:15:55.279><c> can</c>

00:15:55.350 --> 00:15:55.360 align:start position:0%
empty and then once that is done we can
 

00:15:55.360 --> 00:15:56.629 align:start position:0%
empty and then once that is done we can
go<00:15:55.519><c> ahead</c><00:15:55.759><c> and</c><00:15:55.920><c> return</c>

00:15:56.629 --> 00:15:56.639 align:start position:0%
go ahead and return
 

00:15:56.639 --> 00:15:59.110 align:start position:0%
go ahead and return
the<00:15:56.880><c> result</c><00:15:57.759><c> and</c><00:15:58.000><c> this</c><00:15:58.240><c> is</c><00:15:58.320><c> the</c><00:15:58.480><c> entire</c><00:15:58.880><c> code</c>

00:15:59.110 --> 00:15:59.120 align:start position:0%
the result and this is the entire code
 

00:15:59.120 --> 00:16:00.629 align:start position:0%
the result and this is the entire code
and<00:15:59.279><c> i</c><00:15:59.440><c> actually</c><00:15:59.680><c> just</c><00:15:59.920><c> realized</c>

00:16:00.629 --> 00:16:00.639 align:start position:0%
and i actually just realized
 

00:16:00.639 --> 00:16:02.710 align:start position:0%
and i actually just realized
that<00:16:01.040><c> we</c><00:16:01.199><c> can</c><00:16:01.440><c> actually</c><00:16:01.759><c> simplify</c><00:16:02.240><c> the</c><00:16:02.320><c> code</c><00:16:02.639><c> a</c>

00:16:02.710 --> 00:16:02.720 align:start position:0%
that we can actually simplify the code a
 

00:16:02.720 --> 00:16:04.310 align:start position:0%
that we can actually simplify the code a
little<00:16:02.880><c> bit</c><00:16:03.040><c> we</c><00:16:03.120><c> can</c><00:16:03.279><c> actually</c><00:16:03.680><c> get</c><00:16:03.920><c> rid</c><00:16:04.160><c> of</c>

00:16:04.310 --> 00:16:04.320 align:start position:0%
little bit we can actually get rid of
 

00:16:04.320 --> 00:16:06.069 align:start position:0%
little bit we can actually get rid of
these<00:16:04.639><c> two</c><00:16:04.880><c> first</c><00:16:05.279><c> lines</c>

00:16:06.069 --> 00:16:06.079 align:start position:0%
these two first lines
 

00:16:06.079 --> 00:16:09.509 align:start position:0%
these two first lines
and<00:16:06.800><c> set</c><00:16:07.440><c> the</c><00:16:08.000><c> result</c><00:16:08.480><c> initially</c><00:16:08.959><c> equal</c><00:16:09.199><c> to</c>

00:16:09.509 --> 00:16:09.519 align:start position:0%
and set the result initially equal to
 

00:16:09.519 --> 00:16:10.230 align:start position:0%
and set the result initially equal to
zero

00:16:10.230 --> 00:16:10.240 align:start position:0%
zero
 

00:16:10.240 --> 00:16:13.110 align:start position:0%
zero
so<00:16:10.480><c> then</c><00:16:10.800><c> if</c><00:16:10.880><c> we</c><00:16:11.120><c> do</c><00:16:11.360><c> have</c><00:16:11.519><c> a</c><00:16:11.839><c> null</c><00:16:12.320><c> root</c><00:16:12.639><c> node</c>

00:16:13.110 --> 00:16:13.120 align:start position:0%
so then if we do have a null root node
 

00:16:13.120 --> 00:16:15.269 align:start position:0%
so then if we do have a null root node
the<00:16:13.279><c> loop</c><00:16:13.600><c> will</c><00:16:13.839><c> execute</c><00:16:14.320><c> we'll</c><00:16:14.560><c> pop</c><00:16:14.880><c> this</c>

00:16:15.269 --> 00:16:15.279 align:start position:0%
the loop will execute we'll pop this
 

00:16:15.279 --> 00:16:17.269 align:start position:0%
the loop will execute we'll pop this
but<00:16:15.440><c> then</c><00:16:15.600><c> the</c><00:16:15.839><c> if</c><00:16:16.079><c> statement</c><00:16:16.480><c> won't</c><00:16:16.800><c> execute</c>

00:16:17.269 --> 00:16:17.279 align:start position:0%
but then the if statement won't execute
 

00:16:17.279 --> 00:16:19.189 align:start position:0%
but then the if statement won't execute
so<00:16:17.440><c> then</c><00:16:17.600><c> the</c><00:16:17.759><c> result</c><00:16:18.160><c> will</c><00:16:18.320><c> stay</c><00:16:18.720><c> zero</c><00:16:19.120><c> and</c>

00:16:19.189 --> 00:16:19.199 align:start position:0%
so then the result will stay zero and
 

00:16:19.199 --> 00:16:21.030 align:start position:0%
so then the result will stay zero and
then<00:16:19.360><c> we'll</c><00:16:19.519><c> end</c><00:16:19.680><c> up</c><00:16:19.759><c> returning</c><00:16:20.320><c> zero</c><00:16:20.720><c> but</c><00:16:20.959><c> of</c>

00:16:21.030 --> 00:16:21.040 align:start position:0%
then we'll end up returning zero but of
 

00:16:21.040 --> 00:16:23.110 align:start position:0%
then we'll end up returning zero but of
course<00:16:21.279><c> if</c><00:16:21.440><c> the</c><00:16:21.600><c> root</c><00:16:21.920><c> is</c><00:16:22.160><c> non-null</c>

00:16:23.110 --> 00:16:23.120 align:start position:0%
course if the root is non-null
 

00:16:23.120 --> 00:16:25.590 align:start position:0%
course if the root is non-null
we<00:16:23.279><c> will</c><00:16:23.600><c> end</c><00:16:23.839><c> up</c><00:16:24.079><c> updating</c><00:16:24.560><c> the</c><00:16:24.800><c> result</c><00:16:25.440><c> so</c>

00:16:25.590 --> 00:16:25.600 align:start position:0%
we will end up updating the result so
 

00:16:25.600 --> 00:16:27.430 align:start position:0%
we will end up updating the result so
this<00:16:25.839><c> is</c><00:16:26.000><c> the</c><00:16:26.240><c> third</c><00:16:26.560><c> and</c><00:16:26.720><c> final</c><00:16:27.040><c> solution</c>

00:16:27.430 --> 00:16:27.440 align:start position:0%
this is the third and final solution
 

00:16:27.440 --> 00:16:29.030 align:start position:0%
this is the third and final solution
that<00:16:27.600><c> i</c><00:16:27.680><c> wanted</c><00:16:27.920><c> to</c><00:16:28.000><c> show</c><00:16:28.160><c> you</c><00:16:28.240><c> they</c><00:16:28.480><c> all</c><00:16:28.720><c> have</c>

00:16:29.030 --> 00:16:29.040 align:start position:0%
that i wanted to show you they all have
 

00:16:29.040 --> 00:16:30.629 align:start position:0%
that i wanted to show you they all have
basically<00:16:29.440><c> the</c><00:16:29.600><c> same</c><00:16:29.920><c> time</c><00:16:30.160><c> and</c><00:16:30.320><c> space</c>

00:16:30.629 --> 00:16:30.639 align:start position:0%
basically the same time and space
 

00:16:30.639 --> 00:16:31.670 align:start position:0%
basically the same time and space
complexity

00:16:31.670 --> 00:16:31.680 align:start position:0%
complexity
 

00:16:31.680 --> 00:16:33.829 align:start position:0%
complexity
but<00:16:31.839><c> there's</c><00:16:32.320><c> definitely</c><00:16:33.040><c> variations</c><00:16:33.680><c> with</c>

00:16:33.829 --> 00:16:33.839 align:start position:0%
but there's definitely variations with
 

00:16:33.839 --> 00:16:35.350 align:start position:0%
but there's definitely variations with
each<00:16:34.000><c> of</c><00:16:34.160><c> these</c><00:16:34.320><c> solutions</c><00:16:34.800><c> so</c><00:16:34.959><c> i</c><00:16:35.040><c> hope</c><00:16:35.199><c> that</c>

00:16:35.350 --> 00:16:35.360 align:start position:0%
each of these solutions so i hope that
 

00:16:35.360 --> 00:16:36.310 align:start position:0%
each of these solutions so i hope that
this<00:16:35.519><c> was</c><00:16:35.680><c> helpful</c>

00:16:36.310 --> 00:16:36.320 align:start position:0%
this was helpful
 

00:16:36.320 --> 00:16:38.470 align:start position:0%
this was helpful
if<00:16:36.480><c> it</c><00:16:36.639><c> was</c><00:16:37.120><c> please</c><00:16:37.440><c> like</c><00:16:37.680><c> and</c><00:16:37.759><c> subscribe</c><00:16:38.320><c> it</c>

00:16:38.470 --> 00:16:38.480 align:start position:0%
if it was please like and subscribe it
 

00:16:38.480 --> 00:16:40.230 align:start position:0%
if it was please like and subscribe it
supports<00:16:38.800><c> the</c><00:16:38.959><c> channel</c><00:16:39.360><c> a</c><00:16:39.519><c> lot</c><00:16:39.839><c> and</c><00:16:40.000><c> i'll</c>

00:16:40.230 --> 00:16:40.240 align:start position:0%
supports the channel a lot and i'll
 

00:16:40.240 --> 00:16:41.910 align:start position:0%
supports the channel a lot and i'll
hopefully<00:16:40.800><c> see</c><00:16:40.959><c> you</c><00:16:41.120><c> pretty</c><00:16:41.360><c> soon</c>

00:16:41.910 --> 00:16:41.920 align:start position:0%
hopefully see you pretty soon
 

00:16:41.920 --> 00:16:44.800 align:start position:0%
hopefully see you pretty soon
thanks<00:16:42.160><c> for</c><00:16:42.320><c> watching</c>

