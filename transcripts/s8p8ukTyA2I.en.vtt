WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:01.829 align:start position:0%
 
everyone<00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.439><c> let's</c><00:00:01.680><c> write</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
everyone welcome back and let's write
 

00:00:01.839 --> 00:00:03.590 align:start position:0%
everyone welcome back and let's write
some<00:00:02.000><c> more</c><00:00:02.240><c> neat</c><00:00:02.480><c> code</c><00:00:02.720><c> today</c><00:00:02.960><c> so</c><00:00:03.120><c> today</c><00:00:03.439><c> let's</c>

00:00:03.590 --> 00:00:03.600 align:start position:0%
some more neat code today so today let's
 

00:00:03.600 --> 00:00:06.070 align:start position:0%
some more neat code today so today let's
solve<00:00:03.840><c> the</c><00:00:04.080><c> problem</c><00:00:04.560><c> task</c><00:00:04.960><c> scheduler</c><00:00:05.759><c> one</c><00:00:05.920><c> of</c>

00:00:06.070 --> 00:00:06.080 align:start position:0%
solve the problem task scheduler one of
 

00:00:06.080 --> 00:00:08.150 align:start position:0%
solve the problem task scheduler one of
you<00:00:06.240><c> suggested</c><00:00:06.799><c> this</c><00:00:07.040><c> problem</c><00:00:07.759><c> and</c><00:00:07.919><c> i</c><00:00:08.000><c> think</c>

00:00:08.150 --> 00:00:08.160 align:start position:0%
you suggested this problem and i think
 

00:00:08.160 --> 00:00:09.910 align:start position:0%
you suggested this problem and i think
it's<00:00:08.320><c> a</c><00:00:08.400><c> pretty</c><00:00:08.639><c> good</c><00:00:08.800><c> one</c><00:00:09.040><c> so</c><00:00:09.200><c> we're</c><00:00:09.360><c> given</c><00:00:09.760><c> an</c>

00:00:09.910 --> 00:00:09.920 align:start position:0%
it's a pretty good one so we're given an
 

00:00:09.920 --> 00:00:12.789 align:start position:0%
it's a pretty good one so we're given an
array<00:00:10.400><c> of</c><00:00:10.639><c> tasks</c><00:00:11.280><c> it's</c><00:00:11.519><c> a</c><00:00:11.599><c> character</c><00:00:12.160><c> array</c>

00:00:12.789 --> 00:00:12.799 align:start position:0%
array of tasks it's a character array
 

00:00:12.799 --> 00:00:14.390 align:start position:0%
array of tasks it's a character array
and<00:00:12.880><c> it's</c><00:00:13.040><c> going</c><00:00:13.120><c> to</c><00:00:13.200><c> be</c><00:00:13.440><c> limited</c><00:00:14.000><c> to</c><00:00:14.240><c> the</c>

00:00:14.390 --> 00:00:14.400 align:start position:0%
and it's going to be limited to the
 

00:00:14.400 --> 00:00:17.510 align:start position:0%
and it's going to be limited to the
characters<00:00:15.360><c> from</c><00:00:15.599><c> uppercase</c><00:00:16.320><c> a</c><00:00:16.640><c> to</c><00:00:16.880><c> uppercase</c>

00:00:17.510 --> 00:00:17.520 align:start position:0%
characters from uppercase a to uppercase
 

00:00:17.520 --> 00:00:19.910 align:start position:0%
characters from uppercase a to uppercase
z<00:00:17.840><c> so</c><00:00:18.080><c> 26</c><00:00:18.720><c> characters</c><00:00:19.439><c> each</c><00:00:19.680><c> of</c><00:00:19.760><c> the</c>

00:00:19.910 --> 00:00:19.920 align:start position:0%
z so 26 characters each of the
 

00:00:19.920 --> 00:00:22.150 align:start position:0%
z so 26 characters each of the
characters<00:00:20.320><c> represents</c><00:00:20.800><c> a</c><00:00:20.960><c> task</c><00:00:21.680><c> and</c><00:00:22.000><c> the</c>

00:00:22.150 --> 00:00:22.160 align:start position:0%
characters represents a task and the
 

00:00:22.160 --> 00:00:24.230 align:start position:0%
characters represents a task and the
task<00:00:22.560><c> is</c><00:00:22.720><c> something</c><00:00:22.960><c> that</c><00:00:23.119><c> the</c><00:00:23.279><c> cpu</c><00:00:23.840><c> needs</c><00:00:24.080><c> to</c>

00:00:24.230 --> 00:00:24.240 align:start position:0%
task is something that the cpu needs to
 

00:00:24.240 --> 00:00:27.109 align:start position:0%
task is something that the cpu needs to
process<00:00:25.039><c> and</c><00:00:25.199><c> the</c><00:00:25.359><c> tasks</c><00:00:25.840><c> could</c><00:00:26.160><c> be</c><00:00:26.400><c> processed</c>

00:00:27.109 --> 00:00:27.119 align:start position:0%
process and the tasks could be processed
 

00:00:27.119 --> 00:00:31.429 align:start position:0%
process and the tasks could be processed
in<00:00:27.519><c> any</c><00:00:27.920><c> order</c><00:00:28.720><c> each</c><00:00:29.119><c> task</c><00:00:30.080><c> takes</c><00:00:30.400><c> exactly</c><00:00:31.119><c> one</c>

00:00:31.429 --> 00:00:31.439 align:start position:0%
in any order each task takes exactly one
 

00:00:31.439 --> 00:00:33.590 align:start position:0%
in any order each task takes exactly one
unit<00:00:31.840><c> of</c><00:00:32.000><c> time</c><00:00:32.320><c> to</c><00:00:32.480><c> process</c><00:00:32.960><c> so</c><00:00:33.040><c> that's</c><00:00:33.280><c> good</c>

00:00:33.590 --> 00:00:33.600 align:start position:0%
unit of time to process so that's good
 

00:00:33.600 --> 00:00:35.750 align:start position:0%
unit of time to process so that's good
because<00:00:33.840><c> it</c><00:00:33.920><c> makes</c><00:00:34.239><c> things</c><00:00:34.559><c> simple</c><00:00:35.040><c> for</c><00:00:35.280><c> us</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
because it makes things simple for us
 

00:00:35.760 --> 00:00:39.030 align:start position:0%
because it makes things simple for us
and<00:00:36.239><c> for</c><00:00:36.399><c> each</c><00:00:36.719><c> unit</c><00:00:37.120><c> of</c><00:00:37.360><c> time</c><00:00:38.160><c> the</c><00:00:38.320><c> cpu</c><00:00:38.800><c> could</c>

00:00:39.030 --> 00:00:39.040 align:start position:0%
and for each unit of time the cpu could
 

00:00:39.040 --> 00:00:41.510 align:start position:0%
and for each unit of time the cpu could
either<00:00:39.440><c> process</c><00:00:39.920><c> an</c><00:00:40.160><c> entire</c><00:00:40.559><c> task</c><00:00:40.960><c> or</c><00:00:41.360><c> it</c>

00:00:41.510 --> 00:00:41.520 align:start position:0%
either process an entire task or it
 

00:00:41.520 --> 00:00:44.069 align:start position:0%
either process an entire task or it
could<00:00:41.760><c> be</c><00:00:42.160><c> idle</c><00:00:42.800><c> and</c><00:00:42.960><c> the</c><00:00:43.120><c> reason</c><00:00:43.520><c> it</c><00:00:43.680><c> would</c><00:00:43.920><c> be</c>

00:00:44.069 --> 00:00:44.079 align:start position:0%
could be idle and the reason it would be
 

00:00:44.079 --> 00:00:46.310 align:start position:0%
could be idle and the reason it would be
idle<00:00:44.559><c> is</c><00:00:44.719><c> because</c><00:00:45.120><c> we're</c><00:00:45.360><c> also</c><00:00:45.760><c> given</c>

00:00:46.310 --> 00:00:46.320 align:start position:0%
idle is because we're also given
 

00:00:46.320 --> 00:00:48.549 align:start position:0%
idle is because we're also given
non-negative<00:00:46.960><c> integer</c><00:00:47.440><c> input</c><00:00:48.000><c> n</c><00:00:48.399><c> that</c>

00:00:48.549 --> 00:00:48.559 align:start position:0%
non-negative integer input n that
 

00:00:48.559 --> 00:00:51.350 align:start position:0%
non-negative integer input n that
represents<00:00:49.120><c> the</c><00:00:49.360><c> cooldown</c><00:00:50.000><c> period</c><00:00:50.800><c> between</c>

00:00:51.350 --> 00:00:51.360 align:start position:0%
represents the cooldown period between
 

00:00:51.360 --> 00:00:55.270 align:start position:0%
represents the cooldown period between
the<00:00:51.600><c> two</c><00:00:52.079><c> same</c><00:00:52.960><c> tasks</c><00:00:53.920><c> and</c><00:00:54.079><c> the</c><00:00:54.239><c> same</c><00:00:54.559><c> task</c><00:00:55.039><c> is</c>

00:00:55.270 --> 00:00:55.280 align:start position:0%
the two same tasks and the same task is
 

00:00:55.280 --> 00:00:57.990 align:start position:0%
the two same tasks and the same task is
represented<00:00:55.920><c> by</c><00:00:56.239><c> the</c><00:00:56.480><c> same</c><00:00:57.120><c> letter</c><00:00:57.520><c> the</c><00:00:57.600><c> same</c>

00:00:57.990 --> 00:00:58.000 align:start position:0%
represented by the same letter the same
 

00:00:58.000 --> 00:01:00.869 align:start position:0%
represented by the same letter the same
character<00:00:58.879><c> in</c><00:00:59.199><c> the</c><00:00:59.359><c> array</c><00:01:00.079><c> and</c><00:01:00.320><c> to</c><00:01:00.480><c> understand</c>

00:01:00.869 --> 00:01:00.879 align:start position:0%
character in the array and to understand
 

00:01:00.879 --> 00:01:03.430 align:start position:0%
character in the array and to understand
this<00:01:01.280><c> let's</c><00:01:01.600><c> take</c><00:01:01.840><c> a</c><00:01:02.000><c> look</c><00:01:02.399><c> at</c><00:01:02.640><c> an</c><00:01:02.879><c> example</c><00:01:03.280><c> and</c>

00:01:03.430 --> 00:01:03.440 align:start position:0%
this let's take a look at an example and
 

00:01:03.440 --> 00:01:04.710 align:start position:0%
this let's take a look at an example and
by<00:01:03.600><c> the</c><00:01:03.680><c> way</c><00:01:03.840><c> what</c><00:01:04.000><c> we</c><00:01:04.239><c> actually</c><00:01:04.479><c> want</c><00:01:04.640><c> to</c>

00:01:04.710 --> 00:01:04.720 align:start position:0%
by the way what we actually want to
 

00:01:04.720 --> 00:01:08.230 align:start position:0%
by the way what we actually want to
return<00:01:05.360><c> is</c><00:01:05.920><c> the</c><00:01:06.240><c> minimum</c><00:01:06.880><c> number</c><00:01:07.280><c> of</c><00:01:07.520><c> units</c><00:01:07.920><c> of</c>

00:01:08.230 --> 00:01:08.240 align:start position:0%
return is the minimum number of units of
 

00:01:08.240 --> 00:01:11.190 align:start position:0%
return is the minimum number of units of
time<00:01:08.880><c> that</c><00:01:09.040><c> the</c><00:01:09.200><c> cpu</c><00:01:09.680><c> will</c><00:01:09.920><c> take</c><00:01:10.400><c> to</c><00:01:10.640><c> finish</c>

00:01:11.190 --> 00:01:11.200 align:start position:0%
time that the cpu will take to finish
 

00:01:11.200 --> 00:01:13.429 align:start position:0%
time that the cpu will take to finish
all<00:01:11.600><c> of</c><00:01:11.920><c> the</c><00:01:12.159><c> tasks</c><00:01:12.799><c> let's</c><00:01:12.960><c> take</c><00:01:13.119><c> a</c><00:01:13.200><c> look</c><00:01:13.360><c> at</c>

00:01:13.429 --> 00:01:13.439 align:start position:0%
all of the tasks let's take a look at
 

00:01:13.439 --> 00:01:15.749 align:start position:0%
all of the tasks let's take a look at
this<00:01:13.680><c> example</c><00:01:14.240><c> we're</c><00:01:14.400><c> given</c><00:01:14.960><c> these</c><00:01:15.280><c> tasks</c>

00:01:15.749 --> 00:01:15.759 align:start position:0%
this example we're given these tasks
 

00:01:15.759 --> 00:01:18.870 align:start position:0%
this example we're given these tasks
right<00:01:16.080><c> three</c><00:01:16.479><c> a</c><00:01:16.799><c> tasks</c><00:01:17.360><c> and</c><00:01:17.600><c> three</c><00:01:18.080><c> b</c><00:01:18.400><c> tasks</c>

00:01:18.870 --> 00:01:18.880 align:start position:0%
right three a tasks and three b tasks
 

00:01:18.880 --> 00:01:21.670 align:start position:0%
right three a tasks and three b tasks
and<00:01:19.040><c> the</c><00:01:19.280><c> idle</c><00:01:19.680><c> time</c><00:01:20.000><c> we're</c><00:01:20.159><c> given</c><00:01:20.640><c> is</c><00:01:20.960><c> two</c>

00:01:21.670 --> 00:01:21.680 align:start position:0%
and the idle time we're given is two
 

00:01:21.680 --> 00:01:24.390 align:start position:0%
and the idle time we're given is two
units<00:01:22.080><c> of</c><00:01:22.320><c> time</c><00:01:22.799><c> so</c><00:01:23.119><c> basically</c><00:01:23.680><c> let's</c><00:01:23.840><c> say</c><00:01:24.080><c> we</c>

00:01:24.390 --> 00:01:24.400 align:start position:0%
units of time so basically let's say we
 

00:01:24.400 --> 00:01:27.030 align:start position:0%
units of time so basically let's say we
processed<00:01:25.280><c> an</c><00:01:25.520><c> a</c><00:01:25.759><c> task</c><00:01:26.159><c> right</c><00:01:26.320><c> that</c><00:01:26.479><c> takes</c><00:01:26.720><c> us</c>

00:01:27.030 --> 00:01:27.040 align:start position:0%
processed an a task right that takes us
 

00:01:27.040 --> 00:01:30.789 align:start position:0%
processed an a task right that takes us
one<00:01:27.680><c> unit</c><00:01:28.080><c> of</c><00:01:28.240><c> time</c><00:01:28.479><c> to</c><00:01:28.720><c> process</c><00:01:29.600><c> now</c><00:01:30.240><c> we</c>

00:01:30.789 --> 00:01:30.799 align:start position:0%
one unit of time to process now we
 

00:01:30.799 --> 00:01:33.749 align:start position:0%
one unit of time to process now we
process<00:01:31.520><c> a</c><00:01:31.680><c> b</c><00:01:31.920><c> task</c><00:01:32.479><c> and</c><00:01:32.720><c> now</c><00:01:33.119><c> we</c><00:01:33.360><c> know</c><00:01:33.600><c> that</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
process a b task and now we know that
 

00:01:33.759 --> 00:01:37.109 align:start position:0%
process a b task and now we know that
before<00:01:34.240><c> we</c><00:01:34.479><c> process</c><00:01:35.119><c> another</c><00:01:35.759><c> a</c><00:01:36.079><c> task</c><00:01:36.640><c> we</c><00:01:36.880><c> have</c>

00:01:37.109 --> 00:01:37.119 align:start position:0%
before we process another a task we have
 

00:01:37.119 --> 00:01:41.270 align:start position:0%
before we process another a task we have
to<00:01:37.439><c> wait</c><00:01:38.000><c> two</c><00:01:38.799><c> units</c><00:01:39.360><c> of</c><00:01:39.600><c> time</c><00:01:40.320><c> so</c><00:01:41.040><c> you</c><00:01:41.200><c> know</c>

00:01:41.270 --> 00:01:41.280 align:start position:0%
to wait two units of time so you know
 

00:01:41.280 --> 00:01:43.830 align:start position:0%
to wait two units of time so you know
let's<00:01:41.439><c> say</c><00:01:41.600><c> we</c><00:01:42.079><c> process</c><00:01:42.479><c> an</c><00:01:42.720><c> a</c><00:01:43.280><c> we</c><00:01:43.520><c> can't</c>

00:01:43.830 --> 00:01:43.840 align:start position:0%
let's say we process an a we can't
 

00:01:43.840 --> 00:01:47.190 align:start position:0%
let's say we process an a we can't
process<00:01:44.320><c> another</c><00:01:44.880><c> a</c><00:01:45.360><c> we</c><00:01:45.520><c> have</c><00:01:45.680><c> to</c><00:01:45.920><c> wait</c><00:01:46.560><c> two</c>

00:01:47.190 --> 00:01:47.200 align:start position:0%
process another a we have to wait two
 

00:01:47.200 --> 00:01:49.910 align:start position:0%
process another a we have to wait two
units<00:01:47.680><c> of</c><00:01:47.920><c> time</c><00:01:48.399><c> before</c><00:01:48.880><c> we</c><00:01:49.040><c> can</c><00:01:49.280><c> process</c>

00:01:49.910 --> 00:01:49.920 align:start position:0%
units of time before we can process
 

00:01:49.920 --> 00:01:51.910 align:start position:0%
units of time before we can process
another<00:01:50.479><c> a</c><00:01:50.640><c> so</c><00:01:50.799><c> what</c><00:01:50.960><c> are</c><00:01:51.119><c> we</c><00:01:51.200><c> gonna</c><00:01:51.360><c> do</c><00:01:51.600><c> in</c><00:01:51.759><c> the</c>

00:01:51.910 --> 00:01:51.920 align:start position:0%
another a so what are we gonna do in the
 

00:01:51.920 --> 00:01:55.350 align:start position:0%
another a so what are we gonna do in the
meantime<00:01:52.880><c> well</c><00:01:53.360><c> there's</c><00:01:53.680><c> a</c><00:01:54.000><c> b</c><00:01:54.399><c> as</c><00:01:54.640><c> well</c><00:01:55.200><c> so</c>

00:01:55.350 --> 00:01:55.360 align:start position:0%
meantime well there's a b as well so
 

00:01:55.360 --> 00:01:58.870 align:start position:0%
meantime well there's a b as well so
let's<00:01:55.680><c> process</c><00:01:56.320><c> one</c><00:01:56.799><c> of</c><00:01:57.280><c> the</c><00:01:57.439><c> b's</c><00:01:57.920><c> and</c><00:01:58.159><c> now</c><00:01:58.640><c> for</c>

00:01:58.870 --> 00:01:58.880 align:start position:0%
let's process one of the b's and now for
 

00:01:58.880 --> 00:02:01.350 align:start position:0%
let's process one of the b's and now for
this<00:01:59.280><c> b</c><00:01:59.840><c> we</c><00:02:00.000><c> know</c><00:02:00.240><c> we</c><00:02:00.399><c> actually</c><00:02:00.640><c> have</c><00:02:00.719><c> to</c><00:02:01.040><c> wait</c>

00:02:01.350 --> 00:02:01.360 align:start position:0%
this b we know we actually have to wait
 

00:02:01.360 --> 00:02:04.389 align:start position:0%
this b we know we actually have to wait
two<00:02:01.920><c> units</c><00:02:02.240><c> of</c><00:02:02.399><c> time</c><00:02:02.799><c> before</c><00:02:03.200><c> we</c><00:02:03.360><c> can</c><00:02:03.600><c> process</c>

00:02:04.389 --> 00:02:04.399 align:start position:0%
two units of time before we can process
 

00:02:04.399 --> 00:02:05.749 align:start position:0%
two units of time before we can process
another<00:02:04.960><c> b</c>

00:02:05.749 --> 00:02:05.759 align:start position:0%
another b
 

00:02:05.759 --> 00:02:07.350 align:start position:0%
another b
so<00:02:06.000><c> the</c><00:02:06.079><c> next</c><00:02:06.240><c> time</c><00:02:06.399><c> we</c><00:02:06.560><c> can</c><00:02:06.640><c> process</c><00:02:07.040><c> another</c>

00:02:07.350 --> 00:02:07.360 align:start position:0%
so the next time we can process another
 

00:02:07.360 --> 00:02:09.910 align:start position:0%
so the next time we can process another
b<00:02:07.520><c> will</c><00:02:07.680><c> be</c><00:02:07.840><c> at</c><00:02:08.080><c> this</c><00:02:08.399><c> point</c><00:02:08.720><c> in</c><00:02:08.879><c> time</c><00:02:09.360><c> after</c><00:02:09.679><c> we</c>

00:02:09.910 --> 00:02:09.920 align:start position:0%
b will be at this point in time after we
 

00:02:09.920 --> 00:02:12.470 align:start position:0%
b will be at this point in time after we
have<00:02:10.080><c> processed</c><00:02:10.560><c> our</c><00:02:10.720><c> second</c><00:02:11.200><c> a</c><00:02:11.520><c> so</c><00:02:12.160><c> now</c><00:02:12.319><c> the</c>

00:02:12.470 --> 00:02:12.480 align:start position:0%
have processed our second a so now the
 

00:02:12.480 --> 00:02:14.790 align:start position:0%
have processed our second a so now the
question<00:02:12.879><c> is</c><00:02:13.200><c> can</c><00:02:13.360><c> we</c><00:02:13.680><c> fill</c><00:02:14.000><c> this</c><00:02:14.239><c> spot</c><00:02:14.560><c> with</c>

00:02:14.790 --> 00:02:14.800 align:start position:0%
question is can we fill this spot with
 

00:02:14.800 --> 00:02:16.949 align:start position:0%
question is can we fill this spot with
anything<00:02:15.200><c> or</c><00:02:15.440><c> are</c><00:02:15.520><c> we</c><00:02:15.680><c> gonna</c><00:02:15.840><c> have</c><00:02:16.000><c> to</c><00:02:16.080><c> be</c><00:02:16.319><c> idle</c>

00:02:16.949 --> 00:02:16.959 align:start position:0%
anything or are we gonna have to be idle
 

00:02:16.959 --> 00:02:19.589 align:start position:0%
anything or are we gonna have to be idle
at<00:02:17.200><c> this</c><00:02:17.520><c> point</c><00:02:17.840><c> in</c><00:02:18.000><c> time</c><00:02:18.480><c> and</c><00:02:18.879><c> there</c><00:02:19.200><c> aren't</c>

00:02:19.589 --> 00:02:19.599 align:start position:0%
at this point in time and there aren't
 

00:02:19.599 --> 00:02:22.150 align:start position:0%
at this point in time and there aren't
any<00:02:19.920><c> other</c><00:02:20.239><c> characters</c><00:02:20.720><c> right</c><00:02:20.879><c> we</c><00:02:21.120><c> had</c><00:02:21.520><c> one</c><00:02:21.840><c> a</c>

00:02:22.150 --> 00:02:22.160 align:start position:0%
any other characters right we had one a
 

00:02:22.160 --> 00:02:24.470 align:start position:0%
any other characters right we had one a
and<00:02:22.319><c> one</c><00:02:22.560><c> b</c><00:02:22.959><c> now</c><00:02:23.120><c> we</c><00:02:23.280><c> have</c><00:02:23.520><c> two</c><00:02:23.760><c> a's</c><00:02:24.080><c> and</c><00:02:24.239><c> two</c>

00:02:24.470 --> 00:02:24.480 align:start position:0%
and one b now we have two a's and two
 

00:02:24.480 --> 00:02:26.710 align:start position:0%
and one b now we have two a's and two
b's<00:02:25.040><c> remaining</c><00:02:25.760><c> so</c><00:02:25.920><c> we</c><00:02:26.000><c> can't</c><00:02:26.239><c> do</c><00:02:26.400><c> anything</c>

00:02:26.710 --> 00:02:26.720 align:start position:0%
b's remaining so we can't do anything
 

00:02:26.720 --> 00:02:29.430 align:start position:0%
b's remaining so we can't do anything
this<00:02:26.879><c> has</c><00:02:27.040><c> to</c><00:02:27.120><c> be</c><00:02:27.360><c> idle</c><00:02:27.840><c> we</c><00:02:28.080><c> process</c><00:02:28.480><c> an</c><00:02:28.640><c> a</c><00:02:29.120><c> a</c>

00:02:29.430 --> 00:02:29.440 align:start position:0%
this has to be idle we process an a a
 

00:02:29.440 --> 00:02:31.750 align:start position:0%
this has to be idle we process an a a
second<00:02:29.840><c> a</c><00:02:30.000><c> and</c><00:02:30.160><c> a</c><00:02:30.239><c> second</c><00:02:30.560><c> b</c><00:02:31.040><c> uh</c><00:02:31.200><c> that</c><00:02:31.360><c> means</c>

00:02:31.750 --> 00:02:31.760 align:start position:0%
second a and a second b uh that means
 

00:02:31.760 --> 00:02:33.589 align:start position:0%
second a and a second b uh that means
that<00:02:32.000><c> before</c><00:02:32.319><c> we</c><00:02:32.480><c> can</c><00:02:32.640><c> process</c><00:02:32.959><c> another</c><00:02:33.360><c> a</c><00:02:33.519><c> is</c>

00:02:33.589 --> 00:02:33.599 align:start position:0%
that before we can process another a is
 

00:02:33.599 --> 00:02:36.070 align:start position:0%
that before we can process another a is
gonna<00:02:33.760><c> be</c><00:02:33.920><c> two</c><00:02:34.160><c> units</c><00:02:34.480><c> of</c><00:02:34.640><c> time</c><00:02:34.879><c> so</c><00:02:35.200><c> this</c><00:02:35.440><c> b</c><00:02:35.920><c> and</c>

00:02:36.070 --> 00:02:36.080 align:start position:0%
gonna be two units of time so this b and
 

00:02:36.080 --> 00:02:38.070 align:start position:0%
gonna be two units of time so this b and
then<00:02:36.319><c> another</c><00:02:36.879><c> uh</c><00:02:37.120><c> unit</c><00:02:37.440><c> of</c><00:02:37.519><c> time</c><00:02:37.760><c> and</c><00:02:37.840><c> then</c>

00:02:38.070 --> 00:02:38.080 align:start position:0%
then another uh unit of time and then
 

00:02:38.080 --> 00:02:40.150 align:start position:0%
then another uh unit of time and then
another<00:02:38.400><c> a</c><00:02:38.800><c> and</c><00:02:38.959><c> we</c><00:02:39.120><c> also</c><00:02:39.360><c> process</c><00:02:39.680><c> the</c><00:02:39.840><c> b</c><00:02:40.080><c> the</c>

00:02:40.150 --> 00:02:40.160 align:start position:0%
another a and we also process the b the
 

00:02:40.160 --> 00:02:41.830 align:start position:0%
another a and we also process the b the
next<00:02:40.319><c> time</c><00:02:40.480><c> we</c><00:02:40.640><c> can</c><00:02:40.720><c> process</c><00:02:41.120><c> a</c><00:02:41.200><c> b</c><00:02:41.360><c> will</c><00:02:41.519><c> be</c><00:02:41.760><c> at</c>

00:02:41.830 --> 00:02:41.840 align:start position:0%
next time we can process a b will be at
 

00:02:41.840 --> 00:02:43.990 align:start position:0%
next time we can process a b will be at
this<00:02:42.080><c> point</c><00:02:42.400><c> in</c><00:02:42.480><c> time</c><00:02:42.959><c> so</c><00:02:43.200><c> at</c><00:02:43.360><c> this</c><00:02:43.599><c> point</c>

00:02:43.990 --> 00:02:44.000 align:start position:0%
this point in time so at this point
 

00:02:44.000 --> 00:02:46.390 align:start position:0%
this point in time so at this point
again<00:02:44.480><c> we</c><00:02:44.720><c> are</c><00:02:44.879><c> going</c><00:02:45.120><c> to</c><00:02:45.360><c> have</c><00:02:45.519><c> to</c><00:02:45.680><c> be</c><00:02:45.920><c> idle</c>

00:02:46.390 --> 00:02:46.400 align:start position:0%
again we are going to have to be idle
 

00:02:46.400 --> 00:02:48.790 align:start position:0%
again we are going to have to be idle
but<00:02:46.560><c> the</c><00:02:46.720><c> good</c><00:02:46.879><c> thing</c><00:02:47.120><c> is</c><00:02:47.440><c> that</c><00:02:47.760><c> this</c><00:02:48.160><c> is</c><00:02:48.560><c> the</c>

00:02:48.790 --> 00:02:48.800 align:start position:0%
but the good thing is that this is the
 

00:02:48.800 --> 00:02:51.110 align:start position:0%
but the good thing is that this is the
entire<00:02:49.440><c> um</c><00:02:50.000><c> like</c><00:02:50.239><c> all</c><00:02:50.319><c> the</c><00:02:50.480><c> tasks</c><00:02:50.800><c> we</c><00:02:50.959><c> were</c>

00:02:51.110 --> 00:02:51.120 align:start position:0%
entire um like all the tasks we were
 

00:02:51.120 --> 00:02:53.430 align:start position:0%
entire um like all the tasks we were
looking<00:02:51.360><c> for</c><00:02:51.599><c> three</c><00:02:51.920><c> a's</c><00:02:52.160><c> and</c><00:02:52.319><c> three</c><00:02:52.640><c> b's</c><00:02:53.200><c> so</c>

00:02:53.430 --> 00:02:53.440 align:start position:0%
looking for three a's and three b's so
 

00:02:53.440 --> 00:02:56.550 align:start position:0%
looking for three a's and three b's so
as<00:02:53.599><c> you</c><00:02:53.680><c> can</c><00:02:53.840><c> see</c><00:02:54.319><c> it</c><00:02:54.480><c> took</c><00:02:54.720><c> us</c><00:02:55.200><c> one</c><00:02:55.519><c> two</c><00:02:56.080><c> three</c>

00:02:56.550 --> 00:02:56.560 align:start position:0%
as you can see it took us one two three
 

00:02:56.560 --> 00:02:59.110 align:start position:0%
as you can see it took us one two three
four<00:02:56.879><c> five</c><00:02:57.200><c> six</c><00:02:57.519><c> seven</c><00:02:57.920><c> eight</c><00:02:58.400><c> units</c><00:02:58.720><c> of</c><00:02:58.879><c> time</c>

00:02:59.110 --> 00:02:59.120 align:start position:0%
four five six seven eight units of time
 

00:02:59.120 --> 00:03:01.270 align:start position:0%
four five six seven eight units of time
to<00:02:59.280><c> do</c><00:02:59.440><c> this</c><00:02:59.519><c> so</c><00:02:59.760><c> our</c><00:02:59.920><c> output</c><00:03:00.319><c> is</c><00:03:00.480><c> going</c><00:03:00.720><c> to</c><00:03:00.879><c> be</c>

00:03:01.270 --> 00:03:01.280 align:start position:0%
to do this so our output is going to be
 

00:03:01.280 --> 00:03:03.110 align:start position:0%
to do this so our output is going to be
a<00:03:01.599><c> so</c><00:03:01.760><c> now</c><00:03:01.920><c> let's</c><00:03:02.080><c> think</c><00:03:02.239><c> about</c><00:03:02.480><c> a</c><00:03:02.640><c> general</c>

00:03:03.110 --> 00:03:03.120 align:start position:0%
a so now let's think about a general
 

00:03:03.120 --> 00:03:04.790 align:start position:0%
a so now let's think about a general
approach<00:03:03.519><c> that</c><00:03:03.680><c> we</c><00:03:03.760><c> could</c><00:03:03.920><c> come</c><00:03:04.159><c> up</c><00:03:04.319><c> with</c><00:03:04.560><c> to</c>

00:03:04.790 --> 00:03:04.800 align:start position:0%
approach that we could come up with to
 

00:03:04.800 --> 00:03:06.869 align:start position:0%
approach that we could come up with to
solve<00:03:05.120><c> this</c><00:03:05.440><c> problem</c><00:03:05.840><c> so</c><00:03:06.000><c> let's</c><00:03:06.159><c> say</c><00:03:06.400><c> we</c><00:03:06.560><c> had</c>

00:03:06.869 --> 00:03:06.879 align:start position:0%
solve this problem so let's say we had
 

00:03:06.879 --> 00:03:09.670 align:start position:0%
solve this problem so let's say we had
this<00:03:07.280><c> as</c><00:03:07.519><c> our</c><00:03:07.840><c> input</c><00:03:08.560><c> first</c><00:03:08.879><c> thing</c><00:03:09.040><c> to</c><00:03:09.280><c> notice</c>

00:03:09.670 --> 00:03:09.680 align:start position:0%
this as our input first thing to notice
 

00:03:09.680 --> 00:03:11.270 align:start position:0%
this as our input first thing to notice
is<00:03:09.920><c> we're</c><00:03:10.080><c> going</c><00:03:10.159><c> to</c><00:03:10.239><c> be</c><00:03:10.319><c> given</c><00:03:10.640><c> characters</c><00:03:11.040><c> a</c>

00:03:11.270 --> 00:03:11.280 align:start position:0%
is we're going to be given characters a
 

00:03:11.280 --> 00:03:12.949 align:start position:0%
is we're going to be given characters a
through<00:03:11.519><c> z</c><00:03:11.760><c> doesn't</c><00:03:12.000><c> really</c><00:03:12.239><c> make</c><00:03:12.480><c> sense</c><00:03:12.800><c> to</c>

00:03:12.949 --> 00:03:12.959 align:start position:0%
through z doesn't really make sense to
 

00:03:12.959 --> 00:03:15.190 align:start position:0%
through z doesn't really make sense to
worry<00:03:13.200><c> about</c><00:03:13.519><c> which</c><00:03:14.159><c> character</c><00:03:14.959><c> we're</c>

00:03:15.190 --> 00:03:15.200 align:start position:0%
worry about which character we're
 

00:03:15.200 --> 00:03:16.550 align:start position:0%
worry about which character we're
looking<00:03:15.519><c> at</c><00:03:15.680><c> right</c><00:03:15.840><c> there's</c><00:03:16.080><c> not</c><00:03:16.239><c> really</c><00:03:16.400><c> not</c>

00:03:16.550 --> 00:03:16.560 align:start position:0%
looking at right there's not really not
 

00:03:16.560 --> 00:03:18.790 align:start position:0%
looking at right there's not really not
a<00:03:16.640><c> big</c><00:03:16.879><c> difference</c><00:03:17.200><c> between</c><00:03:17.519><c> a</c><00:03:17.680><c> b</c><00:03:17.920><c> and</c><00:03:18.080><c> a</c><00:03:18.239><c> c</c><00:03:18.640><c> but</c>

00:03:18.790 --> 00:03:18.800 align:start position:0%
a big difference between a b and a c but
 

00:03:18.800 --> 00:03:20.949 align:start position:0%
a big difference between a b and a c but
we<00:03:19.120><c> should</c><00:03:19.440><c> keep</c><00:03:19.680><c> track</c><00:03:19.920><c> of</c><00:03:20.080><c> how</c><00:03:20.319><c> many</c><00:03:20.640><c> of</c><00:03:20.800><c> each</c>

00:03:20.949 --> 00:03:20.959 align:start position:0%
we should keep track of how many of each
 

00:03:20.959 --> 00:03:23.110 align:start position:0%
we should keep track of how many of each
character<00:03:21.760><c> there</c><00:03:22.159><c> is</c><00:03:22.480><c> so</c><00:03:22.640><c> we</c><00:03:22.720><c> know</c><00:03:22.879><c> there's</c>

00:03:23.110 --> 00:03:23.120 align:start position:0%
character there is so we know there's
 

00:03:23.120 --> 00:03:26.390 align:start position:0%
character there is so we know there's
three<00:03:23.440><c> a's</c><00:03:24.159><c> two</c><00:03:24.400><c> b's</c><00:03:25.040><c> and</c><00:03:25.280><c> two</c><00:03:25.519><c> c's</c><00:03:26.080><c> right</c><00:03:26.239><c> we</c>

00:03:26.390 --> 00:03:26.400 align:start position:0%
three a's two b's and two c's right we
 

00:03:26.400 --> 00:03:27.910 align:start position:0%
three a's two b's and two c's right we
don't<00:03:26.560><c> even</c><00:03:26.720><c> have</c><00:03:26.879><c> to</c><00:03:26.959><c> worry</c><00:03:27.200><c> about</c><00:03:27.360><c> the</c>

00:03:27.910 --> 00:03:27.920 align:start position:0%
don't even have to worry about the
 

00:03:27.920 --> 00:03:29.910 align:start position:0%
don't even have to worry about the
characters<00:03:28.400><c> anymore</c><00:03:28.720><c> we</c><00:03:28.879><c> can</c><00:03:28.959><c> just</c><00:03:29.120><c> focus</c><00:03:29.599><c> on</c>

00:03:29.910 --> 00:03:29.920 align:start position:0%
characters anymore we can just focus on
 

00:03:29.920 --> 00:03:31.670 align:start position:0%
characters anymore we can just focus on
the<00:03:30.159><c> numbers</c><00:03:30.560><c> we</c><00:03:30.720><c> know</c><00:03:30.879><c> that</c><00:03:30.959><c> there's</c><00:03:31.280><c> three</c>

00:03:31.670 --> 00:03:31.680 align:start position:0%
the numbers we know that there's three
 

00:03:31.680 --> 00:03:33.509 align:start position:0%
the numbers we know that there's three
of<00:03:31.840><c> one</c><00:03:32.080><c> character</c><00:03:32.640><c> there's</c><00:03:33.040><c> two</c><00:03:33.280><c> of</c><00:03:33.440><c> a</c>

00:03:33.509 --> 00:03:33.519 align:start position:0%
of one character there's two of a
 

00:03:33.519 --> 00:03:35.110 align:start position:0%
of one character there's two of a
different<00:03:33.840><c> character</c><00:03:34.319><c> and</c><00:03:34.400><c> then</c><00:03:34.640><c> two</c><00:03:34.959><c> of</c>

00:03:35.110 --> 00:03:35.120 align:start position:0%
different character and then two of
 

00:03:35.120 --> 00:03:36.949 align:start position:0%
different character and then two of
another<00:03:35.519><c> character</c><00:03:36.080><c> we</c><00:03:36.159><c> know</c><00:03:36.319><c> that</c><00:03:36.480><c> the</c><00:03:36.560><c> idol</c>

00:03:36.949 --> 00:03:36.959 align:start position:0%
another character we know that the idol
 

00:03:36.959 --> 00:03:39.589 align:start position:0%
another character we know that the idol
time<00:03:37.200><c> in</c><00:03:37.280><c> this</c><00:03:37.440><c> case</c><00:03:37.760><c> is</c><00:03:38.000><c> one</c><00:03:38.480><c> what</c><00:03:38.879><c> order</c>

00:03:39.589 --> 00:03:39.599 align:start position:0%
time in this case is one what order
 

00:03:39.599 --> 00:03:42.070 align:start position:0%
time in this case is one what order
should<00:03:39.920><c> we</c><00:03:40.480><c> uh</c><00:03:40.799><c> process</c><00:03:41.120><c> the</c><00:03:41.280><c> characters</c><00:03:41.760><c> in</c>

00:03:42.070 --> 00:03:42.080 align:start position:0%
should we uh process the characters in
 

00:03:42.080 --> 00:03:44.630 align:start position:0%
should we uh process the characters in
it's<00:03:42.319><c> probably</c><00:03:42.799><c> better</c><00:03:43.120><c> to</c><00:03:43.360><c> process</c><00:03:44.080><c> the</c><00:03:44.319><c> more</c>

00:03:44.630 --> 00:03:44.640 align:start position:0%
it's probably better to process the more
 

00:03:44.640 --> 00:03:46.710 align:start position:0%
it's probably better to process the more
frequent<00:03:45.200><c> character</c><00:03:46.080><c> first</c><00:03:46.319><c> the</c><00:03:46.480><c> more</c>

00:03:46.710 --> 00:03:46.720 align:start position:0%
frequent character first the more
 

00:03:46.720 --> 00:03:48.869 align:start position:0%
frequent character first the more
frequent<00:03:47.280><c> task</c><00:03:47.760><c> first</c><00:03:48.319><c> because</c><00:03:48.560><c> we</c><00:03:48.720><c> know</c>

00:03:48.869 --> 00:03:48.879 align:start position:0%
frequent task first because we know
 

00:03:48.879 --> 00:03:51.110 align:start position:0%
frequent task first because we know
there's<00:03:49.040><c> going</c><00:03:49.120><c> to</c><00:03:49.200><c> be</c><00:03:49.360><c> some</c><00:03:49.680><c> idle</c><00:03:50.080><c> time</c><00:03:50.640><c> and</c>

00:03:51.110 --> 00:03:51.120 align:start position:0%
there's going to be some idle time and
 

00:03:51.120 --> 00:03:53.190 align:start position:0%
there's going to be some idle time and
processing<00:03:51.599><c> the</c><00:03:51.760><c> more</c><00:03:52.080><c> frequent</c><00:03:52.480><c> one</c><00:03:52.799><c> first</c>

00:03:53.190 --> 00:03:53.200 align:start position:0%
processing the more frequent one first
 

00:03:53.200 --> 00:03:56.070 align:start position:0%
processing the more frequent one first
basically<00:03:53.599><c> gives</c><00:03:53.840><c> us</c><00:03:54.000><c> more</c><00:03:54.319><c> time</c><00:03:54.799><c> to</c><00:03:55.439><c> not</c><00:03:55.760><c> be</c>

00:03:56.070 --> 00:03:56.080 align:start position:0%
basically gives us more time to not be
 

00:03:56.080 --> 00:03:58.550 align:start position:0%
basically gives us more time to not be
idle<00:03:56.879><c> and</c><00:03:57.360><c> i'll</c><00:03:57.599><c> show</c><00:03:57.760><c> you</c><00:03:57.920><c> the</c><00:03:58.080><c> intuition</c>

00:03:58.550 --> 00:03:58.560 align:start position:0%
idle and i'll show you the intuition
 

00:03:58.560 --> 00:04:00.789 align:start position:0%
idle and i'll show you the intuition
behind<00:03:58.879><c> that</c><00:03:59.040><c> let's</c><00:03:59.200><c> say</c><00:03:59.360><c> we</c><00:03:59.519><c> did</c><00:03:59.760><c> a</c><00:04:00.000><c> c</c><00:04:00.319><c> first</c>

00:04:00.789 --> 00:04:00.799 align:start position:0%
behind that let's say we did a c first
 

00:04:00.799 --> 00:04:02.949 align:start position:0%
behind that let's say we did a c first
right<00:04:00.959><c> we</c><00:04:01.120><c> do</c><00:04:01.360><c> c</c><00:04:01.760><c> uh</c><00:04:01.920><c> we</c><00:04:02.159><c> know</c><00:04:02.319><c> that</c><00:04:02.560><c> idle</c><00:04:02.799><c> time</c>

00:04:02.949 --> 00:04:02.959 align:start position:0%
right we do c uh we know that idle time
 

00:04:02.959 --> 00:04:05.030 align:start position:0%
right we do c uh we know that idle time
is<00:04:03.120><c> just</c><00:04:03.360><c> one</c><00:04:03.680><c> right</c><00:04:03.920><c> so</c><00:04:04.319><c> then</c><00:04:04.560><c> let's</c><00:04:04.720><c> say</c><00:04:04.879><c> we</c>

00:04:05.030 --> 00:04:05.040 align:start position:0%
is just one right so then let's say we
 

00:04:05.040 --> 00:04:07.670 align:start position:0%
is just one right so then let's say we
do<00:04:05.280><c> b</c><00:04:05.920><c> and</c><00:04:06.319><c> we're</c><00:04:06.480><c> allowed</c><00:04:06.799><c> to</c><00:04:06.879><c> do</c><00:04:07.040><c> another</c><00:04:07.439><c> c</c>

00:04:07.670 --> 00:04:07.680 align:start position:0%
do b and we're allowed to do another c
 

00:04:07.680 --> 00:04:09.270 align:start position:0%
do b and we're allowed to do another c
right<00:04:07.920><c> away</c><00:04:08.239><c> let's</c><00:04:08.400><c> say</c><00:04:08.560><c> we</c><00:04:08.640><c> do</c><00:04:08.799><c> that</c><00:04:09.040><c> right</c><00:04:09.200><c> we</c>

00:04:09.270 --> 00:04:09.280 align:start position:0%
right away let's say we do that right we
 

00:04:09.280 --> 00:04:12.550 align:start position:0%
right away let's say we do that right we
do<00:04:09.439><c> another</c><00:04:09.840><c> c</c><00:04:10.400><c> and</c><00:04:11.040><c> uh</c><00:04:11.439><c> then</c><00:04:11.680><c> we</c><00:04:11.840><c> do</c><00:04:12.000><c> another</c><00:04:12.319><c> b</c>

00:04:12.550 --> 00:04:12.560 align:start position:0%
do another c and uh then we do another b
 

00:04:12.560 --> 00:04:14.949 align:start position:0%
do another c and uh then we do another b
because<00:04:12.799><c> we</c><00:04:13.200><c> the</c><00:04:13.280><c> idle</c><00:04:13.680><c> times</c><00:04:14.000><c> only</c><00:04:14.319><c> one</c><00:04:14.640><c> right</c>

00:04:14.949 --> 00:04:14.959 align:start position:0%
because we the idle times only one right
 

00:04:14.959 --> 00:04:17.110 align:start position:0%
because we the idle times only one right
so<00:04:15.120><c> now</c><00:04:15.280><c> we've</c><00:04:15.519><c> already</c><00:04:15.840><c> processed</c><00:04:16.400><c> all</c><00:04:16.560><c> the</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
so now we've already processed all the
 

00:04:17.120 --> 00:04:19.430 align:start position:0%
so now we've already processed all the
the<00:04:17.280><c> c's</c><00:04:17.680><c> and</c><00:04:17.840><c> the</c><00:04:18.000><c> b's</c><00:04:18.560><c> and</c><00:04:18.799><c> all</c><00:04:18.959><c> we're</c><00:04:19.199><c> left</c>

00:04:19.430 --> 00:04:19.440 align:start position:0%
the c's and the b's and all we're left
 

00:04:19.440 --> 00:04:22.069 align:start position:0%
the c's and the b's and all we're left
with<00:04:19.840><c> is</c><00:04:20.079><c> three</c><00:04:20.479><c> a's</c><00:04:21.040><c> okay</c><00:04:21.280><c> let's</c><00:04:21.519><c> process</c><00:04:21.919><c> one</c>

00:04:22.069 --> 00:04:22.079 align:start position:0%
with is three a's okay let's process one
 

00:04:22.079 --> 00:04:25.189 align:start position:0%
with is three a's okay let's process one
of<00:04:22.160><c> the</c><00:04:22.240><c> a's</c><00:04:22.800><c> okay</c><00:04:23.120><c> great</c><00:04:23.600><c> but</c><00:04:23.919><c> now</c><00:04:24.479><c> we</c><00:04:24.639><c> have</c><00:04:25.040><c> an</c>

00:04:25.189 --> 00:04:25.199 align:start position:0%
of the a's okay great but now we have an
 

00:04:25.199 --> 00:04:26.870 align:start position:0%
of the a's okay great but now we have an
idle<00:04:25.520><c> time</c><00:04:25.759><c> we</c><00:04:25.840><c> have</c><00:04:25.919><c> no</c><00:04:26.160><c> other</c><00:04:26.400><c> characters</c>

00:04:26.870 --> 00:04:26.880 align:start position:0%
idle time we have no other characters
 

00:04:26.880 --> 00:04:29.510 align:start position:0%
idle time we have no other characters
available<00:04:27.280><c> for</c><00:04:27.440><c> us</c><00:04:27.680><c> so</c><00:04:28.160><c> we</c><00:04:28.320><c> have</c><00:04:28.479><c> to</c><00:04:28.639><c> wait</c>

00:04:29.510 --> 00:04:29.520 align:start position:0%
available for us so we have to wait
 

00:04:29.520 --> 00:04:31.030 align:start position:0%
available for us so we have to wait
and<00:04:29.600><c> then</c><00:04:29.759><c> we</c><00:04:29.919><c> can</c><00:04:30.000><c> process</c><00:04:30.400><c> another</c><00:04:30.720><c> a</c><00:04:30.960><c> and</c>

00:04:31.030 --> 00:04:31.040 align:start position:0%
and then we can process another a and
 

00:04:31.040 --> 00:04:33.030 align:start position:0%
and then we can process another a and
then<00:04:31.199><c> we</c><00:04:31.440><c> wait</c><00:04:31.759><c> and</c><00:04:31.840><c> then</c><00:04:32.080><c> process</c><00:04:32.479><c> another</c><00:04:32.800><c> a</c>

00:04:33.030 --> 00:04:33.040 align:start position:0%
then we wait and then process another a
 

00:04:33.040 --> 00:04:35.590 align:start position:0%
then we wait and then process another a
so<00:04:33.600><c> in</c><00:04:33.759><c> this</c><00:04:33.919><c> case</c><00:04:34.320><c> this</c><00:04:34.479><c> was</c><00:04:34.720><c> one</c><00:04:34.960><c> way</c><00:04:35.199><c> but</c><00:04:35.440><c> did</c>

00:04:35.590 --> 00:04:35.600 align:start position:0%
so in this case this was one way but did
 

00:04:35.600 --> 00:04:37.830 align:start position:0%
so in this case this was one way but did
this<00:04:35.919><c> minimize</c><00:04:36.560><c> the</c><00:04:36.800><c> total</c><00:04:37.199><c> time</c><00:04:37.520><c> that</c><00:04:37.680><c> it</c>

00:04:37.830 --> 00:04:37.840 align:start position:0%
this minimize the total time that it
 

00:04:37.840 --> 00:04:39.909 align:start position:0%
this minimize the total time that it
took<00:04:38.080><c> us</c><00:04:38.400><c> to</c><00:04:38.560><c> process</c><00:04:38.960><c> all</c><00:04:39.120><c> the</c><00:04:39.280><c> tasks</c><00:04:39.759><c> a</c>

00:04:39.909 --> 00:04:39.919 align:start position:0%
took us to process all the tasks a
 

00:04:39.919 --> 00:04:41.189 align:start position:0%
took us to process all the tasks a
different<00:04:40.240><c> way</c><00:04:40.400><c> would</c><00:04:40.560><c> have</c><00:04:40.639><c> been</c><00:04:40.800><c> to</c><00:04:40.960><c> start</c>

00:04:41.189 --> 00:04:41.199 align:start position:0%
different way would have been to start
 

00:04:41.199 --> 00:04:44.469 align:start position:0%
different way would have been to start
with<00:04:41.280><c> the</c><00:04:41.440><c> most</c><00:04:41.680><c> frequent</c><00:04:42.240><c> character</c><00:04:42.880><c> right</c><00:04:43.280><c> a</c>

00:04:44.469 --> 00:04:44.479 align:start position:0%
with the most frequent character right a
 

00:04:44.479 --> 00:04:46.469 align:start position:0%
with the most frequent character right a
and<00:04:44.639><c> now</c><00:04:44.800><c> there's</c><00:04:45.040><c> only</c><00:04:45.280><c> two</c><00:04:45.520><c> a's</c><00:04:45.840><c> left</c><00:04:46.160><c> so</c><00:04:46.320><c> now</c>

00:04:46.469 --> 00:04:46.479 align:start position:0%
and now there's only two a's left so now
 

00:04:46.479 --> 00:04:48.629 align:start position:0%
and now there's only two a's left so now
what's<00:04:46.800><c> the</c><00:04:46.880><c> most</c><00:04:47.120><c> frequent</c><00:04:47.840><c> well</c><00:04:48.240><c> you</c><00:04:48.400><c> could</c>

00:04:48.629 --> 00:04:48.639 align:start position:0%
what's the most frequent well you could
 

00:04:48.639 --> 00:04:51.430 align:start position:0%
what's the most frequent well you could
say<00:04:48.960><c> a</c><00:04:49.280><c> again</c><00:04:50.000><c> but</c><00:04:50.240><c> we</c><00:04:50.479><c> know</c><00:04:50.639><c> that</c><00:04:50.720><c> there</c><00:04:51.040><c> is</c><00:04:51.199><c> an</c>

00:04:51.430 --> 00:04:51.440 align:start position:0%
say a again but we know that there is an
 

00:04:51.440 --> 00:04:53.590 align:start position:0%
say a again but we know that there is an
idle<00:04:51.759><c> time</c><00:04:52.000><c> of</c><00:04:52.160><c> at</c><00:04:52.320><c> least</c><00:04:52.720><c> one</c><00:04:52.960><c> so</c><00:04:53.199><c> at</c><00:04:53.360><c> this</c>

00:04:53.590 --> 00:04:53.600 align:start position:0%
idle time of at least one so at this
 

00:04:53.600 --> 00:04:56.150 align:start position:0%
idle time of at least one so at this
point<00:04:53.840><c> in</c><00:04:53.919><c> time</c><00:04:54.320><c> a</c><00:04:54.639><c> is</c><00:04:54.880><c> not</c><00:04:55.120><c> available</c><00:04:55.600><c> to</c><00:04:55.759><c> us</c>

00:04:56.150 --> 00:04:56.160 align:start position:0%
point in time a is not available to us
 

00:04:56.160 --> 00:04:57.590 align:start position:0%
point in time a is not available to us
so<00:04:56.400><c> we</c><00:04:56.560><c> have</c><00:04:56.720><c> to</c><00:04:56.880><c> process</c><00:04:57.280><c> a</c><00:04:57.360><c> different</c>

00:04:57.590 --> 00:04:57.600 align:start position:0%
so we have to process a different
 

00:04:57.600 --> 00:05:00.310 align:start position:0%
so we have to process a different
character<00:04:58.160><c> let's</c><00:04:58.400><c> say</c><00:04:58.560><c> a</c><00:04:58.720><c> b</c><00:04:59.280><c> then</c><00:04:59.919><c> a</c><00:05:00.160><c> is</c>

00:05:00.310 --> 00:05:00.320 align:start position:0%
character let's say a b then a is
 

00:05:00.320 --> 00:05:01.830 align:start position:0%
character let's say a b then a is
actually<00:05:00.639><c> going</c><00:05:00.800><c> to</c><00:05:00.960><c> be</c><00:05:01.039><c> available</c><00:05:01.520><c> for</c><00:05:01.680><c> us</c>

00:05:01.830 --> 00:05:01.840 align:start position:0%
actually going to be available for us
 

00:05:01.840 --> 00:05:04.390 align:start position:0%
actually going to be available for us
again<00:05:02.080><c> so</c><00:05:02.240><c> we</c><00:05:02.400><c> could</c><00:05:02.800><c> process</c><00:05:03.280><c> the</c><00:05:03.440><c> a</c><00:05:04.080><c> or</c><00:05:04.240><c> we</c>

00:05:04.390 --> 00:05:04.400 align:start position:0%
again so we could process the a or we
 

00:05:04.400 --> 00:05:06.150 align:start position:0%
again so we could process the a or we
could<00:05:04.560><c> process</c><00:05:04.960><c> the</c><00:05:05.199><c> c</c><00:05:05.600><c> in</c><00:05:05.680><c> this</c><00:05:05.840><c> case</c><00:05:06.080><c> it</c>

00:05:06.150 --> 00:05:06.160 align:start position:0%
could process the c in this case it
 

00:05:06.160 --> 00:05:07.189 align:start position:0%
could process the c in this case it
doesn't<00:05:06.400><c> really</c><00:05:06.560><c> make</c><00:05:06.720><c> any</c><00:05:06.880><c> difference</c>

00:05:07.189 --> 00:05:07.199 align:start position:0%
doesn't really make any difference
 

00:05:07.199 --> 00:05:09.189 align:start position:0%
doesn't really make any difference
because<00:05:07.360><c> there's</c><00:05:07.680><c> two</c><00:05:08.000><c> of</c><00:05:08.240><c> each</c><00:05:08.479><c> of</c><00:05:08.639><c> these</c><00:05:09.039><c> so</c>

00:05:09.189 --> 00:05:09.199 align:start position:0%
because there's two of each of these so
 

00:05:09.199 --> 00:05:11.749 align:start position:0%
because there's two of each of these so
we<00:05:09.360><c> could</c><00:05:09.520><c> do</c><00:05:09.759><c> either</c><00:05:10.160><c> one</c><00:05:10.639><c> let's</c><00:05:10.800><c> just</c><00:05:10.960><c> do</c><00:05:11.280><c> c</c>

00:05:11.749 --> 00:05:11.759 align:start position:0%
we could do either one let's just do c
 

00:05:11.759 --> 00:05:14.790 align:start position:0%
we could do either one let's just do c
so<00:05:12.000><c> then</c><00:05:12.720><c> there</c><00:05:12.960><c> will</c><00:05:13.280><c> be</c><00:05:13.600><c> two</c><00:05:13.840><c> a's</c><00:05:14.240><c> one</c><00:05:14.479><c> b</c><00:05:14.639><c> and</c>

00:05:14.790 --> 00:05:14.800 align:start position:0%
so then there will be two a's one b and
 

00:05:14.800 --> 00:05:17.029 align:start position:0%
so then there will be two a's one b and
one<00:05:15.120><c> c</c><00:05:15.600><c> then</c><00:05:15.840><c> we'll</c><00:05:16.080><c> of</c><00:05:16.240><c> course</c><00:05:16.560><c> want</c><00:05:16.720><c> to</c><00:05:16.880><c> do</c>

00:05:17.029 --> 00:05:17.039 align:start position:0%
one c then we'll of course want to do
 

00:05:17.039 --> 00:05:19.590 align:start position:0%
one c then we'll of course want to do
the<00:05:17.120><c> more</c><00:05:17.360><c> frequent</c><00:05:17.759><c> character</c><00:05:18.479><c> the</c><00:05:18.800><c> a</c><00:05:19.440><c> and</c>

00:05:19.590 --> 00:05:19.600 align:start position:0%
the more frequent character the a and
 

00:05:19.600 --> 00:05:21.830 align:start position:0%
the more frequent character the a and
then<00:05:19.759><c> there's</c><00:05:20.000><c> gonna</c><00:05:20.160><c> be</c><00:05:20.320><c> one</c><00:05:20.639><c> a</c><00:05:20.880><c> remaining</c><00:05:21.680><c> we</c>

00:05:21.830 --> 00:05:21.840 align:start position:0%
then there's gonna be one a remaining we
 

00:05:21.840 --> 00:05:24.310 align:start position:0%
then there's gonna be one a remaining we
can't<00:05:22.479><c> process</c><00:05:22.880><c> another</c><00:05:23.280><c> a</c><00:05:23.440><c> without</c><00:05:23.919><c> at</c><00:05:24.000><c> least</c>

00:05:24.310 --> 00:05:24.320 align:start position:0%
can't process another a without at least
 

00:05:24.320 --> 00:05:26.950 align:start position:0%
can't process another a without at least
one<00:05:24.560><c> unit</c><00:05:24.880><c> of</c><00:05:24.960><c> idle</c><00:05:25.360><c> time</c><00:05:25.520><c> so</c><00:05:25.680><c> let's</c><00:05:26.000><c> do</c><00:05:26.240><c> b</c><00:05:26.800><c> and</c>

00:05:26.950 --> 00:05:26.960 align:start position:0%
one unit of idle time so let's do b and
 

00:05:26.960 --> 00:05:29.110 align:start position:0%
one unit of idle time so let's do b and
then<00:05:27.120><c> do</c><00:05:27.440><c> c</c><00:05:27.919><c> and</c><00:05:28.000><c> then</c><00:05:28.240><c> we</c><00:05:28.320><c> can</c><00:05:28.479><c> do</c><00:05:28.720><c> a</c><00:05:28.960><c> right</c>

00:05:29.110 --> 00:05:29.120 align:start position:0%
then do c and then we can do a right
 

00:05:29.120 --> 00:05:30.390 align:start position:0%
then do c and then we can do a right
this

00:05:30.390 --> 00:05:30.400 align:start position:0%
this
 

00:05:30.400 --> 00:05:32.710 align:start position:0%
this
also<00:05:31.039><c> is</c><00:05:31.199><c> a</c><00:05:31.280><c> valid</c><00:05:31.759><c> way</c><00:05:32.000><c> and</c><00:05:32.160><c> this</c><00:05:32.479><c> one</c>

00:05:32.710 --> 00:05:32.720 align:start position:0%
also is a valid way and this one
 

00:05:32.720 --> 00:05:35.590 align:start position:0%
also is a valid way and this one
actually<00:05:33.199><c> minimizes</c><00:05:33.919><c> the</c><00:05:34.160><c> idle</c><00:05:34.639><c> time</c><00:05:35.280><c> rather</c>

00:05:35.590 --> 00:05:35.600 align:start position:0%
actually minimizes the idle time rather
 

00:05:35.600 --> 00:05:36.390 align:start position:0%
actually minimizes the idle time rather
than

00:05:36.390 --> 00:05:36.400 align:start position:0%
than
 

00:05:36.400 --> 00:05:38.550 align:start position:0%
than
this<00:05:36.639><c> one</c><00:05:37.039><c> and</c><00:05:37.440><c> what</c><00:05:37.680><c> is</c><00:05:37.840><c> the</c><00:05:37.919><c> idle</c><00:05:38.240><c> time</c><00:05:38.479><c> in</c>

00:05:38.550 --> 00:05:38.560 align:start position:0%
this one and what is the idle time in
 

00:05:38.560 --> 00:05:40.629 align:start position:0%
this one and what is the idle time in
this<00:05:38.720><c> case</c><00:05:38.960><c> it's</c><00:05:39.120><c> about</c><00:05:39.600><c> uh</c><00:05:40.000><c> not</c><00:05:40.160><c> the</c><00:05:40.320><c> idle</c>

00:05:40.629 --> 00:05:40.639 align:start position:0%
this case it's about uh not the idle
 

00:05:40.639 --> 00:05:42.150 align:start position:0%
this case it's about uh not the idle
time<00:05:40.800><c> the</c><00:05:40.960><c> total</c><00:05:41.280><c> time</c><00:05:41.520><c> in</c><00:05:41.600><c> this</c><00:05:41.759><c> case</c><00:05:42.000><c> is</c>

00:05:42.150 --> 00:05:42.160 align:start position:0%
time the total time in this case is
 

00:05:42.160 --> 00:05:45.430 align:start position:0%
time the total time in this case is
about<00:05:42.479><c> seven</c><00:05:42.880><c> as</c><00:05:43.120><c> opposed</c><00:05:43.600><c> to</c><00:05:44.240><c> nine</c><00:05:44.800><c> in</c><00:05:45.199><c> the</c>

00:05:45.430 --> 00:05:45.440 align:start position:0%
about seven as opposed to nine in the
 

00:05:45.440 --> 00:05:46.790 align:start position:0%
about seven as opposed to nine in the
other<00:05:45.759><c> case</c><00:05:46.080><c> so</c><00:05:46.320><c> that's</c><00:05:46.479><c> kind</c><00:05:46.639><c> of</c><00:05:46.720><c> the</c>

00:05:46.790 --> 00:05:46.800 align:start position:0%
other case so that's kind of the
 

00:05:46.800 --> 00:05:48.629 align:start position:0%
other case so that's kind of the
intuition<00:05:47.440><c> why</c><00:05:47.680><c> we're</c><00:05:47.840><c> going</c><00:05:47.919><c> to</c>

00:05:48.629 --> 00:05:48.639 align:start position:0%
intuition why we're going to
 

00:05:48.639 --> 00:05:51.510 align:start position:0%
intuition why we're going to
try<00:05:48.800><c> to</c><00:05:48.880><c> do</c><00:05:49.120><c> the</c><00:05:49.280><c> more</c><00:05:49.520><c> frequent</c><00:05:50.479><c> task</c><00:05:50.960><c> first</c>

00:05:51.510 --> 00:05:51.520 align:start position:0%
try to do the more frequent task first
 

00:05:51.520 --> 00:05:53.430 align:start position:0%
try to do the more frequent task first
and<00:05:51.600><c> then</c><00:05:51.759><c> the</c><00:05:51.919><c> less</c><00:05:52.240><c> frequent</c><00:05:52.800><c> task</c><00:05:53.280><c> how</c>

00:05:53.430 --> 00:05:53.440 align:start position:0%
and then the less frequent task how
 

00:05:53.440 --> 00:05:55.909 align:start position:0%
and then the less frequent task how
we're<00:05:53.600><c> going</c><00:05:53.759><c> to</c><00:05:53.840><c> be</c><00:05:53.919><c> doing</c><00:05:54.240><c> this</c><00:05:54.800><c> is</c><00:05:55.280><c> by</c><00:05:55.520><c> using</c>

00:05:55.909 --> 00:05:55.919 align:start position:0%
we're going to be doing this is by using
 

00:05:55.919 --> 00:05:58.629 align:start position:0%
we're going to be doing this is by using
a<00:05:56.000><c> data</c><00:05:56.319><c> structure</c><00:05:56.720><c> called</c><00:05:57.120><c> a</c><00:05:57.360><c> max</c><00:05:57.840><c> heap</c><00:05:58.319><c> which</c>

00:05:58.629 --> 00:05:58.639 align:start position:0%
a data structure called a max heap which
 

00:05:58.639 --> 00:06:01.430 align:start position:0%
a data structure called a max heap which
will<00:05:58.880><c> allow</c><00:05:59.280><c> us</c><00:05:59.440><c> to</c><00:06:00.000><c> continuously</c><00:06:00.800><c> figure</c><00:06:01.120><c> out</c>

00:06:01.430 --> 00:06:01.440 align:start position:0%
will allow us to continuously figure out
 

00:06:01.440 --> 00:06:04.469 align:start position:0%
will allow us to continuously figure out
which<00:06:01.919><c> task</c><00:06:02.319><c> is</c><00:06:02.560><c> the</c><00:06:02.639><c> most</c><00:06:03.039><c> frequent</c><00:06:03.520><c> one</c><00:06:04.000><c> and</c>

00:06:04.469 --> 00:06:04.479 align:start position:0%
which task is the most frequent one and
 

00:06:04.479 --> 00:06:06.950 align:start position:0%
which task is the most frequent one and
the<00:06:04.800><c> max</c><00:06:05.039><c> heap</c><00:06:05.280><c> can</c><00:06:05.520><c> actually</c><00:06:06.000><c> allow</c><00:06:06.319><c> us</c><00:06:06.560><c> to</c>

00:06:06.950 --> 00:06:06.960 align:start position:0%
the max heap can actually allow us to
 

00:06:06.960 --> 00:06:10.469 align:start position:0%
the max heap can actually allow us to
determine<00:06:07.520><c> that</c><00:06:07.840><c> in</c><00:06:08.319><c> log</c><00:06:08.880><c> n</c><00:06:09.199><c> time</c><00:06:10.000><c> right</c><00:06:10.160><c> if</c><00:06:10.319><c> we</c>

00:06:10.469 --> 00:06:10.479 align:start position:0%
determine that in log n time right if we
 

00:06:10.479 --> 00:06:12.150 align:start position:0%
determine that in log n time right if we
have<00:06:10.880><c> a</c><00:06:10.960><c> bunch</c><00:06:11.199><c> of</c><00:06:11.280><c> these</c><00:06:11.600><c> we</c><00:06:11.759><c> could</c><00:06:11.919><c> figure</c>

00:06:12.150 --> 00:06:12.160 align:start position:0%
have a bunch of these we could figure
 

00:06:12.160 --> 00:06:13.749 align:start position:0%
have a bunch of these we could figure
out<00:06:12.240><c> which</c><00:06:12.479><c> is</c><00:06:12.560><c> the</c><00:06:12.639><c> most</c><00:06:12.880><c> frequent</c><00:06:13.199><c> in</c><00:06:13.360><c> log</c><00:06:13.600><c> in</c>

00:06:13.749 --> 00:06:13.759 align:start position:0%
out which is the most frequent in log in
 

00:06:13.759 --> 00:06:15.510 align:start position:0%
out which is the most frequent in log in
time<00:06:14.000><c> which</c><00:06:14.240><c> is</c><00:06:14.400><c> good</c><00:06:14.720><c> but</c><00:06:14.960><c> in</c><00:06:15.039><c> this</c><00:06:15.280><c> case</c>

00:06:15.510 --> 00:06:15.520 align:start position:0%
time which is good but in this case
 

00:06:15.520 --> 00:06:16.870 align:start position:0%
time which is good but in this case
actually<00:06:15.840><c> it's</c><00:06:16.000><c> even</c><00:06:16.240><c> better</c><00:06:16.479><c> than</c><00:06:16.560><c> that</c><00:06:16.800><c> it's</c>

00:06:16.870 --> 00:06:16.880 align:start position:0%
actually it's even better than that it's
 

00:06:16.880 --> 00:06:19.590 align:start position:0%
actually it's even better than that it's
about<00:06:17.199><c> log</c><00:06:17.600><c> 26</c><00:06:18.240><c> since</c><00:06:18.479><c> we</c><00:06:18.639><c> only</c><00:06:18.800><c> have</c><00:06:19.120><c> 26</c>

00:06:19.590 --> 00:06:19.600 align:start position:0%
about log 26 since we only have 26
 

00:06:19.600 --> 00:06:21.590 align:start position:0%
about log 26 since we only have 26
different<00:06:19.919><c> characters</c><00:06:20.800><c> this</c><00:06:21.039><c> is</c><00:06:21.120><c> kind</c><00:06:21.280><c> of</c><00:06:21.440><c> a</c>

00:06:21.590 --> 00:06:21.600 align:start position:0%
different characters this is kind of a
 

00:06:21.600 --> 00:06:24.230 align:start position:0%
different characters this is kind of a
constant<00:06:22.160><c> time</c><00:06:22.560><c> operation</c><00:06:23.199><c> anyway</c><00:06:23.919><c> but</c><00:06:24.160><c> i</c>

00:06:24.230 --> 00:06:24.240 align:start position:0%
constant time operation anyway but i
 

00:06:24.240 --> 00:06:25.749 align:start position:0%
constant time operation anyway but i
will<00:06:24.479><c> say</c><00:06:24.639><c> that</c><00:06:24.800><c> the</c><00:06:25.039><c> overall</c><00:06:25.520><c> time</c>

00:06:25.749 --> 00:06:25.759 align:start position:0%
will say that the overall time
 

00:06:25.759 --> 00:06:27.510 align:start position:0%
will say that the overall time
complexity<00:06:26.319><c> is</c><00:06:26.400><c> still</c><00:06:26.639><c> going</c><00:06:26.720><c> to</c><00:06:26.800><c> be</c><00:06:26.960><c> big</c><00:06:27.199><c> o</c><00:06:27.280><c> of</c>

00:06:27.510 --> 00:06:27.520 align:start position:0%
complexity is still going to be big o of
 

00:06:27.520 --> 00:06:29.590 align:start position:0%
complexity is still going to be big o of
n<00:06:28.000><c> one</c><00:06:28.319><c> because</c><00:06:28.560><c> we</c><00:06:28.720><c> are</c><00:06:28.800><c> gonna</c><00:06:29.039><c> have</c><00:06:29.199><c> to</c><00:06:29.520><c> you</c>

00:06:29.590 --> 00:06:29.600 align:start position:0%
n one because we are gonna have to you
 

00:06:29.600 --> 00:06:31.990 align:start position:0%
n one because we are gonna have to you
know<00:06:29.919><c> count</c><00:06:30.240><c> the</c><00:06:30.479><c> occurrences</c><00:06:31.039><c> of</c><00:06:31.199><c> each</c><00:06:31.440><c> task</c>

00:06:31.990 --> 00:06:32.000 align:start position:0%
know count the occurrences of each task
 

00:06:32.000 --> 00:06:33.189 align:start position:0%
know count the occurrences of each task
so<00:06:32.160><c> we're</c><00:06:32.319><c> gonna</c><00:06:32.479><c> have</c><00:06:32.560><c> to</c><00:06:32.639><c> go</c><00:06:32.880><c> through</c><00:06:33.039><c> the</c>

00:06:33.189 --> 00:06:33.199 align:start position:0%
so we're gonna have to go through the
 

00:06:33.199 --> 00:06:35.749 align:start position:0%
so we're gonna have to go through the
entire<00:06:33.759><c> uh</c><00:06:34.080><c> input</c><00:06:34.800><c> and</c><00:06:35.039><c> we're</c><00:06:35.199><c> going</c><00:06:35.360><c> to</c><00:06:35.440><c> be</c>

00:06:35.749 --> 00:06:35.759 align:start position:0%
entire uh input and we're going to be
 

00:06:35.759 --> 00:06:37.830 align:start position:0%
entire uh input and we're going to be
you<00:06:35.840><c> know</c><00:06:36.000><c> popping</c><00:06:36.479><c> every</c><00:06:36.800><c> value</c><00:06:37.280><c> from</c><00:06:37.600><c> our</c>

00:06:37.830 --> 00:06:37.840 align:start position:0%
you know popping every value from our
 

00:06:37.840 --> 00:06:39.909 align:start position:0%
you know popping every value from our
max<00:06:38.080><c> heap</c><00:06:38.400><c> and</c><00:06:38.560><c> adding</c><00:06:38.960><c> every</c><00:06:39.199><c> value</c><00:06:39.600><c> to</c><00:06:39.759><c> our</c>

00:06:39.909 --> 00:06:39.919 align:start position:0%
max heap and adding every value to our
 

00:06:39.919 --> 00:06:41.510 align:start position:0%
max heap and adding every value to our
max<00:06:40.080><c> heap</c><00:06:40.319><c> so</c><00:06:40.560><c> the</c><00:06:40.720><c> time</c><00:06:40.880><c> complexity</c><00:06:41.360><c> is</c><00:06:41.440><c> going</c>

00:06:41.510 --> 00:06:41.520 align:start position:0%
max heap so the time complexity is going
 

00:06:41.520 --> 00:06:43.270 align:start position:0%
max heap so the time complexity is going
to<00:06:41.600><c> be</c><00:06:41.759><c> big</c><00:06:42.000><c> o</c><00:06:42.080><c> of</c><00:06:42.240><c> n</c><00:06:42.479><c> that's</c><00:06:42.720><c> also</c><00:06:42.960><c> going</c><00:06:43.039><c> to</c><00:06:43.120><c> be</c>

00:06:43.270 --> 00:06:43.280 align:start position:0%
to be big o of n that's also going to be
 

00:06:43.280 --> 00:06:44.950 align:start position:0%
to be big o of n that's also going to be
the<00:06:43.360><c> memory</c><00:06:43.680><c> complexity</c><00:06:44.160><c> but</c><00:06:44.319><c> now</c><00:06:44.560><c> to</c><00:06:44.800><c> the</c>

00:06:44.950 --> 00:06:44.960 align:start position:0%
the memory complexity but now to the
 

00:06:44.960 --> 00:06:47.110 align:start position:0%
the memory complexity but now to the
actual<00:06:45.440><c> algorithm</c><00:06:46.000><c> itself</c><00:06:46.639><c> we're</c><00:06:46.880><c> actually</c>

00:06:47.110 --> 00:06:47.120 align:start position:0%
actual algorithm itself we're actually
 

00:06:47.120 --> 00:06:49.990 align:start position:0%
actual algorithm itself we're actually
going<00:06:47.199><c> to</c><00:06:47.280><c> use</c><00:06:47.520><c> one</c><00:06:47.919><c> other</c><00:06:48.160><c> data</c><00:06:48.400><c> structure</c><00:06:49.120><c> aq</c>

00:06:49.990 --> 00:06:50.000 align:start position:0%
going to use one other data structure aq
 

00:06:50.000 --> 00:06:52.309 align:start position:0%
going to use one other data structure aq
it's<00:06:50.160><c> not</c><00:06:50.400><c> required</c><00:06:51.120><c> but</c><00:06:51.360><c> i</c><00:06:51.440><c> think</c><00:06:51.680><c> it</c><00:06:51.759><c> makes</c>

00:06:52.309 --> 00:06:52.319 align:start position:0%
it's not required but i think it makes
 

00:06:52.319 --> 00:06:54.070 align:start position:0%
it's not required but i think it makes
the<00:06:52.560><c> problem</c><00:06:52.880><c> a</c><00:06:52.960><c> little</c><00:06:53.120><c> bit</c><00:06:53.280><c> more</c><00:06:53.520><c> organized</c>

00:06:54.070 --> 00:06:54.080 align:start position:0%
the problem a little bit more organized
 

00:06:54.080 --> 00:06:56.309 align:start position:0%
the problem a little bit more organized
so<00:06:54.639><c> let's</c><00:06:54.880><c> start</c><00:06:55.120><c> off</c><00:06:55.360><c> with</c><00:06:55.520><c> the</c><00:06:55.680><c> max</c><00:06:56.080><c> heap</c>

00:06:56.309 --> 00:06:56.319 align:start position:0%
so let's start off with the max heap
 

00:06:56.319 --> 00:06:58.230 align:start position:0%
so let's start off with the max heap
right<00:06:56.720><c> we</c><00:06:56.960><c> have</c><00:06:57.199><c> three</c><00:06:57.599><c> integers</c><00:06:58.080><c> we're</c><00:06:58.160><c> going</c>

00:06:58.230 --> 00:06:58.240 align:start position:0%
right we have three integers we're going
 

00:06:58.240 --> 00:06:59.990 align:start position:0%
right we have three integers we're going
to<00:06:58.319><c> be</c><00:06:58.479><c> adding</c><00:06:58.800><c> integers</c><00:06:59.280><c> to</c><00:06:59.360><c> our</c><00:06:59.520><c> max</c><00:06:59.759><c> heap</c>

00:06:59.990 --> 00:07:00.000 align:start position:0%
to be adding integers to our max heap
 

00:07:00.000 --> 00:07:01.189 align:start position:0%
to be adding integers to our max heap
not<00:07:00.160><c> the</c><00:07:00.319><c> characters</c><00:07:00.720><c> we're</c><00:07:00.880><c> going</c><00:07:00.960><c> to</c><00:07:01.039><c> be</c>

00:07:01.189 --> 00:07:01.199 align:start position:0%
not the characters we're going to be
 

00:07:01.199 --> 00:07:02.950 align:start position:0%
not the characters we're going to be
taking<00:07:01.440><c> the</c><00:07:01.680><c> counts</c><00:07:02.000><c> of</c><00:07:02.160><c> each</c><00:07:02.400><c> task</c><00:07:02.800><c> and</c>

00:07:02.950 --> 00:07:02.960 align:start position:0%
taking the counts of each task and
 

00:07:02.960 --> 00:07:04.230 align:start position:0%
taking the counts of each task and
adding<00:07:03.199><c> that</c><00:07:03.360><c> to</c><00:07:03.520><c> the</c><00:07:03.599><c> max</c><00:07:03.840><c> heap</c><00:07:04.000><c> so</c><00:07:04.160><c> we're</c>

00:07:04.230 --> 00:07:04.240 align:start position:0%
adding that to the max heap so we're
 

00:07:04.240 --> 00:07:07.270 align:start position:0%
adding that to the max heap so we're
going<00:07:04.319><c> to</c><00:07:04.400><c> have</c><00:07:04.479><c> a</c><00:07:04.639><c> three</c><00:07:05.199><c> and</c><00:07:05.440><c> a</c><00:07:05.599><c> two</c><00:07:06.240><c> and</c><00:07:06.800><c> a</c>

00:07:07.270 --> 00:07:07.280 align:start position:0%
going to have a three and a two and a
 

00:07:07.280 --> 00:07:09.029 align:start position:0%
going to have a three and a two and a
another<00:07:07.680><c> two</c><00:07:08.240><c> and</c><00:07:08.400><c> by</c><00:07:08.560><c> the</c><00:07:08.639><c> way</c><00:07:08.800><c> when</c><00:07:09.039><c> i</c>

00:07:09.029 --> 00:07:09.039 align:start position:0%
another two and by the way when i
 

00:07:09.039 --> 00:07:10.950 align:start position:0%
another two and by the way when i
actually<00:07:09.360><c> code</c><00:07:09.680><c> this</c><00:07:09.840><c> up</c><00:07:10.000><c> in</c><00:07:10.160><c> python</c><00:07:10.560><c> we</c><00:07:10.720><c> don't</c>

00:07:10.950 --> 00:07:10.960 align:start position:0%
actually code this up in python we don't
 

00:07:10.960 --> 00:07:14.309 align:start position:0%
actually code this up in python we don't
have<00:07:11.280><c> a</c><00:07:11.520><c> native</c><00:07:12.000><c> max</c><00:07:12.400><c> heap</c><00:07:12.880><c> so</c><00:07:13.520><c> the</c><00:07:13.680><c> way</c><00:07:13.840><c> to</c><00:07:14.160><c> we</c>

00:07:14.309 --> 00:07:14.319 align:start position:0%
have a native max heap so the way to we
 

00:07:14.319 --> 00:07:16.070 align:start position:0%
have a native max heap so the way to we
only<00:07:14.560><c> have</c><00:07:14.720><c> a</c><00:07:14.800><c> min</c><00:07:15.120><c> heap</c><00:07:15.360><c> so</c><00:07:15.520><c> the</c><00:07:15.599><c> way</c><00:07:15.759><c> i</c><00:07:15.919><c> get</c>

00:07:16.070 --> 00:07:16.080 align:start position:0%
only have a min heap so the way i get
 

00:07:16.080 --> 00:07:18.150 align:start position:0%
only have a min heap so the way i get
around<00:07:16.400><c> that</c><00:07:16.639><c> is</c><00:07:16.720><c> basically</c><00:07:17.199><c> by</c><00:07:17.440><c> taking</c><00:07:17.840><c> each</c>

00:07:18.150 --> 00:07:18.160 align:start position:0%
around that is basically by taking each
 

00:07:18.160 --> 00:07:20.309 align:start position:0%
around that is basically by taking each
of<00:07:18.319><c> these</c><00:07:18.560><c> values</c><00:07:18.960><c> and</c><00:07:19.120><c> making</c><00:07:19.440><c> it</c><00:07:19.599><c> negative</c>

00:07:20.309 --> 00:07:20.319 align:start position:0%
of these values and making it negative
 

00:07:20.319 --> 00:07:22.150 align:start position:0%
of these values and making it negative
you<00:07:20.400><c> know</c><00:07:20.800><c> in</c><00:07:20.960><c> a</c><00:07:21.039><c> max</c><00:07:21.280><c> heap</c><00:07:21.520><c> we</c><00:07:21.680><c> want</c><00:07:21.840><c> to</c><00:07:21.919><c> pop</c>

00:07:22.150 --> 00:07:22.160 align:start position:0%
you know in a max heap we want to pop
 

00:07:22.160 --> 00:07:24.230 align:start position:0%
you know in a max heap we want to pop
the<00:07:22.319><c> maximum</c><00:07:22.960><c> and</c><00:07:23.039><c> we</c><00:07:23.199><c> can</c><00:07:23.280><c> do</c><00:07:23.440><c> that</c><00:07:23.599><c> in</c><00:07:23.759><c> log</c><00:07:24.000><c> n</c>

00:07:24.230 --> 00:07:24.240 align:start position:0%
the maximum and we can do that in log n
 

00:07:24.240 --> 00:07:26.870 align:start position:0%
the maximum and we can do that in log n
time<00:07:24.800><c> so</c><00:07:25.120><c> in</c><00:07:25.280><c> this</c><00:07:25.440><c> case</c><00:07:25.759><c> we'd</c><00:07:26.000><c> pop</c><00:07:26.319><c> the</c><00:07:26.560><c> 3</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
time so in this case we'd pop the 3
 

00:07:26.880 --> 00:07:29.350 align:start position:0%
time so in this case we'd pop the 3
which<00:07:27.039><c> is</c><00:07:27.199><c> the</c><00:07:27.280><c> maximum</c><00:07:28.080><c> but</c><00:07:28.319><c> in</c><00:07:28.639><c> python</c><00:07:29.199><c> we're</c>

00:07:29.350 --> 00:07:29.360 align:start position:0%
which is the maximum but in python we're
 

00:07:29.360 --> 00:07:30.950 align:start position:0%
which is the maximum but in python we're
actually<00:07:29.599><c> going</c><00:07:29.680><c> to</c><00:07:29.759><c> do</c><00:07:29.919><c> it</c><00:07:30.000><c> the</c><00:07:30.160><c> opposite</c><00:07:30.479><c> way</c>

00:07:30.950 --> 00:07:30.960 align:start position:0%
actually going to do it the opposite way
 

00:07:30.960 --> 00:07:32.309 align:start position:0%
actually going to do it the opposite way
all<00:07:31.039><c> of</c><00:07:31.120><c> these</c><00:07:31.280><c> are</c><00:07:31.360><c> going</c><00:07:31.440><c> to</c><00:07:31.520><c> be</c><00:07:31.680><c> negative</c><00:07:32.160><c> so</c>

00:07:32.309 --> 00:07:32.319 align:start position:0%
all of these are going to be negative so
 

00:07:32.319 --> 00:07:33.430 align:start position:0%
all of these are going to be negative so
we're<00:07:32.400><c> going</c><00:07:32.479><c> to</c><00:07:32.639><c> end</c><00:07:32.800><c> up</c><00:07:32.880><c> popping</c><00:07:33.280><c> the</c>

00:07:33.430 --> 00:07:33.440 align:start position:0%
we're going to end up popping the
 

00:07:33.440 --> 00:07:35.510 align:start position:0%
we're going to end up popping the
minimum<00:07:34.000><c> which</c><00:07:34.240><c> is</c><00:07:34.319><c> going</c><00:07:34.400><c> to</c><00:07:34.479><c> be</c><00:07:34.639><c> negative</c><00:07:35.039><c> 3</c>

00:07:35.510 --> 00:07:35.520 align:start position:0%
minimum which is going to be negative 3
 

00:07:35.520 --> 00:07:37.350 align:start position:0%
minimum which is going to be negative 3
but<00:07:35.680><c> we're</c><00:07:35.919><c> going</c><00:07:36.000><c> to</c><00:07:36.479><c> you</c><00:07:36.639><c> know</c><00:07:36.880><c> assume</c><00:07:37.199><c> that</c>

00:07:37.350 --> 00:07:37.360 align:start position:0%
but we're going to you know assume that
 

00:07:37.360 --> 00:07:39.350 align:start position:0%
but we're going to you know assume that
it's<00:07:37.599><c> a</c><00:07:37.759><c> positive</c><00:07:38.240><c> 3.</c><00:07:38.639><c> but</c><00:07:38.800><c> yeah</c><00:07:38.960><c> so</c><00:07:39.120><c> that's</c>

00:07:39.350 --> 00:07:39.360 align:start position:0%
it's a positive 3. but yeah so that's
 

00:07:39.360 --> 00:07:41.510 align:start position:0%
it's a positive 3. but yeah so that's
the<00:07:39.440><c> idea</c><00:07:39.759><c> first</c><00:07:40.000><c> we're</c><00:07:40.160><c> going</c><00:07:40.240><c> to</c><00:07:40.319><c> pop</c><00:07:40.639><c> the</c><00:07:40.880><c> 3</c>

00:07:41.510 --> 00:07:41.520 align:start position:0%
the idea first we're going to pop the 3
 

00:07:41.520 --> 00:07:43.029 align:start position:0%
the idea first we're going to pop the 3
or<00:07:41.599><c> the</c><00:07:41.759><c> negative</c><00:07:42.080><c> 3.</c><00:07:42.319><c> you</c><00:07:42.479><c> can</c><00:07:42.560><c> think</c><00:07:42.720><c> about</c>

00:07:43.029 --> 00:07:43.039 align:start position:0%
or the negative 3. you can think about
 

00:07:43.039 --> 00:07:44.790 align:start position:0%
or the negative 3. you can think about
it<00:07:43.199><c> however</c><00:07:43.599><c> you</c><00:07:43.759><c> want</c><00:07:44.160><c> that's</c><00:07:44.400><c> the</c><00:07:44.560><c> most</c>

00:07:44.790 --> 00:07:44.800 align:start position:0%
it however you want that's the most
 

00:07:44.800 --> 00:07:46.790 align:start position:0%
it however you want that's the most
frequent<00:07:45.360><c> but</c><00:07:45.680><c> now</c><00:07:45.919><c> we</c><00:07:46.080><c> want</c><00:07:46.240><c> to</c><00:07:46.319><c> change</c><00:07:46.639><c> the</c>

00:07:46.790 --> 00:07:46.800 align:start position:0%
frequent but now we want to change the
 

00:07:46.800 --> 00:07:48.790 align:start position:0%
frequent but now we want to change the
count<00:07:47.039><c> from</c><00:07:47.199><c> being</c><00:07:47.440><c> a</c><00:07:47.599><c> three</c><00:07:48.000><c> to</c><00:07:48.240><c> now</c><00:07:48.400><c> being</c><00:07:48.639><c> a</c>

00:07:48.790 --> 00:07:48.800 align:start position:0%
count from being a three to now being a
 

00:07:48.800 --> 00:07:50.309 align:start position:0%
count from being a three to now being a
two<00:07:49.039><c> right</c><00:07:49.199><c> because</c><00:07:49.360><c> we</c><00:07:49.520><c> just</c><00:07:49.680><c> processed</c><00:07:50.160><c> one</c>

00:07:50.309 --> 00:07:50.319 align:start position:0%
two right because we just processed one
 

00:07:50.319 --> 00:07:52.150 align:start position:0%
two right because we just processed one
of<00:07:50.400><c> the</c><00:07:50.560><c> tasks</c><00:07:51.120><c> so</c><00:07:51.520><c> you</c><00:07:51.599><c> know</c><00:07:51.759><c> if</c><00:07:51.840><c> you</c><00:07:51.919><c> have</c><00:07:52.080><c> a</c>

00:07:52.150 --> 00:07:52.160 align:start position:0%
of the tasks so you know if you have a
 

00:07:52.160 --> 00:07:53.670 align:start position:0%
of the tasks so you know if you have a
negative<00:07:52.479><c> you'll</c><00:07:52.720><c> have</c><00:07:52.800><c> to</c><00:07:52.960><c> add</c><00:07:53.199><c> one</c><00:07:53.440><c> if</c><00:07:53.599><c> you</c>

00:07:53.670 --> 00:07:53.680 align:start position:0%
negative you'll have to add one if you
 

00:07:53.680 --> 00:07:55.270 align:start position:0%
negative you'll have to add one if you
have<00:07:53.759><c> a</c><00:07:53.840><c> positive</c><00:07:54.319><c> you</c><00:07:54.400><c> can</c><00:07:54.560><c> decrement</c><00:07:55.039><c> it</c><00:07:55.120><c> to</c>

00:07:55.270 --> 00:07:55.280 align:start position:0%
have a positive you can decrement it to
 

00:07:55.280 --> 00:07:57.350 align:start position:0%
have a positive you can decrement it to
one<00:07:55.840><c> in</c><00:07:56.000><c> my</c><00:07:56.240><c> case</c><00:07:56.479><c> when</c><00:07:56.639><c> i</c><00:07:56.720><c> write</c><00:07:56.879><c> the</c><00:07:56.960><c> code</c><00:07:57.199><c> i'm</c>

00:07:57.350 --> 00:07:57.360 align:start position:0%
one in my case when i write the code i'm
 

00:07:57.360 --> 00:07:59.830 align:start position:0%
one in my case when i write the code i'm
going to<00:07:57.440><c> be</c><00:07:57.599><c> adding</c><00:07:58.000><c> one</c><00:07:58.240><c> to</c><00:07:58.400><c> this</c><00:07:58.960><c> but</c><00:07:59.440><c> now</c>

00:07:59.830 --> 00:07:59.840 align:start position:0%
going to be adding one to this but now
 

00:07:59.840 --> 00:08:01.029 align:start position:0%
going to be adding one to this but now
we're<00:08:00.000><c> actually</c><00:08:00.240><c> going</c><00:08:00.319><c> to</c><00:08:00.400><c> be</c><00:08:00.479><c> taking</c><00:08:00.800><c> this</c>

00:08:01.029 --> 00:08:01.039 align:start position:0%
we're actually going to be taking this
 

00:08:01.039 --> 00:08:02.950 align:start position:0%
we're actually going to be taking this
and<00:08:01.199><c> adding</c><00:08:01.520><c> it</c><00:08:01.680><c> to</c><00:08:02.000><c> our</c><00:08:02.400><c> queue</c><00:08:02.720><c> data</c>

00:08:02.950 --> 00:08:02.960 align:start position:0%
and adding it to our queue data
 

00:08:02.960 --> 00:08:05.430 align:start position:0%
and adding it to our queue data
structure<00:08:03.680><c> because</c><00:08:04.560><c> we</c><00:08:04.800><c> know</c><00:08:05.039><c> that</c><00:08:05.199><c> there's</c>

00:08:05.430 --> 00:08:05.440 align:start position:0%
structure because we know that there's
 

00:08:05.440 --> 00:08:07.990 align:start position:0%
structure because we know that there's
some<00:08:05.680><c> amount</c><00:08:05.919><c> of</c><00:08:06.160><c> idle</c><00:08:06.560><c> time</c><00:08:06.879><c> for</c><00:08:07.120><c> this</c><00:08:07.440><c> task</c>

00:08:07.990 --> 00:08:08.000 align:start position:0%
some amount of idle time for this task
 

00:08:08.000 --> 00:08:10.790 align:start position:0%
some amount of idle time for this task
at<00:08:08.319><c> the</c><00:08:08.560><c> current</c><00:08:08.960><c> point</c><00:08:09.199><c> in</c><00:08:09.360><c> time</c><00:08:09.680><c> we</c><00:08:10.000><c> are</c><00:08:10.240><c> at</c>

00:08:10.790 --> 00:08:10.800 align:start position:0%
at the current point in time we are at
 

00:08:10.800 --> 00:08:12.629 align:start position:0%
at the current point in time we are at
initially<00:08:11.199><c> we</c><00:08:11.360><c> were</c><00:08:11.520><c> at</c><00:08:11.599><c> time</c><00:08:11.919><c> equals</c><00:08:12.160><c> zero</c>

00:08:12.629 --> 00:08:12.639 align:start position:0%
initially we were at time equals zero
 

00:08:12.639 --> 00:08:14.390 align:start position:0%
initially we were at time equals zero
but<00:08:12.800><c> we</c><00:08:12.960><c> just</c><00:08:13.280><c> processed</c><00:08:13.680><c> the</c><00:08:13.759><c> task</c><00:08:14.080><c> so</c><00:08:14.240><c> now</c>

00:08:14.390 --> 00:08:14.400 align:start position:0%
but we just processed the task so now
 

00:08:14.400 --> 00:08:16.309 align:start position:0%
but we just processed the task so now
we're<00:08:14.639><c> at</c><00:08:14.800><c> time</c><00:08:15.120><c> equals</c><00:08:15.599><c> one</c><00:08:15.919><c> and</c><00:08:16.080><c> we're</c><00:08:16.240><c> going</c>

00:08:16.309 --> 00:08:16.319 align:start position:0%
we're at time equals one and we're going
 

00:08:16.319 --> 00:08:19.830 align:start position:0%
we're at time equals one and we're going
to<00:08:16.479><c> add</c><00:08:16.720><c> this</c><00:08:17.360><c> integer</c><00:08:17.919><c> 2</c><00:08:18.639><c> or</c><00:08:19.039><c> negative</c><00:08:19.440><c> 2</c><00:08:19.680><c> to</c>

00:08:19.830 --> 00:08:19.840 align:start position:0%
to add this integer 2 or negative 2 to
 

00:08:19.840 --> 00:08:20.950 align:start position:0%
to add this integer 2 or negative 2 to
our<00:08:20.000><c> q</c>

00:08:20.950 --> 00:08:20.960 align:start position:0%
our q
 

00:08:20.960 --> 00:08:22.469 align:start position:0%
our q
but<00:08:21.280><c> we're</c><00:08:21.520><c> also</c><00:08:21.759><c> going</c><00:08:21.840><c> to</c><00:08:21.919><c> be</c><00:08:22.080><c> adding</c>

00:08:22.469 --> 00:08:22.479 align:start position:0%
but we're also going to be adding
 

00:08:22.479 --> 00:08:24.950 align:start position:0%
but we're also going to be adding
another<00:08:22.879><c> value</c><00:08:23.280><c> to</c><00:08:23.440><c> the</c><00:08:23.599><c> queue</c><00:08:24.319><c> and</c><00:08:24.479><c> that's</c><00:08:24.800><c> at</c>

00:08:24.950 --> 00:08:24.960 align:start position:0%
another value to the queue and that's at
 

00:08:24.960 --> 00:08:27.189 align:start position:0%
another value to the queue and that's at
what<00:08:25.199><c> time</c><00:08:25.599><c> is</c><00:08:25.759><c> this</c><00:08:26.240><c> task</c><00:08:26.639><c> going</c><00:08:26.800><c> to</c><00:08:26.960><c> be</c>

00:08:27.189 --> 00:08:27.199 align:start position:0%
what time is this task going to be
 

00:08:27.199 --> 00:08:30.150 align:start position:0%
what time is this task going to be
available<00:08:27.759><c> for</c><00:08:28.000><c> us</c><00:08:28.319><c> to</c><00:08:28.639><c> process</c><00:08:29.280><c> once</c><00:08:29.599><c> again</c>

00:08:30.150 --> 00:08:30.160 align:start position:0%
available for us to process once again
 

00:08:30.160 --> 00:08:31.990 align:start position:0%
available for us to process once again
basically<00:08:30.639><c> at</c><00:08:30.800><c> what</c><00:08:31.039><c> point</c><00:08:31.280><c> can</c><00:08:31.440><c> we</c><00:08:31.520><c> take</c><00:08:31.759><c> this</c>

00:08:31.990 --> 00:08:32.000 align:start position:0%
basically at what point can we take this
 

00:08:32.000 --> 00:08:34.469 align:start position:0%
basically at what point can we take this
and<00:08:32.159><c> add</c><00:08:32.479><c> it</c><00:08:32.719><c> back</c><00:08:33.039><c> to</c><00:08:33.279><c> our</c><00:08:33.519><c> max</c><00:08:33.919><c> heap</c><00:08:34.320><c> right</c>

00:08:34.469 --> 00:08:34.479 align:start position:0%
and add it back to our max heap right
 

00:08:34.479 --> 00:08:36.790 align:start position:0%
and add it back to our max heap right
what's<00:08:34.800><c> the</c><00:08:34.959><c> idle</c><00:08:35.440><c> time</c><00:08:36.080><c> that</c><00:08:36.320><c> is</c><00:08:36.479><c> going</c><00:08:36.560><c> to</c><00:08:36.640><c> be</c>

00:08:36.790 --> 00:08:36.800 align:start position:0%
what's the idle time that is going to be
 

00:08:36.800 --> 00:08:38.310 align:start position:0%
what's the idle time that is going to be
remaining<00:08:37.200><c> well</c><00:08:37.360><c> right</c><00:08:37.519><c> now</c><00:08:37.680><c> we're</c><00:08:37.919><c> at</c><00:08:38.000><c> time</c>

00:08:38.310 --> 00:08:38.320 align:start position:0%
remaining well right now we're at time
 

00:08:38.320 --> 00:08:41.190 align:start position:0%
remaining well right now we're at time
equals<00:08:38.719><c> one</c><00:08:39.279><c> and</c><00:08:39.599><c> our</c><00:08:40.080><c> idle</c><00:08:40.479><c> time</c><00:08:40.719><c> for</c><00:08:40.880><c> each</c>

00:08:41.190 --> 00:08:41.200 align:start position:0%
equals one and our idle time for each
 

00:08:41.200 --> 00:08:43.829 align:start position:0%
equals one and our idle time for each
task<00:08:41.519><c> is</c><00:08:41.760><c> n</c><00:08:42.159><c> equals</c><00:08:42.640><c> one</c><00:08:43.039><c> so</c><00:08:43.200><c> basically</c><00:08:43.680><c> we're</c>

00:08:43.829 --> 00:08:43.839 align:start position:0%
task is n equals one so basically we're
 

00:08:43.839 --> 00:08:45.030 align:start position:0%
task is n equals one so basically we're
gonna<00:08:44.000><c> take</c><00:08:44.320><c> n</c>

00:08:45.030 --> 00:08:45.040 align:start position:0%
gonna take n
 

00:08:45.040 --> 00:08:47.110 align:start position:0%
gonna take n
and<00:08:45.279><c> add</c><00:08:45.519><c> it</c><00:08:45.680><c> to</c><00:08:45.839><c> our</c><00:08:46.000><c> current</c><00:08:46.320><c> time</c><00:08:46.800><c> so</c><00:08:46.959><c> it's</c>

00:08:47.110 --> 00:08:47.120 align:start position:0%
and add it to our current time so it's
 

00:08:47.120 --> 00:08:48.949 align:start position:0%
and add it to our current time so it's
gonna<00:08:47.279><c> be</c><00:08:47.440><c> two</c><00:08:47.760><c> basically</c><00:08:48.160><c> at</c><00:08:48.320><c> time</c><00:08:48.560><c> equals</c>

00:08:48.949 --> 00:08:48.959 align:start position:0%
gonna be two basically at time equals
 

00:08:48.959 --> 00:08:51.590 align:start position:0%
gonna be two basically at time equals
two<00:08:49.440><c> this</c><00:08:49.680><c> task</c><00:08:50.080><c> is</c><00:08:50.160><c> gonna</c><00:08:50.399><c> be</c><00:08:50.560><c> available</c><00:08:51.360><c> for</c>

00:08:51.590 --> 00:08:51.600 align:start position:0%
two this task is gonna be available for
 

00:08:51.600 --> 00:08:53.590 align:start position:0%
two this task is gonna be available for
us<00:08:51.920><c> to</c><00:08:52.080><c> add</c><00:08:52.320><c> to</c><00:08:52.480><c> the</c><00:08:52.560><c> heap</c><00:08:52.880><c> again</c><00:08:53.200><c> so</c><00:08:53.360><c> that's</c>

00:08:53.590 --> 00:08:53.600 align:start position:0%
us to add to the heap again so that's
 

00:08:53.600 --> 00:08:56.070 align:start position:0%
us to add to the heap again so that's
what<00:08:53.760><c> the</c><00:08:53.920><c> second</c><00:08:54.320><c> value</c><00:08:54.800><c> in</c><00:08:54.880><c> this</c><00:08:55.040><c> case</c><00:08:55.440><c> means</c>

00:08:56.070 --> 00:08:56.080 align:start position:0%
what the second value in this case means
 

00:08:56.080 --> 00:08:57.990 align:start position:0%
what the second value in this case means
and<00:08:56.240><c> once</c><00:08:56.560><c> again</c><00:08:56.959><c> we're</c><00:08:57.200><c> going</c><00:08:57.279><c> to</c><00:08:57.519><c> pop</c><00:08:57.760><c> from</c>

00:08:57.990 --> 00:08:58.000 align:start position:0%
and once again we're going to pop from
 

00:08:58.000 --> 00:08:59.670 align:start position:0%
and once again we're going to pop from
our<00:08:58.080><c> max</c><00:08:58.399><c> heap</c><00:08:58.640><c> we're</c><00:08:58.800><c> going</c><00:08:58.880><c> to</c><00:08:59.040><c> pop</c><00:08:59.440><c> the</c>

00:08:59.670 --> 00:08:59.680 align:start position:0%
our max heap we're going to pop the
 

00:08:59.680 --> 00:09:01.990 align:start position:0%
our max heap we're going to pop the
negative<00:09:00.160><c> 2</c><00:09:00.640><c> and</c><00:09:00.800><c> that</c><00:09:01.040><c> means</c><00:09:01.360><c> we</c><00:09:01.600><c> have</c>

00:09:01.990 --> 00:09:02.000 align:start position:0%
negative 2 and that means we have
 

00:09:02.000 --> 00:09:03.670 align:start position:0%
negative 2 and that means we have
processed<00:09:02.480><c> the</c><00:09:02.560><c> task</c><00:09:02.800><c> so</c><00:09:03.040><c> now</c><00:09:03.200><c> our</c><00:09:03.360><c> time</c><00:09:03.519><c> is</c>

00:09:03.670 --> 00:09:03.680 align:start position:0%
processed the task so now our time is
 

00:09:03.680 --> 00:09:05.430 align:start position:0%
processed the task so now our time is
actually<00:09:03.920><c> going</c><00:09:04.000><c> to</c><00:09:04.080><c> be</c><00:09:04.240><c> time</c><00:09:04.560><c> equals</c><00:09:05.040><c> 2.</c>

00:09:05.430 --> 00:09:05.440 align:start position:0%
actually going to be time equals 2.
 

00:09:05.440 --> 00:09:07.190 align:start position:0%
actually going to be time equals 2.
we're<00:09:05.600><c> going</c><00:09:05.760><c> to</c><00:09:05.839><c> take</c><00:09:06.000><c> that</c><00:09:06.320><c> task</c><00:09:06.880><c> it</c><00:09:06.959><c> was</c><00:09:07.120><c> a</c>

00:09:07.190 --> 00:09:07.200 align:start position:0%
we're going to take that task it was a
 

00:09:07.200 --> 00:09:08.790 align:start position:0%
we're going to take that task it was a
negative<00:09:07.519><c> 2.</c><00:09:07.760><c> we're</c><00:09:07.839><c> going</c><00:09:07.920><c> to</c><00:09:08.080><c> add</c><00:09:08.320><c> 1</c><00:09:08.560><c> to</c><00:09:08.720><c> it</c>

00:09:08.790 --> 00:09:08.800 align:start position:0%
negative 2. we're going to add 1 to it
 

00:09:08.800 --> 00:09:10.310 align:start position:0%
negative 2. we're going to add 1 to it
which<00:09:08.959><c> is</c><00:09:09.040><c> going</c><00:09:09.120><c> to</c><00:09:09.200><c> make</c><00:09:09.360><c> it</c><00:09:09.440><c> a</c><00:09:09.600><c> negative</c><00:09:09.920><c> 1.</c>

00:09:10.310 --> 00:09:10.320 align:start position:0%
which is going to make it a negative 1.
 

00:09:10.320 --> 00:09:11.269 align:start position:0%
which is going to make it a negative 1.
so<00:09:10.480><c> then</c><00:09:10.640><c> we're</c><00:09:10.800><c> going</c><00:09:10.880><c> to</c><00:09:10.959><c> take</c><00:09:11.120><c> that</c>

00:09:11.269 --> 00:09:11.279 align:start position:0%
so then we're going to take that
 

00:09:11.279 --> 00:09:13.829 align:start position:0%
so then we're going to take that
negative<00:09:11.680><c> 1</c><00:09:11.920><c> and</c><00:09:12.080><c> add</c><00:09:12.320><c> it</c><00:09:12.560><c> to</c><00:09:12.880><c> our</c><00:09:13.120><c> q</c>

00:09:13.829 --> 00:09:13.839 align:start position:0%
negative 1 and add it to our q
 

00:09:13.839 --> 00:09:16.230 align:start position:0%
negative 1 and add it to our q
and<00:09:14.320><c> at</c><00:09:14.480><c> what</c><00:09:14.720><c> time</c><00:09:15.120><c> is</c><00:09:15.279><c> that</c><00:09:15.519><c> task</c><00:09:15.839><c> going</c><00:09:16.080><c> to</c>

00:09:16.230 --> 00:09:16.240 align:start position:0%
and at what time is that task going to
 

00:09:16.240 --> 00:09:19.190 align:start position:0%
and at what time is that task going to
be<00:09:16.640><c> available</c><00:09:17.360><c> to</c><00:09:17.680><c> add</c><00:09:18.000><c> back</c><00:09:18.240><c> to</c><00:09:18.399><c> our</c><00:09:18.560><c> max</c><00:09:18.880><c> heap</c>

00:09:19.190 --> 00:09:19.200 align:start position:0%
be available to add back to our max heap
 

00:09:19.200 --> 00:09:22.230 align:start position:0%
be available to add back to our max heap
well<00:09:19.440><c> it's</c><00:09:19.519><c> going</c><00:09:19.600><c> to</c><00:09:19.760><c> be</c><00:09:20.000><c> 2</c><00:09:20.640><c> plus</c><00:09:21.279><c> 1</c><00:09:21.600><c> because</c><00:09:22.000><c> n</c>

00:09:22.230 --> 00:09:22.240 align:start position:0%
well it's going to be 2 plus 1 because n
 

00:09:22.240 --> 00:09:24.870 align:start position:0%
well it's going to be 2 plus 1 because n
is<00:09:22.399><c> 1</c><00:09:22.560><c> in</c><00:09:22.720><c> our</c><00:09:22.880><c> case</c><00:09:23.360><c> so</c><00:09:23.600><c> at</c><00:09:23.760><c> time</c><00:09:24.000><c> equals</c><00:09:24.399><c> 3</c>

00:09:24.870 --> 00:09:24.880 align:start position:0%
is 1 in our case so at time equals 3
 

00:09:24.880 --> 00:09:27.030 align:start position:0%
is 1 in our case so at time equals 3
this<00:09:25.120><c> task</c><00:09:25.440><c> can</c><00:09:25.600><c> be</c><00:09:25.839><c> added</c><00:09:26.160><c> back</c><00:09:26.399><c> to</c><00:09:26.640><c> our</c><00:09:26.720><c> max</c>

00:09:27.030 --> 00:09:27.040 align:start position:0%
this task can be added back to our max
 

00:09:27.040 --> 00:09:29.509 align:start position:0%
this task can be added back to our max
heap<00:09:27.600><c> but</c><00:09:28.000><c> now</c><00:09:28.160><c> that</c><00:09:28.320><c> we're</c><00:09:28.480><c> at</c><00:09:28.560><c> time</c><00:09:28.800><c> equals</c><00:09:29.120><c> 2</c>

00:09:29.509 --> 00:09:29.519 align:start position:0%
heap but now that we're at time equals 2
 

00:09:29.519 --> 00:09:31.590 align:start position:0%
heap but now that we're at time equals 2
we<00:09:29.760><c> see</c><00:09:29.920><c> that</c><00:09:30.160><c> this</c><00:09:30.480><c> task</c><00:09:30.959><c> actually</c><00:09:31.440><c> is</c>

00:09:31.590 --> 00:09:31.600 align:start position:0%
we see that this task actually is
 

00:09:31.600 --> 00:09:34.389 align:start position:0%
we see that this task actually is
available<00:09:32.160><c> now</c><00:09:32.560><c> to</c><00:09:32.880><c> add</c><00:09:33.200><c> back</c><00:09:33.440><c> to</c><00:09:33.680><c> our</c><00:09:33.839><c> heap</c><00:09:34.240><c> so</c>

00:09:34.389 --> 00:09:34.399 align:start position:0%
available now to add back to our heap so
 

00:09:34.399 --> 00:09:36.630 align:start position:0%
available now to add back to our heap so
let's<00:09:34.720><c> pop</c><00:09:35.040><c> it</c><00:09:35.120><c> from</c><00:09:35.360><c> our</c><00:09:35.600><c> q</c><00:09:36.160><c> and</c><00:09:36.320><c> take</c><00:09:36.480><c> the</c>

00:09:36.630 --> 00:09:36.640 align:start position:0%
let's pop it from our q and take the
 

00:09:36.640 --> 00:09:39.110 align:start position:0%
let's pop it from our q and take the
negative<00:09:37.040><c> 2</c><00:09:37.279><c> and</c><00:09:37.440><c> add</c><00:09:37.680><c> it</c><00:09:37.839><c> back</c><00:09:38.240><c> to</c><00:09:38.560><c> our</c><00:09:38.720><c> max</c>

00:09:39.110 --> 00:09:39.120 align:start position:0%
negative 2 and add it back to our max
 

00:09:39.120 --> 00:09:40.710 align:start position:0%
negative 2 and add it back to our max
heap<00:09:39.519><c> and</c><00:09:39.680><c> at</c><00:09:39.839><c> this</c><00:09:40.000><c> point</c><00:09:40.160><c> you're</c><00:09:40.399><c> probably</c>

00:09:40.710 --> 00:09:40.720 align:start position:0%
heap and at this point you're probably
 

00:09:40.720 --> 00:09:42.230 align:start position:0%
heap and at this point you're probably
starting<00:09:41.040><c> to</c><00:09:41.200><c> get</c><00:09:41.279><c> the</c><00:09:41.440><c> idea</c><00:09:41.839><c> so</c><00:09:42.000><c> i'll</c><00:09:42.080><c> just</c>

00:09:42.230 --> 00:09:42.240 align:start position:0%
starting to get the idea so i'll just
 

00:09:42.240 --> 00:09:44.070 align:start position:0%
starting to get the idea so i'll just
kind<00:09:42.399><c> of</c><00:09:42.560><c> fast</c><00:09:42.880><c> forward</c><00:09:43.279><c> through</c><00:09:43.519><c> this</c><00:09:43.920><c> we're</c>

00:09:44.070 --> 00:09:44.080 align:start position:0%
kind of fast forward through this we're
 

00:09:44.080 --> 00:09:46.630 align:start position:0%
kind of fast forward through this we're
going<00:09:44.160><c> to</c><00:09:44.240><c> pop</c><00:09:44.640><c> this</c><00:09:44.880><c> again</c><00:09:45.600><c> set</c><00:09:45.839><c> our</c><00:09:46.000><c> time</c><00:09:46.320><c> now</c>

00:09:46.630 --> 00:09:46.640 align:start position:0%
going to pop this again set our time now
 

00:09:46.640 --> 00:09:48.389 align:start position:0%
going to pop this again set our time now
equal<00:09:46.880><c> to</c><00:09:47.200><c> 3.</c><00:09:47.680><c> we're</c><00:09:47.839><c> going</c><00:09:47.920><c> to</c><00:09:48.000><c> take</c><00:09:48.240><c> that</c>

00:09:48.389 --> 00:09:48.399 align:start position:0%
equal to 3. we're going to take that
 

00:09:48.399 --> 00:09:50.710 align:start position:0%
equal to 3. we're going to take that
negative<00:09:48.880><c> 2</c><00:09:49.360><c> add</c><00:09:49.760><c> 1</c><00:09:50.000><c> to</c><00:09:50.160><c> it</c><00:09:50.240><c> so</c><00:09:50.320><c> it'll</c><00:09:50.560><c> be</c><00:09:50.640><c> a</c>

00:09:50.710 --> 00:09:50.720 align:start position:0%
negative 2 add 1 to it so it'll be a
 

00:09:50.720 --> 00:09:52.470 align:start position:0%
negative 2 add 1 to it so it'll be a
negative<00:09:51.040><c> 1.</c><00:09:51.200><c> we'll</c><00:09:51.440><c> add</c><00:09:51.600><c> that</c><00:09:51.839><c> to</c><00:09:52.000><c> our</c><00:09:52.160><c> heap</c>

00:09:52.470 --> 00:09:52.480 align:start position:0%
negative 1. we'll add that to our heap
 

00:09:52.480 --> 00:09:54.150 align:start position:0%
negative 1. we'll add that to our heap
at<00:09:52.720><c> time</c><00:09:52.959><c> equals</c><00:09:53.360><c> 4</c><00:09:53.680><c> it's</c><00:09:53.839><c> going</c><00:09:53.920><c> to</c><00:09:54.000><c> be</c>

00:09:54.150 --> 00:09:54.160 align:start position:0%
at time equals 4 it's going to be
 

00:09:54.160 --> 00:09:56.949 align:start position:0%
at time equals 4 it's going to be
available<00:09:54.640><c> for</c><00:09:54.800><c> us</c><00:09:55.120><c> to</c><00:09:55.360><c> add</c><00:09:55.600><c> back</c><00:09:55.760><c> to</c><00:09:55.920><c> the</c><00:09:56.320><c> heap</c>

00:09:56.949 --> 00:09:56.959 align:start position:0%
available for us to add back to the heap
 

00:09:56.959 --> 00:09:59.269 align:start position:0%
available for us to add back to the heap
this<00:09:57.680><c> value</c><00:09:58.080><c> can</c><00:09:58.240><c> be</c><00:09:58.399><c> popped</c><00:09:58.640><c> from</c><00:09:58.880><c> our</c><00:09:59.040><c> queue</c>

00:09:59.269 --> 00:09:59.279 align:start position:0%
this value can be popped from our queue
 

00:09:59.279 --> 00:10:01.269 align:start position:0%
this value can be popped from our queue
we<00:09:59.440><c> can</c><00:09:59.519><c> add</c><00:09:59.680><c> a</c><00:09:59.760><c> negative</c><00:10:00.160><c> 1</c><00:10:00.399><c> here</c><00:10:00.880><c> and</c><00:10:01.040><c> then</c>

00:10:01.269 --> 00:10:01.279 align:start position:0%
we can add a negative 1 here and then
 

00:10:01.279 --> 00:10:03.350 align:start position:0%
we can add a negative 1 here and then
start<00:10:01.519><c> the</c><00:10:01.600><c> cycle</c><00:10:02.000><c> over</c><00:10:02.240><c> so</c><00:10:02.399><c> let's</c><00:10:02.640><c> pop</c><00:10:03.040><c> this</c>

00:10:03.350 --> 00:10:03.360 align:start position:0%
start the cycle over so let's pop this
 

00:10:03.360 --> 00:10:06.389 align:start position:0%
start the cycle over so let's pop this
value<00:10:03.920><c> over</c><00:10:04.160><c> here</c><00:10:04.800><c> uh</c><00:10:05.120><c> add</c><00:10:05.360><c> it</c><00:10:05.519><c> to</c><00:10:05.760><c> our</c><00:10:06.000><c> q</c><00:10:06.240><c> we're</c>

00:10:06.389 --> 00:10:06.399 align:start position:0%
value over here uh add it to our q we're
 

00:10:06.399 --> 00:10:07.910 align:start position:0%
value over here uh add it to our q we're
running<00:10:06.720><c> out</c><00:10:06.800><c> of</c><00:10:06.959><c> space</c><00:10:07.200><c> so</c><00:10:07.360><c> let's</c><00:10:07.600><c> add</c><00:10:07.839><c> a</c>

00:10:07.910 --> 00:10:07.920 align:start position:0%
running out of space so let's add a
 

00:10:07.920 --> 00:10:09.990 align:start position:0%
running out of space so let's add a
little<00:10:08.079><c> bit</c><00:10:08.320><c> more</c><00:10:08.560><c> space</c><00:10:09.200><c> uh</c><00:10:09.360><c> that</c><00:10:09.680><c> negative</c>

00:10:09.990 --> 00:10:10.000 align:start position:0%
little bit more space uh that negative
 

00:10:10.000 --> 00:10:12.069 align:start position:0%
little bit more space uh that negative
two<00:10:10.160><c> will</c><00:10:10.320><c> become</c><00:10:10.640><c> a</c><00:10:10.720><c> negative</c><00:10:11.040><c> one</c><00:10:11.600><c> the</c><00:10:11.760><c> time</c>

00:10:12.069 --> 00:10:12.079 align:start position:0%
two will become a negative one the time
 

00:10:12.079 --> 00:10:14.310 align:start position:0%
two will become a negative one the time
now<00:10:12.399><c> will</c><00:10:12.640><c> actually</c><00:10:12.959><c> be</c><00:10:13.200><c> four</c><00:10:13.680><c> so</c><00:10:13.920><c> the</c><00:10:14.079><c> time</c>

00:10:14.310 --> 00:10:14.320 align:start position:0%
now will actually be four so the time
 

00:10:14.320 --> 00:10:15.509 align:start position:0%
now will actually be four so the time
that<00:10:14.399><c> this</c><00:10:14.560><c> can</c><00:10:14.720><c> be</c><00:10:14.880><c> popped</c><00:10:15.200><c> it's</c><00:10:15.279><c> going</c><00:10:15.360><c> to</c><00:10:15.440><c> be</c>

00:10:15.509 --> 00:10:15.519 align:start position:0%
that this can be popped it's going to be
 

00:10:15.519 --> 00:10:17.350 align:start position:0%
that this can be popped it's going to be
at<00:10:15.600><c> time</c><00:10:15.920><c> five</c><00:10:16.240><c> we</c><00:10:16.399><c> see</c><00:10:16.560><c> it's</c><00:10:16.720><c> time</c><00:10:16.959><c> for</c><00:10:17.200><c> so</c>

00:10:17.350 --> 00:10:17.360 align:start position:0%
at time five we see it's time for so
 

00:10:17.360 --> 00:10:19.590 align:start position:0%
at time five we see it's time for so
this<00:10:17.519><c> can</c><00:10:17.760><c> now</c><00:10:18.000><c> be</c><00:10:18.240><c> popped</c><00:10:18.640><c> so</c><00:10:18.800><c> we</c><00:10:18.959><c> add</c><00:10:19.279><c> that</c>

00:10:19.590 --> 00:10:19.600 align:start position:0%
this can now be popped so we add that
 

00:10:19.600 --> 00:10:23.030 align:start position:0%
this can now be popped so we add that
back<00:10:19.839><c> to</c><00:10:20.079><c> our</c><00:10:20.640><c> uh</c><00:10:21.040><c> heap</c><00:10:21.760><c> negative</c><00:10:22.320><c> one</c><00:10:22.720><c> and</c><00:10:22.880><c> now</c>

00:10:23.030 --> 00:10:23.040 align:start position:0%
back to our uh heap negative one and now
 

00:10:23.040 --> 00:10:24.710 align:start position:0%
back to our uh heap negative one and now
it's<00:10:23.279><c> time</c><00:10:23.519><c> equals</c><00:10:23.920><c> four</c><00:10:24.160><c> so</c><00:10:24.320><c> i'm</c><00:10:24.480><c> really</c>

00:10:24.710 --> 00:10:24.720 align:start position:0%
it's time equals four so i'm really
 

00:10:24.720 --> 00:10:26.150 align:start position:0%
it's time equals four so i'm really
going<00:10:24.880><c> to</c><00:10:24.959><c> fast</c><00:10:25.200><c> forward</c><00:10:25.519><c> through</c><00:10:25.680><c> this</c><00:10:25.920><c> it'll</c>

00:10:26.150 --> 00:10:26.160 align:start position:0%
going to fast forward through this it'll
 

00:10:26.160 --> 00:10:28.310 align:start position:0%
going to fast forward through this it'll
take<00:10:26.399><c> one</c><00:10:26.640><c> more</c><00:10:26.880><c> unit</c><00:10:27.200><c> of</c><00:10:27.279><c> time</c><00:10:27.519><c> to</c><00:10:27.839><c> process</c>

00:10:28.310 --> 00:10:28.320 align:start position:0%
take one more unit of time to process
 

00:10:28.320 --> 00:10:30.790 align:start position:0%
take one more unit of time to process
this<00:10:28.560><c> task</c><00:10:29.200><c> but</c><00:10:29.440><c> now</c><00:10:29.760><c> this</c><00:10:30.000><c> task</c><00:10:30.480><c> as</c><00:10:30.640><c> you</c><00:10:30.720><c> can</c>

00:10:30.790 --> 00:10:30.800 align:start position:0%
this task but now this task as you can
 

00:10:30.800 --> 00:10:31.910 align:start position:0%
this task but now this task as you can
see<00:10:30.959><c> we're</c><00:10:31.120><c> going</c><00:10:31.279><c> to</c><00:10:31.360><c> pop</c><00:10:31.600><c> it</c><00:10:31.680><c> it's</c><00:10:31.839><c> a</c>

00:10:31.910 --> 00:10:31.920 align:start position:0%
see we're going to pop it it's a
 

00:10:31.920 --> 00:10:34.069 align:start position:0%
see we're going to pop it it's a
negative<00:10:32.320><c> 1</c><00:10:32.800><c> we're</c><00:10:32.959><c> going</c><00:10:33.040><c> to</c><00:10:33.120><c> add</c><00:10:33.360><c> 1</c><00:10:33.600><c> to</c><00:10:33.760><c> it</c><00:10:33.839><c> so</c>

00:10:34.069 --> 00:10:34.079 align:start position:0%
negative 1 we're going to add 1 to it so
 

00:10:34.079 --> 00:10:36.949 align:start position:0%
negative 1 we're going to add 1 to it so
now<00:10:34.240><c> it's</c><00:10:34.399><c> going</c><00:10:34.480><c> to</c><00:10:34.560><c> be</c><00:10:34.800><c> 0</c><00:10:35.200><c> right</c><00:10:35.680><c> 0</c><00:10:36.560><c> once</c><00:10:36.880><c> a</c>

00:10:36.949 --> 00:10:36.959 align:start position:0%
now it's going to be 0 right 0 once a
 

00:10:36.959 --> 00:10:39.269 align:start position:0%
now it's going to be 0 right 0 once a
task<00:10:37.360><c> becomes</c><00:10:38.000><c> 0</c><00:10:38.399><c> we</c><00:10:38.560><c> know</c><00:10:38.800><c> that</c><00:10:38.959><c> we</c><00:10:39.120><c> don't</c>

00:10:39.269 --> 00:10:39.279 align:start position:0%
task becomes 0 we know that we don't
 

00:10:39.279 --> 00:10:41.030 align:start position:0%
task becomes 0 we know that we don't
have<00:10:39.360><c> to</c><00:10:39.600><c> process</c><00:10:40.079><c> it</c><00:10:40.240><c> anymore</c><00:10:40.560><c> right</c><00:10:40.720><c> so</c><00:10:40.880><c> when</c>

00:10:41.030 --> 00:10:41.040 align:start position:0%
have to process it anymore right so when
 

00:10:41.040 --> 00:10:42.630 align:start position:0%
have to process it anymore right so when
it's<00:10:41.200><c> 0</c><00:10:41.440><c> we're</c><00:10:41.680><c> not</c><00:10:41.839><c> going</c><00:10:41.920><c> to</c><00:10:42.000><c> add</c><00:10:42.240><c> it</c><00:10:42.320><c> to</c><00:10:42.480><c> our</c>

00:10:42.630 --> 00:10:42.640 align:start position:0%
it's 0 we're not going to add it to our
 

00:10:42.640 --> 00:10:45.350 align:start position:0%
it's 0 we're not going to add it to our
q<00:10:43.200><c> because</c><00:10:44.079><c> it</c><00:10:44.160><c> doesn't</c><00:10:44.480><c> have</c><00:10:44.640><c> to</c><00:10:44.720><c> be</c><00:10:44.880><c> idle</c>

00:10:45.350 --> 00:10:45.360 align:start position:0%
q because it doesn't have to be idle
 

00:10:45.360 --> 00:10:46.870 align:start position:0%
q because it doesn't have to be idle
it's<00:10:45.600><c> never</c><00:10:45.839><c> going</c><00:10:45.920><c> to</c><00:10:46.000><c> be</c><00:10:46.160><c> added</c><00:10:46.480><c> back</c><00:10:46.640><c> to</c><00:10:46.800><c> the</c>

00:10:46.870 --> 00:10:46.880 align:start position:0%
it's never going to be added back to the
 

00:10:46.880 --> 00:10:48.870 align:start position:0%
it's never going to be added back to the
max<00:10:47.200><c> heap</c><00:10:47.440><c> once</c><00:10:47.680><c> it's</c><00:10:47.839><c> zero</c><00:10:48.320><c> we're</c><00:10:48.560><c> not</c><00:10:48.720><c> going</c>

00:10:48.870 --> 00:10:48.880 align:start position:0%
max heap once it's zero we're not going
 

00:10:48.880 --> 00:10:50.870 align:start position:0%
max heap once it's zero we're not going
to<00:10:48.959><c> do</c><00:10:49.120><c> anything</c><00:10:49.440><c> with</c><00:10:49.680><c> it</c><00:10:49.760><c> so</c><00:10:50.240><c> uh</c><00:10:50.560><c> you</c><00:10:50.640><c> know</c><00:10:50.720><c> we</c>

00:10:50.870 --> 00:10:50.880 align:start position:0%
to do anything with it so uh you know we
 

00:10:50.880 --> 00:10:52.310 align:start position:0%
to do anything with it so uh you know we
pop<00:10:51.120><c> it</c><00:10:51.200><c> from</c><00:10:51.440><c> our</c><00:10:51.519><c> max</c><00:10:51.760><c> heap</c><00:10:52.079><c> and</c><00:10:52.160><c> there's</c>

00:10:52.310 --> 00:10:52.320 align:start position:0%
pop it from our max heap and there's
 

00:10:52.320 --> 00:10:54.389 align:start position:0%
pop it from our max heap and there's
nothing<00:10:52.720><c> left</c><00:10:53.200><c> but</c><00:10:53.360><c> we</c><00:10:53.519><c> see</c><00:10:53.680><c> that</c><00:10:53.839><c> this</c><00:10:54.079><c> value</c>

00:10:54.389 --> 00:10:54.399 align:start position:0%
nothing left but we see that this value
 

00:10:54.399 --> 00:10:55.910 align:start position:0%
nothing left but we see that this value
over<00:10:54.640><c> here</c><00:10:55.040><c> and</c><00:10:55.279><c> right</c><00:10:55.440><c> now</c><00:10:55.600><c> it's</c><00:10:55.680><c> going</c><00:10:55.760><c> to</c><00:10:55.839><c> be</c>

00:10:55.910 --> 00:10:55.920 align:start position:0%
over here and right now it's going to be
 

00:10:55.920 --> 00:10:58.069 align:start position:0%
over here and right now it's going to be
time<00:10:56.160><c> equals</c><00:10:56.480><c> five</c><00:10:56.880><c> actually</c><00:10:57.360><c> so</c><00:10:57.680><c> time</c><00:10:57.920><c> is</c>

00:10:58.069 --> 00:10:58.079 align:start position:0%
time equals five actually so time is
 

00:10:58.079 --> 00:11:00.310 align:start position:0%
time equals five actually so time is
five<00:10:58.640><c> this</c><00:10:58.800><c> can</c><00:10:58.959><c> be</c><00:10:59.120><c> added</c><00:10:59.440><c> back</c><00:10:59.600><c> to</c><00:10:59.839><c> our</c><00:11:00.000><c> max</c>

00:11:00.310 --> 00:11:00.320 align:start position:0%
five this can be added back to our max
 

00:11:00.320 --> 00:11:01.110 align:start position:0%
five this can be added back to our max
heap

00:11:01.110 --> 00:11:01.120 align:start position:0%
heap
 

00:11:01.120 --> 00:11:02.790 align:start position:0%
heap
let's<00:11:01.440><c> add</c><00:11:01.600><c> that</c><00:11:01.839><c> negative</c><00:11:02.160><c> one</c><00:11:02.399><c> sorry</c><00:11:02.640><c> if</c>

00:11:02.790 --> 00:11:02.800 align:start position:0%
let's add that negative one sorry if
 

00:11:02.800 --> 00:11:05.350 align:start position:0%
let's add that negative one sorry if
it's<00:11:03.040><c> getting</c><00:11:03.279><c> a</c><00:11:03.360><c> little</c><00:11:03.519><c> bit</c><00:11:03.680><c> messy</c><00:11:04.480><c> but</c><00:11:05.120><c> next</c>

00:11:05.350 --> 00:11:05.360 align:start position:0%
it's getting a little bit messy but next
 

00:11:05.360 --> 00:11:07.030 align:start position:0%
it's getting a little bit messy but next
we're<00:11:05.519><c> gonna</c><00:11:05.680><c> pop</c><00:11:05.920><c> this</c><00:11:06.079><c> from</c><00:11:06.240><c> our</c><00:11:06.399><c> max</c><00:11:06.640><c> heap</c>

00:11:07.030 --> 00:11:07.040 align:start position:0%
we're gonna pop this from our max heap
 

00:11:07.040 --> 00:11:09.910 align:start position:0%
we're gonna pop this from our max heap
it's<00:11:07.200><c> gonna</c><00:11:07.360><c> become</c><00:11:08.240><c> zero</c><00:11:09.040><c> so</c><00:11:09.360><c> we</c><00:11:09.519><c> don't</c><00:11:09.760><c> add</c>

00:11:09.910 --> 00:11:09.920 align:start position:0%
it's gonna become zero so we don't add
 

00:11:09.920 --> 00:11:11.910 align:start position:0%
it's gonna become zero so we don't add
it<00:11:10.000><c> to</c><00:11:10.160><c> our</c><00:11:10.320><c> queue</c><00:11:10.959><c> now</c><00:11:11.120><c> it's</c><00:11:11.279><c> gonna</c><00:11:11.440><c> be</c><00:11:11.600><c> time</c>

00:11:11.910 --> 00:11:11.920 align:start position:0%
it to our queue now it's gonna be time
 

00:11:11.920 --> 00:11:14.230 align:start position:0%
it to our queue now it's gonna be time
equals<00:11:12.240><c> six</c><00:11:12.560><c> after</c><00:11:12.800><c> we</c><00:11:12.959><c> process</c><00:11:13.360><c> that</c><00:11:13.600><c> task</c>

00:11:14.230 --> 00:11:14.240 align:start position:0%
equals six after we process that task
 

00:11:14.240 --> 00:11:16.550 align:start position:0%
equals six after we process that task
and<00:11:14.720><c> lastly</c><00:11:15.279><c> we</c><00:11:15.360><c> have</c><00:11:15.440><c> one</c><00:11:15.680><c> task</c><00:11:16.000><c> remaining</c><00:11:16.399><c> we</c>

00:11:16.550 --> 00:11:16.560 align:start position:0%
and lastly we have one task remaining we
 

00:11:16.560 --> 00:11:18.550 align:start position:0%
and lastly we have one task remaining we
pop<00:11:16.800><c> it</c><00:11:16.880><c> we</c><00:11:17.120><c> process</c><00:11:17.519><c> it</c><00:11:17.680><c> it</c><00:11:17.760><c> becomes</c><00:11:18.079><c> zero</c><00:11:18.399><c> we</c>

00:11:18.550 --> 00:11:18.560 align:start position:0%
pop it we process it it becomes zero we
 

00:11:18.560 --> 00:11:20.949 align:start position:0%
pop it we process it it becomes zero we
don't<00:11:18.720><c> add</c><00:11:18.880><c> it</c><00:11:18.959><c> to</c><00:11:19.120><c> the</c><00:11:19.279><c> queue</c><00:11:19.760><c> so</c><00:11:20.000><c> now</c><00:11:20.720><c> after</c>

00:11:20.949 --> 00:11:20.959 align:start position:0%
don't add it to the queue so now after
 

00:11:20.959 --> 00:11:23.590 align:start position:0%
don't add it to the queue so now after
processing<00:11:21.440><c> that</c><00:11:21.600><c> task</c><00:11:21.920><c> our</c><00:11:22.079><c> time</c><00:11:22.480><c> is</c><00:11:22.959><c> seven</c>

00:11:23.590 --> 00:11:23.600 align:start position:0%
processing that task our time is seven
 

00:11:23.600 --> 00:11:25.990 align:start position:0%
processing that task our time is seven
so<00:11:23.760><c> we</c><00:11:23.920><c> can</c><00:11:24.079><c> return</c><00:11:24.640><c> seven</c><00:11:25.040><c> in</c><00:11:25.120><c> this</c><00:11:25.360><c> case</c><00:11:25.839><c> and</c>

00:11:25.990 --> 00:11:26.000 align:start position:0%
so we can return seven in this case and
 

00:11:26.000 --> 00:11:27.910 align:start position:0%
so we can return seven in this case and
that's<00:11:26.480><c> pretty</c><00:11:26.640><c> much</c><00:11:26.800><c> the</c><00:11:26.959><c> entire</c><00:11:27.360><c> algorithm</c>

00:11:27.910 --> 00:11:27.920 align:start position:0%
that's pretty much the entire algorithm
 

00:11:27.920 --> 00:11:29.430 align:start position:0%
that's pretty much the entire algorithm
so<00:11:28.079><c> that's</c><00:11:28.240><c> what</c><00:11:28.320><c> i'm</c><00:11:28.399><c> going</c><00:11:28.480><c> to</c><00:11:28.560><c> be</c><00:11:28.800><c> following</c>

00:11:29.430 --> 00:11:29.440 align:start position:0%
so that's what i'm going to be following
 

00:11:29.440 --> 00:11:31.990 align:start position:0%
so that's what i'm going to be following
even<00:11:29.680><c> though</c><00:11:29.920><c> popping</c><00:11:30.399><c> and</c><00:11:30.560><c> pushing</c><00:11:31.440><c> to</c><00:11:31.600><c> a</c><00:11:31.760><c> max</c>

00:11:31.990 --> 00:11:32.000 align:start position:0%
even though popping and pushing to a max
 

00:11:32.000 --> 00:11:34.069 align:start position:0%
even though popping and pushing to a max
heap<00:11:32.240><c> is</c><00:11:32.399><c> usually</c><00:11:32.720><c> a</c><00:11:32.880><c> login</c><00:11:33.440><c> operation</c><00:11:33.920><c> in</c>

00:11:34.069 --> 00:11:34.079 align:start position:0%
heap is usually a login operation in
 

00:11:34.079 --> 00:11:35.430 align:start position:0%
heap is usually a login operation in
this<00:11:34.160><c> case</c><00:11:34.399><c> it's</c><00:11:34.560><c> really</c><00:11:34.720><c> going</c><00:11:34.880><c> to</c><00:11:34.959><c> be</c><00:11:35.040><c> a</c><00:11:35.120><c> log</c>

00:11:35.430 --> 00:11:35.440 align:start position:0%
this case it's really going to be a log
 

00:11:35.440 --> 00:11:38.389 align:start position:0%
this case it's really going to be a log
26<00:11:36.079><c> operation</c><00:11:37.040><c> so</c><00:11:37.680><c> the</c><00:11:37.920><c> overall</c><00:11:38.240><c> time</c>

00:11:38.389 --> 00:11:38.399 align:start position:0%
26 operation so the overall time
 

00:11:38.399 --> 00:11:39.829 align:start position:0%
26 operation so the overall time
complexity<00:11:38.959><c> in</c><00:11:39.040><c> this</c><00:11:39.120><c> case</c><00:11:39.360><c> is</c><00:11:39.440><c> really</c><00:11:39.680><c> just</c>

00:11:39.829 --> 00:11:39.839 align:start position:0%
complexity in this case is really just
 

00:11:39.839 --> 00:11:41.990 align:start position:0%
complexity in this case is really just
big<00:11:40.079><c> o</c><00:11:40.320><c> of</c><00:11:40.560><c> n</c><00:11:41.040><c> because</c><00:11:41.279><c> we</c><00:11:41.360><c> have</c><00:11:41.440><c> to</c><00:11:41.600><c> just</c><00:11:41.760><c> go</c>

00:11:41.990 --> 00:11:42.000 align:start position:0%
big o of n because we have to just go
 

00:11:42.000 --> 00:11:43.910 align:start position:0%
big o of n because we have to just go
through<00:11:42.160><c> every</c><00:11:42.320><c> single</c><00:11:42.640><c> task</c><00:11:43.200><c> okay</c><00:11:43.519><c> now</c><00:11:43.680><c> let's</c>

00:11:43.910 --> 00:11:43.920 align:start position:0%
through every single task okay now let's
 

00:11:43.920 --> 00:11:46.069 align:start position:0%
through every single task okay now let's
write<00:11:44.079><c> the</c><00:11:44.240><c> code</c><00:11:44.800><c> okay</c><00:11:45.040><c> so</c><00:11:45.200><c> now</c><00:11:45.360><c> let's</c><00:11:45.600><c> code</c><00:11:45.920><c> it</c>

00:11:46.069 --> 00:11:46.079 align:start position:0%
write the code okay so now let's code it
 

00:11:46.079 --> 00:11:47.750 align:start position:0%
write the code okay so now let's code it
up<00:11:46.480><c> and</c><00:11:46.640><c> you</c><00:11:46.800><c> can</c><00:11:46.880><c> see</c><00:11:47.040><c> i</c><00:11:47.200><c> have</c><00:11:47.360><c> a</c><00:11:47.440><c> couple</c>

00:11:47.750 --> 00:11:47.760 align:start position:0%
up and you can see i have a couple
 

00:11:47.760 --> 00:11:49.829 align:start position:0%
up and you can see i have a couple
comments<00:11:48.240><c> just</c><00:11:48.480><c> to</c><00:11:48.720><c> kind</c><00:11:48.880><c> of</c><00:11:49.040><c> help</c><00:11:49.279><c> simplify</c>

00:11:49.829 --> 00:11:49.839 align:start position:0%
comments just to kind of help simplify
 

00:11:49.839 --> 00:11:51.269 align:start position:0%
comments just to kind of help simplify
things<00:11:50.079><c> for</c><00:11:50.240><c> us</c><00:11:50.399><c> and</c><00:11:50.480><c> i</c><00:11:50.560><c> usually</c><00:11:50.880><c> don't</c><00:11:51.120><c> do</c>

00:11:51.269 --> 00:11:51.279 align:start position:0%
things for us and i usually don't do
 

00:11:51.279 --> 00:11:52.949 align:start position:0%
things for us and i usually don't do
this<00:11:51.519><c> but</c><00:11:51.920><c> we</c><00:11:52.160><c> want</c><00:11:52.320><c> to</c><00:11:52.480><c> count</c><00:11:52.800><c> the</c>

00:11:52.949 --> 00:11:52.959 align:start position:0%
this but we want to count the
 

00:11:52.959 --> 00:11:55.350 align:start position:0%
this but we want to count the
occurrences<00:11:53.440><c> of</c><00:11:53.600><c> each</c><00:11:53.839><c> character</c><00:11:54.560><c> in</c><00:11:54.959><c> the</c>

00:11:55.350 --> 00:11:55.360 align:start position:0%
occurrences of each character in the
 

00:11:55.360 --> 00:11:57.269 align:start position:0%
occurrences of each character in the
input<00:11:55.920><c> it's</c><00:11:56.160><c> a</c><00:11:56.240><c> list</c><00:11:56.480><c> of</c><00:11:56.560><c> strings</c><00:11:56.959><c> we</c><00:11:57.120><c> could</c>

00:11:57.269 --> 00:11:57.279 align:start position:0%
input it's a list of strings we could
 

00:11:57.279 --> 00:11:58.870 align:start position:0%
input it's a list of strings we could
just<00:11:57.519><c> you</c><00:11:57.680><c> know</c><00:11:57.839><c> run</c><00:11:58.079><c> through</c><00:11:58.320><c> that</c><00:11:58.560><c> loop</c>

00:11:58.870 --> 00:11:58.880 align:start position:0%
just you know run through that loop
 

00:11:58.880 --> 00:12:00.470 align:start position:0%
just you know run through that loop
through<00:11:59.040><c> that</c><00:11:59.360><c> and</c><00:11:59.519><c> add</c><00:11:59.680><c> it</c><00:11:59.839><c> to</c><00:11:59.920><c> a</c><00:12:00.000><c> hash</c><00:12:00.240><c> map</c>

00:12:00.470 --> 00:12:00.480 align:start position:0%
through that and add it to a hash map
 

00:12:00.480 --> 00:12:01.590 align:start position:0%
through that and add it to a hash map
but<00:12:00.639><c> you</c><00:12:00.720><c> can</c><00:12:00.800><c> actually</c><00:12:01.040><c> do</c><00:12:01.200><c> that</c><00:12:01.360><c> with</c><00:12:01.519><c> a</c>

00:12:01.590 --> 00:12:01.600 align:start position:0%
but you can actually do that with a
 

00:12:01.600 --> 00:12:03.509 align:start position:0%
but you can actually do that with a
built-in<00:12:02.079><c> way</c><00:12:02.240><c> in</c><00:12:02.399><c> python</c><00:12:02.880><c> just</c><00:12:03.120><c> using</c><00:12:03.360><c> a</c>

00:12:03.509 --> 00:12:03.519 align:start position:0%
built-in way in python just using a
 

00:12:03.519 --> 00:12:05.829 align:start position:0%
built-in way in python just using a
counter<00:12:04.000><c> which</c><00:12:04.320><c> is</c><00:12:04.639><c> literally</c><00:12:05.040><c> a</c><00:12:05.120><c> hash</c><00:12:05.440><c> map</c>

00:12:05.829 --> 00:12:05.839 align:start position:0%
counter which is literally a hash map
 

00:12:05.839 --> 00:12:07.430 align:start position:0%
counter which is literally a hash map
it'll<00:12:06.079><c> just</c><00:12:06.320><c> do</c><00:12:06.480><c> that</c><00:12:06.639><c> for</c><00:12:06.880><c> us</c><00:12:07.040><c> so</c><00:12:07.200><c> we</c><00:12:07.279><c> don't</c>

00:12:07.430 --> 00:12:07.440 align:start position:0%
it'll just do that for us so we don't
 

00:12:07.440 --> 00:12:08.949 align:start position:0%
it'll just do that for us so we don't
have<00:12:07.519><c> to</c><00:12:07.600><c> write</c><00:12:07.839><c> the</c><00:12:08.000><c> code</c><00:12:08.480><c> but</c><00:12:08.639><c> now</c><00:12:08.800><c> we</c>

00:12:08.949 --> 00:12:08.959 align:start position:0%
have to write the code but now we
 

00:12:08.959 --> 00:12:10.870 align:start position:0%
have to write the code but now we
actually<00:12:09.279><c> want</c><00:12:09.519><c> to</c><00:12:09.680><c> create</c><00:12:10.079><c> our</c><00:12:10.240><c> max</c><00:12:10.560><c> heap</c>

00:12:10.870 --> 00:12:10.880 align:start position:0%
actually want to create our max heap
 

00:12:10.880 --> 00:12:13.670 align:start position:0%
actually want to create our max heap
using<00:12:11.279><c> those</c><00:12:11.760><c> counts</c><00:12:12.160><c> themselves</c><00:12:13.120><c> uh</c><00:12:13.360><c> we</c><00:12:13.519><c> can</c>

00:12:13.670 --> 00:12:13.680 align:start position:0%
using those counts themselves uh we can
 

00:12:13.680 --> 00:12:16.150 align:start position:0%
using those counts themselves uh we can
do<00:12:13.839><c> that</c><00:12:14.079><c> in</c><00:12:14.320><c> python</c><00:12:14.959><c> with</c><00:12:15.200><c> one</c><00:12:15.440><c> line</c><00:12:15.680><c> of</c><00:12:15.839><c> code</c>

00:12:16.150 --> 00:12:16.160 align:start position:0%
do that in python with one line of code
 

00:12:16.160 --> 00:12:17.670 align:start position:0%
do that in python with one line of code
we're<00:12:16.320><c> just</c><00:12:16.480><c> going</c><00:12:16.560><c> to</c><00:12:16.720><c> iterate</c><00:12:17.120><c> through</c><00:12:17.360><c> each</c>

00:12:17.670 --> 00:12:17.680 align:start position:0%
we're just going to iterate through each
 

00:12:17.680 --> 00:12:18.949 align:start position:0%
we're just going to iterate through each
count<00:12:18.160><c> in</c>

00:12:18.949 --> 00:12:18.959 align:start position:0%
count in
 

00:12:18.959 --> 00:12:19.750 align:start position:0%
count in
the

00:12:19.750 --> 00:12:19.760 align:start position:0%
the
 

00:12:19.760 --> 00:12:21.509 align:start position:0%
the
hashmap<00:12:20.240><c> that</c><00:12:20.399><c> we</c><00:12:20.480><c> just</c><00:12:20.639><c> created</c><00:12:21.040><c> but</c><00:12:21.200><c> we</c><00:12:21.360><c> want</c>

00:12:21.509 --> 00:12:21.519 align:start position:0%
hashmap that we just created but we want
 

00:12:21.519 --> 00:12:23.430 align:start position:0%
hashmap that we just created but we want
to<00:12:21.680><c> only</c><00:12:21.920><c> iterate</c><00:12:22.320><c> through</c><00:12:22.480><c> the</c><00:12:22.720><c> values</c><00:12:23.200><c> so</c>

00:12:23.430 --> 00:12:23.440 align:start position:0%
to only iterate through the values so
 

00:12:23.440 --> 00:12:25.829 align:start position:0%
to only iterate through the values so
count.values<00:12:24.800><c> and</c><00:12:24.880><c> we</c><00:12:25.040><c> want</c><00:12:25.200><c> to</c><00:12:25.279><c> add</c><00:12:25.519><c> that</c><00:12:25.680><c> to</c>

00:12:25.829 --> 00:12:25.839 align:start position:0%
count.values and we want to add that to
 

00:12:25.839 --> 00:12:28.629 align:start position:0%
count.values and we want to add that to
our<00:12:26.000><c> hashmap</c><00:12:26.800><c> but</c><00:12:27.519><c> in</c><00:12:27.680><c> python's</c><00:12:28.160><c> case</c><00:12:28.480><c> we</c>

00:12:28.629 --> 00:12:28.639 align:start position:0%
our hashmap but in python's case we
 

00:12:28.639 --> 00:12:30.710 align:start position:0%
our hashmap but in python's case we
can't<00:12:28.880><c> have</c><00:12:29.120><c> a</c><00:12:29.200><c> max</c><00:12:29.519><c> heap</c><00:12:29.760><c> this</c><00:12:29.920><c> is</c><00:12:30.160><c> actually</c><00:12:30.480><c> a</c>

00:12:30.710 --> 00:12:30.720 align:start position:0%
can't have a max heap this is actually a
 

00:12:30.720 --> 00:12:33.110 align:start position:0%
can't have a max heap this is actually a
min<00:12:30.959><c> heap</c><00:12:31.519><c> after</c><00:12:31.839><c> we</c><00:12:32.000><c> heapify</c><00:12:32.560><c> it</c><00:12:32.800><c> so</c><00:12:32.959><c> i'm</c>

00:12:33.110 --> 00:12:33.120 align:start position:0%
min heap after we heapify it so i'm
 

00:12:33.120 --> 00:12:34.470 align:start position:0%
min heap after we heapify it so i'm
actually<00:12:33.360><c> going</c><00:12:33.440><c> to</c><00:12:33.519><c> take</c><00:12:33.680><c> the</c><00:12:33.920><c> negative</c><00:12:34.320><c> of</c>

00:12:34.470 --> 00:12:34.480 align:start position:0%
actually going to take the negative of
 

00:12:34.480 --> 00:12:36.470 align:start position:0%
actually going to take the negative of
the<00:12:34.639><c> count</c><00:12:35.040><c> and</c><00:12:35.200><c> add</c><00:12:35.440><c> it</c><00:12:35.760><c> so</c><00:12:36.000><c> this</c><00:12:36.160><c> is</c><00:12:36.240><c> just</c>

00:12:36.470 --> 00:12:36.480 align:start position:0%
the count and add it so this is just
 

00:12:36.480 --> 00:12:39.269 align:start position:0%
the count and add it so this is just
creating<00:12:36.880><c> an</c><00:12:37.040><c> array</c><00:12:38.160><c> with</c><00:12:38.399><c> every</c><00:12:38.959><c> negative</c>

00:12:39.269 --> 00:12:39.279 align:start position:0%
creating an array with every negative
 

00:12:39.279 --> 00:12:41.670 align:start position:0%
creating an array with every negative
count<00:12:39.600><c> that</c><00:12:39.760><c> we</c><00:12:40.079><c> computed</c><00:12:40.959><c> but</c><00:12:41.120><c> to</c><00:12:41.360><c> actually</c>

00:12:41.670 --> 00:12:41.680 align:start position:0%
count that we computed but to actually
 

00:12:41.680 --> 00:12:43.430 align:start position:0%
count that we computed but to actually
turn<00:12:41.920><c> it</c><00:12:42.079><c> into</c><00:12:42.399><c> a</c><00:12:42.560><c> heap</c>

00:12:43.430 --> 00:12:43.440 align:start position:0%
turn it into a heap
 

00:12:43.440 --> 00:12:44.590 align:start position:0%
turn it into a heap
we<00:12:43.600><c> can</c><00:12:43.839><c> do</c>

00:12:44.590 --> 00:12:44.600 align:start position:0%
we can do
 

00:12:44.600 --> 00:12:47.509 align:start position:0%
we can do
heapq.heapify<00:12:45.680><c> in</c><00:12:45.920><c> python</c><00:12:46.720><c> and</c><00:12:46.959><c> to</c><00:12:47.120><c> that</c><00:12:47.279><c> max</c>

00:12:47.509 --> 00:12:47.519 align:start position:0%
heapq.heapify in python and to that max
 

00:12:47.519 --> 00:12:49.670 align:start position:0%
heapq.heapify in python and to that max
heap<00:12:47.760><c> and</c><00:12:47.920><c> it'll</c><00:12:48.160><c> basically</c><00:12:48.639><c> order</c><00:12:49.120><c> it</c><00:12:49.440><c> it'll</c>

00:12:49.670 --> 00:12:49.680 align:start position:0%
heap and it'll basically order it it'll
 

00:12:49.680 --> 00:12:51.590 align:start position:0%
heap and it'll basically order it it'll
take<00:12:49.839><c> this</c><00:12:50.079><c> array</c><00:12:50.480><c> and</c><00:12:50.639><c> order</c><00:12:51.040><c> it</c><00:12:51.200><c> in</c><00:12:51.279><c> such</c><00:12:51.519><c> a</c>

00:12:51.590 --> 00:12:51.600 align:start position:0%
take this array and order it in such a
 

00:12:51.600 --> 00:12:54.389 align:start position:0%
take this array and order it in such a
way<00:12:51.760><c> that</c><00:12:52.000><c> it</c><00:12:52.240><c> is</c><00:12:52.560><c> a</c><00:12:52.720><c> max</c><00:12:53.040><c> heap</c><00:12:53.680><c> basically</c><00:12:54.240><c> for</c>

00:12:54.389 --> 00:12:54.399 align:start position:0%
way that it is a max heap basically for
 

00:12:54.399 --> 00:12:57.110 align:start position:0%
way that it is a max heap basically for
us<00:12:54.639><c> to</c><00:12:54.880><c> efficiently</c><00:12:55.519><c> get</c><00:12:55.760><c> the</c><00:12:55.920><c> maximum</c><00:12:56.480><c> value</c>

00:12:57.110 --> 00:12:57.120 align:start position:0%
us to efficiently get the maximum value
 

00:12:57.120 --> 00:12:57.910 align:start position:0%
us to efficiently get the maximum value
from

00:12:57.910 --> 00:12:57.920 align:start position:0%
from
 

00:12:57.920 --> 00:13:00.150 align:start position:0%
from
the<00:12:58.320><c> heap</c><00:12:58.560><c> whenever</c><00:12:58.959><c> we</c><00:12:59.120><c> want</c><00:12:59.440><c> it</c><00:12:59.680><c> we're</c><00:12:59.839><c> also</c>

00:13:00.150 --> 00:13:00.160 align:start position:0%
the heap whenever we want it we're also
 

00:13:00.160 --> 00:13:01.670 align:start position:0%
the heap whenever we want it we're also
going<00:13:00.240><c> to</c><00:13:00.480><c> declare</c><00:13:00.800><c> a</c><00:13:00.959><c> variable</c><00:13:01.360><c> to</c><00:13:01.519><c> keep</c>

00:13:01.670 --> 00:13:01.680 align:start position:0%
going to declare a variable to keep
 

00:13:01.680 --> 00:13:03.590 align:start position:0%
going to declare a variable to keep
track<00:13:01.920><c> of</c><00:13:02.079><c> what</c><00:13:02.240><c> time</c><00:13:02.560><c> it</c><00:13:02.720><c> is</c><00:13:02.959><c> initially</c><00:13:03.440><c> we'll</c>

00:13:03.590 --> 00:13:03.600 align:start position:0%
track of what time it is initially we'll
 

00:13:03.600 --> 00:13:05.670 align:start position:0%
track of what time it is initially we'll
set<00:13:03.760><c> that</c><00:13:03.920><c> to</c><00:13:04.079><c> zero</c><00:13:04.480><c> and</c><00:13:04.560><c> we'll</c><00:13:04.800><c> also</c><00:13:04.959><c> have</c><00:13:05.200><c> a</c><00:13:05.279><c> q</c>

00:13:05.670 --> 00:13:05.680 align:start position:0%
set that to zero and we'll also have a q
 

00:13:05.680 --> 00:13:07.829 align:start position:0%
set that to zero and we'll also have a q
in<00:13:05.760><c> this</c><00:13:05.920><c> case</c><00:13:06.160><c> a</c><00:13:06.320><c> double</c><00:13:06.639><c> ended</c><00:13:07.040><c> queue</c><00:13:07.519><c> and</c>

00:13:07.829 --> 00:13:07.839 align:start position:0%
in this case a double ended queue and
 

00:13:07.839 --> 00:13:09.430 align:start position:0%
in this case a double ended queue and
the<00:13:08.000><c> double</c><00:13:08.240><c> ended</c><00:13:08.480><c> queue</c><00:13:08.720><c> is</c><00:13:08.800><c> gonna</c><00:13:09.040><c> actually</c>

00:13:09.430 --> 00:13:09.440 align:start position:0%
the double ended queue is gonna actually
 

00:13:09.440 --> 00:13:11.670 align:start position:0%
the double ended queue is gonna actually
contain<00:13:09.920><c> a</c><00:13:10.079><c> pair</c><00:13:10.320><c> of</c><00:13:10.480><c> values</c><00:13:11.120><c> and</c><00:13:11.279><c> the</c><00:13:11.360><c> pair</c><00:13:11.519><c> of</c>

00:13:11.670 --> 00:13:11.680 align:start position:0%
contain a pair of values and the pair of
 

00:13:11.680 --> 00:13:13.509 align:start position:0%
contain a pair of values and the pair of
values<00:13:12.079><c> are</c><00:13:12.240><c> gonna</c><00:13:12.399><c> be</c><00:13:12.560><c> that</c><00:13:12.720><c> negative</c><00:13:13.120><c> count</c>

00:13:13.509 --> 00:13:13.519 align:start position:0%
values are gonna be that negative count
 

00:13:13.519 --> 00:13:16.230 align:start position:0%
values are gonna be that negative count
that<00:13:13.680><c> we</c><00:13:13.839><c> had</c><00:13:14.079><c> up</c><00:13:14.160><c> above</c><00:13:14.720><c> and</c><00:13:15.120><c> for</c><00:13:15.360><c> that</c><00:13:15.680><c> uh</c><00:13:16.079><c> you</c>

00:13:16.230 --> 00:13:16.240 align:start position:0%
that we had up above and for that uh you
 

00:13:16.240 --> 00:13:17.910 align:start position:0%
that we had up above and for that uh you
know<00:13:16.399><c> task</c><00:13:16.800><c> that</c><00:13:17.040><c> count</c>

00:13:17.910 --> 00:13:17.920 align:start position:0%
know task that count
 

00:13:17.920 --> 00:13:20.069 align:start position:0%
know task that count
the<00:13:18.079><c> corresponding</c><00:13:18.800><c> idle</c><00:13:19.120><c> time</c><00:13:19.440><c> at</c><00:13:19.519><c> what</c><00:13:19.680><c> time</c>

00:13:20.069 --> 00:13:20.079 align:start position:0%
the corresponding idle time at what time
 

00:13:20.079 --> 00:13:22.230 align:start position:0%
the corresponding idle time at what time
is<00:13:20.240><c> it</c><00:13:20.399><c> going</c><00:13:20.560><c> to</c><00:13:20.720><c> be</c><00:13:20.959><c> available</c><00:13:21.519><c> for</c><00:13:21.680><c> us</c><00:13:21.920><c> to</c>

00:13:22.230 --> 00:13:22.240 align:start position:0%
is it going to be available for us to
 

00:13:22.240 --> 00:13:24.069 align:start position:0%
is it going to be available for us to
add<00:13:22.560><c> back</c><00:13:22.959><c> to</c><00:13:23.279><c> the</c>

00:13:24.069 --> 00:13:24.079 align:start position:0%
add back to the
 

00:13:24.079 --> 00:13:26.949 align:start position:0%
add back to the
max<00:13:24.399><c> heap</c><00:13:24.800><c> okay</c><00:13:25.440><c> so</c><00:13:26.000><c> with</c><00:13:26.160><c> that</c><00:13:26.399><c> said</c><00:13:26.720><c> we're</c>

00:13:26.949 --> 00:13:26.959 align:start position:0%
max heap okay so with that said we're
 

00:13:26.959 --> 00:13:29.509 align:start position:0%
max heap okay so with that said we're
gonna<00:13:27.279><c> continue</c><00:13:28.160><c> uh</c><00:13:28.480><c> our</c><00:13:28.720><c> loop</c><00:13:29.200><c> we're</c><00:13:29.360><c> gonna</c>

00:13:29.509 --> 00:13:29.519 align:start position:0%
gonna continue uh our loop we're gonna
 

00:13:29.519 --> 00:13:31.670 align:start position:0%
gonna continue uh our loop we're gonna
continue<00:13:29.920><c> processing</c><00:13:30.399><c> these</c><00:13:30.639><c> tasks</c><00:13:31.120><c> while</c>

00:13:31.670 --> 00:13:31.680 align:start position:0%
continue processing these tasks while
 

00:13:31.680 --> 00:13:35.030 align:start position:0%
continue processing these tasks while
the<00:13:31.839><c> max</c><00:13:32.160><c> heap</c><00:13:32.480><c> is</c><00:13:32.560><c> non-empty</c><00:13:33.440><c> but</c><00:13:33.920><c> end</c><00:13:34.560><c> or</c><00:13:34.720><c> not</c>

00:13:35.030 --> 00:13:35.040 align:start position:0%
the max heap is non-empty but end or not
 

00:13:35.040 --> 00:13:37.350 align:start position:0%
the max heap is non-empty but end or not
and<00:13:35.279><c> but</c><00:13:35.600><c> or</c><00:13:36.320><c> the</c>

00:13:37.350 --> 00:13:37.360 align:start position:0%
and but or the
 

00:13:37.360 --> 00:13:39.509 align:start position:0%
and but or the
cue<00:13:37.760><c> is</c><00:13:37.839><c> not</c><00:13:38.160><c> empty</c><00:13:38.480><c> right</c><00:13:38.720><c> as</c><00:13:38.800><c> long</c><00:13:39.040><c> as</c><00:13:39.279><c> one</c><00:13:39.440><c> of</c>

00:13:39.509 --> 00:13:39.519 align:start position:0%
cue is not empty right as long as one of
 

00:13:39.519 --> 00:13:41.269 align:start position:0%
cue is not empty right as long as one of
these<00:13:39.839><c> is</c><00:13:39.920><c> not</c><00:13:40.240><c> empty</c><00:13:40.480><c> that</c><00:13:40.639><c> means</c><00:13:40.880><c> we</c><00:13:41.040><c> have</c>

00:13:41.269 --> 00:13:41.279 align:start position:0%
these is not empty that means we have
 

00:13:41.279 --> 00:13:43.750 align:start position:0%
these is not empty that means we have
more<00:13:41.519><c> tasks</c><00:13:42.000><c> that</c><00:13:42.160><c> we</c><00:13:42.320><c> need</c><00:13:42.560><c> to</c><00:13:42.720><c> process</c>

00:13:43.750 --> 00:13:43.760 align:start position:0%
more tasks that we need to process
 

00:13:43.760 --> 00:13:45.590 align:start position:0%
more tasks that we need to process
so<00:13:44.000><c> as</c><00:13:44.160><c> we</c><00:13:44.399><c> process</c>

00:13:45.590 --> 00:13:45.600 align:start position:0%
so as we process
 

00:13:45.600 --> 00:13:46.949 align:start position:0%
so as we process
each<00:13:45.839><c> iteration</c><00:13:46.240><c> of</c><00:13:46.320><c> the</c><00:13:46.399><c> loop</c><00:13:46.639><c> is</c><00:13:46.720><c> just</c><00:13:46.880><c> going</c>

00:13:46.949 --> 00:13:46.959 align:start position:0%
each iteration of the loop is just going
 

00:13:46.959 --> 00:13:49.509 align:start position:0%
each iteration of the loop is just going
to<00:13:47.120><c> increment</c><00:13:47.519><c> the</c><00:13:47.600><c> time</c><00:13:47.920><c> by</c><00:13:48.079><c> exactly</c><00:13:48.639><c> one</c><00:13:49.360><c> and</c>

00:13:49.509 --> 00:13:49.519 align:start position:0%
to increment the time by exactly one and
 

00:13:49.519 --> 00:13:51.350 align:start position:0%
to increment the time by exactly one and
actually<00:13:49.760><c> before</c><00:13:50.079><c> i</c><00:13:50.160><c> even</c><00:13:50.399><c> forget</c><00:13:51.199><c> i</c>

00:13:51.350 --> 00:13:51.360 align:start position:0%
actually before i even forget i
 

00:13:51.360 --> 00:13:52.710 align:start position:0%
actually before i even forget i
mentioned<00:13:51.600><c> that</c><00:13:51.760><c> the</c><00:13:51.920><c> time</c><00:13:52.160><c> complexity</c><00:13:52.560><c> of</c>

00:13:52.710 --> 00:13:52.720 align:start position:0%
mentioned that the time complexity of
 

00:13:52.720 --> 00:13:53.990 align:start position:0%
mentioned that the time complexity of
this<00:13:52.800><c> whole</c><00:13:52.959><c> algorithm</c><00:13:53.360><c> is</c><00:13:53.519><c> going</c><00:13:53.519><c> to</c><00:13:53.600><c> be</c><00:13:53.760><c> big</c>

00:13:53.990 --> 00:13:54.000 align:start position:0%
this whole algorithm is going to be big
 

00:13:54.000 --> 00:13:56.949 align:start position:0%
this whole algorithm is going to be big
o<00:13:54.240><c> of</c><00:13:54.560><c> n</c><00:13:54.800><c> but</c><00:13:54.959><c> that's</c><00:13:55.360><c> not</c><00:13:55.600><c> entirely</c><00:13:56.320><c> correct</c>

00:13:56.949 --> 00:13:56.959 align:start position:0%
o of n but that's not entirely correct
 

00:13:56.959 --> 00:13:59.750 align:start position:0%
o of n but that's not entirely correct
let's<00:13:57.120><c> say</c><00:13:57.440><c> n</c><00:13:57.760><c> is</c><00:13:57.920><c> the</c><00:13:58.079><c> size</c><00:13:58.399><c> of</c><00:13:58.560><c> our</c><00:13:58.720><c> tasks</c><00:13:59.600><c> we</c>

00:13:59.750 --> 00:13:59.760 align:start position:0%
let's say n is the size of our tasks we
 

00:13:59.760 --> 00:14:01.670 align:start position:0%
let's say n is the size of our tasks we
can<00:13:59.920><c> add</c><00:14:00.160><c> one</c><00:14:00.320><c> more</c><00:14:00.560><c> variable</c><00:14:00.959><c> let's</c><00:14:01.199><c> call</c><00:14:01.440><c> it</c>

00:14:01.670 --> 00:14:01.680 align:start position:0%
can add one more variable let's call it
 

00:14:01.680 --> 00:14:03.509 align:start position:0%
can add one more variable let's call it
m<00:14:02.000><c> where</c><00:14:02.240><c> m</c><00:14:02.399><c> actually</c><00:14:02.720><c> represents</c><00:14:03.199><c> what</c><00:14:03.360><c> the</c>

00:14:03.509 --> 00:14:03.519 align:start position:0%
m where m actually represents what the
 

00:14:03.519 --> 00:14:05.350 align:start position:0%
m where m actually represents what the
idle<00:14:03.839><c> time</c><00:14:04.160><c> is</c><00:14:04.320><c> because</c><00:14:04.560><c> in</c><00:14:04.639><c> the</c><00:14:04.720><c> worst</c><00:14:05.040><c> case</c>

00:14:05.350 --> 00:14:05.360 align:start position:0%
idle time is because in the worst case
 

00:14:05.360 --> 00:14:06.870 align:start position:0%
idle time is because in the worst case
you<00:14:05.440><c> know</c><00:14:05.600><c> we</c><00:14:05.680><c> have</c><00:14:05.839><c> to</c><00:14:05.920><c> go</c><00:14:06.079><c> through</c><00:14:06.320><c> that</c><00:14:06.480><c> idle</c>

00:14:06.870 --> 00:14:06.880 align:start position:0%
you know we have to go through that idle
 

00:14:06.880 --> 00:14:09.430 align:start position:0%
you know we have to go through that idle
time<00:14:07.360><c> for</c><00:14:07.600><c> each</c><00:14:08.079><c> task</c><00:14:08.399><c> that</c><00:14:08.560><c> we</c><00:14:08.720><c> have</c><00:14:09.199><c> write</c>

00:14:09.430 --> 00:14:09.440 align:start position:0%
time for each task that we have write
 

00:14:09.440 --> 00:14:11.990 align:start position:0%
time for each task that we have write
suppose<00:14:09.920><c> that</c><00:14:10.079><c> the</c><00:14:10.240><c> tasks</c><00:14:10.720><c> was</c><00:14:11.040><c> just</c><00:14:11.440><c> an</c><00:14:11.600><c> array</c>

00:14:11.990 --> 00:14:12.000 align:start position:0%
suppose that the tasks was just an array
 

00:14:12.000 --> 00:14:13.750 align:start position:0%
suppose that the tasks was just an array
of<00:14:12.399><c> all</c><00:14:12.720><c> a's</c>

00:14:13.750 --> 00:14:13.760 align:start position:0%
of all a's
 

00:14:13.760 --> 00:14:15.110 align:start position:0%
of all a's
in<00:14:13.839><c> that</c><00:14:14.000><c> case</c><00:14:14.240><c> we'd</c><00:14:14.399><c> have</c><00:14:14.560><c> to</c><00:14:14.720><c> you</c><00:14:14.800><c> know</c><00:14:14.959><c> go</c>

00:14:15.110 --> 00:14:15.120 align:start position:0%
in that case we'd have to you know go
 

00:14:15.120 --> 00:14:17.269 align:start position:0%
in that case we'd have to you know go
through<00:14:15.279><c> the</c><00:14:15.360><c> idle</c><00:14:15.680><c> time</c><00:14:15.920><c> for</c><00:14:16.160><c> each</c><00:14:16.560><c> task</c><00:14:17.120><c> but</c>

00:14:17.269 --> 00:14:17.279 align:start position:0%
through the idle time for each task but
 

00:14:17.279 --> 00:14:19.030 align:start position:0%
through the idle time for each task but
the<00:14:17.360><c> idle</c><00:14:17.680><c> time</c><00:14:17.920><c> is</c><00:14:18.000><c> actually</c><00:14:18.320><c> a</c><00:14:18.399><c> pretty</c><00:14:18.639><c> small</c>

00:14:19.030 --> 00:14:19.040 align:start position:0%
the idle time is actually a pretty small
 

00:14:19.040 --> 00:14:20.790 align:start position:0%
the idle time is actually a pretty small
constant<00:14:19.440><c> i</c><00:14:19.519><c> think</c><00:14:19.680><c> it's</c><00:14:19.920><c> less</c><00:14:20.079><c> than</c><00:14:20.240><c> 100</c><00:14:20.720><c> in</c>

00:14:20.790 --> 00:14:20.800 align:start position:0%
constant i think it's less than 100 in
 

00:14:20.800 --> 00:14:23.189 align:start position:0%
constant i think it's less than 100 in
our<00:14:20.959><c> case</c><00:14:21.600><c> but</c><00:14:21.839><c> just</c><00:14:22.079><c> wanted</c><00:14:22.320><c> to</c><00:14:22.560><c> mention</c><00:14:22.959><c> that</c>

00:14:23.189 --> 00:14:23.199 align:start position:0%
our case but just wanted to mention that
 

00:14:23.199 --> 00:14:25.030 align:start position:0%
our case but just wanted to mention that
in<00:14:23.360><c> case</c><00:14:23.920><c> but</c><00:14:24.079><c> okay</c><00:14:24.320><c> now</c><00:14:24.480><c> let's</c><00:14:24.639><c> continue</c><00:14:24.959><c> with</c>

00:14:25.030 --> 00:14:25.040 align:start position:0%
in case but okay now let's continue with
 

00:14:25.040 --> 00:14:27.110 align:start position:0%
in case but okay now let's continue with
the<00:14:25.120><c> algorithm</c><00:14:25.519><c> so</c><00:14:26.160><c> at</c><00:14:26.320><c> each</c><00:14:26.560><c> iteration</c><00:14:26.959><c> of</c>

00:14:27.110 --> 00:14:27.120 align:start position:0%
the algorithm so at each iteration of
 

00:14:27.120 --> 00:14:28.310 align:start position:0%
the algorithm so at each iteration of
loop<00:14:27.279><c> we're</c><00:14:27.440><c> going</c><00:14:27.519><c> to</c><00:14:27.600><c> increment</c><00:14:28.000><c> the</c><00:14:28.079><c> time</c>

00:14:28.310 --> 00:14:28.320 align:start position:0%
loop we're going to increment the time
 

00:14:28.320 --> 00:14:31.829 align:start position:0%
loop we're going to increment the time
by<00:14:28.560><c> one</c><00:14:29.199><c> if</c><00:14:29.440><c> the</c><00:14:29.600><c> max</c><00:14:29.920><c> heap</c><00:14:30.320><c> is</c><00:14:30.560><c> non-empty</c><00:14:31.600><c> we</c>

00:14:31.829 --> 00:14:31.839 align:start position:0%
by one if the max heap is non-empty we
 

00:14:31.839 --> 00:14:33.829 align:start position:0%
by one if the max heap is non-empty we
are<00:14:32.079><c> going</c><00:14:32.240><c> to</c><00:14:32.480><c> pop</c><00:14:32.800><c> from</c><00:14:33.040><c> it</c><00:14:33.360><c> and</c><00:14:33.440><c> we</c><00:14:33.600><c> can</c><00:14:33.680><c> do</c>

00:14:33.829 --> 00:14:33.839 align:start position:0%
are going to pop from it and we can do
 

00:14:33.839 --> 00:14:36.629 align:start position:0%
are going to pop from it and we can do
that<00:14:34.000><c> with</c><00:14:34.240><c> heap</c><00:14:34.560><c> q</c><00:14:34.880><c> dot</c><00:14:35.120><c> heap</c><00:14:35.760><c> pop</c><00:14:36.240><c> from</c><00:14:36.480><c> the</c>

00:14:36.629 --> 00:14:36.639 align:start position:0%
that with heap q dot heap pop from the
 

00:14:36.639 --> 00:14:38.870 align:start position:0%
that with heap q dot heap pop from the
max<00:14:36.959><c> heap</c><00:14:37.279><c> and</c><00:14:37.519><c> from</c><00:14:37.760><c> it</c><00:14:37.839><c> we're</c><00:14:38.000><c> gonna</c><00:14:38.320><c> get</c><00:14:38.560><c> the</c>

00:14:38.870 --> 00:14:38.880 align:start position:0%
max heap and from it we're gonna get the
 

00:14:38.880 --> 00:14:41.590 align:start position:0%
max heap and from it we're gonna get the
count<00:14:39.519><c> and</c><00:14:39.760><c> as</c><00:14:40.000><c> we</c><00:14:40.399><c> uh</c><00:14:40.880><c> pop</c><00:14:41.120><c> from</c><00:14:41.279><c> the</c><00:14:41.360><c> heap</c>

00:14:41.590 --> 00:14:41.600 align:start position:0%
count and as we uh pop from the heap
 

00:14:41.600 --> 00:14:43.990 align:start position:0%
count and as we uh pop from the heap
that<00:14:41.680><c> means</c><00:14:41.920><c> we're</c><00:14:42.160><c> processing</c><00:14:42.720><c> this</c><00:14:43.040><c> task</c><00:14:43.680><c> so</c>

00:14:43.990 --> 00:14:44.000 align:start position:0%
that means we're processing this task so
 

00:14:44.000 --> 00:14:46.389 align:start position:0%
that means we're processing this task so
to<00:14:44.240><c> the</c><00:14:44.399><c> count</c><00:14:44.800><c> itself</c><00:14:45.120><c> we</c><00:14:45.279><c> can</c><00:14:45.440><c> actually</c><00:14:45.920><c> add</c>

00:14:46.389 --> 00:14:46.399 align:start position:0%
to the count itself we can actually add
 

00:14:46.399 --> 00:14:48.470 align:start position:0%
to the count itself we can actually add
one<00:14:46.720><c> to</c><00:14:46.959><c> it</c><00:14:47.519><c> because</c><00:14:47.839><c> remember</c><00:14:48.240><c> we're</c>

00:14:48.470 --> 00:14:48.480 align:start position:0%
one to it because remember we're
 

00:14:48.480 --> 00:14:50.230 align:start position:0%
one to it because remember we're
actually<00:14:48.800><c> using</c><00:14:49.120><c> negative</c><00:14:49.519><c> values</c><00:14:49.920><c> for</c><00:14:50.079><c> the</c>

00:14:50.230 --> 00:14:50.240 align:start position:0%
actually using negative values for the
 

00:14:50.240 --> 00:14:52.310 align:start position:0%
actually using negative values for the
counts<00:14:50.560><c> if</c><00:14:50.639><c> you</c><00:14:50.800><c> were</c><00:14:50.959><c> using</c><00:14:51.279><c> positive</c><00:14:51.680><c> values</c>

00:14:52.310 --> 00:14:52.320 align:start position:0%
counts if you were using positive values
 

00:14:52.320 --> 00:14:54.470 align:start position:0%
counts if you were using positive values
you'd<00:14:52.560><c> probably</c><00:14:52.880><c> subtract</c><00:14:53.519><c> one</c><00:14:53.760><c> from</c><00:14:54.000><c> it</c><00:14:54.320><c> but</c>

00:14:54.470 --> 00:14:54.480 align:start position:0%
you'd probably subtract one from it but
 

00:14:54.480 --> 00:14:55.990 align:start position:0%
you'd probably subtract one from it but
in<00:14:54.639><c> our</c><00:14:54.800><c> case</c><00:14:54.959><c> we're</c><00:14:55.120><c> going</c><00:14:55.199><c> to</c><00:14:55.279><c> be</c><00:14:55.440><c> adding</c><00:14:55.760><c> one</c>

00:14:55.990 --> 00:14:56.000 align:start position:0%
in our case we're going to be adding one
 

00:14:56.000 --> 00:14:59.350 align:start position:0%
in our case we're going to be adding one
to<00:14:56.240><c> it</c><00:14:56.399><c> and</c><00:14:56.720><c> if</c><00:14:57.040><c> this</c><00:14:57.440><c> count</c><00:14:58.000><c> is</c><00:14:58.399><c> non-zero</c><00:14:59.199><c> we</c>

00:14:59.350 --> 00:14:59.360 align:start position:0%
to it and if this count is non-zero we
 

00:14:59.360 --> 00:15:01.829 align:start position:0%
to it and if this count is non-zero we
can<00:14:59.519><c> check</c><00:14:59.760><c> that</c><00:15:00.399><c> uh</c><00:15:00.639><c> like</c><00:15:00.880><c> this</c><00:15:01.199><c> if</c><00:15:01.360><c> count</c><00:15:01.680><c> is</c>

00:15:01.829 --> 00:15:01.839 align:start position:0%
can check that uh like this if count is
 

00:15:01.839 --> 00:15:04.230 align:start position:0%
can check that uh like this if count is
non-zero<00:15:02.639><c> then</c><00:15:02.959><c> we</c><00:15:03.199><c> want</c><00:15:03.440><c> to</c><00:15:03.680><c> go</c><00:15:03.839><c> ahead</c><00:15:04.079><c> and</c>

00:15:04.230 --> 00:15:04.240 align:start position:0%
non-zero then we want to go ahead and
 

00:15:04.240 --> 00:15:06.550 align:start position:0%
non-zero then we want to go ahead and
append<00:15:04.639><c> it</c><00:15:04.880><c> to</c><00:15:05.199><c> our</c><00:15:05.519><c> queue</c><00:15:05.920><c> and</c><00:15:06.079><c> we</c><00:15:06.240><c> can</c><00:15:06.399><c> do</c>

00:15:06.550 --> 00:15:06.560 align:start position:0%
append it to our queue and we can do
 

00:15:06.560 --> 00:15:09.350 align:start position:0%
append it to our queue and we can do
that<00:15:06.880><c> like</c><00:15:07.360><c> this</c><00:15:08.000><c> we're</c><00:15:08.160><c> gonna</c><00:15:08.639><c> append</c><00:15:09.040><c> a</c><00:15:09.120><c> pair</c>

00:15:09.350 --> 00:15:09.360 align:start position:0%
that like this we're gonna append a pair
 

00:15:09.360 --> 00:15:12.629 align:start position:0%
that like this we're gonna append a pair
of<00:15:09.440><c> values</c><00:15:09.920><c> the</c><00:15:10.079><c> count</c><00:15:10.480><c> itself</c><00:15:11.360><c> and</c><00:15:12.000><c> the</c><00:15:12.240><c> time</c>

00:15:12.629 --> 00:15:12.639 align:start position:0%
of values the count itself and the time
 

00:15:12.639 --> 00:15:14.949 align:start position:0%
of values the count itself and the time
that<00:15:13.199><c> it's</c><00:15:13.440><c> going</c><00:15:13.680><c> to</c><00:15:14.000><c> be</c><00:15:14.240><c> available</c><00:15:14.720><c> again</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
that it's going to be available again
 

00:15:14.959 --> 00:15:17.189 align:start position:0%
that it's going to be available again
and<00:15:15.120><c> we</c><00:15:15.279><c> can</c><00:15:15.360><c> get</c><00:15:15.519><c> that</c><00:15:15.680><c> by</c><00:15:15.920><c> taking</c><00:15:16.320><c> our</c><00:15:16.560><c> time</c>

00:15:17.189 --> 00:15:17.199 align:start position:0%
and we can get that by taking our time
 

00:15:17.199 --> 00:15:19.350 align:start position:0%
and we can get that by taking our time
our<00:15:17.360><c> current</c><00:15:17.680><c> time</c><00:15:18.079><c> adding</c><00:15:18.399><c> to</c><00:15:18.639><c> it</c><00:15:18.720><c> the</c><00:15:18.959><c> idle</c>

00:15:19.350 --> 00:15:19.360 align:start position:0%
our current time adding to it the idle
 

00:15:19.360 --> 00:15:22.310 align:start position:0%
our current time adding to it the idle
time<00:15:19.920><c> n</c><00:15:20.480><c> so</c><00:15:20.639><c> at</c><00:15:20.720><c> this</c><00:15:20.959><c> time</c><00:15:21.360><c> we</c><00:15:21.600><c> can</c><00:15:21.760><c> once</c><00:15:22.000><c> again</c>

00:15:22.310 --> 00:15:22.320 align:start position:0%
time n so at this time we can once again
 

00:15:22.320 --> 00:15:24.790 align:start position:0%
time n so at this time we can once again
add<00:15:22.480><c> it</c><00:15:22.560><c> to</c><00:15:22.720><c> our</c><00:15:22.880><c> maxi</c><00:15:23.440><c> okay</c><00:15:23.760><c> that's</c><00:15:24.079><c> great</c><00:15:24.480><c> we</c>

00:15:24.790 --> 00:15:24.800 align:start position:0%
add it to our maxi okay that's great we
 

00:15:24.800 --> 00:15:26.949 align:start position:0%
add it to our maxi okay that's great we
process<00:15:25.199><c> a</c><00:15:25.279><c> task</c><00:15:25.600><c> we</c><00:15:26.079><c> remove</c><00:15:26.399><c> it</c><00:15:26.480><c> from</c><00:15:26.639><c> the</c><00:15:26.720><c> max</c>

00:15:26.949 --> 00:15:26.959 align:start position:0%
process a task we remove it from the max
 

00:15:26.959 --> 00:15:28.550 align:start position:0%
process a task we remove it from the max
heap<00:15:27.199><c> but</c><00:15:27.360><c> remember</c><00:15:27.680><c> we</c><00:15:27.839><c> also</c><00:15:28.079><c> have</c><00:15:28.240><c> to</c><00:15:28.399><c> take</c>

00:15:28.550 --> 00:15:28.560 align:start position:0%
heap but remember we also have to take
 

00:15:28.560 --> 00:15:30.230 align:start position:0%
heap but remember we also have to take
care<00:15:28.720><c> of</c><00:15:28.959><c> our</c><00:15:29.120><c> queue</c><00:15:29.360><c> if</c><00:15:29.600><c> our</c><00:15:29.759><c> queue</c><00:15:30.079><c> is</c>

00:15:30.230 --> 00:15:30.240 align:start position:0%
care of our queue if our queue is
 

00:15:30.240 --> 00:15:33.430 align:start position:0%
care of our queue if our queue is
non-empty<00:15:31.360><c> and</c><00:15:31.920><c> the</c><00:15:32.160><c> first</c><00:15:32.639><c> value</c><00:15:33.120><c> in</c><00:15:33.279><c> our</c>

00:15:33.430 --> 00:15:33.440 align:start position:0%
non-empty and the first value in our
 

00:15:33.440 --> 00:15:35.590 align:start position:0%
non-empty and the first value in our
queue<00:15:33.759><c> at</c><00:15:34.079><c> index</c><00:15:34.399><c> 0</c>

00:15:35.590 --> 00:15:35.600 align:start position:0%
queue at index 0
 

00:15:35.600 --> 00:15:38.949 align:start position:0%
queue at index 0
the<00:15:36.079><c> idle</c><00:15:36.480><c> time</c><00:15:36.800><c> for</c><00:15:37.040><c> it</c><00:15:37.199><c> which</c><00:15:37.440><c> is</c><00:15:37.600><c> also</c>

00:15:38.949 --> 00:15:38.959 align:start position:0%
the idle time for it which is also
 

00:15:38.959 --> 00:15:40.710 align:start position:0%
the idle time for it which is also
it<00:15:39.120><c> was</c><00:15:39.360><c> actually</c><00:15:39.600><c> going</c><00:15:39.680><c> to</c><00:15:39.759><c> be</c><00:15:39.839><c> at</c><00:15:40.000><c> index</c><00:15:40.320><c> one</c>

00:15:40.710 --> 00:15:40.720 align:start position:0%
it was actually going to be at index one
 

00:15:40.720 --> 00:15:42.550 align:start position:0%
it was actually going to be at index one
because<00:15:41.040><c> it's</c><00:15:41.199><c> the</c><00:15:41.519><c> second</c><00:15:41.839><c> value</c><00:15:42.240><c> in</c><00:15:42.320><c> the</c>

00:15:42.550 --> 00:15:42.560 align:start position:0%
because it's the second value in the
 

00:15:42.560 --> 00:15:45.269 align:start position:0%
because it's the second value in the
pair<00:15:43.040><c> so</c><00:15:43.199><c> if</c><00:15:43.839><c> this</c><00:15:44.160><c> time</c><00:15:44.480><c> has</c><00:15:44.639><c> just</c><00:15:44.959><c> been</c>

00:15:45.269 --> 00:15:45.279 align:start position:0%
pair so if this time has just been
 

00:15:45.279 --> 00:15:47.670 align:start position:0%
pair so if this time has just been
reached<00:15:45.680><c> so</c><00:15:45.839><c> if</c><00:15:46.000><c> this</c><00:15:46.480><c> is</c><00:15:46.720><c> equal</c><00:15:47.360><c> to</c><00:15:47.519><c> the</c>

00:15:47.670 --> 00:15:47.680 align:start position:0%
reached so if this is equal to the
 

00:15:47.680 --> 00:15:49.670 align:start position:0%
reached so if this is equal to the
current<00:15:48.079><c> time</c><00:15:48.560><c> that</c><00:15:48.800><c> means</c><00:15:49.120><c> you</c><00:15:49.279><c> know</c><00:15:49.360><c> we</c><00:15:49.519><c> can</c>

00:15:49.670 --> 00:15:49.680 align:start position:0%
current time that means you know we can
 

00:15:49.680 --> 00:15:52.150 align:start position:0%
current time that means you know we can
actually<00:15:50.079><c> pop</c><00:15:50.399><c> this</c><00:15:50.800><c> from</c><00:15:51.199><c> our</c><00:15:51.519><c> queue</c><00:15:52.000><c> so</c>

00:15:52.150 --> 00:15:52.160 align:start position:0%
actually pop this from our queue so
 

00:15:52.160 --> 00:15:55.670 align:start position:0%
actually pop this from our queue so
we're<00:15:52.320><c> going</c><00:15:52.399><c> to</c><00:15:52.560><c> say</c><00:15:52.880><c> q</c><00:15:53.440><c> dot</c><00:15:53.839><c> popped</c><00:15:54.639><c> left</c><00:15:55.199><c> and</c>

00:15:55.670 --> 00:15:55.680 align:start position:0%
we're going to say q dot popped left and
 

00:15:55.680 --> 00:15:57.350 align:start position:0%
we're going to say q dot popped left and
so<00:15:55.920><c> this</c><00:15:56.079><c> is</c><00:15:56.160><c> actually</c><00:15:56.399><c> going</c><00:15:56.480><c> to</c><00:15:56.639><c> pop</c><00:15:57.120><c> that</c>

00:15:57.350 --> 00:15:57.360 align:start position:0%
so this is actually going to pop that
 

00:15:57.360 --> 00:15:59.350 align:start position:0%
so this is actually going to pop that
pair<00:15:57.680><c> of</c><00:15:57.839><c> values</c><00:15:58.399><c> and</c><00:15:58.560><c> from</c><00:15:58.800><c> that</c><00:15:59.040><c> pair</c><00:15:59.199><c> of</c>

00:15:59.350 --> 00:15:59.360 align:start position:0%
pair of values and from that pair of
 

00:15:59.360 --> 00:16:01.430 align:start position:0%
pair of values and from that pair of
values<00:15:59.839><c> we</c><00:16:00.000><c> care</c><00:16:00.240><c> about</c><00:16:00.399><c> the</c><00:16:00.639><c> first</c><00:16:01.040><c> one</c><00:16:01.199><c> which</c>

00:16:01.430 --> 00:16:01.440 align:start position:0%
values we care about the first one which
 

00:16:01.440 --> 00:16:03.269 align:start position:0%
values we care about the first one which
is<00:16:01.600><c> the</c><00:16:01.759><c> count</c><00:16:02.000><c> so</c><00:16:02.160><c> we're</c><00:16:02.320><c> going</c><00:16:02.399><c> to</c><00:16:02.560><c> get</c><00:16:03.040><c> an</c>

00:16:03.269 --> 00:16:03.279 align:start position:0%
is the count so we're going to get an
 

00:16:03.279 --> 00:16:05.910 align:start position:0%
is the count so we're going to get an
index<00:16:03.759><c> of</c><00:16:03.920><c> zero</c><00:16:04.639><c> but</c><00:16:04.880><c> actually</c><00:16:05.199><c> that</c><00:16:05.519><c> value</c>

00:16:05.910 --> 00:16:05.920 align:start position:0%
index of zero but actually that value
 

00:16:05.920 --> 00:16:07.509 align:start position:0%
index of zero but actually that value
itself<00:16:06.399><c> what</c><00:16:06.560><c> do</c><00:16:06.720><c> we</c><00:16:06.800><c> want</c><00:16:06.959><c> to</c><00:16:07.040><c> do</c><00:16:07.199><c> we</c><00:16:07.360><c> just</c>

00:16:07.509 --> 00:16:07.519 align:start position:0%
itself what do we want to do we just
 

00:16:07.519 --> 00:16:09.350 align:start position:0%
itself what do we want to do we just
want<00:16:07.600><c> to</c><00:16:07.680><c> add</c><00:16:07.920><c> it</c><00:16:08.160><c> back</c><00:16:08.399><c> to</c><00:16:08.560><c> our</c><00:16:08.639><c> max</c><00:16:08.959><c> heap</c><00:16:09.199><c> so</c>

00:16:09.350 --> 00:16:09.360 align:start position:0%
want to add it back to our max heap so
 

00:16:09.360 --> 00:16:11.910 align:start position:0%
want to add it back to our max heap so
we<00:16:09.440><c> can</c><00:16:09.600><c> do</c><00:16:09.759><c> that</c><00:16:10.000><c> with</c><00:16:10.320><c> heap</c><00:16:10.639><c> cue.heat</c><00:16:11.440><c> push</c>

00:16:11.910 --> 00:16:11.920 align:start position:0%
we can do that with heap cue.heat push
 

00:16:11.920 --> 00:16:13.829 align:start position:0%
we can do that with heap cue.heat push
we're<00:16:12.079><c> going</c><00:16:12.160><c> to</c><00:16:12.320><c> take</c><00:16:12.560><c> it</c><00:16:12.880><c> add</c><00:16:13.120><c> it</c><00:16:13.199><c> to</c><00:16:13.360><c> our</c><00:16:13.519><c> max</c>

00:16:13.829 --> 00:16:13.839 align:start position:0%
we're going to take it add it to our max
 

00:16:13.839 --> 00:16:16.389 align:start position:0%
we're going to take it add it to our max
heap<00:16:14.399><c> so</c><00:16:14.639><c> let's</c><00:16:14.880><c> just</c><00:16:15.199><c> copy</c><00:16:15.519><c> and</c><00:16:15.600><c> paste</c><00:16:15.920><c> this</c>

00:16:16.389 --> 00:16:16.399 align:start position:0%
heap so let's just copy and paste this
 

00:16:16.399 --> 00:16:19.430 align:start position:0%
heap so let's just copy and paste this
and<00:16:17.199><c> uh</c><00:16:17.680><c> move</c><00:16:17.920><c> it</c><00:16:18.079><c> up</c><00:16:18.240><c> above</c><00:16:18.880><c> so</c><00:16:19.120><c> the</c><00:16:19.199><c> only</c>

00:16:19.430 --> 00:16:19.440 align:start position:0%
and uh move it up above so the only
 

00:16:19.440 --> 00:16:20.870 align:start position:0%
and uh move it up above so the only
thing<00:16:19.600><c> left</c><00:16:19.759><c> for</c><00:16:19.920><c> us</c><00:16:20.079><c> to</c><00:16:20.160><c> do</c><00:16:20.320><c> is</c><00:16:20.480><c> once</c>

00:16:20.870 --> 00:16:20.880 align:start position:0%
thing left for us to do is once
 

00:16:20.880 --> 00:16:22.389 align:start position:0%
thing left for us to do is once
everything<00:16:21.199><c> has</c><00:16:21.360><c> been</c><00:16:21.519><c> processed</c><00:16:22.000><c> for</c><00:16:22.240><c> our</c>

00:16:22.389 --> 00:16:22.399 align:start position:0%
everything has been processed for our
 

00:16:22.399 --> 00:16:24.310 align:start position:0%
everything has been processed for our
max<00:16:22.639><c> heap</c><00:16:22.880><c> and</c><00:16:23.040><c> our</c><00:16:23.199><c> queue</c><00:16:23.680><c> we</c><00:16:23.839><c> can</c><00:16:24.000><c> just</c><00:16:24.160><c> go</c>

00:16:24.310 --> 00:16:24.320 align:start position:0%
max heap and our queue we can just go
 

00:16:24.320 --> 00:16:26.629 align:start position:0%
max heap and our queue we can just go
ahead<00:16:24.560><c> and</c><00:16:24.720><c> return</c><00:16:25.600><c> the</c><00:16:25.839><c> time</c><00:16:26.160><c> that</c><00:16:26.320><c> it</c><00:16:26.399><c> took</c>

00:16:26.629 --> 00:16:26.639 align:start position:0%
ahead and return the time that it took
 

00:16:26.639 --> 00:16:28.949 align:start position:0%
ahead and return the time that it took
us<00:16:26.880><c> to</c><00:16:27.040><c> do</c><00:16:27.279><c> all</c><00:16:27.519><c> that</c><00:16:27.759><c> work</c><00:16:28.240><c> let's</c><00:16:28.480><c> just</c><00:16:28.720><c> clean</c>

00:16:28.949 --> 00:16:28.959 align:start position:0%
us to do all that work let's just clean
 

00:16:28.959 --> 00:16:30.550 align:start position:0%
us to do all that work let's just clean
this<00:16:29.120><c> up</c><00:16:29.279><c> a</c><00:16:29.360><c> little</c><00:16:29.519><c> bit</c><00:16:29.759><c> that's</c><00:16:30.000><c> the</c><00:16:30.160><c> entire</c>

00:16:30.550 --> 00:16:30.560 align:start position:0%
this up a little bit that's the entire
 

00:16:30.560 --> 00:16:32.389 align:start position:0%
this up a little bit that's the entire
code<00:16:30.800><c> so</c><00:16:31.040><c> now</c><00:16:31.279><c> let's</c><00:16:31.519><c> just</c><00:16:31.759><c> run</c><00:16:32.000><c> it</c><00:16:32.160><c> to</c><00:16:32.240><c> make</c>

00:16:32.389 --> 00:16:32.399 align:start position:0%
code so now let's just run it to make
 

00:16:32.399 --> 00:16:34.310 align:start position:0%
code so now let's just run it to make
sure<00:16:32.560><c> that</c><00:16:32.720><c> it</c><00:16:32.880><c> actually</c><00:16:33.279><c> works</c><00:16:33.839><c> and</c><00:16:34.079><c> as</c><00:16:34.240><c> you</c>

00:16:34.310 --> 00:16:34.320 align:start position:0%
sure that it actually works and as you
 

00:16:34.320 --> 00:16:36.150 align:start position:0%
sure that it actually works and as you
can<00:16:34.399><c> see</c><00:16:34.560><c> on</c><00:16:34.639><c> the</c><00:16:34.800><c> left</c><00:16:35.120><c> yes</c><00:16:35.360><c> it</c><00:16:35.440><c> does</c><00:16:35.680><c> work</c><00:16:36.000><c> and</c>

00:16:36.150 --> 00:16:36.160 align:start position:0%
can see on the left yes it does work and
 

00:16:36.160 --> 00:16:37.670 align:start position:0%
can see on the left yes it does work and
it's<00:16:36.320><c> pretty</c><00:16:36.639><c> efficient</c><00:16:37.199><c> i</c><00:16:37.279><c> do</c><00:16:37.440><c> want</c><00:16:37.600><c> to</c>

00:16:37.670 --> 00:16:37.680 align:start position:0%
it's pretty efficient i do want to
 

00:16:37.680 --> 00:16:39.030 align:start position:0%
it's pretty efficient i do want to
mention<00:16:37.920><c> there</c><00:16:38.160><c> actually</c><00:16:38.480><c> is</c><00:16:38.639><c> a</c><00:16:38.720><c> different</c>

00:16:39.030 --> 00:16:39.040 align:start position:0%
mention there actually is a different
 

00:16:39.040 --> 00:16:40.550 align:start position:0%
mention there actually is a different
solution<00:16:39.440><c> for</c><00:16:39.600><c> this</c><00:16:40.000><c> that's</c><00:16:40.240><c> actually</c><00:16:40.560><c> a</c>

00:16:40.550 --> 00:16:40.560 align:start position:0%
solution for this that's actually a
 

00:16:40.560 --> 00:16:42.470 align:start position:0%
solution for this that's actually a
little<00:16:40.720><c> bit</c><00:16:40.880><c> more</c><00:16:41.040><c> of</c><00:16:41.199><c> a</c><00:16:41.360><c> true</c><00:16:41.839><c> linear</c><00:16:42.240><c> time</c>

00:16:42.470 --> 00:16:42.480 align:start position:0%
little bit more of a true linear time
 

00:16:42.480 --> 00:16:44.230 align:start position:0%
little bit more of a true linear time
solution<00:16:43.040><c> but</c><00:16:43.199><c> i</c><00:16:43.279><c> think</c><00:16:43.440><c> it's</c><00:16:43.600><c> a</c><00:16:43.680><c> lot</c><00:16:43.920><c> less</c>

00:16:44.230 --> 00:16:44.240 align:start position:0%
solution but i think it's a lot less
 

00:16:44.240 --> 00:16:46.069 align:start position:0%
solution but i think it's a lot less
intuitive<00:16:44.720><c> and</c><00:16:44.880><c> i</c><00:16:44.959><c> think</c><00:16:45.120><c> this</c><00:16:45.519><c> solution</c><00:16:46.000><c> is</c>

00:16:46.069 --> 00:16:46.079 align:start position:0%
intuitive and i think this solution is
 

00:16:46.079 --> 00:16:48.710 align:start position:0%
intuitive and i think this solution is
perfectly<00:16:46.639><c> fine</c><00:16:47.279><c> for</c><00:16:47.519><c> interviews</c><00:16:48.399><c> and</c>

00:16:48.710 --> 00:16:48.720 align:start position:0%
perfectly fine for interviews and
 

00:16:48.720 --> 00:16:50.150 align:start position:0%
perfectly fine for interviews and
because<00:16:49.040><c> it's</c><00:16:49.279><c> more</c><00:16:49.440><c> of</c><00:16:49.519><c> an</c><00:16:49.680><c> intuitive</c>

00:16:50.150 --> 00:16:50.160 align:start position:0%
because it's more of an intuitive
 

00:16:50.160 --> 00:16:51.749 align:start position:0%
because it's more of an intuitive
solution<00:16:50.639><c> i</c><00:16:50.720><c> think</c><00:16:50.880><c> this</c><00:16:51.120><c> is</c>

00:16:51.749 --> 00:16:51.759 align:start position:0%
solution i think this is
 

00:16:51.759 --> 00:16:53.350 align:start position:0%
solution i think this is
more<00:16:51.920><c> or</c><00:16:52.079><c> less</c><00:16:52.399><c> what</c><00:16:52.639><c> interviewers</c><00:16:53.199><c> would</c>

00:16:53.350 --> 00:16:53.360 align:start position:0%
more or less what interviewers would
 

00:16:53.360 --> 00:16:55.189 align:start position:0%
more or less what interviewers would
expect<00:16:53.759><c> you</c><00:16:53.920><c> to</c><00:16:54.000><c> come</c><00:16:54.240><c> up</c><00:16:54.399><c> with</c><00:16:54.720><c> so</c><00:16:54.880><c> i</c><00:16:55.040><c> really</c>

00:16:55.189 --> 00:16:55.199 align:start position:0%
expect you to come up with so i really
 

00:16:55.199 --> 00:16:57.030 align:start position:0%
expect you to come up with so i really
hope<00:16:55.360><c> that</c><00:16:55.519><c> this</c><00:16:55.680><c> was</c><00:16:55.839><c> helpful</c><00:16:56.240><c> if</c><00:16:56.399><c> it</c><00:16:56.560><c> was</c>

00:16:57.030 --> 00:16:57.040 align:start position:0%
hope that this was helpful if it was
 

00:16:57.040 --> 00:16:58.550 align:start position:0%
hope that this was helpful if it was
please<00:16:57.360><c> like</c><00:16:57.600><c> and</c><00:16:57.680><c> subscribe</c><00:16:58.160><c> it</c><00:16:58.320><c> really</c>

00:16:58.550 --> 00:16:58.560 align:start position:0%
please like and subscribe it really
 

00:16:58.560 --> 00:17:00.310 align:start position:0%
please like and subscribe it really
supports<00:16:58.959><c> the</c><00:16:59.040><c> channel</c><00:16:59.440><c> a</c><00:16:59.600><c> lot</c><00:16:59.839><c> consider</c>

00:17:00.310 --> 00:17:00.320 align:start position:0%
supports the channel a lot consider
 

00:17:00.320 --> 00:17:01.590 align:start position:0%
supports the channel a lot consider
checking<00:17:00.560><c> out</c><00:17:00.639><c> my</c><00:17:00.800><c> patreon</c><00:17:01.279><c> where</c><00:17:01.440><c> you</c><00:17:01.519><c> can</c>

00:17:01.590 --> 00:17:01.600 align:start position:0%
checking out my patreon where you can
 

00:17:01.600 --> 00:17:03.110 align:start position:0%
checking out my patreon where you can
further<00:17:01.920><c> support</c><00:17:02.240><c> the</c><00:17:02.399><c> channel</c><00:17:02.880><c> and</c>

00:17:03.110 --> 00:17:03.120 align:start position:0%
further support the channel and
 

00:17:03.120 --> 00:17:04.949 align:start position:0%
further support the channel and
hopefully<00:17:03.600><c> i'll</c><00:17:03.839><c> see</c><00:17:04.000><c> you</c><00:17:04.160><c> pretty</c><00:17:04.400><c> soon</c>

00:17:04.949 --> 00:17:04.959 align:start position:0%
hopefully i'll see you pretty soon
 

00:17:04.959 --> 00:17:08.000 align:start position:0%
hopefully i'll see you pretty soon
thanks<00:17:05.199><c> for</c><00:17:05.360><c> watching</c>

