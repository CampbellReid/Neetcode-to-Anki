WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:01.829 align:start position:0%
 
everyone<00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c><00:00:01.599><c> write</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
everyone welcome back and let's write
 

00:00:01.839 --> 00:00:03.669 align:start position:0%
everyone welcome back and let's write
some<00:00:02.000><c> more</c><00:00:02.240><c> neat</c><00:00:02.480><c> code</c><00:00:02.720><c> today</c><00:00:03.040><c> so</c><00:00:03.199><c> today</c><00:00:03.439><c> let's</c>

00:00:03.669 --> 00:00:03.679 align:start position:0%
some more neat code today so today let's
 

00:00:03.679 --> 00:00:06.309 align:start position:0%
some more neat code today so today let's
solve<00:00:04.000><c> the</c><00:00:04.160><c> problem</c><00:00:04.640><c> k</c><00:00:04.960><c> the</c><00:00:05.120><c> largest</c><00:00:05.759><c> element</c>

00:00:06.309 --> 00:00:06.319 align:start position:0%
solve the problem k the largest element
 

00:00:06.319 --> 00:00:09.190 align:start position:0%
solve the problem k the largest element
in<00:00:06.640><c> a</c><00:00:06.960><c> stream</c><00:00:07.839><c> and</c><00:00:08.080><c> it's</c><00:00:08.240><c> marked</c><00:00:08.559><c> as</c><00:00:08.720><c> an</c><00:00:08.880><c> easy</c>

00:00:09.190 --> 00:00:09.200 align:start position:0%
in a stream and it's marked as an easy
 

00:00:09.200 --> 00:00:11.350 align:start position:0%
in a stream and it's marked as an easy
question<00:00:09.679><c> but</c><00:00:09.920><c> i</c><00:00:10.080><c> definitely</c><00:00:10.719><c> feel</c><00:00:11.040><c> that</c><00:00:11.200><c> it's</c>

00:00:11.350 --> 00:00:11.360 align:start position:0%
question but i definitely feel that it's
 

00:00:11.360 --> 00:00:13.669 align:start position:0%
question but i definitely feel that it's
more<00:00:11.599><c> of</c><00:00:11.759><c> a</c><00:00:11.840><c> medium</c><00:00:12.719><c> and</c><00:00:12.960><c> maybe</c><00:00:13.200><c> that's</c><00:00:13.440><c> why</c>

00:00:13.669 --> 00:00:13.679 align:start position:0%
more of a medium and maybe that's why
 

00:00:13.679 --> 00:00:15.829 align:start position:0%
more of a medium and maybe that's why
many<00:00:13.920><c> people</c><00:00:14.160><c> disliked</c><00:00:14.719><c> it</c><00:00:15.040><c> but</c><00:00:15.200><c> we</c><00:00:15.360><c> are</c><00:00:15.519><c> told</c>

00:00:15.829 --> 00:00:15.839 align:start position:0%
many people disliked it but we are told
 

00:00:15.839 --> 00:00:18.870 align:start position:0%
many people disliked it but we are told
to<00:00:16.000><c> design</c><00:00:16.560><c> a</c><00:00:16.880><c> class</c><00:00:17.600><c> to</c><00:00:17.760><c> find</c><00:00:18.080><c> the</c><00:00:18.320><c> kth</c>

00:00:18.870 --> 00:00:18.880 align:start position:0%
to design a class to find the kth
 

00:00:18.880 --> 00:00:22.630 align:start position:0%
to design a class to find the kth
largest<00:00:19.520><c> element</c><00:00:20.080><c> in</c><00:00:20.400><c> a</c><00:00:20.800><c> stream</c><00:00:21.680><c> of</c><00:00:21.920><c> numbers</c>

00:00:22.630 --> 00:00:22.640 align:start position:0%
largest element in a stream of numbers
 

00:00:22.640 --> 00:00:25.109 align:start position:0%
largest element in a stream of numbers
so<00:00:22.880><c> stream</c><00:00:23.519><c> basically</c><00:00:24.160><c> means</c><00:00:24.560><c> that</c><00:00:24.800><c> we</c><00:00:24.960><c> could</c>

00:00:25.109 --> 00:00:25.119 align:start position:0%
so stream basically means that we could
 

00:00:25.119 --> 00:00:28.950 align:start position:0%
so stream basically means that we could
continue<00:00:25.840><c> to</c><00:00:26.160><c> add</c><00:00:26.640><c> numbers</c><00:00:27.519><c> to</c><00:00:28.240><c> the</c><00:00:28.560><c> list</c><00:00:28.800><c> of</c>

00:00:28.950 --> 00:00:28.960 align:start position:0%
continue to add numbers to the list of
 

00:00:28.960 --> 00:00:31.189 align:start position:0%
continue to add numbers to the list of
numbers<00:00:29.840><c> after</c><00:00:30.160><c> we</c><00:00:30.240><c> do</c><00:00:30.400><c> that</c><00:00:30.560><c> we</c><00:00:30.720><c> still</c><00:00:31.039><c> have</c>

00:00:31.189 --> 00:00:31.199 align:start position:0%
numbers after we do that we still have
 

00:00:31.199 --> 00:00:33.430 align:start position:0%
numbers after we do that we still have
to<00:00:31.359><c> find</c><00:00:31.760><c> the</c><00:00:31.920><c> kth</c><00:00:32.239><c> largest</c><00:00:32.719><c> element</c><00:00:33.120><c> now</c><00:00:33.280><c> that</c>

00:00:33.430 --> 00:00:33.440 align:start position:0%
to find the kth largest element now that
 

00:00:33.440 --> 00:00:35.750 align:start position:0%
to find the kth largest element now that
we've<00:00:33.680><c> added</c><00:00:34.000><c> more</c><00:00:34.239><c> numbers</c><00:00:34.719><c> to</c><00:00:34.960><c> it</c><00:00:35.360><c> and</c><00:00:35.520><c> they</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
we've added more numbers to it and they
 

00:00:35.760 --> 00:00:38.950 align:start position:0%
we've added more numbers to it and they
say<00:00:36.079><c> that</c><00:00:36.640><c> the</c><00:00:36.800><c> kth</c><00:00:37.120><c> largest</c><00:00:37.600><c> element</c><00:00:38.399><c> is</c><00:00:38.640><c> the</c>

00:00:38.950 --> 00:00:38.960 align:start position:0%
say that the kth largest element is the
 

00:00:38.960 --> 00:00:41.190 align:start position:0%
say that the kth largest element is the
case<00:00:39.200><c> largest</c><00:00:39.680><c> in</c><00:00:39.760><c> the</c><00:00:39.920><c> sorted</c><00:00:40.399><c> order</c><00:00:40.879><c> not</c>

00:00:41.190 --> 00:00:41.200 align:start position:0%
case largest in the sorted order not
 

00:00:41.200 --> 00:00:43.270 align:start position:0%
case largest in the sorted order not
distinct<00:00:42.079><c> and</c><00:00:42.160><c> what</c><00:00:42.320><c> they</c><00:00:42.480><c> mean</c><00:00:42.719><c> by</c><00:00:42.879><c> that</c><00:00:43.120><c> is</c>

00:00:43.270 --> 00:00:43.280 align:start position:0%
distinct and what they mean by that is
 

00:00:43.280 --> 00:00:45.510 align:start position:0%
distinct and what they mean by that is
basically<00:00:43.920><c> that</c><00:00:44.160><c> if</c><00:00:44.320><c> we</c><00:00:44.480><c> had</c><00:00:44.800><c> you</c><00:00:44.960><c> know</c><00:00:45.120><c> this</c>

00:00:45.510 --> 00:00:45.520 align:start position:0%
basically that if we had you know this
 

00:00:45.520 --> 00:00:47.990 align:start position:0%
basically that if we had you know this
uh<00:00:46.000><c> list</c><00:00:46.239><c> of</c><00:00:46.399><c> numbers</c><00:00:46.800><c> and</c><00:00:47.039><c> k</c><00:00:47.360><c> equals</c><00:00:47.760><c> three</c>

00:00:47.990 --> 00:00:48.000 align:start position:0%
uh list of numbers and k equals three
 

00:00:48.000 --> 00:00:50.869 align:start position:0%
uh list of numbers and k equals three
meaning<00:00:48.239><c> we</c><00:00:48.399><c> want</c><00:00:48.559><c> the</c><00:00:48.879><c> third</c><00:00:49.520><c> largest</c><00:00:50.320><c> number</c>

00:00:50.869 --> 00:00:50.879 align:start position:0%
meaning we want the third largest number
 

00:00:50.879 --> 00:00:52.790 align:start position:0%
meaning we want the third largest number
if<00:00:51.039><c> we</c><00:00:51.199><c> look</c><00:00:51.440><c> at</c><00:00:51.520><c> the</c><00:00:51.680><c> distinct</c><00:00:52.239><c> values</c><00:00:52.640><c> we'd</c>

00:00:52.790 --> 00:00:52.800 align:start position:0%
if we look at the distinct values we'd
 

00:00:52.800 --> 00:00:55.350 align:start position:0%
if we look at the distinct values we'd
say<00:00:52.960><c> okay</c><00:00:53.360><c> three</c><00:00:53.680><c> is</c><00:00:53.840><c> the</c><00:00:53.920><c> largest</c><00:00:54.800><c> two</c><00:00:55.120><c> is</c><00:00:55.199><c> the</c>

00:00:55.350 --> 00:00:55.360 align:start position:0%
say okay three is the largest two is the
 

00:00:55.360 --> 00:00:57.430 align:start position:0%
say okay three is the largest two is the
second<00:00:55.680><c> largest</c><00:00:56.160><c> and</c><00:00:56.320><c> one</c><00:00:56.719><c> is</c><00:00:56.879><c> the</c><00:00:57.039><c> third</c>

00:00:57.430 --> 00:00:57.440 align:start position:0%
second largest and one is the third
 

00:00:57.440 --> 00:00:59.430 align:start position:0%
second largest and one is the third
largest<00:00:58.079><c> but</c><00:00:58.320><c> they</c><00:00:58.559><c> say</c><00:00:58.719><c> we</c><00:00:58.879><c> want</c><00:00:59.039><c> to</c><00:00:59.120><c> return</c>

00:00:59.430 --> 00:00:59.440 align:start position:0%
largest but they say we want to return
 

00:00:59.440 --> 00:01:02.310 align:start position:0%
largest but they say we want to return
the<00:00:59.520><c> case</c><00:00:59.840><c> largest</c><00:01:00.320><c> in</c><00:01:00.480><c> sorted</c><00:01:00.879><c> order</c><00:01:01.600><c> meaning</c>

00:01:02.310 --> 00:01:02.320 align:start position:0%
the case largest in sorted order meaning
 

00:01:02.320 --> 00:01:03.830 align:start position:0%
the case largest in sorted order meaning
this<00:01:02.480><c> is</c><00:01:02.640><c> the</c><00:01:02.719><c> first</c><00:01:03.039><c> largest</c><00:01:03.520><c> this</c><00:01:03.680><c> is</c><00:01:03.760><c> the</c>

00:01:03.830 --> 00:01:03.840 align:start position:0%
this is the first largest this is the
 

00:01:03.840 --> 00:01:06.070 align:start position:0%
this is the first largest this is the
second<00:01:04.080><c> largest</c><00:01:04.559><c> and</c><00:01:04.720><c> this</c><00:01:05.040><c> is</c><00:01:05.199><c> the</c><00:01:05.519><c> third</c>

00:01:06.070 --> 00:01:06.080 align:start position:0%
second largest and this is the third
 

00:01:06.080 --> 00:01:08.390 align:start position:0%
second largest and this is the third
largest<00:01:06.479><c> so</c><00:01:06.640><c> we</c><00:01:06.880><c> return</c><00:01:07.439><c> two</c><00:01:07.920><c> we're</c><00:01:08.080><c> not</c><00:01:08.240><c> just</c>

00:01:08.390 --> 00:01:08.400 align:start position:0%
largest so we return two we're not just
 

00:01:08.400 --> 00:01:09.990 align:start position:0%
largest so we return two we're not just
looking<00:01:08.720><c> at</c><00:01:08.799><c> distinct</c><00:01:09.280><c> elements</c><00:01:09.680><c> if</c><00:01:09.760><c> we</c><00:01:09.840><c> have</c>

00:01:09.990 --> 00:01:10.000 align:start position:0%
looking at distinct elements if we have
 

00:01:10.000 --> 00:01:12.710 align:start position:0%
looking at distinct elements if we have
multiple<00:01:10.479><c> copies</c><00:01:11.040><c> we</c><00:01:11.200><c> include</c><00:01:11.600><c> those</c><00:01:11.920><c> as</c><00:01:12.000><c> well</c>

00:01:12.710 --> 00:01:12.720 align:start position:0%
multiple copies we include those as well
 

00:01:12.720 --> 00:01:13.910 align:start position:0%
multiple copies we include those as well
the<00:01:12.880><c> good</c><00:01:13.040><c> thing</c><00:01:13.200><c> is</c><00:01:13.360><c> we</c><00:01:13.520><c> only</c><00:01:13.680><c> need</c><00:01:13.840><c> to</c>

00:01:13.910 --> 00:01:13.920 align:start position:0%
the good thing is we only need to
 

00:01:13.920 --> 00:01:15.910 align:start position:0%
the good thing is we only need to
implement<00:01:14.400><c> two</c><00:01:14.640><c> functions</c><00:01:15.200><c> one</c><00:01:15.520><c> is</c><00:01:15.759><c> the</c>

00:01:15.910 --> 00:01:15.920 align:start position:0%
implement two functions one is the
 

00:01:15.920 --> 00:01:18.310 align:start position:0%
implement two functions one is the
constructor<00:01:16.640><c> where</c><00:01:16.799><c> we'll</c><00:01:17.040><c> be</c><00:01:17.360><c> given</c><00:01:18.159><c> the</c>

00:01:18.310 --> 00:01:18.320 align:start position:0%
constructor where we'll be given the
 

00:01:18.320 --> 00:01:21.749 align:start position:0%
constructor where we'll be given the
parameter<00:01:19.040><c> k</c><00:01:19.759><c> that</c><00:01:20.000><c> we</c><00:01:20.159><c> can</c><00:01:20.400><c> store</c><00:01:21.119><c> and</c><00:01:21.520><c> an</c>

00:01:21.749 --> 00:01:21.759 align:start position:0%
parameter k that we can store and an
 

00:01:21.759 --> 00:01:25.510 align:start position:0%
parameter k that we can store and an
initial<00:01:22.640><c> list</c><00:01:23.119><c> of</c><00:01:23.439><c> numbers</c><00:01:24.320><c> and</c><00:01:24.720><c> this</c><00:01:25.040><c> list</c><00:01:25.360><c> of</c>

00:01:25.510 --> 00:01:25.520 align:start position:0%
initial list of numbers and this list of
 

00:01:25.520 --> 00:01:28.469 align:start position:0%
initial list of numbers and this list of
numbers<00:01:25.920><c> it</c><00:01:26.159><c> could</c><00:01:26.560><c> be</c><00:01:27.200><c> at</c><00:01:27.360><c> least</c><00:01:27.759><c> k</c><00:01:28.080><c> elements</c>

00:01:28.469 --> 00:01:28.479 align:start position:0%
numbers it could be at least k elements
 

00:01:28.479 --> 00:01:30.870 align:start position:0%
numbers it could be at least k elements
or<00:01:28.640><c> it</c><00:01:28.720><c> could</c><00:01:28.880><c> be</c><00:01:29.200><c> less</c><00:01:29.520><c> than</c><00:01:29.759><c> k</c><00:01:30.079><c> elements</c><00:01:30.720><c> or</c>

00:01:30.870 --> 00:01:30.880 align:start position:0%
or it could be less than k elements or
 

00:01:30.880 --> 00:01:32.630 align:start position:0%
or it could be less than k elements or
it<00:01:30.960><c> could</c><00:01:31.119><c> be</c><00:01:31.439><c> more</c><00:01:31.600><c> than</c><00:01:31.840><c> k</c><00:01:32.079><c> elements</c><00:01:32.479><c> so</c>

00:01:32.630 --> 00:01:32.640 align:start position:0%
it could be more than k elements so
 

00:01:32.640 --> 00:01:33.510 align:start position:0%
it could be more than k elements so
that's<00:01:32.799><c> something</c><00:01:33.040><c> we're</c><00:01:33.200><c> gonna</c><00:01:33.360><c> have</c><00:01:33.439><c> to</c>

00:01:33.510 --> 00:01:33.520 align:start position:0%
that's something we're gonna have to
 

00:01:33.520 --> 00:01:35.429 align:start position:0%
that's something we're gonna have to
take<00:01:33.759><c> care</c><00:01:34.079><c> of</c><00:01:34.240><c> when</c><00:01:34.400><c> we</c><00:01:34.560><c> do</c><00:01:34.799><c> write</c><00:01:35.040><c> out</c><00:01:35.200><c> the</c>

00:01:35.429 --> 00:01:35.439 align:start position:0%
take care of when we do write out the
 

00:01:35.439 --> 00:01:38.550 align:start position:0%
take care of when we do write out the
code<00:01:36.000><c> uh</c><00:01:36.240><c> but</c><00:01:36.400><c> the</c><00:01:36.560><c> second</c><00:01:36.960><c> function</c><00:01:37.600><c> is</c><00:01:38.159><c> the</c>

00:01:38.550 --> 00:01:38.560 align:start position:0%
code uh but the second function is the
 

00:01:38.560 --> 00:01:41.350 align:start position:0%
code uh but the second function is the
add<00:01:38.960><c> function</c><00:01:39.360><c> where</c><00:01:39.680><c> we</c><00:01:39.840><c> can</c><00:01:40.079><c> actually</c><00:01:40.640><c> add</c><00:01:41.040><c> a</c>

00:01:41.350 --> 00:01:41.360 align:start position:0%
add function where we can actually add a
 

00:01:41.360 --> 00:01:44.230 align:start position:0%
add function where we can actually add a
number<00:01:41.759><c> to</c><00:01:41.920><c> the</c><00:01:42.079><c> stream</c><00:01:42.640><c> of</c><00:01:43.040><c> data</c><00:01:43.840><c> and</c><00:01:44.000><c> this</c>

00:01:44.230 --> 00:01:44.240 align:start position:0%
number to the stream of data and this
 

00:01:44.240 --> 00:01:47.670 align:start position:0%
number to the stream of data and this
function<00:01:44.560><c> is</c><00:01:44.799><c> also</c><00:01:45.360><c> going</c><00:01:45.600><c> to</c><00:01:45.840><c> return</c><00:01:46.720><c> the</c><00:01:47.119><c> new</c>

00:01:47.670 --> 00:01:47.680 align:start position:0%
function is also going to return the new
 

00:01:47.680 --> 00:01:50.789 align:start position:0%
function is also going to return the new
kth<00:01:48.240><c> largest</c><00:01:48.880><c> element</c><00:01:49.439><c> every</c><00:01:49.920><c> time</c><00:01:50.240><c> we</c><00:01:50.560><c> call</c>

00:01:50.789 --> 00:01:50.799 align:start position:0%
kth largest element every time we call
 

00:01:50.799 --> 00:01:52.149 align:start position:0%
kth largest element every time we call
it<00:01:51.119><c> so</c>

00:01:52.149 --> 00:01:52.159 align:start position:0%
it so
 

00:01:52.159 --> 00:01:54.310 align:start position:0%
it so
they<00:01:52.320><c> do</c><00:01:52.560><c> tell</c><00:01:52.799><c> us</c><00:01:53.040><c> that</c><00:01:53.439><c> whenever</c><00:01:53.840><c> we</c><00:01:54.079><c> call</c>

00:01:54.310 --> 00:01:54.320 align:start position:0%
they do tell us that whenever we call
 

00:01:54.320 --> 00:01:57.429 align:start position:0%
they do tell us that whenever we call
this<00:01:54.479><c> function</c><00:01:54.880><c> we</c><00:01:55.280><c> are</c><00:01:55.680><c> guaranteed</c><00:01:56.479><c> to</c><00:01:56.799><c> have</c>

00:01:57.429 --> 00:01:57.439 align:start position:0%
this function we are guaranteed to have
 

00:01:57.439 --> 00:02:01.030 align:start position:0%
this function we are guaranteed to have
at<00:01:57.680><c> least</c><00:01:58.320><c> k</c><00:01:58.799><c> elements</c><00:01:59.680><c> in</c><00:02:00.000><c> the</c><00:02:00.240><c> stream</c><00:02:00.799><c> of</c>

00:02:01.030 --> 00:02:01.040 align:start position:0%
at least k elements in the stream of
 

00:02:01.040 --> 00:02:03.190 align:start position:0%
at least k elements in the stream of
data<00:02:01.680><c> so</c><00:02:01.920><c> that's</c><00:02:02.240><c> good</c><00:02:02.479><c> even</c><00:02:02.640><c> though</c><00:02:02.799><c> we</c><00:02:02.960><c> might</c>

00:02:03.190 --> 00:02:03.200 align:start position:0%
data so that's good even though we might
 

00:02:03.200 --> 00:02:05.350 align:start position:0%
data so that's good even though we might
not<00:02:03.439><c> have</c><00:02:03.680><c> k</c><00:02:04.000><c> elements</c><00:02:04.320><c> when</c><00:02:04.479><c> we</c><00:02:04.640><c> initialize</c>

00:02:05.350 --> 00:02:05.360 align:start position:0%
not have k elements when we initialize
 

00:02:05.360 --> 00:02:07.830 align:start position:0%
not have k elements when we initialize
it<00:02:05.520><c> we</c><00:02:05.680><c> will</c><00:02:05.920><c> have</c><00:02:06.159><c> k</c><00:02:06.479><c> elements</c><00:02:06.799><c> when</c><00:02:07.040><c> we</c><00:02:07.600><c> call</c>

00:02:07.830 --> 00:02:07.840 align:start position:0%
it we will have k elements when we call
 

00:02:07.840 --> 00:02:10.469 align:start position:0%
it we will have k elements when we call
the<00:02:08.080><c> add</c><00:02:08.479><c> function</c><00:02:09.360><c> so</c><00:02:09.520><c> now</c><00:02:09.679><c> the</c><00:02:09.920><c> question</c><00:02:10.319><c> is</c>

00:02:10.469 --> 00:02:10.479 align:start position:0%
the add function so now the question is
 

00:02:10.479 --> 00:02:13.510 align:start position:0%
the add function so now the question is
how<00:02:10.959><c> can</c><00:02:11.280><c> we</c><00:02:11.599><c> efficiently</c><00:02:12.560><c> solve</c><00:02:13.120><c> this</c>

00:02:13.510 --> 00:02:13.520 align:start position:0%
how can we efficiently solve this
 

00:02:13.520 --> 00:02:16.150 align:start position:0%
how can we efficiently solve this
problem<00:02:14.480><c> well</c><00:02:14.720><c> suppose</c><00:02:15.120><c> we</c><00:02:15.280><c> were</c><00:02:15.440><c> given</c><00:02:15.760><c> this</c>

00:02:16.150 --> 00:02:16.160 align:start position:0%
problem well suppose we were given this
 

00:02:16.160 --> 00:02:18.229 align:start position:0%
problem well suppose we were given this
input<00:02:16.879><c> right</c><00:02:17.120><c> in</c><00:02:17.280><c> our</c><00:02:17.360><c> constructor</c><00:02:18.000><c> this</c>

00:02:18.229 --> 00:02:18.239 align:start position:0%
input right in our constructor this
 

00:02:18.239 --> 00:02:21.190 align:start position:0%
input right in our constructor this
array<00:02:18.720><c> and</c><00:02:18.879><c> k</c><00:02:19.200><c> equals</c><00:02:19.599><c> three</c><00:02:20.239><c> of</c><00:02:20.400><c> course</c><00:02:21.040><c> the</c>

00:02:21.190 --> 00:02:21.200 align:start position:0%
array and k equals three of course the
 

00:02:21.200 --> 00:02:24.630 align:start position:0%
array and k equals three of course the
intuitive<00:02:21.840><c> approach</c><00:02:22.480><c> is</c><00:02:22.879><c> to</c><00:02:23.280><c> sort</c><00:02:23.760><c> the</c><00:02:24.080><c> input</c>

00:02:24.630 --> 00:02:24.640 align:start position:0%
intuitive approach is to sort the input
 

00:02:24.640 --> 00:02:28.390 align:start position:0%
intuitive approach is to sort the input
so<00:02:24.959><c> that</c><00:02:25.440><c> we</c><00:02:25.680><c> can</c><00:02:26.239><c> uh</c><00:02:26.640><c> you</c><00:02:26.720><c> know</c><00:02:26.959><c> look</c><00:02:27.280><c> through</c>

00:02:28.390 --> 00:02:28.400 align:start position:0%
so that we can uh you know look through
 

00:02:28.400 --> 00:02:30.790 align:start position:0%
so that we can uh you know look through
and<00:02:28.800><c> find</c><00:02:29.120><c> the</c><00:02:29.280><c> kth</c><00:02:29.599><c> largest</c><00:02:30.080><c> element</c><00:02:30.720><c> a</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
and find the kth largest element a
 

00:02:30.800 --> 00:02:33.030 align:start position:0%
and find the kth largest element a
little<00:02:31.040><c> bit</c><00:02:31.280><c> faster</c><00:02:32.080><c> right</c><00:02:32.319><c> in</c><00:02:32.480><c> the</c><00:02:32.640><c> original</c>

00:02:33.030 --> 00:02:33.040 align:start position:0%
little bit faster right in the original
 

00:02:33.040 --> 00:02:34.790 align:start position:0%
little bit faster right in the original
array<00:02:33.360><c> we</c><00:02:33.519><c> could</c><00:02:33.680><c> just</c><00:02:33.920><c> scan</c><00:02:34.319><c> through</c><00:02:34.480><c> the</c>

00:02:34.790 --> 00:02:34.800 align:start position:0%
array we could just scan through the
 

00:02:34.800 --> 00:02:37.190 align:start position:0%
array we could just scan through the
entire<00:02:35.440><c> input</c><00:02:35.840><c> and</c><00:02:35.920><c> that'd</c><00:02:36.160><c> be</c><00:02:36.480><c> o</c><00:02:36.640><c> of</c><00:02:36.879><c> n</c><00:02:37.040><c> to</c>

00:02:37.190 --> 00:02:37.200 align:start position:0%
entire input and that'd be o of n to
 

00:02:37.200 --> 00:02:39.509 align:start position:0%
entire input and that'd be o of n to
find<00:02:37.360><c> the</c><00:02:37.519><c> kth</c><00:02:37.840><c> largest</c><00:02:38.560><c> but</c><00:02:38.800><c> when</c><00:02:38.959><c> the</c><00:02:39.120><c> array</c>

00:02:39.509 --> 00:02:39.519 align:start position:0%
find the kth largest but when the array
 

00:02:39.519 --> 00:02:41.509 align:start position:0%
find the kth largest but when the array
is<00:02:39.680><c> sorted</c><00:02:40.160><c> though</c><00:02:40.640><c> we</c><00:02:40.800><c> can</c><00:02:40.959><c> of</c><00:02:41.040><c> course</c><00:02:41.280><c> use</c>

00:02:41.509 --> 00:02:41.519 align:start position:0%
is sorted though we can of course use
 

00:02:41.519 --> 00:02:44.869 align:start position:0%
is sorted though we can of course use
binary<00:02:42.080><c> search</c><00:02:42.480><c> which</c><00:02:42.720><c> will</c><00:02:43.040><c> run</c><00:02:43.519><c> in</c><00:02:44.000><c> log</c><00:02:44.400><c> n</c>

00:02:44.869 --> 00:02:44.879 align:start position:0%
binary search which will run in log n
 

00:02:44.879 --> 00:02:47.670 align:start position:0%
binary search which will run in log n
time<00:02:45.440><c> but</c><00:02:45.680><c> the</c><00:02:45.920><c> problem</c><00:02:46.400><c> is</c><00:02:46.879><c> if</c><00:02:47.040><c> we</c><00:02:47.200><c> want</c><00:02:47.440><c> to</c>

00:02:47.670 --> 00:02:47.680 align:start position:0%
time but the problem is if we want to
 

00:02:47.680 --> 00:02:50.070 align:start position:0%
time but the problem is if we want to
insert<00:02:48.319><c> a</c><00:02:48.480><c> new</c><00:02:48.720><c> value</c><00:02:49.200><c> for</c><00:02:49.360><c> example</c><00:02:49.680><c> we</c><00:02:49.920><c> want</c>

00:02:50.070 --> 00:02:50.080 align:start position:0%
insert a new value for example we want
 

00:02:50.080 --> 00:02:53.990 align:start position:0%
insert a new value for example we want
to<00:02:50.160><c> run</c><00:02:50.640><c> add</c><00:02:51.360><c> on</c><00:02:51.760><c> the</c><00:02:51.920><c> value</c><00:02:52.800><c> three</c><00:02:53.440><c> well</c><00:02:53.760><c> yeah</c>

00:02:53.990 --> 00:02:54.000 align:start position:0%
to run add on the value three well yeah
 

00:02:54.000 --> 00:02:56.150 align:start position:0%
to run add on the value three well yeah
we<00:02:54.160><c> can</c><00:02:54.319><c> run</c><00:02:54.560><c> binary</c><00:02:54.959><c> search</c><00:02:55.440><c> to</c><00:02:55.760><c> add</c><00:02:56.000><c> the</c>

00:02:56.150 --> 00:02:56.160 align:start position:0%
we can run binary search to add the
 

00:02:56.160 --> 00:02:57.750 align:start position:0%
we can run binary search to add the
number<00:02:56.480><c> as</c><00:02:56.640><c> well</c><00:02:56.800><c> we</c><00:02:56.959><c> can</c><00:02:57.120><c> find</c><00:02:57.360><c> where</c><00:02:57.599><c> to</c>

00:02:57.750 --> 00:02:57.760 align:start position:0%
number as well we can find where to
 

00:02:57.760 --> 00:02:59.830 align:start position:0%
number as well we can find where to
insert<00:02:58.239><c> it</c><00:02:58.560><c> but</c><00:02:58.959><c> when</c><00:02:59.120><c> you</c><00:02:59.280><c> insert</c><00:02:59.680><c> in</c><00:02:59.760><c> the</c>

00:02:59.830 --> 00:02:59.840 align:start position:0%
insert it but when you insert in the
 

00:02:59.840 --> 00:03:02.309 align:start position:0%
insert it but when you insert in the
middle<00:03:00.080><c> of</c><00:03:00.159><c> an</c><00:03:00.319><c> array</c><00:03:00.879><c> it's</c><00:03:01.200><c> a</c><00:03:01.599><c> linear</c><00:03:02.000><c> time</c>

00:03:02.309 --> 00:03:02.319 align:start position:0%
middle of an array it's a linear time
 

00:03:02.319 --> 00:03:05.990 align:start position:0%
middle of an array it's a linear time
operation<00:03:03.040><c> big</c><00:03:03.360><c> o</c><00:03:03.599><c> of</c><00:03:03.920><c> n</c><00:03:04.480><c> so</c><00:03:04.640><c> the</c><00:03:04.879><c> question</c><00:03:05.519><c> is</c>

00:03:05.990 --> 00:03:06.000 align:start position:0%
operation big o of n so the question is
 

00:03:06.000 --> 00:03:07.910 align:start position:0%
operation big o of n so the question is
is<00:03:06.239><c> there</c><00:03:06.480><c> a</c><00:03:06.640><c> better</c><00:03:07.040><c> approach</c><00:03:07.519><c> is</c><00:03:07.680><c> there</c><00:03:07.840><c> a</c>

00:03:07.910 --> 00:03:07.920 align:start position:0%
is there a better approach is there a
 

00:03:07.920 --> 00:03:09.990 align:start position:0%
is there a better approach is there a
different<00:03:08.400><c> data</c><00:03:08.640><c> structure</c><00:03:09.120><c> we</c><00:03:09.280><c> can</c><00:03:09.440><c> use</c><00:03:09.760><c> and</c>

00:03:09.990 --> 00:03:10.000 align:start position:0%
different data structure we can use and
 

00:03:10.000 --> 00:03:12.229 align:start position:0%
different data structure we can use and
yes<00:03:10.239><c> there</c><00:03:10.560><c> actually</c><00:03:11.040><c> is</c><00:03:11.599><c> and</c><00:03:11.760><c> the</c><00:03:11.920><c> data</c>

00:03:12.229 --> 00:03:12.239 align:start position:0%
yes there actually is and the data
 

00:03:12.239 --> 00:03:13.670 align:start position:0%
yes there actually is and the data
structure<00:03:12.560><c> that's</c><00:03:12.800><c> going</c><00:03:12.879><c> to</c><00:03:12.959><c> help</c><00:03:13.280><c> us</c><00:03:13.440><c> the</c>

00:03:13.670 --> 00:03:13.680 align:start position:0%
structure that's going to help us the
 

00:03:13.680 --> 00:03:16.390 align:start position:0%
structure that's going to help us the
most<00:03:14.000><c> in</c><00:03:14.159><c> this</c><00:03:14.319><c> case</c><00:03:14.640><c> is</c><00:03:14.800><c> a</c><00:03:15.120><c> min</c><00:03:15.599><c> heap</c><00:03:16.000><c> and</c><00:03:16.239><c> we</c>

00:03:16.390 --> 00:03:16.400 align:start position:0%
most in this case is a min heap and we
 

00:03:16.400 --> 00:03:20.149 align:start position:0%
most in this case is a min heap and we
are<00:03:16.560><c> going</c><00:03:16.720><c> to</c><00:03:16.879><c> require</c><00:03:17.519><c> it</c><00:03:17.840><c> to</c><00:03:18.080><c> be</c><00:03:18.480><c> of</c><00:03:18.879><c> size</c><00:03:19.599><c> k</c>

00:03:20.149 --> 00:03:20.159 align:start position:0%
are going to require it to be of size k
 

00:03:20.159 --> 00:03:22.470 align:start position:0%
are going to require it to be of size k
and<00:03:20.319><c> let</c><00:03:20.480><c> me</c><00:03:20.640><c> tell</c><00:03:20.800><c> you</c><00:03:21.120><c> why</c><00:03:21.760><c> well</c><00:03:22.000><c> first</c><00:03:22.319><c> of</c>

00:03:22.470 --> 00:03:22.480 align:start position:0%
and let me tell you why well first of
 

00:03:22.480 --> 00:03:24.710 align:start position:0%
and let me tell you why well first of
all<00:03:22.720><c> a</c><00:03:23.280><c> heap</c><00:03:23.680><c> is</c><00:03:23.760><c> a</c><00:03:23.840><c> data</c><00:03:24.159><c> structure</c><00:03:24.480><c> if</c><00:03:24.560><c> you</c>

00:03:24.710 --> 00:03:24.720 align:start position:0%
all a heap is a data structure if you
 

00:03:24.720 --> 00:03:26.470 align:start position:0%
all a heap is a data structure if you
haven't<00:03:24.879><c> heard</c><00:03:25.040><c> of</c><00:03:25.200><c> it</c><00:03:25.360><c> that</c><00:03:25.519><c> has</c><00:03:25.760><c> a</c><00:03:25.920><c> somewhat</c>

00:03:26.470 --> 00:03:26.480 align:start position:0%
haven't heard of it that has a somewhat
 

00:03:26.480 --> 00:03:29.110 align:start position:0%
haven't heard of it that has a somewhat
sorted<00:03:26.959><c> property</c><00:03:27.599><c> we</c><00:03:27.760><c> can</c><00:03:28.000><c> add</c><00:03:28.400><c> and</c><00:03:28.640><c> pop</c>

00:03:29.110 --> 00:03:29.120 align:start position:0%
sorted property we can add and pop
 

00:03:29.120 --> 00:03:33.110 align:start position:0%
sorted property we can add and pop
elements<00:03:29.680><c> from</c><00:03:29.920><c> the</c><00:03:30.159><c> min</c><00:03:30.400><c> heap</c><00:03:30.879><c> in</c><00:03:31.200><c> log</c><00:03:31.760><c> n</c><00:03:32.400><c> time</c>

00:03:33.110 --> 00:03:33.120 align:start position:0%
elements from the min heap in log n time
 

00:03:33.120 --> 00:03:35.910 align:start position:0%
elements from the min heap in log n time
we<00:03:33.280><c> can</c><00:03:33.519><c> also</c><00:03:34.159><c> get</c><00:03:34.400><c> the</c><00:03:34.720><c> minimum</c><00:03:35.200><c> value</c><00:03:35.599><c> of</c><00:03:35.760><c> the</c>

00:03:35.910 --> 00:03:35.920 align:start position:0%
we can also get the minimum value of the
 

00:03:35.920 --> 00:03:39.430 align:start position:0%
we can also get the minimum value of the
min<00:03:36.159><c> heap</c><00:03:36.640><c> in</c><00:03:36.879><c> big</c><00:03:37.200><c> o</c><00:03:37.519><c> of</c><00:03:37.920><c> one</c><00:03:38.319><c> time</c><00:03:38.959><c> obviously</c>

00:03:39.430 --> 00:03:39.440 align:start position:0%
min heap in big o of one time obviously
 

00:03:39.440 --> 00:03:41.750 align:start position:0%
min heap in big o of one time obviously
this<00:03:39.680><c> is</c><00:03:39.840><c> a</c><00:03:40.000><c> little</c><00:03:40.239><c> bit</c><00:03:40.560><c> better</c><00:03:41.200><c> than</c><00:03:41.519><c> an</c>

00:03:41.750 --> 00:03:41.760 align:start position:0%
this is a little bit better than an
 

00:03:41.760 --> 00:03:44.390 align:start position:0%
this is a little bit better than an
array<00:03:42.480><c> especially</c><00:03:43.120><c> an</c><00:03:43.360><c> unsorted</c><00:03:43.920><c> array</c><00:03:44.239><c> like</c>

00:03:44.390 --> 00:03:44.400 align:start position:0%
array especially an unsorted array like
 

00:03:44.400 --> 00:03:46.630 align:start position:0%
array especially an unsorted array like
we<00:03:44.640><c> are</c><00:03:44.720><c> given</c><00:03:45.200><c> in</c><00:03:45.280><c> the</c><00:03:45.599><c> input</c><00:03:46.239><c> but</c><00:03:46.480><c> the</c>

00:03:46.630 --> 00:03:46.640 align:start position:0%
we are given in the input but the
 

00:03:46.640 --> 00:03:49.030 align:start position:0%
we are given in the input but the
question<00:03:47.040><c> is</c><00:03:47.280><c> why</c><00:03:47.599><c> are</c><00:03:47.760><c> we</c><00:03:48.000><c> going</c><00:03:48.239><c> to</c><00:03:48.480><c> require</c>

00:03:49.030 --> 00:03:49.040 align:start position:0%
question is why are we going to require
 

00:03:49.040 --> 00:03:52.390 align:start position:0%
question is why are we going to require
it<00:03:49.200><c> to</c><00:03:49.360><c> be</c><00:03:49.599><c> of</c><00:03:49.920><c> size</c><00:03:50.400><c> k</c><00:03:51.120><c> and</c><00:03:51.519><c> why</c><00:03:51.840><c> are</c><00:03:51.920><c> we</c><00:03:52.080><c> using</c>

00:03:52.390 --> 00:03:52.400 align:start position:0%
it to be of size k and why are we using
 

00:03:52.400 --> 00:03:54.869 align:start position:0%
it to be of size k and why are we using
a<00:03:52.560><c> min</c><00:03:52.879><c> heap</c><00:03:53.200><c> rather</c><00:03:53.519><c> than</c><00:03:53.680><c> a</c><00:03:53.760><c> max</c><00:03:54.159><c> heap</c><00:03:54.560><c> well</c>

00:03:54.869 --> 00:03:54.879 align:start position:0%
a min heap rather than a max heap well
 

00:03:54.879 --> 00:03:56.470 align:start position:0%
a min heap rather than a max heap well
one<00:03:55.120><c> thing</c><00:03:55.519><c> we</c><00:03:55.680><c> are</c><00:03:55.760><c> going</c><00:03:55.840><c> to</c><00:03:55.920><c> use</c><00:03:56.159><c> to</c><00:03:56.319><c> our</c>

00:03:56.470 --> 00:03:56.480 align:start position:0%
one thing we are going to use to our
 

00:03:56.480 --> 00:03:58.390 align:start position:0%
one thing we are going to use to our
advantage<00:03:57.040><c> is</c><00:03:57.200><c> that</c><00:03:57.360><c> we're</c><00:03:57.599><c> only</c><00:03:57.840><c> going</c><00:03:58.000><c> to</c><00:03:58.080><c> be</c>

00:03:58.390 --> 00:03:58.400 align:start position:0%
advantage is that we're only going to be
 

00:03:58.400 --> 00:04:01.110 align:start position:0%
advantage is that we're only going to be
adding<00:03:58.959><c> elements</c><00:03:59.599><c> to</c><00:03:59.920><c> our</c><00:04:00.239><c> stream</c><00:04:00.720><c> of</c><00:04:00.799><c> data</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
adding elements to our stream of data
 

00:04:01.120 --> 00:04:02.949 align:start position:0%
adding elements to our stream of data
we're<00:04:01.280><c> never</c><00:04:01.599><c> really</c><00:04:01.840><c> going</c><00:04:01.920><c> to</c><00:04:02.000><c> be</c><00:04:02.239><c> removing</c>

00:04:02.949 --> 00:04:02.959 align:start position:0%
we're never really going to be removing
 

00:04:02.959 --> 00:04:05.589 align:start position:0%
we're never really going to be removing
anything<00:04:03.760><c> so</c><00:04:04.080><c> in</c><00:04:04.239><c> this</c><00:04:04.640><c> example</c><00:04:05.040><c> we're</c><00:04:05.200><c> given</c>

00:04:05.589 --> 00:04:05.599 align:start position:0%
anything so in this example we're given
 

00:04:05.599 --> 00:04:08.710 align:start position:0%
anything so in this example we're given
four<00:04:05.920><c> numbers</c><00:04:06.480><c> but</c><00:04:06.640><c> we</c><00:04:06.959><c> only</c><00:04:07.439><c> need</c><00:04:08.080><c> a</c><00:04:08.239><c> min</c><00:04:08.480><c> heap</c>

00:04:08.710 --> 00:04:08.720 align:start position:0%
four numbers but we only need a min heap
 

00:04:08.720 --> 00:04:11.509 align:start position:0%
four numbers but we only need a min heap
of<00:04:08.879><c> size</c><00:04:09.200><c> k</c><00:04:09.519><c> because</c><00:04:09.760><c> we</c><00:04:10.000><c> only</c><00:04:10.400><c> need</c><00:04:10.720><c> the</c><00:04:10.959><c> k</c>

00:04:11.509 --> 00:04:11.519 align:start position:0%
of size k because we only need the k
 

00:04:11.519 --> 00:04:14.390 align:start position:0%
of size k because we only need the k
largest<00:04:12.159><c> values</c><00:04:13.040><c> from</c><00:04:13.519><c> the</c><00:04:13.840><c> array</c><00:04:14.159><c> in</c><00:04:14.239><c> this</c>

00:04:14.390 --> 00:04:14.400 align:start position:0%
largest values from the array in this
 

00:04:14.400 --> 00:04:17.509 align:start position:0%
largest values from the array in this
case<00:04:14.720><c> it's</c><00:04:15.040><c> four</c><00:04:15.519><c> five</c><00:04:16.000><c> and</c><00:04:16.239><c> three</c><00:04:16.880><c> why</c><00:04:17.280><c> is</c>

00:04:17.509 --> 00:04:17.519 align:start position:0%
case it's four five and three why is
 

00:04:17.519 --> 00:04:20.150 align:start position:0%
case it's four five and three why is
that<00:04:17.759><c> why</c><00:04:17.919><c> do</c><00:04:18.079><c> we</c><00:04:18.400><c> never</c><00:04:18.799><c> need</c><00:04:19.359><c> the</c><00:04:19.600><c> two</c>

00:04:20.150 --> 00:04:20.160 align:start position:0%
that why do we never need the two
 

00:04:20.160 --> 00:04:23.030 align:start position:0%
that why do we never need the two
because<00:04:20.560><c> we</c><00:04:20.799><c> want</c><00:04:21.040><c> the</c><00:04:21.359><c> third</c><00:04:22.000><c> largest</c><00:04:22.560><c> value</c>

00:04:23.030 --> 00:04:23.040 align:start position:0%
because we want the third largest value
 

00:04:23.040 --> 00:04:24.710 align:start position:0%
because we want the third largest value
this<00:04:23.280><c> is</c><00:04:23.360><c> the</c><00:04:23.520><c> largest</c><00:04:24.000><c> this</c><00:04:24.240><c> is</c><00:04:24.320><c> the</c><00:04:24.400><c> second</c>

00:04:24.710 --> 00:04:24.720 align:start position:0%
this is the largest this is the second
 

00:04:24.720 --> 00:04:27.030 align:start position:0%
this is the largest this is the second
largest<00:04:25.199><c> this</c><00:04:25.360><c> is</c><00:04:25.440><c> the</c><00:04:25.680><c> third</c><00:04:26.000><c> largest</c><00:04:26.639><c> so</c><00:04:26.880><c> we</c>

00:04:27.030 --> 00:04:27.040 align:start position:0%
largest this is the third largest so we
 

00:04:27.040 --> 00:04:28.710 align:start position:0%
largest this is the third largest so we
have<00:04:27.199><c> three</c><00:04:27.520><c> numbers</c><00:04:27.919><c> that</c><00:04:28.000><c> are</c><00:04:28.160><c> bigger</c><00:04:28.479><c> than</c>

00:04:28.710 --> 00:04:28.720 align:start position:0%
have three numbers that are bigger than
 

00:04:28.720 --> 00:04:32.550 align:start position:0%
have three numbers that are bigger than
two<00:04:29.120><c> is</c><00:04:29.520><c> two</c><00:04:30.160><c> ever</c><00:04:30.639><c> going</c><00:04:31.040><c> to</c><00:04:31.280><c> be</c><00:04:31.759><c> the</c><00:04:32.080><c> third</c>

00:04:32.550 --> 00:04:32.560 align:start position:0%
two is two ever going to be the third
 

00:04:32.560 --> 00:04:35.830 align:start position:0%
two is two ever going to be the third
largest<00:04:33.120><c> value</c><00:04:33.600><c> in</c><00:04:33.840><c> our</c><00:04:34.080><c> stream</c><00:04:34.560><c> of</c><00:04:34.800><c> data</c><00:04:35.360><c> it's</c>

00:04:35.830 --> 00:04:35.840 align:start position:0%
largest value in our stream of data it's
 

00:04:35.840 --> 00:04:37.909 align:start position:0%
largest value in our stream of data it's
never<00:04:36.240><c> going</c><00:04:36.560><c> to</c><00:04:36.720><c> be</c><00:04:37.199><c> because</c><00:04:37.440><c> we're</c><00:04:37.680><c> never</c>

00:04:37.909 --> 00:04:37.919 align:start position:0%
never going to be because we're never
 

00:04:37.919 --> 00:04:40.390 align:start position:0%
never going to be because we're never
going<00:04:38.080><c> to</c><00:04:38.240><c> remove</c><00:04:39.040><c> any</c><00:04:39.199><c> of</c><00:04:39.440><c> these</c><00:04:39.840><c> elements</c>

00:04:40.390 --> 00:04:40.400 align:start position:0%
going to remove any of these elements
 

00:04:40.400 --> 00:04:43.030 align:start position:0%
going to remove any of these elements
right<00:04:40.639><c> we</c><00:04:40.800><c> might</c><00:04:41.120><c> add</c><00:04:41.520><c> elements</c><00:04:42.240><c> we</c><00:04:42.479><c> might</c><00:04:42.720><c> add</c>

00:04:43.030 --> 00:04:43.040 align:start position:0%
right we might add elements we might add
 

00:04:43.040 --> 00:04:45.749 align:start position:0%
right we might add elements we might add
a<00:04:43.199><c> value</c><00:04:43.680><c> like</c><00:04:44.000><c> six</c><00:04:44.400><c> if</c><00:04:44.560><c> we</c><00:04:44.800><c> add</c><00:04:45.120><c> this</c><00:04:45.440><c> six</c>

00:04:45.749 --> 00:04:45.759 align:start position:0%
a value like six if we add this six
 

00:04:45.759 --> 00:04:48.629 align:start position:0%
a value like six if we add this six
value<00:04:46.400><c> then</c><00:04:46.960><c> we</c><00:04:47.120><c> don't</c><00:04:47.440><c> want</c><00:04:47.600><c> to</c><00:04:47.840><c> include</c><00:04:48.320><c> this</c>

00:04:48.629 --> 00:04:48.639 align:start position:0%
value then we don't want to include this
 

00:04:48.639 --> 00:04:50.950 align:start position:0%
value then we don't want to include this
f<00:04:48.960><c> this</c><00:04:49.199><c> four</c><00:04:49.520><c> anymore</c><00:04:50.160><c> then</c><00:04:50.400><c> we</c><00:04:50.560><c> only</c><00:04:50.720><c> want</c><00:04:50.880><c> to</c>

00:04:50.950 --> 00:04:50.960 align:start position:0%
f this four anymore then we only want to
 

00:04:50.960 --> 00:04:54.070 align:start position:0%
f this four anymore then we only want to
keep<00:04:51.199><c> track</c><00:04:51.440><c> of</c><00:04:51.680><c> these</c><00:04:52.400><c> three</c><00:04:52.880><c> numbers</c><00:04:53.600><c> six</c>

00:04:54.070 --> 00:04:54.080 align:start position:0%
keep track of these three numbers six
 

00:04:54.080 --> 00:04:56.710 align:start position:0%
keep track of these three numbers six
five<00:04:54.560><c> and</c><00:04:54.800><c> eight</c><00:04:55.280><c> and</c><00:04:55.520><c> now</c><00:04:56.160><c> this</c><00:04:56.400><c> is</c><00:04:56.479><c> going</c><00:04:56.639><c> to</c>

00:04:56.710 --> 00:04:56.720 align:start position:0%
five and eight and now this is going to
 

00:04:56.720 --> 00:04:59.270 align:start position:0%
five and eight and now this is going to
be<00:04:56.880><c> the</c><00:04:57.199><c> third</c><00:04:57.759><c> largest</c><00:04:58.320><c> number</c><00:04:58.800><c> five</c><00:04:59.120><c> is</c>

00:04:59.270 --> 00:04:59.280 align:start position:0%
be the third largest number five is
 

00:04:59.280 --> 00:05:01.510 align:start position:0%
be the third largest number five is
going<00:04:59.440><c> to</c><00:04:59.520><c> be</c><00:04:59.680><c> the</c><00:04:59.840><c> third</c><00:05:00.160><c> largest</c><00:05:00.560><c> number</c><00:05:01.120><c> two</c>

00:05:01.510 --> 00:05:01.520 align:start position:0%
going to be the third largest number two
 

00:05:01.520 --> 00:05:03.670 align:start position:0%
going to be the third largest number two
is<00:05:01.680><c> never</c><00:05:02.000><c> going</c><00:05:02.240><c> to</c><00:05:02.400><c> be</c><00:05:02.639><c> included</c><00:05:03.280><c> in</c><00:05:03.440><c> this</c>

00:05:03.670 --> 00:05:03.680 align:start position:0%
is never going to be included in this
 

00:05:03.680 --> 00:05:06.629 align:start position:0%
is never going to be included in this
group<00:05:04.160><c> two</c><00:05:04.479><c> is</c><00:05:04.800><c> never</c><00:05:05.199><c> going</c><00:05:05.440><c> to</c><00:05:05.680><c> be</c><00:05:06.000><c> in</c><00:05:06.400><c> our</c>

00:05:06.629 --> 00:05:06.639 align:start position:0%
group two is never going to be in our
 

00:05:06.639 --> 00:05:09.909 align:start position:0%
group two is never going to be in our
min<00:05:06.960><c> heap</c><00:05:07.280><c> of</c><00:05:07.520><c> size</c><00:05:08.000><c> k</c><00:05:08.479><c> if</c><00:05:08.639><c> we</c><00:05:08.960><c> added</c><00:05:09.360><c> a</c><00:05:09.520><c> small</c>

00:05:09.909 --> 00:05:09.919 align:start position:0%
min heap of size k if we added a small
 

00:05:09.919 --> 00:05:12.469 align:start position:0%
min heap of size k if we added a small
element<00:05:10.320><c> to</c><00:05:10.720><c> our</c><00:05:10.880><c> stream</c><00:05:11.199><c> like</c><00:05:11.440><c> a</c><00:05:11.600><c> 1</c><00:05:12.080><c> well</c><00:05:12.320><c> we</c>

00:05:12.469 --> 00:05:12.479 align:start position:0%
element to our stream like a 1 well we
 

00:05:12.479 --> 00:05:14.870 align:start position:0%
element to our stream like a 1 well we
don't<00:05:12.639><c> care</c><00:05:12.960><c> about</c><00:05:13.199><c> a</c><00:05:13.360><c> 1.</c><00:05:13.840><c> now</c><00:05:14.400><c> in</c><00:05:14.479><c> terms</c><00:05:14.800><c> of</c>

00:05:14.870 --> 00:05:14.880 align:start position:0%
don't care about a 1. now in terms of
 

00:05:14.880 --> 00:05:15.909 align:start position:0%
don't care about a 1. now in terms of
the<00:05:15.039><c> code</c><00:05:15.360><c> and</c><00:05:15.440><c> how</c><00:05:15.600><c> we're</c><00:05:15.680><c> going</c><00:05:15.759><c> to</c>

00:05:15.909 --> 00:05:15.919 align:start position:0%
the code and how we're going to
 

00:05:15.919 --> 00:05:17.590 align:start position:0%
the code and how we're going to
implement<00:05:16.320><c> this</c><00:05:16.720><c> we're</c><00:05:16.880><c> going</c><00:05:17.039><c> to</c><00:05:17.120><c> have</c><00:05:17.360><c> a</c><00:05:17.440><c> min</c>

00:05:17.590 --> 00:05:17.600 align:start position:0%
implement this we're going to have a min
 

00:05:17.600 --> 00:05:19.670 align:start position:0%
implement this we're going to have a min
heap<00:05:17.919><c> of</c><00:05:18.000><c> size</c><00:05:18.320><c> k</c><00:05:18.880><c> first</c><00:05:19.120><c> of</c><00:05:19.280><c> all</c><00:05:19.360><c> what</c><00:05:19.520><c> we're</c>

00:05:19.670 --> 00:05:19.680 align:start position:0%
heap of size k first of all what we're
 

00:05:19.680 --> 00:05:21.590 align:start position:0%
heap of size k first of all what we're
going<00:05:19.759><c> to</c><00:05:19.919><c> do</c><00:05:20.400><c> to</c><00:05:20.639><c> get</c><00:05:20.880><c> this</c><00:05:21.120><c> heap</c><00:05:21.360><c> is</c><00:05:21.440><c> we're</c>

00:05:21.590 --> 00:05:21.600 align:start position:0%
going to do to get this heap is we're
 

00:05:21.600 --> 00:05:24.310 align:start position:0%
going to do to get this heap is we're
going<00:05:21.680><c> to</c><00:05:21.759><c> take</c><00:05:22.000><c> this</c><00:05:22.320><c> entire</c><00:05:23.199><c> input</c><00:05:23.600><c> and</c><00:05:24.080><c> add</c>

00:05:24.310 --> 00:05:24.320 align:start position:0%
going to take this entire input and add
 

00:05:24.320 --> 00:05:26.469 align:start position:0%
going to take this entire input and add
it<00:05:24.479><c> to</c><00:05:24.720><c> the</c><00:05:24.880><c> min</c><00:05:25.120><c> heap</c><00:05:25.440><c> right</c><00:05:25.600><c> so</c><00:05:25.840><c> suppose</c><00:05:26.320><c> we</c>

00:05:26.469 --> 00:05:26.479 align:start position:0%
it to the min heap right so suppose we
 

00:05:26.479 --> 00:05:30.469 align:start position:0%
it to the min heap right so suppose we
have<00:05:27.120><c> four</c><00:05:27.759><c> five</c><00:05:28.320><c> and</c><00:05:28.560><c> eight</c><00:05:28.960><c> in</c><00:05:29.199><c> our</c><00:05:29.360><c> min</c><00:05:29.680><c> heap</c>

00:05:30.469 --> 00:05:30.479 align:start position:0%
have four five and eight in our min heap
 

00:05:30.479 --> 00:05:33.670 align:start position:0%
have four five and eight in our min heap
now<00:05:31.039><c> we're</c><00:05:31.199><c> going</c><00:05:31.280><c> to</c><00:05:31.440><c> do</c><00:05:31.680><c> a</c><00:05:32.000><c> while</c><00:05:32.560><c> loop</c><00:05:33.280><c> while</c>

00:05:33.670 --> 00:05:33.680 align:start position:0%
now we're going to do a while loop while
 

00:05:33.680 --> 00:05:36.390 align:start position:0%
now we're going to do a while loop while
the<00:05:34.000><c> size</c><00:05:34.400><c> of</c><00:05:34.560><c> the</c><00:05:34.720><c> heap</c><00:05:35.120><c> is</c><00:05:35.360><c> greater</c><00:05:35.840><c> than</c><00:05:36.080><c> k</c>

00:05:36.390 --> 00:05:36.400 align:start position:0%
the size of the heap is greater than k
 

00:05:36.400 --> 00:05:38.469 align:start position:0%
the size of the heap is greater than k
we're<00:05:36.560><c> gonna</c><00:05:36.880><c> pop</c><00:05:37.280><c> the</c><00:05:37.600><c> minimum</c>

00:05:38.469 --> 00:05:38.479 align:start position:0%
we're gonna pop the minimum
 

00:05:38.479 --> 00:05:41.430 align:start position:0%
we're gonna pop the minimum
value<00:05:39.199><c> in</c><00:05:39.360><c> this</c><00:05:39.680><c> case</c><00:05:40.320><c> the</c><00:05:40.479><c> minimum</c><00:05:40.960><c> is</c><00:05:41.120><c> 2</c>

00:05:41.430 --> 00:05:41.440 align:start position:0%
value in this case the minimum is 2
 

00:05:41.440 --> 00:05:43.510 align:start position:0%
value in this case the minimum is 2
we're<00:05:41.600><c> going</c><00:05:41.759><c> to</c><00:05:41.919><c> pop</c><00:05:42.160><c> it</c><00:05:42.479><c> thankfully</c><00:05:43.039><c> now</c><00:05:43.360><c> our</c>

00:05:43.510 --> 00:05:43.520 align:start position:0%
we're going to pop it thankfully now our
 

00:05:43.520 --> 00:05:45.590 align:start position:0%
we're going to pop it thankfully now our
heap<00:05:43.840><c> is</c><00:05:44.000><c> size</c><00:05:44.320><c> k</c><00:05:44.560><c> exactly</c><00:05:45.039><c> so</c><00:05:45.199><c> we</c><00:05:45.280><c> don't</c><00:05:45.440><c> need</c>

00:05:45.590 --> 00:05:45.600 align:start position:0%
heap is size k exactly so we don't need
 

00:05:45.600 --> 00:05:47.749 align:start position:0%
heap is size k exactly so we don't need
to<00:05:45.759><c> continue</c><00:05:46.080><c> to</c><00:05:46.240><c> pop</c><00:05:46.560><c> elements</c><00:05:47.199><c> and</c><00:05:47.360><c> remember</c>

00:05:47.749 --> 00:05:47.759 align:start position:0%
to continue to pop elements and remember
 

00:05:47.759 --> 00:05:49.670 align:start position:0%
to continue to pop elements and remember
our<00:05:48.000><c> min</c><00:05:48.240><c> heap</c><00:05:48.479><c> we</c><00:05:48.639><c> can</c><00:05:48.800><c> get</c><00:05:48.960><c> the</c><00:05:49.199><c> minimum</c>

00:05:49.670 --> 00:05:49.680 align:start position:0%
our min heap we can get the minimum
 

00:05:49.680 --> 00:05:52.310 align:start position:0%
our min heap we can get the minimum
value<00:05:50.320><c> and</c><00:05:50.639><c> since</c><00:05:50.960><c> we</c><00:05:51.039><c> have</c><00:05:51.680><c> these</c><00:05:51.919><c> are</c><00:05:52.080><c> the</c>

00:05:52.310 --> 00:05:52.320 align:start position:0%
value and since we have these are the
 

00:05:52.320 --> 00:05:55.749 align:start position:0%
value and since we have these are the
three<00:05:52.880><c> largest</c><00:05:53.360><c> values</c><00:05:54.160><c> we</c><00:05:54.320><c> want</c><00:05:54.720><c> the</c><00:05:55.039><c> third</c>

00:05:55.749 --> 00:05:55.759 align:start position:0%
three largest values we want the third
 

00:05:55.759 --> 00:05:58.070 align:start position:0%
three largest values we want the third
largest<00:05:56.400><c> which</c><00:05:56.639><c> is</c><00:05:56.720><c> going</c><00:05:56.800><c> to</c><00:05:56.880><c> be</c><00:05:57.039><c> the</c><00:05:57.360><c> minimum</c>

00:05:58.070 --> 00:05:58.080 align:start position:0%
largest which is going to be the minimum
 

00:05:58.080 --> 00:06:00.309 align:start position:0%
largest which is going to be the minimum
among<00:05:58.560><c> all</c><00:05:58.720><c> of</c><00:05:58.960><c> these</c><00:05:59.440><c> i</c><00:05:59.520><c> hope</c><00:05:59.840><c> now</c><00:06:00.080><c> you</c><00:06:00.240><c> can</c>

00:06:00.309 --> 00:06:00.319 align:start position:0%
among all of these i hope now you can
 

00:06:00.319 --> 00:06:02.150 align:start position:0%
among all of these i hope now you can
see<00:06:00.560><c> why</c><00:06:00.800><c> we're</c><00:06:00.960><c> using</c><00:06:01.280><c> a</c><00:06:01.440><c> min</c><00:06:01.680><c> heap</c><00:06:01.919><c> because</c>

00:06:02.150 --> 00:06:02.160 align:start position:0%
see why we're using a min heap because
 

00:06:02.160 --> 00:06:04.550 align:start position:0%
see why we're using a min heap because
we<00:06:02.319><c> can</c><00:06:02.400><c> get</c><00:06:02.560><c> the</c><00:06:02.639><c> minimum</c><00:06:03.120><c> in</c><00:06:03.280><c> o</c><00:06:03.520><c> of</c><00:06:03.680><c> one</c><00:06:03.919><c> time</c>

00:06:04.550 --> 00:06:04.560 align:start position:0%
we can get the minimum in o of one time
 

00:06:04.560 --> 00:06:08.550 align:start position:0%
we can get the minimum in o of one time
but<00:06:05.280><c> the</c><00:06:05.520><c> add</c><00:06:06.080><c> function</c><00:06:07.039><c> over</c><00:06:07.360><c> here</c><00:06:07.840><c> requires</c>

00:06:08.550 --> 00:06:08.560 align:start position:0%
but the add function over here requires
 

00:06:08.560 --> 00:06:11.430 align:start position:0%
but the add function over here requires
us<00:06:09.120><c> to</c><00:06:09.360><c> add</c><00:06:09.759><c> a</c><00:06:09.919><c> value</c><00:06:10.400><c> to</c><00:06:10.560><c> our</c><00:06:10.720><c> stream</c><00:06:11.039><c> of</c><00:06:11.120><c> data</c>

00:06:11.430 --> 00:06:11.440 align:start position:0%
us to add a value to our stream of data
 

00:06:11.440 --> 00:06:14.550 align:start position:0%
us to add a value to our stream of data
so<00:06:11.600><c> for</c><00:06:11.759><c> example</c><00:06:12.560><c> suppose</c><00:06:13.120><c> we</c><00:06:13.280><c> want</c><00:06:13.520><c> to</c><00:06:13.759><c> run</c>

00:06:14.550 --> 00:06:14.560 align:start position:0%
so for example suppose we want to run
 

00:06:14.560 --> 00:06:16.309 align:start position:0%
so for example suppose we want to run
add<00:06:15.360><c> 3</c>

00:06:16.309 --> 00:06:16.319 align:start position:0%
add 3
 

00:06:16.319 --> 00:06:19.430 align:start position:0%
add 3
well<00:06:16.800><c> how</c><00:06:16.960><c> do</c><00:06:17.120><c> we</c><00:06:17.280><c> know</c><00:06:17.520><c> if</c><00:06:17.759><c> 3</c><00:06:18.319><c> is</c><00:06:18.479><c> included</c>

00:06:19.430 --> 00:06:19.440 align:start position:0%
well how do we know if 3 is included
 

00:06:19.440 --> 00:06:22.230 align:start position:0%
well how do we know if 3 is included
among<00:06:20.080><c> our</c><00:06:20.400><c> k</c><00:06:20.639><c> largest</c><00:06:21.120><c> values</c><00:06:21.680><c> well</c><00:06:21.919><c> the</c>

00:06:22.230 --> 00:06:22.240 align:start position:0%
among our k largest values well the
 

00:06:22.240 --> 00:06:23.990 align:start position:0%
among our k largest values well the
easiest<00:06:22.720><c> way</c><00:06:22.960><c> to</c><00:06:23.039><c> do</c><00:06:23.199><c> it</c><00:06:23.360><c> there's</c><00:06:23.600><c> multiple</c>

00:06:23.990 --> 00:06:24.000 align:start position:0%
easiest way to do it there's multiple
 

00:06:24.000 --> 00:06:25.749 align:start position:0%
easiest way to do it there's multiple
ways<00:06:24.240><c> but</c><00:06:24.319><c> the</c><00:06:24.479><c> easiest</c><00:06:24.960><c> is</c><00:06:25.120><c> just</c><00:06:25.360><c> to</c><00:06:25.520><c> take</c>

00:06:25.749 --> 00:06:25.759 align:start position:0%
ways but the easiest is just to take
 

00:06:25.759 --> 00:06:28.629 align:start position:0%
ways but the easiest is just to take
that<00:06:26.080><c> 3</c><00:06:26.560><c> and</c><00:06:26.800><c> add</c><00:06:27.039><c> it</c><00:06:27.120><c> to</c><00:06:27.280><c> our</c><00:06:27.440><c> min</c><00:06:27.759><c> heap</c><00:06:28.160><c> so</c><00:06:28.400><c> now</c>

00:06:28.629 --> 00:06:28.639 align:start position:0%
that 3 and add it to our min heap so now
 

00:06:28.639 --> 00:06:32.150 align:start position:0%
that 3 and add it to our min heap so now
we<00:06:28.800><c> have</c><00:06:29.199><c> 4</c><00:06:29.600><c> values</c><00:06:30.400><c> in</c><00:06:30.639><c> our</c><00:06:30.880><c> min</c><00:06:31.199><c> heap</c><00:06:31.680><c> and</c><00:06:31.840><c> we</c>

00:06:32.150 --> 00:06:32.160 align:start position:0%
we have 4 values in our min heap and we
 

00:06:32.160 --> 00:06:35.670 align:start position:0%
we have 4 values in our min heap and we
we<00:06:32.319><c> added</c><00:06:32.720><c> it</c><00:06:32.880><c> in</c><00:06:33.120><c> log</c><00:06:33.440><c> n</c><00:06:33.680><c> time</c><00:06:34.319><c> now</c><00:06:34.880><c> we</c><00:06:35.120><c> want</c><00:06:35.360><c> to</c>

00:06:35.670 --> 00:06:35.680 align:start position:0%
we added it in log n time now we want to
 

00:06:35.680 --> 00:06:38.629 align:start position:0%
we added it in log n time now we want to
pop<00:06:36.319><c> the</c><00:06:36.560><c> minimum</c><00:06:37.120><c> value</c><00:06:37.759><c> from</c><00:06:38.000><c> this</c><00:06:38.240><c> min</c><00:06:38.479><c> heat</c>

00:06:38.629 --> 00:06:38.639 align:start position:0%
pop the minimum value from this min heat
 

00:06:38.639 --> 00:06:40.950 align:start position:0%
pop the minimum value from this min heat
because<00:06:38.880><c> we</c><00:06:39.039><c> want</c><00:06:39.280><c> the</c><00:06:39.520><c> third</c><00:06:39.840><c> largest</c><00:06:40.319><c> value</c>

00:06:40.950 --> 00:06:40.960 align:start position:0%
because we want the third largest value
 

00:06:40.960 --> 00:06:42.790 align:start position:0%
because we want the third largest value
we<00:06:41.120><c> have</c><00:06:41.440><c> four</c><00:06:41.759><c> values</c><00:06:42.160><c> in</c><00:06:42.240><c> the</c><00:06:42.319><c> heap</c><00:06:42.560><c> let's</c>

00:06:42.790 --> 00:06:42.800 align:start position:0%
we have four values in the heap let's
 

00:06:42.800 --> 00:06:45.510 align:start position:0%
we have four values in the heap let's
pop<00:06:43.120><c> the</c><00:06:43.360><c> smallest</c><00:06:43.919><c> one</c><00:06:44.319><c> which</c><00:06:44.560><c> is</c><00:06:44.800><c> three</c><00:06:45.360><c> we</c>

00:06:45.510 --> 00:06:45.520 align:start position:0%
pop the smallest one which is three we
 

00:06:45.520 --> 00:06:48.390 align:start position:0%
pop the smallest one which is three we
can<00:06:45.680><c> do</c><00:06:45.840><c> that</c><00:06:46.400><c> again</c><00:06:46.960><c> in</c><00:06:47.120><c> login</c><00:06:47.600><c> time</c><00:06:48.000><c> and</c><00:06:48.240><c> now</c>

00:06:48.390 --> 00:06:48.400 align:start position:0%
can do that again in login time and now
 

00:06:48.400 --> 00:06:50.390 align:start position:0%
can do that again in login time and now
we<00:06:48.560><c> want</c><00:06:48.720><c> to</c><00:06:48.800><c> know</c><00:06:48.960><c> okay</c><00:06:49.280><c> among</c><00:06:49.520><c> the</c><00:06:49.680><c> remaining</c>

00:06:50.390 --> 00:06:50.400 align:start position:0%
we want to know okay among the remaining
 

00:06:50.400 --> 00:06:52.309 align:start position:0%
we want to know okay among the remaining
what's<00:06:50.720><c> the</c><00:06:50.880><c> smallest</c><00:06:51.280><c> value</c><00:06:51.680><c> again</c><00:06:52.080><c> it's</c>

00:06:52.309 --> 00:06:52.319 align:start position:0%
what's the smallest value again it's
 

00:06:52.319 --> 00:06:55.909 align:start position:0%
what's the smallest value again it's
four<00:06:52.800><c> so</c><00:06:53.280><c> as</c><00:06:53.520><c> you</c><00:06:53.599><c> can</c><00:06:53.840><c> see</c><00:06:54.400><c> we</c><00:06:54.560><c> can</c><00:06:54.800><c> do</c><00:06:55.039><c> the</c><00:06:55.440><c> add</c>

00:06:55.909 --> 00:06:55.919 align:start position:0%
four so as you can see we can do the add
 

00:06:55.919 --> 00:06:59.830 align:start position:0%
four so as you can see we can do the add
function<00:06:56.720><c> in</c><00:06:57.199><c> log</c><00:06:57.840><c> n</c><00:06:58.560><c> time</c><00:06:59.120><c> how</c><00:06:59.360><c> many</c><00:06:59.520><c> times</c>

00:06:59.830 --> 00:06:59.840 align:start position:0%
function in log n time how many times
 

00:06:59.840 --> 00:07:01.589 align:start position:0%
function in log n time how many times
are<00:06:59.919><c> we</c><00:07:00.080><c> going</c><00:07:00.160><c> to</c><00:07:00.240><c> run</c><00:07:00.479><c> the</c><00:07:00.639><c> law</c><00:07:01.120><c> in</c><00:07:01.199><c> the</c><00:07:01.360><c> add</c>

00:07:01.589 --> 00:07:01.599 align:start position:0%
are we going to run the law in the add
 

00:07:01.599 --> 00:07:04.710 align:start position:0%
are we going to run the law in the add
function<00:07:02.160><c> who</c><00:07:02.400><c> knows</c><00:07:02.720><c> let's</c><00:07:02.880><c> call</c><00:07:03.120><c> it</c><00:07:03.360><c> m</c><00:07:04.000><c> and</c>

00:07:04.710 --> 00:07:04.720 align:start position:0%
function who knows let's call it m and
 

00:07:04.720 --> 00:07:05.990 align:start position:0%
function who knows let's call it m and
then<00:07:04.960><c> this</c><00:07:05.199><c> is</c><00:07:05.280><c> going</c><00:07:05.360><c> to</c><00:07:05.440><c> be</c><00:07:05.520><c> the</c><00:07:05.680><c> overall</c>

00:07:05.990 --> 00:07:06.000 align:start position:0%
then this is going to be the overall
 

00:07:06.000 --> 00:07:08.230 align:start position:0%
then this is going to be the overall
time<00:07:06.160><c> complexity</c><00:07:06.720><c> of</c><00:07:07.039><c> add</c><00:07:07.360><c> if</c><00:07:07.440><c> we</c><00:07:07.680><c> count</c><00:07:08.000><c> all</c>

00:07:08.230 --> 00:07:08.240 align:start position:0%
time complexity of add if we count all
 

00:07:08.240 --> 00:07:10.230 align:start position:0%
time complexity of add if we count all
the<00:07:08.479><c> function</c><00:07:08.880><c> calls</c><00:07:09.199><c> that</c><00:07:09.360><c> are</c><00:07:09.440><c> made</c><00:07:09.759><c> to</c><00:07:09.919><c> it</c>

00:07:10.230 --> 00:07:10.240 align:start position:0%
the function calls that are made to it
 

00:07:10.240 --> 00:07:12.790 align:start position:0%
the function calls that are made to it
now<00:07:10.720><c> in</c><00:07:10.880><c> terms</c><00:07:11.280><c> of</c><00:07:11.440><c> our</c>

00:07:12.790 --> 00:07:12.800 align:start position:0%
now in terms of our
 

00:07:12.800 --> 00:07:15.350 align:start position:0%
now in terms of our
constructor<00:07:13.520><c> function</c><00:07:14.400><c> actually</c><00:07:14.880><c> generating</c>

00:07:15.350 --> 00:07:15.360 align:start position:0%
constructor function actually generating
 

00:07:15.360 --> 00:07:17.749 align:start position:0%
constructor function actually generating
this<00:07:15.599><c> entire</c><00:07:16.080><c> heap</c><00:07:16.560><c> it's</c><00:07:16.880><c> potentially</c><00:07:17.599><c> going</c>

00:07:17.749 --> 00:07:17.759 align:start position:0%
this entire heap it's potentially going
 

00:07:17.759 --> 00:07:22.070 align:start position:0%
this entire heap it's potentially going
to<00:07:17.919><c> be</c><00:07:18.639><c> n</c><00:07:19.199><c> log</c><00:07:19.759><c> n</c><00:07:20.160><c> in</c><00:07:20.240><c> the</c><00:07:20.479><c> worst</c><00:07:20.960><c> case</c><00:07:21.599><c> reason</c>

00:07:22.070 --> 00:07:22.080 align:start position:0%
to be n log n in the worst case reason
 

00:07:22.080 --> 00:07:24.629 align:start position:0%
to be n log n in the worst case reason
being<00:07:22.560><c> is</c><00:07:23.039><c> we</c><00:07:23.199><c> can</c><00:07:23.360><c> actually</c><00:07:23.759><c> initialize</c><00:07:24.479><c> the</c>

00:07:24.629 --> 00:07:24.639 align:start position:0%
being is we can actually initialize the
 

00:07:24.639 --> 00:07:26.309 align:start position:0%
being is we can actually initialize the
heap<00:07:24.800><c> like</c><00:07:25.039><c> this</c><00:07:25.199><c> is</c><00:07:25.280><c> our</c><00:07:25.520><c> input</c><00:07:25.759><c> data</c><00:07:26.000><c> we</c><00:07:26.160><c> can</c>

00:07:26.309 --> 00:07:26.319 align:start position:0%
heap like this is our input data we can
 

00:07:26.319 --> 00:07:28.550 align:start position:0%
heap like this is our input data we can
turn<00:07:26.560><c> it</c><00:07:26.720><c> into</c><00:07:27.039><c> a</c><00:07:27.120><c> heap</c><00:07:27.440><c> in</c><00:07:27.599><c> o</c><00:07:27.759><c> of</c><00:07:28.000><c> n</c><00:07:28.160><c> time</c>

00:07:28.550 --> 00:07:28.560 align:start position:0%
turn it into a heap in o of n time
 

00:07:28.560 --> 00:07:31.270 align:start position:0%
turn it into a heap in o of n time
that's<00:07:28.800><c> not</c><00:07:29.039><c> too</c><00:07:29.199><c> bad</c><00:07:29.599><c> but</c><00:07:29.919><c> then</c><00:07:30.160><c> remember</c>

00:07:31.270 --> 00:07:31.280 align:start position:0%
that's not too bad but then remember
 

00:07:31.280 --> 00:07:32.790 align:start position:0%
that's not too bad but then remember
when<00:07:31.440><c> we</c><00:07:31.599><c> started</c><00:07:31.919><c> with</c><00:07:32.080><c> the</c><00:07:32.160><c> array</c><00:07:32.560><c> we</c><00:07:32.639><c> had</c>

00:07:32.790 --> 00:07:32.800 align:start position:0%
when we started with the array we had
 

00:07:32.800 --> 00:07:34.629 align:start position:0%
when we started with the array we had
this<00:07:33.039><c> two</c><00:07:33.280><c> right</c><00:07:33.440><c> we</c><00:07:33.599><c> have</c><00:07:33.680><c> to</c><00:07:33.840><c> keep</c><00:07:34.160><c> popping</c>

00:07:34.629 --> 00:07:34.639 align:start position:0%
this two right we have to keep popping
 

00:07:34.639 --> 00:07:36.950 align:start position:0%
this two right we have to keep popping
elements<00:07:35.039><c> until</c><00:07:35.360><c> we</c><00:07:35.520><c> only</c><00:07:35.840><c> have</c><00:07:36.080><c> k</c><00:07:36.479><c> elements</c>

00:07:36.950 --> 00:07:36.960 align:start position:0%
elements until we only have k elements
 

00:07:36.960 --> 00:07:38.870 align:start position:0%
elements until we only have k elements
remaining<00:07:37.840><c> so</c>

00:07:38.870 --> 00:07:38.880 align:start position:0%
remaining so
 

00:07:38.880 --> 00:07:42.230 align:start position:0%
remaining so
a<00:07:39.120><c> pop</c><00:07:39.599><c> function</c><00:07:40.160><c> is</c><00:07:40.400><c> gonna</c><00:07:40.639><c> be</c><00:07:41.120><c> log</c><00:07:41.599><c> n</c><00:07:41.919><c> time</c>

00:07:42.230 --> 00:07:42.240 align:start position:0%
a pop function is gonna be log n time
 

00:07:42.240 --> 00:07:43.670 align:start position:0%
a pop function is gonna be log n time
how<00:07:42.400><c> many</c><00:07:42.560><c> times</c><00:07:42.720><c> are</c><00:07:42.880><c> we</c><00:07:42.960><c> gonna</c><00:07:43.039><c> have</c><00:07:43.199><c> to</c><00:07:43.360><c> pop</c>

00:07:43.670 --> 00:07:43.680 align:start position:0%
how many times are we gonna have to pop
 

00:07:43.680 --> 00:07:48.309 align:start position:0%
how many times are we gonna have to pop
potentially<00:07:44.479><c> n</c><00:07:45.120><c> minus</c><00:07:45.680><c> k</c><00:07:46.319><c> times</c><00:07:47.199><c> so</c><00:07:47.759><c> this</c><00:07:48.160><c> is</c>

00:07:48.309 --> 00:07:48.319 align:start position:0%
potentially n minus k times so this is
 

00:07:48.319 --> 00:07:50.070 align:start position:0%
potentially n minus k times so this is
the<00:07:48.479><c> overall</c><00:07:48.879><c> time</c><00:07:49.039><c> complexity</c><00:07:49.599><c> k</c><00:07:49.840><c> could</c><00:07:50.000><c> be</c>

00:07:50.070 --> 00:07:50.080 align:start position:0%
the overall time complexity k could be
 

00:07:50.080 --> 00:07:52.070 align:start position:0%
the overall time complexity k could be
really<00:07:50.319><c> small</c><00:07:50.639><c> it</c><00:07:50.720><c> could</c><00:07:50.879><c> be</c><00:07:51.120><c> one</c><00:07:51.520><c> so</c><00:07:51.840><c> you</c><00:07:51.919><c> know</c>

00:07:52.070 --> 00:07:52.080 align:start position:0%
really small it could be one so you know
 

00:07:52.080 --> 00:07:54.469 align:start position:0%
really small it could be one so you know
worst<00:07:52.400><c> case</c><00:07:52.560><c> we</c><00:07:52.720><c> could</c><00:07:52.879><c> have</c><00:07:53.120><c> n</c><00:07:53.280><c> log</c><00:07:53.599><c> n</c><00:07:54.080><c> for</c><00:07:54.319><c> our</c>

00:07:54.469 --> 00:07:54.479 align:start position:0%
worst case we could have n log n for our
 

00:07:54.479 --> 00:07:57.110 align:start position:0%
worst case we could have n log n for our
constructor<00:07:55.360><c> but</c><00:07:56.080><c> the</c><00:07:56.240><c> add</c><00:07:56.560><c> function</c><00:07:56.879><c> is</c><00:07:56.960><c> just</c>

00:07:57.110 --> 00:07:57.120 align:start position:0%
constructor but the add function is just
 

00:07:57.120 --> 00:07:58.710 align:start position:0%
constructor but the add function is just
going<00:07:57.199><c> to</c><00:07:57.280><c> be</c><00:07:57.520><c> log</c><00:07:57.759><c> n</c><00:07:58.080><c> that's</c><00:07:58.319><c> a</c><00:07:58.479><c> big</c>

00:07:58.710 --> 00:07:58.720 align:start position:0%
going to be log n that's a big
 

00:07:58.720 --> 00:08:00.550 align:start position:0%
going to be log n that's a big
improvement<00:07:59.360><c> over</c><00:07:59.759><c> the</c><00:07:59.840><c> first</c><00:08:00.080><c> solution</c><00:08:00.400><c> we</c>

00:08:00.550 --> 00:08:00.560 align:start position:0%
improvement over the first solution we
 

00:08:00.560 --> 00:08:02.869 align:start position:0%
improvement over the first solution we
came<00:08:00.800><c> up</c><00:08:00.879><c> with</c><00:08:01.120><c> which</c><00:08:01.280><c> was</c><00:08:01.759><c> uh</c><00:08:02.240><c> end</c><00:08:02.479><c> time</c><00:08:02.720><c> when</c>

00:08:02.869 --> 00:08:02.879 align:start position:0%
came up with which was uh end time when
 

00:08:02.879 --> 00:08:06.309 align:start position:0%
came up with which was uh end time when
we<00:08:03.039><c> were</c><00:08:03.199><c> just</c><00:08:03.440><c> using</c><00:08:04.160><c> a</c><00:08:04.720><c> array</c><00:08:05.280><c> structure</c><00:08:06.000><c> so</c>

00:08:06.309 --> 00:08:06.319 align:start position:0%
we were just using a array structure so
 

00:08:06.319 --> 00:08:08.629 align:start position:0%
we were just using a array structure so
heaps<00:08:06.720><c> definitely</c><00:08:07.120><c> help</c><00:08:07.360><c> us</c><00:08:07.599><c> out</c><00:08:07.840><c> a</c><00:08:07.919><c> lot</c><00:08:08.400><c> now</c>

00:08:08.629 --> 00:08:08.639 align:start position:0%
heaps definitely help us out a lot now
 

00:08:08.639 --> 00:08:10.790 align:start position:0%
heaps definitely help us out a lot now
we<00:08:08.800><c> can</c><00:08:09.280><c> go</c><00:08:09.520><c> ahead</c><00:08:09.680><c> and</c><00:08:09.840><c> code</c><00:08:10.080><c> this</c><00:08:10.400><c> up</c><00:08:10.639><c> now</c>

00:08:10.790 --> 00:08:10.800 align:start position:0%
we can go ahead and code this up now
 

00:08:10.800 --> 00:08:12.230 align:start position:0%
we can go ahead and code this up now
let's<00:08:11.039><c> code</c><00:08:11.280><c> it</c><00:08:11.360><c> up</c><00:08:11.520><c> first</c><00:08:11.759><c> thing</c><00:08:11.919><c> we're</c><00:08:12.080><c> going</c>

00:08:12.230 --> 00:08:12.240 align:start position:0%
let's code it up first thing we're going
 

00:08:12.240 --> 00:08:14.390 align:start position:0%
let's code it up first thing we're going
to<00:08:12.319><c> do</c><00:08:12.879><c> is</c><00:08:13.120><c> the</c><00:08:13.199><c> constructor</c><00:08:13.759><c> you</c><00:08:13.919><c> can</c><00:08:14.000><c> see</c><00:08:14.240><c> i</c>

00:08:14.390 --> 00:08:14.400 align:start position:0%
to do is the constructor you can see i
 

00:08:14.400 --> 00:08:16.150 align:start position:0%
to do is the constructor you can see i
have<00:08:14.639><c> one</c><00:08:14.960><c> comment</c><00:08:15.280><c> that</c><00:08:15.440><c> hopefully</c><00:08:15.919><c> will</c>

00:08:16.150 --> 00:08:16.160 align:start position:0%
have one comment that hopefully will
 

00:08:16.160 --> 00:08:17.670 align:start position:0%
have one comment that hopefully will
help<00:08:16.639><c> guide</c><00:08:16.960><c> us</c>

00:08:17.670 --> 00:08:17.680 align:start position:0%
help guide us
 

00:08:17.680 --> 00:08:20.790 align:start position:0%
help guide us
in<00:08:18.240><c> the</c><00:08:18.560><c> code</c><00:08:19.039><c> so</c><00:08:19.520><c> we</c><00:08:19.680><c> can</c><00:08:19.919><c> create</c><00:08:20.240><c> a</c><00:08:20.400><c> member</c>

00:08:20.790 --> 00:08:20.800 align:start position:0%
in the code so we can create a member
 

00:08:20.800 --> 00:08:23.990 align:start position:0%
in the code so we can create a member
variable<00:08:21.680><c> with</c><00:08:22.080><c> the</c><00:08:22.319><c> self</c><00:08:22.879><c> keyword</c><00:08:23.360><c> in</c><00:08:23.520><c> python</c>

00:08:23.990 --> 00:08:24.000 align:start position:0%
variable with the self keyword in python
 

00:08:24.000 --> 00:08:26.790 align:start position:0%
variable with the self keyword in python
so<00:08:24.160><c> first</c><00:08:24.400><c> we</c><00:08:24.560><c> want</c><00:08:24.720><c> to</c><00:08:24.800><c> create</c><00:08:25.280><c> our</c><00:08:25.520><c> min</c><00:08:25.840><c> heap</c>

00:08:26.790 --> 00:08:26.800 align:start position:0%
so first we want to create our min heap
 

00:08:26.800 --> 00:08:28.230 align:start position:0%
so first we want to create our min heap
and<00:08:26.960><c> we</c><00:08:27.120><c> also</c><00:08:27.280><c> want</c><00:08:27.440><c> to</c><00:08:27.520><c> have</c><00:08:27.599><c> another</c><00:08:28.000><c> member</c>

00:08:28.230 --> 00:08:28.240 align:start position:0%
and we also want to have another member
 

00:08:28.240 --> 00:08:30.309 align:start position:0%
and we also want to have another member
variable<00:08:28.639><c> for</c><00:08:28.960><c> k</c><00:08:29.280><c> which</c><00:08:29.520><c> is</c><00:08:29.919><c> you</c><00:08:30.000><c> know</c><00:08:30.160><c> going</c>

00:08:30.309 --> 00:08:30.319 align:start position:0%
variable for k which is you know going
 

00:08:30.319 --> 00:08:32.709 align:start position:0%
variable for k which is you know going
to<00:08:30.400><c> be</c><00:08:30.479><c> the</c><00:08:30.639><c> size</c><00:08:30.960><c> of</c><00:08:31.039><c> that</c><00:08:31.280><c> heap</c><00:08:31.680><c> or</c><00:08:32.000><c> at</c><00:08:32.080><c> least</c>

00:08:32.709 --> 00:08:32.719 align:start position:0%
to be the size of that heap or at least
 

00:08:32.719 --> 00:08:34.550 align:start position:0%
to be the size of that heap or at least
the<00:08:32.800><c> desired</c><00:08:33.440><c> size</c><00:08:33.680><c> of</c><00:08:33.839><c> it</c><00:08:33.919><c> so</c><00:08:34.080><c> min</c><00:08:34.320><c> heap</c>

00:08:34.550 --> 00:08:34.560 align:start position:0%
the desired size of it so min heap
 

00:08:34.560 --> 00:08:36.790 align:start position:0%
the desired size of it so min heap
initially<00:08:34.959><c> can</c><00:08:35.039><c> just</c><00:08:35.200><c> be</c><00:08:35.360><c> assigned</c><00:08:35.760><c> to</c><00:08:36.000><c> nums</c>

00:08:36.790 --> 00:08:36.800 align:start position:0%
initially can just be assigned to nums
 

00:08:36.800 --> 00:08:38.790 align:start position:0%
initially can just be assigned to nums
and<00:08:37.279><c> our</c><00:08:37.599><c> k</c><00:08:37.919><c> is</c><00:08:38.000><c> just</c><00:08:38.159><c> going</c><00:08:38.240><c> to</c><00:08:38.320><c> be</c><00:08:38.399><c> assigned</c>

00:08:38.790 --> 00:08:38.800 align:start position:0%
and our k is just going to be assigned
 

00:08:38.800 --> 00:08:41.350 align:start position:0%
and our k is just going to be assigned
to<00:08:39.039><c> the</c><00:08:39.360><c> input</c><00:08:39.599><c> parameter</c><00:08:40.159><c> k</c><00:08:40.640><c> we</c><00:08:40.800><c> want</c><00:08:40.959><c> to</c><00:08:41.120><c> turn</c>

00:08:41.350 --> 00:08:41.360 align:start position:0%
to the input parameter k we want to turn
 

00:08:41.360 --> 00:08:43.750 align:start position:0%
to the input parameter k we want to turn
this<00:08:41.680><c> into</c><00:08:41.919><c> a</c><00:08:42.080><c> heap</c><00:08:42.399><c> right</c><00:08:42.640><c> now</c><00:08:42.880><c> it's</c><00:08:43.120><c> just</c><00:08:43.440><c> a</c>

00:08:43.750 --> 00:08:43.760 align:start position:0%
this into a heap right now it's just a
 

00:08:43.760 --> 00:08:45.829 align:start position:0%
this into a heap right now it's just a
array<00:08:44.320><c> we</c><00:08:44.480><c> can</c><00:08:44.560><c> turn</c><00:08:44.800><c> it</c><00:08:44.959><c> into</c><00:08:45.200><c> a</c><00:08:45.279><c> heap</c><00:08:45.680><c> in</c>

00:08:45.829 --> 00:08:45.839 align:start position:0%
array we can turn it into a heap in
 

00:08:45.839 --> 00:08:48.550 align:start position:0%
array we can turn it into a heap in
python<00:08:46.240><c> like</c><00:08:46.399><c> this</c><00:08:46.640><c> heap</c><00:08:46.959><c> q</c><00:08:47.200><c> dot</c><00:08:47.440><c> heapify</c>

00:08:48.550 --> 00:08:48.560 align:start position:0%
python like this heap q dot heapify
 

00:08:48.560 --> 00:08:51.590 align:start position:0%
python like this heap q dot heapify
keepifying<00:08:49.200><c> this</c><00:08:49.519><c> array</c><00:08:50.080><c> into</c><00:08:50.560><c> a</c><00:08:51.040><c> min</c><00:08:51.360><c> heap</c>

00:08:51.590 --> 00:08:51.600 align:start position:0%
keepifying this array into a min heap
 

00:08:51.600 --> 00:08:53.990 align:start position:0%
keepifying this array into a min heap
that<00:08:51.839><c> will</c><00:08:52.080><c> create</c><00:08:52.399><c> the</c><00:08:52.560><c> sorted</c><00:08:53.040><c> property</c><00:08:53.760><c> it</c>

00:08:53.990 --> 00:08:54.000 align:start position:0%
that will create the sorted property it
 

00:08:54.000 --> 00:08:57.269 align:start position:0%
that will create the sorted property it
will<00:08:54.320><c> run</c><00:08:54.800><c> in</c><00:08:55.200><c> big</c><00:08:55.440><c> o</c><00:08:55.600><c> of</c><00:08:55.839><c> n</c><00:08:56.080><c> time</c><00:08:56.720><c> but</c><00:08:56.959><c> it</c><00:08:57.120><c> could</c>

00:08:57.269 --> 00:08:57.279 align:start position:0%
will run in big o of n time but it could
 

00:08:57.279 --> 00:08:59.350 align:start position:0%
will run in big o of n time but it could
be<00:08:57.440><c> that</c><00:08:57.680><c> it</c><00:08:57.760><c> has</c><00:08:58.000><c> more</c><00:08:58.160><c> than</c><00:08:58.399><c> k</c><00:08:58.720><c> element</c><00:08:59.120><c> so</c>

00:08:59.350 --> 00:08:59.360 align:start position:0%
be that it has more than k element so
 

00:08:59.360 --> 00:09:03.190 align:start position:0%
be that it has more than k element so
while<00:09:00.000><c> the</c><00:09:00.320><c> length</c><00:09:01.040><c> of</c><00:09:01.360><c> self.min</c><00:09:02.160><c> he</c><00:09:02.640><c> is</c>

00:09:03.190 --> 00:09:03.200 align:start position:0%
while the length of self.min he is
 

00:09:03.200 --> 00:09:08.230 align:start position:0%
while the length of self.min he is
greater<00:09:04.080><c> than</c><00:09:04.800><c> k</c><00:09:05.440><c> we</c><00:09:05.680><c> can</c><00:09:06.160><c> go</c><00:09:06.399><c> ahead</c><00:09:07.120><c> and</c><00:09:07.920><c> pop</c>

00:09:08.230 --> 00:09:08.240 align:start position:0%
greater than k we can go ahead and pop
 

00:09:08.240 --> 00:09:09.829 align:start position:0%
greater than k we can go ahead and pop
from<00:09:08.399><c> the</c><00:09:08.480><c> min</c><00:09:08.720><c> heap</c><00:09:08.959><c> we</c><00:09:09.120><c> can</c><00:09:09.200><c> do</c><00:09:09.440><c> that</c><00:09:09.600><c> with</c>

00:09:09.829 --> 00:09:09.839 align:start position:0%
from the min heap we can do that with
 

00:09:09.839 --> 00:09:12.710 align:start position:0%
from the min heap we can do that with
heap<00:09:10.160><c> q</c><00:09:10.480><c> dot</c><00:09:10.800><c> heap</c><00:09:11.519><c> pop</c>

00:09:12.710 --> 00:09:12.720 align:start position:0%
heap q dot heap pop
 

00:09:12.720 --> 00:09:15.990 align:start position:0%
heap q dot heap pop
on<00:09:13.200><c> the</c><00:09:13.519><c> min</c><00:09:13.839><c> heap</c><00:09:14.320><c> data</c><00:09:14.640><c> structure</c><00:09:15.600><c> and</c><00:09:15.839><c> don't</c>

00:09:15.990 --> 00:09:16.000 align:start position:0%
on the min heap data structure and don't
 

00:09:16.000 --> 00:09:18.150 align:start position:0%
on the min heap data structure and don't
forget<00:09:16.320><c> the</c><00:09:16.480><c> keyword</c><00:09:17.200><c> self</c><00:09:17.600><c> since</c><00:09:17.839><c> it's</c><00:09:18.000><c> a</c>

00:09:18.150 --> 00:09:18.160 align:start position:0%
forget the keyword self since it's a
 

00:09:18.160 --> 00:09:20.230 align:start position:0%
forget the keyword self since it's a
member<00:09:18.480><c> variable</c><00:09:19.200><c> so</c><00:09:19.360><c> the</c><00:09:19.440><c> constructor</c><00:09:20.080><c> isn't</c>

00:09:20.230 --> 00:09:20.240 align:start position:0%
member variable so the constructor isn't
 

00:09:20.240 --> 00:09:22.870 align:start position:0%
member variable so the constructor isn't
too<00:09:20.480><c> bad</c><00:09:20.800><c> now</c><00:09:20.959><c> let's</c><00:09:21.200><c> do</c><00:09:21.440><c> our</c><00:09:21.760><c> add</c><00:09:22.080><c> function</c>

00:09:22.870 --> 00:09:22.880 align:start position:0%
too bad now let's do our add function
 

00:09:22.880 --> 00:09:24.230 align:start position:0%
too bad now let's do our add function
there's<00:09:23.200><c> multiple</c><00:09:23.519><c> ways</c><00:09:23.760><c> you</c><00:09:23.839><c> could</c><00:09:24.000><c> write</c><00:09:24.160><c> it</c>

00:09:24.230 --> 00:09:24.240 align:start position:0%
there's multiple ways you could write it
 

00:09:24.240 --> 00:09:26.070 align:start position:0%
there's multiple ways you could write it
but<00:09:24.399><c> the</c><00:09:24.640><c> easiest</c><00:09:25.040><c> way</c><00:09:25.200><c> is</c><00:09:25.360><c> just</c><00:09:25.519><c> to</c><00:09:25.680><c> go</c><00:09:25.839><c> ahead</c>

00:09:26.070 --> 00:09:26.080 align:start position:0%
but the easiest way is just to go ahead
 

00:09:26.080 --> 00:09:28.389 align:start position:0%
but the easiest way is just to go ahead
and<00:09:26.240><c> add</c><00:09:26.640><c> this</c><00:09:26.959><c> value</c><00:09:27.600><c> to</c><00:09:27.760><c> our</c><00:09:28.000><c> min</c><00:09:28.160><c> heap</c>

00:09:28.389 --> 00:09:28.399 align:start position:0%
and add this value to our min heap
 

00:09:28.399 --> 00:09:30.630 align:start position:0%
and add this value to our min heap
regardless<00:09:29.120><c> of</c><00:09:29.200><c> what</c><00:09:29.360><c> it</c><00:09:29.519><c> is</c><00:09:29.760><c> if</c><00:09:29.920><c> it's</c><00:09:30.160><c> too</c><00:09:30.399><c> big</c>

00:09:30.630 --> 00:09:30.640 align:start position:0%
regardless of what it is if it's too big
 

00:09:30.640 --> 00:09:32.870 align:start position:0%
regardless of what it is if it's too big
or<00:09:30.880><c> if</c><00:09:30.959><c> it's</c><00:09:31.120><c> too</c><00:09:31.279><c> small</c><00:09:31.600><c> who</c><00:09:31.839><c> cares</c><00:09:32.320><c> we</c><00:09:32.480><c> can</c><00:09:32.720><c> go</c>

00:09:32.870 --> 00:09:32.880 align:start position:0%
or if it's too small who cares we can go
 

00:09:32.880 --> 00:09:39.110 align:start position:0%
or if it's too small who cares we can go
ahead<00:09:33.200><c> and</c><00:09:33.360><c> say</c><00:09:33.839><c> heap</c><00:09:34.240><c> q</c><00:09:34.800><c> dot</c>

00:09:39.110 --> 00:09:39.120 align:start position:0%
 
 

00:09:39.120 --> 00:09:40.630 align:start position:0%
 
this<00:09:39.440><c> value</c>

00:09:40.630 --> 00:09:40.640 align:start position:0%
this value
 

00:09:40.640 --> 00:09:43.110 align:start position:0%
this value
and<00:09:41.200><c> then</c><00:09:41.600><c> we're</c><00:09:41.760><c> gonna</c><00:09:42.080><c> pop</c><00:09:42.399><c> the</c><00:09:42.560><c> smallest</c>

00:09:43.110 --> 00:09:43.120 align:start position:0%
and then we're gonna pop the smallest
 

00:09:43.120 --> 00:09:45.590 align:start position:0%
and then we're gonna pop the smallest
value<00:09:43.519><c> which</c><00:09:43.920><c> might</c><00:09:44.240><c> end</c><00:09:44.480><c> up</c><00:09:44.640><c> being</c><00:09:45.279><c> this</c>

00:09:45.590 --> 00:09:45.600 align:start position:0%
value which might end up being this
 

00:09:45.600 --> 00:09:47.030 align:start position:0%
value which might end up being this
value<00:09:45.920><c> or</c><00:09:46.080><c> it</c><00:09:46.160><c> might</c><00:09:46.399><c> end</c><00:09:46.560><c> up</c><00:09:46.720><c> being</c><00:09:46.959><c> a</c>

00:09:47.030 --> 00:09:47.040 align:start position:0%
value or it might end up being a
 

00:09:47.040 --> 00:09:48.790 align:start position:0%
value or it might end up being a
different<00:09:47.360><c> value</c><00:09:47.760><c> who</c><00:09:47.920><c> knows</c><00:09:48.240><c> let's</c><00:09:48.399><c> go</c><00:09:48.560><c> ahead</c>

00:09:48.790 --> 00:09:48.800 align:start position:0%
different value who knows let's go ahead
 

00:09:48.800 --> 00:09:50.790 align:start position:0%
different value who knows let's go ahead
and<00:09:48.880><c> just</c><00:09:49.279><c> pop</c><00:09:49.600><c> it</c><00:09:49.839><c> and</c><00:09:50.000><c> our</c><00:09:50.160><c> heap</c><00:09:50.480><c> data</c>

00:09:50.790 --> 00:09:50.800 align:start position:0%
and just pop it and our heap data
 

00:09:50.800 --> 00:09:52.310 align:start position:0%
and just pop it and our heap data
structure<00:09:51.120><c> will</c><00:09:51.360><c> actually</c><00:09:51.680><c> take</c><00:09:52.000><c> care</c><00:09:52.160><c> of</c>

00:09:52.310 --> 00:09:52.320 align:start position:0%
structure will actually take care of
 

00:09:52.320 --> 00:09:54.710 align:start position:0%
structure will actually take care of
that<00:09:52.880><c> for</c><00:09:53.279><c> us</c><00:09:53.680><c> anyway</c>

00:09:54.710 --> 00:09:54.720 align:start position:0%
that for us anyway
 

00:09:54.720 --> 00:09:56.550 align:start position:0%
that for us anyway
but<00:09:54.959><c> there's</c><00:09:55.200><c> actually</c><00:09:55.519><c> just</c><00:09:55.760><c> one</c><00:09:56.000><c> edge</c><00:09:56.320><c> case</c>

00:09:56.550 --> 00:09:56.560 align:start position:0%
but there's actually just one edge case
 

00:09:56.560 --> 00:09:59.509 align:start position:0%
but there's actually just one edge case
that<00:09:56.640><c> you</c><00:09:56.880><c> might</c><00:09:57.279><c> miss</c><00:09:58.000><c> remember</c><00:09:58.640><c> our</c><00:09:58.959><c> heap</c>

00:09:59.509 --> 00:09:59.519 align:start position:0%
that you might miss remember our heap
 

00:09:59.519 --> 00:10:02.150 align:start position:0%
that you might miss remember our heap
might<00:09:59.760><c> be</c><00:10:00.000><c> initialized</c><00:10:00.800><c> with</c><00:10:01.200><c> less</c><00:10:01.519><c> than</c><00:10:01.839><c> k</c>

00:10:02.150 --> 00:10:02.160 align:start position:0%
might be initialized with less than k
 

00:10:02.160 --> 00:10:04.310 align:start position:0%
might be initialized with less than k
elements<00:10:02.880><c> this</c><00:10:03.200><c> loop</c><00:10:03.440><c> will</c><00:10:03.600><c> execute</c><00:10:04.079><c> if</c><00:10:04.160><c> it</c>

00:10:04.310 --> 00:10:04.320 align:start position:0%
elements this loop will execute if it
 

00:10:04.320 --> 00:10:06.069 align:start position:0%
elements this loop will execute if it
has<00:10:04.560><c> more</c><00:10:04.720><c> than</c><00:10:04.959><c> k</c><00:10:05.200><c> elements</c><00:10:05.600><c> which</c><00:10:05.839><c> is</c><00:10:05.920><c> good</c>

00:10:06.069 --> 00:10:06.079 align:start position:0%
has more than k elements which is good
 

00:10:06.079 --> 00:10:08.470 align:start position:0%
has more than k elements which is good
but<00:10:06.240><c> what</c><00:10:06.399><c> if</c><00:10:06.480><c> it</c><00:10:06.640><c> has</c><00:10:06.959><c> less</c><00:10:07.200><c> than</c><00:10:07.440><c> k</c><00:10:07.760><c> elements</c>

00:10:08.470 --> 00:10:08.480 align:start position:0%
but what if it has less than k elements
 

00:10:08.480 --> 00:10:11.030 align:start position:0%
but what if it has less than k elements
then<00:10:09.040><c> if</c><00:10:09.200><c> we</c><00:10:09.440><c> add</c><00:10:09.680><c> a</c><00:10:09.760><c> value</c><00:10:10.160><c> to</c><00:10:10.320><c> the</c><00:10:10.399><c> heap</c><00:10:10.800><c> we</c>

00:10:11.030 --> 00:10:11.040 align:start position:0%
then if we add a value to the heap we
 

00:10:11.040 --> 00:10:13.190 align:start position:0%
then if we add a value to the heap we
don't<00:10:11.279><c> want</c><00:10:11.440><c> to</c><00:10:11.680><c> pop</c><00:10:12.000><c> from</c><00:10:12.160><c> the</c><00:10:12.320><c> heap</c><00:10:12.800><c> if</c><00:10:12.959><c> it</c>

00:10:13.190 --> 00:10:13.200 align:start position:0%
don't want to pop from the heap if it
 

00:10:13.200 --> 00:10:16.230 align:start position:0%
don't want to pop from the heap if it
has<00:10:13.519><c> less</c><00:10:13.760><c> than</c><00:10:14.079><c> k</c><00:10:14.480><c> elements</c><00:10:15.279><c> or</c><00:10:15.600><c> even</c><00:10:15.920><c> equal</c>

00:10:16.230 --> 00:10:16.240 align:start position:0%
has less than k elements or even equal
 

00:10:16.240 --> 00:10:19.110 align:start position:0%
has less than k elements or even equal
to<00:10:16.399><c> k</c><00:10:16.640><c> elements</c><00:10:16.959><c> we</c><00:10:17.120><c> only</c><00:10:17.440><c> want</c><00:10:17.600><c> to</c><00:10:17.680><c> pop</c><00:10:18.160><c> if</c><00:10:18.720><c> the</c>

00:10:19.110 --> 00:10:19.120 align:start position:0%
to k elements we only want to pop if the
 

00:10:19.120 --> 00:10:22.630 align:start position:0%
to k elements we only want to pop if the
length<00:10:19.440><c> of</c><00:10:19.519><c> the</c><00:10:19.680><c> min</c><00:10:19.920><c> heap</c><00:10:20.560><c> is</c><00:10:21.200><c> greater</c><00:10:21.920><c> than</c><00:10:22.240><c> k</c>

00:10:22.630 --> 00:10:22.640 align:start position:0%
length of the min heap is greater than k
 

00:10:22.640 --> 00:10:24.470 align:start position:0%
length of the min heap is greater than k
elements<00:10:23.040><c> so</c><00:10:23.200><c> if</c><00:10:23.279><c> it's</c><00:10:23.519><c> greater</c><00:10:23.920><c> than</c><00:10:24.160><c> k</c>

00:10:24.470 --> 00:10:24.480 align:start position:0%
elements so if it's greater than k
 

00:10:24.480 --> 00:10:26.389 align:start position:0%
elements so if it's greater than k
that's<00:10:24.800><c> when</c><00:10:24.959><c> we</c><00:10:25.120><c> want</c><00:10:25.360><c> to</c><00:10:25.440><c> pop</c><00:10:25.760><c> from</c><00:10:26.000><c> the</c><00:10:26.160><c> min</c>

00:10:26.389 --> 00:10:26.399 align:start position:0%
that's when we want to pop from the min
 

00:10:26.399 --> 00:10:28.389 align:start position:0%
that's when we want to pop from the min
heap<00:10:26.880><c> but</c><00:10:27.200><c> once</c><00:10:27.440><c> we've</c><00:10:27.600><c> done</c><00:10:27.760><c> that</c><00:10:28.000><c> we</c><00:10:28.160><c> make</c>

00:10:28.389 --> 00:10:28.399 align:start position:0%
heap but once we've done that we make
 

00:10:28.399 --> 00:10:30.949 align:start position:0%
heap but once we've done that we make
sure<00:10:28.720><c> our</c><00:10:28.959><c> heap</c><00:10:29.279><c> is</c><00:10:29.519><c> valid</c><00:10:30.000><c> it</c><00:10:30.079><c> does</c><00:10:30.320><c> have</c><00:10:30.640><c> k</c>

00:10:30.949 --> 00:10:30.959 align:start position:0%
sure our heap is valid it does have k
 

00:10:30.959 --> 00:10:33.190 align:start position:0%
sure our heap is valid it does have k
elements<00:10:31.360><c> we're</c><00:10:31.519><c> guaranteed</c><00:10:32.160><c> that</c><00:10:32.880><c> when</c><00:10:33.040><c> the</c>

00:10:33.190 --> 00:10:33.200 align:start position:0%
elements we're guaranteed that when the
 

00:10:33.200 --> 00:10:35.110 align:start position:0%
elements we're guaranteed that when the
add<00:10:33.440><c> function</c><00:10:33.920><c> runs</c><00:10:34.320><c> so</c><00:10:34.480><c> now</c><00:10:34.640><c> we</c><00:10:34.800><c> just</c><00:10:34.880><c> want</c><00:10:35.040><c> to</c>

00:10:35.110 --> 00:10:35.120 align:start position:0%
add function runs so now we just want to
 

00:10:35.120 --> 00:10:38.470 align:start position:0%
add function runs so now we just want to
return<00:10:35.440><c> the</c><00:10:35.600><c> minimum</c><00:10:36.240><c> from</c><00:10:36.560><c> our</c><00:10:36.720><c> min</c><00:10:36.959><c> heap</c><00:10:37.600><c> and</c>

00:10:38.470 --> 00:10:38.480 align:start position:0%
return the minimum from our min heap and
 

00:10:38.480 --> 00:10:40.150 align:start position:0%
return the minimum from our min heap and
the<00:10:38.640><c> way</c><00:10:38.880><c> heaps</c><00:10:39.200><c> are</c><00:10:39.440><c> implemented</c><00:10:40.000><c> the</c>

00:10:40.150 --> 00:10:40.160 align:start position:0%
the way heaps are implemented the
 

00:10:40.160 --> 00:10:42.710 align:start position:0%
the way heaps are implemented the
minimum<00:10:40.640><c> value</c><00:10:41.040><c> will</c><00:10:41.279><c> always</c><00:10:41.760><c> be</c><00:10:42.000><c> stored</c><00:10:42.560><c> in</c>

00:10:42.710 --> 00:10:42.720 align:start position:0%
minimum value will always be stored in
 

00:10:42.720 --> 00:10:45.509 align:start position:0%
minimum value will always be stored in
the<00:10:42.959><c> zeroth</c><00:10:43.680><c> index</c><00:10:44.399><c> so</c><00:10:44.560><c> we</c><00:10:44.720><c> can</c><00:10:44.880><c> just</c><00:10:45.040><c> go</c><00:10:45.200><c> ahead</c>

00:10:45.509 --> 00:10:45.519 align:start position:0%
the zeroth index so we can just go ahead
 

00:10:45.519 --> 00:10:46.389 align:start position:0%
the zeroth index so we can just go ahead
and<00:10:45.600><c> return</c>

00:10:46.389 --> 00:10:46.399 align:start position:0%
and return
 

00:10:46.399 --> 00:10:47.350 align:start position:0%
and return
this

00:10:47.350 --> 00:10:47.360 align:start position:0%
this
 

00:10:47.360 --> 00:10:49.590 align:start position:0%
this
and<00:10:47.440><c> don't</c><00:10:47.680><c> be</c><00:10:47.839><c> dumb</c><00:10:48.079><c> like</c><00:10:48.320><c> me</c><00:10:48.560><c> we</c><00:10:48.720><c> forgot</c><00:10:49.040><c> to</c>

00:10:49.590 --> 00:10:49.600 align:start position:0%
and don't be dumb like me we forgot to
 

00:10:49.600 --> 00:10:51.990 align:start position:0%
and don't be dumb like me we forgot to
when<00:10:49.760><c> we're</c><00:10:50.399><c> referencing</c><00:10:50.959><c> min</c><00:10:51.279><c> heap</c><00:10:51.600><c> and</c><00:10:51.680><c> the</c>

00:10:51.990 --> 00:10:52.000 align:start position:0%
when we're referencing min heap and the
 

00:10:52.000 --> 00:10:54.069 align:start position:0%
when we're referencing min heap and the
k<00:10:52.320><c> value</c><00:10:52.640><c> we</c><00:10:52.880><c> want</c><00:10:53.120><c> to</c><00:10:53.600><c> make</c><00:10:53.760><c> sure</c><00:10:53.920><c> we</c>

00:10:54.069 --> 00:10:54.079 align:start position:0%
k value we want to make sure we
 

00:10:54.079 --> 00:10:55.910 align:start position:0%
k value we want to make sure we
reference<00:10:54.480><c> it</c><00:10:54.640><c> as</c><00:10:54.800><c> a</c><00:10:54.959><c> member</c><00:10:55.279><c> variable</c><00:10:55.760><c> so</c>

00:10:55.910 --> 00:10:55.920 align:start position:0%
reference it as a member variable so
 

00:10:55.920 --> 00:10:58.150 align:start position:0%
reference it as a member variable so
let's<00:10:56.160><c> use</c><00:10:56.399><c> the</c><00:10:56.560><c> keyword</c><00:10:57.279><c> self</c>

00:10:58.150 --> 00:10:58.160 align:start position:0%
let's use the keyword self
 

00:10:58.160 --> 00:11:00.710 align:start position:0%
let's use the keyword self
self.min<00:10:59.040><c> heap</c><00:10:59.519><c> okay</c><00:10:59.839><c> it</c><00:10:59.920><c> looks</c><00:11:00.160><c> good</c><00:11:00.320><c> to</c><00:11:00.480><c> me</c>

00:11:00.710 --> 00:11:00.720 align:start position:0%
self.min heap okay it looks good to me
 

00:11:00.720 --> 00:11:02.710 align:start position:0%
self.min heap okay it looks good to me
let's<00:11:01.040><c> run</c><00:11:01.279><c> it</c><00:11:01.360><c> to</c><00:11:01.519><c> make</c><00:11:01.600><c> sure</c><00:11:01.760><c> that</c><00:11:01.920><c> it</c><00:11:02.079><c> works</c>

00:11:02.710 --> 00:11:02.720 align:start position:0%
let's run it to make sure that it works
 

00:11:02.720 --> 00:11:04.230 align:start position:0%
let's run it to make sure that it works
and<00:11:02.880><c> as</c><00:11:03.040><c> you</c><00:11:03.200><c> can</c><00:11:03.279><c> see</c><00:11:03.440><c> on</c><00:11:03.519><c> the</c><00:11:03.600><c> left</c><00:11:03.920><c> yes</c><00:11:04.160><c> it</c>

00:11:04.230 --> 00:11:04.240 align:start position:0%
and as you can see on the left yes it
 

00:11:04.240 --> 00:11:05.990 align:start position:0%
and as you can see on the left yes it
does<00:11:04.480><c> work</c><00:11:04.720><c> and</c><00:11:04.800><c> it's</c><00:11:04.959><c> about</c><00:11:05.279><c> as</c><00:11:05.360><c> efficient</c><00:11:05.839><c> as</c>

00:11:05.990 --> 00:11:06.000 align:start position:0%
does work and it's about as efficient as
 

00:11:06.000 --> 00:11:07.590 align:start position:0%
does work and it's about as efficient as
we<00:11:06.160><c> can</c><00:11:06.320><c> get</c><00:11:06.560><c> so</c><00:11:06.720><c> i</c><00:11:06.880><c> really</c><00:11:07.040><c> hope</c><00:11:07.279><c> that</c><00:11:07.360><c> this</c>

00:11:07.590 --> 00:11:07.600 align:start position:0%
we can get so i really hope that this
 

00:11:07.600 --> 00:11:09.670 align:start position:0%
we can get so i really hope that this
was<00:11:07.760><c> helpful</c><00:11:08.240><c> if</c><00:11:08.399><c> it</c><00:11:08.560><c> was</c><00:11:09.040><c> please</c><00:11:09.360><c> like</c><00:11:09.600><c> and</c>

00:11:09.670 --> 00:11:09.680 align:start position:0%
was helpful if it was please like and
 

00:11:09.680 --> 00:11:11.509 align:start position:0%
was helpful if it was please like and
subscribe<00:11:10.240><c> it</c><00:11:10.399><c> really</c><00:11:10.640><c> supports</c><00:11:11.040><c> the</c><00:11:11.120><c> channel</c>

00:11:11.509 --> 00:11:11.519 align:start position:0%
subscribe it really supports the channel
 

00:11:11.519 --> 00:11:13.110 align:start position:0%
subscribe it really supports the channel
a<00:11:11.600><c> lot</c><00:11:11.760><c> consider</c><00:11:12.160><c> checking</c><00:11:12.399><c> out</c><00:11:12.480><c> my</c><00:11:12.640><c> patreon</c>

00:11:13.110 --> 00:11:13.120 align:start position:0%
a lot consider checking out my patreon
 

00:11:13.120 --> 00:11:14.150 align:start position:0%
a lot consider checking out my patreon
where<00:11:13.279><c> you</c><00:11:13.360><c> can</c><00:11:13.440><c> further</c><00:11:13.680><c> support</c><00:11:14.000><c> the</c>

00:11:14.150 --> 00:11:14.160 align:start position:0%
where you can further support the
 

00:11:14.160 --> 00:11:15.509 align:start position:0%
where you can further support the
channel<00:11:14.480><c> and</c><00:11:14.640><c> hopefully</c><00:11:15.040><c> i'll</c><00:11:15.279><c> see</c><00:11:15.440><c> you</c>

00:11:15.509 --> 00:11:15.519 align:start position:0%
channel and hopefully i'll see you
 

00:11:15.519 --> 00:11:19.200 align:start position:0%
channel and hopefully i'll see you
pretty<00:11:15.760><c> soon</c><00:11:16.160><c> thanks</c><00:11:16.399><c> for</c><00:11:16.560><c> watching</c>

