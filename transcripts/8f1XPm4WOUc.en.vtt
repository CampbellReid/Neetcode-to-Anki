WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.829 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.199><c> back</c><00:00:01.439><c> and</c><00:00:01.520><c> let's</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.839 --> 00:00:03.830 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.000><c> some</c><00:00:02.240><c> more</c><00:00:02.480><c> neat</c><00:00:02.720><c> code</c><00:00:02.960><c> today</c><00:00:03.280><c> so</c><00:00:03.520><c> today</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
write some more neat code today so today
 

00:00:03.840 --> 00:00:04.550 align:start position:0%
write some more neat code today so today
let's<00:00:04.160><c> solve</c>

00:00:04.550 --> 00:00:04.560 align:start position:0%
let's solve
 

00:00:04.560 --> 00:00:06.869 align:start position:0%
let's solve
number<00:00:04.880><c> of</c><00:00:05.040><c> connected</c><00:00:05.759><c> components</c><00:00:06.480><c> in</c><00:00:06.640><c> an</c>

00:00:06.869 --> 00:00:06.879 align:start position:0%
number of connected components in an
 

00:00:06.879 --> 00:00:08.549 align:start position:0%
number of connected components in an
undirected<00:00:07.919><c> graph</c>

00:00:08.549 --> 00:00:08.559 align:start position:0%
undirected graph
 

00:00:08.559 --> 00:00:10.470 align:start position:0%
undirected graph
and<00:00:08.800><c> yes</c><00:00:09.120><c> this</c><00:00:09.360><c> is</c><00:00:09.440><c> once</c><00:00:09.679><c> again</c><00:00:09.920><c> a</c><00:00:10.080><c> problem</c>

00:00:10.470 --> 00:00:10.480 align:start position:0%
and yes this is once again a problem
 

00:00:10.480 --> 00:00:12.310 align:start position:0%
and yes this is once again a problem
from<00:00:10.719><c> our</c><00:00:10.880><c> blind</c><00:00:11.200><c> 75</c><00:00:11.920><c> list</c>

00:00:12.310 --> 00:00:12.320 align:start position:0%
from our blind 75 list
 

00:00:12.320 --> 00:00:13.910 align:start position:0%
from our blind 75 list
the<00:00:12.559><c> link</c><00:00:12.799><c> to</c><00:00:12.880><c> the</c><00:00:13.040><c> spreadsheet</c><00:00:13.519><c> will</c><00:00:13.679><c> be</c><00:00:13.840><c> in</c>

00:00:13.910 --> 00:00:13.920 align:start position:0%
the link to the spreadsheet will be in
 

00:00:13.920 --> 00:00:15.190 align:start position:0%
the link to the spreadsheet will be in
the<00:00:14.000><c> description</c><00:00:14.559><c> if</c><00:00:14.639><c> you</c><00:00:14.719><c> want</c><00:00:14.880><c> to</c><00:00:14.960><c> take</c><00:00:15.120><c> a</c>

00:00:15.190 --> 00:00:15.200 align:start position:0%
the description if you want to take a
 

00:00:15.200 --> 00:00:16.070 align:start position:0%
the description if you want to take a
look<00:00:15.440><c> you</c><00:00:15.519><c> can</c><00:00:15.599><c> see</c><00:00:15.759><c> about</c>

00:00:16.070 --> 00:00:16.080 align:start position:0%
look you can see about
 

00:00:16.080 --> 00:00:18.230 align:start position:0%
look you can see about
18<00:00:16.480><c> people</c><00:00:16.800><c> are</c><00:00:16.960><c> currently</c><00:00:17.440><c> viewing</c><00:00:17.760><c> it</c>

00:00:18.230 --> 00:00:18.240 align:start position:0%
18 people are currently viewing it
 

00:00:18.240 --> 00:00:19.750 align:start position:0%
18 people are currently viewing it
including<00:00:18.720><c> me</c><00:00:19.039><c> but</c>

00:00:19.750 --> 00:00:19.760 align:start position:0%
including me but
 

00:00:19.760 --> 00:00:22.710 align:start position:0%
including me but
so<00:00:20.080><c> this</c><00:00:20.720><c> is</c><00:00:20.880><c> a</c><00:00:21.039><c> problem</c><00:00:21.760><c> problem</c><00:00:22.000><c> 34</c><00:00:22.560><c> from</c>

00:00:22.710 --> 00:00:22.720 align:start position:0%
so this is a problem problem 34 from
 

00:00:22.720 --> 00:00:24.550 align:start position:0%
so this is a problem problem 34 from
that<00:00:22.880><c> list</c><00:00:23.199><c> number</c><00:00:23.439><c> of</c><00:00:23.519><c> connected</c><00:00:24.000><c> components</c>

00:00:24.550 --> 00:00:24.560 align:start position:0%
that list number of connected components
 

00:00:24.560 --> 00:00:25.990 align:start position:0%
that list number of connected components
so<00:00:24.800><c> this</c><00:00:24.960><c> is</c><00:00:25.119><c> the</c><00:00:25.199><c> graph</c><00:00:25.519><c> one</c><00:00:25.680><c> we'll</c><00:00:25.840><c> be</c>

00:00:25.990 --> 00:00:26.000 align:start position:0%
so this is the graph one we'll be
 

00:00:26.000 --> 00:00:27.109 align:start position:0%
so this is the graph one we'll be
solving<00:00:26.320><c> today</c>

00:00:27.109 --> 00:00:27.119 align:start position:0%
solving today
 

00:00:27.119 --> 00:00:29.109 align:start position:0%
solving today
probably<00:00:27.680><c> tomorrow</c><00:00:28.160><c> i'll</c><00:00:28.400><c> finally</c><00:00:28.720><c> go</c><00:00:28.880><c> ahead</c>

00:00:29.109 --> 00:00:29.119 align:start position:0%
probably tomorrow i'll finally go ahead
 

00:00:29.119 --> 00:00:30.710 align:start position:0%
probably tomorrow i'll finally go ahead
and<00:00:29.199><c> do</c><00:00:29.519><c> alien</c><00:00:29.920><c> dictionary</c>

00:00:30.710 --> 00:00:30.720 align:start position:0%
and do alien dictionary
 

00:00:30.720 --> 00:00:32.549 align:start position:0%
and do alien dictionary
so<00:00:30.880><c> the</c><00:00:31.039><c> main</c><00:00:31.199><c> reason</c><00:00:31.519><c> i've</c><00:00:31.679><c> been</c><00:00:31.840><c> putting</c><00:00:32.160><c> off</c>

00:00:32.549 --> 00:00:32.559 align:start position:0%
so the main reason i've been putting off
 

00:00:32.559 --> 00:00:34.549 align:start position:0%
so the main reason i've been putting off
alien<00:00:32.960><c> dictionary</c><00:00:33.440><c> and</c><00:00:33.600><c> even</c><00:00:33.920><c> this</c><00:00:34.160><c> problem</c>

00:00:34.549 --> 00:00:34.559 align:start position:0%
alien dictionary and even this problem
 

00:00:34.559 --> 00:00:36.630 align:start position:0%
alien dictionary and even this problem
is<00:00:34.719><c> because</c><00:00:35.120><c> i</c><00:00:35.200><c> couldn't</c><00:00:35.520><c> really</c><00:00:35.760><c> find</c><00:00:36.160><c> a</c><00:00:36.320><c> free</c>

00:00:36.630 --> 00:00:36.640 align:start position:0%
is because i couldn't really find a free
 

00:00:36.640 --> 00:00:38.709 align:start position:0%
is because i couldn't really find a free
version<00:00:36.960><c> of</c><00:00:37.120><c> these</c><00:00:37.360><c> problems</c><00:00:37.840><c> on</c><00:00:38.000><c> the</c><00:00:38.160><c> website</c>

00:00:38.709 --> 00:00:38.719 align:start position:0%
version of these problems on the website
 

00:00:38.719 --> 00:00:40.709 align:start position:0%
version of these problems on the website
lint<00:00:39.120><c> code</c><00:00:39.440><c> so</c><00:00:39.600><c> i</c><00:00:39.680><c> actually</c><00:00:39.920><c> went</c><00:00:40.160><c> ahead</c><00:00:40.480><c> and</c>

00:00:40.709 --> 00:00:40.719 align:start position:0%
lint code so i actually went ahead and
 

00:00:40.719 --> 00:00:41.830 align:start position:0%
lint code so i actually went ahead and
and<00:00:40.960><c> shelled</c><00:00:41.360><c> out</c><00:00:41.520><c> the</c>

00:00:41.830 --> 00:00:41.840 align:start position:0%
and shelled out the
 

00:00:41.840 --> 00:00:45.430 align:start position:0%
and shelled out the
35<00:00:42.480><c> bucks</c><00:00:42.879><c> for</c><00:00:43.280><c> a</c><00:00:43.520><c> leak</c><00:00:43.760><c> code</c><00:00:44.480><c> monthly</c>

00:00:45.430 --> 00:00:45.440 align:start position:0%
35 bucks for a leak code monthly
 

00:00:45.440 --> 00:00:47.990 align:start position:0%
35 bucks for a leak code monthly
premium<00:00:45.920><c> subscription</c><00:00:46.960><c> so</c><00:00:47.200><c> for</c><00:00:47.360><c> the</c><00:00:47.440><c> next</c><00:00:47.680><c> 30</c>

00:00:47.990 --> 00:00:48.000 align:start position:0%
premium subscription so for the next 30
 

00:00:48.000 --> 00:00:49.910 align:start position:0%
premium subscription so for the next 30
days<00:00:48.320><c> i</c><00:00:48.399><c> will</c><00:00:48.559><c> have</c><00:00:48.800><c> leak</c><00:00:49.039><c> code</c><00:00:49.280><c> premium</c><00:00:49.600><c> so</c><00:00:49.760><c> if</c>

00:00:49.910 --> 00:00:49.920 align:start position:0%
days i will have leak code premium so if
 

00:00:49.920 --> 00:00:51.510 align:start position:0%
days i will have leak code premium so if
you<00:00:50.079><c> have</c><00:00:50.239><c> any</c><00:00:50.399><c> premium</c><00:00:50.960><c> problems</c><00:00:51.360><c> that</c><00:00:51.440><c> you</c>

00:00:51.510 --> 00:00:51.520 align:start position:0%
you have any premium problems that you
 

00:00:51.520 --> 00:00:53.029 align:start position:0%
you have any premium problems that you
want<00:00:51.680><c> to</c><00:00:51.760><c> suggest</c><00:00:52.160><c> feel</c><00:00:52.399><c> free</c><00:00:52.559><c> to</c><00:00:52.640><c> do</c><00:00:52.800><c> that</c><00:00:52.960><c> in</c>

00:00:53.029 --> 00:00:53.039 align:start position:0%
want to suggest feel free to do that in
 

00:00:53.039 --> 00:00:53.830 align:start position:0%
want to suggest feel free to do that in
the<00:00:53.199><c> description</c>

00:00:53.830 --> 00:00:53.840 align:start position:0%
the description
 

00:00:53.840 --> 00:00:55.910 align:start position:0%
the description
big<00:00:54.079><c> shout</c><00:00:54.320><c> out</c><00:00:54.480><c> to</c><00:00:54.640><c> my</c><00:00:54.800><c> patreon</c><00:00:55.440><c> supporters</c>

00:00:55.910 --> 00:00:55.920 align:start position:0%
big shout out to my patreon supporters
 

00:00:55.920 --> 00:00:57.430 align:start position:0%
big shout out to my patreon supporters
for<00:00:56.079><c> making</c><00:00:56.399><c> this</c><00:00:56.640><c> possible</c>

00:00:57.430 --> 00:00:57.440 align:start position:0%
for making this possible
 

00:00:57.440 --> 00:00:58.950 align:start position:0%
for making this possible
but<00:00:57.600><c> yeah</c><00:00:57.760><c> so</c><00:00:57.920><c> now</c><00:00:58.079><c> let's</c><00:00:58.320><c> actually</c><00:00:58.559><c> get</c><00:00:58.719><c> into</c>

00:00:58.950 --> 00:00:58.960 align:start position:0%
but yeah so now let's actually get into
 

00:00:58.960 --> 00:01:01.029 align:start position:0%
but yeah so now let's actually get into
the<00:00:59.039><c> problems</c><00:00:59.440><c> so</c><00:00:59.600><c> we're</c><00:00:59.840><c> given</c><00:01:00.160><c> a</c><00:01:00.320><c> graph</c><00:01:00.800><c> of</c>

00:01:01.029 --> 00:01:01.039 align:start position:0%
the problems so we're given a graph of
 

00:01:01.039 --> 00:01:04.070 align:start position:0%
the problems so we're given a graph of
n<00:01:01.359><c> nodes</c><00:01:01.840><c> pretty</c><00:01:02.160><c> simple</c><00:01:02.559><c> so</c><00:01:02.800><c> far</c><00:01:03.440><c> so</c><00:01:03.920><c> the</c>

00:01:04.070 --> 00:01:04.080 align:start position:0%
n nodes pretty simple so far so the
 

00:01:04.080 --> 00:01:05.109 align:start position:0%
n nodes pretty simple so far so the
number<00:01:04.320><c> of</c><00:01:04.479><c> nodes</c><00:01:04.799><c> will</c>

00:01:05.109 --> 00:01:05.119 align:start position:0%
number of nodes will
 

00:01:05.119 --> 00:01:07.190 align:start position:0%
number of nodes will
be<00:01:05.280><c> given</c><00:01:05.519><c> to</c><00:01:05.760><c> us</c><00:01:05.920><c> with</c><00:01:06.080><c> an</c><00:01:06.320><c> integer</c><00:01:06.799><c> n</c><00:01:07.119><c> and</c>

00:01:07.190 --> 00:01:07.200 align:start position:0%
be given to us with an integer n and
 

00:01:07.200 --> 00:01:09.830 align:start position:0%
be given to us with an integer n and
we're<00:01:07.439><c> also</c><00:01:07.840><c> just</c><00:01:08.240><c> given</c><00:01:08.640><c> an</c><00:01:08.799><c> array</c><00:01:09.439><c> of</c>

00:01:09.830 --> 00:01:09.840 align:start position:0%
we're also just given an array of
 

00:01:09.840 --> 00:01:13.030 align:start position:0%
we're also just given an array of
edges<00:01:10.479><c> belonging</c><00:01:11.119><c> to</c><00:01:11.360><c> this</c><00:01:11.600><c> graph</c><00:01:12.159><c> every</c><00:01:12.479><c> edge</c>

00:01:13.030 --> 00:01:13.040 align:start position:0%
edges belonging to this graph every edge
 

00:01:13.040 --> 00:01:16.070 align:start position:0%
edges belonging to this graph every edge
is<00:01:13.439><c> undirected</c><00:01:14.560><c> it</c><00:01:14.720><c> connects</c><00:01:15.280><c> two</c><00:01:15.600><c> nodes</c>

00:01:16.070 --> 00:01:16.080 align:start position:0%
is undirected it connects two nodes
 

00:01:16.080 --> 00:01:19.590 align:start position:0%
is undirected it connects two nodes
a<00:01:16.479><c> and</c><00:01:16.640><c> b</c><00:01:16.960><c> together</c><00:01:17.920><c> and</c><00:01:18.400><c> all</c><00:01:18.720><c> we</c><00:01:18.960><c> need</c><00:01:19.119><c> to</c><00:01:19.280><c> do</c>

00:01:19.590 --> 00:01:19.600 align:start position:0%
a and b together and all we need to do
 

00:01:19.600 --> 00:01:22.469 align:start position:0%
a and b together and all we need to do
is<00:01:19.840><c> just</c><00:01:20.240><c> return</c><00:01:20.880><c> the</c><00:01:21.119><c> number</c><00:01:21.520><c> of</c><00:01:21.759><c> connected</c>

00:01:22.469 --> 00:01:22.479 align:start position:0%
is just return the number of connected
 

00:01:22.479 --> 00:01:24.390 align:start position:0%
is just return the number of connected
components<00:01:23.119><c> in</c><00:01:23.280><c> the</c><00:01:23.360><c> graph</c><00:01:23.680><c> now</c><00:01:23.920><c> what</c><00:01:24.159><c> is</c><00:01:24.320><c> a</c>

00:01:24.390 --> 00:01:24.400 align:start position:0%
components in the graph now what is a
 

00:01:24.400 --> 00:01:26.230 align:start position:0%
components in the graph now what is a
connected<00:01:24.799><c> component</c><00:01:25.280><c> you</c><00:01:25.439><c> probably</c><00:01:25.840><c> already</c>

00:01:26.230 --> 00:01:26.240 align:start position:0%
connected component you probably already
 

00:01:26.240 --> 00:01:27.749 align:start position:0%
connected component you probably already
know<00:01:26.400><c> but</c><00:01:26.560><c> it's</c><00:01:26.720><c> basically</c><00:01:27.280><c> just</c>

00:01:27.749 --> 00:01:27.759 align:start position:0%
know but it's basically just
 

00:01:27.759 --> 00:01:30.149 align:start position:0%
know but it's basically just
an<00:01:28.080><c> individual</c><00:01:28.960><c> portion</c><00:01:29.439><c> of</c><00:01:29.600><c> the</c><00:01:29.759><c> graph</c>

00:01:30.149 --> 00:01:30.159 align:start position:0%
an individual portion of the graph
 

00:01:30.159 --> 00:01:31.670 align:start position:0%
an individual portion of the graph
that's<00:01:30.560><c> all</c><00:01:30.799><c> contiguous</c>

00:01:31.670 --> 00:01:31.680 align:start position:0%
that's all contiguous
 

00:01:31.680 --> 00:01:33.590 align:start position:0%
that's all contiguous
see<00:01:31.840><c> how</c><00:01:32.079><c> everything</c><00:01:32.640><c> in</c><00:01:32.720><c> this</c><00:01:32.960><c> portion</c><00:01:33.439><c> is</c>

00:01:33.590 --> 00:01:33.600 align:start position:0%
see how everything in this portion is
 

00:01:33.600 --> 00:01:35.270 align:start position:0%
see how everything in this portion is
connected<00:01:34.320><c> we</c><00:01:34.479><c> also</c><00:01:34.799><c> have</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
connected we also have
 

00:01:35.280 --> 00:01:38.069 align:start position:0%
connected we also have
a<00:01:35.520><c> second</c><00:01:36.000><c> portion</c><00:01:36.400><c> which</c><00:01:36.640><c> is</c><00:01:36.960><c> disjoint</c><00:01:37.920><c> right</c>

00:01:38.069 --> 00:01:38.079 align:start position:0%
a second portion which is disjoint right
 

00:01:38.079 --> 00:01:40.870 align:start position:0%
a second portion which is disjoint right
so<00:01:38.320><c> these</c><00:01:38.640><c> two</c><00:01:38.880><c> components</c><00:01:39.520><c> are</c><00:01:39.840><c> disjoint</c>

00:01:40.870 --> 00:01:40.880 align:start position:0%
so these two components are disjoint
 

00:01:40.880 --> 00:01:42.950 align:start position:0%
so these two components are disjoint
right<00:01:41.280><c> they</c><00:01:41.680><c> they</c><00:01:41.840><c> are</c><00:01:42.000><c> not</c><00:01:42.240><c> connected</c><00:01:42.799><c> to</c>

00:01:42.950 --> 00:01:42.960 align:start position:0%
right they they are not connected to
 

00:01:42.960 --> 00:01:43.990 align:start position:0%
right they they are not connected to
each<00:01:43.119><c> other</c><00:01:43.680><c> but</c>

00:01:43.990 --> 00:01:44.000 align:start position:0%
each other but
 

00:01:44.000 --> 00:01:45.830 align:start position:0%
each other but
each<00:01:44.240><c> of</c><00:01:44.320><c> them</c><00:01:44.720><c> separately</c><00:01:45.280><c> is</c><00:01:45.439><c> connected</c>

00:01:45.830 --> 00:01:45.840 align:start position:0%
each of them separately is connected
 

00:01:45.840 --> 00:01:47.910 align:start position:0%
each of them separately is connected
right<00:01:46.000><c> like</c><00:01:46.240><c> every</c><00:01:46.640><c> of</c><00:01:46.880><c> these</c><00:01:47.119><c> three</c><00:01:47.439><c> nodes</c><00:01:47.840><c> is</c>

00:01:47.910 --> 00:01:47.920 align:start position:0%
right like every of these three nodes is
 

00:01:47.920 --> 00:01:49.350 align:start position:0%
right like every of these three nodes is
connected<00:01:48.399><c> together</c>

00:01:49.350 --> 00:01:49.360 align:start position:0%
connected together
 

00:01:49.360 --> 00:01:50.950 align:start position:0%
connected together
these<00:01:49.600><c> two</c><00:01:49.759><c> nodes</c><00:01:50.079><c> are</c><00:01:50.159><c> connected</c><00:01:50.560><c> together</c>

00:01:50.950 --> 00:01:50.960 align:start position:0%
these two nodes are connected together
 

00:01:50.960 --> 00:01:52.870 align:start position:0%
these two nodes are connected together
therefore<00:01:51.680><c> we</c><00:01:51.840><c> have</c><00:01:52.159><c> two</c>

00:01:52.870 --> 00:01:52.880 align:start position:0%
therefore we have two
 

00:01:52.880 --> 00:01:55.510 align:start position:0%
therefore we have two
different<00:01:53.280><c> contiguous</c><00:01:54.240><c> components</c><00:01:55.360><c> so</c>

00:01:55.510 --> 00:01:55.520 align:start position:0%
different contiguous components so
 

00:01:55.520 --> 00:01:57.190 align:start position:0%
different contiguous components so
there's<00:01:55.759><c> not</c><00:01:56.000><c> a</c><00:01:56.079><c> lot</c><00:01:56.240><c> of</c><00:01:56.399><c> edge</c><00:01:56.719><c> cases</c><00:01:57.040><c> with</c>

00:01:57.190 --> 00:01:57.200 align:start position:0%
there's not a lot of edge cases with
 

00:01:57.200 --> 00:01:58.789 align:start position:0%
there's not a lot of edge cases with
this<00:01:57.439><c> problem</c><00:01:57.759><c> it's</c><00:01:57.920><c> pretty</c><00:01:58.159><c> straightforward</c>

00:01:58.789 --> 00:01:58.799 align:start position:0%
this problem it's pretty straightforward
 

00:01:58.799 --> 00:02:00.469 align:start position:0%
this problem it's pretty straightforward
so<00:01:59.040><c> for</c><00:01:59.200><c> example</c><00:01:59.520><c> if</c><00:01:59.600><c> we</c><00:01:59.680><c> were</c><00:01:59.840><c> just</c><00:02:00.000><c> given</c>

00:02:00.469 --> 00:02:00.479 align:start position:0%
so for example if we were just given
 

00:02:00.479 --> 00:02:03.350 align:start position:0%
so for example if we were just given
two<00:02:00.719><c> nodes</c><00:02:01.360><c> zero</c><00:02:01.759><c> two</c><00:02:02.159><c> no</c><00:02:02.399><c> edges</c><00:02:02.880><c> between</c><00:02:03.200><c> them</c>

00:02:03.350 --> 00:02:03.360 align:start position:0%
two nodes zero two no edges between them
 

00:02:03.360 --> 00:02:04.950 align:start position:0%
two nodes zero two no edges between them
then<00:02:03.520><c> we</c><00:02:03.680><c> would</c><00:02:03.840><c> just</c><00:02:04.000><c> return</c><00:02:04.320><c> the</c><00:02:04.560><c> number</c><00:02:04.799><c> of</c>

00:02:04.950 --> 00:02:04.960 align:start position:0%
then we would just return the number of
 

00:02:04.960 --> 00:02:06.469 align:start position:0%
then we would just return the number of
nodes<00:02:05.280><c> we're</c><00:02:05.439><c> given</c><00:02:05.759><c> two</c><00:02:06.000><c> nodes</c>

00:02:06.469 --> 00:02:06.479 align:start position:0%
nodes we're given two nodes
 

00:02:06.479 --> 00:02:07.990 align:start position:0%
nodes we're given two nodes
therefore<00:02:06.960><c> we</c><00:02:07.040><c> have</c><00:02:07.200><c> two</c><00:02:07.439><c> connected</c>

00:02:07.990 --> 00:02:08.000 align:start position:0%
therefore we have two connected
 

00:02:08.000 --> 00:02:10.389 align:start position:0%
therefore we have two connected
components<00:02:08.560><c> right</c><00:02:08.879><c> one</c><00:02:09.119><c> node</c><00:02:09.440><c> by</c><00:02:09.599><c> itself</c><00:02:10.080><c> does</c>

00:02:10.389 --> 00:02:10.399 align:start position:0%
components right one node by itself does
 

00:02:10.399 --> 00:02:12.150 align:start position:0%
components right one node by itself does
count<00:02:10.720><c> as</c><00:02:10.879><c> a</c><00:02:10.959><c> connected</c><00:02:11.360><c> component</c>

00:02:12.150 --> 00:02:12.160 align:start position:0%
count as a connected component
 

00:02:12.160 --> 00:02:13.670 align:start position:0%
count as a connected component
and<00:02:12.319><c> of</c><00:02:12.400><c> course</c><00:02:12.640><c> if</c><00:02:12.720><c> we're</c><00:02:12.879><c> not</c><00:02:13.040><c> given</c><00:02:13.440><c> any</c>

00:02:13.670 --> 00:02:13.680 align:start position:0%
and of course if we're not given any
 

00:02:13.680 --> 00:02:15.750 align:start position:0%
and of course if we're not given any
nodes<00:02:14.080><c> n</c><00:02:14.239><c> equals</c><00:02:14.480><c> zero</c><00:02:14.800><c> then</c><00:02:14.959><c> we</c><00:02:15.120><c> return</c><00:02:15.440><c> zero</c>

00:02:15.750 --> 00:02:15.760 align:start position:0%
nodes n equals zero then we return zero
 

00:02:15.760 --> 00:02:16.309 align:start position:0%
nodes n equals zero then we return zero
but

00:02:16.309 --> 00:02:16.319 align:start position:0%
but
 

00:02:16.319 --> 00:02:18.229 align:start position:0%
but
clearly<00:02:17.120><c> this</c><00:02:17.280><c> is</c><00:02:17.440><c> pretty</c><00:02:17.680><c> straightforward</c>

00:02:18.229 --> 00:02:18.239 align:start position:0%
clearly this is pretty straightforward
 

00:02:18.239 --> 00:02:19.589 align:start position:0%
clearly this is pretty straightforward
so<00:02:18.400><c> far</c><00:02:18.560><c> so</c><00:02:18.720><c> there's</c><00:02:18.879><c> a</c><00:02:18.959><c> couple</c><00:02:19.200><c> of</c><00:02:19.280><c> ways</c><00:02:19.520><c> to</c>

00:02:19.589 --> 00:02:19.599 align:start position:0%
so far so there's a couple of ways to
 

00:02:19.599 --> 00:02:20.790 align:start position:0%
so far so there's a couple of ways to
solve<00:02:19.840><c> this</c><00:02:20.160><c> problem</c>

00:02:20.790 --> 00:02:20.800 align:start position:0%
solve this problem
 

00:02:20.800 --> 00:02:22.869 align:start position:0%
solve this problem
so<00:02:20.959><c> we're</c><00:02:21.200><c> given</c><00:02:21.520><c> the</c><00:02:21.680><c> edges</c><00:02:22.080><c> as</c><00:02:22.239><c> a</c><00:02:22.400><c> list</c><00:02:22.720><c> of</c>

00:02:22.869 --> 00:02:22.879 align:start position:0%
so we're given the edges as a list of
 

00:02:22.879 --> 00:02:24.710 align:start position:0%
so we're given the edges as a list of
edges<00:02:23.120><c> but</c><00:02:23.280><c> we</c><00:02:23.440><c> could</c><00:02:23.680><c> make</c><00:02:23.840><c> an</c><00:02:24.000><c> adjacency</c>

00:02:24.710 --> 00:02:24.720 align:start position:0%
edges but we could make an adjacency
 

00:02:24.720 --> 00:02:25.190 align:start position:0%
edges but we could make an adjacency
list

00:02:25.190 --> 00:02:25.200 align:start position:0%
list
 

00:02:25.200 --> 00:02:27.910 align:start position:0%
list
which<00:02:25.360><c> would</c><00:02:25.520><c> make</c><00:02:26.000><c> it</c><00:02:26.319><c> easy</c><00:02:26.720><c> to</c><00:02:26.959><c> do</c><00:02:27.200><c> a</c><00:02:27.280><c> dfs</c>

00:02:27.910 --> 00:02:27.920 align:start position:0%
which would make it easy to do a dfs
 

00:02:27.920 --> 00:02:29.750 align:start position:0%
which would make it easy to do a dfs
search<00:02:28.239><c> on</c><00:02:28.400><c> the</c><00:02:28.560><c> entire</c><00:02:28.959><c> graph</c><00:02:29.120><c> so</c><00:02:29.280><c> that's</c><00:02:29.520><c> one</c>

00:02:29.750 --> 00:02:29.760 align:start position:0%
search on the entire graph so that's one
 

00:02:29.760 --> 00:02:31.110 align:start position:0%
search on the entire graph so that's one
way<00:02:29.920><c> to</c><00:02:30.000><c> solve</c><00:02:30.239><c> this</c><00:02:30.480><c> problem</c><00:02:30.720><c> just</c><00:02:30.879><c> go</c>

00:02:31.110 --> 00:02:31.120 align:start position:0%
way to solve this problem just go
 

00:02:31.120 --> 00:02:32.630 align:start position:0%
way to solve this problem just go
through<00:02:31.360><c> every</c><00:02:31.519><c> single</c><00:02:31.840><c> node</c><00:02:32.160><c> starting</c><00:02:32.480><c> at</c>

00:02:32.630 --> 00:02:32.640 align:start position:0%
through every single node starting at
 

00:02:32.640 --> 00:02:34.150 align:start position:0%
through every single node starting at
zero<00:02:32.959><c> right</c><00:02:33.120><c> so</c><00:02:33.280><c> we</c><00:02:33.360><c> start</c><00:02:33.599><c> at</c><00:02:33.760><c> zero</c>

00:02:34.150 --> 00:02:34.160 align:start position:0%
zero right so we start at zero
 

00:02:34.160 --> 00:02:36.630 align:start position:0%
zero right so we start at zero
then<00:02:34.400><c> do</c><00:02:34.560><c> a</c><00:02:34.640><c> dfs</c><00:02:35.200><c> search</c><00:02:35.519><c> from</c><00:02:35.680><c> here</c><00:02:36.000><c> so</c><00:02:36.480><c> we're</c>

00:02:36.630 --> 00:02:36.640 align:start position:0%
then do a dfs search from here so we're
 

00:02:36.640 --> 00:02:37.270 align:start position:0%
then do a dfs search from here so we're
going<00:02:36.720><c> to</c><00:02:36.879><c> mark</c>

00:02:37.270 --> 00:02:37.280 align:start position:0%
going to mark
 

00:02:37.280 --> 00:02:39.110 align:start position:0%
going to mark
zero<00:02:37.599><c> as</c><00:02:37.840><c> visited</c><00:02:38.319><c> we're</c><00:02:38.560><c> going</c><00:02:38.640><c> to</c><00:02:38.720><c> see</c><00:02:38.879><c> okay</c>

00:02:39.110 --> 00:02:39.120 align:start position:0%
zero as visited we're going to see okay
 

00:02:39.120 --> 00:02:41.589 align:start position:0%
zero as visited we're going to see okay
we<00:02:39.280><c> can</c><00:02:39.519><c> reach</c><00:02:39.840><c> a</c><00:02:40.080><c> one</c><00:02:40.400><c> mark</c><00:02:40.720><c> that</c><00:02:40.959><c> is</c><00:02:41.040><c> visited</c>

00:02:41.589 --> 00:02:41.599 align:start position:0%
we can reach a one mark that is visited
 

00:02:41.599 --> 00:02:43.990 align:start position:0%
we can reach a one mark that is visited
from<00:02:41.840><c> the</c><00:02:42.000><c> one</c><00:02:42.239><c> we</c><00:02:42.400><c> can</c><00:02:42.560><c> reach</c><00:02:42.879><c> a</c><00:02:43.040><c> two</c><00:02:43.680><c> mark</c>

00:02:43.990 --> 00:02:44.000 align:start position:0%
from the one we can reach a two mark
 

00:02:44.000 --> 00:02:45.910 align:start position:0%
from the one we can reach a two mark
that<00:02:44.239><c> as</c><00:02:44.400><c> visited</c><00:02:44.800><c> so</c><00:02:45.120><c> so</c><00:02:45.440><c> far</c>

00:02:45.910 --> 00:02:45.920 align:start position:0%
that as visited so so far
 

00:02:45.920 --> 00:02:49.190 align:start position:0%
that as visited so so far
we've<00:02:46.319><c> only</c><00:02:46.720><c> done</c><00:02:47.440><c> one</c><00:02:48.160><c> dfs</c>

00:02:49.190 --> 00:02:49.200 align:start position:0%
we've only done one dfs
 

00:02:49.200 --> 00:02:51.750 align:start position:0%
we've only done one dfs
search<00:02:49.840><c> right</c><00:02:50.239><c> so</c><00:02:50.400><c> therefore</c><00:02:50.800><c> we</c><00:02:51.040><c> found</c><00:02:51.440><c> one</c>

00:02:51.750 --> 00:02:51.760 align:start position:0%
search right so therefore we found one
 

00:02:51.760 --> 00:02:53.270 align:start position:0%
search right so therefore we found one
connected<00:02:52.319><c> component</c><00:02:52.800><c> now</c>

00:02:53.270 --> 00:02:53.280 align:start position:0%
connected component now
 

00:02:53.280 --> 00:02:55.509 align:start position:0%
connected component now
now<00:02:53.440><c> we</c><00:02:53.680><c> are</c><00:02:53.920><c> then</c><00:02:54.160><c> going</c><00:02:54.239><c> to</c><00:02:54.400><c> try</c><00:02:54.560><c> to</c><00:02:54.720><c> do</c><00:02:54.879><c> a</c><00:02:54.959><c> dfs</c>

00:02:55.509 --> 00:02:55.519 align:start position:0%
now we are then going to try to do a dfs
 

00:02:55.519 --> 00:02:56.630 align:start position:0%
now we are then going to try to do a dfs
starting<00:02:55.920><c> from</c><00:02:56.239><c> one</c>

00:02:56.630 --> 00:02:56.640 align:start position:0%
starting from one
 

00:02:56.640 --> 00:02:57.830 align:start position:0%
starting from one
right<00:02:56.800><c> but</c><00:02:56.959><c> what</c><00:02:57.120><c> we're</c><00:02:57.280><c> going</c><00:02:57.360><c> to</c><00:02:57.440><c> find</c><00:02:57.760><c> is</c>

00:02:57.830 --> 00:02:57.840 align:start position:0%
right but what we're going to find is
 

00:02:57.840 --> 00:02:59.670 align:start position:0%
right but what we're going to find is
that's<00:02:58.159><c> already</c><00:02:58.640><c> been</c><00:02:58.879><c> visited</c><00:02:59.280><c> so</c><00:02:59.440><c> we</c><00:02:59.519><c> don't</c>

00:02:59.670 --> 00:02:59.680 align:start position:0%
that's already been visited so we don't
 

00:02:59.680 --> 00:03:00.070 align:start position:0%
that's already been visited so we don't
want<00:02:59.840><c> to</c>

00:03:00.070 --> 00:03:00.080 align:start position:0%
want to
 

00:03:00.080 --> 00:03:01.670 align:start position:0%
want to
add<00:03:00.400><c> that</c><00:03:00.640><c> to</c><00:03:00.800><c> the</c><00:03:00.879><c> number</c><00:03:01.120><c> of</c><00:03:01.280><c> connected</c>

00:03:01.670 --> 00:03:01.680 align:start position:0%
add that to the number of connected
 

00:03:01.680 --> 00:03:03.670 align:start position:0%
add that to the number of connected
components<00:03:02.080><c> right</c><00:03:02.239><c> so</c><00:03:02.480><c> so</c><00:03:02.640><c> far</c><00:03:02.879><c> we</c><00:03:03.120><c> still</c><00:03:03.360><c> only</c>

00:03:03.670 --> 00:03:03.680 align:start position:0%
components right so so far we still only
 

00:03:03.680 --> 00:03:05.270 align:start position:0%
components right so so far we still only
have<00:03:03.920><c> one</c><00:03:04.159><c> connected</c><00:03:04.640><c> component</c>

00:03:05.270 --> 00:03:05.280 align:start position:0%
have one connected component
 

00:03:05.280 --> 00:03:06.869 align:start position:0%
have one connected component
we<00:03:05.440><c> can</c><00:03:05.519><c> do</c><00:03:05.680><c> the</c><00:03:05.840><c> same</c><00:03:06.080><c> exact</c><00:03:06.400><c> thing</c><00:03:06.640><c> for</c>

00:03:06.869 --> 00:03:06.879 align:start position:0%
we can do the same exact thing for
 

00:03:06.879 --> 00:03:09.110 align:start position:0%
we can do the same exact thing for
second<00:03:07.200><c> node</c><00:03:07.840><c> for</c><00:03:08.000><c> node</c><00:03:08.239><c> number</c><00:03:08.560><c> two</c><00:03:08.879><c> it's</c>

00:03:09.110 --> 00:03:09.120 align:start position:0%
second node for node number two it's
 

00:03:09.120 --> 00:03:11.030 align:start position:0%
second node for node number two it's
already<00:03:09.519><c> been</c><00:03:09.680><c> visited</c><00:03:10.159><c> no</c><00:03:10.480><c> need</c><00:03:10.800><c> to</c>

00:03:11.030 --> 00:03:11.040 align:start position:0%
already been visited no need to
 

00:03:11.040 --> 00:03:12.550 align:start position:0%
already been visited no need to
increment<00:03:11.440><c> the</c><00:03:11.599><c> number</c><00:03:11.920><c> of</c><00:03:12.080><c> connected</c>

00:03:12.550 --> 00:03:12.560 align:start position:0%
increment the number of connected
 

00:03:12.560 --> 00:03:13.670 align:start position:0%
increment the number of connected
components

00:03:13.670 --> 00:03:13.680 align:start position:0%
components
 

00:03:13.680 --> 00:03:15.670 align:start position:0%
components
then<00:03:14.000><c> we're</c><00:03:14.159><c> gonna</c><00:03:14.319><c> get</c><00:03:14.480><c> to</c><00:03:14.640><c> node</c><00:03:14.959><c> three</c><00:03:15.519><c> this</c>

00:03:15.670 --> 00:03:15.680 align:start position:0%
then we're gonna get to node three this
 

00:03:15.680 --> 00:03:17.670 align:start position:0%
then we're gonna get to node three this
one<00:03:15.920><c> has</c><00:03:16.239><c> not</c><00:03:16.480><c> been</c><00:03:16.640><c> visited</c><00:03:17.040><c> therefore</c><00:03:17.440><c> now</c>

00:03:17.670 --> 00:03:17.680 align:start position:0%
one has not been visited therefore now
 

00:03:17.680 --> 00:03:18.070 align:start position:0%
one has not been visited therefore now
we<00:03:17.760><c> have</c>

00:03:18.070 --> 00:03:18.080 align:start position:0%
we have
 

00:03:18.080 --> 00:03:19.750 align:start position:0%
we have
two<00:03:18.400><c> connected</c><00:03:18.800><c> components</c><00:03:19.280><c> so</c><00:03:19.440><c> now</c><00:03:19.599><c> let's</c>

00:03:19.750 --> 00:03:19.760 align:start position:0%
two connected components so now let's
 

00:03:19.760 --> 00:03:21.589 align:start position:0%
two connected components so now let's
just<00:03:19.920><c> do</c><00:03:20.080><c> a</c><00:03:20.159><c> dfs</c><00:03:20.720><c> on</c><00:03:20.800><c> here</c><00:03:21.040><c> to</c><00:03:21.200><c> mark</c>

00:03:21.589 --> 00:03:21.599 align:start position:0%
just do a dfs on here to mark
 

00:03:21.599 --> 00:03:24.229 align:start position:0%
just do a dfs on here to mark
all<00:03:21.760><c> of</c><00:03:21.920><c> them</c><00:03:22.159><c> visited</c><00:03:23.040><c> three</c><00:03:23.360><c> is</c><00:03:23.440><c> visited</c><00:03:24.080><c> it</c>

00:03:24.229 --> 00:03:24.239 align:start position:0%
all of them visited three is visited it
 

00:03:24.239 --> 00:03:25.430 align:start position:0%
all of them visited three is visited it
has<00:03:24.480><c> one</c><00:03:24.720><c> neighbor</c><00:03:25.040><c> four</c>

00:03:25.430 --> 00:03:25.440 align:start position:0%
has one neighbor four
 

00:03:25.440 --> 00:03:27.270 align:start position:0%
has one neighbor four
four<00:03:25.760><c> is</c><00:03:25.920><c> visited</c><00:03:26.400><c> and</c><00:03:26.560><c> then</c><00:03:26.720><c> there's</c><00:03:26.959><c> none</c>

00:03:27.270 --> 00:03:27.280 align:start position:0%
four is visited and then there's none
 

00:03:27.280 --> 00:03:29.270 align:start position:0%
four is visited and then there's none
left<00:03:27.760><c> so</c><00:03:28.000><c> we</c><00:03:28.080><c> got</c><00:03:28.239><c> two</c><00:03:28.400><c> connected</c><00:03:28.799><c> commands</c>

00:03:29.270 --> 00:03:29.280 align:start position:0%
left so we got two connected commands
 

00:03:29.280 --> 00:03:31.350 align:start position:0%
left so we got two connected commands
we'll<00:03:29.599><c> try</c><00:03:29.840><c> to</c><00:03:29.920><c> do</c><00:03:30.080><c> a</c><00:03:30.159><c> dfs</c><00:03:30.640><c> from</c><00:03:30.879><c> four</c><00:03:31.120><c> but</c><00:03:31.200><c> it's</c>

00:03:31.350 --> 00:03:31.360 align:start position:0%
we'll try to do a dfs from four but it's
 

00:03:31.360 --> 00:03:33.190 align:start position:0%
we'll try to do a dfs from four but it's
already<00:03:31.760><c> been</c><00:03:31.920><c> visited</c><00:03:32.239><c> so</c><00:03:32.480><c> therefore</c>

00:03:33.190 --> 00:03:33.200 align:start position:0%
already been visited so therefore
 

00:03:33.200 --> 00:03:35.509 align:start position:0%
already been visited so therefore
we<00:03:33.519><c> in</c><00:03:33.599><c> the</c><00:03:33.840><c> end</c><00:03:34.000><c> notice</c><00:03:34.400><c> we</c><00:03:34.560><c> only</c><00:03:34.799><c> had</c><00:03:35.040><c> two</c>

00:03:35.509 --> 00:03:35.519 align:start position:0%
we in the end notice we only had two
 

00:03:35.519 --> 00:03:36.789 align:start position:0%
we in the end notice we only had two
connected<00:03:36.000><c> components</c>

00:03:36.789 --> 00:03:36.799 align:start position:0%
connected components
 

00:03:36.799 --> 00:03:38.869 align:start position:0%
connected components
now<00:03:36.959><c> this</c><00:03:37.120><c> isn't</c><00:03:37.360><c> a</c><00:03:37.440><c> bad</c><00:03:37.760><c> algorithm</c><00:03:38.319><c> at</c><00:03:38.640><c> all</c>

00:03:38.869 --> 00:03:38.879 align:start position:0%
now this isn't a bad algorithm at all
 

00:03:38.879 --> 00:03:40.789 align:start position:0%
now this isn't a bad algorithm at all
the<00:03:39.120><c> overall</c><00:03:39.440><c> time</c><00:03:39.680><c> complexity</c><00:03:40.239><c> is</c><00:03:40.319><c> basically</c>

00:03:40.789 --> 00:03:40.799 align:start position:0%
the overall time complexity is basically
 

00:03:40.799 --> 00:03:41.750 align:start position:0%
the overall time complexity is basically
going<00:03:40.959><c> to</c><00:03:41.120><c> be</c>

00:03:41.750 --> 00:03:41.760 align:start position:0%
going to be
 

00:03:41.760 --> 00:03:44.789 align:start position:0%
going to be
it's<00:03:42.000><c> basically</c><00:03:42.400><c> going</c><00:03:42.480><c> to</c><00:03:42.560><c> be</c><00:03:42.799><c> big</c><00:03:43.200><c> o</c><00:03:43.680><c> of</c><00:03:44.319><c> e</c>

00:03:44.789 --> 00:03:44.799 align:start position:0%
it's basically going to be big o of e
 

00:03:44.799 --> 00:03:47.030 align:start position:0%
it's basically going to be big o of e
plus<00:03:45.360><c> v</c><00:03:45.599><c> because</c><00:03:46.000><c> notice</c><00:03:46.400><c> we</c><00:03:46.560><c> are</c><00:03:46.720><c> gonna</c><00:03:46.879><c> have</c>

00:03:47.030 --> 00:03:47.040 align:start position:0%
plus v because notice we are gonna have
 

00:03:47.040 --> 00:03:48.390 align:start position:0%
plus v because notice we are gonna have
to<00:03:47.200><c> go</c><00:03:47.360><c> through</c><00:03:47.680><c> every</c><00:03:47.840><c> single</c>

00:03:48.390 --> 00:03:48.400 align:start position:0%
to go through every single
 

00:03:48.400 --> 00:03:50.630 align:start position:0%
to go through every single
edge<00:03:49.120><c> when</c><00:03:49.280><c> we</c><00:03:49.440><c> traverse</c><00:03:49.840><c> the</c><00:03:50.080><c> graph</c><00:03:50.319><c> end</c><00:03:50.480><c> when</c>

00:03:50.630 --> 00:03:50.640 align:start position:0%
edge when we traverse the graph end when
 

00:03:50.640 --> 00:03:52.630 align:start position:0%
edge when we traverse the graph end when
we<00:03:50.799><c> actually</c><00:03:51.120><c> build</c><00:03:51.360><c> the</c><00:03:51.599><c> adjacency</c><00:03:52.239><c> list</c><00:03:52.480><c> and</c>

00:03:52.630 --> 00:03:52.640 align:start position:0%
we actually build the adjacency list and
 

00:03:52.640 --> 00:03:53.589 align:start position:0%
we actually build the adjacency list and
we're<00:03:52.720><c> also</c><00:03:52.959><c> gonna</c><00:03:53.040><c> have</c><00:03:53.120><c> to</c><00:03:53.200><c> go</c><00:03:53.360><c> through</c>

00:03:53.589 --> 00:03:53.599 align:start position:0%
we're also gonna have to go through
 

00:03:53.599 --> 00:03:54.470 align:start position:0%
we're also gonna have to go through
every<00:03:53.920><c> node</c>

00:03:54.470 --> 00:03:54.480 align:start position:0%
every node
 

00:03:54.480 --> 00:03:56.229 align:start position:0%
every node
iterating<00:03:55.040><c> through</c><00:03:55.280><c> it</c><00:03:55.360><c> as</c><00:03:55.519><c> we</c><00:03:55.680><c> traverse</c><00:03:56.080><c> the</c>

00:03:56.229 --> 00:03:56.239 align:start position:0%
iterating through it as we traverse the
 

00:03:56.239 --> 00:03:57.830 align:start position:0%
iterating through it as we traverse the
graph<00:03:56.560><c> and</c><00:03:56.879><c> as</c><00:03:57.120><c> we</c><00:03:57.360><c> you</c><00:03:57.519><c> know</c>

00:03:57.830 --> 00:03:57.840 align:start position:0%
graph and as we you know
 

00:03:57.840 --> 00:03:59.589 align:start position:0%
graph and as we you know
try<00:03:58.000><c> to</c><00:03:58.080><c> do</c><00:03:58.319><c> the</c><00:03:58.400><c> dfs</c><00:03:58.879><c> starting</c><00:03:59.280><c> at</c><00:03:59.439><c> every</c>

00:03:59.589 --> 00:03:59.599 align:start position:0%
try to do the dfs starting at every
 

00:03:59.599 --> 00:04:01.110 align:start position:0%
try to do the dfs starting at every
single<00:03:59.920><c> position</c><00:04:00.480><c> so</c><00:04:00.640><c> this</c><00:04:00.799><c> is</c><00:04:00.879><c> going</c><00:04:00.959><c> to</c><00:04:01.040><c> be</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
single position so this is going to be
 

00:04:01.120 --> 00:04:02.710 align:start position:0%
single position so this is going to be
the<00:04:01.280><c> overall</c><00:04:01.599><c> time</c><00:04:01.840><c> complexity</c>

00:04:02.710 --> 00:04:02.720 align:start position:0%
the overall time complexity
 

00:04:02.720 --> 00:04:05.110 align:start position:0%
the overall time complexity
not<00:04:03.040><c> bad</c><00:04:03.360><c> at</c><00:04:03.680><c> all</c><00:04:04.319><c> but</c><00:04:04.480><c> there</c><00:04:04.720><c> actually</c>

00:04:05.110 --> 00:04:05.120 align:start position:0%
not bad at all but there actually
 

00:04:05.120 --> 00:04:07.110 align:start position:0%
not bad at all but there actually
happens<00:04:05.519><c> to</c><00:04:05.599><c> be</c><00:04:05.760><c> a</c><00:04:05.920><c> more</c><00:04:06.239><c> natural</c><00:04:06.720><c> way</c><00:04:06.959><c> to</c>

00:04:07.110 --> 00:04:07.120 align:start position:0%
happens to be a more natural way to
 

00:04:07.120 --> 00:04:09.030 align:start position:0%
happens to be a more natural way to
solve<00:04:07.360><c> this</c><00:04:07.680><c> problem</c><00:04:08.080><c> and</c><00:04:08.239><c> if</c><00:04:08.319><c> you</c><00:04:08.560><c> have</c><00:04:08.720><c> heard</c>

00:04:09.030 --> 00:04:09.040 align:start position:0%
solve this problem and if you have heard
 

00:04:09.040 --> 00:04:10.390 align:start position:0%
solve this problem and if you have heard
of<00:04:09.120><c> the</c><00:04:09.360><c> algorithm</c><00:04:09.920><c> called</c>

00:04:10.390 --> 00:04:10.400 align:start position:0%
of the algorithm called
 

00:04:10.400 --> 00:04:12.470 align:start position:0%
of the algorithm called
union<00:04:10.879><c> find</c><00:04:11.200><c> it's</c><00:04:11.360><c> a</c><00:04:11.439><c> pretty</c><00:04:11.680><c> rare</c><00:04:12.000><c> algorithm</c>

00:04:12.470 --> 00:04:12.480 align:start position:0%
union find it's a pretty rare algorithm
 

00:04:12.480 --> 00:04:14.630 align:start position:0%
union find it's a pretty rare algorithm
to<00:04:12.640><c> need</c><00:04:12.879><c> on</c><00:04:13.040><c> leak</c><00:04:13.280><c> code</c><00:04:13.680><c> but</c><00:04:13.840><c> if</c><00:04:14.000><c> you</c><00:04:14.159><c> do</c><00:04:14.480><c> know</c>

00:04:14.630 --> 00:04:14.640 align:start position:0%
to need on leak code but if you do know
 

00:04:14.640 --> 00:04:15.509 align:start position:0%
to need on leak code but if you do know
this<00:04:14.879><c> algorithm</c>

00:04:15.509 --> 00:04:15.519 align:start position:0%
this algorithm
 

00:04:15.519 --> 00:04:17.110 align:start position:0%
this algorithm
then<00:04:15.680><c> you</c><00:04:15.840><c> basically</c><00:04:16.479><c> know</c><00:04:16.720><c> that</c><00:04:16.880><c> this</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
then you basically know that this
 

00:04:17.120 --> 00:04:19.189 align:start position:0%
then you basically know that this
algorithm<00:04:17.600><c> was</c><00:04:17.919><c> literally</c><00:04:18.479><c> made</c><00:04:18.880><c> for</c><00:04:19.040><c> a</c>

00:04:19.189 --> 00:04:19.199 align:start position:0%
algorithm was literally made for a
 

00:04:19.199 --> 00:04:20.229 align:start position:0%
algorithm was literally made for a
problem<00:04:19.600><c> like</c><00:04:19.759><c> this</c>

00:04:20.229 --> 00:04:20.239 align:start position:0%
problem like this
 

00:04:20.239 --> 00:04:22.230 align:start position:0%
problem like this
literally<00:04:20.799><c> made</c><00:04:21.120><c> to</c><00:04:21.280><c> be</c><00:04:21.440><c> able</c><00:04:21.600><c> to</c><00:04:21.840><c> count</c>

00:04:22.230 --> 00:04:22.240 align:start position:0%
literally made to be able to count
 

00:04:22.240 --> 00:04:23.430 align:start position:0%
literally made to be able to count
connected<00:04:22.720><c> components</c>

00:04:23.430 --> 00:04:23.440 align:start position:0%
connected components
 

00:04:23.440 --> 00:04:25.270 align:start position:0%
connected components
as<00:04:23.600><c> well</c><00:04:23.840><c> as</c><00:04:24.000><c> to</c><00:04:24.160><c> be</c><00:04:24.240><c> able</c><00:04:24.400><c> to</c><00:04:24.639><c> identify</c><00:04:25.120><c> you</c>

00:04:25.270 --> 00:04:25.280 align:start position:0%
as well as to be able to identify you
 

00:04:25.280 --> 00:04:27.670 align:start position:0%
as well as to be able to identify you
know<00:04:25.440><c> disjoint</c><00:04:26.000><c> sets</c><00:04:26.400><c> and</c><00:04:26.560><c> all</c><00:04:26.720><c> that</c><00:04:26.960><c> stuff</c>

00:04:27.670 --> 00:04:27.680 align:start position:0%
know disjoint sets and all that stuff
 

00:04:27.680 --> 00:04:29.590 align:start position:0%
know disjoint sets and all that stuff
so<00:04:28.000><c> i'm</c><00:04:28.160><c> gonna</c><00:04:28.400><c> use</c><00:04:28.639><c> this</c><00:04:28.960><c> problem</c><00:04:29.280><c> as</c><00:04:29.440><c> an</c>

00:04:29.590 --> 00:04:29.600 align:start position:0%
so i'm gonna use this problem as an
 

00:04:29.600 --> 00:04:31.670 align:start position:0%
so i'm gonna use this problem as an
opportunity<00:04:30.160><c> to</c><00:04:30.320><c> go</c><00:04:30.479><c> over</c><00:04:30.800><c> union</c><00:04:31.120><c> find</c><00:04:31.440><c> once</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
opportunity to go over union find once
 

00:04:31.680 --> 00:04:33.510 align:start position:0%
opportunity to go over union find once
again<00:04:31.840><c> i</c><00:04:31.919><c> think</c><00:04:32.080><c> i've</c><00:04:32.240><c> done</c><00:04:32.400><c> this</c><00:04:32.639><c> once</c><00:04:33.040><c> before</c>

00:04:33.510 --> 00:04:33.520 align:start position:0%
again i think i've done this once before
 

00:04:33.520 --> 00:04:35.270 align:start position:0%
again i think i've done this once before
in<00:04:33.680><c> a</c><00:04:33.759><c> previous</c><00:04:34.240><c> problem</c><00:04:34.560><c> but</c><00:04:34.720><c> let's</c><00:04:34.960><c> dive</c>

00:04:35.270 --> 00:04:35.280 align:start position:0%
in a previous problem but let's dive
 

00:04:35.280 --> 00:04:37.189 align:start position:0%
in a previous problem but let's dive
into<00:04:35.520><c> this</c><00:04:36.080><c> so</c><00:04:36.240><c> we're</c><00:04:36.400><c> gonna</c><00:04:36.639><c> mainly</c><00:04:37.040><c> be</c>

00:04:37.189 --> 00:04:37.199 align:start position:0%
into this so we're gonna mainly be
 

00:04:37.199 --> 00:04:38.310 align:start position:0%
into this so we're gonna mainly be
maintaining<00:04:37.919><c> two</c>

00:04:38.310 --> 00:04:38.320 align:start position:0%
maintaining two
 

00:04:38.320 --> 00:04:41.030 align:start position:0%
maintaining two
arrays<00:04:38.960><c> one</c><00:04:39.280><c> called</c><00:04:39.600><c> the</c><00:04:39.919><c> parent</c><00:04:40.400><c> array</c><00:04:40.800><c> and</c>

00:04:41.030 --> 00:04:41.040 align:start position:0%
arrays one called the parent array and
 

00:04:41.040 --> 00:04:42.870 align:start position:0%
arrays one called the parent array and
we're<00:04:41.199><c> going</c><00:04:41.280><c> to</c><00:04:41.360><c> have</c><00:04:41.919><c> a</c><00:04:42.000><c> value</c><00:04:42.479><c> in</c><00:04:42.560><c> that</c>

00:04:42.870 --> 00:04:42.880 align:start position:0%
we're going to have a value in that
 

00:04:42.880 --> 00:04:44.950 align:start position:0%
we're going to have a value in that
array<00:04:43.199><c> for</c><00:04:43.440><c> each</c><00:04:43.919><c> node</c><00:04:44.240><c> that</c><00:04:44.400><c> we're</c><00:04:44.560><c> given</c><00:04:44.880><c> in</c>

00:04:44.950 --> 00:04:44.960 align:start position:0%
array for each node that we're given in
 

00:04:44.960 --> 00:04:46.310 align:start position:0%
array for each node that we're given in
the<00:04:45.199><c> input</c><00:04:45.520><c> and</c><00:04:45.600><c> initially</c>

00:04:46.310 --> 00:04:46.320 align:start position:0%
the input and initially
 

00:04:46.320 --> 00:04:47.830 align:start position:0%
the input and initially
the<00:04:46.639><c> array</c><00:04:47.040><c> is</c><00:04:47.120><c> just</c><00:04:47.199><c> going</c><00:04:47.360><c> to</c><00:04:47.440><c> look</c><00:04:47.600><c> like</c>

00:04:47.830 --> 00:04:47.840 align:start position:0%
the array is just going to look like
 

00:04:47.840 --> 00:04:49.749 align:start position:0%
the array is just going to look like
this<00:04:48.160><c> 0</c><00:04:48.639><c> 1</c><00:04:49.040><c> 2</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
this 0 1 2
 

00:04:49.759 --> 00:04:53.830 align:start position:0%
this 0 1 2
3<00:04:50.639><c> 4.</c><00:04:51.280><c> so</c><00:04:51.520><c> each</c><00:04:52.080><c> index</c><00:04:52.560><c> so</c><00:04:52.800><c> the</c><00:04:53.040><c> index</c><00:04:53.440><c> 0</c>

00:04:53.830 --> 00:04:53.840 align:start position:0%
3 4. so each index so the index 0
 

00:04:53.840 --> 00:04:54.629 align:start position:0%
3 4. so each index so the index 0
represents

00:04:54.629 --> 00:04:54.639 align:start position:0%
represents
 

00:04:54.639 --> 00:04:57.830 align:start position:0%
represents
the<00:04:54.800><c> 0</c><00:04:55.280><c> node</c><00:04:56.000><c> index</c><00:04:56.560><c> one</c><00:04:57.040><c> represents</c>

00:04:57.830 --> 00:04:57.840 align:start position:0%
the 0 node index one represents
 

00:04:57.840 --> 00:05:00.150 align:start position:0%
the 0 node index one represents
the<00:04:58.160><c> one</c><00:04:58.479><c> node</c><00:04:58.800><c> and</c><00:04:58.960><c> the</c><00:04:59.199><c> value</c><00:04:59.840><c> in</c><00:05:00.000><c> every</c>

00:05:00.150 --> 00:05:00.160 align:start position:0%
the one node and the value in every
 

00:05:00.160 --> 00:05:02.310 align:start position:0%
the one node and the value in every
single<00:05:00.479><c> array</c><00:05:00.880><c> clearly</c><00:05:01.360><c> matches</c><00:05:01.840><c> that</c>

00:05:02.310 --> 00:05:02.320 align:start position:0%
single array clearly matches that
 

00:05:02.320 --> 00:05:04.310 align:start position:0%
single array clearly matches that
of<00:05:02.560><c> every</c><00:05:02.720><c> single</c><00:05:03.039><c> node</c><00:05:03.360><c> initially</c><00:05:04.000><c> at</c><00:05:04.160><c> least</c>

00:05:04.310 --> 00:05:04.320 align:start position:0%
of every single node initially at least
 

00:05:04.320 --> 00:05:05.909 align:start position:0%
of every single node initially at least
so<00:05:04.560><c> initially</c><00:05:05.039><c> they</c><00:05:05.199><c> do</c><00:05:05.440><c> match</c>

00:05:05.909 --> 00:05:05.919 align:start position:0%
so initially they do match
 

00:05:05.919 --> 00:05:08.230 align:start position:0%
so initially they do match
what<00:05:06.080><c> that</c><00:05:06.320><c> basically</c><00:05:06.800><c> means</c><00:05:07.120><c> is</c><00:05:07.280><c> each</c><00:05:07.680><c> node</c>

00:05:08.230 --> 00:05:08.240 align:start position:0%
what that basically means is each node
 

00:05:08.240 --> 00:05:09.430 align:start position:0%
what that basically means is each node
is<00:05:08.400><c> the</c><00:05:08.720><c> parent</c>

00:05:09.430 --> 00:05:09.440 align:start position:0%
is the parent
 

00:05:09.440 --> 00:05:11.830 align:start position:0%
is the parent
of<00:05:09.840><c> itself</c><00:05:10.479><c> so</c><00:05:10.639><c> the</c><00:05:10.720><c> way</c><00:05:10.960><c> union</c><00:05:11.280><c> find</c><00:05:11.520><c> works</c>

00:05:11.830 --> 00:05:11.840 align:start position:0%
of itself so the way union find works
 

00:05:11.840 --> 00:05:13.670 align:start position:0%
of itself so the way union find works
it's<00:05:12.080><c> basically</c><00:05:12.560><c> a</c><00:05:12.800><c> forest</c><00:05:13.360><c> of</c>

00:05:13.670 --> 00:05:13.680 align:start position:0%
it's basically a forest of
 

00:05:13.680 --> 00:05:15.990 align:start position:0%
it's basically a forest of
trees<00:05:14.400><c> so</c><00:05:14.560><c> we're</c><00:05:14.720><c> gonna</c><00:05:14.880><c> have</c><00:05:15.120><c> multiple</c><00:05:15.600><c> trees</c>

00:05:15.990 --> 00:05:16.000 align:start position:0%
trees so we're gonna have multiple trees
 

00:05:16.000 --> 00:05:17.350 align:start position:0%
trees so we're gonna have multiple trees
initially<00:05:16.479><c> clearly</c><00:05:16.880><c> we</c><00:05:17.039><c> have</c>

00:05:17.350 --> 00:05:17.360 align:start position:0%
initially clearly we have
 

00:05:17.360 --> 00:05:20.629 align:start position:0%
initially clearly we have
n<00:05:17.759><c> trees</c><00:05:18.560><c> uh</c><00:05:19.199><c> one</c><00:05:19.440><c> for</c><00:05:19.600><c> every</c><00:05:19.759><c> single</c><00:05:20.160><c> node</c>

00:05:20.629 --> 00:05:20.639 align:start position:0%
n trees uh one for every single node
 

00:05:20.639 --> 00:05:23.189 align:start position:0%
n trees uh one for every single node
in<00:05:20.960><c> the</c><00:05:21.199><c> input</c><00:05:22.000><c> and</c><00:05:22.320><c> as</c><00:05:22.479><c> we</c><00:05:22.720><c> go</c><00:05:22.880><c> through</c><00:05:23.039><c> every</c>

00:05:23.189 --> 00:05:23.199 align:start position:0%
in the input and as we go through every
 

00:05:23.199 --> 00:05:25.350 align:start position:0%
in the input and as we go through every
single<00:05:23.520><c> edge</c><00:05:23.840><c> such</c><00:05:24.080><c> as</c><00:05:24.320><c> zero</c><00:05:24.720><c> and</c><00:05:24.960><c> one</c><00:05:25.199><c> what</c>

00:05:25.350 --> 00:05:25.360 align:start position:0%
single edge such as zero and one what
 

00:05:25.360 --> 00:05:27.430 align:start position:0%
single edge such as zero and one what
we're<00:05:25.520><c> gonna</c><00:05:25.680><c> do</c><00:05:26.000><c> is</c><00:05:26.240><c> take</c><00:05:26.560><c> okay</c><00:05:26.800><c> let's</c><00:05:26.960><c> say</c>

00:05:27.430 --> 00:05:27.440 align:start position:0%
we're gonna do is take okay let's say
 

00:05:27.440 --> 00:05:29.430 align:start position:0%
we're gonna do is take okay let's say
zero<00:05:27.840><c> is</c><00:05:27.919><c> gonna</c><00:05:28.080><c> be</c><00:05:28.160><c> the</c><00:05:28.320><c> parent</c><00:05:28.560><c> so</c><00:05:28.800><c> zero</c><00:05:29.199><c> is</c><00:05:29.360><c> a</c>

00:05:29.430 --> 00:05:29.440 align:start position:0%
zero is gonna be the parent so zero is a
 

00:05:29.440 --> 00:05:30.469 align:start position:0%
zero is gonna be the parent so zero is a
parent<00:05:29.759><c> of</c><00:05:29.919><c> itself</c>

00:05:30.469 --> 00:05:30.479 align:start position:0%
parent of itself
 

00:05:30.479 --> 00:05:32.629 align:start position:0%
parent of itself
but<00:05:30.639><c> what</c><00:05:30.800><c> we're</c><00:05:30.880><c> gonna</c><00:05:31.039><c> do</c><00:05:31.199><c> to</c><00:05:31.440><c> one</c><00:05:31.759><c> is</c><00:05:31.919><c> say</c><00:05:32.160><c> no</c>

00:05:32.629 --> 00:05:32.639 align:start position:0%
but what we're gonna do to one is say no
 

00:05:32.639 --> 00:05:33.830 align:start position:0%
but what we're gonna do to one is say no
one's<00:05:33.039><c> parent</c><00:05:33.440><c> now</c>

00:05:33.830 --> 00:05:33.840 align:start position:0%
one's parent now
 

00:05:33.840 --> 00:05:36.310 align:start position:0%
one's parent now
is<00:05:34.000><c> going</c><00:05:34.240><c> to</c><00:05:34.479><c> be</c><00:05:35.039><c> zero</c><00:05:35.520><c> basically</c><00:05:35.919><c> what</c><00:05:36.080><c> we're</c>

00:05:36.310 --> 00:05:36.320 align:start position:0%
is going to be zero basically what we're
 

00:05:36.320 --> 00:05:38.150 align:start position:0%
is going to be zero basically what we're
doing<00:05:36.560><c> is</c><00:05:36.720><c> just</c><00:05:37.039><c> connecting</c>

00:05:38.150 --> 00:05:38.160 align:start position:0%
doing is just connecting
 

00:05:38.160 --> 00:05:41.350 align:start position:0%
doing is just connecting
the<00:05:38.400><c> two</c><00:05:39.199><c> nodes</c><00:05:39.680><c> right</c><00:05:40.479><c> and</c><00:05:40.639><c> since</c><00:05:40.880><c> we</c><00:05:41.120><c> know</c>

00:05:41.350 --> 00:05:41.360 align:start position:0%
the two nodes right and since we know
 

00:05:41.360 --> 00:05:41.990 align:start position:0%
the two nodes right and since we know
that<00:05:41.440><c> we</c><00:05:41.680><c> just</c>

00:05:41.990 --> 00:05:42.000 align:start position:0%
that we just
 

00:05:42.000 --> 00:05:44.070 align:start position:0%
that we just
made<00:05:42.320><c> a</c><00:05:42.479><c> single</c><00:05:42.800><c> connection</c><00:05:43.360><c> what</c><00:05:43.520><c> we</c><00:05:43.680><c> can</c><00:05:43.840><c> say</c>

00:05:44.070 --> 00:05:44.080 align:start position:0%
made a single connection what we can say
 

00:05:44.080 --> 00:05:45.749 align:start position:0%
made a single connection what we can say
now<00:05:44.320><c> is</c><00:05:44.479><c> that</c><00:05:44.639><c> okay</c><00:05:44.880><c> we</c><00:05:45.039><c> started</c><00:05:45.440><c> out</c><00:05:45.520><c> with</c>

00:05:45.749 --> 00:05:45.759 align:start position:0%
now is that okay we started out with
 

00:05:45.759 --> 00:05:47.510 align:start position:0%
now is that okay we started out with
five<00:05:46.160><c> different</c><00:05:46.479><c> connected</c><00:05:46.880><c> components</c>

00:05:47.510 --> 00:05:47.520 align:start position:0%
five different connected components
 

00:05:47.520 --> 00:05:49.909 align:start position:0%
five different connected components
we<00:05:47.680><c> just</c><00:05:48.000><c> merged</c><00:05:48.560><c> two</c><00:05:48.800><c> of</c><00:05:48.880><c> them</c><00:05:49.280><c> every</c><00:05:49.600><c> time</c><00:05:49.759><c> we</c>

00:05:49.909 --> 00:05:49.919 align:start position:0%
we just merged two of them every time we
 

00:05:49.919 --> 00:05:51.670 align:start position:0%
we just merged two of them every time we
perform<00:05:50.400><c> a</c><00:05:50.560><c> merge</c><00:05:50.800><c> we're</c><00:05:51.039><c> basically</c><00:05:51.440><c> taking</c>

00:05:51.670 --> 00:05:51.680 align:start position:0%
perform a merge we're basically taking
 

00:05:51.680 --> 00:05:53.350 align:start position:0%
perform a merge we're basically taking
the<00:05:51.840><c> number</c><00:05:52.080><c> of</c><00:05:52.160><c> connected</c><00:05:52.560><c> components</c><00:05:53.120><c> we</c>

00:05:53.350 --> 00:05:53.360 align:start position:0%
the number of connected components we
 

00:05:53.360 --> 00:05:53.909 align:start position:0%
the number of connected components we
have

00:05:53.909 --> 00:05:53.919 align:start position:0%
have
 

00:05:53.919 --> 00:05:55.990 align:start position:0%
have
decrementing<00:05:54.560><c> it</c><00:05:54.639><c> by</c><00:05:54.960><c> one</c><00:05:55.360><c> so</c><00:05:55.520><c> that's</c><00:05:55.680><c> how</c><00:05:55.840><c> we</c>

00:05:55.990 --> 00:05:56.000 align:start position:0%
decrementing it by one so that's how we
 

00:05:56.000 --> 00:05:57.350 align:start position:0%
decrementing it by one so that's how we
can<00:05:56.160><c> keep</c><00:05:56.400><c> track</c><00:05:56.639><c> of</c><00:05:56.800><c> the</c><00:05:56.880><c> connected</c>

00:05:57.350 --> 00:05:57.360 align:start position:0%
can keep track of the connected
 

00:05:57.360 --> 00:05:58.070 align:start position:0%
can keep track of the connected
components

00:05:58.070 --> 00:05:58.080 align:start position:0%
components
 

00:05:58.080 --> 00:06:00.950 align:start position:0%
components
and<00:05:58.240><c> there's</c><00:05:58.560><c> one</c><00:05:58.880><c> slight</c><00:05:59.520><c> un</c><00:06:00.319><c> and</c><00:06:00.560><c> it's</c><00:06:00.720><c> not</c>

00:06:00.950 --> 00:06:00.960 align:start position:0%
and there's one slight un and it's not
 

00:06:00.960 --> 00:06:03.189 align:start position:0%
and there's one slight un and it's not
required<00:06:01.520><c> but</c><00:06:01.680><c> it's</c><00:06:01.840><c> an</c><00:06:02.000><c> optimization</c><00:06:02.800><c> that's</c>

00:06:03.189 --> 00:06:03.199 align:start position:0%
required but it's an optimization that's
 

00:06:03.199 --> 00:06:04.870 align:start position:0%
required but it's an optimization that's
pretty<00:06:03.440><c> easy</c><00:06:03.680><c> to</c><00:06:03.759><c> make</c><00:06:03.919><c> with</c><00:06:04.080><c> this</c><00:06:04.240><c> problem</c>

00:06:04.870 --> 00:06:04.880 align:start position:0%
pretty easy to make with this problem
 

00:06:04.880 --> 00:06:06.629 align:start position:0%
pretty easy to make with this problem
we're<00:06:05.039><c> going</c><00:06:05.120><c> to</c><00:06:05.199><c> maintain</c><00:06:05.680><c> the</c><00:06:06.000><c> rank</c><00:06:06.479><c> of</c>

00:06:06.629 --> 00:06:06.639 align:start position:0%
we're going to maintain the rank of
 

00:06:06.639 --> 00:06:08.390 align:start position:0%
we're going to maintain the rank of
every<00:06:06.800><c> single</c><00:06:07.120><c> component</c><00:06:07.600><c> so</c><00:06:07.840><c> basically</c><00:06:08.240><c> for</c>

00:06:08.390 --> 00:06:08.400 align:start position:0%
every single component so basically for
 

00:06:08.400 --> 00:06:09.510 align:start position:0%
every single component so basically for
every<00:06:08.560><c> single</c><00:06:08.960><c> node</c><00:06:09.199><c> we're</c><00:06:09.360><c> going</c><00:06:09.440><c> to</c>

00:06:09.510 --> 00:06:09.520 align:start position:0%
every single node we're going to
 

00:06:09.520 --> 00:06:10.309 align:start position:0%
every single node we're going to
maintain

00:06:10.309 --> 00:06:10.319 align:start position:0%
maintain
 

00:06:10.319 --> 00:06:13.029 align:start position:0%
maintain
what's<00:06:10.800><c> the</c><00:06:11.120><c> size</c><00:06:11.759><c> of</c><00:06:12.000><c> it</c><00:06:12.400><c> basically</c><00:06:12.800><c> you</c><00:06:12.960><c> know</c>

00:06:13.029 --> 00:06:13.039 align:start position:0%
what's the size of it basically you know
 

00:06:13.039 --> 00:06:15.350 align:start position:0%
what's the size of it basically you know
if<00:06:13.199><c> this</c><00:06:13.360><c> is</c><00:06:13.520><c> the</c><00:06:13.680><c> parent</c><00:06:14.080><c> what's</c><00:06:14.319><c> the</c><00:06:14.560><c> size</c><00:06:15.039><c> of</c>

00:06:15.350 --> 00:06:15.360 align:start position:0%
if this is the parent what's the size of
 

00:06:15.360 --> 00:06:17.510 align:start position:0%
if this is the parent what's the size of
its<00:06:15.600><c> entire</c><00:06:16.000><c> connected</c><00:06:16.400><c> component</c><00:06:16.880><c> right</c><00:06:17.039><c> now</c>

00:06:17.510 --> 00:06:17.520 align:start position:0%
its entire connected component right now
 

00:06:17.520 --> 00:06:18.390 align:start position:0%
its entire connected component right now
what<00:06:17.680><c> we</c><00:06:17.840><c> would</c>

00:06:18.390 --> 00:06:18.400 align:start position:0%
what we would
 

00:06:18.400 --> 00:06:19.909 align:start position:0%
what we would
initially<00:06:18.960><c> for</c><00:06:19.199><c> each</c><00:06:19.360><c> of</c><00:06:19.520><c> them</c><00:06:19.680><c> it's</c>

00:06:19.909 --> 00:06:19.919 align:start position:0%
initially for each of them it's
 

00:06:19.919 --> 00:06:21.590 align:start position:0%
initially for each of them it's
obviously<00:06:20.319><c> going</c><00:06:20.400><c> to</c><00:06:20.479><c> be</c><00:06:20.720><c> one</c><00:06:20.960><c> right</c><00:06:21.120><c> the</c><00:06:21.280><c> size</c>

00:06:21.590 --> 00:06:21.600 align:start position:0%
obviously going to be one right the size
 

00:06:21.600 --> 00:06:21.990 align:start position:0%
obviously going to be one right the size
for

00:06:21.990 --> 00:06:22.000 align:start position:0%
for
 

00:06:22.000 --> 00:06:24.790 align:start position:0%
for
all<00:06:22.160><c> of</c><00:06:22.240><c> them</c><00:06:22.479><c> is</c><00:06:22.639><c> going</c><00:06:22.720><c> to</c><00:06:22.880><c> be</c><00:06:23.600><c> one</c><00:06:24.000><c> initially</c>

00:06:24.790 --> 00:06:24.800 align:start position:0%
all of them is going to be one initially
 

00:06:24.800 --> 00:06:25.110 align:start position:0%
all of them is going to be one initially
but

00:06:25.110 --> 00:06:25.120 align:start position:0%
but
 

00:06:25.120 --> 00:06:26.950 align:start position:0%
but
since<00:06:25.360><c> we</c><00:06:25.440><c> just</c><00:06:25.680><c> made</c><00:06:25.919><c> this</c><00:06:26.160><c> merge</c><00:06:26.800><c> we're</c>

00:06:26.950 --> 00:06:26.960 align:start position:0%
since we just made this merge we're
 

00:06:26.960 --> 00:06:28.309 align:start position:0%
since we just made this merge we're
going<00:06:27.039><c> to</c><00:06:27.280><c> leave</c><00:06:27.600><c> the</c><00:06:27.840><c> rank</c>

00:06:28.309 --> 00:06:28.319 align:start position:0%
going to leave the rank
 

00:06:28.319 --> 00:06:30.550 align:start position:0%
going to leave the rank
of<00:06:28.639><c> one</c><00:06:29.039><c> as</c><00:06:29.199><c> it</c><00:06:29.440><c> is</c><00:06:29.680><c> because</c><00:06:29.919><c> it's</c><00:06:30.080><c> not</c><00:06:30.319><c> the</c>

00:06:30.550 --> 00:06:30.560 align:start position:0%
of one as it is because it's not the
 

00:06:30.560 --> 00:06:32.309 align:start position:0%
of one as it is because it's not the
parent<00:06:30.960><c> but</c><00:06:31.120><c> for</c><00:06:31.440><c> the</c><00:06:31.759><c> parent</c>

00:06:32.309 --> 00:06:32.319 align:start position:0%
parent but for the parent
 

00:06:32.319 --> 00:06:34.870 align:start position:0%
parent but for the parent
zero<00:06:32.720><c> we</c><00:06:32.880><c> can</c><00:06:32.960><c> say</c><00:06:33.199><c> okay</c><00:06:33.440><c> it's</c><00:06:33.680><c> rank</c><00:06:34.080><c> is</c><00:06:34.319><c> now</c>

00:06:34.870 --> 00:06:34.880 align:start position:0%
zero we can say okay it's rank is now
 

00:06:34.880 --> 00:06:35.350 align:start position:0%
zero we can say okay it's rank is now
not

00:06:35.350 --> 00:06:35.360 align:start position:0%
not
 

00:06:35.360 --> 00:06:37.749 align:start position:0%
not
one<00:06:35.919><c> it's</c><00:06:36.160><c> actually</c><00:06:36.479><c> going</c><00:06:36.639><c> to</c><00:06:36.720><c> be</c><00:06:36.960><c> two</c><00:06:37.440><c> really</c>

00:06:37.749 --> 00:06:37.759 align:start position:0%
one it's actually going to be two really
 

00:06:37.759 --> 00:06:39.189 align:start position:0%
one it's actually going to be two really
we're<00:06:37.919><c> just</c><00:06:38.080><c> talking</c><00:06:38.319><c> about</c><00:06:38.479><c> the</c><00:06:38.720><c> size</c>

00:06:39.189 --> 00:06:39.199 align:start position:0%
we're just talking about the size
 

00:06:39.199 --> 00:06:41.670 align:start position:0%
we're just talking about the size
if<00:06:39.520><c> this</c><00:06:39.759><c> was</c><00:06:40.000><c> the</c><00:06:40.240><c> parent</c><00:06:40.960><c> which</c><00:06:41.199><c> it</c><00:06:41.440><c> is</c><00:06:41.520><c> the</c>

00:06:41.670 --> 00:06:41.680 align:start position:0%
if this was the parent which it is the
 

00:06:41.680 --> 00:06:42.870 align:start position:0%
if this was the parent which it is the
parent<00:06:42.000><c> right</c><00:06:42.240><c> so</c><00:06:42.400><c> what</c>

00:06:42.870 --> 00:06:42.880 align:start position:0%
parent right so what
 

00:06:42.880 --> 00:06:44.870 align:start position:0%
parent right so what
in<00:06:43.199><c> our</c><00:06:43.360><c> rank</c><00:06:43.680><c> array</c><00:06:44.000><c> we</c><00:06:44.080><c> could</c><00:06:44.240><c> change</c><00:06:44.639><c> the</c>

00:06:44.870 --> 00:06:44.880 align:start position:0%
in our rank array we could change the
 

00:06:44.880 --> 00:06:45.909 align:start position:0%
in our rank array we could change the
first<00:06:45.360><c> one</c>

00:06:45.909 --> 00:06:45.919 align:start position:0%
first one
 

00:06:45.919 --> 00:06:47.990 align:start position:0%
first one
into<00:06:46.240><c> a</c><00:06:46.400><c> two</c><00:06:47.199><c> and</c><00:06:47.360><c> the</c><00:06:47.520><c> reason</c><00:06:47.759><c> we're</c>

00:06:47.990 --> 00:06:48.000 align:start position:0%
into a two and the reason we're
 

00:06:48.000 --> 00:06:49.670 align:start position:0%
into a two and the reason we're
maintaining<00:06:48.479><c> this</c><00:06:48.720><c> rank</c><00:06:48.960><c> is</c><00:06:49.120><c> basically</c><00:06:49.520><c> just</c>

00:06:49.670 --> 00:06:49.680 align:start position:0%
maintaining this rank is basically just
 

00:06:49.680 --> 00:06:51.189 align:start position:0%
maintaining this rank is basically just
an<00:06:49.919><c> optimization</c>

00:06:51.189 --> 00:06:51.199 align:start position:0%
an optimization
 

00:06:51.199 --> 00:06:53.670 align:start position:0%
an optimization
so<00:06:51.759><c> right</c><00:06:52.000><c> now</c><00:06:52.720><c> you</c><00:06:52.800><c> can</c><00:06:52.960><c> clearly</c><00:06:53.280><c> see</c><00:06:53.440><c> we</c><00:06:53.599><c> have</c>

00:06:53.670 --> 00:06:53.680 align:start position:0%
so right now you can clearly see we have
 

00:06:53.680 --> 00:06:55.350 align:start position:0%
so right now you can clearly see we have
one<00:06:53.919><c> component</c><00:06:54.400><c> of</c><00:06:54.479><c> size</c><00:06:54.800><c> two</c><00:06:55.039><c> and</c><00:06:55.120><c> we</c><00:06:55.280><c> have</c>

00:06:55.350 --> 00:06:55.360 align:start position:0%
one component of size two and we have
 

00:06:55.360 --> 00:06:57.589 align:start position:0%
one component of size two and we have
one<00:06:55.599><c> component</c><00:06:56.160><c> of</c><00:06:56.319><c> size</c><00:06:56.639><c> one</c><00:06:56.960><c> if</c><00:06:57.039><c> we</c><00:06:57.199><c> were</c>

00:06:57.589 --> 00:06:57.599 align:start position:0%
one component of size one if we were
 

00:06:57.599 --> 00:07:00.070 align:start position:0%
one component of size one if we were
if<00:06:57.759><c> we</c><00:06:57.840><c> were</c><00:06:58.160><c> merging</c><00:06:58.639><c> these</c><00:06:58.960><c> two</c><00:06:59.199><c> right</c><00:06:59.840><c> would</c>

00:07:00.070 --> 00:07:00.080 align:start position:0%
if we were merging these two right would
 

00:07:00.080 --> 00:07:01.430 align:start position:0%
if we were merging these two right would
we<00:07:00.319><c> want</c><00:07:00.560><c> to</c><00:07:00.800><c> merge</c>

00:07:01.430 --> 00:07:01.440 align:start position:0%
we want to merge
 

00:07:01.440 --> 00:07:04.230 align:start position:0%
we want to merge
this<00:07:01.759><c> one</c><00:07:02.160><c> as</c><00:07:02.319><c> a</c><00:07:02.560><c> child</c><00:07:03.199><c> of</c><00:07:03.440><c> this</c><00:07:03.680><c> one</c><00:07:03.919><c> if</c><00:07:04.080><c> we</c>

00:07:04.230 --> 00:07:04.240 align:start position:0%
this one as a child of this one if we
 

00:07:04.240 --> 00:07:05.110 align:start position:0%
this one as a child of this one if we
did<00:07:04.479><c> that</c>

00:07:05.110 --> 00:07:05.120 align:start position:0%
did that
 

00:07:05.120 --> 00:07:06.790 align:start position:0%
did that
we<00:07:05.280><c> would</c><00:07:05.440><c> get</c><00:07:05.599><c> something</c><00:07:05.919><c> like</c><00:07:06.240><c> this</c><00:07:06.560><c> right</c>

00:07:06.790 --> 00:07:06.800 align:start position:0%
we would get something like this right
 

00:07:06.800 --> 00:07:08.309 align:start position:0%
we would get something like this right
we'd<00:07:06.960><c> get</c><00:07:07.520><c> one</c>

00:07:08.309 --> 00:07:08.319 align:start position:0%
we'd get one
 

00:07:08.319 --> 00:07:11.510 align:start position:0%
we'd get one
and<00:07:08.479><c> then</c><00:07:09.759><c> zero</c><00:07:10.240><c> right</c><00:07:10.479><c> we'd</c><00:07:10.639><c> get</c><00:07:10.880><c> basically</c><00:07:11.280><c> a</c>

00:07:11.510 --> 00:07:11.520 align:start position:0%
and then zero right we'd get basically a
 

00:07:11.520 --> 00:07:13.350 align:start position:0%
and then zero right we'd get basically a
linked<00:07:12.000><c> list</c><00:07:12.319><c> so</c><00:07:12.479><c> why</c><00:07:12.720><c> would</c><00:07:12.880><c> we</c><00:07:13.039><c> do</c>

00:07:13.350 --> 00:07:13.360 align:start position:0%
linked list so why would we do
 

00:07:13.360 --> 00:07:15.990 align:start position:0%
linked list so why would we do
that<00:07:13.759><c> when</c><00:07:14.000><c> we</c><00:07:14.240><c> would</c><00:07:14.639><c> rather</c><00:07:15.120><c> merge</c><00:07:15.599><c> the</c>

00:07:15.990 --> 00:07:16.000 align:start position:0%
that when we would rather merge the
 

00:07:16.000 --> 00:07:17.749 align:start position:0%
that when we would rather merge the
smaller<00:07:16.639><c> connected</c><00:07:17.120><c> component</c>

00:07:17.749 --> 00:07:17.759 align:start position:0%
smaller connected component
 

00:07:17.759 --> 00:07:19.749 align:start position:0%
smaller connected component
underneath<00:07:18.479><c> the</c><00:07:18.639><c> bigger</c><00:07:18.960><c> one</c><00:07:19.120><c> so</c><00:07:19.280><c> if</c><00:07:19.360><c> we</c><00:07:19.440><c> do</c>

00:07:19.749 --> 00:07:19.759 align:start position:0%
underneath the bigger one so if we do
 

00:07:19.759 --> 00:07:22.790 align:start position:0%
underneath the bigger one so if we do
that<00:07:20.400><c> we'll</c><00:07:20.560><c> get</c><00:07:20.720><c> something</c><00:07:21.120><c> like</c><00:07:21.520><c> this</c>

00:07:22.790 --> 00:07:22.800 align:start position:0%
that we'll get something like this
 

00:07:22.800 --> 00:07:25.189 align:start position:0%
that we'll get something like this
right<00:07:23.120><c> and</c><00:07:23.280><c> clearly</c><00:07:23.680><c> here</c><00:07:23.919><c> you</c><00:07:24.080><c> can</c><00:07:24.240><c> see</c><00:07:24.960><c> if</c>

00:07:25.189 --> 00:07:25.199 align:start position:0%
right and clearly here you can see if
 

00:07:25.199 --> 00:07:27.110 align:start position:0%
right and clearly here you can see if
this<00:07:25.440><c> was</c><00:07:25.680><c> a</c><00:07:25.759><c> tree</c><00:07:26.160><c> the</c><00:07:26.319><c> height</c><00:07:26.639><c> of</c><00:07:26.720><c> the</c><00:07:26.880><c> tree</c>

00:07:27.110 --> 00:07:27.120 align:start position:0%
this was a tree the height of the tree
 

00:07:27.120 --> 00:07:29.350 align:start position:0%
this was a tree the height of the tree
is<00:07:27.280><c> now</c><00:07:27.520><c> minimized</c><00:07:28.080><c> before</c><00:07:28.479><c> we</c><00:07:28.639><c> had</c><00:07:28.880><c> a</c><00:07:28.960><c> tree</c>

00:07:29.350 --> 00:07:29.360 align:start position:0%
is now minimized before we had a tree
 

00:07:29.360 --> 00:07:31.189 align:start position:0%
is now minimized before we had a tree
that<00:07:29.520><c> was</c><00:07:29.759><c> basically</c><00:07:30.160><c> a</c><00:07:30.319><c> linked</c><00:07:30.639><c> list</c><00:07:30.880><c> now</c><00:07:31.120><c> we</c>

00:07:31.189 --> 00:07:31.199 align:start position:0%
that was basically a linked list now we
 

00:07:31.199 --> 00:07:32.629 align:start position:0%
that was basically a linked list now we
have<00:07:31.360><c> a</c><00:07:31.440><c> tree</c><00:07:31.680><c> that's</c><00:07:31.919><c> actually</c><00:07:32.240><c> kind</c><00:07:32.400><c> of</c><00:07:32.560><c> a</c>

00:07:32.629 --> 00:07:32.639 align:start position:0%
have a tree that's actually kind of a
 

00:07:32.639 --> 00:07:34.790 align:start position:0%
have a tree that's actually kind of a
binary<00:07:33.199><c> tree</c><00:07:33.520><c> if</c><00:07:33.680><c> you</c><00:07:33.919><c> you</c><00:07:34.080><c> know</c><00:07:34.240><c> adjust</c><00:07:34.639><c> your</c>

00:07:34.790 --> 00:07:34.800 align:start position:0%
binary tree if you you know adjust your
 

00:07:34.800 --> 00:07:37.189 align:start position:0%
binary tree if you you know adjust your
head<00:07:35.039><c> by</c><00:07:35.280><c> 90</c><00:07:35.680><c> degrees</c><00:07:36.000><c> you</c><00:07:36.160><c> can</c><00:07:36.240><c> kind</c><00:07:36.400><c> of</c><00:07:36.639><c> see</c>

00:07:37.189 --> 00:07:37.199 align:start position:0%
head by 90 degrees you can kind of see
 

00:07:37.199 --> 00:07:39.270 align:start position:0%
head by 90 degrees you can kind of see
what<00:07:37.360><c> i'm</c><00:07:37.520><c> talking</c><00:07:37.840><c> about</c><00:07:38.479><c> but</c><00:07:38.720><c> so</c><00:07:38.880><c> that's</c><00:07:39.199><c> the</c>

00:07:39.270 --> 00:07:39.280 align:start position:0%
what i'm talking about but so that's the
 

00:07:39.280 --> 00:07:40.309 align:start position:0%
what i'm talking about but so that's the
main<00:07:39.599><c> algorithm</c>

00:07:40.309 --> 00:07:40.319 align:start position:0%
main algorithm
 

00:07:40.319 --> 00:07:42.469 align:start position:0%
main algorithm
so<00:07:40.560><c> so</c><00:07:40.800><c> far</c><00:07:41.039><c> we've</c><00:07:41.199><c> just</c><00:07:41.440><c> done</c><00:07:41.680><c> the</c><00:07:41.919><c> first</c><00:07:42.240><c> edge</c>

00:07:42.469 --> 00:07:42.479 align:start position:0%
so so far we've just done the first edge
 

00:07:42.479 --> 00:07:44.070 align:start position:0%
so so far we've just done the first edge
so<00:07:42.639><c> now</c><00:07:42.800><c> let's</c><00:07:42.960><c> look</c><00:07:43.120><c> at</c><00:07:43.199><c> the</c><00:07:43.360><c> second</c><00:07:43.680><c> edge</c><00:07:43.919><c> in</c>

00:07:44.070 --> 00:07:44.080 align:start position:0%
so now let's look at the second edge in
 

00:07:44.080 --> 00:07:44.950 align:start position:0%
so now let's look at the second edge in
our<00:07:44.240><c> input</c><00:07:44.639><c> one</c>

00:07:44.950 --> 00:07:44.960 align:start position:0%
our input one
 

00:07:44.960 --> 00:07:47.589 align:start position:0%
our input one
and<00:07:45.120><c> two</c><00:07:45.280><c> so</c><00:07:45.440><c> we're</c><00:07:45.599><c> connecting</c><00:07:46.240><c> one</c><00:07:46.639><c> and</c><00:07:46.879><c> two</c>

00:07:47.589 --> 00:07:47.599 align:start position:0%
and two so we're connecting one and two
 

00:07:47.599 --> 00:07:48.550 align:start position:0%
and two so we're connecting one and two
and<00:07:47.759><c> the</c><00:07:47.919><c> way</c>

00:07:48.550 --> 00:07:48.560 align:start position:0%
and the way
 

00:07:48.560 --> 00:07:50.309 align:start position:0%
and the way
we're<00:07:48.800><c> gonna</c><00:07:49.039><c> merge</c><00:07:49.360><c> these</c><00:07:49.680><c> is</c><00:07:49.840><c> first</c><00:07:50.160><c> we're</c>

00:07:50.309 --> 00:07:50.319 align:start position:0%
we're gonna merge these is first we're
 

00:07:50.319 --> 00:07:51.749 align:start position:0%
we're gonna merge these is first we're
gonna<00:07:50.560><c> get</c><00:07:50.720><c> the</c><00:07:51.120><c> root</c>

00:07:51.749 --> 00:07:51.759 align:start position:0%
gonna get the root
 

00:07:51.759 --> 00:07:54.869 align:start position:0%
gonna get the root
parent<00:07:52.319><c> of</c><00:07:52.639><c> both</c><00:07:52.960><c> of</c><00:07:53.039><c> these</c><00:07:53.280><c> so</c><00:07:53.680><c> for</c><00:07:53.919><c> two</c><00:07:54.560><c> two</c>

00:07:54.869 --> 00:07:54.879 align:start position:0%
parent of both of these so for two two
 

00:07:54.879 --> 00:07:55.589 align:start position:0%
parent of both of these so for two two
itself

00:07:55.589 --> 00:07:55.599 align:start position:0%
itself
 

00:07:55.599 --> 00:07:58.790 align:start position:0%
itself
is<00:07:55.840><c> its</c><00:07:56.080><c> parent</c><00:07:56.400><c> but</c><00:07:56.560><c> for</c><00:07:57.039><c> one</c><00:07:58.000><c> one</c><00:07:58.400><c> has</c>

00:07:58.790 --> 00:07:58.800 align:start position:0%
is its parent but for one one has
 

00:07:58.800 --> 00:08:01.830 align:start position:0%
is its parent but for one one has
another<00:07:59.280><c> parent</c><00:08:00.160><c> zero</c><00:08:01.039><c> so</c><00:08:01.280><c> when</c><00:08:01.520><c> you</c>

00:08:01.830 --> 00:08:01.840 align:start position:0%
another parent zero so when you
 

00:08:01.840 --> 00:08:04.869 align:start position:0%
another parent zero so when you
get<00:08:02.160><c> the</c><00:08:02.479><c> root</c><00:08:02.960><c> parent</c><00:08:03.680><c> of</c><00:08:04.000><c> two</c>

00:08:04.869 --> 00:08:04.879 align:start position:0%
get the root parent of two
 

00:08:04.879 --> 00:08:06.710 align:start position:0%
get the root parent of two
nodes<00:08:05.520><c> that's</c><00:08:05.759><c> how</c><00:08:05.919><c> you</c><00:08:06.080><c> know</c><00:08:06.319><c> if</c><00:08:06.400><c> they're</c>

00:08:06.710 --> 00:08:06.720 align:start position:0%
nodes that's how you know if they're
 

00:08:06.720 --> 00:08:08.629 align:start position:0%
nodes that's how you know if they're
already<00:08:07.120><c> connected</c><00:08:07.680><c> or</c><00:08:08.000><c> not</c>

00:08:08.629 --> 00:08:08.639 align:start position:0%
already connected or not
 

00:08:08.639 --> 00:08:11.670 align:start position:0%
already connected or not
because<00:08:09.520><c> if</c><00:08:10.319><c> if</c><00:08:10.479><c> maybe</c><00:08:10.879><c> this</c><00:08:11.199><c> two</c>

00:08:11.670 --> 00:08:11.680 align:start position:0%
because if if maybe this two
 

00:08:11.680 --> 00:08:13.749 align:start position:0%
because if if maybe this two
was<00:08:11.919><c> connected</c><00:08:12.400><c> to</c><00:08:12.639><c> one</c><00:08:13.120><c> then</c><00:08:13.280><c> we</c><00:08:13.440><c> would</c><00:08:13.520><c> say</c>

00:08:13.749 --> 00:08:13.759 align:start position:0%
was connected to one then we would say
 

00:08:13.759 --> 00:08:15.830 align:start position:0%
was connected to one then we would say
okay<00:08:14.080><c> one</c><00:08:14.400><c> two's</c><00:08:14.720><c> parent</c><00:08:15.120><c> is</c><00:08:15.280><c> one</c>

00:08:15.830 --> 00:08:15.840 align:start position:0%
okay one two's parent is one
 

00:08:15.840 --> 00:08:18.309 align:start position:0%
okay one two's parent is one
one's<00:08:16.160><c> parent</c><00:08:16.479><c> is</c><00:08:16.639><c> zero</c><00:08:17.280><c> and</c><00:08:17.759><c> and</c><00:08:17.840><c> then</c><00:08:18.160><c> what</c>

00:08:18.309 --> 00:08:18.319 align:start position:0%
one's parent is zero and and then what
 

00:08:18.319 --> 00:08:20.390 align:start position:0%
one's parent is zero and and then what
we<00:08:18.479><c> would</c><00:08:18.560><c> say</c><00:08:18.800><c> is</c><00:08:18.879><c> okay</c><00:08:19.199><c> one</c><00:08:19.520><c> and</c><00:08:19.680><c> zero</c><00:08:20.000><c> both</c>

00:08:20.390 --> 00:08:20.400 align:start position:0%
we would say is okay one and zero both
 

00:08:20.400 --> 00:08:22.230 align:start position:0%
we would say is okay one and zero both
have<00:08:20.560><c> the</c><00:08:20.720><c> same</c><00:08:21.120><c> root</c><00:08:21.440><c> parent</c><00:08:21.680><c> so</c><00:08:21.840><c> therefore</c>

00:08:22.230 --> 00:08:22.240 align:start position:0%
have the same root parent so therefore
 

00:08:22.240 --> 00:08:24.629 align:start position:0%
have the same root parent so therefore
they're<00:08:22.560><c> already</c><00:08:23.199><c> merged</c><00:08:23.680><c> so</c><00:08:23.840><c> we</c><00:08:24.000><c> don't</c><00:08:24.400><c> need</c>

00:08:24.629 --> 00:08:24.639 align:start position:0%
they're already merged so we don't need
 

00:08:24.639 --> 00:08:26.629 align:start position:0%
they're already merged so we don't need
to<00:08:24.800><c> merge</c><00:08:25.120><c> them</c><00:08:25.360><c> again</c><00:08:25.840><c> but</c><00:08:26.080><c> in</c><00:08:26.160><c> this</c><00:08:26.319><c> case</c><00:08:26.560><c> you</c>

00:08:26.629 --> 00:08:26.639 align:start position:0%
to merge them again but in this case you
 

00:08:26.639 --> 00:08:27.350 align:start position:0%
to merge them again but in this case you
can<00:08:26.879><c> see</c>

00:08:27.350 --> 00:08:27.360 align:start position:0%
can see
 

00:08:27.360 --> 00:08:29.749 align:start position:0%
can see
two<00:08:27.599><c> has</c><00:08:27.840><c> its</c><00:08:28.080><c> own</c><00:08:28.720><c> two</c><00:08:28.960><c> is</c><00:08:29.120><c> the</c><00:08:29.199><c> parent</c><00:08:29.599><c> of</c>

00:08:29.749 --> 00:08:29.759 align:start position:0%
two has its own two is the parent of
 

00:08:29.759 --> 00:08:32.389 align:start position:0%
two has its own two is the parent of
itself<00:08:30.319><c> one</c><00:08:30.560><c> has</c><00:08:30.720><c> a</c><00:08:30.879><c> root</c><00:08:31.120><c> parent</c><00:08:31.520><c> of</c><00:08:31.759><c> zero</c>

00:08:32.389 --> 00:08:32.399 align:start position:0%
itself one has a root parent of zero
 

00:08:32.399 --> 00:08:34.230 align:start position:0%
itself one has a root parent of zero
so<00:08:32.640><c> therefore</c><00:08:33.039><c> they're</c><00:08:33.279><c> not</c><00:08:33.440><c> connected</c><00:08:33.839><c> so</c><00:08:34.080><c> we</c>

00:08:34.230 --> 00:08:34.240 align:start position:0%
so therefore they're not connected so we
 

00:08:34.240 --> 00:08:36.389 align:start position:0%
so therefore they're not connected so we
can<00:08:34.560><c> connect</c><00:08:34.959><c> them</c><00:08:35.120><c> together</c><00:08:35.519><c> we</c><00:08:35.680><c> can</c><00:08:35.919><c> union</c>

00:08:36.389 --> 00:08:36.399 align:start position:0%
can connect them together we can union
 

00:08:36.399 --> 00:08:38.630 align:start position:0%
can connect them together we can union
these<00:08:36.719><c> two</c><00:08:37.039><c> components</c><00:08:37.599><c> together</c>

00:08:38.630 --> 00:08:38.640 align:start position:0%
these two components together
 

00:08:38.640 --> 00:08:40.550 align:start position:0%
these two components together
so<00:08:38.800><c> this</c><00:08:38.959><c> one</c><00:08:39.200><c> is</c><00:08:39.440><c> larger</c><00:08:40.080><c> this</c><00:08:40.240><c> one</c><00:08:40.479><c> is</c>

00:08:40.550 --> 00:08:40.560 align:start position:0%
so this one is larger this one is
 

00:08:40.560 --> 00:08:42.389 align:start position:0%
so this one is larger this one is
smaller<00:08:41.120><c> so</c><00:08:41.279><c> we're</c><00:08:41.440><c> going</c><00:08:41.519><c> to</c><00:08:41.680><c> add</c><00:08:42.080><c> this</c>

00:08:42.389 --> 00:08:42.399 align:start position:0%
smaller so we're going to add this
 

00:08:42.399 --> 00:08:45.590 align:start position:0%
smaller so we're going to add this
as<00:08:42.560><c> a</c><00:08:42.800><c> child</c><00:08:43.440><c> of</c><00:08:44.080><c> zero</c><00:08:44.560><c> where</c><00:08:44.880><c> we're</c><00:08:45.200><c> always</c>

00:08:45.590 --> 00:08:45.600 align:start position:0%
as a child of zero where we're always
 

00:08:45.600 --> 00:08:47.430 align:start position:0%
as a child of zero where we're always
adding<00:08:46.000><c> to</c><00:08:46.160><c> the</c><00:08:46.399><c> root</c><00:08:46.800><c> parent</c><00:08:47.120><c> right</c><00:08:47.279><c> we're</c>

00:08:47.430 --> 00:08:47.440 align:start position:0%
adding to the root parent right we're
 

00:08:47.440 --> 00:08:48.710 align:start position:0%
adding to the root parent right we're
not<00:08:47.600><c> going</c><00:08:47.600><c> to</c><00:08:47.760><c> add</c><00:08:47.920><c> it</c><00:08:48.000><c> to</c><00:08:48.240><c> one</c><00:08:48.480><c> we're</c><00:08:48.640><c> going</c>

00:08:48.710 --> 00:08:48.720 align:start position:0%
not going to add it to one we're going
 

00:08:48.720 --> 00:08:49.350 align:start position:0%
not going to add it to one we're going
to<00:08:48.800><c> add</c><00:08:48.959><c> it</c><00:08:49.040><c> to</c>

00:08:49.350 --> 00:08:49.360 align:start position:0%
to add it to
 

00:08:49.360 --> 00:08:51.829 align:start position:0%
to add it to
zero<00:08:49.760><c> even</c><00:08:50.000><c> though</c><00:08:50.240><c> this</c><00:08:50.560><c> edge</c><00:08:51.120><c> is</c><00:08:51.279><c> connecting</c>

00:08:51.829 --> 00:08:51.839 align:start position:0%
zero even though this edge is connecting
 

00:08:51.839 --> 00:08:52.949 align:start position:0%
zero even though this edge is connecting
these<00:08:52.080><c> two</c><00:08:52.320><c> together</c>

00:08:52.949 --> 00:08:52.959 align:start position:0%
these two together
 

00:08:52.959 --> 00:08:54.949 align:start position:0%
these two together
when<00:08:53.120><c> we</c><00:08:53.360><c> add</c><00:08:53.600><c> that</c><00:08:53.839><c> edge</c><00:08:54.160><c> itself</c><00:08:54.640><c> we're</c><00:08:54.800><c> going</c>

00:08:54.949 --> 00:08:54.959 align:start position:0%
when we add that edge itself we're going
 

00:08:54.959 --> 00:08:56.550 align:start position:0%
when we add that edge itself we're going
to<00:08:55.040><c> make</c><00:08:55.200><c> sure</c><00:08:55.360><c> that</c><00:08:55.600><c> 2</c><00:08:55.839><c> is</c><00:08:55.920><c> connected</c>

00:08:56.550 --> 00:08:56.560 align:start position:0%
to make sure that 2 is connected
 

00:08:56.560 --> 00:08:58.389 align:start position:0%
to make sure that 2 is connected
to<00:08:56.720><c> the</c><00:08:57.040><c> root</c><00:08:57.360><c> parent</c><00:08:57.680><c> because</c><00:08:57.920><c> we</c><00:08:58.080><c> want</c><00:08:58.240><c> to</c>

00:08:58.389 --> 00:08:58.399 align:start position:0%
to the root parent because we want to
 

00:08:58.399 --> 00:09:00.790 align:start position:0%
to the root parent because we want to
minimize<00:08:58.959><c> the</c><00:08:59.279><c> height</c><00:08:59.600><c> of</c><00:08:59.760><c> the</c><00:08:59.920><c> tree</c>

00:09:00.790 --> 00:09:00.800 align:start position:0%
minimize the height of the tree
 

00:09:00.800 --> 00:09:03.110 align:start position:0%
minimize the height of the tree
and<00:09:01.040><c> once</c><00:09:01.279><c> we</c><00:09:01.440><c> do</c><00:09:01.680><c> that</c><00:09:02.160><c> we</c><00:09:02.399><c> know</c><00:09:02.640><c> that</c><00:09:02.880><c> the</c>

00:09:03.110 --> 00:09:03.120 align:start position:0%
and once we do that we know that the
 

00:09:03.120 --> 00:09:04.470 align:start position:0%
and once we do that we know that the
rank<00:09:03.440><c> of</c><00:09:03.519><c> this</c><00:09:03.760><c> is</c><00:09:03.839><c> actually</c><00:09:04.160><c> going</c><00:09:04.240><c> to</c>

00:09:04.470 --> 00:09:04.480 align:start position:0%
rank of this is actually going to
 

00:09:04.480 --> 00:09:07.190 align:start position:0%
rank of this is actually going to
increase<00:09:05.360><c> so</c><00:09:05.760><c> in</c><00:09:05.920><c> our</c><00:09:06.240><c> rank</c><00:09:06.640><c> array</c><00:09:07.040><c> we're</c>

00:09:07.190 --> 00:09:07.200 align:start position:0%
increase so in our rank array we're
 

00:09:07.200 --> 00:09:08.630 align:start position:0%
increase so in our rank array we're
going<00:09:07.279><c> to</c><00:09:07.360><c> get</c><00:09:07.519><c> rid</c><00:09:07.680><c> of</c><00:09:07.920><c> two</c><00:09:08.160><c> and</c><00:09:08.240><c> now</c><00:09:08.399><c> it's</c>

00:09:08.630 --> 00:09:08.640 align:start position:0%
going to get rid of two and now it's
 

00:09:08.640 --> 00:09:09.509 align:start position:0%
going to get rid of two and now it's
actually<00:09:08.959><c> going</c><00:09:09.120><c> to</c><00:09:09.200><c> be</c>

00:09:09.509 --> 00:09:09.519 align:start position:0%
actually going to be
 

00:09:09.519 --> 00:09:11.670 align:start position:0%
actually going to be
three<00:09:10.240><c> and</c><00:09:10.399><c> also</c><00:09:10.720><c> what</c><00:09:10.880><c> i</c><00:09:10.959><c> didn't</c><00:09:11.279><c> update</c><00:09:11.600><c> in</c>

00:09:11.670 --> 00:09:11.680 align:start position:0%
three and also what i didn't update in
 

00:09:11.680 --> 00:09:13.430 align:start position:0%
three and also what i didn't update in
the<00:09:11.760><c> first</c><00:09:12.080><c> go</c><00:09:12.240><c> around</c><00:09:12.560><c> was</c><00:09:12.720><c> the</c><00:09:12.880><c> parent</c><00:09:13.279><c> of</c>

00:09:13.430 --> 00:09:13.440 align:start position:0%
the first go around was the parent of
 

00:09:13.440 --> 00:09:14.470 align:start position:0%
the first go around was the parent of
one<00:09:13.600><c> and</c><00:09:13.760><c> two</c><00:09:14.080><c> so</c>

00:09:14.470 --> 00:09:14.480 align:start position:0%
one and two so
 

00:09:14.480 --> 00:09:17.190 align:start position:0%
one and two so
one<00:09:14.720><c> and</c><00:09:14.880><c> two</c><00:09:15.440><c> have</c><00:09:15.760><c> new</c><00:09:16.000><c> parents</c><00:09:16.480><c> now</c><00:09:16.959><c> they</c>

00:09:17.190 --> 00:09:17.200 align:start position:0%
one and two have new parents now they
 

00:09:17.200 --> 00:09:18.870 align:start position:0%
one and two have new parents now they
both<00:09:17.519><c> have</c><00:09:17.760><c> parents</c><00:09:18.240><c> of</c><00:09:18.399><c> zero</c>

00:09:18.870 --> 00:09:18.880 align:start position:0%
both have parents of zero
 

00:09:18.880 --> 00:09:20.790 align:start position:0%
both have parents of zero
zero<00:09:19.200><c> so</c><00:09:19.360><c> this</c><00:09:19.680><c> array</c><00:09:20.240><c> is</c><00:09:20.320><c> what</c><00:09:20.480><c> we're</c><00:09:20.640><c> going</c>

00:09:20.790 --> 00:09:20.800 align:start position:0%
zero so this array is what we're going
 

00:09:20.800 --> 00:09:23.350 align:start position:0%
zero so this array is what we're going
to<00:09:20.959><c> use</c><00:09:21.440><c> to</c><00:09:21.680><c> go</c><00:09:21.920><c> through</c><00:09:22.160><c> every</c><00:09:22.399><c> node</c><00:09:22.720><c> and</c><00:09:22.959><c> find</c>

00:09:23.350 --> 00:09:23.360 align:start position:0%
to use to go through every node and find
 

00:09:23.360 --> 00:09:24.630 align:start position:0%
to use to go through every node and find
its<00:09:23.680><c> root</c><00:09:24.000><c> parent</c>

00:09:24.630 --> 00:09:24.640 align:start position:0%
its root parent
 

00:09:24.640 --> 00:09:26.870 align:start position:0%
its root parent
so<00:09:24.880><c> we've</c><00:09:25.040><c> done</c><00:09:25.279><c> both</c><00:09:25.600><c> of</c><00:09:25.760><c> the</c><00:09:26.000><c> first</c><00:09:26.399><c> edges</c>

00:09:26.870 --> 00:09:26.880 align:start position:0%
so we've done both of the first edges
 

00:09:26.880 --> 00:09:27.829 align:start position:0%
so we've done both of the first edges
now<00:09:27.120><c> the</c><00:09:27.360><c> last</c>

00:09:27.829 --> 00:09:27.839 align:start position:0%
now the last
 

00:09:27.839 --> 00:09:29.430 align:start position:0%
now the last
and<00:09:28.000><c> third</c><00:09:28.320><c> edge</c><00:09:28.560><c> we're</c><00:09:28.720><c> connecting</c><00:09:29.200><c> three</c>

00:09:29.430 --> 00:09:29.440 align:start position:0%
and third edge we're connecting three
 

00:09:29.440 --> 00:09:30.949 align:start position:0%
and third edge we're connecting three
and<00:09:29.600><c> four</c><00:09:29.839><c> together</c><00:09:30.240><c> so</c><00:09:30.399><c> in</c><00:09:30.480><c> this</c><00:09:30.640><c> case</c><00:09:30.880><c> it</c>

00:09:30.949 --> 00:09:30.959 align:start position:0%
and four together so in this case it
 

00:09:30.959 --> 00:09:32.389 align:start position:0%
and four together so in this case it
doesn't<00:09:31.200><c> really</c><00:09:31.440><c> matter</c><00:09:31.680><c> which</c><00:09:31.920><c> one</c><00:09:32.160><c> is</c><00:09:32.240><c> the</c>

00:09:32.389 --> 00:09:32.399 align:start position:0%
doesn't really matter which one is the
 

00:09:32.399 --> 00:09:33.829 align:start position:0%
doesn't really matter which one is the
parent<00:09:32.720><c> i'm</c><00:09:32.880><c> just</c><00:09:32.959><c> gonna</c><00:09:33.120><c> draw</c><00:09:33.360><c> it</c><00:09:33.440><c> like</c><00:09:33.600><c> this</c>

00:09:33.829 --> 00:09:33.839 align:start position:0%
parent i'm just gonna draw it like this
 

00:09:33.839 --> 00:09:34.790 align:start position:0%
parent i'm just gonna draw it like this
because<00:09:34.000><c> it's</c><00:09:34.240><c> easier</c>

00:09:34.790 --> 00:09:34.800 align:start position:0%
because it's easier
 

00:09:34.800 --> 00:09:38.230 align:start position:0%
because it's easier
so<00:09:35.120><c> three</c><00:09:35.360><c> will</c><00:09:35.519><c> be</c><00:09:35.680><c> the</c><00:09:35.839><c> parent</c><00:09:36.240><c> of</c><00:09:36.399><c> four</c><00:09:37.600><c> so</c>

00:09:38.230 --> 00:09:38.240 align:start position:0%
so three will be the parent of four so
 

00:09:38.240 --> 00:09:40.630 align:start position:0%
so three will be the parent of four so
for<00:09:38.560><c> node</c><00:09:38.959><c> three</c><00:09:39.279><c> we</c><00:09:39.519><c> will</c><00:09:39.839><c> update</c><00:09:40.160><c> its</c><00:09:40.399><c> rank</c>

00:09:40.630 --> 00:09:40.640 align:start position:0%
for node three we will update its rank
 

00:09:40.640 --> 00:09:42.389 align:start position:0%
for node three we will update its rank
its<00:09:40.800><c> rank</c><00:09:41.120><c> is</c><00:09:41.200><c> going</c><00:09:41.279><c> to</c><00:09:41.440><c> be</c><00:09:41.600><c> two</c>

00:09:42.389 --> 00:09:42.399 align:start position:0%
its rank is going to be two
 

00:09:42.399 --> 00:09:44.230 align:start position:0%
its rank is going to be two
and<00:09:42.720><c> the</c><00:09:42.880><c> parent</c><00:09:43.279><c> of</c><00:09:43.440><c> three</c><00:09:43.760><c> is</c><00:09:43.839><c> going</c><00:09:43.920><c> to</c><00:09:44.080><c> stay</c>

00:09:44.230 --> 00:09:44.240 align:start position:0%
and the parent of three is going to stay
 

00:09:44.240 --> 00:09:46.070 align:start position:0%
and the parent of three is going to stay
the<00:09:44.399><c> same</c><00:09:44.560><c> but</c><00:09:44.720><c> the</c><00:09:44.880><c> parent</c><00:09:45.200><c> of</c><00:09:45.360><c> four</c><00:09:45.680><c> is</c><00:09:45.839><c> now</c>

00:09:46.070 --> 00:09:46.080 align:start position:0%
the same but the parent of four is now
 

00:09:46.080 --> 00:09:47.750 align:start position:0%
the same but the parent of four is now
going<00:09:46.160><c> to</c><00:09:46.240><c> be</c><00:09:46.480><c> three</c><00:09:46.800><c> so</c><00:09:46.959><c> that's</c><00:09:47.279><c> just</c><00:09:47.440><c> kind</c><00:09:47.600><c> of</c>

00:09:47.750 --> 00:09:47.760 align:start position:0%
going to be three so that's just kind of
 

00:09:47.760 --> 00:09:49.350 align:start position:0%
going to be three so that's just kind of
the<00:09:47.920><c> bookkeeping</c><00:09:48.560><c> we're</c><00:09:48.800><c> going</c><00:09:48.880><c> to</c><00:09:48.959><c> be</c><00:09:49.120><c> doing</c>

00:09:49.350 --> 00:09:49.360 align:start position:0%
the bookkeeping we're going to be doing
 

00:09:49.360 --> 00:09:50.230 align:start position:0%
the bookkeeping we're going to be doing
to<00:09:49.600><c> update</c>

00:09:50.230 --> 00:09:50.240 align:start position:0%
to update
 

00:09:50.240 --> 00:09:53.350 align:start position:0%
to update
our<00:09:50.480><c> parent</c><00:09:50.800><c> and</c><00:09:51.040><c> rank</c><00:09:51.360><c> arrays</c><00:09:52.240><c> but</c><00:09:52.560><c> each</c><00:09:52.959><c> time</c>

00:09:53.350 --> 00:09:53.360 align:start position:0%
our parent and rank arrays but each time
 

00:09:53.360 --> 00:09:55.910 align:start position:0%
our parent and rank arrays but each time
we<00:09:53.680><c> made</c><00:09:54.000><c> a</c><00:09:54.240><c> union</c><00:09:54.720><c> operation</c><00:09:55.360><c> we</c>

00:09:55.910 --> 00:09:55.920 align:start position:0%
we made a union operation we
 

00:09:55.920 --> 00:09:57.430 align:start position:0%
we made a union operation we
were<00:09:56.160><c> taking</c><00:09:56.560><c> our</c><00:09:56.720><c> initial</c><00:09:57.040><c> number</c><00:09:57.279><c> of</c>

00:09:57.430 --> 00:09:57.440 align:start position:0%
were taking our initial number of
 

00:09:57.440 --> 00:09:59.829 align:start position:0%
were taking our initial number of
components<00:09:58.000><c> five</c><00:09:58.560><c> decrementing</c><00:09:59.200><c> it</c><00:09:59.279><c> by</c><00:09:59.519><c> one</c>

00:09:59.829 --> 00:09:59.839 align:start position:0%
components five decrementing it by one
 

00:09:59.839 --> 00:10:01.750 align:start position:0%
components five decrementing it by one
and<00:10:00.000><c> so</c><00:10:00.160><c> we</c><00:10:00.320><c> did</c><00:10:00.560><c> a</c><00:10:00.640><c> union</c><00:10:01.120><c> three</c><00:10:01.360><c> different</c>

00:10:01.750 --> 00:10:01.760 align:start position:0%
and so we did a union three different
 

00:10:01.760 --> 00:10:02.310 align:start position:0%
and so we did a union three different
times

00:10:02.310 --> 00:10:02.320 align:start position:0%
times
 

00:10:02.320 --> 00:10:04.630 align:start position:0%
times
so<00:10:02.480><c> we</c><00:10:02.640><c> got</c><00:10:02.959><c> a</c><00:10:03.040><c> result</c><00:10:03.440><c> of</c><00:10:03.600><c> two</c><00:10:04.079><c> two</c><00:10:04.399><c> is</c><00:10:04.480><c> the</c>

00:10:04.630 --> 00:10:04.640 align:start position:0%
so we got a result of two two is the
 

00:10:04.640 --> 00:10:06.310 align:start position:0%
so we got a result of two two is the
number<00:10:04.880><c> of</c><00:10:04.959><c> connected</c><00:10:05.440><c> components</c><00:10:05.920><c> we</c><00:10:06.079><c> have</c>

00:10:06.310 --> 00:10:06.320 align:start position:0%
number of connected components we have
 

00:10:06.320 --> 00:10:07.350 align:start position:0%
number of connected components we have
at<00:10:06.480><c> the</c><00:10:06.720><c> end</c>

00:10:07.350 --> 00:10:07.360 align:start position:0%
at the end
 

00:10:07.360 --> 00:10:09.509 align:start position:0%
at the end
but<00:10:07.600><c> let's</c><00:10:07.760><c> say</c><00:10:08.000><c> we</c><00:10:08.160><c> just</c><00:10:08.320><c> had</c><00:10:08.560><c> one</c><00:10:08.880><c> more</c><00:10:09.200><c> edge</c>

00:10:09.509 --> 00:10:09.519 align:start position:0%
but let's say we just had one more edge
 

00:10:09.519 --> 00:10:10.710 align:start position:0%
but let's say we just had one more edge
let's<00:10:09.680><c> say</c><00:10:09.839><c> we</c><00:10:09.920><c> had</c><00:10:10.160><c> an</c><00:10:10.320><c> edge</c>

00:10:10.710 --> 00:10:10.720 align:start position:0%
let's say we had an edge
 

00:10:10.720 --> 00:10:12.550 align:start position:0%
let's say we had an edge
zero<00:10:11.200><c> two</c><00:10:11.600><c> so</c><00:10:11.760><c> let's</c><00:10:11.920><c> say</c><00:10:12.079><c> we're</c><00:10:12.240><c> trying</c><00:10:12.480><c> to</c>

00:10:12.550 --> 00:10:12.560 align:start position:0%
zero two so let's say we're trying to
 

00:10:12.560 --> 00:10:13.910 align:start position:0%
zero two so let's say we're trying to
merge<00:10:12.880><c> zero</c><00:10:13.120><c> and</c><00:10:13.279><c> two</c><00:10:13.519><c> right</c>

00:10:13.910 --> 00:10:13.920 align:start position:0%
merge zero and two right
 

00:10:13.920 --> 00:10:15.990 align:start position:0%
merge zero and two right
first<00:10:14.240><c> we'll</c><00:10:14.399><c> get</c><00:10:14.560><c> the</c><00:10:14.720><c> parent</c><00:10:15.200><c> of</c><00:10:15.519><c> two</c><00:10:15.760><c> the</c>

00:10:15.990 --> 00:10:16.000 align:start position:0%
first we'll get the parent of two the
 

00:10:16.000 --> 00:10:17.509 align:start position:0%
first we'll get the parent of two the
root<00:10:16.240><c> parent</c><00:10:16.560><c> which</c><00:10:16.800><c> is</c><00:10:16.959><c> zero</c>

00:10:17.509 --> 00:10:17.519 align:start position:0%
root parent which is zero
 

00:10:17.519 --> 00:10:19.910 align:start position:0%
root parent which is zero
then<00:10:17.680><c> we'll</c><00:10:17.839><c> get</c><00:10:18.000><c> the</c><00:10:18.160><c> root</c><00:10:18.480><c> parent</c><00:10:18.880><c> of</c><00:10:19.200><c> zero</c>

00:10:19.910 --> 00:10:19.920 align:start position:0%
then we'll get the root parent of zero
 

00:10:19.920 --> 00:10:21.829 align:start position:0%
then we'll get the root parent of zero
zero<00:10:20.399><c> is</c><00:10:20.560><c> the</c><00:10:20.720><c> root</c><00:10:20.959><c> parent</c><00:10:21.279><c> of</c><00:10:21.360><c> zero</c><00:10:21.600><c> so</c><00:10:21.760><c> what</c>

00:10:21.829 --> 00:10:21.839 align:start position:0%
zero is the root parent of zero so what
 

00:10:21.839 --> 00:10:22.630 align:start position:0%
zero is the root parent of zero so what
we're<00:10:22.000><c> going</c><00:10:22.079><c> to</c><00:10:22.160><c> find</c>

00:10:22.630 --> 00:10:22.640 align:start position:0%
we're going to find
 

00:10:22.640 --> 00:10:24.790 align:start position:0%
we're going to find
since<00:10:23.040><c> both</c><00:10:23.279><c> of</c><00:10:23.440><c> these</c><00:10:23.680><c> have</c><00:10:23.839><c> the</c><00:10:24.000><c> exact</c><00:10:24.399><c> same</c>

00:10:24.790 --> 00:10:24.800 align:start position:0%
since both of these have the exact same
 

00:10:24.800 --> 00:10:25.670 align:start position:0%
since both of these have the exact same
root<00:10:25.120><c> parent</c>

00:10:25.670 --> 00:10:25.680 align:start position:0%
root parent
 

00:10:25.680 --> 00:10:28.069 align:start position:0%
root parent
that<00:10:25.839><c> means</c><00:10:26.079><c> they're</c><00:10:26.480><c> already</c><00:10:26.959><c> connected</c><00:10:27.680><c> so</c>

00:10:28.069 --> 00:10:28.079 align:start position:0%
that means they're already connected so
 

00:10:28.079 --> 00:10:30.069 align:start position:0%
that means they're already connected so
we<00:10:28.240><c> had</c><00:10:28.560><c> two</c><00:10:28.800><c> connected</c><00:10:29.279><c> components</c><00:10:29.839><c> we're</c>

00:10:30.069 --> 00:10:30.079 align:start position:0%
we had two connected components we're
 

00:10:30.079 --> 00:10:31.590 align:start position:0%
we had two connected components we're
not<00:10:30.240><c> going</c><00:10:30.399><c> to</c><00:10:30.480><c> decrement</c><00:10:30.959><c> this</c><00:10:31.200><c> by</c><00:10:31.360><c> one</c>

00:10:31.590 --> 00:10:31.600 align:start position:0%
not going to decrement this by one
 

00:10:31.600 --> 00:10:32.069 align:start position:0%
not going to decrement this by one
because<00:10:31.839><c> we</c>

00:10:32.069 --> 00:10:32.079 align:start position:0%
because we
 

00:10:32.079 --> 00:10:34.389 align:start position:0%
because we
didn't<00:10:32.560><c> end</c><00:10:32.800><c> up</c><00:10:33.360><c> you</c><00:10:33.519><c> know</c><00:10:33.680><c> decreasing</c><00:10:34.320><c> the</c>

00:10:34.389 --> 00:10:34.399 align:start position:0%
didn't end up you know decreasing the
 

00:10:34.399 --> 00:10:35.910 align:start position:0%
didn't end up you know decreasing the
number<00:10:34.640><c> of</c><00:10:34.800><c> connected</c><00:10:35.120><c> components</c><00:10:35.600><c> we</c><00:10:35.680><c> didn't</c>

00:10:35.910 --> 00:10:35.920 align:start position:0%
number of connected components we didn't
 

00:10:35.920 --> 00:10:37.910 align:start position:0%
number of connected components we didn't
even<00:10:36.160><c> do</c><00:10:36.399><c> a</c><00:10:36.480><c> union</c><00:10:36.959><c> operation</c><00:10:37.440><c> so</c><00:10:37.600><c> in</c><00:10:37.760><c> that</c>

00:10:37.910 --> 00:10:37.920 align:start position:0%
even do a union operation so in that
 

00:10:37.920 --> 00:10:38.310 align:start position:0%
even do a union operation so in that
case

00:10:38.310 --> 00:10:38.320 align:start position:0%
case
 

00:10:38.320 --> 00:10:40.710 align:start position:0%
case
we<00:10:38.480><c> would</c><00:10:38.720><c> return</c><00:10:39.519><c> before</c><00:10:39.920><c> we</c><00:10:40.079><c> made</c><00:10:40.399><c> any</c>

00:10:40.710 --> 00:10:40.720 align:start position:0%
we would return before we made any
 

00:10:40.720 --> 00:10:42.069 align:start position:0%
we would return before we made any
changes<00:10:41.200><c> to</c><00:10:41.360><c> the</c><00:10:41.519><c> graph</c>

00:10:42.069 --> 00:10:42.079 align:start position:0%
changes to the graph
 

00:10:42.079 --> 00:10:43.750 align:start position:0%
changes to the graph
once<00:10:42.320><c> we</c><00:10:42.480><c> see</c><00:10:42.640><c> that</c><00:10:42.720><c> they</c><00:10:42.959><c> both</c><00:10:43.200><c> have</c><00:10:43.360><c> the</c><00:10:43.440><c> same</c>

00:10:43.750 --> 00:10:43.760 align:start position:0%
once we see that they both have the same
 

00:10:43.760 --> 00:10:45.750 align:start position:0%
once we see that they both have the same
parent<00:10:44.240><c> we</c><00:10:44.399><c> return</c><00:10:44.880><c> immediately</c>

00:10:45.750 --> 00:10:45.760 align:start position:0%
parent we return immediately
 

00:10:45.760 --> 00:10:48.310 align:start position:0%
parent we return immediately
so<00:10:45.920><c> that's</c><00:10:46.399><c> the</c><00:10:46.560><c> main</c><00:10:47.519><c> idea</c><00:10:48.000><c> of</c><00:10:48.079><c> this</c>

00:10:48.310 --> 00:10:48.320 align:start position:0%
so that's the main idea of this
 

00:10:48.320 --> 00:10:50.150 align:start position:0%
so that's the main idea of this
algorithm<00:10:48.800><c> once</c><00:10:49.040><c> you've</c><00:10:49.360><c> implemented</c><00:10:50.000><c> it</c>

00:10:50.150 --> 00:10:50.160 align:start position:0%
algorithm once you've implemented it
 

00:10:50.160 --> 00:10:52.230 align:start position:0%
algorithm once you've implemented it
you've<00:10:50.480><c> written</c><00:10:50.800><c> it</c><00:10:50.959><c> out</c><00:10:51.200><c> and</c><00:10:51.440><c> coded</c><00:10:51.760><c> it</c><00:10:51.920><c> once</c>

00:10:52.230 --> 00:10:52.240 align:start position:0%
you've written it out and coded it once
 

00:10:52.240 --> 00:10:53.670 align:start position:0%
you've written it out and coded it once
or<00:10:52.399><c> twice</c><00:10:52.640><c> or</c><00:10:52.800><c> three</c><00:10:53.120><c> times</c>

00:10:53.670 --> 00:10:53.680 align:start position:0%
or twice or three times
 

00:10:53.680 --> 00:10:55.269 align:start position:0%
or twice or three times
it<00:10:53.760><c> gets</c><00:10:54.000><c> pretty</c><00:10:54.320><c> straightforward</c><00:10:55.040><c> because</c>

00:10:55.269 --> 00:10:55.279 align:start position:0%
it gets pretty straightforward because
 

00:10:55.279 --> 00:10:57.110 align:start position:0%
it gets pretty straightforward because
most<00:10:55.600><c> union</c><00:10:55.920><c> find</c><00:10:56.240><c> problems</c><00:10:56.720><c> are</c><00:10:56.800><c> pretty</c>

00:10:57.110 --> 00:10:57.120 align:start position:0%
most union find problems are pretty
 

00:10:57.120 --> 00:10:57.829 align:start position:0%
most union find problems are pretty
similar

00:10:57.829 --> 00:10:57.839 align:start position:0%
similar
 

00:10:57.839 --> 00:10:59.670 align:start position:0%
similar
so<00:10:58.079><c> now</c><00:10:58.240><c> let's</c><00:10:58.480><c> get</c><00:10:58.640><c> into</c><00:10:58.880><c> the</c><00:10:58.959><c> code</c><00:10:59.279><c> and</c><00:10:59.440><c> like</c>

00:10:59.670 --> 00:10:59.680 align:start position:0%
so now let's get into the code and like
 

00:10:59.680 --> 00:11:01.269 align:start position:0%
so now let's get into the code and like
i<00:10:59.760><c> said</c><00:10:59.920><c> this</c><00:11:00.079><c> is</c><00:11:00.240><c> a</c><00:11:00.320><c> leak</c><00:11:00.560><c> code</c><00:11:00.800><c> premium</c>

00:11:01.269 --> 00:11:01.279 align:start position:0%
i said this is a leak code premium
 

00:11:01.279 --> 00:11:01.829 align:start position:0%
i said this is a leak code premium
problem

00:11:01.829 --> 00:11:01.839 align:start position:0%
problem
 

00:11:01.839 --> 00:11:03.750 align:start position:0%
problem
but<00:11:02.079><c> if</c><00:11:02.240><c> you</c><00:11:02.399><c> don't</c><00:11:02.640><c> have</c><00:11:02.880><c> leak</c><00:11:03.040><c> code</c><00:11:03.279><c> premium</c>

00:11:03.750 --> 00:11:03.760 align:start position:0%
but if you don't have leak code premium
 

00:11:03.760 --> 00:11:06.790 align:start position:0%
but if you don't have leak code premium
i'd<00:11:03.920><c> recommend</c><00:11:04.399><c> solving</c><00:11:04.720><c> leak</c><00:11:04.959><c> code</c><00:11:05.320><c> 547</c>

00:11:06.790 --> 00:11:06.800 align:start position:0%
i'd recommend solving leak code 547
 

00:11:06.800 --> 00:11:09.430 align:start position:0%
i'd recommend solving leak code 547
so<00:11:07.040><c> this</c><00:11:07.279><c> problem</c><00:11:07.680><c> leak</c><00:11:07.920><c> code</c><00:11:08.160><c> 547</c><00:11:09.040><c> number</c><00:11:09.279><c> of</c>

00:11:09.430 --> 00:11:09.440 align:start position:0%
so this problem leak code 547 number of
 

00:11:09.440 --> 00:11:11.590 align:start position:0%
so this problem leak code 547 number of
provinces<00:11:10.079><c> is</c><00:11:10.320><c> pretty</c><00:11:10.560><c> much</c><00:11:10.880><c> exactly</c>

00:11:11.590 --> 00:11:11.600 align:start position:0%
provinces is pretty much exactly
 

00:11:11.600 --> 00:11:13.829 align:start position:0%
provinces is pretty much exactly
like<00:11:12.000><c> a</c><00:11:12.160><c> union</c><00:11:12.560><c> find</c><00:11:12.880><c> problem</c><00:11:13.279><c> so</c><00:11:13.519><c> if</c><00:11:13.600><c> you</c><00:11:13.680><c> want</c>

00:11:13.829 --> 00:11:13.839 align:start position:0%
like a union find problem so if you want
 

00:11:13.839 --> 00:11:15.430 align:start position:0%
like a union find problem so if you want
to<00:11:13.920><c> practice</c><00:11:14.320><c> union</c><00:11:14.640><c> find</c><00:11:14.880><c> go</c><00:11:15.040><c> ahead</c><00:11:15.200><c> and</c><00:11:15.279><c> do</c>

00:11:15.430 --> 00:11:15.440 align:start position:0%
to practice union find go ahead and do
 

00:11:15.440 --> 00:11:17.030 align:start position:0%
to practice union find go ahead and do
it<00:11:15.600><c> on</c><00:11:15.680><c> this</c><00:11:15.920><c> problem</c><00:11:16.240><c> it's</c><00:11:16.480><c> pretty</c><00:11:16.640><c> much</c><00:11:16.880><c> the</c>

00:11:17.030 --> 00:11:17.040 align:start position:0%
it on this problem it's pretty much the
 

00:11:17.040 --> 00:11:18.069 align:start position:0%
it on this problem it's pretty much the
exact<00:11:17.440><c> same</c>

00:11:18.069 --> 00:11:18.079 align:start position:0%
exact same
 

00:11:18.079 --> 00:11:19.509 align:start position:0%
exact same
so<00:11:18.320><c> like</c><00:11:18.480><c> i</c><00:11:18.640><c> mentioned</c><00:11:18.959><c> we're</c><00:11:19.120><c> going</c><00:11:19.200><c> to</c><00:11:19.279><c> have</c>

00:11:19.509 --> 00:11:19.519 align:start position:0%
so like i mentioned we're going to have
 

00:11:19.519 --> 00:11:21.670 align:start position:0%
so like i mentioned we're going to have
a<00:11:19.760><c> parent</c><00:11:20.160><c> array</c><00:11:20.880><c> initially</c>

00:11:21.670 --> 00:11:21.680 align:start position:0%
a parent array initially
 

00:11:21.680 --> 00:11:24.710 align:start position:0%
a parent array initially
each<00:11:22.160><c> node</c><00:11:22.800><c> so</c><00:11:22.959><c> for</c><00:11:23.200><c> i</c><00:11:23.600><c> and</c><00:11:23.920><c> range</c><00:11:24.480><c> of</c>

00:11:24.710 --> 00:11:24.720 align:start position:0%
each node so for i and range of
 

00:11:24.720 --> 00:11:26.230 align:start position:0%
each node so for i and range of
n<00:11:25.120><c> each</c><00:11:25.360><c> node</c><00:11:25.600><c> is</c><00:11:25.680><c> just</c><00:11:25.839><c> going</c><00:11:25.920><c> to</c><00:11:26.000><c> be</c><00:11:26.160><c> the</c>

00:11:26.230 --> 00:11:26.240 align:start position:0%
n each node is just going to be the
 

00:11:26.240 --> 00:11:28.550 align:start position:0%
n each node is just going to be the
parent<00:11:26.560><c> of</c><00:11:26.720><c> itself</c><00:11:27.519><c> and</c><00:11:27.600><c> we're</c><00:11:27.839><c> gonna</c><00:11:28.079><c> have</c><00:11:28.320><c> a</c>

00:11:28.550 --> 00:11:28.560 align:start position:0%
parent of itself and we're gonna have a
 

00:11:28.560 --> 00:11:29.910 align:start position:0%
parent of itself and we're gonna have a
list<00:11:28.880><c> of</c><00:11:29.040><c> ranks</c><00:11:29.440><c> each</c>

00:11:29.910 --> 00:11:29.920 align:start position:0%
list of ranks each
 

00:11:29.920 --> 00:11:32.310 align:start position:0%
list of ranks each
uh<00:11:30.880><c> you</c><00:11:31.040><c> know</c><00:11:31.200><c> component</c><00:11:31.760><c> is</c><00:11:31.839><c> just</c><00:11:32.000><c> gonna</c><00:11:32.160><c> have</c>

00:11:32.310 --> 00:11:32.320 align:start position:0%
uh you know component is just gonna have
 

00:11:32.320 --> 00:11:34.550 align:start position:0%
uh you know component is just gonna have
a<00:11:32.399><c> rank</c><00:11:32.720><c> of</c><00:11:32.880><c> one</c><00:11:33.120><c> initially</c><00:11:33.839><c> so</c>

00:11:34.550 --> 00:11:34.560 align:start position:0%
a rank of one initially so
 

00:11:34.560 --> 00:11:36.069 align:start position:0%
a rank of one initially so
and<00:11:34.640><c> then</c><00:11:34.800><c> we're</c><00:11:34.959><c> gonna</c><00:11:35.200><c> define</c><00:11:35.680><c> our</c><00:11:35.839><c> two</c>

00:11:36.069 --> 00:11:36.079 align:start position:0%
and then we're gonna define our two
 

00:11:36.079 --> 00:11:38.470 align:start position:0%
and then we're gonna define our two
functions<00:11:36.640><c> find</c><00:11:37.120><c> and</c><00:11:37.360><c> union</c><00:11:37.839><c> find</c><00:11:38.240><c> is</c><00:11:38.320><c> the</c>

00:11:38.470 --> 00:11:38.480 align:start position:0%
functions find and union find is the
 

00:11:38.480 --> 00:11:39.829 align:start position:0%
functions find and union find is the
simpler<00:11:38.880><c> one</c><00:11:39.040><c> so</c><00:11:39.200><c> let's</c><00:11:39.360><c> start</c><00:11:39.600><c> with</c><00:11:39.680><c> that</c>

00:11:39.829 --> 00:11:39.839 align:start position:0%
simpler one so let's start with that
 

00:11:39.839 --> 00:11:41.190 align:start position:0%
simpler one so let's start with that
let's<00:11:40.000><c> say</c><00:11:40.240><c> we're</c><00:11:40.399><c> given</c><00:11:40.720><c> a</c>

00:11:41.190 --> 00:11:41.200 align:start position:0%
let's say we're given a
 

00:11:41.200 --> 00:11:44.630 align:start position:0%
let's say we're given a
node<00:11:41.680><c> n1</c><00:11:42.240><c> we</c><00:11:42.399><c> want</c><00:11:42.560><c> to</c><00:11:42.800><c> find</c><00:11:43.200><c> its</c><00:11:43.600><c> root</c><00:11:44.000><c> parent</c>

00:11:44.630 --> 00:11:44.640 align:start position:0%
node n1 we want to find its root parent
 

00:11:44.640 --> 00:11:47.190 align:start position:0%
node n1 we want to find its root parent
so<00:11:44.959><c> for</c><00:11:45.519><c> n1</c><00:11:45.920><c> we</c><00:11:46.079><c> want</c><00:11:46.240><c> to</c><00:11:46.320><c> return</c><00:11:46.800><c> its</c><00:11:46.959><c> root</c>

00:11:47.190 --> 00:11:47.200 align:start position:0%
so for n1 we want to return its root
 

00:11:47.200 --> 00:11:48.870 align:start position:0%
so for n1 we want to return its root
parent<00:11:47.440><c> so</c><00:11:47.680><c> initially</c><00:11:48.079><c> we'll</c><00:11:48.320><c> just</c><00:11:48.560><c> set</c><00:11:48.800><c> the</c>

00:11:48.870 --> 00:11:48.880 align:start position:0%
parent so initially we'll just set the
 

00:11:48.880 --> 00:11:51.030 align:start position:0%
parent so initially we'll just set the
result<00:11:49.279><c> equal</c><00:11:49.519><c> to</c><00:11:49.680><c> n1</c><00:11:50.160><c> and</c><00:11:50.240><c> we'll</c><00:11:50.480><c> say</c>

00:11:51.030 --> 00:11:51.040 align:start position:0%
result equal to n1 and we'll say
 

00:11:51.040 --> 00:11:54.629 align:start position:0%
result equal to n1 and we'll say
while<00:11:51.920><c> result</c><00:11:52.639><c> is</c><00:11:52.959><c> not</c><00:11:53.440><c> equal</c><00:11:53.839><c> to</c><00:11:54.000><c> the</c><00:11:54.240><c> parent</c>

00:11:54.629 --> 00:11:54.639 align:start position:0%
while result is not equal to the parent
 

00:11:54.639 --> 00:11:56.949 align:start position:0%
while result is not equal to the parent
of<00:11:54.880><c> itself</c><00:11:55.519><c> we</c><00:11:55.680><c> know</c><00:11:55.839><c> we</c><00:11:56.000><c> can</c><00:11:56.160><c> stop</c><00:11:56.560><c> searching</c>

00:11:56.949 --> 00:11:56.959 align:start position:0%
of itself we know we can stop searching
 

00:11:56.959 --> 00:11:58.550 align:start position:0%
of itself we know we can stop searching
once<00:11:57.200><c> we've</c><00:11:57.360><c> gotten</c><00:11:57.600><c> to</c><00:11:57.760><c> a</c><00:11:57.920><c> node</c>

00:11:58.550 --> 00:11:58.560 align:start position:0%
once we've gotten to a node
 

00:11:58.560 --> 00:12:01.350 align:start position:0%
once we've gotten to a node
where<00:11:58.880><c> the</c><00:11:59.040><c> node</c><00:11:59.360><c> itself</c><00:12:00.079><c> is</c><00:12:00.320><c> its</c><00:12:00.560><c> own</c><00:12:00.959><c> parent</c>

00:12:01.350 --> 00:12:01.360 align:start position:0%
where the node itself is its own parent
 

00:12:01.360 --> 00:12:02.710 align:start position:0%
where the node itself is its own parent
because<00:12:01.519><c> that</c><00:12:01.680><c> means</c><00:12:01.920><c> we</c><00:12:02.079><c> can't</c><00:12:02.320><c> go</c><00:12:02.480><c> any</c>

00:12:02.710 --> 00:12:02.720 align:start position:0%
because that means we can't go any
 

00:12:02.720 --> 00:12:04.550 align:start position:0%
because that means we can't go any
higher<00:12:02.959><c> we</c><00:12:03.120><c> found</c><00:12:03.360><c> the</c><00:12:03.519><c> root</c><00:12:03.839><c> parent</c>

00:12:04.550 --> 00:12:04.560 align:start position:0%
higher we found the root parent
 

00:12:04.560 --> 00:12:05.990 align:start position:0%
higher we found the root parent
so<00:12:04.800><c> in</c><00:12:04.880><c> that</c><00:12:05.040><c> case</c><00:12:05.200><c> what</c><00:12:05.440><c> we</c><00:12:05.519><c> would</c><00:12:05.600><c> do</c><00:12:05.760><c> is</c><00:12:05.839><c> just</c>

00:12:05.990 --> 00:12:06.000 align:start position:0%
so in that case what we would do is just
 

00:12:06.000 --> 00:12:07.829 align:start position:0%
so in that case what we would do is just
return<00:12:06.720><c> the</c><00:12:06.880><c> result</c><00:12:07.200><c> which</c><00:12:07.440><c> is</c><00:12:07.519><c> the</c><00:12:07.680><c> root</c>

00:12:07.829 --> 00:12:07.839 align:start position:0%
return the result which is the root
 

00:12:07.839 --> 00:12:09.030 align:start position:0%
return the result which is the root
parent<00:12:08.079><c> but</c><00:12:08.240><c> if</c><00:12:08.399><c> we</c><00:12:08.639><c> don't</c>

00:12:09.030 --> 00:12:09.040 align:start position:0%
parent but if we don't
 

00:12:09.040 --> 00:12:10.949 align:start position:0%
parent but if we don't
have<00:12:09.360><c> that</c><00:12:09.760><c> what</c><00:12:10.000><c> we</c><00:12:10.079><c> can</c><00:12:10.240><c> do</c><00:12:10.480><c> then</c><00:12:10.800><c> is</c>

00:12:10.949 --> 00:12:10.959 align:start position:0%
have that what we can do then is
 

00:12:10.959 --> 00:12:12.550 align:start position:0%
have that what we can do then is
basically<00:12:11.519><c> update</c><00:12:11.920><c> the</c><00:12:12.160><c> current</c>

00:12:12.550 --> 00:12:12.560 align:start position:0%
basically update the current
 

00:12:12.560 --> 00:12:15.670 align:start position:0%
basically update the current
pointer<00:12:13.360><c> to</c><00:12:13.600><c> be</c><00:12:14.880><c> its</c><00:12:15.200><c> parent</c>

00:12:15.670 --> 00:12:15.680 align:start position:0%
pointer to be its parent
 

00:12:15.680 --> 00:12:17.590 align:start position:0%
pointer to be its parent
right<00:12:15.839><c> we</c><00:12:16.000><c> just</c><00:12:16.160><c> want</c><00:12:16.320><c> to</c><00:12:16.399><c> go</c><00:12:16.720><c> up</c><00:12:16.959><c> that</c><00:12:17.279><c> chain</c>

00:12:17.590 --> 00:12:17.600 align:start position:0%
right we just want to go up that chain
 

00:12:17.600 --> 00:12:19.430 align:start position:0%
right we just want to go up that chain
until<00:12:17.839><c> we</c><00:12:17.920><c> get</c><00:12:18.079><c> to</c><00:12:18.240><c> the</c><00:12:18.320><c> parent</c><00:12:18.560><c> now</c><00:12:18.800><c> before</c><00:12:19.279><c> we</c>

00:12:19.430 --> 00:12:19.440 align:start position:0%
until we get to the parent now before we
 

00:12:19.440 --> 00:12:20.230 align:start position:0%
until we get to the parent now before we
do<00:12:19.680><c> that</c>

00:12:20.230 --> 00:12:20.240 align:start position:0%
do that
 

00:12:20.240 --> 00:12:21.509 align:start position:0%
do that
one<00:12:20.399><c> thing</c><00:12:20.560><c> i</c><00:12:20.720><c> didn't</c><00:12:20.959><c> mention</c><00:12:21.279><c> in</c><00:12:21.440><c> the</c>

00:12:21.509 --> 00:12:21.519 align:start position:0%
one thing i didn't mention in the
 

00:12:21.519 --> 00:12:23.110 align:start position:0%
one thing i didn't mention in the
drawing<00:12:21.920><c> explanation</c><00:12:22.480><c> because</c><00:12:22.720><c> i</c><00:12:22.800><c> don't</c><00:12:22.959><c> want</c>

00:12:23.110 --> 00:12:23.120 align:start position:0%
drawing explanation because i don't want
 

00:12:23.120 --> 00:12:23.750 align:start position:0%
drawing explanation because i don't want
to<00:12:23.200><c> get</c><00:12:23.440><c> too</c>

00:12:23.750 --> 00:12:23.760 align:start position:0%
to get too
 

00:12:23.760 --> 00:12:26.310 align:start position:0%
to get too
in-depth<00:12:24.480><c> it's</c><00:12:24.720><c> basically</c><00:12:25.200><c> an</c><00:12:25.360><c> idea</c><00:12:25.680><c> of</c><00:12:26.000><c> path</c>

00:12:26.310 --> 00:12:26.320 align:start position:0%
in-depth it's basically an idea of path
 

00:12:26.320 --> 00:12:27.910 align:start position:0%
in-depth it's basically an idea of path
compression<00:12:26.880><c> i</c><00:12:26.959><c> would</c><00:12:27.200><c> google</c><00:12:27.600><c> it</c><00:12:27.680><c> it's</c>

00:12:27.910 --> 00:12:27.920 align:start position:0%
compression i would google it it's
 

00:12:27.920 --> 00:12:28.949 align:start position:0%
compression i would google it it's
pretty<00:12:28.240><c> simple</c>

00:12:28.949 --> 00:12:28.959 align:start position:0%
pretty simple
 

00:12:28.959 --> 00:12:31.190 align:start position:0%
pretty simple
to<00:12:29.120><c> understand</c><00:12:30.240><c> that's</c><00:12:30.560><c> just</c><00:12:30.720><c> kind</c><00:12:30.880><c> of</c><00:12:30.959><c> how</c>

00:12:31.190 --> 00:12:31.200 align:start position:0%
to understand that's just kind of how
 

00:12:31.200 --> 00:12:33.110 align:start position:0%
to understand that's just kind of how
union<00:12:31.519><c> find</c><00:12:31.839><c> problems</c><00:12:32.240><c> are</c><00:12:32.399><c> optimized</c><00:12:32.959><c> it's</c>

00:12:33.110 --> 00:12:33.120 align:start position:0%
union find problems are optimized it's
 

00:12:33.120 --> 00:12:35.030 align:start position:0%
union find problems are optimized it's
just<00:12:33.279><c> adding</c><00:12:33.680><c> one</c><00:12:33.920><c> line</c><00:12:34.160><c> of</c><00:12:34.240><c> code</c><00:12:34.480><c> which</c><00:12:34.800><c> can</c>

00:12:35.030 --> 00:12:35.040 align:start position:0%
just adding one line of code which can
 

00:12:35.040 --> 00:12:36.710 align:start position:0%
just adding one line of code which can
optimize<00:12:35.680><c> it</c><00:12:35.839><c> so</c><00:12:36.079><c> basically</c><00:12:36.399><c> what</c><00:12:36.560><c> we're</c>

00:12:36.710 --> 00:12:36.720 align:start position:0%
optimize it so basically what we're
 

00:12:36.720 --> 00:12:38.629 align:start position:0%
optimize it so basically what we're
saying<00:12:36.959><c> is</c><00:12:37.040><c> before</c><00:12:37.360><c> we</c><00:12:37.519><c> go</c><00:12:37.760><c> to</c><00:12:37.920><c> the</c><00:12:38.000><c> parent</c>

00:12:38.629 --> 00:12:38.639 align:start position:0%
saying is before we go to the parent
 

00:12:38.639 --> 00:12:42.550 align:start position:0%
saying is before we go to the parent
we<00:12:38.880><c> want</c><00:12:39.040><c> to</c><00:12:39.279><c> set</c><00:12:39.839><c> the</c><00:12:40.160><c> parent</c><00:12:41.120><c> of</c><00:12:41.519><c> result</c>

00:12:42.550 --> 00:12:42.560 align:start position:0%
we want to set the parent of result
 

00:12:42.560 --> 00:12:46.230 align:start position:0%
we want to set the parent of result
equal<00:12:43.040><c> to</c><00:12:43.440><c> its</c><00:12:43.839><c> grandparent</c><00:12:45.279><c> so</c><00:12:45.519><c> if</c><00:12:45.680><c> we</c><00:12:45.920><c> did</c>

00:12:46.230 --> 00:12:46.240 align:start position:0%
equal to its grandparent so if we did
 

00:12:46.240 --> 00:12:48.310 align:start position:0%
equal to its grandparent so if we did
have<00:12:46.399><c> a</c><00:12:46.639><c> linked</c><00:12:47.040><c> list</c><00:12:47.360><c> that</c><00:12:47.440><c> we</c><00:12:47.600><c> were</c><00:12:47.760><c> going</c><00:12:48.160><c> up</c>

00:12:48.310 --> 00:12:48.320 align:start position:0%
have a linked list that we were going up
 

00:12:48.320 --> 00:12:50.310 align:start position:0%
have a linked list that we were going up
the<00:12:48.560><c> chain</c><00:12:48.880><c> of</c><00:12:49.120><c> what</c><00:12:49.279><c> we</c><00:12:49.440><c> would</c><00:12:49.600><c> do</c><00:12:49.839><c> now</c><00:12:50.160><c> is</c>

00:12:50.310 --> 00:12:50.320 align:start position:0%
the chain of what we would do now is
 

00:12:50.320 --> 00:12:51.990 align:start position:0%
the chain of what we would do now is
basically<00:12:50.800><c> make</c><00:12:51.040><c> the</c><00:12:51.200><c> linked</c><00:12:51.519><c> lists</c>

00:12:51.990 --> 00:12:52.000 align:start position:0%
basically make the linked lists
 

00:12:52.000 --> 00:12:53.990 align:start position:0%
basically make the linked lists
a<00:12:52.160><c> little</c><00:12:52.320><c> bit</c><00:12:52.639><c> shorter</c><00:12:53.440><c> so</c><00:12:53.600><c> we're</c><00:12:53.760><c> just</c>

00:12:53.990 --> 00:12:54.000 align:start position:0%
a little bit shorter so we're just
 

00:12:54.000 --> 00:12:56.550 align:start position:0%
a little bit shorter so we're just
setting<00:12:54.480><c> our</c><00:12:54.800><c> parent</c><00:12:55.200><c> equal</c><00:12:55.600><c> to</c><00:12:55.839><c> the</c><00:12:56.079><c> parent</c>

00:12:56.550 --> 00:12:56.560 align:start position:0%
setting our parent equal to the parent
 

00:12:56.560 --> 00:12:59.590 align:start position:0%
setting our parent equal to the parent
of<00:12:56.720><c> our</c><00:12:56.880><c> parent</c><00:12:57.440><c> if</c><00:12:57.680><c> it</c><00:12:57.920><c> happens</c><00:12:58.320><c> to</c><00:12:58.480><c> exist</c><00:12:59.440><c> if</c>

00:12:59.590 --> 00:12:59.600 align:start position:0%
of our parent if it happens to exist if
 

00:12:59.600 --> 00:13:01.350 align:start position:0%
of our parent if it happens to exist if
it<00:12:59.680><c> doesn't</c><00:13:00.079><c> exist</c><00:13:00.560><c> if</c><00:13:00.720><c> we</c><00:13:00.880><c> don't</c><00:13:01.040><c> actually</c>

00:13:01.350 --> 00:13:01.360 align:start position:0%
it doesn't exist if we don't actually
 

00:13:01.360 --> 00:13:03.110 align:start position:0%
it doesn't exist if we don't actually
have<00:13:01.680><c> a</c><00:13:01.839><c> grandparent</c><00:13:02.639><c> then</c>

00:13:03.110 --> 00:13:03.120 align:start position:0%
have a grandparent then
 

00:13:03.120 --> 00:13:05.509 align:start position:0%
have a grandparent then
this<00:13:03.519><c> line</c><00:13:03.760><c> will</c><00:13:04.000><c> basically</c><00:13:04.399><c> do</c><00:13:04.720><c> nothing</c><00:13:05.360><c> so</c>

00:13:05.509 --> 00:13:05.519 align:start position:0%
this line will basically do nothing so
 

00:13:05.519 --> 00:13:06.949 align:start position:0%
this line will basically do nothing so
that's<00:13:05.839><c> pretty</c><00:13:06.079><c> simple</c><00:13:06.480><c> for</c><00:13:06.639><c> the</c>

00:13:06.949 --> 00:13:06.959 align:start position:0%
that's pretty simple for the
 

00:13:06.959 --> 00:13:09.509 align:start position:0%
that's pretty simple for the
find<00:13:07.360><c> function</c><00:13:08.480><c> and</c><00:13:08.720><c> last</c><00:13:08.959><c> we're</c><00:13:09.120><c> going</c><00:13:09.200><c> to</c><00:13:09.279><c> do</c>

00:13:09.509 --> 00:13:09.519 align:start position:0%
find function and last we're going to do
 

00:13:09.519 --> 00:13:11.350 align:start position:0%
find function and last we're going to do
the<00:13:09.760><c> union</c><00:13:10.240><c> so</c><00:13:10.480><c> we're</c><00:13:10.639><c> going</c><00:13:10.720><c> to</c><00:13:10.800><c> take</c><00:13:11.040><c> two</c>

00:13:11.350 --> 00:13:11.360 align:start position:0%
the union so we're going to take two
 

00:13:11.360 --> 00:13:13.590 align:start position:0%
the union so we're going to take two
nodes<00:13:11.680><c> this</c><00:13:11.920><c> time</c><00:13:12.160><c> n1</c><00:13:12.560><c> and</c><00:13:12.720><c> n2</c><00:13:12.959><c> and</c><00:13:13.120><c> we</c><00:13:13.279><c> want</c><00:13:13.440><c> to</c>

00:13:13.590 --> 00:13:13.600 align:start position:0%
nodes this time n1 and n2 and we want to
 

00:13:13.600 --> 00:13:15.509 align:start position:0%
nodes this time n1 and n2 and we want to
union<00:13:14.000><c> their</c><00:13:14.240><c> components</c><00:13:14.880><c> together</c>

00:13:15.509 --> 00:13:15.519 align:start position:0%
union their components together
 

00:13:15.519 --> 00:13:17.350 align:start position:0%
union their components together
so<00:13:15.760><c> first</c><00:13:16.000><c> thing</c><00:13:16.160><c> we</c><00:13:16.320><c> need</c><00:13:16.399><c> to</c><00:13:16.480><c> do</c><00:13:16.720><c> is</c><00:13:16.880><c> find</c><00:13:17.120><c> the</c>

00:13:17.350 --> 00:13:17.360 align:start position:0%
so first thing we need to do is find the
 

00:13:17.360 --> 00:13:19.590 align:start position:0%
so first thing we need to do is find the
root<00:13:17.680><c> parents</c><00:13:18.160><c> of</c><00:13:18.320><c> each</c><00:13:18.560><c> of</c><00:13:18.639><c> these</c><00:13:18.959><c> nodes</c><00:13:19.360><c> this</c>

00:13:19.590 --> 00:13:19.600 align:start position:0%
root parents of each of these nodes this
 

00:13:19.600 --> 00:13:21.829 align:start position:0%
root parents of each of these nodes this
is<00:13:19.839><c> exactly</c><00:13:20.240><c> why</c><00:13:20.480><c> we</c><00:13:20.639><c> just</c><00:13:20.880><c> wrote</c><00:13:21.200><c> our</c><00:13:21.440><c> find</c>

00:13:21.829 --> 00:13:21.839 align:start position:0%
is exactly why we just wrote our find
 

00:13:21.839 --> 00:13:22.870 align:start position:0%
is exactly why we just wrote our find
function<00:13:22.320><c> first</c>

00:13:22.870 --> 00:13:22.880 align:start position:0%
function first
 

00:13:22.880 --> 00:13:24.470 align:start position:0%
function first
because<00:13:23.200><c> we</c><00:13:23.360><c> want</c><00:13:23.440><c> to</c><00:13:23.519><c> get</c><00:13:23.680><c> the</c><00:13:23.839><c> root</c><00:13:24.079><c> parents</c>

00:13:24.470 --> 00:13:24.480 align:start position:0%
because we want to get the root parents
 

00:13:24.480 --> 00:13:26.870 align:start position:0%
because we want to get the root parents
of<00:13:24.639><c> n1</c><00:13:25.519><c> and</c><00:13:25.839><c> n2</c>

00:13:26.870 --> 00:13:26.880 align:start position:0%
of n1 and n2
 

00:13:26.880 --> 00:13:28.629 align:start position:0%
of n1 and n2
and<00:13:27.120><c> then</c><00:13:27.279><c> we</c><00:13:27.440><c> can</c><00:13:27.600><c> go</c><00:13:27.760><c> ahead</c><00:13:28.000><c> and</c><00:13:28.079><c> merge</c><00:13:28.399><c> them</c>

00:13:28.629 --> 00:13:28.639 align:start position:0%
and then we can go ahead and merge them
 

00:13:28.639 --> 00:13:30.710 align:start position:0%
and then we can go ahead and merge them
together<00:13:29.360><c> now</c><00:13:29.600><c> it's</c><00:13:29.920><c> possible</c><00:13:30.399><c> that</c><00:13:30.560><c> they</c>

00:13:30.710 --> 00:13:30.720 align:start position:0%
together now it's possible that they
 

00:13:30.720 --> 00:13:32.470 align:start position:0%
together now it's possible that they
have<00:13:30.800><c> the</c><00:13:31.040><c> same</c><00:13:31.360><c> parent</c><00:13:31.680><c> in</c><00:13:31.760><c> which</c><00:13:32.000><c> case</c><00:13:32.320><c> we're</c>

00:13:32.470 --> 00:13:32.480 align:start position:0%
have the same parent in which case we're
 

00:13:32.480 --> 00:13:34.069 align:start position:0%
have the same parent in which case we're
just<00:13:32.720><c> going</c><00:13:32.800><c> to</c><00:13:32.880><c> return</c><00:13:33.360><c> immediately</c>

00:13:34.069 --> 00:13:34.079 align:start position:0%
just going to return immediately
 

00:13:34.079 --> 00:13:36.389 align:start position:0%
just going to return immediately
so<00:13:34.240><c> if</c><00:13:34.399><c> p1</c><00:13:34.800><c> equals</c><00:13:35.120><c> p2</c><00:13:35.680><c> we're</c><00:13:35.839><c> going</c><00:13:35.920><c> to</c><00:13:36.000><c> return</c>

00:13:36.389 --> 00:13:36.399 align:start position:0%
so if p1 equals p2 we're going to return
 

00:13:36.399 --> 00:13:38.069 align:start position:0%
so if p1 equals p2 we're going to return
immediately<00:13:36.880><c> we're</c><00:13:37.040><c> going</c><00:13:37.120><c> to</c><00:13:37.200><c> return</c><00:13:37.600><c> 0</c><00:13:37.920><c> to</c>

00:13:38.069 --> 00:13:38.079 align:start position:0%
immediately we're going to return 0 to
 

00:13:38.079 --> 00:13:39.829 align:start position:0%
immediately we're going to return 0 to
indicate<00:13:38.480><c> that</c><00:13:38.639><c> we</c><00:13:38.800><c> did</c><00:13:39.040><c> not</c><00:13:39.360><c> actually</c>

00:13:39.829 --> 00:13:39.839 align:start position:0%
indicate that we did not actually
 

00:13:39.839 --> 00:13:41.509 align:start position:0%
indicate that we did not actually
perform<00:13:40.480><c> a</c><00:13:40.720><c> union</c>

00:13:41.509 --> 00:13:41.519 align:start position:0%
perform a union
 

00:13:41.519 --> 00:13:43.110 align:start position:0%
perform a union
otherwise<00:13:42.160><c> we're</c><00:13:42.320><c> actually</c><00:13:42.560><c> going</c><00:13:42.720><c> to</c><00:13:42.800><c> do</c><00:13:42.959><c> the</c>

00:13:43.110 --> 00:13:43.120 align:start position:0%
otherwise we're actually going to do the
 

00:13:43.120 --> 00:13:44.470 align:start position:0%
otherwise we're actually going to do the
union<00:13:43.519><c> and</c><00:13:43.680><c> remember</c><00:13:44.000><c> we're</c><00:13:44.160><c> going</c><00:13:44.240><c> to</c><00:13:44.320><c> do</c>

00:13:44.470 --> 00:13:44.480 align:start position:0%
union and remember we're going to do
 

00:13:44.480 --> 00:13:45.430 align:start position:0%
union and remember we're going to do
this<00:13:44.720><c> union</c><00:13:45.120><c> by</c>

00:13:45.430 --> 00:13:45.440 align:start position:0%
this union by
 

00:13:45.440 --> 00:13:49.030 align:start position:0%
this union by
rank<00:13:46.079><c> so</c><00:13:46.399><c> let's</c><00:13:46.639><c> say</c><00:13:46.800><c> the</c><00:13:47.120><c> rank</c><00:13:47.680><c> of</c><00:13:48.000><c> p2</c>

00:13:49.030 --> 00:13:49.040 align:start position:0%
rank so let's say the rank of p2
 

00:13:49.040 --> 00:13:52.150 align:start position:0%
rank so let's say the rank of p2
is<00:13:49.360><c> greater</c><00:13:49.920><c> than</c><00:13:50.079><c> the</c><00:13:50.240><c> rank</c><00:13:50.720><c> of</c><00:13:50.959><c> p1</c>

00:13:52.150 --> 00:13:52.160 align:start position:0%
is greater than the rank of p1
 

00:13:52.160 --> 00:13:54.629 align:start position:0%
is greater than the rank of p1
in<00:13:52.399><c> that</c><00:13:52.639><c> case</c><00:13:53.199><c> p2</c><00:13:53.839><c> is</c><00:13:53.920><c> going</c><00:13:54.079><c> to</c><00:13:54.160><c> be</c><00:13:54.320><c> the</c>

00:13:54.629 --> 00:13:54.639 align:start position:0%
in that case p2 is going to be the
 

00:13:54.639 --> 00:13:56.550 align:start position:0%
in that case p2 is going to be the
parent<00:13:55.120><c> of</c><00:13:55.279><c> p1</c><00:13:55.680><c> so</c><00:13:55.839><c> we're</c><00:13:56.000><c> going</c><00:13:56.000><c> to</c><00:13:56.079><c> say</c><00:13:56.320><c> for</c>

00:13:56.550 --> 00:13:56.560 align:start position:0%
parent of p1 so we're going to say for
 

00:13:56.560 --> 00:13:57.350 align:start position:0%
parent of p1 so we're going to say for
p1

00:13:57.350 --> 00:13:57.360 align:start position:0%
p1
 

00:13:57.360 --> 00:13:59.990 align:start position:0%
p1
let's<00:13:57.600><c> set</c><00:13:57.839><c> its</c><00:13:58.079><c> parent</c><00:13:58.480><c> equal</c><00:13:58.800><c> to</c><00:13:58.959><c> p2</c><00:13:59.839><c> and</c>

00:13:59.990 --> 00:14:00.000 align:start position:0%
let's set its parent equal to p2 and
 

00:14:00.000 --> 00:14:01.030 align:start position:0%
let's set its parent equal to p2 and
then<00:14:00.320><c> we</c><00:14:00.480><c> can</c>

00:14:01.030 --> 00:14:01.040 align:start position:0%
then we can
 

00:14:01.040 --> 00:14:03.590 align:start position:0%
then we can
increase<00:14:01.519><c> the</c><00:14:01.839><c> rank</c><00:14:02.320><c> of</c><00:14:02.560><c> p2</c><00:14:03.040><c> because</c><00:14:03.279><c> since</c>

00:14:03.590 --> 00:14:03.600 align:start position:0%
increase the rank of p2 because since
 

00:14:03.600 --> 00:14:04.629 align:start position:0%
increase the rank of p2 because since
it's<00:14:03.760><c> the</c><00:14:04.000><c> parent</c>

00:14:04.629 --> 00:14:04.639 align:start position:0%
it's the parent
 

00:14:04.639 --> 00:14:06.550 align:start position:0%
it's the parent
we've<00:14:04.880><c> just</c><00:14:05.199><c> added</c><00:14:05.519><c> some</c><00:14:05.760><c> children</c><00:14:06.160><c> to</c><00:14:06.320><c> it</c><00:14:06.399><c> so</c>

00:14:06.550 --> 00:14:06.560 align:start position:0%
we've just added some children to it so
 

00:14:06.560 --> 00:14:08.230 align:start position:0%
we've just added some children to it so
we're<00:14:06.639><c> going</c><00:14:06.720><c> to</c><00:14:06.880><c> add</c><00:14:07.120><c> to</c><00:14:07.279><c> it</c><00:14:07.440><c> the</c><00:14:07.760><c> rank</c>

00:14:08.230 --> 00:14:08.240 align:start position:0%
we're going to add to it the rank
 

00:14:08.240 --> 00:14:10.710 align:start position:0%
we're going to add to it the rank
of<00:14:08.480><c> whatever</c><00:14:08.959><c> p1</c><00:14:09.680><c> happened</c><00:14:10.000><c> to</c><00:14:10.160><c> be</c><00:14:10.320><c> before</c>

00:14:10.710 --> 00:14:10.720 align:start position:0%
of whatever p1 happened to be before
 

00:14:10.720 --> 00:14:11.269 align:start position:0%
of whatever p1 happened to be before
that

00:14:11.269 --> 00:14:11.279 align:start position:0%
that
 

00:14:11.279 --> 00:14:13.269 align:start position:0%
that
and<00:14:11.360><c> the</c><00:14:11.600><c> else</c><00:14:11.920><c> case</c><00:14:12.480><c> is</c><00:14:12.639><c> basically</c><00:14:13.040><c> just</c>

00:14:13.269 --> 00:14:13.279 align:start position:0%
and the else case is basically just
 

00:14:13.279 --> 00:14:15.670 align:start position:0%
and the else case is basically just
doing<00:14:13.519><c> the</c><00:14:13.600><c> exact</c><00:14:14.160><c> opposite</c><00:14:14.720><c> of</c><00:14:14.880><c> this</c><00:14:15.199><c> so</c>

00:14:15.670 --> 00:14:15.680 align:start position:0%
doing the exact opposite of this so
 

00:14:15.680 --> 00:14:17.829 align:start position:0%
doing the exact opposite of this so
that<00:14:15.920><c> would</c><00:14:16.079><c> be</c><00:14:16.320><c> if</c><00:14:16.639><c> p1</c><00:14:17.120><c> was</c><00:14:17.360><c> greater</c>

00:14:17.829 --> 00:14:17.839 align:start position:0%
that would be if p1 was greater
 

00:14:17.839 --> 00:14:19.430 align:start position:0%
that would be if p1 was greater
therefore<00:14:18.320><c> we'd</c><00:14:18.480><c> want</c><00:14:18.720><c> p</c>

00:14:19.430 --> 00:14:19.440 align:start position:0%
therefore we'd want p
 

00:14:19.440 --> 00:14:22.230 align:start position:0%
therefore we'd want p
p1<00:14:19.920><c> to</c><00:14:20.000><c> be</c><00:14:20.160><c> the</c><00:14:20.320><c> parent</c><00:14:20.720><c> of</c><00:14:20.880><c> p2</c><00:14:21.600><c> and</c><00:14:21.760><c> we'd</c><00:14:22.079><c> want</c>

00:14:22.230 --> 00:14:22.240 align:start position:0%
p1 to be the parent of p2 and we'd want
 

00:14:22.240 --> 00:14:23.670 align:start position:0%
p1 to be the parent of p2 and we'd want
to<00:14:22.399><c> increase</c><00:14:22.880><c> the</c><00:14:23.199><c> rank</c>

00:14:23.670 --> 00:14:23.680 align:start position:0%
to increase the rank
 

00:14:23.680 --> 00:14:26.150 align:start position:0%
to increase the rank
of<00:14:23.839><c> p1</c><00:14:24.639><c> by</c><00:14:24.880><c> whatever</c><00:14:25.199><c> the</c><00:14:25.279><c> rank</c><00:14:25.600><c> of</c><00:14:25.680><c> p2</c>

00:14:26.150 --> 00:14:26.160 align:start position:0%
of p1 by whatever the rank of p2
 

00:14:26.160 --> 00:14:27.590 align:start position:0%
of p1 by whatever the rank of p2
happened<00:14:26.399><c> to</c><00:14:26.480><c> be</c><00:14:26.639><c> before</c><00:14:27.040><c> that</c>

00:14:27.590 --> 00:14:27.600 align:start position:0%
happened to be before that
 

00:14:27.600 --> 00:14:29.430 align:start position:0%
happened to be before that
once<00:14:27.839><c> that's</c><00:14:28.160><c> all</c><00:14:28.320><c> said</c><00:14:28.480><c> and</c><00:14:28.639><c> done</c><00:14:29.040><c> we're</c><00:14:29.199><c> just</c>

00:14:29.430 --> 00:14:29.440 align:start position:0%
once that's all said and done we're just
 

00:14:29.440 --> 00:14:31.269 align:start position:0%
once that's all said and done we're just
going<00:14:29.519><c> to</c><00:14:29.600><c> return</c><00:14:30.079><c> 1</c><00:14:30.399><c> to</c><00:14:30.560><c> indicate</c><00:14:30.959><c> that</c><00:14:31.120><c> we</c>

00:14:31.269 --> 00:14:31.279 align:start position:0%
going to return 1 to indicate that we
 

00:14:31.279 --> 00:14:34.310 align:start position:0%
going to return 1 to indicate that we
actually<00:14:31.680><c> did</c><00:14:32.000><c> perform</c><00:14:32.480><c> a</c><00:14:32.639><c> successful</c><00:14:33.519><c> union</c>

00:14:34.310 --> 00:14:34.320 align:start position:0%
actually did perform a successful union
 

00:14:34.320 --> 00:14:36.069 align:start position:0%
actually did perform a successful union
and<00:14:34.720><c> those</c><00:14:34.959><c> return</c><00:14:35.440><c> values</c><00:14:35.839><c> are</c><00:14:35.920><c> going</c><00:14:36.000><c> to</c>

00:14:36.069 --> 00:14:36.079 align:start position:0%
and those return values are going to
 

00:14:36.079 --> 00:14:37.990 align:start position:0%
and those return values are going to
come<00:14:36.240><c> in</c><00:14:36.399><c> useful</c><00:14:36.800><c> for</c><00:14:36.959><c> us</c><00:14:37.199><c> right</c><00:14:37.440><c> about</c><00:14:37.760><c> now</c>

00:14:37.990 --> 00:14:38.000 align:start position:0%
come in useful for us right about now
 

00:14:38.000 --> 00:14:39.350 align:start position:0%
come in useful for us right about now
when<00:14:38.160><c> we</c><00:14:38.320><c> go</c><00:14:38.480><c> through</c><00:14:38.720><c> every</c><00:14:38.959><c> single</c>

00:14:39.350 --> 00:14:39.360 align:start position:0%
when we go through every single
 

00:14:39.360 --> 00:14:40.870 align:start position:0%
when we go through every single
edge<00:14:39.600><c> so</c><00:14:39.839><c> let's</c><00:14:40.000><c> go</c><00:14:40.160><c> through</c><00:14:40.320><c> every</c><00:14:40.480><c> single</c>

00:14:40.870 --> 00:14:40.880 align:start position:0%
edge so let's go through every single
 

00:14:40.880 --> 00:14:42.550 align:start position:0%
edge so let's go through every single
edge<00:14:41.040><c> which</c><00:14:41.279><c> is</c><00:14:41.360><c> a</c><00:14:41.440><c> pair</c><00:14:41.680><c> of</c><00:14:41.920><c> nodes</c>

00:14:42.550 --> 00:14:42.560 align:start position:0%
edge which is a pair of nodes
 

00:14:42.560 --> 00:14:44.949 align:start position:0%
edge which is a pair of nodes
in<00:14:42.800><c> our</c><00:14:43.040><c> input</c><00:14:43.519><c> edges</c><00:14:44.240><c> so</c><00:14:44.399><c> we're</c><00:14:44.560><c> going</c><00:14:44.639><c> to</c><00:14:44.720><c> be</c>

00:14:44.949 --> 00:14:44.959 align:start position:0%
in our input edges so we're going to be
 

00:14:44.959 --> 00:14:47.350 align:start position:0%
in our input edges so we're going to be
unioning<00:14:45.600><c> n1</c><00:14:46.079><c> and</c><00:14:46.240><c> n2</c><00:14:46.560><c> together</c>

00:14:47.350 --> 00:14:47.360 align:start position:0%
unioning n1 and n2 together
 

00:14:47.360 --> 00:14:50.389 align:start position:0%
unioning n1 and n2 together
so<00:14:47.519><c> we</c><00:14:47.600><c> can</c><00:14:47.760><c> call</c><00:14:48.160><c> union</c><00:14:48.639><c> on</c><00:14:48.880><c> n1</c><00:14:49.440><c> and</c><00:14:49.760><c> n2</c>

00:14:50.389 --> 00:14:50.399 align:start position:0%
so we can call union on n1 and n2
 

00:14:50.399 --> 00:14:52.550 align:start position:0%
so we can call union on n1 and n2
remember<00:14:50.959><c> the</c><00:14:51.199><c> number</c><00:14:51.600><c> of</c><00:14:52.079><c> connected</c>

00:14:52.550 --> 00:14:52.560 align:start position:0%
remember the number of connected
 

00:14:52.560 --> 00:14:54.150 align:start position:0%
remember the number of connected
components<00:14:52.959><c> we</c><00:14:53.120><c> initially</c><00:14:53.600><c> start</c><00:14:53.839><c> out</c><00:14:53.920><c> with</c>

00:14:54.150 --> 00:14:54.160 align:start position:0%
components we initially start out with
 

00:14:54.160 --> 00:14:54.470 align:start position:0%
components we initially start out with
is

00:14:54.470 --> 00:14:54.480 align:start position:0%
is
 

00:14:54.480 --> 00:14:56.069 align:start position:0%
is
n<00:14:54.639><c> so</c><00:14:54.800><c> we're</c><00:14:54.959><c> going</c><00:14:55.040><c> to</c><00:14:55.120><c> set</c><00:14:55.279><c> the</c><00:14:55.440><c> result</c><00:14:55.839><c> equal</c>

00:14:56.069 --> 00:14:56.079 align:start position:0%
n so we're going to set the result equal
 

00:14:56.079 --> 00:14:59.189 align:start position:0%
n so we're going to set the result equal
to<00:14:56.320><c> n</c><00:14:56.880><c> every</c><00:14:57.279><c> time</c><00:14:57.519><c> we</c><00:14:57.680><c> perform</c><00:14:58.160><c> a</c><00:14:58.320><c> successful</c>

00:14:59.189 --> 00:14:59.199 align:start position:0%
to n every time we perform a successful
 

00:14:59.199 --> 00:15:02.150 align:start position:0%
to n every time we perform a successful
union<00:14:59.760><c> operation</c><00:15:00.639><c> we</c><00:15:00.800><c> want</c><00:15:01.040><c> to</c><00:15:01.440><c> decrement</c><00:15:02.000><c> the</c>

00:15:02.150 --> 00:15:02.160 align:start position:0%
union operation we want to decrement the
 

00:15:02.160 --> 00:15:02.949 align:start position:0%
union operation we want to decrement the
result<00:15:02.639><c> by</c>

00:15:02.949 --> 00:15:02.959 align:start position:0%
result by
 

00:15:02.959 --> 00:15:05.430 align:start position:0%
result by
one<00:15:03.360><c> which</c><00:15:03.600><c> is</c><00:15:03.920><c> the</c><00:15:04.079><c> return</c><00:15:04.560><c> value</c><00:15:04.959><c> of</c><00:15:05.040><c> union</c>

00:15:05.430 --> 00:15:05.440 align:start position:0%
one which is the return value of union
 

00:15:05.440 --> 00:15:06.790 align:start position:0%
one which is the return value of union
if<00:15:05.600><c> it's</c><00:15:05.760><c> successful</c><00:15:06.320><c> if</c><00:15:06.480><c> it's</c>

00:15:06.790 --> 00:15:06.800 align:start position:0%
if it's successful if it's
 

00:15:06.800 --> 00:15:08.870 align:start position:0%
if it's successful if it's
unsuccessful<00:15:07.920><c> then</c><00:15:08.079><c> we're</c><00:15:08.240><c> going</c><00:15:08.399><c> to</c><00:15:08.480><c> return</c>

00:15:08.870 --> 00:15:08.880 align:start position:0%
unsuccessful then we're going to return
 

00:15:08.880 --> 00:15:11.030 align:start position:0%
unsuccessful then we're going to return
zero<00:15:09.519><c> in</c><00:15:09.600><c> which</c><00:15:09.920><c> case</c><00:15:10.160><c> our</c><00:15:10.320><c> result</c><00:15:10.800><c> is</c>

00:15:11.030 --> 00:15:11.040 align:start position:0%
zero in which case our result is
 

00:15:11.040 --> 00:15:13.269 align:start position:0%
zero in which case our result is
not<00:15:11.279><c> going</c><00:15:11.360><c> to</c><00:15:11.440><c> be</c><00:15:11.680><c> updated</c><00:15:12.160><c> at</c><00:15:12.399><c> all</c><00:15:12.639><c> right</c><00:15:12.880><c> if</c>

00:15:13.269 --> 00:15:13.279 align:start position:0%
not going to be updated at all right if
 

00:15:13.279 --> 00:15:15.430 align:start position:0%
not going to be updated at all right if
we<00:15:13.440><c> don't</c><00:15:13.760><c> perform</c><00:15:14.160><c> a</c><00:15:14.240><c> union</c><00:15:14.720><c> there's</c><00:15:15.040><c> no</c><00:15:15.279><c> need</c>

00:15:15.430 --> 00:15:15.440 align:start position:0%
we don't perform a union there's no need
 

00:15:15.440 --> 00:15:16.949 align:start position:0%
we don't perform a union there's no need
to<00:15:15.680><c> update</c><00:15:16.000><c> the</c><00:15:16.160><c> number</c><00:15:16.399><c> of</c><00:15:16.560><c> connected</c>

00:15:16.949 --> 00:15:16.959 align:start position:0%
to update the number of connected
 

00:15:16.959 --> 00:15:17.670 align:start position:0%
to update the number of connected
components

00:15:17.670 --> 00:15:17.680 align:start position:0%
components
 

00:15:17.680 --> 00:15:19.670 align:start position:0%
components
so<00:15:18.000><c> you</c><00:15:18.160><c> can</c><00:15:18.240><c> see</c><00:15:18.399><c> that</c><00:15:18.560><c> the</c><00:15:18.720><c> math</c><00:15:19.120><c> works</c><00:15:19.440><c> out</c>

00:15:19.670 --> 00:15:19.680 align:start position:0%
so you can see that the math works out
 

00:15:19.680 --> 00:15:20.870 align:start position:0%
so you can see that the math works out
pretty<00:15:19.920><c> nicely</c><00:15:20.320><c> for</c><00:15:20.480><c> us</c>

00:15:20.870 --> 00:15:20.880 align:start position:0%
pretty nicely for us
 

00:15:20.880 --> 00:15:22.870 align:start position:0%
pretty nicely for us
once<00:15:21.120><c> that</c><00:15:21.360><c> is</c><00:15:21.519><c> completed</c><00:15:22.160><c> we</c><00:15:22.320><c> can</c><00:15:22.399><c> go</c><00:15:22.639><c> ahead</c>

00:15:22.870 --> 00:15:22.880 align:start position:0%
once that is completed we can go ahead
 

00:15:22.880 --> 00:15:24.310 align:start position:0%
once that is completed we can go ahead
and<00:15:22.959><c> return</c><00:15:23.360><c> the</c><00:15:23.519><c> result</c><00:15:23.839><c> which</c><00:15:24.079><c> is</c><00:15:24.160><c> the</c>

00:15:24.310 --> 00:15:24.320 align:start position:0%
and return the result which is the
 

00:15:24.320 --> 00:15:25.750 align:start position:0%
and return the result which is the
number<00:15:24.560><c> of</c><00:15:24.720><c> connected</c><00:15:25.120><c> components</c><00:15:25.600><c> that's</c>

00:15:25.750 --> 00:15:25.760 align:start position:0%
number of connected components that's
 

00:15:25.760 --> 00:15:27.509 align:start position:0%
number of connected components that's
what<00:15:25.920><c> we</c><00:15:26.000><c> originally</c><00:15:26.480><c> wanted</c><00:15:26.720><c> to</c><00:15:26.880><c> do</c>

00:15:27.509 --> 00:15:27.519 align:start position:0%
what we originally wanted to do
 

00:15:27.519 --> 00:15:28.870 align:start position:0%
what we originally wanted to do
and<00:15:27.760><c> it</c><00:15:27.839><c> wouldn't</c><00:15:28.000><c> be</c><00:15:28.160><c> a</c><00:15:28.240><c> video</c><00:15:28.560><c> of</c><00:15:28.639><c> mine</c>

00:15:28.870 --> 00:15:28.880 align:start position:0%
and it wouldn't be a video of mine
 

00:15:28.880 --> 00:15:30.629 align:start position:0%
and it wouldn't be a video of mine
without<00:15:29.199><c> a</c><00:15:29.279><c> typo</c><00:15:29.680><c> i</c><00:15:29.759><c> don't</c><00:15:29.920><c> know</c><00:15:30.000><c> how</c><00:15:30.160><c> i</c><00:15:30.320><c> missed</c>

00:15:30.629 --> 00:15:30.639 align:start position:0%
without a typo i don't know how i missed
 

00:15:30.639 --> 00:15:32.230 align:start position:0%
without a typo i don't know how i missed
it<00:15:30.720><c> but</c><00:15:30.959><c> on</c><00:15:31.040><c> this</c><00:15:31.279><c> first</c><00:15:31.600><c> line</c><00:15:31.920><c> i</c><00:15:32.000><c> didn't</c>

00:15:32.230 --> 00:15:32.240 align:start position:0%
it but on this first line i didn't
 

00:15:32.240 --> 00:15:32.949 align:start position:0%
it but on this first line i didn't
actually

00:15:32.949 --> 00:15:32.959 align:start position:0%
actually
 

00:15:32.959 --> 00:15:35.829 align:start position:0%
actually
declare<00:15:33.440><c> the</c><00:15:33.839><c> variable</c><00:15:34.320><c> so</c><00:15:34.480><c> for</c><00:15:34.800><c> i</c><00:15:35.120><c> in</c><00:15:35.360><c> range</c>

00:15:35.829 --> 00:15:35.839 align:start position:0%
declare the variable so for i in range
 

00:15:35.839 --> 00:15:37.990 align:start position:0%
declare the variable so for i in range
and<00:15:36.160><c> you</c><00:15:36.399><c> probably</c><00:15:36.639><c> caught</c><00:15:36.880><c> that</c><00:15:37.120><c> earlier</c>

00:15:37.990 --> 00:15:38.000 align:start position:0%
and you probably caught that earlier
 

00:15:38.000 --> 00:15:39.910 align:start position:0%
and you probably caught that earlier
so<00:15:38.240><c> sorry</c><00:15:38.480><c> if</c><00:15:38.639><c> it</c><00:15:38.720><c> was</c><00:15:38.880><c> frustrating</c><00:15:39.440><c> to</c><00:15:39.519><c> watch</c>

00:15:39.910 --> 00:15:39.920 align:start position:0%
so sorry if it was frustrating to watch
 

00:15:39.920 --> 00:15:41.269 align:start position:0%
so sorry if it was frustrating to watch
but<00:15:40.480><c> as</c><00:15:40.639><c> you</c><00:15:40.800><c> can</c><00:15:40.959><c> see</c>

00:15:41.269 --> 00:15:41.279 align:start position:0%
but as you can see
 

00:15:41.279 --> 00:15:44.230 align:start position:0%
but as you can see
we've<00:15:41.759><c> run</c><00:15:41.920><c> the</c><00:15:42.160><c> code</c><00:15:42.560><c> and</c><00:15:42.800><c> this</c><00:15:43.120><c> problem</c><00:15:43.920><c> is</c>

00:15:44.230 --> 00:15:44.240 align:start position:0%
we've run the code and this problem is
 

00:15:44.240 --> 00:15:46.470 align:start position:0%
we've run the code and this problem is
pretty<00:15:44.480><c> efficient</c><00:15:45.040><c> union</c><00:15:45.440><c> find</c><00:15:45.759><c> is</c><00:15:45.920><c> about</c><00:15:46.240><c> as</c>

00:15:46.470 --> 00:15:46.480 align:start position:0%
pretty efficient union find is about as
 

00:15:46.480 --> 00:15:47.990 align:start position:0%
pretty efficient union find is about as
efficient<00:15:46.880><c> as</c><00:15:47.040><c> you</c><00:15:47.120><c> can</c><00:15:47.279><c> get</c><00:15:47.519><c> for</c><00:15:47.759><c> this</c>

00:15:47.990 --> 00:15:48.000 align:start position:0%
efficient as you can get for this
 

00:15:48.000 --> 00:15:49.590 align:start position:0%
efficient as you can get for this
problem<00:15:48.320><c> this</c><00:15:48.560><c> problem</c><00:15:48.800><c> is</c><00:15:48.959><c> literally</c><00:15:49.360><c> made</c>

00:15:49.590 --> 00:15:49.600 align:start position:0%
problem this problem is literally made
 

00:15:49.600 --> 00:15:51.110 align:start position:0%
problem this problem is literally made
for<00:15:49.759><c> union</c><00:15:50.079><c> finding</c><00:15:50.399><c> so</c><00:15:50.560><c> i</c><00:15:50.639><c> hope</c><00:15:50.800><c> this</c><00:15:50.959><c> was</c>

00:15:51.110 --> 00:15:51.120 align:start position:0%
for union finding so i hope this was
 

00:15:51.120 --> 00:15:51.670 align:start position:0%
for union finding so i hope this was
helpful

00:15:51.670 --> 00:15:51.680 align:start position:0%
helpful
 

00:15:51.680 --> 00:15:53.749 align:start position:0%
helpful
if<00:15:51.920><c> it</c><00:15:52.000><c> was</c><00:15:52.480><c> please</c><00:15:52.800><c> like</c><00:15:53.040><c> and</c><00:15:53.120><c> subscribe</c><00:15:53.680><c> it</c>

00:15:53.749 --> 00:15:53.759 align:start position:0%
if it was please like and subscribe it
 

00:15:53.759 --> 00:15:55.509 align:start position:0%
if it was please like and subscribe it
supports<00:15:54.160><c> the</c><00:15:54.320><c> channel</c><00:15:54.639><c> a</c><00:15:54.880><c> lot</c><00:15:55.199><c> and</c><00:15:55.360><c> i'll</c>

00:15:55.509 --> 00:15:55.519 align:start position:0%
supports the channel a lot and i'll
 

00:15:55.519 --> 00:15:57.189 align:start position:0%
supports the channel a lot and i'll
hopefully<00:15:56.079><c> see</c><00:15:56.240><c> you</c><00:15:56.399><c> pretty</c><00:15:56.720><c> soon</c>

00:15:57.189 --> 00:15:57.199 align:start position:0%
hopefully see you pretty soon
 

00:15:57.199 --> 00:16:00.240 align:start position:0%
hopefully see you pretty soon
thanks<00:15:57.440><c> for</c><00:15:57.600><c> watching</c>

