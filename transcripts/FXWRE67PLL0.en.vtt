WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.439><c> let's</c>

00:00:01.670 --> 00:00:01.680 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.680 --> 00:00:03.590 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.920><c> some</c><00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.560><c> code</c><00:00:02.879><c> today</c><00:00:03.120><c> so</c><00:00:03.280><c> today</c>

00:00:03.590 --> 00:00:03.600 align:start position:0%
write some more neat code today so today
 

00:00:03.600 --> 00:00:05.430 align:start position:0%
write some more neat code today so today
let's<00:00:03.840><c> solve</c><00:00:04.160><c> redundant</c><00:00:04.720><c> connections</c><00:00:05.279><c> but</c>

00:00:05.430 --> 00:00:05.440 align:start position:0%
let's solve redundant connections but
 

00:00:05.440 --> 00:00:07.110 align:start position:0%
let's solve redundant connections but
before<00:00:05.839><c> i</c><00:00:06.000><c> do</c><00:00:06.240><c> i</c><00:00:06.319><c> just</c><00:00:06.480><c> want</c><00:00:06.640><c> to</c><00:00:06.720><c> mention</c><00:00:07.040><c> if</c>

00:00:07.110 --> 00:00:07.120 align:start position:0%
before i do i just want to mention if
 

00:00:07.120 --> 00:00:08.870 align:start position:0%
before i do i just want to mention if
you<00:00:07.200><c> have</c><00:00:07.359><c> any</c><00:00:07.600><c> problem</c><00:00:08.000><c> suggestions</c><00:00:08.639><c> you</c><00:00:08.720><c> can</c>

00:00:08.870 --> 00:00:08.880 align:start position:0%
you have any problem suggestions you can
 

00:00:08.880 --> 00:00:10.390 align:start position:0%
you have any problem suggestions you can
feel<00:00:09.040><c> free</c><00:00:09.280><c> to</c><00:00:09.360><c> leave</c><00:00:09.599><c> those</c><00:00:09.840><c> in</c><00:00:09.920><c> the</c><00:00:10.000><c> comments</c>

00:00:10.390 --> 00:00:10.400 align:start position:0%
feel free to leave those in the comments
 

00:00:10.400 --> 00:00:11.350 align:start position:0%
feel free to leave those in the comments
i<00:00:10.559><c> do</c><00:00:10.719><c> have</c><00:00:10.960><c> a</c>

00:00:11.350 --> 00:00:11.360 align:start position:0%
i do have a
 

00:00:11.360 --> 00:00:13.110 align:start position:0%
i do have a
pretty<00:00:11.599><c> large</c><00:00:12.000><c> backlog</c><00:00:12.559><c> that</c><00:00:12.719><c> i'm</c><00:00:12.799><c> working</c>

00:00:13.110 --> 00:00:13.120 align:start position:0%
pretty large backlog that i'm working
 

00:00:13.120 --> 00:00:14.470 align:start position:0%
pretty large backlog that i'm working
through<00:00:13.280><c> right</c><00:00:13.440><c> now</c><00:00:13.599><c> so</c><00:00:13.759><c> it</c><00:00:13.920><c> might</c><00:00:14.080><c> take</c><00:00:14.240><c> me</c><00:00:14.400><c> a</c>

00:00:14.470 --> 00:00:14.480 align:start position:0%
through right now so it might take me a
 

00:00:14.480 --> 00:00:16.070 align:start position:0%
through right now so it might take me a
couple<00:00:14.719><c> weeks</c><00:00:15.040><c> to</c><00:00:15.120><c> get</c><00:00:15.280><c> to</c><00:00:15.440><c> your</c><00:00:15.519><c> suggested</c>

00:00:16.070 --> 00:00:16.080 align:start position:0%
couple weeks to get to your suggested
 

00:00:16.080 --> 00:00:18.790 align:start position:0%
couple weeks to get to your suggested
problem<00:00:16.880><c> so</c><00:00:17.039><c> this</c><00:00:17.279><c> is</c><00:00:17.440><c> a</c><00:00:17.600><c> pretty</c><00:00:18.160><c> good</c><00:00:18.400><c> problem</c>

00:00:18.790 --> 00:00:18.800 align:start position:0%
problem so this is a pretty good problem
 

00:00:18.800 --> 00:00:19.349 align:start position:0%
problem so this is a pretty good problem
to<00:00:18.960><c> solve</c>

00:00:19.349 --> 00:00:19.359 align:start position:0%
to solve
 

00:00:19.359 --> 00:00:21.189 align:start position:0%
to solve
this<00:00:19.520><c> can</c><00:00:19.680><c> actually</c><00:00:20.000><c> be</c><00:00:20.160><c> solved</c><00:00:20.480><c> in</c><00:00:20.560><c> a</c><00:00:20.720><c> naive</c>

00:00:21.189 --> 00:00:21.199 align:start position:0%
this can actually be solved in a naive
 

00:00:21.199 --> 00:00:23.109 align:start position:0%
this can actually be solved in a naive
way<00:00:21.439><c> which</c><00:00:21.680><c> is</c><00:00:21.760><c> going</c><00:00:21.920><c> to</c><00:00:22.000><c> be</c><00:00:22.240><c> o</c><00:00:22.400><c> of</c><00:00:22.640><c> n</c><00:00:22.800><c> squared</c>

00:00:23.109 --> 00:00:23.119 align:start position:0%
way which is going to be o of n squared
 

00:00:23.119 --> 00:00:24.790 align:start position:0%
way which is going to be o of n squared
and<00:00:23.199><c> that's</c><00:00:23.439><c> just</c><00:00:23.680><c> a</c><00:00:23.760><c> basic</c><00:00:24.080><c> like</c><00:00:24.320><c> depth</c><00:00:24.560><c> first</c>

00:00:24.790 --> 00:00:24.800 align:start position:0%
and that's just a basic like depth first
 

00:00:24.800 --> 00:00:26.870 align:start position:0%
and that's just a basic like depth first
search<00:00:25.119><c> solution</c><00:00:25.680><c> for</c><00:00:25.840><c> it</c><00:00:26.000><c> for</c><00:00:26.160><c> this</c><00:00:26.400><c> graph</c>

00:00:26.870 --> 00:00:26.880 align:start position:0%
search solution for it for this graph
 

00:00:26.880 --> 00:00:28.710 align:start position:0%
search solution for it for this graph
similar<00:00:27.279><c> to</c><00:00:27.439><c> many</c><00:00:27.680><c> other</c><00:00:27.840><c> graph</c><00:00:28.240><c> problems</c><00:00:28.560><c> but</c>

00:00:28.710 --> 00:00:28.720 align:start position:0%
similar to many other graph problems but
 

00:00:28.720 --> 00:00:30.310 align:start position:0%
similar to many other graph problems but
you<00:00:28.880><c> can</c><00:00:28.960><c> actually</c><00:00:29.359><c> reduce</c><00:00:29.920><c> this</c>

00:00:30.310 --> 00:00:30.320 align:start position:0%
you can actually reduce this
 

00:00:30.320 --> 00:00:33.910 align:start position:0%
you can actually reduce this
to<00:00:30.800><c> a</c><00:00:31.039><c> regular</c><00:00:31.920><c> o</c><00:00:32.239><c> of</c><00:00:32.640><c> n</c><00:00:32.960><c> a</c><00:00:33.120><c> more</c><00:00:33.360><c> optimized</c>

00:00:33.910 --> 00:00:33.920 align:start position:0%
to a regular o of n a more optimized
 

00:00:33.920 --> 00:00:35.910 align:start position:0%
to a regular o of n a more optimized
solution<00:00:34.399><c> and</c><00:00:34.480><c> that</c><00:00:34.800><c> actually</c><00:00:35.120><c> requires</c><00:00:35.680><c> a</c>

00:00:35.910 --> 00:00:35.920 align:start position:0%
solution and that actually requires a
 

00:00:35.920 --> 00:00:37.510 align:start position:0%
solution and that actually requires a
algorithm<00:00:36.320><c> that</c><00:00:36.480><c> you</c><00:00:36.559><c> might</c><00:00:36.800><c> not</c><00:00:36.960><c> have</c><00:00:37.200><c> seen</c>

00:00:37.510 --> 00:00:37.520 align:start position:0%
algorithm that you might not have seen
 

00:00:37.520 --> 00:00:37.910 align:start position:0%
algorithm that you might not have seen
before

00:00:37.910 --> 00:00:37.920 align:start position:0%
before
 

00:00:37.920 --> 00:00:40.470 align:start position:0%
before
union<00:00:38.320><c> find</c><00:00:38.640><c> it's</c><00:00:38.800><c> a</c><00:00:38.960><c> rare</c><00:00:39.360><c> algorithm</c><00:00:39.920><c> to</c><00:00:40.160><c> need</c>

00:00:40.470 --> 00:00:40.480 align:start position:0%
union find it's a rare algorithm to need
 

00:00:40.480 --> 00:00:42.790 align:start position:0%
union find it's a rare algorithm to need
on<00:00:40.719><c> leak</c><00:00:40.960><c> code</c><00:00:41.280><c> so</c><00:00:41.440><c> most</c><00:00:41.680><c> people</c><00:00:41.920><c> don't</c><00:00:42.239><c> use</c><00:00:42.480><c> it</c>

00:00:42.790 --> 00:00:42.800 align:start position:0%
on leak code so most people don't use it
 

00:00:42.800 --> 00:00:45.830 align:start position:0%
on leak code so most people don't use it
but<00:00:43.040><c> this</c><00:00:43.520><c> problem</c><00:00:44.320><c> can</c><00:00:44.719><c> use</c><00:00:45.039><c> union</c><00:00:45.360><c> find</c><00:00:45.600><c> to</c>

00:00:45.830 --> 00:00:45.840 align:start position:0%
but this problem can use union find to
 

00:00:45.840 --> 00:00:47.510 align:start position:0%
but this problem can use union find to
get<00:00:46.079><c> a</c><00:00:46.160><c> much</c><00:00:46.480><c> better</c><00:00:46.719><c> solution</c>

00:00:47.510 --> 00:00:47.520 align:start position:0%
get a much better solution
 

00:00:47.520 --> 00:00:49.350 align:start position:0%
get a much better solution
i'm<00:00:47.760><c> also</c><00:00:48.000><c> going</c><00:00:48.079><c> to</c><00:00:48.239><c> explain</c><00:00:48.800><c> why</c><00:00:49.200><c> we're</c>

00:00:49.350 --> 00:00:49.360 align:start position:0%
i'm also going to explain why we're
 

00:00:49.360 --> 00:00:51.350 align:start position:0%
i'm also going to explain why we're
allowed<00:00:49.680><c> to</c><00:00:49.840><c> use</c><00:00:50.079><c> the</c><00:00:50.239><c> union</c><00:00:50.559><c> find</c><00:00:50.800><c> algorithm</c>

00:00:51.350 --> 00:00:51.360 align:start position:0%
allowed to use the union find algorithm
 

00:00:51.360 --> 00:00:53.110 align:start position:0%
allowed to use the union find algorithm
in<00:00:51.440><c> this</c><00:00:51.680><c> problem</c><00:00:52.000><c> because</c><00:00:52.160><c> it's</c><00:00:52.399><c> not</c><00:00:52.640><c> super</c>

00:00:53.110 --> 00:00:53.120 align:start position:0%
in this problem because it's not super
 

00:00:53.120 --> 00:00:53.750 align:start position:0%
in this problem because it's not super
clear

00:00:53.750 --> 00:00:53.760 align:start position:0%
clear
 

00:00:53.760 --> 00:00:56.389 align:start position:0%
clear
so<00:00:53.920><c> we're</c><00:00:54.079><c> given</c><00:00:54.320><c> a</c><00:00:54.480><c> definition</c><00:00:55.520><c> a</c><00:00:55.680><c> tree</c><00:00:56.079><c> is</c><00:00:56.239><c> an</c>

00:00:56.389 --> 00:00:56.399 align:start position:0%
so we're given a definition a tree is an
 

00:00:56.399 --> 00:00:57.590 align:start position:0%
so we're given a definition a tree is an
undirected<00:00:56.960><c> graph</c>

00:00:57.590 --> 00:00:57.600 align:start position:0%
undirected graph
 

00:00:57.600 --> 00:01:00.389 align:start position:0%
undirected graph
that<00:00:57.920><c> contains</c><00:00:58.640><c> no</c><00:00:59.039><c> cycles</c><00:00:59.760><c> so</c><00:00:59.920><c> basically</c>

00:01:00.389 --> 00:01:00.399 align:start position:0%
that contains no cycles so basically
 

00:01:00.399 --> 00:01:02.229 align:start position:0%
that contains no cycles so basically
this<00:01:00.640><c> is</c><00:01:00.719><c> the</c><00:01:00.879><c> key</c><00:01:01.120><c> an</c><00:01:01.280><c> undirected</c><00:01:01.840><c> graph</c><00:01:02.079><c> that</c>

00:01:02.229 --> 00:01:02.239 align:start position:0%
this is the key an undirected graph that
 

00:01:02.239 --> 00:01:03.510 align:start position:0%
this is the key an undirected graph that
contains<00:01:02.719><c> no</c><00:01:02.960><c> cycles</c>

00:01:03.510 --> 00:01:03.520 align:start position:0%
contains no cycles
 

00:01:03.520 --> 00:01:05.750 align:start position:0%
contains no cycles
we're<00:01:03.760><c> given</c><00:01:04.159><c> a</c><00:01:04.320><c> graph</c><00:01:04.720><c> that</c><00:01:05.040><c> started</c><00:01:05.519><c> as</c><00:01:05.680><c> a</c>

00:01:05.750 --> 00:01:05.760 align:start position:0%
we're given a graph that started as a
 

00:01:05.760 --> 00:01:07.510 align:start position:0%
we're given a graph that started as a
tree<00:01:06.159><c> started</c><00:01:06.560><c> as</c><00:01:06.799><c> a</c><00:01:06.880><c> graph</c><00:01:07.200><c> that</c><00:01:07.360><c> was</c>

00:01:07.510 --> 00:01:07.520 align:start position:0%
tree started as a graph that was
 

00:01:07.520 --> 00:01:08.230 align:start position:0%
tree started as a graph that was
undirected

00:01:08.230 --> 00:01:08.240 align:start position:0%
undirected
 

00:01:08.240 --> 00:01:11.030 align:start position:0%
undirected
and<00:01:08.400><c> had</c><00:01:08.640><c> no</c><00:01:08.880><c> cycles</c><00:01:09.520><c> we</c><00:01:09.680><c> had</c><00:01:10.000><c> n</c><00:01:10.400><c> nodes</c><00:01:10.799><c> these</c>

00:01:11.030 --> 00:01:11.040 align:start position:0%
and had no cycles we had n nodes these
 

00:01:11.040 --> 00:01:12.149 align:start position:0%
and had no cycles we had n nodes these
nodes<00:01:11.360><c> are</c><00:01:11.439><c> labeled</c><00:01:11.840><c> from</c>

00:01:12.149 --> 00:01:12.159 align:start position:0%
nodes are labeled from
 

00:01:12.159 --> 00:01:15.030 align:start position:0%
nodes are labeled from
one<00:01:12.560><c> all</c><00:01:12.720><c> the</c><00:01:12.799><c> way</c><00:01:13.040><c> to</c><00:01:13.280><c> n</c><00:01:14.000><c> but</c><00:01:14.159><c> we</c><00:01:14.479><c> ended</c><00:01:14.799><c> up</c>

00:01:15.030 --> 00:01:15.040 align:start position:0%
one all the way to n but we ended up
 

00:01:15.040 --> 00:01:15.590 align:start position:0%
one all the way to n but we ended up
adding

00:01:15.590 --> 00:01:15.600 align:start position:0%
adding
 

00:01:15.600 --> 00:01:18.149 align:start position:0%
adding
one<00:01:16.000><c> additional</c><00:01:16.640><c> edge</c><00:01:17.280><c> and</c><00:01:17.439><c> we</c><00:01:17.600><c> know</c><00:01:17.840><c> every</c>

00:01:18.149 --> 00:01:18.159 align:start position:0%
one additional edge and we know every
 

00:01:18.159 --> 00:01:19.830 align:start position:0%
one additional edge and we know every
edge<00:01:18.560><c> basically</c><00:01:19.040><c> just</c><00:01:19.280><c> connects</c>

00:01:19.830 --> 00:01:19.840 align:start position:0%
edge basically just connects
 

00:01:19.840 --> 00:01:22.149 align:start position:0%
edge basically just connects
two<00:01:20.080><c> vertices</c><00:01:20.640><c> and</c><00:01:20.720><c> this</c><00:01:20.960><c> edge</c><00:01:21.200><c> is</c><00:01:21.439><c> undirected</c>

00:01:22.149 --> 00:01:22.159 align:start position:0%
two vertices and this edge is undirected
 

00:01:22.159 --> 00:01:23.270 align:start position:0%
two vertices and this edge is undirected
so<00:01:22.640><c> so</c><00:01:22.799><c> this</c>

00:01:23.270 --> 00:01:23.280 align:start position:0%
so so this
 

00:01:23.280 --> 00:01:25.190 align:start position:0%
so so this
edge<00:01:23.600><c> ended</c><00:01:23.920><c> up</c><00:01:24.000><c> connecting</c><00:01:24.560><c> two</c><00:01:25.040><c> two</c>

00:01:25.190 --> 00:01:25.200 align:start position:0%
edge ended up connecting two two
 

00:01:25.200 --> 00:01:27.030 align:start position:0%
edge ended up connecting two two
vertices<00:01:26.159><c> and</c><00:01:26.400><c> this</c><00:01:26.640><c> edge</c>

00:01:27.030 --> 00:01:27.040 align:start position:0%
vertices and this edge
 

00:01:27.040 --> 00:01:29.910 align:start position:0%
vertices and this edge
did<00:01:27.200><c> not</c><00:01:27.600><c> already</c><00:01:28.080><c> exist</c><00:01:28.720><c> in</c><00:01:28.799><c> the</c><00:01:29.040><c> graph</c><00:01:29.759><c> in</c>

00:01:29.910 --> 00:01:29.920 align:start position:0%
did not already exist in the graph in
 

00:01:29.920 --> 00:01:31.109 align:start position:0%
did not already exist in the graph in
this<00:01:30.159><c> case</c><00:01:30.479><c> the</c><00:01:30.640><c> graph</c>

00:01:31.109 --> 00:01:31.119 align:start position:0%
this case the graph
 

00:01:31.119 --> 00:01:33.510 align:start position:0%
this case the graph
is<00:01:31.200><c> represented</c><00:01:31.920><c> as</c><00:01:32.079><c> an</c><00:01:32.240><c> array</c><00:01:32.720><c> of</c><00:01:32.960><c> edges</c><00:01:33.439><c> and</c>

00:01:33.510 --> 00:01:33.520 align:start position:0%
is represented as an array of edges and
 

00:01:33.520 --> 00:01:35.270 align:start position:0%
is represented as an array of edges and
the<00:01:33.680><c> number</c><00:01:33.920><c> of</c><00:01:34.079><c> edges</c><00:01:34.479><c> is</c><00:01:34.640><c> basically</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
the number of edges is basically
 

00:01:35.280 --> 00:01:37.510 align:start position:0%
the number of edges is basically
n<00:01:35.520><c> basically</c><00:01:36.000><c> the</c><00:01:36.159><c> number</c><00:01:36.400><c> of</c><00:01:36.560><c> edges</c><00:01:36.960><c> is</c><00:01:37.200><c> equal</c>

00:01:37.510 --> 00:01:37.520 align:start position:0%
n basically the number of edges is equal
 

00:01:37.520 --> 00:01:39.990 align:start position:0%
n basically the number of edges is equal
to<00:01:37.680><c> the</c><00:01:37.840><c> number</c><00:01:38.159><c> of</c><00:01:38.400><c> nodes</c><00:01:38.799><c> that</c><00:01:39.040><c> we</c><00:01:39.200><c> have</c>

00:01:39.990 --> 00:01:40.000 align:start position:0%
to the number of nodes that we have
 

00:01:40.000 --> 00:01:41.670 align:start position:0%
to the number of nodes that we have
as<00:01:40.240><c> i</c><00:01:40.320><c> mentioned</c><00:01:40.799><c> every</c><00:01:41.040><c> edge</c><00:01:41.360><c> is</c><00:01:41.439><c> going</c><00:01:41.520><c> to</c><00:01:41.600><c> be</c>

00:01:41.670 --> 00:01:41.680 align:start position:0%
as i mentioned every edge is going to be
 

00:01:41.680 --> 00:01:43.830 align:start position:0%
as i mentioned every edge is going to be
connecting<00:01:42.240><c> two</c><00:01:42.479><c> nodes</c><00:01:42.880><c> together</c>

00:01:43.830 --> 00:01:43.840 align:start position:0%
connecting two nodes together
 

00:01:43.840 --> 00:01:46.149 align:start position:0%
connecting two nodes together
so<00:01:44.000><c> we</c><00:01:44.240><c> want</c><00:01:44.399><c> to</c><00:01:44.560><c> return</c><00:01:45.040><c> an</c><00:01:45.280><c> edge</c><00:01:45.600><c> that</c><00:01:45.759><c> can</c><00:01:45.920><c> be</c>

00:01:46.149 --> 00:01:46.159 align:start position:0%
so we want to return an edge that can be
 

00:01:46.159 --> 00:01:47.990 align:start position:0%
so we want to return an edge that can be
removed<00:01:46.960><c> from</c><00:01:47.119><c> the</c><00:01:47.360><c> graph</c>

00:01:47.990 --> 00:01:48.000 align:start position:0%
removed from the graph
 

00:01:48.000 --> 00:01:50.630 align:start position:0%
removed from the graph
that<00:01:48.159><c> will</c><00:01:48.479><c> turn</c><00:01:48.799><c> the</c><00:01:48.960><c> graph</c><00:01:49.520><c> back</c><00:01:50.000><c> into</c><00:01:50.399><c> a</c>

00:01:50.630 --> 00:01:50.640 align:start position:0%
that will turn the graph back into a
 

00:01:50.640 --> 00:01:51.429 align:start position:0%
that will turn the graph back into a
tree

00:01:51.429 --> 00:01:51.439 align:start position:0%
tree
 

00:01:51.439 --> 00:01:53.670 align:start position:0%
tree
if<00:01:51.600><c> there</c><00:01:51.840><c> are</c><00:01:52.159><c> multiple</c><00:01:52.799><c> edges</c><00:01:53.200><c> that</c><00:01:53.360><c> we</c><00:01:53.520><c> can</c>

00:01:53.670 --> 00:01:53.680 align:start position:0%
if there are multiple edges that we can
 

00:01:53.680 --> 00:01:55.830 align:start position:0%
if there are multiple edges that we can
remove<00:01:54.240><c> that</c><00:01:54.399><c> will</c><00:01:54.640><c> turn</c><00:01:54.880><c> the</c><00:01:55.200><c> graph</c><00:01:55.600><c> back</c>

00:01:55.830 --> 00:01:55.840 align:start position:0%
remove that will turn the graph back
 

00:01:55.840 --> 00:01:57.030 align:start position:0%
remove that will turn the graph back
into<00:01:56.159><c> a</c><00:01:56.240><c> tree</c>

00:01:57.030 --> 00:01:57.040 align:start position:0%
into a tree
 

00:01:57.040 --> 00:02:00.389 align:start position:0%
into a tree
then<00:01:57.520><c> we</c><00:01:57.680><c> will</c><00:01:57.840><c> return</c><00:01:58.320><c> the</c><00:01:58.640><c> last</c><00:01:59.280><c> edge</c><00:02:00.000><c> in</c><00:02:00.079><c> the</c>

00:02:00.389 --> 00:02:00.399 align:start position:0%
then we will return the last edge in the
 

00:02:00.399 --> 00:02:03.030 align:start position:0%
then we will return the last edge in the
input<00:02:00.880><c> that</c><00:02:01.439><c> that</c><00:02:01.680><c> basically</c><00:02:02.240><c> satisfies</c><00:02:02.880><c> that</c>

00:02:03.030 --> 00:02:03.040 align:start position:0%
input that that basically satisfies that
 

00:02:03.040 --> 00:02:03.830 align:start position:0%
input that that basically satisfies that
condition

00:02:03.830 --> 00:02:03.840 align:start position:0%
condition
 

00:02:03.840 --> 00:02:06.709 align:start position:0%
condition
and<00:02:04.000><c> they</c><00:02:04.320><c> guarantee</c><00:02:05.040><c> us</c><00:02:05.200><c> that</c><00:02:05.680><c> in</c><00:02:05.920><c> the</c><00:02:06.240><c> input</c>

00:02:06.709 --> 00:02:06.719 align:start position:0%
and they guarantee us that in the input
 

00:02:06.719 --> 00:02:08.389 align:start position:0%
and they guarantee us that in the input
list<00:02:07.040><c> of</c><00:02:07.200><c> edges</c><00:02:07.520><c> that</c><00:02:07.680><c> were</c><00:02:07.920><c> given</c>

00:02:08.389 --> 00:02:08.399 align:start position:0%
list of edges that were given
 

00:02:08.399 --> 00:02:11.270 align:start position:0%
list of edges that were given
every<00:02:08.720><c> single</c><00:02:09.200><c> edge</c><00:02:09.599><c> is</c><00:02:09.759><c> going</c><00:02:10.000><c> to</c><00:02:10.160><c> be</c><00:02:10.479><c> unique</c>

00:02:11.270 --> 00:02:11.280 align:start position:0%
every single edge is going to be unique
 

00:02:11.280 --> 00:02:12.869 align:start position:0%
every single edge is going to be unique
so<00:02:11.440><c> let's</c><00:02:11.760><c> take</c><00:02:11.920><c> a</c><00:02:12.080><c> look</c><00:02:12.319><c> at</c><00:02:12.480><c> this</c>

00:02:12.869 --> 00:02:12.879 align:start position:0%
so let's take a look at this
 

00:02:12.879 --> 00:02:15.990 align:start position:0%
so let's take a look at this
example<00:02:13.760><c> notice</c><00:02:14.239><c> how</c><00:02:14.480><c> if</c><00:02:14.640><c> we</c><00:02:14.879><c> remove</c><00:02:15.599><c> any</c><00:02:15.920><c> of</c>

00:02:15.990 --> 00:02:16.000 align:start position:0%
example notice how if we remove any of
 

00:02:16.000 --> 00:02:17.670 align:start position:0%
example notice how if we remove any of
the<00:02:16.160><c> edges</c><00:02:16.560><c> if</c><00:02:16.720><c> i</c><00:02:16.800><c> remove</c><00:02:17.280><c> this</c>

00:02:17.670 --> 00:02:17.680 align:start position:0%
the edges if i remove this
 

00:02:17.680 --> 00:02:19.910 align:start position:0%
the edges if i remove this
now<00:02:17.840><c> this</c><00:02:18.080><c> graph</c><00:02:18.560><c> no</c><00:02:18.800><c> longer</c><00:02:19.200><c> has</c><00:02:19.440><c> a</c><00:02:19.520><c> cycle</c>

00:02:19.910 --> 00:02:19.920 align:start position:0%
now this graph no longer has a cycle
 

00:02:19.920 --> 00:02:20.949 align:start position:0%
now this graph no longer has a cycle
right<00:02:20.080><c> because</c>

00:02:20.949 --> 00:02:20.959 align:start position:0%
right because
 

00:02:20.959 --> 00:02:23.190 align:start position:0%
right because
initially<00:02:21.360><c> it</c><00:02:21.440><c> had</c><00:02:21.680><c> this</c><00:02:22.000><c> cycle</c><00:02:22.400><c> right</c><00:02:22.879><c> so</c><00:02:23.040><c> if</c>

00:02:23.190 --> 00:02:23.200 align:start position:0%
initially it had this cycle right so if
 

00:02:23.200 --> 00:02:24.070 align:start position:0%
initially it had this cycle right so if
i<00:02:23.280><c> remove</c><00:02:23.680><c> this</c>

00:02:24.070 --> 00:02:24.080 align:start position:0%
i remove this
 

00:02:24.080 --> 00:02:25.990 align:start position:0%
i remove this
edge<00:02:24.560><c> it</c><00:02:24.720><c> doesn't</c><00:02:24.959><c> have</c><00:02:25.120><c> a</c><00:02:25.200><c> cycle</c><00:02:25.520><c> so</c><00:02:25.760><c> that</c>

00:02:25.990 --> 00:02:26.000 align:start position:0%
edge it doesn't have a cycle so that
 

00:02:26.000 --> 00:02:27.589 align:start position:0%
edge it doesn't have a cycle so that
satisfies<00:02:26.640><c> the</c><00:02:26.720><c> condition</c><00:02:27.120><c> so</c><00:02:27.280><c> does</c><00:02:27.440><c> that</c>

00:02:27.589 --> 00:02:27.599 align:start position:0%
satisfies the condition so does that
 

00:02:27.599 --> 00:02:27.990 align:start position:0%
satisfies the condition so does that
mean

00:02:27.990 --> 00:02:28.000 align:start position:0%
mean
 

00:02:28.000 --> 00:02:30.790 align:start position:0%
mean
one<00:02:28.480><c> two</c><00:02:29.040><c> is</c><00:02:29.200><c> the</c><00:02:29.280><c> result</c><00:02:29.840><c> one</c><00:02:30.080><c> two</c><00:02:30.400><c> is</c><00:02:30.560><c> the</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
one two is the result one two is the
 

00:02:30.800 --> 00:02:32.150 align:start position:0%
one two is the result one two is the
edge<00:02:31.200><c> that</c><00:02:31.360><c> we</c><00:02:31.519><c> can</c><00:02:31.680><c> return</c>

00:02:32.150 --> 00:02:32.160 align:start position:0%
edge that we can return
 

00:02:32.160 --> 00:02:34.869 align:start position:0%
edge that we can return
no<00:02:32.640><c> because</c><00:02:32.879><c> it</c><00:02:33.040><c> turns</c><00:02:33.360><c> out</c><00:02:33.680><c> if</c><00:02:33.840><c> i</c><00:02:34.000><c> remove</c><00:02:34.560><c> this</c>

00:02:34.869 --> 00:02:34.879 align:start position:0%
no because it turns out if i remove this
 

00:02:34.879 --> 00:02:35.430 align:start position:0%
no because it turns out if i remove this
edge

00:02:35.430 --> 00:02:35.440 align:start position:0%
edge
 

00:02:35.440 --> 00:02:37.350 align:start position:0%
edge
it<00:02:35.680><c> also</c><00:02:36.160><c> satisfies</c><00:02:36.720><c> the</c><00:02:36.879><c> condition</c><00:02:37.200><c> it</c>

00:02:37.350 --> 00:02:37.360 align:start position:0%
it also satisfies the condition it
 

00:02:37.360 --> 00:02:39.509 align:start position:0%
it also satisfies the condition it
breaks<00:02:37.760><c> the</c><00:02:37.920><c> cycle</c><00:02:38.239><c> that</c><00:02:38.400><c> we</c><00:02:38.560><c> initially</c><00:02:39.040><c> had</c>

00:02:39.509 --> 00:02:39.519 align:start position:0%
breaks the cycle that we initially had
 

00:02:39.519 --> 00:02:41.910 align:start position:0%
breaks the cycle that we initially had
the<00:02:39.760><c> same</c><00:02:40.080><c> is</c><00:02:40.239><c> true</c><00:02:40.480><c> for</c><00:02:40.640><c> the</c><00:02:40.879><c> third</c><00:02:41.280><c> edge</c><00:02:41.680><c> so</c>

00:02:41.910 --> 00:02:41.920 align:start position:0%
the same is true for the third edge so
 

00:02:41.920 --> 00:02:42.869 align:start position:0%
the same is true for the third edge so
in<00:02:42.080><c> this</c><00:02:42.319><c> case</c>

00:02:42.869 --> 00:02:42.879 align:start position:0%
in this case
 

00:02:42.879 --> 00:02:44.790 align:start position:0%
in this case
which<00:02:43.200><c> of</c><00:02:43.360><c> the</c><00:02:43.760><c> so</c><00:02:43.920><c> which</c><00:02:44.160><c> of</c><00:02:44.319><c> these</c><00:02:44.480><c> three</c>

00:02:44.790 --> 00:02:44.800 align:start position:0%
which of the so which of these three
 

00:02:44.800 --> 00:02:46.229 align:start position:0%
which of the so which of these three
edges<00:02:45.040><c> are</c><00:02:45.200><c> we</c><00:02:45.280><c> going</c><00:02:45.360><c> to</c><00:02:45.440><c> return</c><00:02:45.840><c> basically</c>

00:02:46.229 --> 00:02:46.239 align:start position:0%
edges are we going to return basically
 

00:02:46.239 --> 00:02:47.350 align:start position:0%
edges are we going to return basically
the<00:02:46.400><c> one</c><00:02:46.560><c> that</c><00:02:46.800><c> occurs</c>

00:02:47.350 --> 00:02:47.360 align:start position:0%
the one that occurs
 

00:02:47.360 --> 00:02:50.070 align:start position:0%
the one that occurs
last<00:02:47.920><c> in</c><00:02:48.080><c> the</c><00:02:48.400><c> input</c><00:02:48.879><c> which</c><00:02:49.120><c> is</c><00:02:49.280><c> going</c><00:02:49.360><c> to</c><00:02:49.440><c> be</c><00:02:49.680><c> 2</c>

00:02:50.070 --> 00:02:50.080 align:start position:0%
last in the input which is going to be 2
 

00:02:50.080 --> 00:02:50.710 align:start position:0%
last in the input which is going to be 2
3.

00:02:50.710 --> 00:02:50.720 align:start position:0%
3.
 

00:02:50.720 --> 00:02:52.390 align:start position:0%
3.
so<00:02:50.959><c> i</c><00:02:51.040><c> guess</c><00:02:51.200><c> the</c><00:02:51.360><c> next</c><00:02:51.680><c> question</c><00:02:52.000><c> you</c><00:02:52.160><c> might</c>

00:02:52.390 --> 00:02:52.400 align:start position:0%
so i guess the next question you might
 

00:02:52.400 --> 00:02:54.470 align:start position:0%
so i guess the next question you might
have<00:02:52.640><c> is</c><00:02:52.879><c> is</c><00:02:53.040><c> that</c><00:02:53.440><c> always</c><00:02:53.920><c> going</c><00:02:54.080><c> to</c><00:02:54.239><c> be</c><00:02:54.319><c> the</c>

00:02:54.470 --> 00:02:54.480 align:start position:0%
have is is that always going to be the
 

00:02:54.480 --> 00:02:55.830 align:start position:0%
have is is that always going to be the
case<00:02:54.720><c> is</c><00:02:54.879><c> it</c><00:02:55.040><c> if</c><00:02:55.200><c> we</c><00:02:55.360><c> remove</c>

00:02:55.830 --> 00:02:55.840 align:start position:0%
case is it if we remove
 

00:02:55.840 --> 00:02:57.830 align:start position:0%
case is it if we remove
any<00:02:56.080><c> of</c><00:02:56.160><c> the</c><00:02:56.319><c> edges</c><00:02:56.720><c> it</c><00:02:56.879><c> breaks</c><00:02:57.120><c> the</c><00:02:57.280><c> cycle</c><00:02:57.680><c> so</c>

00:02:57.830 --> 00:02:57.840 align:start position:0%
any of the edges it breaks the cycle so
 

00:02:57.840 --> 00:02:59.670 align:start position:0%
any of the edges it breaks the cycle so
that<00:02:58.239><c> are</c><00:02:58.400><c> we</c><00:02:58.640><c> always</c><00:02:59.040><c> going</c><00:02:59.120><c> to</c><00:02:59.200><c> be</c><00:02:59.280><c> returning</c>

00:02:59.670 --> 00:02:59.680 align:start position:0%
that are we always going to be returning
 

00:02:59.680 --> 00:03:01.910 align:start position:0%
that are we always going to be returning
whatever<00:03:00.000><c> the</c><00:03:00.239><c> last</c><00:03:00.640><c> edge</c><00:03:00.959><c> is</c><00:03:01.120><c> given</c><00:03:01.360><c> to</c><00:03:01.599><c> us</c>

00:03:01.910 --> 00:03:01.920 align:start position:0%
whatever the last edge is given to us
 

00:03:01.920 --> 00:03:03.750 align:start position:0%
whatever the last edge is given to us
not<00:03:02.159><c> necessarily</c><00:03:02.959><c> let's</c><00:03:03.120><c> take</c><00:03:03.280><c> a</c><00:03:03.360><c> look</c><00:03:03.599><c> at</c>

00:03:03.750 --> 00:03:03.760 align:start position:0%
not necessarily let's take a look at
 

00:03:03.760 --> 00:03:05.910 align:start position:0%
not necessarily let's take a look at
another<00:03:04.239><c> edge</c><00:03:04.480><c> if</c><00:03:04.560><c> we</c><00:03:04.800><c> added</c><00:03:05.120><c> let's</c><00:03:05.280><c> say</c><00:03:05.599><c> two</c>

00:03:05.910 --> 00:03:05.920 align:start position:0%
another edge if we added let's say two
 

00:03:05.920 --> 00:03:08.070 align:start position:0%
another edge if we added let's say two
four<00:03:06.239><c> basically</c><00:03:06.640><c> if</c><00:03:06.800><c> i</c><00:03:06.959><c> increased</c><00:03:07.680><c> the</c><00:03:07.840><c> number</c>

00:03:08.070 --> 00:03:08.080 align:start position:0%
four basically if i increased the number
 

00:03:08.080 --> 00:03:09.270 align:start position:0%
four basically if i increased the number
of<00:03:08.319><c> nodes</c><00:03:08.879><c> to</c>

00:03:09.270 --> 00:03:09.280 align:start position:0%
of nodes to
 

00:03:09.280 --> 00:03:11.589 align:start position:0%
of nodes to
from<00:03:09.519><c> three</c><00:03:09.840><c> to</c><00:03:10.080><c> four</c><00:03:10.400><c> so</c><00:03:10.560><c> i</c><00:03:10.720><c> added</c><00:03:11.200><c> an</c><00:03:11.360><c> edge</c>

00:03:11.589 --> 00:03:11.599 align:start position:0%
from three to four so i added an edge
 

00:03:11.599 --> 00:03:12.390 align:start position:0%
from three to four so i added an edge
over<00:03:11.840><c> here</c>

00:03:12.390 --> 00:03:12.400 align:start position:0%
over here
 

00:03:12.400 --> 00:03:15.509 align:start position:0%
over here
that<00:03:12.560><c> connects</c><00:03:13.280><c> these</c><00:03:13.680><c> two</c><00:03:14.239><c> nodes</c><00:03:15.040><c> now</c>

00:03:15.509 --> 00:03:15.519 align:start position:0%
that connects these two nodes now
 

00:03:15.519 --> 00:03:18.070 align:start position:0%
that connects these two nodes now
if<00:03:15.760><c> i</c><00:03:16.000><c> break</c><00:03:16.800><c> and</c><00:03:16.959><c> this</c><00:03:17.200><c> is</c><00:03:17.280><c> the</c><00:03:17.440><c> last</c><00:03:17.840><c> edge</c>

00:03:18.070 --> 00:03:18.080 align:start position:0%
if i break and this is the last edge
 

00:03:18.080 --> 00:03:20.070 align:start position:0%
if i break and this is the last edge
occurs<00:03:18.400><c> in</c><00:03:18.560><c> our</c><00:03:18.720><c> input</c><00:03:19.040><c> if</c><00:03:19.120><c> i</c><00:03:19.360><c> break</c>

00:03:20.070 --> 00:03:20.080 align:start position:0%
occurs in our input if i break
 

00:03:20.080 --> 00:03:22.390 align:start position:0%
occurs in our input if i break
this<00:03:20.400><c> edge</c><00:03:20.800><c> does</c><00:03:21.040><c> that</c><00:03:21.280><c> get</c><00:03:21.519><c> rid</c><00:03:21.760><c> of</c><00:03:21.920><c> the</c><00:03:22.159><c> loop</c>

00:03:22.390 --> 00:03:22.400 align:start position:0%
this edge does that get rid of the loop
 

00:03:22.400 --> 00:03:24.229 align:start position:0%
this edge does that get rid of the loop
that<00:03:22.560><c> we</c><00:03:22.720><c> have</c><00:03:23.040><c> no</c><00:03:23.280><c> we</c><00:03:23.519><c> still</c><00:03:23.680><c> have</c><00:03:23.920><c> a</c><00:03:24.000><c> loop</c>

00:03:24.229 --> 00:03:24.239 align:start position:0%
that we have no we still have a loop
 

00:03:24.239 --> 00:03:25.509 align:start position:0%
that we have no we still have a loop
over<00:03:24.480><c> here</c><00:03:24.640><c> right</c><00:03:24.879><c> so</c>

00:03:25.509 --> 00:03:25.519 align:start position:0%
over here right so
 

00:03:25.519 --> 00:03:28.070 align:start position:0%
over here right so
this<00:03:26.080><c> breaking</c><00:03:26.480><c> this</c><00:03:26.799><c> edge</c><00:03:27.120><c> does</c><00:03:27.280><c> not</c><00:03:27.519><c> turn</c><00:03:27.840><c> us</c>

00:03:28.070 --> 00:03:28.080 align:start position:0%
this breaking this edge does not turn us
 

00:03:28.080 --> 00:03:29.670 align:start position:0%
this breaking this edge does not turn us
into<00:03:28.319><c> a</c><00:03:28.480><c> tree</c><00:03:28.799><c> that's</c><00:03:28.959><c> what</c><00:03:29.120><c> we</c><00:03:29.200><c> were</c><00:03:29.440><c> looking</c>

00:03:29.670 --> 00:03:29.680 align:start position:0%
into a tree that's what we were looking
 

00:03:29.680 --> 00:03:29.990 align:start position:0%
into a tree that's what we were looking
for

00:03:29.990 --> 00:03:30.000 align:start position:0%
for
 

00:03:30.000 --> 00:03:31.270 align:start position:0%
for
so<00:03:30.239><c> we're</c><00:03:30.400><c> not</c><00:03:30.640><c> always</c><00:03:31.040><c> going</c><00:03:31.120><c> to</c><00:03:31.200><c> be</c>

00:03:31.270 --> 00:03:31.280 align:start position:0%
so we're not always going to be
 

00:03:31.280 --> 00:03:33.910 align:start position:0%
so we're not always going to be
returning<00:03:31.760><c> the</c><00:03:31.920><c> last</c><00:03:32.319><c> edge</c><00:03:32.959><c> my</c><00:03:33.200><c> next</c><00:03:33.519><c> question</c>

00:03:33.910 --> 00:03:33.920 align:start position:0%
returning the last edge my next question
 

00:03:33.920 --> 00:03:34.630 align:start position:0%
returning the last edge my next question
to<00:03:34.000><c> you</c><00:03:34.239><c> is</c>

00:03:34.630 --> 00:03:34.640 align:start position:0%
to you is
 

00:03:34.640 --> 00:03:37.509 align:start position:0%
to you is
if<00:03:34.799><c> we</c><00:03:35.040><c> have</c><00:03:35.360><c> n</c><00:03:35.760><c> nodes</c><00:03:36.239><c> and</c><00:03:36.400><c> we</c><00:03:36.560><c> have</c><00:03:36.879><c> n</c><00:03:37.200><c> edges</c>

00:03:37.509 --> 00:03:37.519 align:start position:0%
if we have n nodes and we have n edges
 

00:03:37.519 --> 00:03:39.110 align:start position:0%
if we have n nodes and we have n edges
right<00:03:37.760><c> that's</c><00:03:38.000><c> what</c><00:03:38.080><c> we're</c><00:03:38.319><c> given</c><00:03:38.720><c> always</c>

00:03:39.110 --> 00:03:39.120 align:start position:0%
right that's what we're given always
 

00:03:39.120 --> 00:03:40.470 align:start position:0%
right that's what we're given always
we're<00:03:39.280><c> always</c><00:03:39.519><c> given</c><00:03:39.760><c> the</c><00:03:39.840><c> same</c><00:03:40.080><c> number</c><00:03:40.319><c> of</c>

00:03:40.470 --> 00:03:40.480 align:start position:0%
we're always given the same number of
 

00:03:40.480 --> 00:03:41.750 align:start position:0%
we're always given the same number of
nodes<00:03:40.720><c> same</c><00:03:40.959><c> number</c><00:03:41.200><c> of</c><00:03:41.360><c> edges</c>

00:03:41.750 --> 00:03:41.760 align:start position:0%
nodes same number of edges
 

00:03:41.760 --> 00:03:44.229 align:start position:0%
nodes same number of edges
is<00:03:41.920><c> it</c><00:03:42.159><c> guaranteed</c><00:03:42.959><c> that</c><00:03:43.120><c> we're</c><00:03:43.440><c> always</c><00:03:44.000><c> going</c>

00:03:44.229 --> 00:03:44.239 align:start position:0%
is it guaranteed that we're always going
 

00:03:44.239 --> 00:03:46.710 align:start position:0%
is it guaranteed that we're always going
to<00:03:44.480><c> start</c><00:03:44.879><c> out</c><00:03:45.040><c> with</c><00:03:45.280><c> a</c><00:03:45.440><c> loop</c><00:03:45.920><c> and</c><00:03:46.080><c> the</c><00:03:46.239><c> answer</c>

00:03:46.710 --> 00:03:46.720 align:start position:0%
to start out with a loop and the answer
 

00:03:46.720 --> 00:03:47.030 align:start position:0%
to start out with a loop and the answer
is

00:03:47.030 --> 00:03:47.040 align:start position:0%
is
 

00:03:47.040 --> 00:03:49.509 align:start position:0%
is
yes<00:03:47.599><c> let</c><00:03:47.760><c> me</c><00:03:47.920><c> show</c><00:03:48.080><c> you</c><00:03:48.319><c> the</c><00:03:48.560><c> intuition</c><00:03:49.120><c> of</c><00:03:49.280><c> why</c>

00:03:49.509 --> 00:03:49.519 align:start position:0%
yes let me show you the intuition of why
 

00:03:49.519 --> 00:03:50.390 align:start position:0%
yes let me show you the intuition of why
that's<00:03:49.840><c> true</c>

00:03:50.390 --> 00:03:50.400 align:start position:0%
that's true
 

00:03:50.400 --> 00:03:53.270 align:start position:0%
that's true
let's<00:03:50.720><c> say</c><00:03:50.959><c> we</c><00:03:51.200><c> start</c><00:03:51.599><c> out</c><00:03:51.680><c> with</c><00:03:52.080><c> two</c><00:03:52.480><c> nodes</c><00:03:53.120><c> if</c>

00:03:53.270 --> 00:03:53.280 align:start position:0%
let's say we start out with two nodes if
 

00:03:53.280 --> 00:03:54.149 align:start position:0%
let's say we start out with two nodes if
i<00:03:53.519><c> add</c><00:03:53.840><c> a</c>

00:03:54.149 --> 00:03:54.159 align:start position:0%
i add a
 

00:03:54.159 --> 00:03:57.110 align:start position:0%
i add a
single<00:03:54.720><c> edge</c><00:03:54.959><c> to</c><00:03:55.120><c> this</c><00:03:55.680><c> notice</c><00:03:56.159><c> how</c><00:03:56.640><c> we</c><00:03:56.799><c> were</c>

00:03:57.110 --> 00:03:57.120 align:start position:0%
single edge to this notice how we were
 

00:03:57.120 --> 00:03:57.990 align:start position:0%
single edge to this notice how we were
able<00:03:57.360><c> to</c><00:03:57.599><c> take</c>

00:03:57.990 --> 00:03:58.000 align:start position:0%
able to take
 

00:03:58.000 --> 00:04:01.110 align:start position:0%
able to take
the<00:03:58.239><c> total</c><00:03:58.640><c> number</c><00:03:59.040><c> of</c><00:03:59.680><c> disjoint</c><00:04:00.480><c> graphs</c><00:04:01.040><c> we</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
the total number of disjoint graphs we
 

00:04:01.120 --> 00:04:03.350 align:start position:0%
the total number of disjoint graphs we
had<00:04:01.439><c> two</c><00:04:01.760><c> graphs</c><00:04:02.159><c> that</c><00:04:02.319><c> were</c><00:04:02.560><c> not</c><00:04:02.879><c> connected</c>

00:04:03.350 --> 00:04:03.360 align:start position:0%
had two graphs that were not connected
 

00:04:03.360 --> 00:04:03.910 align:start position:0%
had two graphs that were not connected
right

00:04:03.910 --> 00:04:03.920 align:start position:0%
right
 

00:04:03.920 --> 00:04:06.390 align:start position:0%
right
once<00:04:04.159><c> we</c><00:04:04.480><c> added</c><00:04:04.879><c> an</c><00:04:05.120><c> edge</c><00:04:05.519><c> we</c><00:04:05.680><c> were</c><00:04:05.920><c> able</c><00:04:06.159><c> to</c>

00:04:06.390 --> 00:04:06.400 align:start position:0%
once we added an edge we were able to
 

00:04:06.400 --> 00:04:07.910 align:start position:0%
once we added an edge we were able to
reduce<00:04:07.120><c> that</c><00:04:07.360><c> number</c>

00:04:07.910 --> 00:04:07.920 align:start position:0%
reduce that number
 

00:04:07.920 --> 00:04:10.149 align:start position:0%
reduce that number
to<00:04:08.239><c> one</c><00:04:08.560><c> graph</c><00:04:08.879><c> right</c><00:04:09.120><c> now</c><00:04:09.280><c> we</c><00:04:09.439><c> have</c><00:04:09.760><c> one</c>

00:04:10.149 --> 00:04:10.159 align:start position:0%
to one graph right now we have one
 

00:04:10.159 --> 00:04:11.589 align:start position:0%
to one graph right now we have one
connected<00:04:10.959><c> graph</c>

00:04:11.589 --> 00:04:11.599 align:start position:0%
connected graph
 

00:04:11.599 --> 00:04:13.429 align:start position:0%
connected graph
and<00:04:11.760><c> you</c><00:04:11.920><c> want</c><00:04:12.080><c> to</c><00:04:12.239><c> know</c><00:04:12.480><c> something</c><00:04:12.879><c> about</c><00:04:13.280><c> a</c>

00:04:13.429 --> 00:04:13.439 align:start position:0%
and you want to know something about a
 

00:04:13.439 --> 00:04:14.630 align:start position:0%
and you want to know something about a
connected<00:04:14.080><c> graph</c>

00:04:14.630 --> 00:04:14.640 align:start position:0%
connected graph
 

00:04:14.640 --> 00:04:17.749 align:start position:0%
connected graph
if<00:04:14.879><c> you</c><00:04:15.200><c> add</c><00:04:15.840><c> a</c><00:04:16.160><c> new</c><00:04:16.639><c> edge</c><00:04:16.959><c> to</c><00:04:17.120><c> this</c><00:04:17.280><c> connected</c>

00:04:17.749 --> 00:04:17.759 align:start position:0%
if you add a new edge to this connected
 

00:04:17.759 --> 00:04:18.229 align:start position:0%
if you add a new edge to this connected
graph

00:04:18.229 --> 00:04:18.239 align:start position:0%
graph
 

00:04:18.239 --> 00:04:20.789 align:start position:0%
graph
you<00:04:18.560><c> are</c><00:04:18.639><c> going</c><00:04:18.799><c> to</c><00:04:18.959><c> create</c><00:04:19.440><c> a</c><00:04:19.680><c> cycle</c><00:04:20.400><c> so</c><00:04:20.639><c> for</c>

00:04:20.789 --> 00:04:20.799 align:start position:0%
you are going to create a cycle so for
 

00:04:20.799 --> 00:04:21.749 align:start position:0%
you are going to create a cycle so for
example<00:04:21.120><c> in</c><00:04:21.199><c> this</c><00:04:21.359><c> case</c>

00:04:21.749 --> 00:04:21.759 align:start position:0%
example in this case
 

00:04:21.759 --> 00:04:23.909 align:start position:0%
example in this case
we<00:04:21.919><c> don't</c><00:04:22.160><c> even</c><00:04:22.320><c> have</c><00:04:22.639><c> any</c><00:04:22.880><c> more</c><00:04:23.360><c> unique</c>

00:04:23.909 --> 00:04:23.919 align:start position:0%
we don't even have any more unique
 

00:04:23.919 --> 00:04:25.830 align:start position:0%
we don't even have any more unique
possible<00:04:24.479><c> edges</c><00:04:24.800><c> we</c><00:04:24.960><c> could</c><00:04:25.199><c> add</c><00:04:25.440><c> other</c><00:04:25.680><c> than</c>

00:04:25.830 --> 00:04:25.840 align:start position:0%
possible edges we could add other than
 

00:04:25.840 --> 00:04:26.710 align:start position:0%
possible edges we could add other than
for<00:04:26.080><c> example</c><00:04:26.479><c> a</c>

00:04:26.710 --> 00:04:26.720 align:start position:0%
for example a
 

00:04:26.720 --> 00:04:29.510 align:start position:0%
for example a
self<00:04:27.120><c> loop</c><00:04:27.520><c> on</c><00:04:27.759><c> two</c><00:04:28.080><c> or</c><00:04:28.240><c> a</c><00:04:28.400><c> self</c><00:04:28.720><c> loop</c><00:04:29.040><c> on</c><00:04:29.199><c> one</c>

00:04:29.510 --> 00:04:29.520 align:start position:0%
self loop on two or a self loop on one
 

00:04:29.520 --> 00:04:30.550 align:start position:0%
self loop on two or a self loop on one
or<00:04:29.759><c> just</c><00:04:30.000><c> adding</c>

00:04:30.550 --> 00:04:30.560 align:start position:0%
or just adding
 

00:04:30.560 --> 00:04:32.390 align:start position:0%
or just adding
another<00:04:31.199><c> edge</c><00:04:31.520><c> right</c><00:04:31.680><c> but</c><00:04:31.840><c> we</c><00:04:31.919><c> know</c><00:04:32.080><c> that</c><00:04:32.240><c> the</c>

00:04:32.390 --> 00:04:32.400 align:start position:0%
another edge right but we know that the
 

00:04:32.400 --> 00:04:34.070 align:start position:0%
another edge right but we know that the
edges<00:04:32.720><c> are</c><00:04:32.800><c> undirected</c><00:04:33.360><c> basically</c><00:04:33.759><c> what</c><00:04:33.919><c> i'm</c>

00:04:34.070 --> 00:04:34.080 align:start position:0%
edges are undirected basically what i'm
 

00:04:34.080 --> 00:04:34.790 align:start position:0%
edges are undirected basically what i'm
saying<00:04:34.400><c> is</c>

00:04:34.790 --> 00:04:34.800 align:start position:0%
saying is
 

00:04:34.800 --> 00:04:37.510 align:start position:0%
saying is
if<00:04:34.960><c> we</c><00:04:35.360><c> keep</c><00:04:35.680><c> adding</c><00:04:36.080><c> edges</c><00:04:36.479><c> to</c><00:04:36.639><c> a</c><00:04:36.800><c> graph</c><00:04:37.280><c> that</c>

00:04:37.510 --> 00:04:37.520 align:start position:0%
if we keep adding edges to a graph that
 

00:04:37.520 --> 00:04:39.749 align:start position:0%
if we keep adding edges to a graph that
is<00:04:37.840><c> already</c><00:04:38.320><c> a</c><00:04:38.479><c> connected</c><00:04:39.040><c> graph</c>

00:04:39.749 --> 00:04:39.759 align:start position:0%
is already a connected graph
 

00:04:39.759 --> 00:04:41.590 align:start position:0%
is already a connected graph
then<00:04:40.000><c> we're</c><00:04:40.240><c> creating</c><00:04:40.720><c> a</c><00:04:40.880><c> cycle</c><00:04:41.280><c> let's</c><00:04:41.440><c> look</c>

00:04:41.590 --> 00:04:41.600 align:start position:0%
then we're creating a cycle let's look
 

00:04:41.600 --> 00:04:43.270 align:start position:0%
then we're creating a cycle let's look
at<00:04:41.680><c> a</c><00:04:41.840><c> couple</c><00:04:42.080><c> more</c><00:04:42.320><c> examples</c>

00:04:43.270 --> 00:04:43.280 align:start position:0%
at a couple more examples
 

00:04:43.280 --> 00:04:46.710 align:start position:0%
at a couple more examples
so<00:04:43.520><c> now</c><00:04:43.759><c> we</c><00:04:43.919><c> have</c><00:04:44.320><c> four</c><00:04:44.639><c> nodes</c><00:04:45.199><c> if</c><00:04:45.440><c> i</c><00:04:45.759><c> add</c><00:04:46.240><c> four</c>

00:04:46.710 --> 00:04:46.720 align:start position:0%
so now we have four nodes if i add four
 

00:04:46.720 --> 00:04:49.110 align:start position:0%
so now we have four nodes if i add four
edges<00:04:47.120><c> to</c><00:04:47.280><c> this</c><00:04:47.440><c> graph</c><00:04:47.759><c> that</c><00:04:47.919><c> are</c><00:04:48.160><c> all</c><00:04:48.400><c> unique</c>

00:04:49.110 --> 00:04:49.120 align:start position:0%
edges to this graph that are all unique
 

00:04:49.120 --> 00:04:51.510 align:start position:0%
edges to this graph that are all unique
edges<00:04:49.680><c> we</c><00:04:49.919><c> are</c><00:04:50.080><c> gonna</c><00:04:50.400><c> end</c><00:04:50.720><c> up</c><00:04:50.800><c> with</c><00:04:50.960><c> a</c><00:04:51.120><c> cycle</c>

00:04:51.510 --> 00:04:51.520 align:start position:0%
edges we are gonna end up with a cycle
 

00:04:51.520 --> 00:04:52.870 align:start position:0%
edges we are gonna end up with a cycle
it's<00:04:51.759><c> impossible</c><00:04:52.479><c> to</c>

00:04:52.870 --> 00:04:52.880 align:start position:0%
it's impossible to
 

00:04:52.880 --> 00:04:55.430 align:start position:0%
it's impossible to
not<00:04:53.199><c> end</c><00:04:53.440><c> up</c><00:04:53.600><c> with</c><00:04:53.759><c> a</c><00:04:53.840><c> cycle</c><00:04:54.240><c> if</c><00:04:54.400><c> we</c><00:04:54.560><c> add</c><00:04:54.960><c> four</c>

00:04:55.430 --> 00:04:55.440 align:start position:0%
not end up with a cycle if we add four
 

00:04:55.440 --> 00:04:57.510 align:start position:0%
not end up with a cycle if we add four
unique<00:04:55.919><c> edges</c><00:04:56.320><c> to</c><00:04:56.479><c> this</c><00:04:56.639><c> graph</c><00:04:57.040><c> let</c><00:04:57.199><c> me</c><00:04:57.360><c> show</c>

00:04:57.510 --> 00:04:57.520 align:start position:0%
unique edges to this graph let me show
 

00:04:57.520 --> 00:04:58.310 align:start position:0%
unique edges to this graph let me show
you<00:04:57.759><c> why</c>

00:04:58.310 --> 00:04:58.320 align:start position:0%
you why
 

00:04:58.320 --> 00:05:01.110 align:start position:0%
you why
let's<00:04:58.560><c> say</c><00:04:58.720><c> we</c><00:04:58.960><c> added</c><00:04:59.360><c> one</c><00:04:59.680><c> edge</c><00:05:00.000><c> here</c><00:05:00.800><c> then</c><00:05:00.960><c> we</c>

00:05:01.110 --> 00:05:01.120 align:start position:0%
let's say we added one edge here then we
 

00:05:01.120 --> 00:05:01.749 align:start position:0%
let's say we added one edge here then we
could<00:05:01.280><c> add</c>

00:05:01.749 --> 00:05:01.759 align:start position:0%
could add
 

00:05:01.759 --> 00:05:03.909 align:start position:0%
could add
another<00:05:02.240><c> edge</c><00:05:02.720><c> here</c><00:05:03.120><c> right</c><00:05:03.520><c> and</c><00:05:03.600><c> then</c><00:05:03.759><c> we</c>

00:05:03.909 --> 00:05:03.919 align:start position:0%
another edge here right and then we
 

00:05:03.919 --> 00:05:05.510 align:start position:0%
another edge here right and then we
could<00:05:04.080><c> add</c><00:05:04.479><c> another</c><00:05:04.960><c> edge</c>

00:05:05.510 --> 00:05:05.520 align:start position:0%
could add another edge
 

00:05:05.520 --> 00:05:07.510 align:start position:0%
could add another edge
here<00:05:06.080><c> and</c><00:05:06.160><c> then</c><00:05:06.320><c> the</c><00:05:06.560><c> fourth</c><00:05:06.880><c> edge</c><00:05:07.199><c> we</c><00:05:07.280><c> could</c>

00:05:07.510 --> 00:05:07.520 align:start position:0%
here and then the fourth edge we could
 

00:05:07.520 --> 00:05:08.629 align:start position:0%
here and then the fourth edge we could
add<00:05:07.759><c> would</c><00:05:07.919><c> be</c><00:05:08.080><c> here</c>

00:05:08.629 --> 00:05:08.639 align:start position:0%
add would be here
 

00:05:08.639 --> 00:05:10.550 align:start position:0%
add would be here
this<00:05:08.880><c> way</c><00:05:09.039><c> we</c><00:05:09.280><c> end</c><00:05:09.440><c> up</c><00:05:09.600><c> with</c><00:05:09.680><c> a</c><00:05:09.840><c> cycle</c><00:05:10.160><c> but</c><00:05:10.320><c> hold</c>

00:05:10.550 --> 00:05:10.560 align:start position:0%
this way we end up with a cycle but hold
 

00:05:10.560 --> 00:05:12.230 align:start position:0%
this way we end up with a cycle but hold
on<00:05:10.720><c> maybe</c><00:05:10.960><c> there</c><00:05:11.120><c> are</c><00:05:11.280><c> other</c><00:05:11.520><c> possibilities</c>

00:05:12.230 --> 00:05:12.240 align:start position:0%
on maybe there are other possibilities
 

00:05:12.240 --> 00:05:12.629 align:start position:0%
on maybe there are other possibilities
right

00:05:12.629 --> 00:05:12.639 align:start position:0%
right
 

00:05:12.639 --> 00:05:15.749 align:start position:0%
right
well<00:05:13.039><c> maybe</c><00:05:14.080><c> instead</c><00:05:14.320><c> of</c><00:05:14.639><c> connecting</c><00:05:15.120><c> these</c><00:05:15.600><c> i</c>

00:05:15.749 --> 00:05:15.759 align:start position:0%
well maybe instead of connecting these i
 

00:05:15.759 --> 00:05:17.029 align:start position:0%
well maybe instead of connecting these i
can<00:05:16.000><c> also</c><00:05:16.320><c> connect</c>

00:05:17.029 --> 00:05:17.039 align:start position:0%
can also connect
 

00:05:17.039 --> 00:05:19.189 align:start position:0%
can also connect
these<00:05:17.520><c> oh</c><00:05:17.919><c> that</c><00:05:18.160><c> ends</c><00:05:18.320><c> up</c><00:05:18.400><c> with</c><00:05:18.560><c> the</c><00:05:18.639><c> cycle</c><00:05:18.960><c> too</c>

00:05:19.189 --> 00:05:19.199 align:start position:0%
these oh that ends up with the cycle too
 

00:05:19.199 --> 00:05:20.469 align:start position:0%
these oh that ends up with the cycle too
right<00:05:19.440><c> notice</c><00:05:19.840><c> that</c>

00:05:20.469 --> 00:05:20.479 align:start position:0%
right notice that
 

00:05:20.479 --> 00:05:22.710 align:start position:0%
right notice that
maybe<00:05:21.199><c> we</c><00:05:21.440><c> just</c><00:05:21.600><c> don't</c><00:05:21.840><c> connect</c><00:05:22.320><c> this</c><00:05:22.479><c> with</c>

00:05:22.710 --> 00:05:22.720 align:start position:0%
maybe we just don't connect this with
 

00:05:22.720 --> 00:05:24.310 align:start position:0%
maybe we just don't connect this with
anything<00:05:23.039><c> else</c><00:05:23.199><c> maybe</c><00:05:23.440><c> we</c><00:05:23.600><c> add</c><00:05:23.759><c> an</c><00:05:23.919><c> edge</c><00:05:24.080><c> here</c>

00:05:24.310 --> 00:05:24.320 align:start position:0%
anything else maybe we add an edge here
 

00:05:24.320 --> 00:05:25.909 align:start position:0%
anything else maybe we add an edge here
that<00:05:24.560><c> ends</c><00:05:24.800><c> up</c><00:05:24.880><c> with</c><00:05:25.039><c> a</c><00:05:25.120><c> cycle</c>

00:05:25.909 --> 00:05:25.919 align:start position:0%
that ends up with a cycle
 

00:05:25.919 --> 00:05:27.909 align:start position:0%
that ends up with a cycle
if<00:05:26.080><c> i</c><00:05:26.320><c> add</c><00:05:26.479><c> an</c><00:05:26.639><c> edge</c><00:05:26.880><c> over</c><00:05:27.039><c> here</c><00:05:27.360><c> that</c><00:05:27.600><c> ends</c><00:05:27.840><c> up</c>

00:05:27.909 --> 00:05:27.919 align:start position:0%
if i add an edge over here that ends up
 

00:05:27.919 --> 00:05:30.070 align:start position:0%
if i add an edge over here that ends up
with<00:05:28.080><c> a</c><00:05:28.160><c> cycle</c><00:05:28.400><c> no</c><00:05:28.560><c> matter</c><00:05:28.880><c> how</c><00:05:29.199><c> we</c><00:05:29.440><c> do</c><00:05:29.680><c> it</c><00:05:29.840><c> we</c>

00:05:30.070 --> 00:05:30.080 align:start position:0%
with a cycle no matter how we do it we
 

00:05:30.080 --> 00:05:31.670 align:start position:0%
with a cycle no matter how we do it we
end<00:05:30.240><c> up</c><00:05:30.320><c> with</c><00:05:30.560><c> a</c><00:05:30.639><c> cycle</c>

00:05:31.670 --> 00:05:31.680 align:start position:0%
end up with a cycle
 

00:05:31.680 --> 00:05:33.670 align:start position:0%
end up with a cycle
right<00:05:31.919><c> maybe</c><00:05:32.240><c> i</c><00:05:32.400><c> start</c><00:05:32.639><c> out</c><00:05:32.800><c> like</c><00:05:33.039><c> this</c><00:05:33.360><c> i</c><00:05:33.520><c> try</c>

00:05:33.670 --> 00:05:33.680 align:start position:0%
right maybe i start out like this i try
 

00:05:33.680 --> 00:05:35.590 align:start position:0%
right maybe i start out like this i try
to<00:05:33.759><c> be</c><00:05:34.000><c> clever</c><00:05:34.639><c> now</c><00:05:34.880><c> what</c><00:05:35.120><c> we</c>

00:05:35.590 --> 00:05:35.600 align:start position:0%
to be clever now what we
 

00:05:35.600 --> 00:05:37.189 align:start position:0%
to be clever now what we
still<00:05:35.840><c> will</c><00:05:36.000><c> end</c><00:05:36.240><c> up</c><00:05:36.320><c> with</c><00:05:36.479><c> a</c><00:05:36.560><c> cycle</c><00:05:37.039><c> and</c>

00:05:37.189 --> 00:05:37.199 align:start position:0%
still will end up with a cycle and
 

00:05:37.199 --> 00:05:39.270 align:start position:0%
still will end up with a cycle and
that's<00:05:37.440><c> going</c><00:05:37.600><c> to</c><00:05:37.680><c> be</c><00:05:37.919><c> true</c><00:05:38.400><c> no</c><00:05:38.639><c> matter</c><00:05:39.039><c> what</c>

00:05:39.270 --> 00:05:39.280 align:start position:0%
that's going to be true no matter what
 

00:05:39.280 --> 00:05:39.909 align:start position:0%
that's going to be true no matter what
if<00:05:39.440><c> we</c><00:05:39.600><c> have</c>

00:05:39.909 --> 00:05:39.919 align:start position:0%
if we have
 

00:05:39.919 --> 00:05:42.550 align:start position:0%
if we have
n<00:05:40.160><c> nodes</c><00:05:40.639><c> and</c><00:05:40.960><c> n</c><00:05:41.280><c> unique</c><00:05:41.759><c> edges</c><00:05:42.240><c> we're</c><00:05:42.400><c> going</c>

00:05:42.550 --> 00:05:42.560 align:start position:0%
n nodes and n unique edges we're going
 

00:05:42.560 --> 00:05:43.830 align:start position:0%
n nodes and n unique edges we're going
to<00:05:42.800><c> end</c><00:05:42.960><c> up</c><00:05:43.120><c> with</c><00:05:43.280><c> a</c><00:05:43.360><c> cycle</c>

00:05:43.830 --> 00:05:43.840 align:start position:0%
to end up with a cycle
 

00:05:43.840 --> 00:05:46.469 align:start position:0%
to end up with a cycle
no<00:05:44.160><c> matter</c><00:05:44.560><c> what</c><00:05:45.039><c> but</c><00:05:45.199><c> my</c><00:05:45.520><c> question</c><00:05:45.919><c> to</c><00:05:46.080><c> you</c><00:05:46.320><c> is</c>

00:05:46.469 --> 00:05:46.479 align:start position:0%
no matter what but my question to you is
 

00:05:46.479 --> 00:05:47.110 align:start position:0%
no matter what but my question to you is
how<00:05:46.639><c> do</c><00:05:46.800><c> you</c>

00:05:47.110 --> 00:05:47.120 align:start position:0%
how do you
 

00:05:47.120 --> 00:05:49.189 align:start position:0%
how do you
know<00:05:47.360><c> that</c><00:05:47.680><c> adding</c><00:05:48.160><c> this</c><00:05:48.560><c> edge</c><00:05:48.880><c> right</c><00:05:49.039><c> let's</c>

00:05:49.189 --> 00:05:49.199 align:start position:0%
know that adding this edge right let's
 

00:05:49.199 --> 00:05:50.950 align:start position:0%
know that adding this edge right let's
say<00:05:49.360><c> we</c><00:05:49.520><c> already</c><00:05:49.840><c> have</c><00:05:50.080><c> these</c><00:05:50.320><c> three</c><00:05:50.639><c> edges</c>

00:05:50.950 --> 00:05:50.960 align:start position:0%
say we already have these three edges
 

00:05:50.960 --> 00:05:51.990 align:start position:0%
say we already have these three edges
how<00:05:51.120><c> do</c><00:05:51.199><c> you</c><00:05:51.440><c> know</c><00:05:51.680><c> that</c>

00:05:51.990 --> 00:05:52.000 align:start position:0%
how do you know that
 

00:05:52.000 --> 00:05:54.629 align:start position:0%
how do you know that
adding<00:05:52.479><c> this</c><00:05:52.800><c> edge</c><00:05:53.120><c> is</c><00:05:53.280><c> creating</c><00:05:53.840><c> a</c><00:05:54.000><c> cycle</c><00:05:54.400><c> for</c>

00:05:54.629 --> 00:05:54.639 align:start position:0%
adding this edge is creating a cycle for
 

00:05:54.639 --> 00:05:56.230 align:start position:0%
adding this edge is creating a cycle for
us<00:05:54.960><c> it's</c><00:05:55.199><c> because</c>

00:05:56.230 --> 00:05:56.240 align:start position:0%
us it's because
 

00:05:56.240 --> 00:05:59.590 align:start position:0%
us it's because
one<00:05:56.720><c> is</c><00:05:57.039><c> already</c><00:05:57.680><c> connected</c><00:05:58.720><c> with</c><00:05:59.120><c> three</c>

00:05:59.590 --> 00:05:59.600 align:start position:0%
one is already connected with three
 

00:05:59.600 --> 00:06:02.629 align:start position:0%
one is already connected with three
three<00:05:59.919><c> and</c><00:06:00.080><c> one</c><00:06:00.479><c> are</c><00:06:00.800><c> already</c><00:06:01.520><c> connected</c><00:06:02.400><c> see</c>

00:06:02.629 --> 00:06:02.639 align:start position:0%
three and one are already connected see
 

00:06:02.639 --> 00:06:03.029 align:start position:0%
three and one are already connected see
how

00:06:03.029 --> 00:06:03.039 align:start position:0%
how
 

00:06:03.039 --> 00:06:06.309 align:start position:0%
how
all<00:06:03.600><c> four</c><00:06:04.000><c> of</c><00:06:04.240><c> these</c><00:06:04.720><c> nodes</c><00:06:05.199><c> are</c><00:06:05.600><c> already</c>

00:06:06.309 --> 00:06:06.319 align:start position:0%
all four of these nodes are already
 

00:06:06.319 --> 00:06:07.189 align:start position:0%
all four of these nodes are already
connected

00:06:07.189 --> 00:06:07.199 align:start position:0%
connected
 

00:06:07.199 --> 00:06:10.550 align:start position:0%
connected
so<00:06:07.440><c> when</c><00:06:07.680><c> i</c><00:06:08.000><c> add</c><00:06:08.720><c> this</c><00:06:09.120><c> edge</c><00:06:09.759><c> i</c><00:06:09.919><c> already</c><00:06:10.319><c> knew</c>

00:06:10.550 --> 00:06:10.560 align:start position:0%
so when i add this edge i already knew
 

00:06:10.560 --> 00:06:11.670 align:start position:0%
so when i add this edge i already knew
there<00:06:10.720><c> was</c><00:06:10.880><c> a</c><00:06:10.960><c> path</c><00:06:11.280><c> from</c>

00:06:11.670 --> 00:06:11.680 align:start position:0%
there was a path from
 

00:06:11.680 --> 00:06:14.550 align:start position:0%
there was a path from
three<00:06:12.080><c> to</c><00:06:12.319><c> get</c><00:06:12.560><c> to</c><00:06:12.800><c> one</c><00:06:13.360><c> now</c><00:06:13.600><c> i'm</c><00:06:13.759><c> creating</c><00:06:14.240><c> a</c>

00:06:14.550 --> 00:06:14.560 align:start position:0%
three to get to one now i'm creating a
 

00:06:14.560 --> 00:06:15.430 align:start position:0%
three to get to one now i'm creating a
second<00:06:15.039><c> path</c>

00:06:15.430 --> 00:06:15.440 align:start position:0%
second path
 

00:06:15.440 --> 00:06:17.830 align:start position:0%
second path
from<00:06:15.840><c> three</c><00:06:16.080><c> to</c><00:06:16.240><c> get</c><00:06:16.479><c> to</c><00:06:16.639><c> one</c><00:06:17.199><c> notice</c><00:06:17.600><c> how</c>

00:06:17.830 --> 00:06:17.840 align:start position:0%
from three to get to one notice how
 

00:06:17.840 --> 00:06:20.390 align:start position:0%
from three to get to one notice how
that's<00:06:18.319><c> what's</c><00:06:18.560><c> creating</c><00:06:19.039><c> the</c><00:06:19.280><c> cycle</c>

00:06:20.390 --> 00:06:20.400 align:start position:0%
that's what's creating the cycle
 

00:06:20.400 --> 00:06:22.870 align:start position:0%
that's what's creating the cycle
this<00:06:20.720><c> is</c><00:06:20.960><c> the</c><00:06:21.120><c> reason</c><00:06:21.680><c> why</c><00:06:21.919><c> we're</c><00:06:22.240><c> allowed</c><00:06:22.639><c> to</c>

00:06:22.870 --> 00:06:22.880 align:start position:0%
this is the reason why we're allowed to
 

00:06:22.880 --> 00:06:25.189 align:start position:0%
this is the reason why we're allowed to
use<00:06:23.199><c> the</c><00:06:23.520><c> union</c><00:06:24.000><c> find</c><00:06:24.479><c> algorithm</c>

00:06:25.189 --> 00:06:25.199 align:start position:0%
use the union find algorithm
 

00:06:25.199 --> 00:06:27.110 align:start position:0%
use the union find algorithm
because<00:06:25.440><c> we're</c><00:06:25.680><c> looking</c><00:06:26.000><c> at</c><00:06:26.160><c> the</c><00:06:26.400><c> connected</c>

00:06:27.110 --> 00:06:27.120 align:start position:0%
because we're looking at the connected
 

00:06:27.120 --> 00:06:29.189 align:start position:0%
because we're looking at the connected
graphs<00:06:27.759><c> and</c><00:06:28.000><c> once</c><00:06:28.319><c> we</c><00:06:28.639><c> add</c>

00:06:29.189 --> 00:06:29.199 align:start position:0%
graphs and once we add
 

00:06:29.199 --> 00:06:31.990 align:start position:0%
graphs and once we add
the<00:06:29.600><c> once</c><00:06:29.919><c> we</c><00:06:30.160><c> notice</c><00:06:30.560><c> we</c><00:06:30.880><c> found</c><00:06:31.199><c> an</c><00:06:31.440><c> edge</c><00:06:31.840><c> in</c>

00:06:31.990 --> 00:06:32.000 align:start position:0%
the once we notice we found an edge in
 

00:06:32.000 --> 00:06:33.029 align:start position:0%
the once we notice we found an edge in
our<00:06:32.240><c> input</c><00:06:32.560><c> array</c>

00:06:33.029 --> 00:06:33.039 align:start position:0%
our input array
 

00:06:33.039 --> 00:06:35.430 align:start position:0%
our input array
that<00:06:33.360><c> caused</c><00:06:33.840><c> us</c><00:06:34.080><c> to</c><00:06:34.240><c> take</c><00:06:34.479><c> a</c><00:06:34.639><c> connected</c><00:06:35.199><c> graph</c>

00:06:35.430 --> 00:06:35.440 align:start position:0%
that caused us to take a connected graph
 

00:06:35.440 --> 00:06:36.070 align:start position:0%
that caused us to take a connected graph
and<00:06:35.680><c> add</c>

00:06:36.070 --> 00:06:36.080 align:start position:0%
and add
 

00:06:36.080 --> 00:06:39.029 align:start position:0%
and add
another<00:06:36.960><c> redundant</c><00:06:37.919><c> connection</c><00:06:38.639><c> that's</c><00:06:38.880><c> why</c>

00:06:39.029 --> 00:06:39.039 align:start position:0%
another redundant connection that's why
 

00:06:39.039 --> 00:06:40.790 align:start position:0%
another redundant connection that's why
this<00:06:39.280><c> is</c><00:06:39.360><c> called</c><00:06:39.600><c> redundant</c><00:06:40.160><c> connections</c><00:06:40.560><c> we</c>

00:06:40.790 --> 00:06:40.800 align:start position:0%
this is called redundant connections we
 

00:06:40.800 --> 00:06:42.550 align:start position:0%
this is called redundant connections we
added<00:06:41.120><c> another</c><00:06:41.520><c> connection</c><00:06:42.000><c> that</c><00:06:42.080><c> was</c><00:06:42.240><c> not</c>

00:06:42.550 --> 00:06:42.560 align:start position:0%
added another connection that was not
 

00:06:42.560 --> 00:06:43.189 align:start position:0%
added another connection that was not
needed

00:06:43.189 --> 00:06:43.199 align:start position:0%
needed
 

00:06:43.199 --> 00:06:45.350 align:start position:0%
needed
three<00:06:43.520><c> could</c><00:06:43.680><c> already</c><00:06:44.080><c> get</c><00:06:44.240><c> to</c><00:06:44.479><c> one</c><00:06:44.960><c> why</c>

00:06:45.350 --> 00:06:45.360 align:start position:0%
three could already get to one why
 

00:06:45.360 --> 00:06:46.790 align:start position:0%
three could already get to one why
bother<00:06:45.759><c> adding</c><00:06:46.080><c> this</c><00:06:46.319><c> edge</c>

00:06:46.790 --> 00:06:46.800 align:start position:0%
bother adding this edge
 

00:06:46.800 --> 00:06:49.830 align:start position:0%
bother adding this edge
that<00:06:47.120><c> created</c><00:06:47.520><c> a</c><00:06:47.680><c> loop</c><00:06:48.240><c> so</c><00:06:48.400><c> the</c><00:06:48.720><c> last</c><00:06:49.280><c> edge</c>

00:06:49.830 --> 00:06:49.840 align:start position:0%
that created a loop so the last edge
 

00:06:49.840 --> 00:06:52.790 align:start position:0%
that created a loop so the last edge
so<00:06:50.000><c> the</c><00:06:50.319><c> first</c><00:06:50.960><c> edge</c><00:06:51.440><c> in</c><00:06:51.680><c> our</c><00:06:52.000><c> input</c><00:06:52.319><c> array</c>

00:06:52.790 --> 00:06:52.800 align:start position:0%
so the first edge in our input array
 

00:06:52.800 --> 00:06:53.350 align:start position:0%
so the first edge in our input array
edges

00:06:53.350 --> 00:06:53.360 align:start position:0%
edges
 

00:06:53.360 --> 00:06:55.670 align:start position:0%
edges
that<00:06:53.680><c> causes</c><00:06:54.160><c> a</c><00:06:54.319><c> redundant</c><00:06:54.960><c> connection</c><00:06:55.520><c> is</c>

00:06:55.670 --> 00:06:55.680 align:start position:0%
that causes a redundant connection is
 

00:06:55.680 --> 00:06:57.749 align:start position:0%
that causes a redundant connection is
going<00:06:55.919><c> to</c><00:06:56.160><c> be</c><00:06:56.400><c> the</c><00:06:56.639><c> edge</c><00:06:56.880><c> that</c><00:06:57.039><c> we</c><00:06:57.199><c> return</c>

00:06:57.749 --> 00:06:57.759 align:start position:0%
going to be the edge that we return
 

00:06:57.759 --> 00:06:59.270 align:start position:0%
going to be the edge that we return
so<00:06:57.919><c> the</c><00:06:58.080><c> solution</c><00:06:58.479><c> we're</c><00:06:58.639><c> going</c><00:06:58.720><c> to</c><00:06:58.800><c> be</c><00:06:58.960><c> doing</c>

00:06:59.270 --> 00:06:59.280 align:start position:0%
so the solution we're going to be doing
 

00:06:59.280 --> 00:07:01.029 align:start position:0%
so the solution we're going to be doing
is<00:06:59.520><c> union</c><00:06:59.919><c> find</c><00:07:00.319><c> and</c><00:07:00.479><c> we</c><00:07:00.639><c> are</c><00:07:00.800><c> going</c><00:07:00.880><c> to</c><00:07:00.960><c> be</c>

00:07:01.029 --> 00:07:01.039 align:start position:0%
is union find and we are going to be
 

00:07:01.039 --> 00:07:02.230 align:start position:0%
is union find and we are going to be
doing<00:07:01.280><c> union</c><00:07:01.680><c> find</c><00:07:01.919><c> by</c>

00:07:02.230 --> 00:07:02.240 align:start position:0%
doing union find by
 

00:07:02.240 --> 00:07:04.070 align:start position:0%
doing union find by
rank<00:07:02.560><c> which</c><00:07:02.800><c> is</c><00:07:02.960><c> the</c><00:07:03.120><c> most</c><00:07:03.440><c> efficient</c><00:07:03.759><c> way</c><00:07:03.919><c> to</c>

00:07:04.070 --> 00:07:04.080 align:start position:0%
rank which is the most efficient way to
 

00:07:04.080 --> 00:07:05.909 align:start position:0%
rank which is the most efficient way to
do<00:07:04.319><c> it</c><00:07:04.639><c> so</c><00:07:04.800><c> what</c><00:07:04.960><c> we're</c><00:07:05.199><c> going</c><00:07:05.280><c> to</c><00:07:05.360><c> be</c><00:07:05.520><c> doing</c>

00:07:05.909 --> 00:07:05.919 align:start position:0%
do it so what we're going to be doing
 

00:07:05.919 --> 00:07:08.390 align:start position:0%
do it so what we're going to be doing
is<00:07:06.160><c> iterating</c><00:07:06.720><c> through</c><00:07:07.039><c> every</c><00:07:07.440><c> single</c><00:07:07.919><c> edge</c>

00:07:08.390 --> 00:07:08.400 align:start position:0%
is iterating through every single edge
 

00:07:08.400 --> 00:07:09.350 align:start position:0%
is iterating through every single edge
for<00:07:08.560><c> example</c>

00:07:09.350 --> 00:07:09.360 align:start position:0%
for example
 

00:07:09.360 --> 00:07:11.430 align:start position:0%
for example
this<00:07:09.599><c> one</c><00:07:09.840><c> one</c><00:07:10.080><c> two</c><00:07:10.240><c> we</c><00:07:10.400><c> know</c><00:07:10.639><c> that</c><00:07:10.800><c> we</c><00:07:11.039><c> start</c>

00:07:11.430 --> 00:07:11.440 align:start position:0%
this one one two we know that we start
 

00:07:11.440 --> 00:07:13.670 align:start position:0%
this one one two we know that we start
out<00:07:11.680><c> with</c><00:07:12.080><c> three</c><00:07:12.560><c> nodes</c><00:07:12.960><c> right</c><00:07:13.199><c> because</c><00:07:13.520><c> we're</c>

00:07:13.670 --> 00:07:13.680 align:start position:0%
out with three nodes right because we're
 

00:07:13.680 --> 00:07:15.589 align:start position:0%
out with three nodes right because we're
given<00:07:14.000><c> three</c><00:07:14.319><c> edges</c><00:07:14.639><c> therefore</c><00:07:15.039><c> n</c><00:07:15.280><c> equals</c>

00:07:15.589 --> 00:07:15.599 align:start position:0%
given three edges therefore n equals
 

00:07:15.599 --> 00:07:17.350 align:start position:0%
given three edges therefore n equals
three<00:07:15.840><c> we</c><00:07:16.000><c> have</c><00:07:16.160><c> three</c><00:07:16.400><c> nodes</c><00:07:16.800><c> each</c><00:07:17.039><c> node</c><00:07:17.280><c> is</c>

00:07:17.350 --> 00:07:17.360 align:start position:0%
three we have three nodes each node is
 

00:07:17.360 --> 00:07:18.309 align:start position:0%
three we have three nodes each node is
numbered<00:07:17.680><c> from</c><00:07:17.919><c> one</c>

00:07:18.309 --> 00:07:18.319 align:start position:0%
numbered from one
 

00:07:18.319 --> 00:07:20.550 align:start position:0%
numbered from one
two<00:07:18.720><c> to</c><00:07:18.960><c> three</c><00:07:19.280><c> right</c><00:07:19.680><c> so</c><00:07:19.840><c> we</c><00:07:20.000><c> start</c><00:07:20.240><c> out</c><00:07:20.319><c> with</c>

00:07:20.550 --> 00:07:20.560 align:start position:0%
two to three right so we start out with
 

00:07:20.560 --> 00:07:23.189 align:start position:0%
two to three right so we start out with
three<00:07:21.280><c> nodes</c><00:07:21.680><c> that</c><00:07:21.840><c> are</c><00:07:22.080><c> not</c><00:07:22.400><c> connected</c><00:07:22.960><c> with</c>

00:07:23.189 --> 00:07:23.199 align:start position:0%
three nodes that are not connected with
 

00:07:23.199 --> 00:07:24.390 align:start position:0%
three nodes that are not connected with
each<00:07:23.440><c> other</c><00:07:23.759><c> right</c>

00:07:24.390 --> 00:07:24.400 align:start position:0%
each other right
 

00:07:24.400 --> 00:07:27.029 align:start position:0%
each other right
and<00:07:24.560><c> the</c><00:07:24.880><c> rank</c><00:07:25.360><c> of</c><00:07:25.599><c> each</c><00:07:25.840><c> of</c><00:07:26.000><c> those</c><00:07:26.560><c> separate</c>

00:07:27.029 --> 00:07:27.039 align:start position:0%
and the rank of each of those separate
 

00:07:27.039 --> 00:07:29.510 align:start position:0%
and the rank of each of those separate
graphs<00:07:27.599><c> is</c><00:07:27.840><c> one</c><00:07:28.160><c> basically</c><00:07:28.639><c> the</c><00:07:28.880><c> size</c><00:07:29.280><c> of</c><00:07:29.360><c> the</c>

00:07:29.510 --> 00:07:29.520 align:start position:0%
graphs is one basically the size of the
 

00:07:29.520 --> 00:07:30.390 align:start position:0%
graphs is one basically the size of the
graph<00:07:29.919><c> right</c>

00:07:30.390 --> 00:07:30.400 align:start position:0%
graph right
 

00:07:30.400 --> 00:07:31.909 align:start position:0%
graph right
what<00:07:30.560><c> we're</c><00:07:30.800><c> gonna</c><00:07:30.960><c> be</c><00:07:31.120><c> doing</c><00:07:31.440><c> is</c><00:07:31.599><c> going</c>

00:07:31.909 --> 00:07:31.919 align:start position:0%
what we're gonna be doing is going
 

00:07:31.919 --> 00:07:34.230 align:start position:0%
what we're gonna be doing is going
through<00:07:32.240><c> each</c><00:07:32.560><c> edge</c><00:07:32.960><c> so</c><00:07:33.199><c> for</c><00:07:33.360><c> example</c><00:07:33.840><c> one</c>

00:07:34.230 --> 00:07:34.240 align:start position:0%
through each edge so for example one
 

00:07:34.240 --> 00:07:35.749 align:start position:0%
through each edge so for example one
two<00:07:34.720><c> that</c><00:07:34.960><c> means</c><00:07:35.199><c> we're</c><00:07:35.360><c> going</c><00:07:35.440><c> to</c><00:07:35.520><c> be</c>

00:07:35.749 --> 00:07:35.759 align:start position:0%
two that means we're going to be
 

00:07:35.759 --> 00:07:37.830 align:start position:0%
two that means we're going to be
connecting<00:07:36.800><c> one</c><00:07:37.199><c> and</c><00:07:37.440><c> two</c>

00:07:37.830 --> 00:07:37.840 align:start position:0%
connecting one and two
 

00:07:37.840 --> 00:07:40.070 align:start position:0%
connecting one and two
together<00:07:38.800><c> we're</c><00:07:38.960><c> connecting</c><00:07:39.520><c> them</c><00:07:39.759><c> in</c><00:07:39.840><c> the</c>

00:07:40.070 --> 00:07:40.080 align:start position:0%
together we're connecting them in the
 

00:07:40.080 --> 00:07:42.230 align:start position:0%
together we're connecting them in the
shape<00:07:40.479><c> of</c><00:07:40.639><c> a</c><00:07:40.800><c> tree</c><00:07:41.120><c> so</c><00:07:41.360><c> one</c><00:07:41.599><c> of</c><00:07:41.680><c> them</c><00:07:41.919><c> is</c><00:07:42.000><c> going</c>

00:07:42.230 --> 00:07:42.240 align:start position:0%
shape of a tree so one of them is going
 

00:07:42.240 --> 00:07:44.070 align:start position:0%
shape of a tree so one of them is going
to<00:07:42.319><c> be</c><00:07:42.479><c> the</c><00:07:42.800><c> parent</c><00:07:43.280><c> node</c><00:07:43.599><c> of</c><00:07:43.759><c> the</c>

00:07:44.070 --> 00:07:44.080 align:start position:0%
to be the parent node of the
 

00:07:44.080 --> 00:07:45.749 align:start position:0%
to be the parent node of the
other<00:07:44.560><c> and</c><00:07:44.879><c> we're</c><00:07:45.039><c> going</c><00:07:45.120><c> to</c><00:07:45.199><c> be</c><00:07:45.360><c> doing</c><00:07:45.520><c> that</c>

00:07:45.749 --> 00:07:45.759 align:start position:0%
other and we're going to be doing that
 

00:07:45.759 --> 00:07:47.670 align:start position:0%
other and we're going to be doing that
based<00:07:46.080><c> on</c><00:07:46.400><c> rank</c><00:07:46.639><c> so</c><00:07:46.879><c> for</c><00:07:47.039><c> example</c>

00:07:47.670 --> 00:07:47.680 align:start position:0%
based on rank so for example
 

00:07:47.680 --> 00:07:50.790 align:start position:0%
based on rank so for example
if<00:07:47.919><c> the</c><00:07:48.240><c> size</c><00:07:48.800><c> of</c><00:07:49.039><c> this</c><00:07:49.440><c> graph</c><00:07:50.080><c> was</c>

00:07:50.790 --> 00:07:50.800 align:start position:0%
if the size of this graph was
 

00:07:50.800 --> 00:07:52.469 align:start position:0%
if the size of this graph was
or<00:07:50.960><c> maybe</c><00:07:51.199><c> we</c><00:07:51.360><c> had</c><00:07:51.440><c> something</c><00:07:51.840><c> separate</c><00:07:52.319><c> right</c>

00:07:52.469 --> 00:07:52.479 align:start position:0%
or maybe we had something separate right
 

00:07:52.479 --> 00:07:54.950 align:start position:0%
or maybe we had something separate right
maybe<00:07:52.720><c> we</c><00:07:52.879><c> had</c><00:07:53.039><c> something</c><00:07:53.280><c> like</c><00:07:53.599><c> this</c>

00:07:54.950 --> 00:07:54.960 align:start position:0%
maybe we had something like this
 

00:07:54.960 --> 00:07:57.270 align:start position:0%
maybe we had something like this
if<00:07:55.120><c> we</c><00:07:55.280><c> had</c><00:07:55.599><c> one</c><00:07:55.840><c> graph</c><00:07:56.160><c> of</c><00:07:56.319><c> size</c><00:07:56.720><c> 2</c><00:07:57.120><c> and</c>

00:07:57.270 --> 00:07:57.280 align:start position:0%
if we had one graph of size 2 and
 

00:07:57.280 --> 00:07:57.990 align:start position:0%
if we had one graph of size 2 and
another<00:07:57.599><c> graph</c>

00:07:57.990 --> 00:07:58.000 align:start position:0%
another graph
 

00:07:58.000 --> 00:08:01.029 align:start position:0%
another graph
of<00:07:58.160><c> size</c><00:07:58.639><c> 1</c><00:07:59.360><c> then</c><00:07:59.599><c> we</c><00:07:59.759><c> would</c><00:08:00.000><c> want</c><00:08:00.160><c> to</c><00:08:00.400><c> add</c><00:08:00.720><c> the</c>

00:08:01.029 --> 00:08:01.039 align:start position:0%
of size 1 then we would want to add the
 

00:08:01.039 --> 00:08:02.230 align:start position:0%
of size 1 then we would want to add the
smaller<00:08:01.599><c> graph</c>

00:08:02.230 --> 00:08:02.240 align:start position:0%
smaller graph
 

00:08:02.240 --> 00:08:05.430 align:start position:0%
smaller graph
as<00:08:02.639><c> a</c><00:08:02.960><c> child</c><00:08:03.680><c> of</c><00:08:03.919><c> the</c><00:08:04.080><c> larger</c><00:08:04.560><c> graph</c>

00:08:05.430 --> 00:08:05.440 align:start position:0%
as a child of the larger graph
 

00:08:05.440 --> 00:08:07.270 align:start position:0%
as a child of the larger graph
but<00:08:05.680><c> in</c><00:08:05.759><c> this</c><00:08:06.000><c> case</c><00:08:06.319><c> we</c><00:08:06.479><c> know</c><00:08:06.639><c> that</c><00:08:06.800><c> both</c><00:08:07.120><c> of</c>

00:08:07.270 --> 00:08:07.280 align:start position:0%
but in this case we know that both of
 

00:08:07.280 --> 00:08:09.029 align:start position:0%
but in this case we know that both of
the<00:08:07.520><c> ranks</c><00:08:08.080><c> or</c><00:08:08.319><c> in</c><00:08:08.479><c> other</c><00:08:08.639><c> words</c>

00:08:09.029 --> 00:08:09.039 align:start position:0%
the ranks or in other words
 

00:08:09.039 --> 00:08:11.029 align:start position:0%
the ranks or in other words
size<00:08:09.680><c> is</c><00:08:09.840><c> the</c><00:08:10.080><c> same</c><00:08:10.400><c> of</c><00:08:10.479><c> both</c><00:08:10.720><c> of</c><00:08:10.800><c> these</c>

00:08:11.029 --> 00:08:11.039 align:start position:0%
size is the same of both of these
 

00:08:11.039 --> 00:08:12.550 align:start position:0%
size is the same of both of these
they're<00:08:11.199><c> both</c><00:08:11.599><c> one</c><00:08:11.840><c> so</c><00:08:12.000><c> it</c><00:08:12.160><c> doesn't</c><00:08:12.319><c> really</c>

00:08:12.550 --> 00:08:12.560 align:start position:0%
they're both one so it doesn't really
 

00:08:12.560 --> 00:08:13.430 align:start position:0%
they're both one so it doesn't really
matter<00:08:12.879><c> what</c><00:08:13.039><c> we</c><00:08:13.120><c> do</c>

00:08:13.430 --> 00:08:13.440 align:start position:0%
matter what we do
 

00:08:13.440 --> 00:08:16.469 align:start position:0%
matter what we do
let's<00:08:13.680><c> add</c><00:08:14.160><c> two</c><00:08:14.479><c> as</c><00:08:14.720><c> the</c><00:08:14.879><c> child</c><00:08:15.440><c> of</c><00:08:15.680><c> one</c><00:08:16.160><c> so</c>

00:08:16.469 --> 00:08:16.479 align:start position:0%
let's add two as the child of one so
 

00:08:16.479 --> 00:08:19.110 align:start position:0%
let's add two as the child of one so
since<00:08:16.800><c> i</c><00:08:17.039><c> added</c><00:08:17.599><c> so</c><00:08:17.840><c> since</c><00:08:18.240><c> now</c><00:08:18.560><c> one</c><00:08:18.879><c> has</c>

00:08:19.110 --> 00:08:19.120 align:start position:0%
since i added so since now one has
 

00:08:19.120 --> 00:08:20.950 align:start position:0%
since i added so since now one has
another<00:08:19.520><c> child</c><00:08:19.840><c> the</c><00:08:20.000><c> size</c><00:08:20.319><c> of</c><00:08:20.479><c> this</c><00:08:20.720><c> is</c>

00:08:20.950 --> 00:08:20.960 align:start position:0%
another child the size of this is
 

00:08:20.960 --> 00:08:22.710 align:start position:0%
another child the size of this is
actually<00:08:21.280><c> gonna</c><00:08:21.520><c> be</c><00:08:21.759><c> two</c><00:08:22.000><c> now</c><00:08:22.160><c> so</c><00:08:22.400><c> let's</c>

00:08:22.710 --> 00:08:22.720 align:start position:0%
actually gonna be two now so let's
 

00:08:22.720 --> 00:08:24.230 align:start position:0%
actually gonna be two now so let's
update<00:08:23.199><c> the</c><00:08:23.360><c> rank</c><00:08:23.680><c> of</c><00:08:23.919><c> it</c>

00:08:24.230 --> 00:08:24.240 align:start position:0%
update the rank of it
 

00:08:24.240 --> 00:08:27.749 align:start position:0%
update the rank of it
to<00:08:24.840><c> two</c><00:08:26.000><c> but</c><00:08:26.400><c> we</c><00:08:26.639><c> also</c><00:08:26.960><c> have</c><00:08:27.120><c> to</c><00:08:27.199><c> update</c><00:08:27.520><c> the</c>

00:08:27.749 --> 00:08:27.759 align:start position:0%
to two but we also have to update the
 

00:08:27.759 --> 00:08:28.790 align:start position:0%
to two but we also have to update the
parent<00:08:28.160><c> so</c>

00:08:28.790 --> 00:08:28.800 align:start position:0%
parent so
 

00:08:28.800 --> 00:08:31.029 align:start position:0%
parent so
initially<00:08:29.280><c> notice</c><00:08:29.599><c> how</c><00:08:29.759><c> the</c><00:08:30.000><c> parents</c><00:08:30.560><c> are</c><00:08:30.800><c> all</c>

00:08:31.029 --> 00:08:31.039 align:start position:0%
initially notice how the parents are all
 

00:08:31.039 --> 00:08:33.190 align:start position:0%
initially notice how the parents are all
one<00:08:31.440><c> two</c><00:08:31.680><c> and</c><00:08:31.759><c> three</c><00:08:32.000><c> what</c><00:08:32.159><c> that</c><00:08:32.320><c> means</c><00:08:32.640><c> is</c><00:08:32.880><c> one</c>

00:08:33.190 --> 00:08:33.200 align:start position:0%
one two and three what that means is one
 

00:08:33.200 --> 00:08:35.269 align:start position:0%
one two and three what that means is one
is<00:08:33.440><c> a</c><00:08:33.599><c> parent</c><00:08:34.000><c> of</c><00:08:34.240><c> one</c><00:08:34.560><c> right</c><00:08:34.719><c> that's</c>

00:08:35.269 --> 00:08:35.279 align:start position:0%
is a parent of one right that's
 

00:08:35.279 --> 00:08:36.949 align:start position:0%
is a parent of one right that's
that<00:08:35.519><c> just</c><00:08:35.680><c> basically</c><00:08:36.080><c> means</c><00:08:36.320><c> it</c><00:08:36.479><c> has</c><00:08:36.719><c> no</c>

00:08:36.949 --> 00:08:36.959 align:start position:0%
that just basically means it has no
 

00:08:36.959 --> 00:08:38.630 align:start position:0%
that just basically means it has no
parent<00:08:37.680><c> and</c><00:08:38.240><c> two</c>

00:08:38.630 --> 00:08:38.640 align:start position:0%
parent and two
 

00:08:38.640 --> 00:08:40.870 align:start position:0%
parent and two
is<00:08:38.800><c> initially</c><00:08:39.200><c> a</c><00:08:39.279><c> parent</c><00:08:39.519><c> of</c><00:08:39.680><c> two</c><00:08:40.080><c> but</c><00:08:40.320><c> notice</c>

00:08:40.870 --> 00:08:40.880 align:start position:0%
is initially a parent of two but notice
 

00:08:40.880 --> 00:08:43.589 align:start position:0%
is initially a parent of two but notice
now<00:08:41.440><c> two</c><00:08:41.760><c> is</c><00:08:42.000><c> not</c><00:08:42.240><c> two</c><00:08:42.479><c> actually</c><00:08:42.880><c> has</c><00:08:43.120><c> a</c><00:08:43.279><c> real</c>

00:08:43.589 --> 00:08:43.599 align:start position:0%
now two is not two actually has a real
 

00:08:43.599 --> 00:08:45.190 align:start position:0%
now two is not two actually has a real
parent<00:08:44.000><c> now</c><00:08:44.240><c> two</c><00:08:44.480><c> has</c><00:08:44.640><c> a</c><00:08:44.720><c> parent</c>

00:08:45.190 --> 00:08:45.200 align:start position:0%
parent now two has a parent
 

00:08:45.200 --> 00:08:47.670 align:start position:0%
parent now two has a parent
of<00:08:45.519><c> one</c><00:08:45.920><c> so</c><00:08:46.080><c> what</c><00:08:46.160><c> we're</c><00:08:46.320><c> gonna</c><00:08:46.560><c> do</c><00:08:46.800><c> is</c><00:08:47.200><c> erase</c>

00:08:47.670 --> 00:08:47.680 align:start position:0%
of one so what we're gonna do is erase
 

00:08:47.680 --> 00:08:48.389 align:start position:0%
of one so what we're gonna do is erase
this<00:08:48.000><c> two</c>

00:08:48.389 --> 00:08:48.399 align:start position:0%
this two
 

00:08:48.399 --> 00:08:51.269 align:start position:0%
this two
and<00:08:48.560><c> instead</c><00:08:49.040><c> set</c><00:08:49.279><c> it</c><00:08:49.600><c> to</c><00:08:50.000><c> one</c><00:08:50.480><c> because</c><00:08:50.720><c> now</c><00:08:51.120><c> if</c>

00:08:51.269 --> 00:08:51.279 align:start position:0%
and instead set it to one because now if
 

00:08:51.279 --> 00:08:51.750 align:start position:0%
and instead set it to one because now if
we<00:08:51.440><c> ever</c>

00:08:51.750 --> 00:08:51.760 align:start position:0%
we ever
 

00:08:51.760 --> 00:08:53.509 align:start position:0%
we ever
get<00:08:52.000><c> to</c><00:08:52.240><c> two</c><00:08:52.480><c> and</c><00:08:52.560><c> we</c><00:08:52.720><c> wanna</c><00:08:52.959><c> know</c><00:08:53.120><c> who's</c><00:08:53.360><c> the</c>

00:08:53.509 --> 00:08:53.519 align:start position:0%
get to two and we wanna know who's the
 

00:08:53.519 --> 00:08:55.030 align:start position:0%
get to two and we wanna know who's the
parent<00:08:53.839><c> of</c><00:08:54.000><c> two</c><00:08:54.320><c> we</c><00:08:54.480><c> can</c><00:08:54.720><c> go</c>

00:08:55.030 --> 00:08:55.040 align:start position:0%
parent of two we can go
 

00:08:55.040 --> 00:08:57.670 align:start position:0%
parent of two we can go
up<00:08:55.200><c> this</c><00:08:55.600><c> link</c><00:08:56.160><c> all</c><00:08:56.320><c> the</c><00:08:56.399><c> way</c><00:08:56.640><c> to</c><00:08:56.880><c> one</c><00:08:57.360><c> and</c><00:08:57.519><c> see</c>

00:08:57.670 --> 00:08:57.680 align:start position:0%
up this link all the way to one and see
 

00:08:57.680 --> 00:08:59.750 align:start position:0%
up this link all the way to one and see
that<00:08:58.000><c> one</c><00:08:58.240><c> is</c><00:08:58.399><c> a</c><00:08:58.480><c> parent</c><00:08:58.800><c> of</c><00:08:59.040><c> two</c>

00:08:59.750 --> 00:08:59.760 align:start position:0%
that one is a parent of two
 

00:08:59.760 --> 00:09:01.670 align:start position:0%
that one is a parent of two
next<00:09:00.080><c> we're</c><00:09:00.320><c> going</c><00:09:00.399><c> to</c><00:09:00.480><c> go</c><00:09:00.640><c> to</c><00:09:00.880><c> the</c><00:09:00.959><c> next</c><00:09:01.279><c> edge</c>

00:09:01.670 --> 00:09:01.680 align:start position:0%
next we're going to go to the next edge
 

00:09:01.680 --> 00:09:03.190 align:start position:0%
next we're going to go to the next edge
one<00:09:02.000><c> and</c><00:09:02.240><c> three</c><00:09:02.480><c> this</c><00:09:02.640><c> means</c><00:09:02.880><c> we're</c><00:09:03.040><c> going</c><00:09:03.120><c> to</c>

00:09:03.190 --> 00:09:03.200 align:start position:0%
one and three this means we're going to
 

00:09:03.200 --> 00:09:03.910 align:start position:0%
one and three this means we're going to
be<00:09:03.360><c> connecting</c>

00:09:03.910 --> 00:09:03.920 align:start position:0%
be connecting
 

00:09:03.920 --> 00:09:06.710 align:start position:0%
be connecting
one<00:09:04.240><c> and</c><00:09:04.399><c> three</c><00:09:04.720><c> together</c><00:09:05.519><c> so</c><00:09:05.760><c> since</c><00:09:06.160><c> one</c><00:09:06.560><c> is</c>

00:09:06.710 --> 00:09:06.720 align:start position:0%
one and three together so since one is
 

00:09:06.720 --> 00:09:08.710 align:start position:0%
one and three together so since one is
the<00:09:06.880><c> parent</c><00:09:07.279><c> of</c><00:09:07.440><c> one</c><00:09:07.839><c> and</c><00:09:08.160><c> three</c><00:09:08.480><c> is</c><00:09:08.560><c> the</c>

00:09:08.710 --> 00:09:08.720 align:start position:0%
the parent of one and three is the
 

00:09:08.720 --> 00:09:10.550 align:start position:0%
the parent of one and three is the
parent<00:09:09.040><c> of</c><00:09:09.120><c> three</c><00:09:09.360><c> let's</c><00:09:09.600><c> get</c><00:09:09.760><c> the</c><00:09:10.000><c> ranks</c><00:09:10.399><c> of</c>

00:09:10.550 --> 00:09:10.560 align:start position:0%
parent of three let's get the ranks of
 

00:09:10.560 --> 00:09:11.430 align:start position:0%
parent of three let's get the ranks of
both<00:09:10.800><c> of</c><00:09:10.959><c> these</c>

00:09:11.430 --> 00:09:11.440 align:start position:0%
both of these
 

00:09:11.440 --> 00:09:13.670 align:start position:0%
both of these
the<00:09:11.680><c> rank</c><00:09:12.080><c> of</c><00:09:12.320><c> one</c><00:09:12.720><c> is</c><00:09:12.880><c> going</c><00:09:12.959><c> to</c><00:09:13.040><c> be</c><00:09:13.279><c> two</c><00:09:13.519><c> the</c>

00:09:13.670 --> 00:09:13.680 align:start position:0%
the rank of one is going to be two the
 

00:09:13.680 --> 00:09:14.790 align:start position:0%
the rank of one is going to be two the
rank<00:09:14.000><c> of</c><00:09:14.240><c> three</c>

00:09:14.790 --> 00:09:14.800 align:start position:0%
rank of three
 

00:09:14.800 --> 00:09:17.030 align:start position:0%
rank of three
is<00:09:14.959><c> going</c><00:09:15.120><c> to</c><00:09:15.200><c> be</c><00:09:15.519><c> one</c><00:09:16.000><c> since</c><00:09:16.399><c> one</c><00:09:16.720><c> has</c><00:09:16.880><c> a</c>

00:09:17.030 --> 00:09:17.040 align:start position:0%
is going to be one since one has a
 

00:09:17.040 --> 00:09:18.070 align:start position:0%
is going to be one since one has a
larger<00:09:17.600><c> rank</c>

00:09:18.070 --> 00:09:18.080 align:start position:0%
larger rank
 

00:09:18.080 --> 00:09:19.990 align:start position:0%
larger rank
than<00:09:18.320><c> three</c><00:09:18.560><c> that</c><00:09:18.800><c> means</c><00:09:19.120><c> three</c><00:09:19.519><c> is</c><00:09:19.680><c> going</c><00:09:19.920><c> to</c>

00:09:19.990 --> 00:09:20.000 align:start position:0%
than three that means three is going to
 

00:09:20.000 --> 00:09:21.110 align:start position:0%
than three that means three is going to
be<00:09:20.160><c> the</c><00:09:20.480><c> child</c>

00:09:21.110 --> 00:09:21.120 align:start position:0%
be the child
 

00:09:21.120 --> 00:09:24.230 align:start position:0%
be the child
of<00:09:21.360><c> one</c><00:09:21.839><c> so</c><00:09:22.080><c> let's</c><00:09:22.320><c> add</c><00:09:22.800><c> three</c><00:09:23.200><c> as</c><00:09:23.440><c> a</c><00:09:23.600><c> child</c><00:09:24.080><c> of</c>

00:09:24.230 --> 00:09:24.240 align:start position:0%
of one so let's add three as a child of
 

00:09:24.240 --> 00:09:24.949 align:start position:0%
of one so let's add three as a child of
one

00:09:24.949 --> 00:09:24.959 align:start position:0%
one
 

00:09:24.959 --> 00:09:27.190 align:start position:0%
one
and<00:09:25.200><c> by</c><00:09:25.360><c> doing</c><00:09:25.600><c> that</c><00:09:25.760><c> we</c><00:09:25.920><c> can</c><00:09:26.080><c> also</c><00:09:26.560><c> update</c><00:09:26.959><c> the</c>

00:09:27.190 --> 00:09:27.200 align:start position:0%
and by doing that we can also update the
 

00:09:27.200 --> 00:09:28.150 align:start position:0%
and by doing that we can also update the
new<00:09:27.680><c> rank</c>

00:09:28.150 --> 00:09:28.160 align:start position:0%
new rank
 

00:09:28.160 --> 00:09:30.470 align:start position:0%
new rank
of<00:09:28.320><c> one</c><00:09:28.640><c> because</c><00:09:28.959><c> now</c><00:09:29.120><c> the</c><00:09:29.360><c> size</c><00:09:29.839><c> of</c><00:09:30.000><c> this</c><00:09:30.320><c> has</c>

00:09:30.470 --> 00:09:30.480 align:start position:0%
of one because now the size of this has
 

00:09:30.480 --> 00:09:31.509 align:start position:0%
of one because now the size of this has
actually<00:09:30.800><c> increased</c>

00:09:31.509 --> 00:09:31.519 align:start position:0%
actually increased
 

00:09:31.519 --> 00:09:35.030 align:start position:0%
actually increased
to<00:09:31.839><c> three</c><00:09:32.800><c> so</c><00:09:33.120><c> let's</c><00:09:33.440><c> change</c><00:09:34.000><c> this</c><00:09:34.480><c> to</c>

00:09:35.030 --> 00:09:35.040 align:start position:0%
to three so let's change this to
 

00:09:35.040 --> 00:09:37.990 align:start position:0%
to three so let's change this to
three<00:09:36.080><c> and</c><00:09:36.480><c> let's</c><00:09:36.800><c> update</c><00:09:37.200><c> the</c><00:09:37.440><c> parent</c><00:09:37.839><c> of</c>

00:09:37.990 --> 00:09:38.000 align:start position:0%
three and let's update the parent of
 

00:09:38.000 --> 00:09:39.509 align:start position:0%
three and let's update the parent of
three<00:09:38.320><c> initially</c><00:09:38.800><c> three</c><00:09:39.040><c> was</c><00:09:39.279><c> just</c><00:09:39.440><c> the</c>

00:09:39.509 --> 00:09:39.519 align:start position:0%
three initially three was just the
 

00:09:39.519 --> 00:09:40.710 align:start position:0%
three initially three was just the
parent<00:09:39.839><c> of</c><00:09:40.000><c> itself</c>

00:09:40.710 --> 00:09:40.720 align:start position:0%
parent of itself
 

00:09:40.720 --> 00:09:42.470 align:start position:0%
parent of itself
now<00:09:40.880><c> we're</c><00:09:41.040><c> going</c><00:09:41.120><c> to</c><00:09:41.279><c> change</c><00:09:41.600><c> that</c><00:09:41.839><c> to</c><00:09:42.080><c> also</c>

00:09:42.470 --> 00:09:42.480 align:start position:0%
now we're going to change that to also
 

00:09:42.480 --> 00:09:44.070 align:start position:0%
now we're going to change that to also
being<00:09:43.360><c> one</c>

00:09:44.070 --> 00:09:44.080 align:start position:0%
being one
 

00:09:44.080 --> 00:09:46.310 align:start position:0%
being one
because<00:09:44.800><c> the</c><00:09:44.959><c> parent</c><00:09:45.279><c> of</c><00:09:45.440><c> three</c><00:09:45.680><c> is</c><00:09:45.839><c> clearly</c>

00:09:46.310 --> 00:09:46.320 align:start position:0%
because the parent of three is clearly
 

00:09:46.320 --> 00:09:47.110 align:start position:0%
because the parent of three is clearly
one<00:09:46.640><c> now</c>

00:09:47.110 --> 00:09:47.120 align:start position:0%
one now
 

00:09:47.120 --> 00:09:49.430 align:start position:0%
one now
so<00:09:47.279><c> now</c><00:09:47.519><c> let's</c><00:09:47.680><c> go</c><00:09:47.839><c> to</c><00:09:48.000><c> the</c><00:09:48.240><c> last</c><00:09:48.720><c> edge</c><00:09:49.120><c> in</c><00:09:49.279><c> our</c>

00:09:49.430 --> 00:09:49.440 align:start position:0%
so now let's go to the last edge in our
 

00:09:49.440 --> 00:09:50.310 align:start position:0%
so now let's go to the last edge in our
input<00:09:49.680><c> array</c><00:09:50.000><c> two</c>

00:09:50.310 --> 00:09:50.320 align:start position:0%
input array two
 

00:09:50.320 --> 00:09:52.630 align:start position:0%
input array two
three<00:09:50.880><c> so</c><00:09:51.279><c> what</c><00:09:51.440><c> this</c><00:09:51.680><c> is</c><00:09:51.760><c> telling</c><00:09:52.080><c> us</c><00:09:52.320><c> is</c><00:09:52.399><c> we</c>

00:09:52.630 --> 00:09:52.640 align:start position:0%
three so what this is telling us is we
 

00:09:52.640 --> 00:09:53.670 align:start position:0%
three so what this is telling us is we
want<00:09:52.880><c> to</c><00:09:53.120><c> merge</c>

00:09:53.670 --> 00:09:53.680 align:start position:0%
want to merge
 

00:09:53.680 --> 00:09:55.829 align:start position:0%
want to merge
two<00:09:54.080><c> and</c><00:09:54.240><c> three</c><00:09:54.560><c> together</c><00:09:55.040><c> basically</c><00:09:55.519><c> we</c><00:09:55.680><c> want</c>

00:09:55.829 --> 00:09:55.839 align:start position:0%
two and three together basically we want
 

00:09:55.839 --> 00:09:57.590 align:start position:0%
two and three together basically we want
to<00:09:56.000><c> connect</c><00:09:56.640><c> them</c><00:09:56.880><c> together</c>

00:09:57.590 --> 00:09:57.600 align:start position:0%
to connect them together
 

00:09:57.600 --> 00:09:59.910 align:start position:0%
to connect them together
we're<00:09:58.000><c> always</c><00:09:58.399><c> gonna</c><00:09:58.640><c> be</c><00:09:58.800><c> connecting</c><00:09:59.440><c> by</c><00:09:59.680><c> the</c>

00:09:59.910 --> 00:09:59.920 align:start position:0%
we're always gonna be connecting by the
 

00:09:59.920 --> 00:10:01.670 align:start position:0%
we're always gonna be connecting by the
parent<00:10:00.399><c> so</c><00:10:00.560><c> what</c><00:10:00.720><c> we're</c><00:10:00.880><c> gonna</c><00:10:01.040><c> do</c><00:10:01.200><c> when</c><00:10:01.360><c> we</c>

00:10:01.670 --> 00:10:01.680 align:start position:0%
parent so what we're gonna do when we
 

00:10:01.680 --> 00:10:03.990 align:start position:0%
parent so what we're gonna do when we
when<00:10:01.839><c> we</c><00:10:02.000><c> have</c><00:10:02.480><c> two</c><00:10:02.959><c> so</c><00:10:03.200><c> far</c><00:10:03.360><c> we've</c><00:10:03.519><c> done</c><00:10:03.760><c> our</c>

00:10:03.990 --> 00:10:04.000 align:start position:0%
when we have two so far we've done our
 

00:10:04.000 --> 00:10:05.750 align:start position:0%
when we have two so far we've done our
union<00:10:04.399><c> algorithm</c><00:10:04.880><c> now</c><00:10:05.040><c> we're</c><00:10:05.200><c> gonna</c><00:10:05.360><c> do</c><00:10:05.519><c> the</c>

00:10:05.750 --> 00:10:05.760 align:start position:0%
union algorithm now we're gonna do the
 

00:10:05.760 --> 00:10:06.150 align:start position:0%
union algorithm now we're gonna do the
find

00:10:06.150 --> 00:10:06.160 align:start position:0%
find
 

00:10:06.160 --> 00:10:08.230 align:start position:0%
find
portion<00:10:06.560><c> of</c><00:10:06.640><c> union</c><00:10:07.040><c> find</c><00:10:07.519><c> every</c><00:10:07.839><c> time</c><00:10:08.000><c> we're</c>

00:10:08.230 --> 00:10:08.240 align:start position:0%
portion of union find every time we're
 

00:10:08.240 --> 00:10:10.069 align:start position:0%
portion of union find every time we're
given<00:10:08.560><c> two</c><00:10:08.800><c> nodes</c><00:10:09.200><c> to</c><00:10:09.360><c> merge</c><00:10:09.680><c> together</c><00:10:09.920><c> we</c>

00:10:10.069 --> 00:10:10.079 align:start position:0%
given two nodes to merge together we
 

00:10:10.079 --> 00:10:10.550 align:start position:0%
given two nodes to merge together we
need<00:10:10.240><c> to</c>

00:10:10.550 --> 00:10:10.560 align:start position:0%
need to
 

00:10:10.560 --> 00:10:12.630 align:start position:0%
need to
find<00:10:10.959><c> what</c><00:10:11.120><c> their</c><00:10:11.360><c> parents</c><00:10:11.839><c> are</c><00:10:12.079><c> so</c><00:10:12.320><c> for</c><00:10:12.480><c> to</c>

00:10:12.630 --> 00:10:12.640 align:start position:0%
find what their parents are so for to
 

00:10:12.640 --> 00:10:13.990 align:start position:0%
find what their parents are so for to
get<00:10:12.800><c> two's</c><00:10:13.120><c> parent</c><00:10:13.360><c> we're</c><00:10:13.519><c> gonna</c><00:10:13.680><c> go</c>

00:10:13.990 --> 00:10:14.000 align:start position:0%
get two's parent we're gonna go
 

00:10:14.000 --> 00:10:16.389 align:start position:0%
get two's parent we're gonna go
up<00:10:14.160><c> the</c><00:10:14.320><c> link</c><00:10:14.800><c> see</c><00:10:14.959><c> that</c><00:10:15.120><c> the</c><00:10:15.279><c> parent</c><00:10:15.680><c> is</c><00:10:15.920><c> one</c>

00:10:16.389 --> 00:10:16.399 align:start position:0%
up the link see that the parent is one
 

00:10:16.399 --> 00:10:17.190 align:start position:0%
up the link see that the parent is one
for<00:10:16.720><c> three</c>

00:10:17.190 --> 00:10:17.200 align:start position:0%
for three
 

00:10:17.200 --> 00:10:18.870 align:start position:0%
for three
we're<00:10:17.360><c> going</c><00:10:17.440><c> to</c><00:10:17.519><c> go</c><00:10:17.760><c> up</c><00:10:17.920><c> the</c><00:10:18.079><c> link</c><00:10:18.480><c> see</c><00:10:18.720><c> that</c>

00:10:18.870 --> 00:10:18.880 align:start position:0%
we're going to go up the link see that
 

00:10:18.880 --> 00:10:20.389 align:start position:0%
we're going to go up the link see that
its<00:10:19.040><c> parent</c><00:10:19.360><c> is</c><00:10:19.519><c> also</c><00:10:19.920><c> one</c>

00:10:20.389 --> 00:10:20.399 align:start position:0%
its parent is also one
 

00:10:20.399 --> 00:10:22.230 align:start position:0%
its parent is also one
what<00:10:20.560><c> does</c><00:10:20.720><c> that</c><00:10:20.959><c> tell</c><00:10:21.279><c> us</c><00:10:21.600><c> if</c><00:10:21.680><c> we're</c><00:10:21.920><c> trying</c>

00:10:22.230 --> 00:10:22.240 align:start position:0%
what does that tell us if we're trying
 

00:10:22.240 --> 00:10:24.470 align:start position:0%
what does that tell us if we're trying
to<00:10:22.560><c> merge</c><00:10:23.040><c> two</c><00:10:23.279><c> and</c><00:10:23.360><c> three</c><00:10:23.680><c> together</c><00:10:24.079><c> into</c><00:10:24.320><c> the</c>

00:10:24.470 --> 00:10:24.480 align:start position:0%
to merge two and three together into the
 

00:10:24.480 --> 00:10:25.190 align:start position:0%
to merge two and three together into the
same<00:10:24.800><c> graph</c>

00:10:25.190 --> 00:10:25.200 align:start position:0%
same graph
 

00:10:25.200 --> 00:10:27.990 align:start position:0%
same graph
if<00:10:25.360><c> they</c><00:10:25.600><c> have</c><00:10:25.839><c> the</c><00:10:26.079><c> exact</c><00:10:26.640><c> same</c><00:10:27.200><c> parent</c><00:10:27.760><c> which</c>

00:10:27.990 --> 00:10:28.000 align:start position:0%
if they have the exact same parent which
 

00:10:28.000 --> 00:10:28.710 align:start position:0%
if they have the exact same parent which
can<00:10:28.160><c> be</c>

00:10:28.710 --> 00:10:28.720 align:start position:0%
can be
 

00:10:28.720 --> 00:10:31.190 align:start position:0%
can be
you<00:10:28.800><c> know</c><00:10:28.959><c> found</c><00:10:29.279><c> from</c><00:10:29.519><c> the</c><00:10:29.760><c> parent</c><00:10:30.160><c> array</c>

00:10:31.190 --> 00:10:31.200 align:start position:0%
you know found from the parent array
 

00:10:31.200 --> 00:10:32.150 align:start position:0%
you know found from the parent array
that<00:10:31.440><c> means</c><00:10:31.680><c> they're</c>

00:10:32.150 --> 00:10:32.160 align:start position:0%
that means they're
 

00:10:32.160 --> 00:10:35.030 align:start position:0%
that means they're
already<00:10:32.959><c> connected</c><00:10:33.519><c> that</c><00:10:33.760><c> means</c><00:10:34.079><c> if</c><00:10:34.160><c> we</c><00:10:34.560><c> added</c>

00:10:35.030 --> 00:10:35.040 align:start position:0%
already connected that means if we added
 

00:10:35.040 --> 00:10:35.670 align:start position:0%
already connected that means if we added
this

00:10:35.670 --> 00:10:35.680 align:start position:0%
this
 

00:10:35.680 --> 00:10:38.550 align:start position:0%
this
new<00:10:36.079><c> edge</c><00:10:36.560><c> to</c><00:10:36.800><c> our</c><00:10:37.120><c> graph</c><00:10:37.600><c> we're</c><00:10:37.920><c> adding</c><00:10:38.399><c> a</c>

00:10:38.550 --> 00:10:38.560 align:start position:0%
new edge to our graph we're adding a
 

00:10:38.560 --> 00:10:40.470 align:start position:0%
new edge to our graph we're adding a
redundant<00:10:39.519><c> connection</c>

00:10:40.470 --> 00:10:40.480 align:start position:0%
redundant connection
 

00:10:40.480 --> 00:10:43.110 align:start position:0%
redundant connection
that<00:10:40.720><c> means</c><00:10:41.120><c> that</c><00:10:41.519><c> this</c><00:10:41.920><c> edge</c><00:10:42.480><c> is</c><00:10:42.640><c> the</c><00:10:42.880><c> edge</c>

00:10:43.110 --> 00:10:43.120 align:start position:0%
that means that this edge is the edge
 

00:10:43.120 --> 00:10:44.230 align:start position:0%
that means that this edge is the edge
that<00:10:43.279><c> we're</c><00:10:43.440><c> going</c><00:10:43.519><c> to</c><00:10:43.600><c> return</c>

00:10:44.230 --> 00:10:44.240 align:start position:0%
that we're going to return
 

00:10:44.240 --> 00:10:45.750 align:start position:0%
that we're going to return
as<00:10:44.399><c> our</c><00:10:44.560><c> result</c><00:10:44.959><c> it's</c><00:10:45.120><c> the</c><00:10:45.200><c> one</c><00:10:45.440><c> that</c><00:10:45.519><c> we</c>

00:10:45.750 --> 00:10:45.760 align:start position:0%
as our result it's the one that we
 

00:10:45.760 --> 00:10:48.310 align:start position:0%
as our result it's the one that we
identified<00:10:46.480><c> first</c><00:10:47.040><c> so</c><00:10:47.200><c> with</c><00:10:47.440><c> that</c><00:10:47.680><c> being</c><00:10:48.000><c> said</c>

00:10:48.310 --> 00:10:48.320 align:start position:0%
identified first so with that being said
 

00:10:48.320 --> 00:10:50.870 align:start position:0%
identified first so with that being said
now<00:10:48.560><c> let's</c><00:10:48.800><c> jump</c><00:10:49.040><c> into</c><00:10:49.279><c> the</c><00:10:49.440><c> code</c><00:10:50.160><c> so</c><00:10:50.480><c> as</c>

00:10:50.870 --> 00:10:50.880 align:start position:0%
now let's jump into the code so as
 

00:10:50.880 --> 00:10:52.550 align:start position:0%
now let's jump into the code so as
mentioned<00:10:51.279><c> we</c><00:10:51.440><c> are</c><00:10:51.519><c> going</c><00:10:51.600><c> to</c><00:10:51.760><c> have</c><00:10:51.920><c> a</c><00:10:52.079><c> parent</c>

00:10:52.550 --> 00:10:52.560 align:start position:0%
mentioned we are going to have a parent
 

00:10:52.560 --> 00:10:54.230 align:start position:0%
mentioned we are going to have a parent
array<00:10:52.800><c> so</c><00:10:53.040><c> initially</c><00:10:53.440><c> we</c><00:10:53.600><c> can</c><00:10:53.760><c> just</c>

00:10:54.230 --> 00:10:54.240 align:start position:0%
array so initially we can just
 

00:10:54.240 --> 00:10:56.389 align:start position:0%
array so initially we can just
initialize<00:10:54.880><c> that</c><00:10:55.200><c> for</c><00:10:55.440><c> every</c><00:10:55.680><c> single</c><00:10:56.000><c> node</c>

00:10:56.389 --> 00:10:56.399 align:start position:0%
initialize that for every single node
 

00:10:56.399 --> 00:10:58.230 align:start position:0%
initialize that for every single node
itself<00:10:56.880><c> is</c><00:10:57.040><c> going</c><00:10:57.279><c> to</c><00:10:57.360><c> be</c><00:10:57.519><c> the</c><00:10:57.600><c> parent</c><00:10:57.839><c> so</c><00:10:58.000><c> for</c>

00:10:58.230 --> 00:10:58.240 align:start position:0%
itself is going to be the parent so for
 

00:10:58.240 --> 00:10:59.509 align:start position:0%
itself is going to be the parent so for
i<00:10:58.959><c> in</c>

00:10:59.509 --> 00:10:59.519 align:start position:0%
i in
 

00:10:59.519 --> 00:11:02.630 align:start position:0%
i in
range<00:11:00.079><c> of</c><00:11:00.320><c> the</c><00:11:00.560><c> length</c><00:11:01.120><c> of</c><00:11:01.680><c> edges</c>

00:11:02.630 --> 00:11:02.640 align:start position:0%
range of the length of edges
 

00:11:02.640 --> 00:11:05.590 align:start position:0%
range of the length of edges
plus<00:11:03.200><c> one</c><00:11:04.320><c> because</c><00:11:04.640><c> we</c><00:11:04.800><c> are</c><00:11:05.040><c> starting</c><00:11:05.360><c> with</c>

00:11:05.590 --> 00:11:05.600 align:start position:0%
plus one because we are starting with
 

00:11:05.600 --> 00:11:07.670 align:start position:0%
plus one because we are starting with
zero<00:11:06.000><c> even</c><00:11:06.240><c> though</c><00:11:06.560><c> our</c><00:11:06.880><c> nodes</c><00:11:07.200><c> are</c><00:11:07.360><c> going</c>

00:11:07.670 --> 00:11:07.680 align:start position:0%
zero even though our nodes are going
 

00:11:07.680 --> 00:11:09.269 align:start position:0%
zero even though our nodes are going
from<00:11:08.079><c> one</c><00:11:08.399><c> to</c><00:11:08.640><c> n</c>

00:11:09.269 --> 00:11:09.279 align:start position:0%
from one to n
 

00:11:09.279 --> 00:11:10.710 align:start position:0%
from one to n
we<00:11:09.440><c> are</c><00:11:09.600><c> going</c><00:11:09.680><c> to</c><00:11:09.760><c> have</c><00:11:09.839><c> a</c><00:11:10.000><c> zero</c><00:11:10.399><c> in</c><00:11:10.480><c> this</c>

00:11:10.710 --> 00:11:10.720 align:start position:0%
we are going to have a zero in this
 

00:11:10.720 --> 00:11:12.389 align:start position:0%
we are going to have a zero in this
input<00:11:10.959><c> array</c><00:11:11.279><c> just</c><00:11:11.440><c> because</c><00:11:11.839><c> it</c><00:11:12.000><c> makes</c><00:11:12.240><c> the</c>

00:11:12.389 --> 00:11:12.399 align:start position:0%
input array just because it makes the
 

00:11:12.399 --> 00:11:13.829 align:start position:0%
input array just because it makes the
math<00:11:12.640><c> work</c><00:11:12.880><c> out</c><00:11:13.040><c> easier</c><00:11:13.279><c> we're</c><00:11:13.440><c> not</c><00:11:13.600><c> actually</c>

00:11:13.829 --> 00:11:13.839 align:start position:0%
math work out easier we're not actually
 

00:11:13.839 --> 00:11:15.750 align:start position:0%
math work out easier we're not actually
going<00:11:14.000><c> to</c><00:11:14.079><c> be</c><00:11:14.240><c> using</c><00:11:14.560><c> that</c><00:11:14.800><c> zero</c><00:11:15.200><c> node</c>

00:11:15.750 --> 00:11:15.760 align:start position:0%
going to be using that zero node
 

00:11:15.760 --> 00:11:17.590 align:start position:0%
going to be using that zero node
and<00:11:15.920><c> we're</c><00:11:16.079><c> also</c><00:11:16.320><c> going</c><00:11:16.399><c> to</c><00:11:16.480><c> have</c><00:11:16.800><c> a</c><00:11:17.040><c> list</c><00:11:17.440><c> of</c>

00:11:17.590 --> 00:11:17.600 align:start position:0%
and we're also going to have a list of
 

00:11:17.600 --> 00:11:19.350 align:start position:0%
and we're also going to have a list of
ranks<00:11:18.000><c> which</c><00:11:18.240><c> initially</c><00:11:18.720><c> is</c><00:11:18.880><c> just</c><00:11:19.120><c> going</c><00:11:19.279><c> to</c>

00:11:19.350 --> 00:11:19.360 align:start position:0%
ranks which initially is just going to
 

00:11:19.360 --> 00:11:20.630 align:start position:0%
ranks which initially is just going to
be<00:11:19.519><c> set</c><00:11:19.760><c> to</c><00:11:20.079><c> one</c>

00:11:20.630 --> 00:11:20.640 align:start position:0%
be set to one
 

00:11:20.640 --> 00:11:22.790 align:start position:0%
be set to one
so<00:11:20.880><c> and</c><00:11:21.040><c> it's</c><00:11:21.120><c> going</c><00:11:21.200><c> to</c><00:11:21.360><c> be</c><00:11:21.440><c> the</c><00:11:21.680><c> size</c><00:11:22.160><c> of</c>

00:11:22.790 --> 00:11:22.800 align:start position:0%
so and it's going to be the size of
 

00:11:22.800 --> 00:11:24.310 align:start position:0%
so and it's going to be the size of
length<00:11:23.200><c> of</c><00:11:23.519><c> edges</c>

00:11:24.310 --> 00:11:24.320 align:start position:0%
length of edges
 

00:11:24.320 --> 00:11:27.190 align:start position:0%
length of edges
plus<00:11:25.120><c> one</c><00:11:25.760><c> and</c><00:11:26.000><c> then</c><00:11:26.240><c> we</c><00:11:26.399><c> can</c><00:11:26.560><c> basically</c><00:11:27.040><c> just</c>

00:11:27.190 --> 00:11:27.200 align:start position:0%
plus one and then we can basically just
 

00:11:27.200 --> 00:11:29.590 align:start position:0%
plus one and then we can basically just
define<00:11:27.680><c> our</c><00:11:27.920><c> standard</c><00:11:28.480><c> algorithms</c><00:11:29.040><c> for</c>

00:11:29.590 --> 00:11:29.600 align:start position:0%
define our standard algorithms for
 

00:11:29.600 --> 00:11:31.750 align:start position:0%
define our standard algorithms for
uh<00:11:29.839><c> union</c><00:11:30.399><c> and</c><00:11:30.560><c> find</c><00:11:30.880><c> so</c><00:11:31.120><c> let's</c><00:11:31.360><c> start</c><00:11:31.680><c> out</c>

00:11:31.750 --> 00:11:31.760 align:start position:0%
uh union and find so let's start out
 

00:11:31.760 --> 00:11:33.670 align:start position:0%
uh union and find so let's start out
with<00:11:32.000><c> find</c><00:11:32.399><c> because</c><00:11:32.640><c> it's</c><00:11:32.800><c> easier</c><00:11:33.120><c> so</c><00:11:33.279><c> for</c>

00:11:33.670 --> 00:11:33.680 align:start position:0%
with find because it's easier so for
 

00:11:33.680 --> 00:11:36.230 align:start position:0%
with find because it's easier so for
if<00:11:33.760><c> we</c><00:11:33.920><c> were</c><00:11:34.079><c> given</c><00:11:34.480><c> a</c><00:11:34.720><c> node</c><00:11:35.200><c> n</c><00:11:35.760><c> then</c><00:11:35.920><c> we</c><00:11:36.079><c> want</c>

00:11:36.230 --> 00:11:36.240 align:start position:0%
if we were given a node n then we want
 

00:11:36.240 --> 00:11:38.310 align:start position:0%
if we were given a node n then we want
to<00:11:36.480><c> find</c><00:11:36.880><c> what</c><00:11:37.040><c> its</c><00:11:37.279><c> parent</c><00:11:37.760><c> is</c>

00:11:38.310 --> 00:11:38.320 align:start position:0%
to find what its parent is
 

00:11:38.320 --> 00:11:40.230 align:start position:0%
to find what its parent is
so<00:11:38.480><c> we're</c><00:11:38.640><c> going</c><00:11:38.720><c> to</c><00:11:38.880><c> go</c><00:11:39.040><c> to</c><00:11:39.200><c> its</c><00:11:39.519><c> first</c><00:11:39.920><c> parent</c>

00:11:40.230 --> 00:11:40.240 align:start position:0%
so we're going to go to its first parent
 

00:11:40.240 --> 00:11:42.069 align:start position:0%
so we're going to go to its first parent
and<00:11:40.560><c> when</c><00:11:40.720><c> we</c><00:11:40.880><c> say</c><00:11:41.120><c> parent</c><00:11:41.440><c> we</c><00:11:41.600><c> want</c><00:11:41.760><c> to</c><00:11:41.839><c> find</c>

00:11:42.069 --> 00:11:42.079 align:start position:0%
and when we say parent we want to find
 

00:11:42.079 --> 00:11:44.150 align:start position:0%
and when we say parent we want to find
the<00:11:42.399><c> root</c><00:11:42.800><c> parent</c><00:11:43.120><c> it's</c><00:11:43.360><c> possible</c>

00:11:44.150 --> 00:11:44.160 align:start position:0%
the root parent it's possible
 

00:11:44.160 --> 00:11:46.389 align:start position:0%
the root parent it's possible
that<00:11:44.480><c> a</c><00:11:44.640><c> parent</c><00:11:44.959><c> could</c><00:11:45.120><c> go</c><00:11:45.440><c> multiple</c><00:11:46.079><c> it</c><00:11:46.240><c> could</c>

00:11:46.389 --> 00:11:46.399 align:start position:0%
that a parent could go multiple it could
 

00:11:46.399 --> 00:11:48.230 align:start position:0%
that a parent could go multiple it could
take<00:11:46.560><c> multiple</c><00:11:47.120><c> links</c><00:11:47.440><c> to</c><00:11:47.519><c> get</c><00:11:47.680><c> to</c><00:11:47.839><c> the</c><00:11:47.920><c> parent</c>

00:11:48.230 --> 00:11:48.240 align:start position:0%
take multiple links to get to the parent
 

00:11:48.240 --> 00:11:48.710 align:start position:0%
take multiple links to get to the parent
so

00:11:48.710 --> 00:11:48.720 align:start position:0%
so
 

00:11:48.720 --> 00:11:50.629 align:start position:0%
so
we're<00:11:48.880><c> going</c><00:11:48.959><c> to</c><00:11:49.120><c> get</c><00:11:49.519><c> the</c><00:11:49.760><c> first</c><00:11:50.160><c> parent</c><00:11:50.560><c> of</c>

00:11:50.629 --> 00:11:50.639 align:start position:0%
we're going to get the first parent of
 

00:11:50.639 --> 00:11:51.829 align:start position:0%
we're going to get the first parent of
this<00:11:51.120><c> parent</c>

00:11:51.829 --> 00:11:51.839 align:start position:0%
this parent
 

00:11:51.839 --> 00:11:54.470 align:start position:0%
this parent
of<00:11:52.160><c> n</c><00:11:52.560><c> and</c><00:11:52.720><c> it's</c><00:11:52.959><c> also</c><00:11:53.360><c> possible</c><00:11:53.760><c> that</c><00:11:54.000><c> n</c><00:11:54.240><c> could</c>

00:11:54.470 --> 00:11:54.480 align:start position:0%
of n and it's also possible that n could
 

00:11:54.480 --> 00:11:55.910 align:start position:0%
of n and it's also possible that n could
basically<00:11:54.959><c> be</c><00:11:55.200><c> the</c><00:11:55.360><c> parent</c><00:11:55.680><c> of</c>

00:11:55.910 --> 00:11:55.920 align:start position:0%
basically be the parent of
 

00:11:55.920 --> 00:11:57.910 align:start position:0%
basically be the parent of
itself<00:11:56.639><c> so</c><00:11:56.800><c> we're</c><00:11:56.959><c> going</c><00:11:57.040><c> to</c><00:11:57.120><c> basically</c><00:11:57.600><c> keep</c>

00:11:57.910 --> 00:11:57.920 align:start position:0%
itself so we're going to basically keep
 

00:11:57.920 --> 00:11:59.750 align:start position:0%
itself so we're going to basically keep
going<00:11:58.240><c> until</c><00:11:58.800><c> we</c><00:11:59.040><c> find</c>

00:11:59.750 --> 00:11:59.760 align:start position:0%
going until we find
 

00:11:59.760 --> 00:12:02.790 align:start position:0%
going until we find
the<00:12:00.000><c> last</c><00:12:00.560><c> root</c><00:12:00.880><c> parent</c><00:12:01.279><c> so</c><00:12:01.600><c> while</c><00:12:02.480><c> is</c>

00:12:02.790 --> 00:12:02.800 align:start position:0%
the last root parent so while is
 

00:12:02.800 --> 00:12:05.829 align:start position:0%
the last root parent so while is
not<00:12:03.360><c> equal</c><00:12:04.079><c> to</c><00:12:04.320><c> parent</c><00:12:05.040><c> of</c><00:12:05.279><c> n</c>

00:12:05.829 --> 00:12:05.839 align:start position:0%
not equal to parent of n
 

00:12:05.839 --> 00:12:07.509 align:start position:0%
not equal to parent of n
then<00:12:06.079><c> we're</c><00:12:06.240><c> going</c><00:12:06.399><c> to</c><00:12:06.560><c> basically</c><00:12:07.040><c> keep</c><00:12:07.279><c> going</c>

00:12:07.509 --> 00:12:07.519 align:start position:0%
then we're going to basically keep going
 

00:12:07.519 --> 00:12:08.870 align:start position:0%
then we're going to basically keep going
up<00:12:07.600><c> the</c><00:12:07.760><c> length</c><00:12:07.920><c> so</c><00:12:08.079><c> we're</c><00:12:08.160><c> going</c><00:12:08.240><c> to</c><00:12:08.320><c> set</c><00:12:08.560><c> p</c>

00:12:08.870 --> 00:12:08.880 align:start position:0%
up the length so we're going to set p
 

00:12:08.880 --> 00:12:11.910 align:start position:0%
up the length so we're going to set p
equal<00:12:09.200><c> to</c><00:12:09.760><c> parent</c><00:12:10.480><c> of</c><00:12:11.120><c> itself</c>

00:12:11.910 --> 00:12:11.920 align:start position:0%
equal to parent of itself
 

00:12:11.920 --> 00:12:15.030 align:start position:0%
equal to parent of itself
so<00:12:12.160><c> while</c><00:12:12.480><c> p</c><00:12:12.720><c> is</c><00:12:12.880><c> not</c><00:12:13.200><c> equal</c><00:12:13.920><c> to</c><00:12:14.480><c> its</c><00:12:14.800><c> own</c>

00:12:15.030 --> 00:12:15.040 align:start position:0%
so while p is not equal to its own
 

00:12:15.040 --> 00:12:16.470 align:start position:0%
so while p is not equal to its own
parent<00:12:15.440><c> we're</c><00:12:15.600><c> going</c><00:12:15.680><c> to</c><00:12:15.760><c> basically</c><00:12:16.240><c> keep</c>

00:12:16.470 --> 00:12:16.480 align:start position:0%
parent we're going to basically keep
 

00:12:16.480 --> 00:12:18.069 align:start position:0%
parent we're going to basically keep
going<00:12:16.800><c> up</c><00:12:16.959><c> the</c><00:12:17.200><c> link</c><00:12:17.440><c> so</c><00:12:17.600><c> then</c><00:12:17.760><c> we're</c><00:12:17.920><c> going</c><00:12:18.000><c> to</c>

00:12:18.069 --> 00:12:18.079 align:start position:0%
going up the link so then we're going to
 

00:12:18.079 --> 00:12:18.870 align:start position:0%
going up the link so then we're going to
update<00:12:18.480><c> p</c>

00:12:18.870 --> 00:12:18.880 align:start position:0%
update p
 

00:12:18.880 --> 00:12:21.269 align:start position:0%
update p
to<00:12:19.040><c> the</c><00:12:19.200><c> parent</c><00:12:19.680><c> of</c><00:12:19.920><c> itself</c><00:12:20.560><c> but</c><00:12:20.800><c> we</c><00:12:20.959><c> are</c><00:12:21.120><c> going</c>

00:12:21.269 --> 00:12:21.279 align:start position:0%
to the parent of itself but we are going
 

00:12:21.279 --> 00:12:23.350 align:start position:0%
to the parent of itself but we are going
to<00:12:21.440><c> add</c><00:12:21.760><c> one</c><00:12:22.079><c> thing</c><00:12:22.399><c> to</c><00:12:22.560><c> this</c><00:12:22.720><c> algorithm</c><00:12:23.200><c> it's</c>

00:12:23.350 --> 00:12:23.360 align:start position:0%
to add one thing to this algorithm it's
 

00:12:23.360 --> 00:12:25.670 align:start position:0%
to add one thing to this algorithm it's
called<00:12:23.760><c> path</c><00:12:24.079><c> compression</c><00:12:24.880><c> basically</c>

00:12:25.670 --> 00:12:25.680 align:start position:0%
called path compression basically
 

00:12:25.680 --> 00:12:28.150 align:start position:0%
called path compression basically
before<00:12:26.160><c> we</c><00:12:26.480><c> get</c><00:12:26.720><c> to</c><00:12:26.880><c> this</c><00:12:27.360><c> portion</c><00:12:27.839><c> what</c><00:12:28.000><c> we're</c>

00:12:28.150 --> 00:12:28.160 align:start position:0%
before we get to this portion what we're
 

00:12:28.160 --> 00:12:29.350 align:start position:0%
before we get to this portion what we're
gonna<00:12:28.399><c> say</c><00:12:28.720><c> is</c><00:12:28.959><c> for</c>

00:12:29.350 --> 00:12:29.360 align:start position:0%
gonna say is for
 

00:12:29.360 --> 00:12:32.069 align:start position:0%
gonna say is for
p<00:12:29.920><c> we're</c><00:12:30.079><c> gonna</c><00:12:30.320><c> set</c><00:12:30.639><c> its</c><00:12:30.880><c> parent</c><00:12:31.360><c> actually</c><00:12:31.839><c> to</c>

00:12:32.069 --> 00:12:32.079 align:start position:0%
p we're gonna set its parent actually to
 

00:12:32.079 --> 00:12:34.150 align:start position:0%
p we're gonna set its parent actually to
the<00:12:32.399><c> parent</c><00:12:32.880><c> of</c><00:12:33.120><c> its</c><00:12:33.279><c> parent</c><00:12:33.600><c> basically</c>

00:12:34.150 --> 00:12:34.160 align:start position:0%
the parent of its parent basically
 

00:12:34.160 --> 00:12:37.269 align:start position:0%
the parent of its parent basically
it's<00:12:34.399><c> grandparent</c><00:12:35.519><c> so</c><00:12:36.160><c> we're</c><00:12:36.320><c> gonna</c><00:12:36.639><c> say</c><00:12:36.959><c> its</c>

00:12:37.269 --> 00:12:37.279 align:start position:0%
it's grandparent so we're gonna say its
 

00:12:37.279 --> 00:12:37.990 align:start position:0%
it's grandparent so we're gonna say its
new<00:12:37.519><c> parent</c>

00:12:37.990 --> 00:12:38.000 align:start position:0%
new parent
 

00:12:38.000 --> 00:12:41.110 align:start position:0%
new parent
parent<00:12:38.320><c> of</c><00:12:38.560><c> p</c><00:12:38.959><c> is</c><00:12:39.120><c> going</c><00:12:39.360><c> to</c><00:12:39.600><c> be</c><00:12:40.160><c> parent</c><00:12:40.800><c> of</c>

00:12:41.110 --> 00:12:41.120 align:start position:0%
parent of p is going to be parent of
 

00:12:41.120 --> 00:12:43.269 align:start position:0%
parent of p is going to be parent of
its<00:12:41.440><c> parent</c><00:12:42.000><c> and</c><00:12:42.079><c> so</c><00:12:42.240><c> this</c><00:12:42.480><c> part</c><00:12:42.800><c> is</c><00:12:42.959><c> a</c><00:12:43.040><c> little</c>

00:12:43.269 --> 00:12:43.279 align:start position:0%
its parent and so this part is a little
 

00:12:43.279 --> 00:12:45.030 align:start position:0%
its parent and so this part is a little
bit<00:12:43.519><c> complicated</c><00:12:44.160><c> but</c><00:12:44.320><c> basically</c><00:12:44.800><c> it's</c>

00:12:45.030 --> 00:12:45.040 align:start position:0%
bit complicated but basically it's
 

00:12:45.040 --> 00:12:45.990 align:start position:0%
bit complicated but basically it's
making<00:12:45.360><c> sure</c><00:12:45.519><c> that</c><00:12:45.680><c> we</c>

00:12:45.990 --> 00:12:46.000 align:start position:0%
making sure that we
 

00:12:46.000 --> 00:12:48.629 align:start position:0%
making sure that we
shorten<00:12:46.480><c> the</c><00:12:46.639><c> links</c><00:12:47.120><c> as</c><00:12:47.360><c> we</c><00:12:47.519><c> go</c><00:12:47.920><c> up</c><00:12:48.079><c> the</c><00:12:48.320><c> chain</c>

00:12:48.629 --> 00:12:48.639 align:start position:0%
shorten the links as we go up the chain
 

00:12:48.639 --> 00:12:49.670 align:start position:0%
shorten the links as we go up the chain
of<00:12:48.880><c> parents</c>

00:12:49.670 --> 00:12:49.680 align:start position:0%
of parents
 

00:12:49.680 --> 00:12:51.750 align:start position:0%
of parents
so<00:12:49.839><c> if</c><00:12:50.000><c> we</c><00:12:50.160><c> had</c><00:12:50.320><c> to</c><00:12:50.399><c> go</c><00:12:50.639><c> up</c><00:12:50.800><c> the</c><00:12:51.040><c> link</c><00:12:51.360><c> one</c><00:12:51.600><c> more</c>

00:12:51.750 --> 00:12:51.760 align:start position:0%
so if we had to go up the link one more
 

00:12:51.760 --> 00:12:53.590 align:start position:0%
so if we had to go up the link one more
time<00:12:52.160><c> if</c><00:12:52.320><c> we</c><00:12:52.399><c> had</c><00:12:52.480><c> to</c><00:12:52.639><c> repeat</c><00:12:53.120><c> this</c>

00:12:53.590 --> 00:12:53.600 align:start position:0%
time if we had to repeat this
 

00:12:53.600 --> 00:12:55.430 align:start position:0%
time if we had to repeat this
find<00:12:53.920><c> operation</c><00:12:54.480><c> it</c><00:12:54.560><c> would</c><00:12:54.720><c> be</c><00:12:54.880><c> a</c><00:12:54.959><c> little</c><00:12:55.200><c> bit</c>

00:12:55.430 --> 00:12:55.440 align:start position:0%
find operation it would be a little bit
 

00:12:55.440 --> 00:12:57.509 align:start position:0%
find operation it would be a little bit
faster<00:12:55.920><c> the</c><00:12:56.079><c> next</c><00:12:56.320><c> time</c><00:12:56.560><c> that</c><00:12:56.720><c> we</c><00:12:56.880><c> did</c><00:12:57.200><c> it</c>

00:12:57.509 --> 00:12:57.519 align:start position:0%
faster the next time that we did it
 

00:12:57.519 --> 00:12:59.430 align:start position:0%
faster the next time that we did it
and<00:12:57.760><c> at</c><00:12:57.920><c> the</c><00:12:58.160><c> end</c><00:12:58.399><c> when</c><00:12:58.560><c> this</c><00:12:58.800><c> is</c><00:12:58.880><c> no</c><00:12:59.120><c> longer</c>

00:12:59.430 --> 00:12:59.440 align:start position:0%
and at the end when this is no longer
 

00:12:59.440 --> 00:13:00.790 align:start position:0%
and at the end when this is no longer
the<00:12:59.519><c> case</c><00:12:59.839><c> basically</c>

00:13:00.790 --> 00:13:00.800 align:start position:0%
the case basically
 

00:13:00.800 --> 00:13:02.790 align:start position:0%
the case basically
once<00:13:01.200><c> we've</c><00:13:01.440><c> gotten</c><00:13:01.680><c> to</c><00:13:01.839><c> the</c><00:13:02.000><c> root</c><00:13:02.320><c> parent</c><00:13:02.720><c> is</c>

00:13:02.790 --> 00:13:02.800 align:start position:0%
once we've gotten to the root parent is
 

00:13:02.800 --> 00:13:04.790 align:start position:0%
once we've gotten to the root parent is
when<00:13:02.959><c> we're</c><00:13:03.120><c> going</c><00:13:03.200><c> to</c><00:13:03.279><c> be</c><00:13:03.440><c> returning</c><00:13:04.000><c> p</c>

00:13:04.790 --> 00:13:04.800 align:start position:0%
when we're going to be returning p
 

00:13:04.800 --> 00:13:07.110 align:start position:0%
when we're going to be returning p
so<00:13:05.040><c> this</c><00:13:05.279><c> function</c><00:13:05.920><c> is</c><00:13:06.160><c> pretty</c><00:13:06.560><c> short</c><00:13:06.959><c> the</c>

00:13:07.110 --> 00:13:07.120 align:start position:0%
so this function is pretty short the
 

00:13:07.120 --> 00:13:08.150 align:start position:0%
so this function is pretty short the
next<00:13:07.440><c> one</c><00:13:07.600><c> that</c><00:13:07.680><c> we're</c><00:13:07.839><c> going</c><00:13:07.920><c> to</c><00:13:08.000><c> be</c>

00:13:08.150 --> 00:13:08.160 align:start position:0%
next one that we're going to be
 

00:13:08.160 --> 00:13:08.790 align:start position:0%
next one that we're going to be
implementing

00:13:08.790 --> 00:13:08.800 align:start position:0%
implementing
 

00:13:08.800 --> 00:13:11.590 align:start position:0%
implementing
is<00:13:09.360><c> the</c><00:13:09.680><c> union</c><00:13:10.240><c> function</c><00:13:11.040><c> so</c><00:13:11.200><c> if</c><00:13:11.360><c> we</c><00:13:11.440><c> were</c>

00:13:11.590 --> 00:13:11.600 align:start position:0%
is the union function so if we were
 

00:13:11.600 --> 00:13:14.150 align:start position:0%
is the union function so if we were
given<00:13:11.920><c> two</c><00:13:12.160><c> nodes</c><00:13:12.560><c> n1</c><00:13:13.040><c> and</c><00:13:13.200><c> n2</c><00:13:13.680><c> and</c><00:13:13.760><c> we</c><00:13:13.920><c> had</c><00:13:14.079><c> to</c>

00:13:14.150 --> 00:13:14.160 align:start position:0%
given two nodes n1 and n2 and we had to
 

00:13:14.160 --> 00:13:15.590 align:start position:0%
given two nodes n1 and n2 and we had to
union<00:13:14.480><c> them</c><00:13:14.720><c> together</c><00:13:15.120><c> that's</c><00:13:15.360><c> what</c><00:13:15.440><c> we're</c>

00:13:15.590 --> 00:13:15.600 align:start position:0%
union them together that's what we're
 

00:13:15.600 --> 00:13:16.470 align:start position:0%
union them together that's what we're
going<00:13:15.680><c> to</c><00:13:15.760><c> be</c><00:13:15.839><c> doing</c><00:13:16.160><c> so</c>

00:13:16.470 --> 00:13:16.480 align:start position:0%
going to be doing so
 

00:13:16.480 --> 00:13:18.949 align:start position:0%
going to be doing so
to<00:13:16.720><c> union</c><00:13:17.040><c> them</c><00:13:17.279><c> we</c><00:13:17.360><c> would</c><00:13:17.519><c> have</c><00:13:17.680><c> to</c><00:13:18.000><c> find</c><00:13:18.639><c> both</c>

00:13:18.949 --> 00:13:18.959 align:start position:0%
to union them we would have to find both
 

00:13:18.959 --> 00:13:20.629 align:start position:0%
to union them we would have to find both
of<00:13:19.040><c> their</c><00:13:19.279><c> root</c><00:13:19.680><c> parents</c><00:13:20.000><c> first</c><00:13:20.320><c> right</c><00:13:20.480><c> so</c>

00:13:20.629 --> 00:13:20.639 align:start position:0%
of their root parents first right so
 

00:13:20.639 --> 00:13:22.150 align:start position:0%
of their root parents first right so
that's<00:13:20.800><c> why</c><00:13:21.040><c> we</c><00:13:21.200><c> implemented</c><00:13:21.680><c> the</c><00:13:21.839><c> find</c>

00:13:22.150 --> 00:13:22.160 align:start position:0%
that's why we implemented the find
 

00:13:22.160 --> 00:13:23.750 align:start position:0%
that's why we implemented the find
function<00:13:22.560><c> first</c><00:13:22.959><c> so</c><00:13:23.120><c> we're</c><00:13:23.279><c> going</c><00:13:23.440><c> to</c><00:13:23.519><c> want</c><00:13:23.680><c> to</c>

00:13:23.750 --> 00:13:23.760 align:start position:0%
function first so we're going to want to
 

00:13:23.760 --> 00:13:26.949 align:start position:0%
function first so we're going to want to
get<00:13:23.920><c> p1</c><00:13:24.399><c> and</c><00:13:24.560><c> p2</c><00:13:25.040><c> the</c><00:13:25.200><c> parents</c><00:13:25.600><c> of</c><00:13:25.760><c> n1</c><00:13:26.240><c> and</c><00:13:26.399><c> n2</c>

00:13:26.949 --> 00:13:26.959 align:start position:0%
get p1 and p2 the parents of n1 and n2
 

00:13:26.959 --> 00:13:28.949 align:start position:0%
get p1 and p2 the parents of n1 and n2
we<00:13:27.120><c> can</c><00:13:27.279><c> do</c><00:13:27.440><c> that</c><00:13:27.519><c> with</c><00:13:27.760><c> our</c><00:13:27.920><c> find</c><00:13:28.240><c> function</c>

00:13:28.949 --> 00:13:28.959 align:start position:0%
we can do that with our find function
 

00:13:28.959 --> 00:13:30.470 align:start position:0%
we can do that with our find function
find<00:13:29.360><c> n1</c>

00:13:30.470 --> 00:13:30.480 align:start position:0%
find n1
 

00:13:30.480 --> 00:13:33.990 align:start position:0%
find n1
and<00:13:30.720><c> find</c><00:13:31.360><c> n2</c><00:13:32.399><c> one</c><00:13:32.800><c> case</c><00:13:33.200><c> is</c><00:13:33.440><c> that</c>

00:13:33.990 --> 00:13:34.000 align:start position:0%
and find n2 one case is that
 

00:13:34.000 --> 00:13:35.990 align:start position:0%
and find n2 one case is that
both<00:13:34.480><c> of</c><00:13:34.720><c> the</c><00:13:34.880><c> parents</c><00:13:35.360><c> are</c><00:13:35.519><c> equals</c><00:13:35.839><c> for</c>

00:13:35.990 --> 00:13:36.000 align:start position:0%
both of the parents are equals for
 

00:13:36.000 --> 00:13:37.990 align:start position:0%
both of the parents are equals for
example<00:13:36.399><c> p1</c><00:13:36.880><c> is</c><00:13:36.959><c> equal</c><00:13:37.200><c> to</c><00:13:37.360><c> p2</c>

00:13:37.990 --> 00:13:38.000 align:start position:0%
example p1 is equal to p2
 

00:13:38.000 --> 00:13:40.150 align:start position:0%
example p1 is equal to p2
in<00:13:38.160><c> that</c><00:13:38.399><c> case</c><00:13:38.639><c> we're</c><00:13:38.880><c> going</c><00:13:38.959><c> to</c><00:13:39.040><c> return</c><00:13:39.600><c> false</c>

00:13:40.150 --> 00:13:40.160 align:start position:0%
in that case we're going to return false
 

00:13:40.160 --> 00:13:41.590 align:start position:0%
in that case we're going to return false
because<00:13:40.399><c> we</c><00:13:40.560><c> cannot</c><00:13:40.959><c> complete</c><00:13:41.360><c> this</c>

00:13:41.590 --> 00:13:41.600 align:start position:0%
because we cannot complete this
 

00:13:41.600 --> 00:13:43.350 align:start position:0%
because we cannot complete this
operation<00:13:42.160><c> so</c><00:13:42.320><c> we're</c><00:13:42.480><c> going</c><00:13:42.639><c> to</c><00:13:42.800><c> say</c>

00:13:43.350 --> 00:13:43.360 align:start position:0%
operation so we're going to say
 

00:13:43.360 --> 00:13:46.870 align:start position:0%
operation so we're going to say
return<00:13:44.079><c> false</c><00:13:44.959><c> if</c><00:13:45.440><c> can't</c><00:13:45.839><c> complete</c><00:13:46.480><c> meaning</c>

00:13:46.870 --> 00:13:46.880 align:start position:0%
return false if can't complete meaning
 

00:13:46.880 --> 00:13:48.310 align:start position:0%
return false if can't complete meaning
they're<00:13:47.199><c> already</c><00:13:47.760><c> merged</c>

00:13:48.310 --> 00:13:48.320 align:start position:0%
they're already merged
 

00:13:48.320 --> 00:13:49.990 align:start position:0%
they're already merged
that's<00:13:48.560><c> how</c><00:13:48.720><c> we're</c><00:13:48.880><c> gonna</c><00:13:49.199><c> know</c><00:13:49.600><c> that</c><00:13:49.760><c> we</c>

00:13:49.990 --> 00:13:50.000 align:start position:0%
that's how we're gonna know that we
 

00:13:50.000 --> 00:13:52.069 align:start position:0%
that's how we're gonna know that we
found<00:13:50.320><c> a</c><00:13:50.399><c> redundant</c><00:13:51.120><c> connection</c><00:13:51.760><c> so</c><00:13:51.920><c> we'll</c>

00:13:52.069 --> 00:13:52.079 align:start position:0%
found a redundant connection so we'll
 

00:13:52.079 --> 00:13:53.750 align:start position:0%
found a redundant connection so we'll
return<00:13:52.560><c> false</c><00:13:52.959><c> if</c><00:13:53.120><c> they</c><00:13:53.279><c> have</c><00:13:53.440><c> the</c><00:13:53.519><c> same</c>

00:13:53.750 --> 00:13:53.760 align:start position:0%
return false if they have the same
 

00:13:53.760 --> 00:13:55.030 align:start position:0%
return false if they have the same
parent<00:13:54.079><c> if</c><00:13:54.160><c> they</c><00:13:54.399><c> don't</c><00:13:54.560><c> have</c><00:13:54.720><c> the</c><00:13:54.800><c> same</c>

00:13:55.030 --> 00:13:55.040 align:start position:0%
parent if they don't have the same
 

00:13:55.040 --> 00:13:56.550 align:start position:0%
parent if they don't have the same
parent<00:13:55.279><c> then</c><00:13:55.440><c> we're</c><00:13:55.600><c> gonna</c><00:13:55.839><c> union</c><00:13:56.160><c> them</c><00:13:56.399><c> we're</c>

00:13:56.550 --> 00:13:56.560 align:start position:0%
parent then we're gonna union them we're
 

00:13:56.560 --> 00:13:58.870 align:start position:0%
parent then we're gonna union them we're
gonna<00:13:56.720><c> be</c><00:13:56.880><c> unioning</c><00:13:57.440><c> them</c><00:13:57.680><c> by</c><00:13:58.000><c> rank</c><00:13:58.320><c> so</c><00:13:58.480><c> if</c>

00:13:58.870 --> 00:13:58.880 align:start position:0%
gonna be unioning them by rank so if
 

00:13:58.880 --> 00:14:02.069 align:start position:0%
gonna be unioning them by rank so if
the<00:13:59.040><c> rank</c><00:13:59.360><c> of</c><00:13:59.519><c> p1</c><00:14:00.399><c> is</c><00:14:00.800><c> greater</c><00:14:01.120><c> than</c><00:14:01.279><c> the</c><00:14:01.519><c> rank</c>

00:14:02.069 --> 00:14:02.079 align:start position:0%
the rank of p1 is greater than the rank
 

00:14:02.079 --> 00:14:05.350 align:start position:0%
the rank of p1 is greater than the rank
of<00:14:02.320><c> p2</c><00:14:03.279><c> that</c><00:14:03.519><c> means</c><00:14:03.760><c> that</c><00:14:04.000><c> rank</c><00:14:04.480><c> that</c><00:14:04.639><c> means</c><00:14:04.880><c> p1</c>

00:14:05.350 --> 00:14:05.360 align:start position:0%
of p2 that means that rank that means p1
 

00:14:05.360 --> 00:14:07.269 align:start position:0%
of p2 that means that rank that means p1
is<00:14:05.440><c> going</c><00:14:05.519><c> to</c><00:14:05.600><c> be</c><00:14:05.760><c> the</c><00:14:05.920><c> parent</c><00:14:06.320><c> of</c><00:14:06.480><c> p2</c>

00:14:07.269 --> 00:14:07.279 align:start position:0%
is going to be the parent of p2
 

00:14:07.279 --> 00:14:10.069 align:start position:0%
is going to be the parent of p2
if<00:14:07.440><c> the</c><00:14:07.600><c> opposite</c><00:14:08.079><c> is</c><00:14:08.240><c> true</c><00:14:08.880><c> then</c><00:14:09.279><c> that</c><00:14:09.519><c> means</c>

00:14:10.069 --> 00:14:10.079 align:start position:0%
if the opposite is true then that means
 

00:14:10.079 --> 00:14:11.990 align:start position:0%
if the opposite is true then that means
p2<00:14:10.480><c> is</c><00:14:10.560><c> going</c><00:14:10.639><c> to</c><00:14:10.720><c> be</c><00:14:10.880><c> the</c><00:14:10.959><c> parent</c><00:14:11.279><c> of</c><00:14:11.440><c> p1</c><00:14:11.920><c> in</c>

00:14:11.990 --> 00:14:12.000 align:start position:0%
p2 is going to be the parent of p1 in
 

00:14:12.000 --> 00:14:13.670 align:start position:0%
p2 is going to be the parent of p1 in
the<00:14:12.160><c> else</c><00:14:12.399><c> condition</c><00:14:12.800><c> but</c><00:14:12.959><c> let's</c><00:14:13.199><c> do</c><00:14:13.279><c> the</c><00:14:13.519><c> if</c>

00:14:13.670 --> 00:14:13.680 align:start position:0%
the else condition but let's do the if
 

00:14:13.680 --> 00:14:14.710 align:start position:0%
the else condition but let's do the if
condition<00:14:14.160><c> first</c>

00:14:14.710 --> 00:14:14.720 align:start position:0%
condition first
 

00:14:14.720 --> 00:14:16.710 align:start position:0%
condition first
so<00:14:14.959><c> p1</c><00:14:15.519><c> is</c><00:14:15.600><c> going</c><00:14:15.680><c> to</c><00:14:15.760><c> be</c><00:14:15.920><c> the</c><00:14:16.079><c> parent</c><00:14:16.399><c> so</c><00:14:16.560><c> what</c>

00:14:16.710 --> 00:14:16.720 align:start position:0%
so p1 is going to be the parent so what
 

00:14:16.720 --> 00:14:18.470 align:start position:0%
so p1 is going to be the parent so what
we're<00:14:16.880><c> going</c><00:14:16.959><c> to</c><00:14:17.040><c> do</c><00:14:17.279><c> is</c><00:14:17.440><c> for</c><00:14:17.680><c> p2</c><00:14:18.240><c> we're</c><00:14:18.399><c> going</c>

00:14:18.470 --> 00:14:18.480 align:start position:0%
we're going to do is for p2 we're going
 

00:14:18.480 --> 00:14:19.750 align:start position:0%
we're going to do is for p2 we're going
to<00:14:18.639><c> set</c><00:14:18.880><c> its</c><00:14:19.120><c> parent</c>

00:14:19.750 --> 00:14:19.760 align:start position:0%
to set its parent
 

00:14:19.760 --> 00:14:22.550 align:start position:0%
to set its parent
equal<00:14:20.240><c> to</c><00:14:20.399><c> p1</c><00:14:21.120><c> we</c><00:14:21.279><c> also</c><00:14:21.600><c> then</c><00:14:21.839><c> have</c><00:14:21.920><c> to</c><00:14:22.160><c> update</c>

00:14:22.550 --> 00:14:22.560 align:start position:0%
equal to p1 we also then have to update
 

00:14:22.560 --> 00:14:23.350 align:start position:0%
equal to p1 we also then have to update
the<00:14:22.880><c> rank</c>

00:14:23.350 --> 00:14:23.360 align:start position:0%
the rank
 

00:14:23.360 --> 00:14:26.230 align:start position:0%
the rank
of<00:14:23.600><c> p1</c><00:14:24.160><c> because</c><00:14:24.480><c> it's</c><00:14:24.800><c> now</c><00:14:25.279><c> has</c><00:14:25.600><c> more</c><00:14:25.920><c> children</c>

00:14:26.230 --> 00:14:26.240 align:start position:0%
of p1 because it's now has more children
 

00:14:26.240 --> 00:14:27.590 align:start position:0%
of p1 because it's now has more children
than<00:14:26.480><c> it</c><00:14:26.560><c> had</c><00:14:26.800><c> before</c>

00:14:27.590 --> 00:14:27.600 align:start position:0%
than it had before
 

00:14:27.600 --> 00:14:29.750 align:start position:0%
than it had before
so<00:14:28.000><c> we're</c><00:14:28.160><c> going</c><00:14:28.320><c> to</c><00:14:28.399><c> add</c><00:14:28.639><c> to</c><00:14:28.800><c> the</c><00:14:28.880><c> rank</c><00:14:29.199><c> of</c><00:14:29.279><c> p1</c>

00:14:29.750 --> 00:14:29.760 align:start position:0%
so we're going to add to the rank of p1
 

00:14:29.760 --> 00:14:32.230 align:start position:0%
so we're going to add to the rank of p1
basically<00:14:30.160><c> whatever</c><00:14:30.480><c> the</c><00:14:30.639><c> rank</c><00:14:30.959><c> of</c><00:14:31.199><c> p2</c><00:14:31.839><c> was</c>

00:14:32.230 --> 00:14:32.240 align:start position:0%
basically whatever the rank of p2 was
 

00:14:32.240 --> 00:14:35.269 align:start position:0%
basically whatever the rank of p2 was
prior<00:14:32.800><c> to</c><00:14:33.199><c> union</c><00:14:33.920><c> unioning</c><00:14:34.399><c> them</c><00:14:34.560><c> together</c>

00:14:35.269 --> 00:14:35.279 align:start position:0%
prior to union unioning them together
 

00:14:35.279 --> 00:14:36.870 align:start position:0%
prior to union unioning them together
in<00:14:35.440><c> the</c><00:14:35.600><c> else</c><00:14:35.920><c> condition</c><00:14:36.320><c> we're</c><00:14:36.480><c> basically</c>

00:14:36.870 --> 00:14:36.880 align:start position:0%
in the else condition we're basically
 

00:14:36.880 --> 00:14:38.710 align:start position:0%
in the else condition we're basically
going<00:14:36.959><c> to</c><00:14:37.040><c> be</c><00:14:37.199><c> do</c><00:14:37.360><c> the</c><00:14:37.600><c> doing</c><00:14:37.839><c> the</c><00:14:38.079><c> opposite</c><00:14:38.560><c> so</c>

00:14:38.710 --> 00:14:38.720 align:start position:0%
going to be do the doing the opposite so
 

00:14:38.720 --> 00:14:40.710 align:start position:0%
going to be do the doing the opposite so
for<00:14:38.959><c> p1</c><00:14:39.440><c> we're</c><00:14:39.600><c> going</c><00:14:39.680><c> to</c><00:14:39.839><c> set</c><00:14:40.079><c> its</c><00:14:40.320><c> parent</c>

00:14:40.710 --> 00:14:40.720 align:start position:0%
for p1 we're going to set its parent
 

00:14:40.720 --> 00:14:42.150 align:start position:0%
for p1 we're going to set its parent
equal<00:14:41.040><c> to</c><00:14:41.199><c> p2</c>

00:14:42.150 --> 00:14:42.160 align:start position:0%
equal to p2
 

00:14:42.160 --> 00:14:45.670 align:start position:0%
equal to p2
and<00:14:42.560><c> we're</c><00:14:42.720><c> going</c><00:14:42.880><c> to</c><00:14:43.040><c> add</c><00:14:43.600><c> to</c><00:14:43.760><c> the</c><00:14:44.079><c> rank</c><00:14:44.639><c> of</c><00:14:44.880><c> p2</c>

00:14:45.670 --> 00:14:45.680 align:start position:0%
and we're going to add to the rank of p2
 

00:14:45.680 --> 00:14:48.230 align:start position:0%
and we're going to add to the rank of p2
i<00:14:45.839><c> just</c><00:14:46.079><c> noticed</c><00:14:46.480><c> that</c><00:14:46.720><c> i</c><00:14:46.880><c> called</c><00:14:47.279><c> my</c><00:14:47.920><c> uh</c>

00:14:48.230 --> 00:14:48.240 align:start position:0%
i just noticed that i called my uh
 

00:14:48.240 --> 00:14:48.790 align:start position:0%
i just noticed that i called my uh
parent

00:14:48.790 --> 00:14:48.800 align:start position:0%
parent
 

00:14:48.800 --> 00:14:51.189 align:start position:0%
parent
array<00:14:49.360><c> parent</c><00:14:49.839><c> but</c><00:14:50.160><c> i've</c><00:14:50.320><c> been</c><00:14:50.639><c> referencing</c>

00:14:51.189 --> 00:14:51.199 align:start position:0%
array parent but i've been referencing
 

00:14:51.199 --> 00:14:52.389 align:start position:0%
array parent but i've been referencing
it<00:14:51.360><c> as</c><00:14:51.680><c> pair</c>

00:14:52.389 --> 00:14:52.399 align:start position:0%
it as pair
 

00:14:52.399 --> 00:14:55.430 align:start position:0%
it as pair
so<00:14:52.639><c> let's</c><00:14:52.800><c> just</c><00:14:53.040><c> shorten</c><00:14:53.360><c> this</c><00:14:53.680><c> to</c><00:14:54.079><c> par</c><00:14:55.279><c> and</c>

00:14:55.430 --> 00:14:55.440 align:start position:0%
so let's just shorten this to par and
 

00:14:55.440 --> 00:14:57.030 align:start position:0%
so let's just shorten this to par and
the<00:14:55.600><c> last</c><00:14:55.760><c> thing</c><00:14:55.920><c> we're</c><00:14:56.079><c> gonna</c><00:14:56.320><c> do</c><00:14:56.560><c> in</c><00:14:56.639><c> this</c><00:14:56.880><c> is</c>

00:14:57.030 --> 00:14:57.040 align:start position:0%
the last thing we're gonna do in this is
 

00:14:57.040 --> 00:14:58.710 align:start position:0%
the last thing we're gonna do in this is
return<00:14:57.519><c> true</c><00:14:57.920><c> if</c><00:14:58.000><c> we</c><00:14:58.160><c> were</c><00:14:58.320><c> able</c><00:14:58.560><c> to</c>

00:14:58.710 --> 00:14:58.720 align:start position:0%
return true if we were able to
 

00:14:58.720 --> 00:15:00.470 align:start position:0%
return true if we were able to
successfully<00:14:59.440><c> union</c><00:14:59.760><c> them</c><00:15:00.000><c> together</c><00:15:00.320><c> so</c>

00:15:00.470 --> 00:15:00.480 align:start position:0%
successfully union them together so
 

00:15:00.480 --> 00:15:01.750 align:start position:0%
successfully union them together so
let's<00:15:00.720><c> return</c><00:15:01.120><c> true</c>

00:15:01.750 --> 00:15:01.760 align:start position:0%
let's return true
 

00:15:01.760 --> 00:15:03.910 align:start position:0%
let's return true
and<00:15:01.920><c> that's</c><00:15:02.160><c> basically</c><00:15:02.639><c> the</c><00:15:02.800><c> entire</c><00:15:03.199><c> code</c><00:15:03.760><c> now</c>

00:15:03.910 --> 00:15:03.920 align:start position:0%
and that's basically the entire code now
 

00:15:03.920 --> 00:15:05.189 align:start position:0%
and that's basically the entire code now
we<00:15:04.079><c> get</c><00:15:04.240><c> to</c><00:15:04.320><c> the</c><00:15:04.480><c> easy</c><00:15:04.720><c> part</c><00:15:04.880><c> where</c><00:15:05.040><c> we're</c>

00:15:05.189 --> 00:15:05.199 align:start position:0%
we get to the easy part where we're
 

00:15:05.199 --> 00:15:06.790 align:start position:0%
we get to the easy part where we're
actually<00:15:05.519><c> going</c><00:15:05.600><c> to</c><00:15:05.680><c> be</c><00:15:05.839><c> calling</c><00:15:06.160><c> these</c><00:15:06.399><c> union</c>

00:15:06.790 --> 00:15:06.800 align:start position:0%
actually going to be calling these union
 

00:15:06.800 --> 00:15:07.910 align:start position:0%
actually going to be calling these union
find<00:15:07.199><c> functions</c>

00:15:07.910 --> 00:15:07.920 align:start position:0%
find functions
 

00:15:07.920 --> 00:15:09.910 align:start position:0%
find functions
so<00:15:08.079><c> let's</c><00:15:08.320><c> go</c><00:15:08.560><c> through</c><00:15:08.880><c> every</c><00:15:09.120><c> single</c><00:15:09.519><c> edge</c><00:15:09.760><c> so</c>

00:15:09.910 --> 00:15:09.920 align:start position:0%
so let's go through every single edge so
 

00:15:09.920 --> 00:15:12.629 align:start position:0%
so let's go through every single edge so
for<00:15:10.160><c> n1n2</c><00:15:11.199><c> this</c><00:15:11.440><c> pair</c><00:15:11.680><c> of</c><00:15:11.920><c> edges</c>

00:15:12.629 --> 00:15:12.639 align:start position:0%
for n1n2 this pair of edges
 

00:15:12.639 --> 00:15:14.629 align:start position:0%
for n1n2 this pair of edges
this<00:15:12.800><c> pair</c><00:15:13.040><c> of</c><00:15:13.199><c> nodes</c><00:15:13.680><c> in</c><00:15:13.839><c> our</c><00:15:14.079><c> edges</c><00:15:14.399><c> input</c>

00:15:14.629 --> 00:15:14.639 align:start position:0%
this pair of nodes in our edges input
 

00:15:14.639 --> 00:15:16.470 align:start position:0%
this pair of nodes in our edges input
array<00:15:15.199><c> we're</c><00:15:15.440><c> gonna</c><00:15:15.600><c> be</c><00:15:15.760><c> calling</c>

00:15:16.470 --> 00:15:16.480 align:start position:0%
array we're gonna be calling
 

00:15:16.480 --> 00:15:19.509 align:start position:0%
array we're gonna be calling
union<00:15:17.199><c> on</c><00:15:17.440><c> these</c><00:15:17.760><c> two</c><00:15:18.000><c> n1</c><00:15:18.560><c> and</c><00:15:18.800><c> two</c><00:15:19.279><c> and</c>

00:15:19.509 --> 00:15:19.519 align:start position:0%
union on these two n1 and two and
 

00:15:19.519 --> 00:15:22.550 align:start position:0%
union on these two n1 and two and
if<00:15:19.760><c> it</c><00:15:19.839><c> returns</c><00:15:20.399><c> false</c><00:15:20.800><c> so</c><00:15:21.040><c> if</c><00:15:21.360><c> not</c><00:15:21.920><c> the</c><00:15:22.079><c> result</c>

00:15:22.550 --> 00:15:22.560 align:start position:0%
if it returns false so if not the result
 

00:15:22.560 --> 00:15:23.670 align:start position:0%
if it returns false so if not the result
of<00:15:22.639><c> this</c><00:15:22.959><c> function</c>

00:15:23.670 --> 00:15:23.680 align:start position:0%
of this function
 

00:15:23.680 --> 00:15:27.269 align:start position:0%
of this function
then<00:15:24.079><c> we</c><00:15:24.240><c> have</c><00:15:24.480><c> to</c><00:15:24.880><c> return</c><00:15:25.680><c> this</c><00:15:26.079><c> edge</c><00:15:26.639><c> n1</c>

00:15:27.269 --> 00:15:27.279 align:start position:0%
then we have to return this edge n1
 

00:15:27.279 --> 00:15:29.350 align:start position:0%
then we have to return this edge n1
and<00:15:27.519><c> 2</c><00:15:27.839><c> as</c><00:15:28.000><c> the</c><00:15:28.160><c> resulting</c><00:15:28.720><c> edge</c><00:15:28.959><c> that</c><00:15:29.120><c> they're</c>

00:15:29.350 --> 00:15:29.360 align:start position:0%
and 2 as the resulting edge that they're
 

00:15:29.360 --> 00:15:31.670 align:start position:0%
and 2 as the resulting edge that they're
looking<00:15:29.680><c> for</c><00:15:30.160><c> and</c><00:15:30.320><c> we</c><00:15:30.560><c> know</c><00:15:30.800><c> for</c><00:15:31.120><c> sure</c>

00:15:31.670 --> 00:15:31.680 align:start position:0%
looking for and we know for sure
 

00:15:31.680 --> 00:15:34.550 align:start position:0%
looking for and we know for sure
it's<00:15:32.079><c> guaranteed</c><00:15:32.959><c> that</c><00:15:33.199><c> at</c><00:15:33.360><c> least</c><00:15:33.839><c> one</c><00:15:34.160><c> edge</c>

00:15:34.550 --> 00:15:34.560 align:start position:0%
it's guaranteed that at least one edge
 

00:15:34.560 --> 00:15:36.389 align:start position:0%
it's guaranteed that at least one edge
is<00:15:34.800><c> going</c><00:15:35.040><c> to</c><00:15:35.279><c> lead</c><00:15:35.600><c> to</c><00:15:35.759><c> a</c><00:15:35.920><c> redundant</c>

00:15:36.389 --> 00:15:36.399 align:start position:0%
is going to lead to a redundant
 

00:15:36.399 --> 00:15:37.990 align:start position:0%
is going to lead to a redundant
connection<00:15:36.880><c> in</c><00:15:36.959><c> this</c><00:15:37.199><c> problem</c><00:15:37.440><c> so</c><00:15:37.600><c> this</c><00:15:37.839><c> is</c>

00:15:37.990 --> 00:15:38.000 align:start position:0%
connection in this problem so this is
 

00:15:38.000 --> 00:15:39.430 align:start position:0%
connection in this problem so this is
definitely<00:15:38.480><c> going</c><00:15:38.639><c> to</c><00:15:38.800><c> execute</c><00:15:39.199><c> we</c><00:15:39.279><c> don't</c>

00:15:39.430 --> 00:15:39.440 align:start position:0%
definitely going to execute we don't
 

00:15:39.440 --> 00:15:41.110 align:start position:0%
definitely going to execute we don't
have<00:15:39.519><c> to</c><00:15:39.600><c> put</c><00:15:39.759><c> a</c><00:15:39.839><c> return</c><00:15:40.240><c> statement</c><00:15:40.720><c> out</c><00:15:40.880><c> here</c>

00:15:41.110 --> 00:15:41.120 align:start position:0%
have to put a return statement out here
 

00:15:41.120 --> 00:15:41.749 align:start position:0%
have to put a return statement out here
so<00:15:41.360><c> this</c>

00:15:41.749 --> 00:15:41.759 align:start position:0%
so this
 

00:15:41.759 --> 00:15:44.230 align:start position:0%
so this
is<00:15:42.000><c> the</c><00:15:42.240><c> entire</c><00:15:42.720><c> code</c><00:15:43.279><c> so</c><00:15:43.600><c> i</c><00:15:43.680><c> hope</c><00:15:43.839><c> that</c><00:15:44.000><c> you</c>

00:15:44.230 --> 00:15:44.240 align:start position:0%
is the entire code so i hope that you
 

00:15:44.240 --> 00:15:45.430 align:start position:0%
is the entire code so i hope that you
learned<00:15:44.480><c> something</c><00:15:44.800><c> today</c><00:15:45.040><c> i</c><00:15:45.120><c> hope</c><00:15:45.279><c> this</c>

00:15:45.430 --> 00:15:45.440 align:start position:0%
learned something today i hope this
 

00:15:45.440 --> 00:15:46.870 align:start position:0%
learned something today i hope this
video<00:15:45.759><c> was</c><00:15:45.920><c> helpful</c><00:15:46.240><c> maybe</c><00:15:46.480><c> you</c><00:15:46.639><c> learned</c>

00:15:46.870 --> 00:15:46.880 align:start position:0%
video was helpful maybe you learned
 

00:15:46.880 --> 00:15:48.310 align:start position:0%
video was helpful maybe you learned
union<00:15:47.199><c> finding</c><00:15:47.680><c> it</c><00:15:47.759><c> today</c>

00:15:48.310 --> 00:15:48.320 align:start position:0%
union finding it today
 

00:15:48.320 --> 00:15:49.590 align:start position:0%
union finding it today
and<00:15:48.480><c> it's</c><00:15:48.639><c> usually</c><00:15:48.959><c> something</c><00:15:49.279><c> that</c><00:15:49.360><c> you</c><00:15:49.519><c> can</c>

00:15:49.590 --> 00:15:49.600 align:start position:0%
and it's usually something that you can
 

00:15:49.600 --> 00:15:51.670 align:start position:0%
and it's usually something that you can
just<00:15:49.759><c> memorize</c><00:15:50.320><c> that</c><00:15:50.560><c> if</c><00:15:50.720><c> you</c><00:15:50.880><c> need</c><00:15:51.120><c> to</c>

00:15:51.670 --> 00:15:51.680 align:start position:0%
just memorize that if you need to
 

00:15:51.680 --> 00:15:53.509 align:start position:0%
just memorize that if you need to
so<00:15:51.839><c> i</c><00:15:51.920><c> hope</c><00:15:52.079><c> this</c><00:15:52.240><c> was</c><00:15:52.399><c> helpful</c><00:15:52.880><c> if</c><00:15:53.040><c> it</c><00:15:53.199><c> was</c>

00:15:53.509 --> 00:15:53.519 align:start position:0%
so i hope this was helpful if it was
 

00:15:53.519 --> 00:15:55.189 align:start position:0%
so i hope this was helpful if it was
please<00:15:53.839><c> like</c><00:15:54.079><c> and</c><00:15:54.160><c> subscribe</c><00:15:54.639><c> it</c><00:15:54.800><c> supports</c>

00:15:55.189 --> 00:15:55.199 align:start position:0%
please like and subscribe it supports
 

00:15:55.199 --> 00:15:57.189 align:start position:0%
please like and subscribe it supports
the<00:15:55.279><c> channel</c><00:15:55.680><c> a</c><00:15:55.920><c> lot</c><00:15:56.240><c> and</c><00:15:56.399><c> i'll</c><00:15:56.560><c> hopefully</c>

00:15:57.189 --> 00:15:57.199 align:start position:0%
the channel a lot and i'll hopefully
 

00:15:57.199 --> 00:16:05.199 align:start position:0%
the channel a lot and i'll hopefully
see<00:15:57.360><c> you</c><00:15:57.519><c> pretty</c><00:15:57.759><c> soon</c><00:15:58.240><c> thanks</c><00:15:58.480><c> for</c><00:16:02.199><c> watching</c>

