WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.589 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c>

00:00:01.589 --> 00:00:01.599 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.599 --> 00:00:03.429 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.760><c> some</c><00:00:01.920><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.639><c> today</c><00:00:02.879><c> so</c><00:00:03.040><c> today</c>

00:00:03.429 --> 00:00:03.439 align:start position:0%
write some more neat code today so today
 

00:00:03.439 --> 00:00:06.150 align:start position:0%
write some more neat code today so today
let's<00:00:03.600><c> solve</c><00:00:03.919><c> the</c><00:00:04.080><c> problem</c><00:00:04.640><c> rotting</c><00:00:05.200><c> oranges</c>

00:00:06.150 --> 00:00:06.160 align:start position:0%
let's solve the problem rotting oranges
 

00:00:06.160 --> 00:00:08.710 align:start position:0%
let's solve the problem rotting oranges
we're<00:00:06.319><c> given</c><00:00:06.640><c> an</c><00:00:06.879><c> m</c><00:00:07.120><c> by</c><00:00:07.440><c> n</c><00:00:07.839><c> grid</c><00:00:08.240><c> where</c><00:00:08.480><c> each</c>

00:00:08.710 --> 00:00:08.720 align:start position:0%
we're given an m by n grid where each
 

00:00:08.720 --> 00:00:10.390 align:start position:0%
we're given an m by n grid where each
cell<00:00:09.040><c> could</c><00:00:09.200><c> have</c><00:00:09.360><c> three</c><00:00:09.679><c> different</c><00:00:10.000><c> values</c>

00:00:10.390 --> 00:00:10.400 align:start position:0%
cell could have three different values
 

00:00:10.400 --> 00:00:11.990 align:start position:0%
cell could have three different values
it<00:00:10.480><c> could</c><00:00:10.639><c> have</c><00:00:10.800><c> a</c><00:00:10.880><c> zero</c><00:00:11.200><c> which</c><00:00:11.440><c> represents</c>

00:00:11.990 --> 00:00:12.000 align:start position:0%
it could have a zero which represents
 

00:00:12.000 --> 00:00:13.350 align:start position:0%
it could have a zero which represents
empty<00:00:12.320><c> it</c><00:00:12.400><c> could</c><00:00:12.559><c> have</c><00:00:12.639><c> a</c><00:00:12.799><c> one</c><00:00:13.120><c> which</c>

00:00:13.350 --> 00:00:13.360 align:start position:0%
empty it could have a one which
 

00:00:13.360 --> 00:00:16.070 align:start position:0%
empty it could have a one which
represents<00:00:13.920><c> a</c><00:00:14.160><c> fresh</c><00:00:14.639><c> orange</c><00:00:15.599><c> or</c><00:00:15.759><c> it</c><00:00:15.839><c> could</c><00:00:15.920><c> be</c>

00:00:16.070 --> 00:00:16.080 align:start position:0%
represents a fresh orange or it could be
 

00:00:16.080 --> 00:00:19.269 align:start position:0%
represents a fresh orange or it could be
a<00:00:16.320><c> two</c><00:00:16.800><c> which</c><00:00:17.119><c> represents</c><00:00:17.760><c> a</c><00:00:18.000><c> rotten</c><00:00:18.560><c> orange</c>

00:00:19.269 --> 00:00:19.279 align:start position:0%
a two which represents a rotten orange
 

00:00:19.279 --> 00:00:21.990 align:start position:0%
a two which represents a rotten orange
every<00:00:19.760><c> minute</c><00:00:20.080><c> that</c><00:00:20.320><c> passes</c><00:00:21.039><c> any</c><00:00:21.520><c> fresh</c>

00:00:21.990 --> 00:00:22.000 align:start position:0%
every minute that passes any fresh
 

00:00:22.000 --> 00:00:24.550 align:start position:0%
every minute that passes any fresh
orange<00:00:22.640><c> that</c><00:00:22.960><c> is</c><00:00:23.279><c> four</c><00:00:23.600><c> directionally</c>

00:00:24.550 --> 00:00:24.560 align:start position:0%
orange that is four directionally
 

00:00:24.560 --> 00:00:28.150 align:start position:0%
orange that is four directionally
adjacent<00:00:25.199><c> meaning</c><00:00:25.599><c> either</c><00:00:26.240><c> up</c><00:00:26.720><c> down</c><00:00:27.439><c> left</c><00:00:27.840><c> or</c>

00:00:28.150 --> 00:00:28.160 align:start position:0%
adjacent meaning either up down left or
 

00:00:28.160 --> 00:00:30.710 align:start position:0%
adjacent meaning either up down left or
right<00:00:28.720><c> so</c><00:00:28.880><c> if</c><00:00:29.039><c> it's</c><00:00:29.199><c> right</c><00:00:29.519><c> next</c><00:00:29.760><c> to</c><00:00:30.000><c> a</c><00:00:30.240><c> rotten</c>

00:00:30.710 --> 00:00:30.720 align:start position:0%
right so if it's right next to a rotten
 

00:00:30.720 --> 00:00:33.590 align:start position:0%
right so if it's right next to a rotten
orange<00:00:31.279><c> then</c><00:00:31.519><c> that</c><00:00:31.840><c> fresh</c><00:00:32.239><c> orange</c><00:00:32.719><c> will</c><00:00:33.040><c> also</c>

00:00:33.590 --> 00:00:33.600 align:start position:0%
orange then that fresh orange will also
 

00:00:33.600 --> 00:00:36.229 align:start position:0%
orange then that fresh orange will also
become<00:00:34.480><c> rotten</c><00:00:34.960><c> we</c><00:00:35.120><c> want</c><00:00:35.360><c> to</c><00:00:35.520><c> return</c><00:00:36.000><c> the</c>

00:00:36.229 --> 00:00:36.239 align:start position:0%
become rotten we want to return the
 

00:00:36.239 --> 00:00:38.549 align:start position:0%
become rotten we want to return the
minimum<00:00:36.719><c> number</c><00:00:37.040><c> of</c><00:00:37.280><c> minutes</c><00:00:37.760><c> that</c><00:00:38.160><c> must</c>

00:00:38.549 --> 00:00:38.559 align:start position:0%
minimum number of minutes that must
 

00:00:38.559 --> 00:00:42.869 align:start position:0%
minimum number of minutes that must
elapse<00:00:39.360><c> until</c><00:00:40.000><c> no</c><00:00:40.480><c> fresh</c><00:00:41.040><c> orange</c><00:00:41.680><c> exists</c><00:00:42.559><c> but</c>

00:00:42.869 --> 00:00:42.879 align:start position:0%
elapse until no fresh orange exists but
 

00:00:42.879 --> 00:00:45.510 align:start position:0%
elapse until no fresh orange exists but
it<00:00:43.120><c> might</c><00:00:43.360><c> be</c><00:00:43.680><c> impossible</c><00:00:44.719><c> you</c><00:00:44.800><c> know</c><00:00:45.039><c> suppose</c>

00:00:45.510 --> 00:00:45.520 align:start position:0%
it might be impossible you know suppose
 

00:00:45.520 --> 00:00:48.229 align:start position:0%
it might be impossible you know suppose
if<00:00:45.760><c> a</c><00:00:45.840><c> fresh</c><00:00:46.239><c> orange</c><00:00:46.800><c> was</c><00:00:47.039><c> actually</c><00:00:47.520><c> not</c><00:00:47.920><c> next</c>

00:00:48.229 --> 00:00:48.239 align:start position:0%
if a fresh orange was actually not next
 

00:00:48.239 --> 00:00:51.029 align:start position:0%
if a fresh orange was actually not next
to<00:00:48.559><c> any</c><00:00:48.800><c> other</c><00:00:49.039><c> oranges</c><00:00:49.680><c> at</c><00:00:50.000><c> all</c><00:00:50.480><c> including</c>

00:00:51.029 --> 00:00:51.039 align:start position:0%
to any other oranges at all including
 

00:00:51.039 --> 00:00:52.630 align:start position:0%
to any other oranges at all including
any<00:00:51.280><c> rotten</c><00:00:51.680><c> oranges</c><00:00:52.000><c> then</c><00:00:52.239><c> that</c><00:00:52.399><c> fresh</c>

00:00:52.630 --> 00:00:52.640 align:start position:0%
any rotten oranges then that fresh
 

00:00:52.640 --> 00:00:54.950 align:start position:0%
any rotten oranges then that fresh
orange<00:00:52.960><c> would</c><00:00:53.280><c> never</c><00:00:53.600><c> become</c><00:00:54.079><c> rotten</c><00:00:54.480><c> so</c><00:00:54.800><c> if</c>

00:00:54.950 --> 00:00:54.960 align:start position:0%
orange would never become rotten so if
 

00:00:54.960 --> 00:00:57.270 align:start position:0%
orange would never become rotten so if
it's<00:00:55.120><c> not</c><00:00:55.440><c> possible</c><00:00:56.320><c> then</c><00:00:56.480><c> we</c><00:00:56.640><c> can</c><00:00:56.800><c> return</c>

00:00:57.270 --> 00:00:57.280 align:start position:0%
it's not possible then we can return
 

00:00:57.280 --> 00:00:59.189 align:start position:0%
it's not possible then we can return
negative<00:00:57.600><c> one</c><00:00:58.000><c> but</c><00:00:58.160><c> if</c><00:00:58.320><c> it</c><00:00:58.480><c> is</c><00:00:58.640><c> possible</c><00:00:59.039><c> we</c>

00:00:59.189 --> 00:00:59.199 align:start position:0%
negative one but if it is possible we
 

00:00:59.199 --> 00:01:01.029 align:start position:0%
negative one but if it is possible we
return<00:00:59.600><c> the</c><00:00:59.680><c> minimum</c><00:01:00.160><c> number</c><00:01:00.399><c> of</c><00:01:00.559><c> minutes</c>

00:01:01.029 --> 00:01:01.039 align:start position:0%
return the minimum number of minutes
 

00:01:01.039 --> 00:01:02.950 align:start position:0%
return the minimum number of minutes
that<00:01:01.280><c> it</c><00:01:01.440><c> takes</c><00:01:02.079><c> so</c><00:01:02.239><c> you</c><00:01:02.320><c> can</c><00:01:02.480><c> see</c><00:01:02.640><c> in</c><00:01:02.719><c> this</c>

00:01:02.950 --> 00:01:02.960 align:start position:0%
that it takes so you can see in this
 

00:01:02.960 --> 00:01:04.869 align:start position:0%
that it takes so you can see in this
example<00:01:03.359><c> which</c><00:01:03.520><c> is</c><00:01:03.680><c> actually</c><00:01:04.000><c> a</c><00:01:04.080><c> very</c><00:01:04.479><c> simple</c>

00:01:04.869 --> 00:01:04.879 align:start position:0%
example which is actually a very simple
 

00:01:04.879 --> 00:01:07.750 align:start position:0%
example which is actually a very simple
one<00:01:05.519><c> because</c><00:01:06.000><c> we</c><00:01:06.159><c> are</c><00:01:06.320><c> only</c><00:01:06.640><c> given</c><00:01:06.960><c> a</c><00:01:07.200><c> single</c>

00:01:07.750 --> 00:01:07.760 align:start position:0%
one because we are only given a single
 

00:01:07.760 --> 00:01:10.390 align:start position:0%
one because we are only given a single
rotten<00:01:08.240><c> orange</c><00:01:08.799><c> but</c><00:01:09.280><c> we</c><00:01:09.520><c> could</c><00:01:09.840><c> be</c><00:01:10.000><c> given</c>

00:01:10.390 --> 00:01:10.400 align:start position:0%
rotten orange but we could be given
 

00:01:10.400 --> 00:01:12.469 align:start position:0%
rotten orange but we could be given
multiple<00:01:10.880><c> rotten</c><00:01:11.200><c> oranges</c><00:01:11.680><c> but</c><00:01:11.920><c> in</c><00:01:12.000><c> this</c><00:01:12.240><c> case</c>

00:01:12.469 --> 00:01:12.479 align:start position:0%
multiple rotten oranges but in this case
 

00:01:12.479 --> 00:01:14.310 align:start position:0%
multiple rotten oranges but in this case
we<00:01:12.640><c> see</c><00:01:12.799><c> that</c><00:01:13.040><c> this</c><00:01:13.360><c> is</c><00:01:13.439><c> the</c><00:01:13.600><c> rotten</c><00:01:13.920><c> orange</c>

00:01:14.310 --> 00:01:14.320 align:start position:0%
we see that this is the rotten orange
 

00:01:14.320 --> 00:01:15.990 align:start position:0%
we see that this is the rotten orange
right<00:01:14.640><c> right</c><00:01:14.799><c> now</c><00:01:14.960><c> we're</c><00:01:15.200><c> at</c><00:01:15.280><c> time</c><00:01:15.600><c> equals</c>

00:01:15.990 --> 00:01:16.000 align:start position:0%
right right now we're at time equals
 

00:01:16.000 --> 00:01:18.390 align:start position:0%
right right now we're at time equals
zero<00:01:16.720><c> and</c><00:01:17.040><c> let's</c><00:01:17.200><c> say</c><00:01:17.439><c> one</c><00:01:17.600><c> unit</c><00:01:17.920><c> of</c><00:01:18.000><c> time</c>

00:01:18.390 --> 00:01:18.400 align:start position:0%
zero and let's say one unit of time
 

00:01:18.400 --> 00:01:20.550 align:start position:0%
zero and let's say one unit of time
passes<00:01:18.799><c> now</c><00:01:18.960><c> we're</c><00:01:19.119><c> at</c><00:01:19.200><c> time</c><00:01:19.520><c> equals</c><00:01:19.759><c> one</c><00:01:20.320><c> what</c>

00:01:20.550 --> 00:01:20.560 align:start position:0%
passes now we're at time equals one what
 

00:01:20.560 --> 00:01:22.870 align:start position:0%
passes now we're at time equals one what
happened<00:01:20.960><c> well</c><00:01:21.280><c> the</c><00:01:21.520><c> adjacent</c><00:01:22.159><c> oranges</c><00:01:22.640><c> to</c>

00:01:22.870 --> 00:01:22.880 align:start position:0%
happened well the adjacent oranges to
 

00:01:22.880 --> 00:01:24.950 align:start position:0%
happened well the adjacent oranges to
the<00:01:22.960><c> rotten</c><00:01:23.360><c> one</c><00:01:23.680><c> also</c><00:01:24.000><c> became</c><00:01:24.400><c> rotten</c><00:01:24.720><c> so</c>

00:01:24.950 --> 00:01:24.960 align:start position:0%
the rotten one also became rotten so
 

00:01:24.960 --> 00:01:27.429 align:start position:0%
the rotten one also became rotten so
this<00:01:25.280><c> is</c><00:01:25.439><c> rotten</c><00:01:25.759><c> now</c><00:01:26.240><c> and</c><00:01:26.560><c> this</c><00:01:26.880><c> is</c><00:01:27.040><c> rotten</c>

00:01:27.429 --> 00:01:27.439 align:start position:0%
this is rotten now and this is rotten
 

00:01:27.439 --> 00:01:29.749 align:start position:0%
this is rotten now and this is rotten
now<00:01:27.840><c> okay</c><00:01:28.159><c> now</c><00:01:28.400><c> another</c><00:01:28.720><c> unit</c><00:01:29.040><c> of</c><00:01:29.119><c> time</c><00:01:29.360><c> passes</c>

00:01:29.749 --> 00:01:29.759 align:start position:0%
now okay now another unit of time passes
 

00:01:29.759 --> 00:01:31.990 align:start position:0%
now okay now another unit of time passes
it's<00:01:29.840><c> time</c><00:01:30.079><c> equals</c><00:01:30.400><c> to</c><00:01:30.720><c> what</c><00:01:30.880><c> happened</c><00:01:31.520><c> well</c>

00:01:31.990 --> 00:01:32.000 align:start position:0%
it's time equals to what happened well
 

00:01:32.000 --> 00:01:33.270 align:start position:0%
it's time equals to what happened well
all<00:01:32.159><c> the</c><00:01:32.320><c> other</c><00:01:32.560><c> oranges</c><00:01:32.880><c> which</c><00:01:33.119><c> were</c>

00:01:33.270 --> 00:01:33.280 align:start position:0%
all the other oranges which were
 

00:01:33.280 --> 00:01:35.030 align:start position:0%
all the other oranges which were
adjacent<00:01:33.759><c> to</c><00:01:33.920><c> rotten</c><00:01:34.240><c> oranges</c><00:01:34.640><c> like</c><00:01:34.799><c> these</c>

00:01:35.030 --> 00:01:35.040 align:start position:0%
adjacent to rotten oranges like these
 

00:01:35.040 --> 00:01:37.590 align:start position:0%
adjacent to rotten oranges like these
two<00:01:35.360><c> also</c><00:01:35.759><c> became</c><00:01:36.320><c> rotten</c><00:01:36.880><c> okay</c><00:01:37.200><c> now</c><00:01:37.360><c> we're</c><00:01:37.520><c> at</c>

00:01:37.590 --> 00:01:37.600 align:start position:0%
two also became rotten okay now we're at
 

00:01:37.600 --> 00:01:39.510 align:start position:0%
two also became rotten okay now we're at
time<00:01:37.840><c> equals</c><00:01:38.159><c> three</c><00:01:38.400><c> what</c><00:01:38.640><c> happened</c><00:01:39.280><c> well</c>

00:01:39.510 --> 00:01:39.520 align:start position:0%
time equals three what happened well
 

00:01:39.520 --> 00:01:41.350 align:start position:0%
time equals three what happened well
this<00:01:39.920><c> orange</c><00:01:40.320><c> which</c><00:01:40.479><c> is</c><00:01:40.640><c> adjacent</c><00:01:41.040><c> to</c><00:01:41.200><c> a</c>

00:01:41.350 --> 00:01:41.360 align:start position:0%
this orange which is adjacent to a
 

00:01:41.360 --> 00:01:43.190 align:start position:0%
this orange which is adjacent to a
rotten<00:01:41.680><c> orange</c><00:01:42.000><c> also</c><00:01:42.320><c> became</c><00:01:42.720><c> rotten</c><00:01:43.040><c> now</c>

00:01:43.190 --> 00:01:43.200 align:start position:0%
rotten orange also became rotten now
 

00:01:43.200 --> 00:01:45.830 align:start position:0%
rotten orange also became rotten now
we're<00:01:43.360><c> at</c><00:01:43.439><c> time</c><00:01:43.680><c> equals</c><00:01:44.000><c> four</c><00:01:44.560><c> and</c><00:01:45.040><c> this</c><00:01:45.520><c> last</c>

00:01:45.830 --> 00:01:45.840 align:start position:0%
we're at time equals four and this last
 

00:01:45.840 --> 00:01:48.069 align:start position:0%
we're at time equals four and this last
orange<00:01:46.320><c> also</c><00:01:46.640><c> became</c><00:01:47.040><c> rotten</c><00:01:47.680><c> because</c><00:01:47.920><c> it's</c>

00:01:48.069 --> 00:01:48.079 align:start position:0%
orange also became rotten because it's
 

00:01:48.079 --> 00:01:49.910 align:start position:0%
orange also became rotten because it's
next<00:01:48.320><c> to</c><00:01:48.479><c> a</c><00:01:48.640><c> rock</c><00:01:48.960><c> it's</c><00:01:49.200><c> next</c><00:01:49.360><c> to</c><00:01:49.520><c> a</c><00:01:49.600><c> rotten</c>

00:01:49.910 --> 00:01:49.920 align:start position:0%
next to a rock it's next to a rotten
 

00:01:49.920 --> 00:01:52.389 align:start position:0%
next to a rock it's next to a rotten
orange<00:01:50.479><c> so</c><00:01:50.720><c> at</c><00:01:50.880><c> time</c><00:01:51.119><c> equals</c><00:01:51.520><c> four</c>

00:01:52.389 --> 00:01:52.399 align:start position:0%
orange so at time equals four
 

00:01:52.399 --> 00:01:55.030 align:start position:0%
orange so at time equals four
four<00:01:53.119><c> minutes</c><00:01:53.520><c> later</c><00:01:54.240><c> all</c><00:01:54.479><c> oranges</c><00:01:54.960><c> are</c>

00:01:55.030 --> 00:01:55.040 align:start position:0%
four minutes later all oranges are
 

00:01:55.040 --> 00:01:56.950 align:start position:0%
four minutes later all oranges are
rotten<00:01:55.360><c> so</c><00:01:55.600><c> we</c><00:01:55.759><c> return</c><00:01:56.159><c> four</c><00:01:56.399><c> that's</c><00:01:56.640><c> exactly</c>

00:01:56.950 --> 00:01:56.960 align:start position:0%
rotten so we return four that's exactly
 

00:01:56.960 --> 00:01:59.350 align:start position:0%
rotten so we return four that's exactly
what<00:01:57.119><c> they</c><00:01:57.280><c> expect</c><00:01:57.920><c> in</c><00:01:58.240><c> this</c><00:01:58.479><c> example</c><00:01:59.119><c> let's</c>

00:01:59.350 --> 00:01:59.360 align:start position:0%
what they expect in this example let's
 

00:01:59.360 --> 00:02:01.190 align:start position:0%
what they expect in this example let's
say<00:01:59.600><c> this</c><00:01:59.840><c> is</c><00:01:59.920><c> the</c><00:02:00.079><c> grid</c><00:02:00.399><c> that</c><00:02:00.479><c> we</c><00:02:00.640><c> were</c><00:02:00.799><c> given</c>

00:02:01.190 --> 00:02:01.200 align:start position:0%
say this is the grid that we were given
 

00:02:01.200 --> 00:02:03.270 align:start position:0%
say this is the grid that we were given
and<00:02:01.439><c> these</c><00:02:01.759><c> orange</c><00:02:02.079><c> things</c><00:02:02.399><c> are</c><00:02:02.479><c> the</c><00:02:02.640><c> oranges</c>

00:02:03.270 --> 00:02:03.280 align:start position:0%
and these orange things are the oranges
 

00:02:03.280 --> 00:02:05.830 align:start position:0%
and these orange things are the oranges
and<00:02:03.360><c> let's</c><00:02:03.520><c> say</c><00:02:03.840><c> these</c><00:02:04.240><c> two</c><00:02:04.880><c> initially</c><00:02:05.600><c> were</c>

00:02:05.830 --> 00:02:05.840 align:start position:0%
and let's say these two initially were
 

00:02:05.840 --> 00:02:08.550 align:start position:0%
and let's say these two initially were
rotten<00:02:06.640><c> what</c><00:02:06.880><c> kind</c><00:02:07.040><c> of</c><00:02:07.280><c> algorithm</c><00:02:07.759><c> can</c><00:02:08.000><c> we</c><00:02:08.239><c> do</c>

00:02:08.550 --> 00:02:08.560 align:start position:0%
rotten what kind of algorithm can we do
 

00:02:08.560 --> 00:02:10.550 align:start position:0%
rotten what kind of algorithm can we do
to<00:02:08.879><c> make</c><00:02:09.039><c> sure</c><00:02:09.200><c> that</c><00:02:09.360><c> the</c><00:02:09.520><c> adjacent</c><00:02:10.080><c> oranges</c>

00:02:10.550 --> 00:02:10.560 align:start position:0%
to make sure that the adjacent oranges
 

00:02:10.560 --> 00:02:12.390 align:start position:0%
to make sure that the adjacent oranges
also<00:02:10.879><c> become</c><00:02:11.200><c> rotten</c><00:02:11.520><c> and</c><00:02:11.599><c> then</c><00:02:11.840><c> track</c><00:02:12.160><c> the</c>

00:02:12.390 --> 00:02:12.400 align:start position:0%
also become rotten and then track the
 

00:02:12.400 --> 00:02:15.110 align:start position:0%
also become rotten and then track the
time<00:02:12.959><c> that</c><00:02:13.200><c> it</c><00:02:13.280><c> takes</c><00:02:14.080><c> for</c><00:02:14.560><c> you</c><00:02:14.640><c> know</c><00:02:14.879><c> each</c>

00:02:15.110 --> 00:02:15.120 align:start position:0%
time that it takes for you know each
 

00:02:15.120 --> 00:02:17.270 align:start position:0%
time that it takes for you know each
layer<00:02:15.440><c> to</c><00:02:15.599><c> become</c><00:02:16.000><c> rotten</c><00:02:16.720><c> well</c><00:02:16.959><c> you</c><00:02:17.120><c> could</c>

00:02:17.270 --> 00:02:17.280 align:start position:0%
layer to become rotten well you could
 

00:02:17.280 --> 00:02:19.350 align:start position:0%
layer to become rotten well you could
try<00:02:17.599><c> a</c><00:02:17.760><c> dfs</c><00:02:18.319><c> right</c><00:02:18.480><c> that's</c><00:02:18.720><c> like</c><00:02:18.879><c> the</c><00:02:19.040><c> first</c>

00:02:19.350 --> 00:02:19.360 align:start position:0%
try a dfs right that's like the first
 

00:02:19.360 --> 00:02:21.430 align:start position:0%
try a dfs right that's like the first
graph<00:02:19.760><c> algorithm</c><00:02:20.160><c> that</c><00:02:20.239><c> most</c><00:02:20.480><c> people</c><00:02:20.800><c> try</c><00:02:21.280><c> in</c>

00:02:21.430 --> 00:02:21.440 align:start position:0%
graph algorithm that most people try in
 

00:02:21.440 --> 00:02:23.190 align:start position:0%
graph algorithm that most people try in
this<00:02:21.680><c> case</c><00:02:22.080><c> it's</c><00:02:22.319><c> not</c><00:02:22.480><c> really</c><00:02:22.720><c> going</c><00:02:22.800><c> to</c><00:02:22.959><c> work</c>

00:02:23.190 --> 00:02:23.200 align:start position:0%
this case it's not really going to work
 

00:02:23.200 --> 00:02:25.270 align:start position:0%
this case it's not really going to work
we<00:02:23.360><c> run</c><00:02:23.520><c> a</c><00:02:23.599><c> dfs</c><00:02:24.080><c> let's</c><00:02:24.239><c> say</c><00:02:24.480><c> on</c><00:02:24.720><c> just</c><00:02:25.040><c> one</c><00:02:25.200><c> of</c>

00:02:25.270 --> 00:02:25.280 align:start position:0%
we run a dfs let's say on just one of
 

00:02:25.280 --> 00:02:26.790 align:start position:0%
we run a dfs let's say on just one of
the<00:02:25.440><c> or</c><00:02:25.599><c> the</c><00:02:25.760><c> rotten</c><00:02:26.080><c> oranges</c><00:02:26.400><c> let's</c><00:02:26.560><c> say</c><00:02:26.720><c> we</c>

00:02:26.790 --> 00:02:26.800 align:start position:0%
the or the rotten oranges let's say we
 

00:02:26.800 --> 00:02:29.910 align:start position:0%
the or the rotten oranges let's say we
pick<00:02:27.040><c> this</c><00:02:27.200><c> one</c><00:02:27.440><c> first</c><00:02:27.760><c> okay</c><00:02:28.160><c> we</c><00:02:28.319><c> run</c><00:02:28.480><c> a</c><00:02:28.560><c> dfs</c><00:02:29.120><c> on</c>

00:02:29.910 --> 00:02:29.920 align:start position:0%
pick this one first okay we run a dfs on
 

00:02:29.920 --> 00:02:31.990 align:start position:0%
pick this one first okay we run a dfs on
the<00:02:30.080><c> adjacent</c><00:02:30.800><c> spots</c><00:02:31.200><c> okay</c><00:02:31.599><c> here's</c><00:02:31.840><c> an</c>

00:02:31.990 --> 00:02:32.000 align:start position:0%
the adjacent spots okay here's an
 

00:02:32.000 --> 00:02:33.910 align:start position:0%
the adjacent spots okay here's an
adjacent<00:02:32.400><c> spot</c><00:02:32.640><c> so</c><00:02:32.800><c> this</c><00:02:32.959><c> becomes</c><00:02:33.360><c> rotten</c>

00:02:33.910 --> 00:02:33.920 align:start position:0%
adjacent spot so this becomes rotten
 

00:02:33.920 --> 00:02:35.910 align:start position:0%
adjacent spot so this becomes rotten
this<00:02:34.160><c> becomes</c><00:02:34.560><c> rotten</c><00:02:34.959><c> that's</c><00:02:35.280><c> time</c><00:02:35.519><c> equals</c>

00:02:35.910 --> 00:02:35.920 align:start position:0%
this becomes rotten that's time equals
 

00:02:35.920 --> 00:02:37.830 align:start position:0%
this becomes rotten that's time equals
two<00:02:36.400><c> then</c><00:02:36.640><c> this</c><00:02:36.879><c> becomes</c><00:02:37.200><c> rotten</c><00:02:37.519><c> at</c><00:02:37.599><c> time</c>

00:02:37.830 --> 00:02:37.840 align:start position:0%
two then this becomes rotten at time
 

00:02:37.840 --> 00:02:40.150 align:start position:0%
two then this becomes rotten at time
equals<00:02:38.160><c> three</c><00:02:38.640><c> then</c><00:02:38.959><c> these</c><00:02:39.360><c> two</c><00:02:39.840><c> become</c>

00:02:40.150 --> 00:02:40.160 align:start position:0%
equals three then these two become
 

00:02:40.160 --> 00:02:41.670 align:start position:0%
equals three then these two become
rotten<00:02:40.480><c> at</c><00:02:40.560><c> time</c><00:02:40.800><c> equals</c><00:02:41.120><c> four</c><00:02:41.360><c> and</c><00:02:41.519><c> then</c>

00:02:41.670 --> 00:02:41.680 align:start position:0%
rotten at time equals four and then
 

00:02:41.680 --> 00:02:43.670 align:start position:0%
rotten at time equals four and then
lastly<00:02:42.160><c> this</c><00:02:42.400><c> one</c><00:02:42.800><c> but</c><00:02:42.959><c> that</c><00:02:43.200><c> doesn't</c><00:02:43.440><c> really</c>

00:02:43.670 --> 00:02:43.680 align:start position:0%
lastly this one but that doesn't really
 

00:02:43.680 --> 00:02:45.430 align:start position:0%
lastly this one but that doesn't really
work<00:02:43.920><c> because</c><00:02:44.080><c> it</c><00:02:44.400><c> took</c><00:02:44.560><c> us</c><00:02:44.800><c> five</c><00:02:45.040><c> units</c><00:02:45.360><c> of</c>

00:02:45.430 --> 00:02:45.440 align:start position:0%
work because it took us five units of
 

00:02:45.440 --> 00:02:47.270 align:start position:0%
work because it took us five units of
time<00:02:45.680><c> to</c><00:02:45.760><c> make</c><00:02:46.000><c> these</c><00:02:46.319><c> rotten</c><00:02:46.720><c> but</c><00:02:46.879><c> that's</c><00:02:47.040><c> not</c>

00:02:47.270 --> 00:02:47.280 align:start position:0%
time to make these rotten but that's not
 

00:02:47.280 --> 00:02:49.350 align:start position:0%
time to make these rotten but that's not
actually<00:02:47.599><c> what's</c><00:02:47.840><c> gonna</c><00:02:48.080><c> happen</c><00:02:48.400><c> right</c><00:02:48.879><c> these</c>

00:02:49.350 --> 00:02:49.360 align:start position:0%
actually what's gonna happen right these
 

00:02:49.360 --> 00:02:51.949 align:start position:0%
actually what's gonna happen right these
two<00:02:50.000><c> initial</c><00:02:50.480><c> rotten</c><00:02:50.879><c> oranges</c><00:02:51.519><c> are</c>

00:02:51.949 --> 00:02:51.959 align:start position:0%
two initial rotten oranges are
 

00:02:51.959 --> 00:02:54.390 align:start position:0%
two initial rotten oranges are
simultaneously<00:02:53.040><c> going</c><00:02:53.200><c> to</c><00:02:53.360><c> be</c><00:02:53.599><c> making</c><00:02:54.160><c> the</c>

00:02:54.390 --> 00:02:54.400 align:start position:0%
simultaneously going to be making the
 

00:02:54.400 --> 00:02:56.390 align:start position:0%
simultaneously going to be making the
adjacent<00:02:54.959><c> oranges</c><00:02:55.440><c> rotten</c><00:02:55.760><c> right</c><00:02:55.920><c> like</c><00:02:56.160><c> after</c>

00:02:56.390 --> 00:02:56.400 align:start position:0%
adjacent oranges rotten right like after
 

00:02:56.400 --> 00:02:58.630 align:start position:0%
adjacent oranges rotten right like after
one<00:02:56.640><c> unit</c><00:02:56.879><c> of</c><00:02:57.040><c> time</c><00:02:57.680><c> this</c><00:02:58.000><c> orange</c><00:02:58.400><c> is</c><00:02:58.480><c> going</c><00:02:58.560><c> to</c>

00:02:58.630 --> 00:02:58.640 align:start position:0%
one unit of time this orange is going to
 

00:02:58.640 --> 00:03:01.190 align:start position:0%
one unit of time this orange is going to
become<00:02:58.959><c> rotten</c><00:02:59.360><c> from</c><00:02:59.680><c> this</c><00:02:59.920><c> one</c><00:03:00.239><c> and</c><00:03:00.720><c> this</c><00:03:00.959><c> one</c>

00:03:01.190 --> 00:03:01.200 align:start position:0%
become rotten from this one and this one
 

00:03:01.200 --> 00:03:03.110 align:start position:0%
become rotten from this one and this one
is<00:03:01.280><c> going</c><00:03:01.440><c> to</c><00:03:01.519><c> become</c><00:03:01.840><c> rotten</c><00:03:02.239><c> from</c><00:03:02.400><c> this</c><00:03:02.640><c> one</c>

00:03:03.110 --> 00:03:03.120 align:start position:0%
is going to become rotten from this one
 

00:03:03.120 --> 00:03:05.350 align:start position:0%
is going to become rotten from this one
after<00:03:03.440><c> another</c><00:03:03.840><c> unit</c><00:03:04.159><c> of</c><00:03:04.319><c> time</c><00:03:04.959><c> this</c><00:03:05.200><c> is</c><00:03:05.280><c> going</c>

00:03:05.350 --> 00:03:05.360 align:start position:0%
after another unit of time this is going
 

00:03:05.360 --> 00:03:07.990 align:start position:0%
after another unit of time this is going
to<00:03:05.440><c> become</c><00:03:05.760><c> rotten</c><00:03:06.080><c> from</c><00:03:06.319><c> this</c><00:03:06.560><c> one</c><00:03:06.879><c> and</c><00:03:07.519><c> this</c>

00:03:07.990 --> 00:03:08.000 align:start position:0%
to become rotten from this one and this
 

00:03:08.000 --> 00:03:09.670 align:start position:0%
to become rotten from this one and this
is<00:03:08.080><c> going</c><00:03:08.159><c> to</c><00:03:08.319><c> become</c><00:03:08.640><c> rotten</c><00:03:08.959><c> from</c><00:03:09.120><c> this</c><00:03:09.360><c> one</c>

00:03:09.670 --> 00:03:09.680 align:start position:0%
is going to become rotten from this one
 

00:03:09.680 --> 00:03:11.750 align:start position:0%
is going to become rotten from this one
and<00:03:10.239><c> this</c><00:03:10.640><c> is</c><00:03:10.800><c> going</c><00:03:10.879><c> to</c><00:03:10.959><c> become</c><00:03:11.280><c> rotten</c><00:03:11.599><c> from</c>

00:03:11.750 --> 00:03:11.760 align:start position:0%
and this is going to become rotten from
 

00:03:11.760 --> 00:03:14.550 align:start position:0%
and this is going to become rotten from
this<00:03:11.920><c> one</c><00:03:12.159><c> as</c><00:03:12.400><c> well</c><00:03:12.879><c> after</c><00:03:13.280><c> two</c><00:03:13.599><c> units</c><00:03:13.920><c> of</c><00:03:14.080><c> time</c>

00:03:14.550 --> 00:03:14.560 align:start position:0%
this one as well after two units of time
 

00:03:14.560 --> 00:03:17.030 align:start position:0%
this one as well after two units of time
after<00:03:14.879><c> three</c><00:03:15.200><c> units</c><00:03:15.519><c> of</c><00:03:15.680><c> time</c><00:03:16.159><c> this</c><00:03:16.640><c> last</c><00:03:16.879><c> one</c>

00:03:17.030 --> 00:03:17.040 align:start position:0%
after three units of time this last one
 

00:03:17.040 --> 00:03:18.790 align:start position:0%
after three units of time this last one
is<00:03:17.200><c> going</c><00:03:17.280><c> to</c><00:03:17.440><c> become</c><00:03:17.760><c> rotten</c><00:03:18.159><c> either</c><00:03:18.480><c> from</c>

00:03:18.790 --> 00:03:18.800 align:start position:0%
is going to become rotten either from
 

00:03:18.800 --> 00:03:21.270 align:start position:0%
is going to become rotten either from
the<00:03:18.959><c> one</c><00:03:19.120><c> above</c><00:03:19.440><c> it</c><00:03:19.680><c> or</c><00:03:20.159><c> from</c><00:03:20.319><c> the</c><00:03:20.480><c> one</c><00:03:20.959><c> to</c><00:03:21.120><c> the</c>

00:03:21.270 --> 00:03:21.280 align:start position:0%
the one above it or from the one to the
 

00:03:21.280 --> 00:03:23.830 align:start position:0%
the one above it or from the one to the
right<00:03:21.519><c> of</c><00:03:21.760><c> it</c><00:03:22.000><c> so</c><00:03:22.319><c> in</c><00:03:22.480><c> three</c><00:03:22.800><c> units</c><00:03:23.040><c> of</c><00:03:23.200><c> time</c>

00:03:23.830 --> 00:03:23.840 align:start position:0%
right of it so in three units of time
 

00:03:23.840 --> 00:03:26.550 align:start position:0%
right of it so in three units of time
all<00:03:24.159><c> of</c><00:03:24.400><c> the</c><00:03:24.560><c> oranges</c><00:03:25.040><c> became</c><00:03:25.360><c> rotten</c><00:03:26.080><c> but</c><00:03:26.400><c> we</c>

00:03:26.550 --> 00:03:26.560 align:start position:0%
all of the oranges became rotten but we
 

00:03:26.560 --> 00:03:28.470 align:start position:0%
all of the oranges became rotten but we
didn't<00:03:26.879><c> use</c><00:03:27.120><c> dfs</c><00:03:27.760><c> if</c><00:03:27.920><c> you</c><00:03:28.000><c> were</c><00:03:28.159><c> watching</c>

00:03:28.470 --> 00:03:28.480 align:start position:0%
didn't use dfs if you were watching
 

00:03:28.480 --> 00:03:30.149 align:start position:0%
didn't use dfs if you were watching
carefully<00:03:28.959><c> you</c><00:03:29.120><c> might</c><00:03:29.360><c> have</c><00:03:29.440><c> noticed</c><00:03:29.920><c> that</c>

00:03:30.149 --> 00:03:30.159 align:start position:0%
carefully you might have noticed that
 

00:03:30.159 --> 00:03:31.750 align:start position:0%
carefully you might have noticed that
the<00:03:30.480><c> the</c><00:03:30.640><c> main</c><00:03:30.879><c> algorithm</c><00:03:31.280><c> we</c><00:03:31.360><c> were</c><00:03:31.519><c> actually</c>

00:03:31.750 --> 00:03:31.760 align:start position:0%
the the main algorithm we were actually
 

00:03:31.760 --> 00:03:32.390 align:start position:0%
the the main algorithm we were actually
using

00:03:32.390 --> 00:03:32.400 align:start position:0%
using
 

00:03:32.400 --> 00:03:35.430 align:start position:0%
using
is<00:03:32.959><c> bfs</c><00:03:33.840><c> breadth</c><00:03:34.239><c> first</c><00:03:34.560><c> search</c><00:03:35.040><c> right</c><00:03:35.200><c> which</c>

00:03:35.430 --> 00:03:35.440 align:start position:0%
is bfs breadth first search right which
 

00:03:35.440 --> 00:03:37.589 align:start position:0%
is bfs breadth first search right which
is<00:03:35.599><c> also</c><00:03:36.000><c> a</c><00:03:36.159><c> standard</c><00:03:36.720><c> algorithm</c><00:03:37.280><c> and</c><00:03:37.440><c> the</c>

00:03:37.589 --> 00:03:37.599 align:start position:0%
is also a standard algorithm and the
 

00:03:37.599 --> 00:03:39.830 align:start position:0%
is also a standard algorithm and the
reason<00:03:37.840><c> it's</c><00:03:38.080><c> helpful</c><00:03:38.480><c> for</c><00:03:38.640><c> us</c><00:03:38.879><c> is</c><00:03:39.040><c> because</c><00:03:39.680><c> we</c>

00:03:39.830 --> 00:03:39.840 align:start position:0%
reason it's helpful for us is because we
 

00:03:39.840 --> 00:03:42.470 align:start position:0%
reason it's helpful for us is because we
don't<00:03:40.000><c> have</c><00:03:40.159><c> to</c><00:03:40.400><c> finish</c><00:03:40.799><c> running</c><00:03:41.120><c> dfs</c><00:03:41.840><c> on</c><00:03:42.319><c> a</c>

00:03:42.470 --> 00:03:42.480 align:start position:0%
don't have to finish running dfs on a
 

00:03:42.480 --> 00:03:45.509 align:start position:0%
don't have to finish running dfs on a
single<00:03:42.879><c> rotten</c><00:03:43.280><c> orange</c><00:03:43.760><c> we</c><00:03:43.920><c> can</c><00:03:44.159><c> run</c><00:03:44.560><c> the</c><00:03:44.799><c> bfs</c>

00:03:45.509 --> 00:03:45.519 align:start position:0%
single rotten orange we can run the bfs
 

00:03:45.519 --> 00:03:48.470 align:start position:0%
single rotten orange we can run the bfs
algorithm<00:03:46.200><c> simultaneously</c><00:03:47.280><c> on</c><00:03:47.680><c> multiple</c>

00:03:48.470 --> 00:03:48.480 align:start position:0%
algorithm simultaneously on multiple
 

00:03:48.480 --> 00:03:50.630 align:start position:0%
algorithm simultaneously on multiple
sources<00:03:49.200><c> at</c><00:03:49.360><c> the</c><00:03:49.440><c> same</c><00:03:49.760><c> time</c><00:03:50.000><c> so</c><00:03:50.159><c> basically</c>

00:03:50.630 --> 00:03:50.640 align:start position:0%
sources at the same time so basically
 

00:03:50.640 --> 00:03:52.949 align:start position:0%
sources at the same time so basically
what<00:03:50.799><c> we're</c><00:03:50.959><c> doing</c><00:03:51.200><c> is</c><00:03:51.360><c> running</c><00:03:51.760><c> multi-source</c>

00:03:52.949 --> 00:03:52.959 align:start position:0%
what we're doing is running multi-source
 

00:03:52.959 --> 00:03:56.390 align:start position:0%
what we're doing is running multi-source
bfs<00:03:53.920><c> and</c><00:03:54.159><c> usually</c><00:03:54.640><c> bfs</c><00:03:55.200><c> is</c><00:03:55.360><c> implemented</c><00:03:56.080><c> with</c>

00:03:56.390 --> 00:03:56.400 align:start position:0%
bfs and usually bfs is implemented with
 

00:03:56.400 --> 00:03:59.270 align:start position:0%
bfs and usually bfs is implemented with
a<00:03:56.720><c> queue</c><00:03:57.120><c> data</c><00:03:57.439><c> structure</c><00:03:58.239><c> so</c><00:03:58.720><c> basically</c><00:03:59.120><c> what</c>

00:03:59.270 --> 00:03:59.280 align:start position:0%
a queue data structure so basically what
 

00:03:59.280 --> 00:04:00.789 align:start position:0%
a queue data structure so basically what
we're<00:03:59.360><c> going</c><00:03:59.439><c> to</c><00:03:59.519><c> be</c><00:03:59.680><c> doing</c><00:03:59.920><c> is</c><00:04:00.080><c> initializing</c>

00:04:00.789 --> 00:04:00.799 align:start position:0%
we're going to be doing is initializing
 

00:04:00.799 --> 00:04:03.670 align:start position:0%
we're going to be doing is initializing
our<00:04:01.040><c> cue</c><00:04:01.519><c> with</c><00:04:01.760><c> the</c><00:04:01.920><c> initial</c><00:04:02.480><c> rotten</c><00:04:02.879><c> oranges</c>

00:04:03.670 --> 00:04:03.680 align:start position:0%
our cue with the initial rotten oranges
 

00:04:03.680 --> 00:04:05.830 align:start position:0%
our cue with the initial rotten oranges
we're<00:04:03.840><c> going</c><00:04:03.920><c> to</c><00:04:04.080><c> pop</c><00:04:04.480><c> through</c><00:04:04.959><c> every</c><00:04:05.280><c> initial</c>

00:04:05.830 --> 00:04:05.840 align:start position:0%
we're going to pop through every initial
 

00:04:05.840 --> 00:04:07.429 align:start position:0%
we're going to pop through every initial
rotten<00:04:06.239><c> orange</c><00:04:06.879><c> and</c><00:04:06.959><c> then</c><00:04:07.120><c> we're</c><00:04:07.280><c> going</c><00:04:07.360><c> to</c>

00:04:07.429 --> 00:04:07.439 align:start position:0%
rotten orange and then we're going to
 

00:04:07.439 --> 00:04:10.309 align:start position:0%
rotten orange and then we're going to
call<00:04:07.680><c> that</c><00:04:08.000><c> one</c><00:04:08.400><c> unit</c><00:04:08.799><c> of</c><00:04:08.959><c> time</c><00:04:09.599><c> and</c><00:04:09.680><c> then</c><00:04:10.080><c> to</c>

00:04:10.309 --> 00:04:10.319 align:start position:0%
call that one unit of time and then to
 

00:04:10.319 --> 00:04:12.550 align:start position:0%
call that one unit of time and then to
our<00:04:10.560><c> q</c><00:04:11.040><c> we're</c><00:04:11.200><c> going</c><00:04:11.280><c> to</c><00:04:11.439><c> add</c><00:04:11.680><c> the</c><00:04:11.920><c> next</c><00:04:12.239><c> rotten</c>

00:04:12.550 --> 00:04:12.560 align:start position:0%
our q we're going to add the next rotten
 

00:04:12.560 --> 00:04:15.429 align:start position:0%
our q we're going to add the next rotten
oranges<00:04:13.120><c> so</c><00:04:13.439><c> these</c><00:04:13.840><c> two</c><00:04:14.400><c> would</c><00:04:14.640><c> not</c><00:04:14.879><c> be</c><00:04:15.120><c> in</c><00:04:15.280><c> our</c>

00:04:15.429 --> 00:04:15.439 align:start position:0%
oranges so these two would not be in our
 

00:04:15.439 --> 00:04:18.310 align:start position:0%
oranges so these two would not be in our
queue<00:04:15.760><c> anymore</c><00:04:16.479><c> but</c><00:04:16.880><c> this</c><00:04:17.120><c> one</c><00:04:17.440><c> over</c><00:04:17.759><c> here</c><00:04:18.079><c> and</c>

00:04:18.310 --> 00:04:18.320 align:start position:0%
queue anymore but this one over here and
 

00:04:18.320 --> 00:04:20.390 align:start position:0%
queue anymore but this one over here and
this<00:04:18.560><c> one</c><00:04:18.799><c> over</c><00:04:19.040><c> here</c><00:04:19.199><c> would</c><00:04:19.440><c> then</c><00:04:19.919><c> be</c><00:04:20.079><c> added</c>

00:04:20.390 --> 00:04:20.400 align:start position:0%
this one over here would then be added
 

00:04:20.400 --> 00:04:22.150 align:start position:0%
this one over here would then be added
to<00:04:20.560><c> our</c><00:04:20.720><c> q</c><00:04:20.959><c> and</c><00:04:21.040><c> then</c><00:04:21.120><c> we're</c><00:04:21.280><c> gonna</c><00:04:21.919><c> you</c><00:04:22.000><c> know</c>

00:04:22.150 --> 00:04:22.160 align:start position:0%
to our q and then we're gonna you know
 

00:04:22.160 --> 00:04:23.990 align:start position:0%
to our q and then we're gonna you know
pop<00:04:22.479><c> through</c><00:04:22.720><c> those</c><00:04:22.960><c> ones</c><00:04:23.280><c> as</c><00:04:23.360><c> well</c><00:04:23.759><c> and</c><00:04:23.840><c> then</c>

00:04:23.990 --> 00:04:24.000 align:start position:0%
pop through those ones as well and then
 

00:04:24.000 --> 00:04:26.230 align:start position:0%
pop through those ones as well and then
call<00:04:24.240><c> it</c><00:04:24.479><c> our</c><00:04:24.720><c> second</c><00:04:25.120><c> unit</c><00:04:25.440><c> of</c><00:04:25.600><c> time</c><00:04:26.000><c> and</c><00:04:26.080><c> then</c>

00:04:26.230 --> 00:04:26.240 align:start position:0%
call it our second unit of time and then
 

00:04:26.240 --> 00:04:28.550 align:start position:0%
call it our second unit of time and then
keep<00:04:26.639><c> going</c><00:04:26.960><c> like</c><00:04:27.199><c> that</c><00:04:27.520><c> but</c><00:04:27.680><c> how</c><00:04:27.919><c> do</c><00:04:28.000><c> we</c><00:04:28.240><c> know</c>

00:04:28.550 --> 00:04:28.560 align:start position:0%
keep going like that but how do we know
 

00:04:28.560 --> 00:04:30.870 align:start position:0%
keep going like that but how do we know
when<00:04:28.720><c> we're</c><00:04:29.040><c> actually</c><00:04:29.680><c> finished</c><00:04:30.320><c> well</c><00:04:30.560><c> once</c>

00:04:30.870 --> 00:04:30.880 align:start position:0%
when we're actually finished well once
 

00:04:30.880 --> 00:04:33.590 align:start position:0%
when we're actually finished well once
our<00:04:31.120><c> cue</c><00:04:31.520><c> is</c><00:04:31.759><c> empty</c><00:04:32.400><c> then</c><00:04:32.639><c> of</c><00:04:32.800><c> course</c><00:04:33.199><c> we</c><00:04:33.360><c> can</c>

00:04:33.590 --> 00:04:33.600 align:start position:0%
our cue is empty then of course we can
 

00:04:33.600 --> 00:04:36.629 align:start position:0%
our cue is empty then of course we can
stop<00:04:34.240><c> but</c><00:04:34.479><c> it's</c><00:04:34.720><c> not</c><00:04:35.120><c> guaranteed</c><00:04:36.320><c> that</c><00:04:36.479><c> we</c>

00:04:36.629 --> 00:04:36.639 align:start position:0%
stop but it's not guaranteed that we
 

00:04:36.639 --> 00:04:38.950 align:start position:0%
stop but it's not guaranteed that we
will<00:04:36.960><c> actually</c><00:04:37.600><c> have</c><00:04:38.080><c> made</c><00:04:38.400><c> every</c><00:04:38.639><c> single</c>

00:04:38.950 --> 00:04:38.960 align:start position:0%
will actually have made every single
 

00:04:38.960 --> 00:04:40.710 align:start position:0%
will actually have made every single
orange<00:04:39.360><c> rotten</c><00:04:39.840><c> suppose</c><00:04:40.240><c> there</c><00:04:40.400><c> was</c><00:04:40.560><c> an</c>

00:04:40.710 --> 00:04:40.720 align:start position:0%
orange rotten suppose there was an
 

00:04:40.720 --> 00:04:42.230 align:start position:0%
orange rotten suppose there was an
orange<00:04:41.120><c> all</c><00:04:41.199><c> the</c><00:04:41.280><c> way</c><00:04:41.440><c> over</c><00:04:41.680><c> here</c><00:04:41.840><c> that's</c><00:04:42.080><c> a</c>

00:04:42.230 --> 00:04:42.240 align:start position:0%
orange all the way over here that's a
 

00:04:42.240 --> 00:04:44.550 align:start position:0%
orange all the way over here that's a
fresh<00:04:42.720><c> orange</c><00:04:43.040><c> it's</c><00:04:43.280><c> not</c><00:04:43.520><c> rotten</c><00:04:43.919><c> yet</c><00:04:44.400><c> of</c>

00:04:44.550 --> 00:04:44.560 align:start position:0%
fresh orange it's not rotten yet of
 

00:04:44.560 --> 00:04:46.390 align:start position:0%
fresh orange it's not rotten yet of
course<00:04:44.800><c> we</c><00:04:44.960><c> know</c><00:04:45.120><c> that</c><00:04:45.360><c> these</c><00:04:45.759><c> oranges</c><00:04:46.240><c> are</c>

00:04:46.390 --> 00:04:46.400 align:start position:0%
course we know that these oranges are
 

00:04:46.400 --> 00:04:48.150 align:start position:0%
course we know that these oranges are
going<00:04:46.639><c> to</c><00:04:46.720><c> become</c><00:04:47.040><c> rotten</c><00:04:47.360><c> but</c><00:04:47.520><c> this</c><00:04:47.680><c> is</c><00:04:47.919><c> not</c>

00:04:48.150 --> 00:04:48.160 align:start position:0%
going to become rotten but this is not
 

00:04:48.160 --> 00:04:49.830 align:start position:0%
going to become rotten but this is not
going<00:04:48.240><c> to</c><00:04:48.320><c> become</c><00:04:48.720><c> rotten</c><00:04:49.040><c> so</c><00:04:49.280><c> basically</c>

00:04:49.830 --> 00:04:49.840 align:start position:0%
going to become rotten so basically
 

00:04:49.840 --> 00:04:52.469 align:start position:0%
going to become rotten so basically
after<00:04:50.240><c> our</c><00:04:50.560><c> cue</c><00:04:51.040><c> is</c><00:04:51.199><c> completely</c><00:04:51.840><c> popped</c><00:04:52.320><c> what</c>

00:04:52.469 --> 00:04:52.479 align:start position:0%
after our cue is completely popped what
 

00:04:52.479 --> 00:04:54.710 align:start position:0%
after our cue is completely popped what
we're<00:04:52.639><c> going</c><00:04:52.720><c> to</c><00:04:52.880><c> notice</c><00:04:53.360><c> is</c><00:04:53.759><c> there</c><00:04:54.160><c> is</c><00:04:54.400><c> a</c>

00:04:54.710 --> 00:04:54.720 align:start position:0%
we're going to notice is there is a
 

00:04:54.720 --> 00:04:56.469 align:start position:0%
we're going to notice is there is a
fresh<00:04:55.040><c> orange</c><00:04:55.360><c> remaining</c><00:04:55.759><c> and</c><00:04:55.840><c> the</c><00:04:56.080><c> way</c><00:04:56.320><c> we're</c>

00:04:56.469 --> 00:04:56.479 align:start position:0%
fresh orange remaining and the way we're
 

00:04:56.479 --> 00:04:59.030 align:start position:0%
fresh orange remaining and the way we're
gonna<00:04:56.800><c> know</c><00:04:57.040><c> about</c><00:04:57.360><c> that</c><00:04:57.759><c> is</c><00:04:58.080><c> because</c><00:04:58.720><c> we</c>

00:04:59.030 --> 00:04:59.040 align:start position:0%
gonna know about that is because we
 

00:04:59.040 --> 00:05:01.830 align:start position:0%
gonna know about that is because we
should<00:04:59.440><c> keep</c><00:04:59.919><c> track</c><00:05:00.320><c> of</c><00:05:00.560><c> how</c><00:05:00.960><c> many</c><00:05:01.360><c> fresh</c>

00:05:01.830 --> 00:05:01.840 align:start position:0%
should keep track of how many fresh
 

00:05:01.840 --> 00:05:05.189 align:start position:0%
should keep track of how many fresh
oranges<00:05:02.400><c> there</c><00:05:02.720><c> are</c><00:05:03.039><c> initially</c><00:05:04.160><c> right</c><00:05:04.639><c> in</c><00:05:04.880><c> our</c>

00:05:05.189 --> 00:05:05.199 align:start position:0%
oranges there are initially right in our
 

00:05:05.199 --> 00:05:07.830 align:start position:0%
oranges there are initially right in our
case<00:05:05.600><c> i</c><00:05:05.759><c> think</c><00:05:05.919><c> there's</c><00:05:06.240><c> about</c><00:05:06.880><c> uh</c><00:05:07.280><c> seven</c>

00:05:07.830 --> 00:05:07.840 align:start position:0%
case i think there's about uh seven
 

00:05:07.840 --> 00:05:10.550 align:start position:0%
case i think there's about uh seven
fresh<00:05:08.320><c> oranges</c><00:05:08.960><c> right</c><00:05:09.360><c> and</c><00:05:09.520><c> then</c><00:05:09.840><c> by</c><00:05:10.080><c> the</c><00:05:10.240><c> time</c>

00:05:10.550 --> 00:05:10.560 align:start position:0%
fresh oranges right and then by the time
 

00:05:10.560 --> 00:05:13.189 align:start position:0%
fresh oranges right and then by the time
our<00:05:10.720><c> bfs</c><00:05:11.199><c> algorithm</c><00:05:11.600><c> is</c><00:05:11.759><c> done</c><00:05:12.160><c> we're</c><00:05:12.400><c> down</c><00:05:12.720><c> to</c>

00:05:13.189 --> 00:05:13.199 align:start position:0%
our bfs algorithm is done we're down to
 

00:05:13.199 --> 00:05:16.710 align:start position:0%
our bfs algorithm is done we're down to
one<00:05:13.840><c> fresh</c><00:05:14.320><c> orange</c><00:05:14.880><c> because</c><00:05:15.600><c> we</c><00:05:15.840><c> still</c><00:05:16.160><c> have</c><00:05:16.560><c> a</c>

00:05:16.710 --> 00:05:16.720 align:start position:0%
one fresh orange because we still have a
 

00:05:16.720 --> 00:05:18.629 align:start position:0%
one fresh orange because we still have a
positive<00:05:17.199><c> number</c><00:05:17.440><c> of</c><00:05:17.600><c> fresh</c><00:05:17.919><c> oranges</c><00:05:18.479><c> that</c>

00:05:18.629 --> 00:05:18.639 align:start position:0%
positive number of fresh oranges that
 

00:05:18.639 --> 00:05:20.390 align:start position:0%
positive number of fresh oranges that
means<00:05:18.880><c> we</c><00:05:19.039><c> were</c><00:05:19.280><c> not</c><00:05:19.520><c> able</c><00:05:19.759><c> to</c><00:05:19.919><c> make</c><00:05:20.160><c> every</c>

00:05:20.390 --> 00:05:20.400 align:start position:0%
means we were not able to make every
 

00:05:20.400 --> 00:05:22.070 align:start position:0%
means we were not able to make every
orange<00:05:20.800><c> rotten</c><00:05:21.199><c> and</c><00:05:21.360><c> therefore</c><00:05:21.759><c> we're</c><00:05:21.919><c> gonna</c>

00:05:22.070 --> 00:05:22.080 align:start position:0%
orange rotten and therefore we're gonna
 

00:05:22.080 --> 00:05:23.990 align:start position:0%
orange rotten and therefore we're gonna
have<00:05:22.240><c> to</c><00:05:22.320><c> return</c><00:05:22.800><c> negative</c><00:05:23.280><c> one</c><00:05:23.600><c> as</c><00:05:23.759><c> our</c>

00:05:23.990 --> 00:05:24.000 align:start position:0%
have to return negative one as our
 

00:05:24.000 --> 00:05:26.950 align:start position:0%
have to return negative one as our
result<00:05:24.800><c> but</c><00:05:25.039><c> if</c><00:05:25.120><c> we</c><00:05:25.440><c> were</c><00:05:25.840><c> able</c><00:05:26.240><c> to</c>

00:05:26.950 --> 00:05:26.960 align:start position:0%
result but if we were able to
 

00:05:26.960 --> 00:05:28.469 align:start position:0%
result but if we were able to
do<00:05:27.120><c> that</c><00:05:27.360><c> right</c><00:05:27.600><c> let's</c><00:05:27.759><c> say</c><00:05:28.000><c> this</c><00:05:28.160><c> orange</c>

00:05:28.469 --> 00:05:28.479 align:start position:0%
do that right let's say this orange
 

00:05:28.479 --> 00:05:30.629 align:start position:0%
do that right let's say this orange
didn't<00:05:28.800><c> exist</c><00:05:29.360><c> we</c><00:05:29.680><c> you</c><00:05:29.840><c> know</c><00:05:30.000><c> make</c><00:05:30.240><c> all</c><00:05:30.400><c> these</c>

00:05:30.629 --> 00:05:30.639 align:start position:0%
didn't exist we you know make all these
 

00:05:30.639 --> 00:05:33.189 align:start position:0%
didn't exist we you know make all these
oranges<00:05:31.520><c> rotten</c><00:05:32.080><c> then</c><00:05:32.320><c> we</c><00:05:32.479><c> keep</c><00:05:32.720><c> track</c><00:05:32.960><c> of</c><00:05:33.039><c> how</c>

00:05:33.189 --> 00:05:33.199 align:start position:0%
oranges rotten then we keep track of how
 

00:05:33.199 --> 00:05:34.790 align:start position:0%
oranges rotten then we keep track of how
much<00:05:33.440><c> time</c><00:05:33.680><c> did</c><00:05:33.759><c> it</c><00:05:33.840><c> take</c><00:05:34.080><c> us</c><00:05:34.240><c> to</c><00:05:34.400><c> make</c><00:05:34.639><c> all</c><00:05:34.720><c> of</c>

00:05:34.790 --> 00:05:34.800 align:start position:0%
much time did it take us to make all of
 

00:05:34.800 --> 00:05:36.390 align:start position:0%
much time did it take us to make all of
the<00:05:34.960><c> oranges</c><00:05:35.280><c> rotten</c><00:05:35.520><c> it</c><00:05:35.600><c> was</c><00:05:35.759><c> three</c><00:05:36.000><c> units</c><00:05:36.320><c> of</c>

00:05:36.390 --> 00:05:36.400 align:start position:0%
the oranges rotten it was three units of
 

00:05:36.400 --> 00:05:37.510 align:start position:0%
the oranges rotten it was three units of
time<00:05:36.639><c> i</c><00:05:36.720><c> think</c><00:05:36.880><c> so</c><00:05:37.039><c> then</c><00:05:37.199><c> we're</c><00:05:37.360><c> going</c><00:05:37.440><c> to</c>

00:05:37.510 --> 00:05:37.520 align:start position:0%
time i think so then we're going to
 

00:05:37.520 --> 00:05:39.270 align:start position:0%
time i think so then we're going to
return<00:05:37.919><c> three</c><00:05:38.160><c> so</c><00:05:38.320><c> that's</c><00:05:38.560><c> the</c><00:05:38.720><c> overall</c>

00:05:39.270 --> 00:05:39.280 align:start position:0%
return three so that's the overall
 

00:05:39.280 --> 00:05:41.350 align:start position:0%
return three so that's the overall
algorithm<00:05:40.240><c> as</c><00:05:40.400><c> you</c><00:05:40.560><c> can</c><00:05:40.720><c> kind</c><00:05:40.880><c> of</c><00:05:40.960><c> tell</c><00:05:41.199><c> from</c>

00:05:41.350 --> 00:05:41.360 align:start position:0%
algorithm as you can kind of tell from
 

00:05:41.360 --> 00:05:43.430 align:start position:0%
algorithm as you can kind of tell from
the<00:05:41.440><c> bfs</c><00:05:42.240><c> it's</c><00:05:42.400><c> multi-sourced</c><00:05:43.120><c> but</c><00:05:43.280><c> we're</c>

00:05:43.430 --> 00:05:43.440 align:start position:0%
the bfs it's multi-sourced but we're
 

00:05:43.440 --> 00:05:45.830 align:start position:0%
the bfs it's multi-sourced but we're
still<00:05:43.680><c> only</c><00:05:43.919><c> going</c><00:05:44.000><c> to</c><00:05:44.080><c> be</c><00:05:44.240><c> visiting</c><00:05:44.720><c> each</c><00:05:45.199><c> uh</c>

00:05:45.830 --> 00:05:45.840 align:start position:0%
still only going to be visiting each uh
 

00:05:45.840 --> 00:05:48.310 align:start position:0%
still only going to be visiting each uh
orange<00:05:46.240><c> each</c><00:05:46.720><c> cell</c><00:05:47.039><c> in</c><00:05:47.199><c> our</c><00:05:47.280><c> grid</c><00:05:47.840><c> at</c><00:05:48.000><c> most</c>

00:05:48.310 --> 00:05:48.320 align:start position:0%
orange each cell in our grid at most
 

00:05:48.320 --> 00:05:50.230 align:start position:0%
orange each cell in our grid at most
once<00:05:48.639><c> so</c><00:05:48.880><c> we</c><00:05:48.960><c> can</c><00:05:49.120><c> say</c><00:05:49.280><c> that</c><00:05:49.759><c> the</c><00:05:50.000><c> time</c>

00:05:50.230 --> 00:05:50.240 align:start position:0%
once so we can say that the time
 

00:05:50.240 --> 00:05:52.469 align:start position:0%
once so we can say that the time
complexity<00:05:51.039><c> is</c><00:05:51.120><c> going</c><00:05:51.199><c> to</c><00:05:51.280><c> be</c><00:05:51.520><c> n</c><00:05:51.919><c> times</c><00:05:52.320><c> m</c>

00:05:52.469 --> 00:05:52.479 align:start position:0%
complexity is going to be n times m
 

00:05:52.479 --> 00:05:54.070 align:start position:0%
complexity is going to be n times m
where<00:05:52.720><c> these</c><00:05:52.880><c> are</c><00:05:52.960><c> the</c><00:05:53.039><c> dimensions</c><00:05:53.759><c> of</c><00:05:53.919><c> the</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
where these are the dimensions of the
 

00:05:54.080 --> 00:05:56.070 align:start position:0%
where these are the dimensions of the
grid<00:05:54.720><c> and</c><00:05:54.880><c> i</c><00:05:54.960><c> think</c><00:05:55.199><c> in</c><00:05:55.280><c> the</c><00:05:55.440><c> worst</c><00:05:55.759><c> case</c><00:05:56.000><c> that</c>

00:05:56.070 --> 00:05:56.080 align:start position:0%
grid and i think in the worst case that
 

00:05:56.080 --> 00:05:57.990 align:start position:0%
grid and i think in the worst case that
the<00:05:56.240><c> memory</c><00:05:56.560><c> complexity</c><00:05:57.199><c> is</c><00:05:57.440><c> also</c><00:05:57.759><c> going</c><00:05:57.919><c> to</c>

00:05:57.990 --> 00:05:58.000 align:start position:0%
the memory complexity is also going to
 

00:05:58.000 --> 00:05:59.189 align:start position:0%
the memory complexity is also going to
be<00:05:58.160><c> the</c><00:05:58.240><c> same</c><00:05:58.560><c> because</c><00:05:58.720><c> we're</c><00:05:58.880><c> going</c><00:05:58.960><c> to</c><00:05:59.039><c> be</c>

00:05:59.189 --> 00:05:59.199 align:start position:0%
be the same because we're going to be
 

00:05:59.199 --> 00:06:01.189 align:start position:0%
be the same because we're going to be
using<00:05:59.440><c> a</c><00:05:59.600><c> q</c><00:05:59.840><c> and</c><00:06:00.000><c> all</c><00:06:00.160><c> that</c><00:06:00.479><c> so</c><00:06:00.639><c> that's</c><00:06:00.880><c> enough</c>

00:06:01.189 --> 00:06:01.199 align:start position:0%
using a q and all that so that's enough
 

00:06:01.199 --> 00:06:03.670 align:start position:0%
using a q and all that so that's enough
for<00:06:01.440><c> us</c><00:06:01.759><c> to</c><00:06:02.080><c> get</c><00:06:02.319><c> into</c><00:06:02.560><c> the</c><00:06:02.720><c> code</c><00:06:03.039><c> so</c><00:06:03.280><c> let's</c><00:06:03.520><c> do</c>

00:06:03.670 --> 00:06:03.680 align:start position:0%
for us to get into the code so let's do
 

00:06:03.680 --> 00:06:05.909 align:start position:0%
for us to get into the code so let's do
that<00:06:04.000><c> now</c><00:06:04.400><c> okay</c><00:06:04.639><c> so</c><00:06:04.880><c> now</c><00:06:05.039><c> let's</c><00:06:05.280><c> code</c><00:06:05.520><c> it</c><00:06:05.680><c> up</c><00:06:05.759><c> so</c>

00:06:05.909 --> 00:06:05.919 align:start position:0%
that now okay so now let's code it up so
 

00:06:05.919 --> 00:06:07.110 align:start position:0%
that now okay so now let's code it up so
the<00:06:06.000><c> first</c><00:06:06.160><c> thing</c><00:06:06.319><c> we're</c><00:06:06.560><c> going</c><00:06:06.639><c> to</c><00:06:06.720><c> do</c><00:06:06.960><c> is</c>

00:06:07.110 --> 00:06:07.120 align:start position:0%
the first thing we're going to do is
 

00:06:07.120 --> 00:06:09.110 align:start position:0%
the first thing we're going to do is
initialize<00:06:07.840><c> our</c><00:06:08.160><c> deck</c><00:06:08.560><c> it's</c><00:06:08.720><c> going</c><00:06:08.800><c> to</c><00:06:08.880><c> be</c>

00:06:09.110 --> 00:06:09.120 align:start position:0%
initialize our deck it's going to be
 

00:06:09.120 --> 00:06:10.629 align:start position:0%
initialize our deck it's going to be
empty<00:06:09.440><c> initially</c><00:06:09.919><c> we're</c><00:06:10.080><c> going</c><00:06:10.160><c> to</c><00:06:10.240><c> also</c><00:06:10.479><c> have</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
empty initially we're going to also have
 

00:06:10.639 --> 00:06:12.550 align:start position:0%
empty initially we're going to also have
two<00:06:10.800><c> more</c><00:06:11.039><c> variables</c><00:06:11.840><c> one</c><00:06:12.080><c> is</c><00:06:12.240><c> going</c><00:06:12.319><c> to</c><00:06:12.400><c> be</c>

00:06:12.550 --> 00:06:12.560 align:start position:0%
two more variables one is going to be
 

00:06:12.560 --> 00:06:14.309 align:start position:0%
two more variables one is going to be
the<00:06:12.720><c> time</c><00:06:12.960><c> to</c><00:06:13.120><c> keep</c><00:06:13.280><c> track</c><00:06:13.520><c> of</c><00:06:13.600><c> how</c><00:06:13.759><c> much</c><00:06:14.000><c> time</c>

00:06:14.309 --> 00:06:14.319 align:start position:0%
the time to keep track of how much time
 

00:06:14.319 --> 00:06:16.150 align:start position:0%
the time to keep track of how much time
has<00:06:14.639><c> passed</c><00:06:15.199><c> and</c><00:06:15.360><c> another</c><00:06:15.759><c> is</c><00:06:15.919><c> going</c><00:06:16.000><c> to</c><00:06:16.080><c> be</c>

00:06:16.150 --> 00:06:16.160 align:start position:0%
has passed and another is going to be
 

00:06:16.160 --> 00:06:18.390 align:start position:0%
has passed and another is going to be
called<00:06:16.560><c> fresh</c><00:06:17.039><c> to</c><00:06:17.199><c> keep</c><00:06:17.440><c> track</c><00:06:17.680><c> of</c><00:06:17.840><c> how</c><00:06:18.000><c> many</c>

00:06:18.390 --> 00:06:18.400 align:start position:0%
called fresh to keep track of how many
 

00:06:18.400 --> 00:06:20.469 align:start position:0%
called fresh to keep track of how many
fresh<00:06:18.800><c> oranges</c><00:06:19.280><c> we</c><00:06:19.440><c> have</c><00:06:19.600><c> at</c><00:06:19.759><c> any</c><00:06:19.919><c> given</c><00:06:20.240><c> point</c>

00:06:20.469 --> 00:06:20.479 align:start position:0%
fresh oranges we have at any given point
 

00:06:20.479 --> 00:06:22.070 align:start position:0%
fresh oranges we have at any given point
in<00:06:20.560><c> time</c><00:06:20.800><c> initially</c><00:06:21.280><c> let's</c><00:06:21.440><c> just</c><00:06:21.600><c> set</c><00:06:21.840><c> these</c>

00:06:22.070 --> 00:06:22.080 align:start position:0%
in time initially let's just set these
 

00:06:22.080 --> 00:06:24.629 align:start position:0%
in time initially let's just set these
both<00:06:22.319><c> to</c><00:06:22.479><c> zero</c><00:06:23.120><c> but</c><00:06:23.360><c> let's</c><00:06:23.600><c> actually</c><00:06:24.080><c> iterate</c>

00:06:24.629 --> 00:06:24.639 align:start position:0%
both to zero but let's actually iterate
 

00:06:24.639 --> 00:06:27.350 align:start position:0%
both to zero but let's actually iterate
over<00:06:24.960><c> the</c><00:06:25.120><c> entire</c><00:06:25.759><c> grid</c><00:06:26.400><c> and</c><00:06:26.639><c> actually</c><00:06:27.039><c> before</c>

00:06:27.350 --> 00:06:27.360 align:start position:0%
over the entire grid and actually before
 

00:06:27.360 --> 00:06:29.029 align:start position:0%
over the entire grid and actually before
we<00:06:27.520><c> do</c><00:06:27.680><c> that</c><00:06:28.000><c> it</c><00:06:28.080><c> would</c><00:06:28.240><c> be</c><00:06:28.400><c> good</c><00:06:28.560><c> to</c><00:06:28.720><c> get</c><00:06:28.880><c> the</c>

00:06:29.029 --> 00:06:29.039 align:start position:0%
we do that it would be good to get the
 

00:06:29.039 --> 00:06:30.870 align:start position:0%
we do that it would be good to get the
dimensions<00:06:29.600><c> of</c><00:06:29.759><c> the</c><00:06:29.840><c> grid</c><00:06:30.080><c> so</c><00:06:30.240><c> the</c><00:06:30.400><c> number</c><00:06:30.639><c> of</c>

00:06:30.870 --> 00:06:30.880 align:start position:0%
dimensions of the grid so the number of
 

00:06:30.880 --> 00:06:32.870 align:start position:0%
dimensions of the grid so the number of
rows<00:06:31.280><c> and</c><00:06:31.360><c> the</c><00:06:31.520><c> number</c><00:06:31.759><c> of</c><00:06:32.000><c> columns</c><00:06:32.560><c> so</c><00:06:32.720><c> now</c>

00:06:32.870 --> 00:06:32.880 align:start position:0%
rows and the number of columns so now
 

00:06:32.880 --> 00:06:35.909 align:start position:0%
rows and the number of columns so now
let's<00:06:33.520><c> iterate</c><00:06:34.000><c> over</c><00:06:34.319><c> the</c><00:06:34.560><c> entire</c><00:06:35.039><c> grid</c><00:06:35.680><c> just</c>

00:06:35.909 --> 00:06:35.919 align:start position:0%
let's iterate over the entire grid just
 

00:06:35.919 --> 00:06:38.230 align:start position:0%
let's iterate over the entire grid just
to<00:06:36.000><c> do</c><00:06:36.240><c> some</c><00:06:36.560><c> pre-work</c><00:06:37.360><c> the</c><00:06:37.520><c> pre-work</c><00:06:38.080><c> is</c>

00:06:38.230 --> 00:06:38.240 align:start position:0%
to do some pre-work the pre-work is
 

00:06:38.240 --> 00:06:40.150 align:start position:0%
to do some pre-work the pre-work is
going<00:06:38.319><c> to</c><00:06:38.400><c> be</c><00:06:38.560><c> doing</c><00:06:38.880><c> two</c><00:06:39.199><c> things</c><00:06:39.600><c> at</c><00:06:39.759><c> the</c><00:06:39.840><c> same</c>

00:06:40.150 --> 00:06:40.160 align:start position:0%
going to be doing two things at the same
 

00:06:40.160 --> 00:06:42.150 align:start position:0%
going to be doing two things at the same
time<00:06:40.720><c> so</c><00:06:40.960><c> we</c><00:06:41.039><c> can</c><00:06:41.199><c> just</c><00:06:41.360><c> write</c><00:06:41.520><c> some</c><00:06:41.759><c> nested</c>

00:06:42.150 --> 00:06:42.160 align:start position:0%
time so we can just write some nested
 

00:06:42.160 --> 00:06:44.309 align:start position:0%
time so we can just write some nested
loops<00:06:42.479><c> to</c><00:06:42.639><c> iterate</c><00:06:43.120><c> over</c><00:06:43.280><c> the</c><00:06:43.360><c> grid</c><00:06:43.840><c> one</c><00:06:44.080><c> we're</c>

00:06:44.309 --> 00:06:44.319 align:start position:0%
loops to iterate over the grid one we're
 

00:06:44.319 --> 00:06:46.629 align:start position:0%
loops to iterate over the grid one we're
going<00:06:44.400><c> to</c><00:06:44.479><c> be</c><00:06:44.720><c> doing</c><00:06:45.039><c> is</c><00:06:45.280><c> counting</c><00:06:45.919><c> the</c><00:06:46.160><c> number</c>

00:06:46.629 --> 00:06:46.639 align:start position:0%
going to be doing is counting the number
 

00:06:46.639 --> 00:06:49.990 align:start position:0%
going to be doing is counting the number
of<00:06:46.880><c> fresh</c><00:06:47.360><c> oranges</c><00:06:48.160><c> right</c><00:06:48.400><c> so</c><00:06:48.720><c> if</c><00:06:49.120><c> any</c><00:06:49.520><c> cell</c><00:06:49.919><c> in</c>

00:06:49.990 --> 00:06:50.000 align:start position:0%
of fresh oranges right so if any cell in
 

00:06:50.000 --> 00:06:52.390 align:start position:0%
of fresh oranges right so if any cell in
the<00:06:50.160><c> grid</c><00:06:50.560><c> is</c><00:06:50.720><c> equal</c><00:06:51.039><c> to</c><00:06:51.280><c> one</c><00:06:51.759><c> remember</c><00:06:52.160><c> that</c>

00:06:52.390 --> 00:06:52.400 align:start position:0%
the grid is equal to one remember that
 

00:06:52.400 --> 00:06:55.270 align:start position:0%
the grid is equal to one remember that
ones<00:06:52.880><c> represent</c><00:06:53.520><c> fresh</c><00:06:54.240><c> oranges</c><00:06:54.720><c> so</c><00:06:54.960><c> if</c><00:06:55.039><c> this</c>

00:06:55.270 --> 00:06:55.280 align:start position:0%
ones represent fresh oranges so if this
 

00:06:55.280 --> 00:06:57.029 align:start position:0%
ones represent fresh oranges so if this
is<00:06:55.360><c> equal</c><00:06:55.599><c> to</c><00:06:55.759><c> one</c><00:06:56.080><c> we</c><00:06:56.240><c> can</c><00:06:56.400><c> just</c><00:06:56.639><c> increment</c>

00:06:57.029 --> 00:06:57.039 align:start position:0%
is equal to one we can just increment
 

00:06:57.039 --> 00:06:58.790 align:start position:0%
is equal to one we can just increment
the<00:06:57.120><c> number</c><00:06:57.360><c> of</c><00:06:57.440><c> fresh</c><00:06:57.759><c> oranges</c><00:06:58.400><c> the</c><00:06:58.560><c> second</c>

00:06:58.790 --> 00:06:58.800 align:start position:0%
the number of fresh oranges the second
 

00:06:58.800 --> 00:07:01.430 align:start position:0%
the number of fresh oranges the second
thing<00:06:58.960><c> we</c><00:06:59.199><c> also</c><00:06:59.520><c> want</c><00:06:59.680><c> to</c><00:06:59.840><c> be</c><00:07:00.000><c> doing</c><00:07:00.560><c> is</c><00:07:00.800><c> to</c>

00:07:01.430 --> 00:07:01.440 align:start position:0%
thing we also want to be doing is to
 

00:07:01.440 --> 00:07:04.070 align:start position:0%
thing we also want to be doing is to
identify<00:07:02.319><c> all</c><00:07:02.560><c> of</c><00:07:02.720><c> the</c><00:07:02.960><c> rotting</c><00:07:03.440><c> oranges</c>

00:07:04.070 --> 00:07:04.080 align:start position:0%
identify all of the rotting oranges
 

00:07:04.080 --> 00:07:05.990 align:start position:0%
identify all of the rotting oranges
because<00:07:04.400><c> remember</c><00:07:04.880><c> we</c><00:07:05.039><c> need</c><00:07:05.199><c> to</c><00:07:05.360><c> add</c><00:07:05.599><c> them</c><00:07:05.840><c> to</c>

00:07:05.990 --> 00:07:06.000 align:start position:0%
because remember we need to add them to
 

00:07:06.000 --> 00:07:07.749 align:start position:0%
because remember we need to add them to
our<00:07:06.160><c> queue</c><00:07:06.560><c> so</c><00:07:06.720><c> that</c><00:07:06.800><c> we</c><00:07:06.960><c> can</c><00:07:07.120><c> actually</c><00:07:07.520><c> run</c>

00:07:07.749 --> 00:07:07.759 align:start position:0%
our queue so that we can actually run
 

00:07:07.759 --> 00:07:09.830 align:start position:0%
our queue so that we can actually run
the<00:07:08.000><c> bfs</c><00:07:08.800><c> in</c><00:07:08.880><c> the</c><00:07:09.039><c> first</c><00:07:09.280><c> place</c><00:07:09.520><c> right</c><00:07:09.680><c> the</c>

00:07:09.830 --> 00:07:09.840 align:start position:0%
the bfs in the first place right the
 

00:07:09.840 --> 00:07:12.309 align:start position:0%
the bfs in the first place right the
multi-source<00:07:10.560><c> bfs</c><00:07:11.039><c> so</c><00:07:11.280><c> if</c><00:07:11.520><c> any</c><00:07:11.680><c> of</c><00:07:11.840><c> these</c><00:07:12.000><c> grid</c>

00:07:12.309 --> 00:07:12.319 align:start position:0%
multi-source bfs so if any of these grid
 

00:07:12.319 --> 00:07:14.550 align:start position:0%
multi-source bfs so if any of these grid
cells<00:07:12.639><c> are</c><00:07:12.800><c> equal</c><00:07:13.039><c> to</c><00:07:13.280><c> 2</c><00:07:13.759><c> that</c><00:07:14.000><c> means</c><00:07:14.240><c> it's</c><00:07:14.400><c> a</c>

00:07:14.550 --> 00:07:14.560 align:start position:0%
cells are equal to 2 that means it's a
 

00:07:14.560 --> 00:07:17.110 align:start position:0%
cells are equal to 2 that means it's a
rotting<00:07:14.960><c> orange</c><00:07:15.680><c> and</c><00:07:16.319><c> that</c><00:07:16.479><c> means</c><00:07:16.720><c> we</c><00:07:16.880><c> can</c><00:07:16.960><c> go</c>

00:07:17.110 --> 00:07:17.120 align:start position:0%
rotting orange and that means we can go
 

00:07:17.120 --> 00:07:19.830 align:start position:0%
rotting orange and that means we can go
ahead<00:07:17.280><c> and</c><00:07:17.440><c> append</c><00:07:17.840><c> it</c><00:07:18.080><c> to</c><00:07:18.479><c> our</c><00:07:18.880><c> queue</c><00:07:19.440><c> and</c><00:07:19.599><c> by</c>

00:07:19.830 --> 00:07:19.840 align:start position:0%
ahead and append it to our queue and by
 

00:07:19.840 --> 00:07:21.589 align:start position:0%
ahead and append it to our queue and by
append<00:07:20.400><c> we're</c><00:07:20.560><c> going</c><00:07:20.639><c> to</c><00:07:20.720><c> be</c><00:07:20.800><c> appending</c><00:07:21.280><c> the</c>

00:07:21.589 --> 00:07:21.599 align:start position:0%
append we're going to be appending the
 

00:07:21.599 --> 00:07:24.550 align:start position:0%
append we're going to be appending the
coordinates<00:07:22.639><c> of</c><00:07:22.960><c> that</c><00:07:23.280><c> rotting</c><00:07:23.680><c> orange</c><00:07:24.319><c> so</c>

00:07:24.550 --> 00:07:24.560 align:start position:0%
coordinates of that rotting orange so
 

00:07:24.560 --> 00:07:26.390 align:start position:0%
coordinates of that rotting orange so
next<00:07:24.800><c> what</c><00:07:24.960><c> we're</c><00:07:25.120><c> going</c><00:07:25.280><c> to</c><00:07:25.360><c> be</c><00:07:25.520><c> doing</c><00:07:26.000><c> is</c>

00:07:26.390 --> 00:07:26.400 align:start position:0%
next what we're going to be doing is
 

00:07:26.400 --> 00:07:29.029 align:start position:0%
next what we're going to be doing is
running<00:07:26.720><c> our</c><00:07:27.039><c> while</c><00:07:27.440><c> loop</c><00:07:28.000><c> while</c><00:07:28.400><c> our</c><00:07:28.639><c> queue</c>

00:07:29.029 --> 00:07:29.039 align:start position:0%
running our while loop while our queue
 

00:07:29.039 --> 00:07:32.629 align:start position:0%
running our while loop while our queue
is<00:07:29.199><c> non-empty</c><00:07:30.240><c> and</c><00:07:30.800><c> we</c><00:07:30.960><c> can</c><00:07:31.199><c> say</c><00:07:31.919><c> that</c><00:07:32.160><c> if</c>

00:07:32.629 --> 00:07:32.639 align:start position:0%
is non-empty and we can say that if
 

00:07:32.639 --> 00:07:35.110 align:start position:0%
is non-empty and we can say that if
fresh<00:07:33.199><c> is</c><00:07:33.440><c> also</c><00:07:33.919><c> greater</c><00:07:34.319><c> than</c><00:07:34.560><c> zero</c><00:07:34.880><c> right</c>

00:07:35.110 --> 00:07:35.120 align:start position:0%
fresh is also greater than zero right
 

00:07:35.120 --> 00:07:37.589 align:start position:0%
fresh is also greater than zero right
basically<00:07:35.599><c> if</c><00:07:35.840><c> either</c><00:07:36.080><c> of</c><00:07:36.240><c> these</c><00:07:36.960><c> uh</c><00:07:37.360><c> you</c><00:07:37.440><c> know</c>

00:07:37.589 --> 00:07:37.599 align:start position:0%
basically if either of these uh you know
 

00:07:37.599 --> 00:07:40.070 align:start position:0%
basically if either of these uh you know
if<00:07:37.759><c> our</c><00:07:37.919><c> cube</c><00:07:38.240><c> becomes</c><00:07:38.639><c> empty</c><00:07:39.039><c> or</c><00:07:39.360><c> if</c><00:07:39.599><c> fresh</c>

00:07:40.070 --> 00:07:40.080 align:start position:0%
if our cube becomes empty or if fresh
 

00:07:40.080 --> 00:07:42.390 align:start position:0%
if our cube becomes empty or if fresh
equals<00:07:40.639><c> zero</c><00:07:41.280><c> then</c><00:07:41.520><c> the</c><00:07:41.680><c> loop</c><00:07:42.000><c> is</c><00:07:42.160><c> going</c><00:07:42.240><c> to</c>

00:07:42.390 --> 00:07:42.400 align:start position:0%
equals zero then the loop is going to
 

00:07:42.400 --> 00:07:44.390 align:start position:0%
equals zero then the loop is going to
stop<00:07:42.880><c> if</c><00:07:43.039><c> neither</c><00:07:43.440><c> of</c><00:07:43.520><c> those</c><00:07:43.759><c> are</c><00:07:43.919><c> true</c><00:07:44.240><c> then</c>

00:07:44.390 --> 00:07:44.400 align:start position:0%
stop if neither of those are true then
 

00:07:44.400 --> 00:07:46.070 align:start position:0%
stop if neither of those are true then
we're<00:07:44.560><c> going</c><00:07:44.639><c> to</c><00:07:44.720><c> continue</c><00:07:45.199><c> the</c><00:07:45.360><c> loop</c><00:07:45.680><c> so</c><00:07:45.840><c> now</c>

00:07:46.070 --> 00:07:46.080 align:start position:0%
we're going to continue the loop so now
 

00:07:46.080 --> 00:07:47.909 align:start position:0%
we're going to continue the loop so now
we<00:07:46.240><c> have</c><00:07:46.400><c> a</c><00:07:46.560><c> certain</c><00:07:46.879><c> number</c><00:07:47.280><c> of</c><00:07:47.520><c> rotten</c>

00:07:47.909 --> 00:07:47.919 align:start position:0%
we have a certain number of rotten
 

00:07:47.919 --> 00:07:50.070 align:start position:0%
we have a certain number of rotten
oranges<00:07:48.560><c> in</c><00:07:48.879><c> our</c><00:07:49.120><c> queue</c><00:07:49.520><c> and</c><00:07:49.599><c> we</c><00:07:49.759><c> want</c><00:07:50.000><c> to</c>

00:07:50.070 --> 00:07:50.080 align:start position:0%
oranges in our queue and we want to
 

00:07:50.080 --> 00:07:53.589 align:start position:0%
oranges in our queue and we want to
actually<00:07:50.560><c> pop</c><00:07:51.120><c> every</c><00:07:51.680><c> single</c><00:07:52.560><c> one</c><00:07:52.800><c> of</c><00:07:52.960><c> them</c><00:07:53.360><c> so</c>

00:07:53.589 --> 00:07:53.599 align:start position:0%
actually pop every single one of them so
 

00:07:53.599 --> 00:07:55.029 align:start position:0%
actually pop every single one of them so
basically<00:07:54.080><c> we're</c><00:07:54.240><c> going</c><00:07:54.319><c> to</c><00:07:54.400><c> create</c><00:07:54.639><c> another</c>

00:07:55.029 --> 00:07:55.039 align:start position:0%
basically we're going to create another
 

00:07:55.039 --> 00:07:56.390 align:start position:0%
basically we're going to create another
loop<00:07:55.440><c> while</c>

00:07:56.390 --> 00:07:56.400 align:start position:0%
loop while
 

00:07:56.400 --> 00:07:58.309 align:start position:0%
loop while
you<00:07:56.560><c> know</c><00:07:56.639><c> let's</c><00:07:56.800><c> say</c><00:07:56.960><c> we</c><00:07:57.120><c> have</c><00:07:57.280><c> three</c><00:07:57.759><c> oranges</c>

00:07:58.309 --> 00:07:58.319 align:start position:0%
you know let's say we have three oranges
 

00:07:58.319 --> 00:08:00.230 align:start position:0%
you know let's say we have three oranges
in<00:07:58.479><c> our</c><00:07:58.639><c> queue</c><00:07:59.039><c> then</c><00:07:59.280><c> we're</c><00:07:59.440><c> gonna</c><00:07:59.840><c> iterate</c>

00:08:00.230 --> 00:08:00.240 align:start position:0%
in our queue then we're gonna iterate
 

00:08:00.240 --> 00:08:01.670 align:start position:0%
in our queue then we're gonna iterate
through<00:08:00.400><c> the</c><00:08:00.479><c> loop</c><00:08:00.800><c> three</c><00:08:01.039><c> times</c><00:08:01.280><c> we're</c><00:08:01.440><c> gonna</c>

00:08:01.670 --> 00:08:01.680 align:start position:0%
through the loop three times we're gonna
 

00:08:01.680 --> 00:08:04.070 align:start position:0%
through the loop three times we're gonna
pop<00:08:01.919><c> those</c><00:08:02.240><c> three</c><00:08:02.560><c> oranges</c><00:08:03.360><c> but</c><00:08:03.599><c> at</c><00:08:03.680><c> the</c><00:08:03.840><c> same</c>

00:08:04.070 --> 00:08:04.080 align:start position:0%
pop those three oranges but at the same
 

00:08:04.080 --> 00:08:06.230 align:start position:0%
pop those three oranges but at the same
time<00:08:04.319><c> we're</c><00:08:04.479><c> actually</c><00:08:04.720><c> gonna</c><00:08:04.879><c> be</c><00:08:05.199><c> adding</c><00:08:05.840><c> uh</c>

00:08:06.230 --> 00:08:06.240 align:start position:0%
time we're actually gonna be adding uh
 

00:08:06.240 --> 00:08:10.230 align:start position:0%
time we're actually gonna be adding uh
the<00:08:06.720><c> adjacent</c><00:08:07.599><c> oranges</c><00:08:08.319><c> to</c><00:08:08.560><c> that</c><00:08:08.800><c> q</c><00:08:09.120><c> as</c><00:08:09.360><c> well</c>

00:08:10.230 --> 00:08:10.240 align:start position:0%
the adjacent oranges to that q as well
 

00:08:10.240 --> 00:08:13.110 align:start position:0%
the adjacent oranges to that q as well
marking<00:08:10.720><c> them</c><00:08:11.039><c> as</c><00:08:11.280><c> rotten</c><00:08:12.319><c> so</c><00:08:12.560><c> that's</c><00:08:12.879><c> why</c>

00:08:13.110 --> 00:08:13.120 align:start position:0%
marking them as rotten so that's why
 

00:08:13.120 --> 00:08:15.110 align:start position:0%
marking them as rotten so that's why
we're<00:08:13.280><c> creating</c><00:08:13.680><c> the</c><00:08:13.840><c> while</c><00:08:14.319><c> the</c><00:08:14.560><c> for</c><00:08:14.800><c> loop</c>

00:08:15.110 --> 00:08:15.120 align:start position:0%
we're creating the while the for loop
 

00:08:15.120 --> 00:08:16.790 align:start position:0%
we're creating the while the for loop
rather<00:08:15.360><c> than</c><00:08:15.520><c> saying</c><00:08:15.840><c> while</c><00:08:16.160><c> the</c><00:08:16.319><c> queue</c><00:08:16.639><c> is</c>

00:08:16.790 --> 00:08:16.800 align:start position:0%
rather than saying while the queue is
 

00:08:16.800 --> 00:08:19.350 align:start position:0%
rather than saying while the queue is
non-empty<00:08:17.520><c> because</c><00:08:18.319><c> uh</c><00:08:18.560><c> this</c><00:08:18.720><c> will</c><00:08:18.960><c> just</c><00:08:19.120><c> take</c>

00:08:19.350 --> 00:08:19.360 align:start position:0%
non-empty because uh this will just take
 

00:08:19.360 --> 00:08:21.430 align:start position:0%
non-empty because uh this will just take
a<00:08:19.440><c> snapshot</c><00:08:20.240><c> so</c><00:08:20.400><c> for</c><00:08:20.560><c> example</c><00:08:20.960><c> if</c><00:08:21.039><c> the</c><00:08:21.199><c> length</c>

00:08:21.430 --> 00:08:21.440 align:start position:0%
a snapshot so for example if the length
 

00:08:21.440 --> 00:08:23.909 align:start position:0%
a snapshot so for example if the length
of<00:08:21.599><c> our</c><00:08:21.759><c> queue</c><00:08:22.080><c> is</c><00:08:22.160><c> equal</c><00:08:22.400><c> to</c><00:08:22.639><c> three</c><00:08:23.360><c> this</c><00:08:23.680><c> loop</c>

00:08:23.909 --> 00:08:23.919 align:start position:0%
of our queue is equal to three this loop
 

00:08:23.919 --> 00:08:25.749 align:start position:0%
of our queue is equal to three this loop
will<00:08:24.080><c> execute</c><00:08:24.560><c> three</c><00:08:24.879><c> times</c><00:08:25.199><c> even</c><00:08:25.440><c> though</c>

00:08:25.749 --> 00:08:25.759 align:start position:0%
will execute three times even though
 

00:08:25.759 --> 00:08:27.110 align:start position:0%
will execute three times even though
inside<00:08:26.160><c> of</c><00:08:26.240><c> the</c><00:08:26.400><c> loop</c><00:08:26.560><c> we're</c><00:08:26.720><c> going</c><00:08:26.800><c> to</c><00:08:26.879><c> be</c>

00:08:27.110 --> 00:08:27.120 align:start position:0%
inside of the loop we're going to be
 

00:08:27.120 --> 00:08:29.430 align:start position:0%
inside of the loop we're going to be
adding<00:08:27.520><c> to</c><00:08:27.680><c> the</c><00:08:27.840><c> queue</c><00:08:28.240><c> updating</c><00:08:28.720><c> its</c><00:08:28.960><c> length</c>

00:08:29.430 --> 00:08:29.440 align:start position:0%
adding to the queue updating its length
 

00:08:29.440 --> 00:08:31.749 align:start position:0%
adding to the queue updating its length
but<00:08:29.599><c> this</c><00:08:30.000><c> uh</c><00:08:30.400><c> you</c><00:08:30.479><c> know</c><00:08:30.639><c> the</c><00:08:31.120><c> range</c><00:08:31.440><c> function</c>

00:08:31.749 --> 00:08:31.759 align:start position:0%
but this uh you know the range function
 

00:08:31.759 --> 00:08:33.509 align:start position:0%
but this uh you know the range function
isn't<00:08:32.000><c> going</c><00:08:32.080><c> to</c><00:08:32.240><c> execute</c><00:08:32.719><c> each</c><00:08:32.959><c> time</c><00:08:33.200><c> after</c>

00:08:33.509 --> 00:08:33.519 align:start position:0%
isn't going to execute each time after
 

00:08:33.519 --> 00:08:35.990 align:start position:0%
isn't going to execute each time after
that<00:08:34.000><c> we</c><00:08:34.159><c> want</c><00:08:34.399><c> to</c><00:08:34.560><c> of</c><00:08:34.640><c> course</c><00:08:35.039><c> pop</c><00:08:35.599><c> from</c><00:08:35.839><c> the</c>

00:08:35.990 --> 00:08:36.000 align:start position:0%
that we want to of course pop from the
 

00:08:36.000 --> 00:08:38.070 align:start position:0%
that we want to of course pop from the
queue<00:08:36.560><c> and</c><00:08:36.719><c> when</c><00:08:36.959><c> we</c><00:08:37.120><c> pop</c><00:08:37.360><c> we're</c><00:08:37.599><c> popping</c><00:08:37.919><c> the</c>

00:08:38.070 --> 00:08:38.080 align:start position:0%
queue and when we pop we're popping the
 

00:08:38.080 --> 00:08:40.630 align:start position:0%
queue and when we pop we're popping the
coordinates<00:08:38.719><c> of</c><00:08:38.880><c> the</c><00:08:39.039><c> rotten</c><00:08:39.440><c> orange</c><00:08:40.159><c> at</c><00:08:40.320><c> this</c>

00:08:40.630 --> 00:08:40.640 align:start position:0%
coordinates of the rotten orange at this
 

00:08:40.640 --> 00:08:42.790 align:start position:0%
coordinates of the rotten orange at this
point<00:08:40.959><c> we</c><00:08:41.200><c> want</c><00:08:41.440><c> to</c><00:08:41.599><c> go</c><00:08:41.919><c> through</c><00:08:42.240><c> all</c><00:08:42.479><c> of</c><00:08:42.560><c> the</c>

00:08:42.790 --> 00:08:42.800 align:start position:0%
point we want to go through all of the
 

00:08:42.800 --> 00:08:45.509 align:start position:0%
point we want to go through all of the
four<00:08:43.120><c> adjacent</c><00:08:43.760><c> spots</c><00:08:44.320><c> for</c><00:08:44.720><c> this</c><00:08:45.040><c> orange</c><00:08:45.440><c> so</c>

00:08:45.509 --> 00:08:45.519 align:start position:0%
four adjacent spots for this orange so
 

00:08:45.519 --> 00:08:48.389 align:start position:0%
four adjacent spots for this orange so
what<00:08:45.680><c> we're</c><00:08:45.839><c> going</c><00:08:45.920><c> to</c><00:08:46.000><c> say</c><00:08:46.320><c> is</c><00:08:46.560><c> drdc</c>

00:08:48.389 --> 00:08:48.399 align:start position:0%
what we're going to say is drdc
 

00:08:48.399 --> 00:08:50.870 align:start position:0%
what we're going to say is drdc
the<00:08:48.640><c> difference</c><00:08:49.040><c> in</c><00:08:49.200><c> run</c><00:08:49.440><c> difference</c><00:08:50.000><c> in</c><00:08:50.640><c> a</c>

00:08:50.870 --> 00:08:50.880 align:start position:0%
the difference in run difference in a
 

00:08:50.880 --> 00:08:53.990 align:start position:0%
the difference in run difference in a
column<00:08:51.519><c> in</c><00:08:52.240><c> directions</c><00:08:53.360><c> and</c><00:08:53.519><c> we're</c><00:08:53.760><c> actually</c>

00:08:53.990 --> 00:08:54.000 align:start position:0%
column in directions and we're actually
 

00:08:54.000 --> 00:08:55.990 align:start position:0%
column in directions and we're actually
going<00:08:54.080><c> to</c><00:08:54.240><c> create</c><00:08:54.800><c> a</c><00:08:55.040><c> variable</c><00:08:55.519><c> for</c><00:08:55.760><c> this</c>

00:08:55.990 --> 00:08:56.000 align:start position:0%
going to create a variable for this
 

00:08:56.000 --> 00:08:59.190 align:start position:0%
going to create a variable for this
outside<00:08:56.640><c> of</c><00:08:56.800><c> our</c><00:08:57.120><c> loop</c><00:08:57.839><c> and</c><00:08:58.480><c> it's</c><00:08:58.720><c> basically</c>

00:08:59.190 --> 00:08:59.200 align:start position:0%
outside of our loop and it's basically
 

00:08:59.200 --> 00:09:00.870 align:start position:0%
outside of our loop and it's basically
the<00:08:59.360><c> four</c><00:08:59.680><c> directions</c><00:09:00.240><c> that</c><00:09:00.320><c> we</c><00:09:00.399><c> could</c><00:09:00.640><c> move</c>

00:09:00.870 --> 00:09:00.880 align:start position:0%
the four directions that we could move
 

00:09:00.880 --> 00:09:02.949 align:start position:0%
the four directions that we could move
in<00:09:00.959><c> so</c><00:09:01.120><c> it's</c><00:09:01.279><c> going</c><00:09:01.360><c> to</c><00:09:01.440><c> be</c><00:09:01.680><c> pairs</c><00:09:02.080><c> let's</c><00:09:02.240><c> say</c><00:09:02.480><c> 0</c>

00:09:02.949 --> 00:09:02.959 align:start position:0%
in so it's going to be pairs let's say 0
 

00:09:02.959 --> 00:09:05.350 align:start position:0%
in so it's going to be pairs let's say 0
1<00:09:03.519><c> and</c><00:09:04.320><c> 0</c>

00:09:05.350 --> 00:09:05.360 align:start position:0%
1 and 0
 

00:09:05.360 --> 00:09:09.670 align:start position:0%
1 and 0
negative<00:09:05.760><c> 1</c><00:09:06.399><c> and</c><00:09:06.800><c> 1</c><00:09:07.440><c> zero</c><00:09:08.320><c> and</c><00:09:08.880><c> negative</c><00:09:09.360><c> one</c>

00:09:09.670 --> 00:09:09.680 align:start position:0%
negative 1 and 1 zero and negative one
 

00:09:09.680 --> 00:09:12.070 align:start position:0%
negative 1 and 1 zero and negative one
zero<00:09:10.080><c> so</c><00:09:10.240><c> these</c><00:09:10.480><c> are</c><00:09:10.560><c> the</c><00:09:10.800><c> four</c><00:09:11.440><c> directions</c><00:09:11.920><c> we</c>

00:09:12.070 --> 00:09:12.080 align:start position:0%
zero so these are the four directions we
 

00:09:12.080 --> 00:09:13.990 align:start position:0%
zero so these are the four directions we
could<00:09:12.240><c> move</c><00:09:12.480><c> in</c><00:09:12.640><c> so</c><00:09:12.800><c> that's</c><00:09:13.040><c> what</c><00:09:13.200><c> dr</c><00:09:13.519><c> dc</c><00:09:13.920><c> is</c>

00:09:13.990 --> 00:09:14.000 align:start position:0%
could move in so that's what dr dc is
 

00:09:14.000 --> 00:09:15.829 align:start position:0%
could move in so that's what dr dc is
going<00:09:14.080><c> to</c><00:09:14.160><c> represent</c><00:09:15.040><c> so</c>

00:09:15.829 --> 00:09:15.839 align:start position:0%
going to represent so
 

00:09:15.839 --> 00:09:17.430 align:start position:0%
going to represent so
let's<00:09:16.080><c> actually</c><00:09:16.399><c> calculate</c><00:09:16.880><c> what</c><00:09:17.040><c> the</c><00:09:17.200><c> row</c>

00:09:17.430 --> 00:09:17.440 align:start position:0%
let's actually calculate what the row
 

00:09:17.440 --> 00:09:19.030 align:start position:0%
let's actually calculate what the row
would<00:09:17.600><c> be</c><00:09:17.760><c> so</c><00:09:17.920><c> initially</c><00:09:18.320><c> we're</c><00:09:18.480><c> starting</c><00:09:18.800><c> at</c>

00:09:19.030 --> 00:09:19.040 align:start position:0%
would be so initially we're starting at
 

00:09:19.040 --> 00:09:21.910 align:start position:0%
would be so initially we're starting at
rc<00:09:20.080><c> and</c><00:09:20.240><c> then</c><00:09:20.640><c> the</c><00:09:21.040><c> you</c><00:09:21.120><c> know</c><00:09:21.279><c> adjacent</c><00:09:21.680><c> spot</c>

00:09:21.910 --> 00:09:21.920 align:start position:0%
rc and then the you know adjacent spot
 

00:09:21.920 --> 00:09:24.389 align:start position:0%
rc and then the you know adjacent spot
that<00:09:22.080><c> we're</c><00:09:22.160><c> looking</c><00:09:22.399><c> at</c><00:09:22.560><c> is</c><00:09:22.640><c> going</c><00:09:22.720><c> to</c><00:09:22.880><c> be</c><00:09:23.440><c> d</c><00:09:23.760><c> r</c>

00:09:24.389 --> 00:09:24.399 align:start position:0%
that we're looking at is going to be d r
 

00:09:24.399 --> 00:09:29.590 align:start position:0%
that we're looking at is going to be d r
plus<00:09:25.040><c> r</c><00:09:25.680><c> and</c><00:09:26.320><c> d</c><00:09:26.640><c> c</c><00:09:27.120><c> plus</c><00:09:27.839><c> c</c><00:09:28.399><c> so</c><00:09:28.720><c> this</c><00:09:29.120><c> is</c><00:09:29.360><c> one</c><00:09:29.519><c> of</c>

00:09:29.590 --> 00:09:29.600 align:start position:0%
plus r and d c plus c so this is one of
 

00:09:29.600 --> 00:09:31.990 align:start position:0%
plus r and d c plus c so this is one of
the<00:09:29.839><c> four</c><00:09:30.160><c> adjacent</c><00:09:30.640><c> spots</c><00:09:31.120><c> row</c><00:09:31.440><c> column</c><00:09:31.920><c> and</c>

00:09:31.990 --> 00:09:32.000 align:start position:0%
the four adjacent spots row column and
 

00:09:32.000 --> 00:09:34.470 align:start position:0%
the four adjacent spots row column and
what<00:09:32.160><c> we</c><00:09:32.320><c> want</c><00:09:32.480><c> to</c><00:09:32.640><c> do</c><00:09:32.880><c> with</c><00:09:33.040><c> this</c><00:09:33.279><c> position</c><00:09:33.920><c> is</c>

00:09:34.470 --> 00:09:34.480 align:start position:0%
what we want to do with this position is
 

00:09:34.480 --> 00:09:37.430 align:start position:0%
what we want to do with this position is
make<00:09:34.720><c> sure</c><00:09:34.880><c> that</c><00:09:35.120><c> it's</c><00:09:35.440><c> in</c><00:09:36.000><c> bounds</c><00:09:36.800><c> and</c><00:09:37.200><c> that</c>

00:09:37.430 --> 00:09:37.440 align:start position:0%
make sure that it's in bounds and that
 

00:09:37.440 --> 00:09:40.230 align:start position:0%
make sure that it's in bounds and that
it's<00:09:37.600><c> a</c><00:09:37.839><c> non-rotten</c><00:09:38.800><c> orange</c><00:09:39.600><c> so</c><00:09:39.839><c> meaning</c><00:09:40.080><c> that</c>

00:09:40.230 --> 00:09:40.240 align:start position:0%
it's a non-rotten orange so meaning that
 

00:09:40.240 --> 00:09:42.230 align:start position:0%
it's a non-rotten orange so meaning that
it's<00:09:40.480><c> a</c><00:09:40.640><c> fresh</c><00:09:41.040><c> orange</c><00:09:41.440><c> let's</c><00:09:41.839><c> actually</c>

00:09:42.230 --> 00:09:42.240 align:start position:0%
it's a fresh orange let's actually
 

00:09:42.240 --> 00:09:43.590 align:start position:0%
it's a fresh orange let's actually
change<00:09:42.480><c> this</c><00:09:42.640><c> comment</c><00:09:42.959><c> to</c><00:09:43.040><c> that</c><00:09:43.279><c> and</c><00:09:43.360><c> it's</c><00:09:43.519><c> a</c>

00:09:43.590 --> 00:09:43.600 align:start position:0%
change this comment to that and it's a
 

00:09:43.600 --> 00:09:45.509 align:start position:0%
change this comment to that and it's a
fresh<00:09:43.920><c> orange</c><00:09:44.320><c> and</c><00:09:44.399><c> then</c><00:09:44.560><c> we</c><00:09:44.720><c> want</c><00:09:44.880><c> to</c><00:09:45.040><c> make</c><00:09:45.279><c> it</c>

00:09:45.509 --> 00:09:45.519 align:start position:0%
fresh orange and then we want to make it
 

00:09:45.519 --> 00:09:47.030 align:start position:0%
fresh orange and then we want to make it
rotten<00:09:45.839><c> so</c><00:09:46.000><c> to</c><00:09:46.080><c> save</c><00:09:46.320><c> a</c><00:09:46.399><c> bit</c><00:09:46.560><c> of</c><00:09:46.640><c> time</c><00:09:46.800><c> i'm</c>

00:09:47.030 --> 00:09:47.040 align:start position:0%
rotten so to save a bit of time i'm
 

00:09:47.040 --> 00:09:48.310 align:start position:0%
rotten so to save a bit of time i'm
actually<00:09:47.279><c> just</c><00:09:47.360><c> going</c><00:09:47.519><c> to</c><00:09:47.600><c> copy</c><00:09:47.920><c> and</c><00:09:48.080><c> paste</c>

00:09:48.310 --> 00:09:48.320 align:start position:0%
actually just going to copy and paste
 

00:09:48.320 --> 00:09:49.829 align:start position:0%
actually just going to copy and paste
this<00:09:48.480><c> so</c><00:09:48.640><c> what</c><00:09:48.800><c> we're</c><00:09:48.959><c> doing</c><00:09:49.279><c> here</c><00:09:49.600><c> is</c>

00:09:49.829 --> 00:09:49.839 align:start position:0%
this so what we're doing here is
 

00:09:49.839 --> 00:09:51.430 align:start position:0%
this so what we're doing here is
checking<00:09:50.240><c> that</c><00:09:50.399><c> the</c><00:09:50.640><c> row</c>

00:09:51.430 --> 00:09:51.440 align:start position:0%
checking that the row
 

00:09:51.440 --> 00:09:53.350 align:start position:0%
checking that the row
basically<00:09:51.839><c> if</c><00:09:52.000><c> the</c><00:09:52.240><c> row</c><00:09:52.560><c> is</c><00:09:52.720><c> out</c><00:09:52.880><c> of</c><00:09:52.959><c> bounds</c><00:09:53.279><c> if</c>

00:09:53.350 --> 00:09:53.360 align:start position:0%
basically if the row is out of bounds if
 

00:09:53.360 --> 00:09:55.350 align:start position:0%
basically if the row is out of bounds if
it's<00:09:53.600><c> less</c><00:09:53.760><c> than</c><00:09:53.920><c> zero</c><00:09:54.240><c> or</c><00:09:54.399><c> if</c><00:09:54.480><c> it's</c><00:09:54.720><c> too</c><00:09:54.959><c> big</c>

00:09:55.350 --> 00:09:55.360 align:start position:0%
it's less than zero or if it's too big
 

00:09:55.360 --> 00:09:56.870 align:start position:0%
it's less than zero or if it's too big
or<00:09:55.519><c> if</c><00:09:55.600><c> the</c><00:09:55.760><c> column</c><00:09:56.080><c> is</c><00:09:56.240><c> out</c><00:09:56.320><c> of</c><00:09:56.399><c> bounds</c><00:09:56.720><c> or</c>

00:09:56.870 --> 00:09:56.880 align:start position:0%
or if the column is out of bounds or
 

00:09:56.880 --> 00:09:59.350 align:start position:0%
or if the column is out of bounds or
it's<00:09:57.120><c> too</c><00:09:57.279><c> big</c><00:09:57.839><c> or</c><00:09:58.320><c> the</c><00:09:58.480><c> grid</c><00:09:58.880><c> cell</c><00:09:59.200><c> is</c>

00:09:59.350 --> 00:09:59.360 align:start position:0%
it's too big or the grid cell is
 

00:09:59.360 --> 00:10:01.670 align:start position:0%
it's too big or the grid cell is
actually<00:09:59.760><c> not</c><00:10:00.080><c> a</c><00:10:00.240><c> fresh</c><00:10:00.640><c> orange</c><00:10:01.120><c> if</c><00:10:01.360><c> any</c><00:10:01.600><c> of</c>

00:10:01.670 --> 00:10:01.680 align:start position:0%
actually not a fresh orange if any of
 

00:10:01.680 --> 00:10:03.670 align:start position:0%
actually not a fresh orange if any of
these<00:10:01.920><c> are</c><00:10:02.079><c> true</c><00:10:02.480><c> we're</c><00:10:02.640><c> going</c><00:10:02.800><c> to</c><00:10:02.880><c> continue</c>

00:10:03.670 --> 00:10:03.680 align:start position:0%
these are true we're going to continue
 

00:10:03.680 --> 00:10:05.430 align:start position:0%
these are true we're going to continue
to<00:10:03.760><c> the</c><00:10:04.000><c> next</c><00:10:04.320><c> iteration</c><00:10:04.800><c> of</c><00:10:04.880><c> the</c><00:10:05.040><c> loop</c>

00:10:05.430 --> 00:10:05.440 align:start position:0%
to the next iteration of the loop
 

00:10:05.440 --> 00:10:06.790 align:start position:0%
to the next iteration of the loop
because<00:10:05.680><c> that</c><00:10:05.839><c> means</c><00:10:06.079><c> this</c><00:10:06.240><c> is</c><00:10:06.399><c> either</c><00:10:06.640><c> out</c><00:10:06.720><c> of</c>

00:10:06.790 --> 00:10:06.800 align:start position:0%
because that means this is either out of
 

00:10:06.800 --> 00:10:09.190 align:start position:0%
because that means this is either out of
bounds<00:10:07.120><c> or</c><00:10:07.279><c> it's</c><00:10:07.440><c> not</c><00:10:07.600><c> a</c><00:10:07.760><c> fresh</c><00:10:08.079><c> orange</c><00:10:08.640><c> but</c><00:10:09.040><c> if</c>

00:10:09.190 --> 00:10:09.200 align:start position:0%
bounds or it's not a fresh orange but if
 

00:10:09.200 --> 00:10:11.590 align:start position:0%
bounds or it's not a fresh orange but if
it<00:10:09.360><c> is</c><00:10:09.600><c> a</c><00:10:09.680><c> fresh</c><00:10:10.000><c> orange</c><00:10:10.480><c> and</c><00:10:10.640><c> it's</c><00:10:10.880><c> in</c><00:10:11.040><c> bounds</c>

00:10:11.590 --> 00:10:11.600 align:start position:0%
it is a fresh orange and it's in bounds
 

00:10:11.600 --> 00:10:14.630 align:start position:0%
it is a fresh orange and it's in bounds
then<00:10:11.839><c> we</c><00:10:12.079><c> want</c><00:10:12.240><c> to</c><00:10:12.560><c> make</c><00:10:12.800><c> it</c><00:10:13.040><c> into</c><00:10:13.519><c> a</c><00:10:14.160><c> rotten</c>

00:10:14.630 --> 00:10:14.640 align:start position:0%
then we want to make it into a rotten
 

00:10:14.640 --> 00:10:16.870 align:start position:0%
then we want to make it into a rotten
orange<00:10:15.279><c> so</c><00:10:15.440><c> we</c><00:10:15.600><c> can</c><00:10:15.760><c> do</c><00:10:15.920><c> that</c><00:10:16.079><c> very</c><00:10:16.399><c> easily</c>

00:10:16.870 --> 00:10:16.880 align:start position:0%
orange so we can do that very easily
 

00:10:16.880 --> 00:10:19.910 align:start position:0%
orange so we can do that very easily
like<00:10:17.279><c> this</c><00:10:17.839><c> and</c><00:10:18.079><c> we</c><00:10:18.399><c> also</c><00:10:18.720><c> want</c><00:10:18.880><c> to</c><00:10:19.120><c> add</c><00:10:19.440><c> that</c>

00:10:19.910 --> 00:10:19.920 align:start position:0%
like this and we also want to add that
 

00:10:19.920 --> 00:10:22.710 align:start position:0%
like this and we also want to add that
position<00:10:20.399><c> to</c><00:10:20.640><c> our</c><00:10:20.880><c> queue</c><00:10:21.440><c> so</c><00:10:21.680><c> that</c><00:10:21.920><c> row</c><00:10:22.240><c> column</c>

00:10:22.710 --> 00:10:22.720 align:start position:0%
position to our queue so that row column
 

00:10:22.720 --> 00:10:25.750 align:start position:0%
position to our queue so that row column
pair<00:10:23.200><c> so</c><00:10:23.440><c> that</c><00:10:23.760><c> over</c><00:10:24.399><c> the</c><00:10:24.959><c> next</c><00:10:25.279><c> iteration</c><00:10:25.680><c> of</c>

00:10:25.750 --> 00:10:25.760 align:start position:0%
pair so that over the next iteration of
 

00:10:25.760 --> 00:10:28.790 align:start position:0%
pair so that over the next iteration of
the<00:10:25.920><c> while</c><00:10:26.240><c> loop</c><00:10:26.800><c> that</c><00:10:27.120><c> we</c><00:10:27.360><c> can</c><00:10:28.000><c> include</c><00:10:28.480><c> that</c>

00:10:28.790 --> 00:10:28.800 align:start position:0%
the while loop that we can include that
 

00:10:28.800 --> 00:10:30.470 align:start position:0%
the while loop that we can include that
right<00:10:29.279><c> even</c><00:10:29.440><c> though</c><00:10:29.600><c> we're</c><00:10:29.760><c> appending</c><00:10:30.240><c> to</c><00:10:30.320><c> the</c>

00:10:30.470 --> 00:10:30.480 align:start position:0%
right even though we're appending to the
 

00:10:30.480 --> 00:10:33.269 align:start position:0%
right even though we're appending to the
queue<00:10:31.040><c> this</c><00:10:31.519><c> portion</c><00:10:31.920><c> of</c><00:10:32.079><c> the</c><00:10:32.720><c> you</c><00:10:32.800><c> know</c><00:10:32.959><c> for</c>

00:10:33.269 --> 00:10:33.279 align:start position:0%
queue this portion of the you know for
 

00:10:33.279 --> 00:10:34.710 align:start position:0%
queue this portion of the you know for
loop<00:10:33.519><c> isn't</c><00:10:33.680><c> going</c><00:10:33.839><c> to</c><00:10:33.920><c> change</c><00:10:34.240><c> right</c><00:10:34.399><c> that</c>

00:10:34.710 --> 00:10:34.720 align:start position:0%
loop isn't going to change right that
 

00:10:34.720 --> 00:10:36.550 align:start position:0%
loop isn't going to change right that
length<00:10:35.040><c> was</c><00:10:35.200><c> a</c><00:10:35.360><c> snapshot</c><00:10:36.000><c> we're</c><00:10:36.160><c> not</c><00:10:36.240><c> going</c><00:10:36.399><c> to</c>

00:10:36.550 --> 00:10:36.560 align:start position:0%
length was a snapshot we're not going to
 

00:10:36.560 --> 00:10:39.030 align:start position:0%
length was a snapshot we're not going to
continuously<00:10:37.600><c> update</c><00:10:38.000><c> that</c><00:10:38.399><c> and</c><00:10:38.640><c> last</c><00:10:38.880><c> but</c>

00:10:39.030 --> 00:10:39.040 align:start position:0%
continuously update that and last but
 

00:10:39.040 --> 00:10:42.150 align:start position:0%
continuously update that and last but
not<00:10:39.279><c> least</c><00:10:39.760><c> make</c><00:10:40.000><c> sure</c><00:10:40.320><c> to</c><00:10:40.880><c> uh</c><00:10:41.200><c> decrement</c><00:10:42.000><c> the</c>

00:10:42.150 --> 00:10:42.160 align:start position:0%
not least make sure to uh decrement the
 

00:10:42.160 --> 00:10:43.990 align:start position:0%
not least make sure to uh decrement the
number<00:10:42.480><c> of</c><00:10:42.640><c> fresh</c><00:10:43.040><c> oranges</c><00:10:43.519><c> because</c><00:10:43.680><c> that's</c>

00:10:43.990 --> 00:10:44.000 align:start position:0%
number of fresh oranges because that's
 

00:10:44.000 --> 00:10:45.910 align:start position:0%
number of fresh oranges because that's
one<00:10:44.160><c> of</c><00:10:44.240><c> the</c><00:10:44.560><c> you</c><00:10:44.640><c> know</c><00:10:44.880><c> indicators</c><00:10:45.519><c> of</c><00:10:45.680><c> if</c><00:10:45.839><c> we</c>

00:10:45.910 --> 00:10:45.920 align:start position:0%
one of the you know indicators of if we
 

00:10:45.920 --> 00:10:48.230 align:start position:0%
one of the you know indicators of if we
can<00:10:46.079><c> stop</c><00:10:46.399><c> the</c><00:10:46.560><c> algorithm</c><00:10:47.040><c> or</c><00:10:47.279><c> not</c><00:10:47.839><c> and</c>

00:10:48.230 --> 00:10:48.240 align:start position:0%
can stop the algorithm or not and
 

00:10:48.240 --> 00:10:50.870 align:start position:0%
can stop the algorithm or not and
remember<00:10:49.040><c> this</c><00:10:49.519><c> loop</c><00:10:49.920><c> was</c><00:10:50.160><c> going</c><00:10:50.399><c> through</c><00:10:50.720><c> all</c>

00:10:50.870 --> 00:10:50.880 align:start position:0%
remember this loop was going through all
 

00:10:50.880 --> 00:10:52.790 align:start position:0%
remember this loop was going through all
of<00:10:51.040><c> the</c><00:10:51.279><c> rotten</c><00:10:51.680><c> oranges</c><00:10:52.320><c> and</c><00:10:52.399><c> then</c><00:10:52.640><c> the</c>

00:10:52.790 --> 00:10:52.800 align:start position:0%
of the rotten oranges and then the
 

00:10:52.800 --> 00:10:54.310 align:start position:0%
of the rotten oranges and then the
adjacent

00:10:54.310 --> 00:10:54.320 align:start position:0%
adjacent
 

00:10:54.320 --> 00:10:55.990 align:start position:0%
adjacent
fresh<00:10:54.560><c> oranges</c><00:10:54.959><c> were</c><00:10:55.120><c> being</c><00:10:55.360><c> set</c><00:10:55.519><c> to</c><00:10:55.680><c> rotten</c>

00:10:55.990 --> 00:10:56.000 align:start position:0%
fresh oranges were being set to rotten
 

00:10:56.000 --> 00:10:58.069 align:start position:0%
fresh oranges were being set to rotten
as<00:10:56.079><c> well</c><00:10:56.320><c> so</c><00:10:56.480><c> that</c><00:10:56.720><c> actually</c><00:10:57.040><c> happened</c><00:10:57.440><c> in</c><00:10:57.760><c> one</c>

00:10:58.069 --> 00:10:58.079 align:start position:0%
as well so that actually happened in one
 

00:10:58.079 --> 00:11:00.069 align:start position:0%
as well so that actually happened in one
unit<00:10:58.399><c> of</c><00:10:58.560><c> time</c><00:10:58.800><c> so</c><00:10:59.040><c> after</c><00:10:59.279><c> that</c><00:10:59.440><c> loop</c><00:10:59.760><c> is</c><00:10:59.839><c> done</c>

00:11:00.069 --> 00:11:00.079 align:start position:0%
unit of time so after that loop is done
 

00:11:00.079 --> 00:11:02.870 align:start position:0%
unit of time so after that loop is done
executing<00:11:00.800><c> we</c><00:11:00.959><c> can</c><00:11:01.200><c> increment</c><00:11:01.680><c> our</c><00:11:01.920><c> time</c><00:11:02.480><c> by</c>

00:11:02.870 --> 00:11:02.880 align:start position:0%
executing we can increment our time by
 

00:11:02.880 --> 00:11:06.389 align:start position:0%
executing we can increment our time by
one<00:11:03.519><c> after</c><00:11:04.160><c> uh</c><00:11:04.320><c> this</c><00:11:04.640><c> loop</c><00:11:04.959><c> is</c><00:11:05.279><c> finished</c><00:11:06.079><c> then</c>

00:11:06.389 --> 00:11:06.399 align:start position:0%
one after uh this loop is finished then
 

00:11:06.399 --> 00:11:08.470 align:start position:0%
one after uh this loop is finished then
it's<00:11:06.560><c> time</c><00:11:06.800><c> to</c><00:11:06.959><c> return</c><00:11:07.440><c> our</c><00:11:07.680><c> result</c><00:11:08.160><c> but</c><00:11:08.320><c> how</c>

00:11:08.470 --> 00:11:08.480 align:start position:0%
it's time to return our result but how
 

00:11:08.480 --> 00:11:11.750 align:start position:0%
it's time to return our result but how
do<00:11:08.640><c> we</c><00:11:08.959><c> know</c><00:11:09.519><c> if</c><00:11:09.760><c> we</c><00:11:09.920><c> can</c><00:11:10.079><c> return</c><00:11:10.800><c> the</c><00:11:11.200><c> time</c><00:11:11.600><c> or</c>

00:11:11.750 --> 00:11:11.760 align:start position:0%
do we know if we can return the time or
 

00:11:11.760 --> 00:11:13.509 align:start position:0%
do we know if we can return the time or
if<00:11:11.839><c> we</c><00:11:12.000><c> have</c><00:11:12.160><c> to</c><00:11:12.240><c> return</c><00:11:12.720><c> negative</c><00:11:13.120><c> one</c><00:11:13.360><c> well</c>

00:11:13.509 --> 00:11:13.519 align:start position:0%
if we have to return negative one well
 

00:11:13.519 --> 00:11:16.470 align:start position:0%
if we have to return negative one well
we<00:11:13.680><c> can</c><00:11:13.839><c> return</c><00:11:14.160><c> the</c><00:11:14.320><c> time</c><00:11:14.800><c> if</c><00:11:15.440><c> fresh</c><00:11:16.000><c> is</c><00:11:16.240><c> equal</c>

00:11:16.470 --> 00:11:16.480 align:start position:0%
we can return the time if fresh is equal
 

00:11:16.480 --> 00:11:18.389 align:start position:0%
we can return the time if fresh is equal
to<00:11:16.720><c> zero</c><00:11:16.959><c> that</c><00:11:17.120><c> means</c><00:11:17.360><c> we</c><00:11:17.519><c> made</c><00:11:17.760><c> every</c><00:11:18.000><c> single</c>

00:11:18.389 --> 00:11:18.399 align:start position:0%
to zero that means we made every single
 

00:11:18.399 --> 00:11:21.430 align:start position:0%
to zero that means we made every single
orange<00:11:18.880><c> rotten</c><00:11:19.440><c> but</c><00:11:19.760><c> else</c><00:11:20.240><c> if</c><00:11:20.399><c> it's</c><00:11:20.720><c> not</c><00:11:21.200><c> then</c>

00:11:21.430 --> 00:11:21.440 align:start position:0%
orange rotten but else if it's not then
 

00:11:21.440 --> 00:11:22.870 align:start position:0%
orange rotten but else if it's not then
we<00:11:21.600><c> have</c><00:11:21.760><c> to</c><00:11:21.839><c> return</c><00:11:22.240><c> negative</c><00:11:22.560><c> one</c><00:11:22.800><c> that</c>

00:11:22.870 --> 00:11:22.880 align:start position:0%
we have to return negative one that
 

00:11:22.880 --> 00:11:24.949 align:start position:0%
we have to return negative one that
means<00:11:23.120><c> there's</c><00:11:23.440><c> some</c><00:11:23.760><c> oranges</c><00:11:24.160><c> that</c><00:11:24.320><c> we</c><00:11:24.480><c> just</c>

00:11:24.949 --> 00:11:24.959 align:start position:0%
means there's some oranges that we just
 

00:11:24.959 --> 00:11:26.949 align:start position:0%
means there's some oranges that we just
can't<00:11:25.360><c> make</c><00:11:25.760><c> rotten</c><00:11:26.240><c> okay</c><00:11:26.399><c> so</c><00:11:26.560><c> that's</c><00:11:26.880><c> the</c>

00:11:26.949 --> 00:11:26.959 align:start position:0%
can't make rotten okay so that's the
 

00:11:26.959 --> 00:11:29.350 align:start position:0%
can't make rotten okay so that's the
whole<00:11:27.279><c> code</c><00:11:27.920><c> now</c><00:11:28.240><c> lastly</c><00:11:28.640><c> let's</c><00:11:28.880><c> just</c><00:11:29.040><c> run</c><00:11:29.279><c> it</c>

00:11:29.350 --> 00:11:29.360 align:start position:0%
whole code now lastly let's just run it
 

00:11:29.360 --> 00:11:30.949 align:start position:0%
whole code now lastly let's just run it
to<00:11:29.440><c> make</c><00:11:29.600><c> sure</c><00:11:29.760><c> that</c><00:11:29.920><c> it</c><00:11:30.000><c> works</c><00:11:30.480><c> and</c><00:11:30.640><c> actually</c>

00:11:30.949 --> 00:11:30.959 align:start position:0%
to make sure that it works and actually
 

00:11:30.959 --> 00:11:32.790 align:start position:0%
to make sure that it works and actually
i<00:11:31.040><c> just</c><00:11:31.279><c> noticed</c><00:11:31.519><c> i</c><00:11:31.600><c> made</c><00:11:31.839><c> a</c><00:11:31.920><c> couple</c><00:11:32.160><c> of</c><00:11:32.560><c> little</c>

00:11:32.790 --> 00:11:32.800 align:start position:0%
i just noticed i made a couple of little
 

00:11:32.800 --> 00:11:34.949 align:start position:0%
i just noticed i made a couple of little
mistakes<00:11:33.200><c> so</c><00:11:33.360><c> over</c><00:11:33.680><c> here</c><00:11:34.079><c> on</c><00:11:34.399><c> this</c><00:11:34.640><c> line</c><00:11:34.880><c> i</c>

00:11:34.949 --> 00:11:34.959 align:start position:0%
mistakes so over here on this line i
 

00:11:34.959 --> 00:11:36.630 align:start position:0%
mistakes so over here on this line i
forgot<00:11:35.200><c> one</c><00:11:35.360><c> of</c><00:11:35.440><c> the</c><00:11:35.519><c> or</c><00:11:35.839><c> statements</c><00:11:36.240><c> so</c><00:11:36.399><c> let's</c>

00:11:36.630 --> 00:11:36.640 align:start position:0%
forgot one of the or statements so let's
 

00:11:36.640 --> 00:11:39.030 align:start position:0%
forgot one of the or statements so let's
add<00:11:36.880><c> that</c><00:11:37.200><c> as</c><00:11:37.360><c> well</c><00:11:37.920><c> and</c><00:11:38.160><c> actually</c><00:11:38.640><c> here</c><00:11:38.880><c> we</c>

00:11:39.030 --> 00:11:39.040 align:start position:0%
add that as well and actually here we
 

00:11:39.040 --> 00:11:40.949 align:start position:0%
add that as well and actually here we
have<00:11:39.200><c> q.pop</c><00:11:39.920><c> but</c><00:11:40.160><c> remember</c><00:11:40.480><c> we're</c><00:11:40.640><c> actually</c>

00:11:40.949 --> 00:11:40.959 align:start position:0%
have q.pop but remember we're actually
 

00:11:40.959 --> 00:11:42.870 align:start position:0%
have q.pop but remember we're actually
adding<00:11:41.279><c> to</c><00:11:41.440><c> the</c><00:11:41.600><c> queue</c><00:11:42.000><c> when</c><00:11:42.160><c> we</c><00:11:42.399><c> append</c><00:11:42.720><c> we're</c>

00:11:42.870 --> 00:11:42.880 align:start position:0%
adding to the queue when we append we're
 

00:11:42.880 --> 00:11:44.389 align:start position:0%
adding to the queue when we append we're
adding<00:11:43.120><c> to</c><00:11:43.279><c> the</c><00:11:43.440><c> right</c><00:11:43.680><c> side</c><00:11:43.839><c> of</c><00:11:43.920><c> the</c><00:11:44.079><c> queue</c><00:11:44.240><c> so</c>

00:11:44.389 --> 00:11:44.399 align:start position:0%
adding to the right side of the queue so
 

00:11:44.399 --> 00:11:45.990 align:start position:0%
adding to the right side of the queue so
when<00:11:44.560><c> we</c><00:11:44.800><c> pop</c><00:11:45.040><c> from</c><00:11:45.200><c> the</c><00:11:45.360><c> queue</c><00:11:45.680><c> we</c><00:11:45.760><c> want</c><00:11:45.920><c> to</c>

00:11:45.990 --> 00:11:46.000 align:start position:0%
when we pop from the queue we want to
 

00:11:46.000 --> 00:11:47.829 align:start position:0%
when we pop from the queue we want to
make<00:11:46.079><c> sure</c><00:11:46.240><c> we're</c><00:11:46.399><c> popping</c><00:11:46.720><c> from</c><00:11:46.880><c> the</c><00:11:47.200><c> left</c>

00:11:47.829 --> 00:11:47.839 align:start position:0%
make sure we're popping from the left
 

00:11:47.839 --> 00:11:49.590 align:start position:0%
make sure we're popping from the left
because<00:11:48.160><c> we</c><00:11:48.399><c> want</c><00:11:48.560><c> to</c><00:11:48.640><c> pop</c><00:11:48.959><c> you</c><00:11:49.120><c> know</c><00:11:49.200><c> the</c><00:11:49.360><c> more</c>

00:11:49.590 --> 00:11:49.600 align:start position:0%
because we want to pop you know the more
 

00:11:49.600 --> 00:11:52.230 align:start position:0%
because we want to pop you know the more
recently<00:11:50.079><c> added</c><00:11:50.399><c> oranges</c><00:11:51.200><c> right</c><00:11:51.839><c> that's</c><00:11:52.079><c> why</c>

00:11:52.230 --> 00:11:52.240 align:start position:0%
recently added oranges right that's why
 

00:11:52.240 --> 00:11:53.750 align:start position:0%
recently added oranges right that's why
we're<00:11:52.399><c> taking</c><00:11:52.639><c> this</c><00:11:52.959><c> length</c><00:11:53.279><c> if</c><00:11:53.360><c> the</c><00:11:53.519><c> length</c>

00:11:53.750 --> 00:11:53.760 align:start position:0%
we're taking this length if the length
 

00:11:53.760 --> 00:11:55.430 align:start position:0%
we're taking this length if the length
was<00:11:54.000><c> three</c><00:11:54.240><c> we</c><00:11:54.320><c> would</c><00:11:54.480><c> want</c><00:11:54.639><c> to</c><00:11:54.720><c> pop</c><00:11:54.959><c> the</c><00:11:55.120><c> 3</c>

00:11:55.430 --> 00:11:55.440 align:start position:0%
was three we would want to pop the 3
 

00:11:55.440 --> 00:11:57.590 align:start position:0%
was three we would want to pop the 3
oranges<00:11:56.000><c> from</c><00:11:56.240><c> the</c><00:11:56.399><c> left</c><00:11:56.639><c> side</c><00:11:56.959><c> not</c><00:11:57.120><c> the</c><00:11:57.279><c> same</c>

00:11:57.590 --> 00:11:57.600 align:start position:0%
oranges from the left side not the same
 

00:11:57.600 --> 00:12:00.389 align:start position:0%
oranges from the left side not the same
oranges<00:11:58.000><c> that</c><00:11:58.079><c> we're</c><00:11:58.399><c> adding</c><00:11:59.040><c> to</c><00:11:59.279><c> the</c><00:11:59.920><c> queue</c>

00:12:00.389 --> 00:12:00.399 align:start position:0%
oranges that we're adding to the queue
 

00:12:00.399 --> 00:12:02.389 align:start position:0%
oranges that we're adding to the queue
so<00:12:00.560><c> make</c><00:12:00.720><c> sure</c><00:12:00.880><c> that</c><00:12:01.040><c> this</c><00:12:01.200><c> is</c><00:12:01.360><c> a</c><00:12:01.440><c> pop</c><00:12:01.760><c> left</c><00:12:02.160><c> so</c>

00:12:02.389 --> 00:12:02.399 align:start position:0%
so make sure that this is a pop left so
 

00:12:02.399 --> 00:12:03.910 align:start position:0%
so make sure that this is a pop left so
that<00:12:02.560><c> being</c><00:12:02.800><c> said</c><00:12:02.959><c> let's</c><00:12:03.200><c> run</c><00:12:03.440><c> the</c><00:12:03.519><c> code</c><00:12:03.760><c> to</c>

00:12:03.910 --> 00:12:03.920 align:start position:0%
that being said let's run the code to
 

00:12:03.920 --> 00:12:05.509 align:start position:0%
that being said let's run the code to
make<00:12:04.079><c> sure</c><00:12:04.240><c> that</c><00:12:04.399><c> it</c><00:12:04.560><c> works</c><00:12:04.959><c> and</c><00:12:05.120><c> as</c><00:12:05.279><c> you</c><00:12:05.360><c> can</c>

00:12:05.509 --> 00:12:05.519 align:start position:0%
make sure that it works and as you can
 

00:12:05.519 --> 00:12:07.190 align:start position:0%
make sure that it works and as you can
see<00:12:05.680><c> on</c><00:12:05.760><c> the</c><00:12:05.839><c> left</c><00:12:06.160><c> yes</c><00:12:06.399><c> it</c><00:12:06.560><c> does</c><00:12:06.800><c> and</c><00:12:06.959><c> it's</c>

00:12:07.190 --> 00:12:07.200 align:start position:0%
see on the left yes it does and it's
 

00:12:07.200 --> 00:12:08.629 align:start position:0%
see on the left yes it does and it's
pretty<00:12:07.519><c> efficient</c><00:12:07.839><c> so</c><00:12:08.079><c> i</c><00:12:08.160><c> really</c><00:12:08.320><c> hope</c><00:12:08.560><c> that</c>

00:12:08.629 --> 00:12:08.639 align:start position:0%
pretty efficient so i really hope that
 

00:12:08.639 --> 00:12:10.629 align:start position:0%
pretty efficient so i really hope that
this<00:12:08.800><c> was</c><00:12:08.959><c> helpful</c><00:12:09.360><c> if</c><00:12:09.600><c> it</c><00:12:09.680><c> was</c><00:12:10.160><c> please</c><00:12:10.399><c> like</c>

00:12:10.629 --> 00:12:10.639 align:start position:0%
this was helpful if it was please like
 

00:12:10.639 --> 00:12:12.150 align:start position:0%
this was helpful if it was please like
and<00:12:10.720><c> subscribe</c><00:12:11.279><c> it</c><00:12:11.440><c> really</c><00:12:11.600><c> supports</c><00:12:12.000><c> the</c>

00:12:12.150 --> 00:12:12.160 align:start position:0%
and subscribe it really supports the
 

00:12:12.160 --> 00:12:13.750 align:start position:0%
and subscribe it really supports the
channel<00:12:12.480><c> a</c><00:12:12.560><c> lot</c><00:12:12.800><c> consider</c><00:12:13.200><c> checking</c><00:12:13.440><c> out</c><00:12:13.519><c> my</c>

00:12:13.750 --> 00:12:13.760 align:start position:0%
channel a lot consider checking out my
 

00:12:13.760 --> 00:12:15.110 align:start position:0%
channel a lot consider checking out my
patreon<00:12:14.160><c> where</c><00:12:14.320><c> you</c><00:12:14.399><c> can</c><00:12:14.480><c> further</c><00:12:14.720><c> support</c>

00:12:15.110 --> 00:12:15.120 align:start position:0%
patreon where you can further support
 

00:12:15.120 --> 00:12:16.629 align:start position:0%
patreon where you can further support
the<00:12:15.200><c> channel</c><00:12:15.519><c> and</c><00:12:15.680><c> hopefully</c><00:12:16.160><c> i'll</c><00:12:16.399><c> see</c><00:12:16.560><c> you</c>

00:12:16.629 --> 00:12:16.639 align:start position:0%
the channel and hopefully i'll see you
 

00:12:16.639 --> 00:12:20.320 align:start position:0%
the channel and hopefully i'll see you
pretty<00:12:16.959><c> soon</c><00:12:17.440><c> thanks</c><00:12:17.680><c> for</c><00:12:17.839><c> watching</c>

