WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.510 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:00.960><c> back</c><00:00:01.199><c> and</c><00:00:01.280><c> let's</c>

00:00:01.510 --> 00:00:01.520 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.520 --> 00:00:03.350 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.680><c> some</c><00:00:01.839><c> more</c><00:00:02.000><c> neat</c><00:00:02.240><c> code</c><00:00:02.560><c> today</c><00:00:02.800><c> so</c><00:00:02.960><c> today</c>

00:00:03.350 --> 00:00:03.360 align:start position:0%
write some more neat code today so today
 

00:00:03.360 --> 00:00:04.230 align:start position:0%
write some more neat code today so today
let's<00:00:03.679><c> solve</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
let's solve
 

00:00:04.240 --> 00:00:07.190 align:start position:0%
let's solve
find<00:00:04.799><c> median</c><00:00:05.359><c> from</c><00:00:05.680><c> a</c><00:00:05.839><c> data</c><00:00:06.240><c> stream</c><00:00:06.799><c> so</c><00:00:06.960><c> this</c>

00:00:07.190 --> 00:00:07.200 align:start position:0%
find median from a data stream so this
 

00:00:07.200 --> 00:00:07.829 align:start position:0%
find median from a data stream so this
is<00:00:07.279><c> another</c>

00:00:07.829 --> 00:00:07.839 align:start position:0%
is another
 

00:00:07.839 --> 00:00:09.669 align:start position:0%
is another
hard<00:00:08.160><c> problem</c><00:00:08.559><c> but</c><00:00:08.720><c> it's</c><00:00:08.960><c> not</c><00:00:09.280><c> super</c>

00:00:09.669 --> 00:00:09.679 align:start position:0%
hard problem but it's not super
 

00:00:09.679 --> 00:00:11.669 align:start position:0%
hard problem but it's not super
difficult<00:00:10.320><c> if</c><00:00:10.480><c> you</c><00:00:10.639><c> know</c><00:00:10.800><c> the</c><00:00:10.960><c> data</c><00:00:11.200><c> structure</c>

00:00:11.669 --> 00:00:11.679 align:start position:0%
difficult if you know the data structure
 

00:00:11.679 --> 00:00:12.470 align:start position:0%
difficult if you know the data structure
behind<00:00:12.080><c> it</c>

00:00:12.470 --> 00:00:12.480 align:start position:0%
behind it
 

00:00:12.480 --> 00:00:14.470 align:start position:0%
behind it
so<00:00:12.799><c> they</c><00:00:13.040><c> basically</c><00:00:13.519><c> tell</c><00:00:13.679><c> us</c><00:00:13.920><c> we</c><00:00:14.000><c> know</c><00:00:14.240><c> the</c>

00:00:14.470 --> 00:00:14.480 align:start position:0%
so they basically tell us we know the
 

00:00:14.480 --> 00:00:17.109 align:start position:0%
so they basically tell us we know the
median<00:00:15.040><c> is</c><00:00:15.200><c> defined</c><00:00:15.679><c> as</c><00:00:15.920><c> the</c><00:00:16.080><c> middle</c><00:00:16.400><c> value</c>

00:00:17.109 --> 00:00:17.119 align:start position:0%
median is defined as the middle value
 

00:00:17.119 --> 00:00:20.150 align:start position:0%
median is defined as the middle value
in<00:00:17.440><c> a</c><00:00:17.680><c> sorted</c><00:00:18.160><c> integer</c><00:00:18.720><c> list</c><00:00:19.359><c> if</c><00:00:19.520><c> the</c><00:00:19.680><c> list</c><00:00:20.000><c> is</c>

00:00:20.150 --> 00:00:20.160 align:start position:0%
in a sorted integer list if the list is
 

00:00:20.160 --> 00:00:22.150 align:start position:0%
in a sorted integer list if the list is
even<00:00:20.560><c> there</c><00:00:20.800><c> is</c><00:00:20.960><c> no</c><00:00:21.119><c> middle</c><00:00:21.439><c> value</c><00:00:21.840><c> so</c><00:00:22.000><c> you</c>

00:00:22.150 --> 00:00:22.160 align:start position:0%
even there is no middle value so you
 

00:00:22.160 --> 00:00:23.990 align:start position:0%
even there is no middle value so you
take<00:00:22.400><c> the</c><00:00:22.560><c> average</c><00:00:23.119><c> of</c><00:00:23.199><c> the</c><00:00:23.359><c> two</c><00:00:23.600><c> middle</c>

00:00:23.990 --> 00:00:24.000 align:start position:0%
take the average of the two middle
 

00:00:24.000 --> 00:00:25.029 align:start position:0%
take the average of the two middle
values<00:00:24.560><c> right</c>

00:00:25.029 --> 00:00:25.039 align:start position:0%
values right
 

00:00:25.039 --> 00:00:27.509 align:start position:0%
values right
so<00:00:25.279><c> with</c><00:00:25.760><c> this</c><00:00:26.080><c> sorted</c><00:00:26.560><c> array</c><00:00:26.960><c> the</c><00:00:27.199><c> middle</c>

00:00:27.509 --> 00:00:27.519 align:start position:0%
so with this sorted array the middle
 

00:00:27.519 --> 00:00:30.150 align:start position:0%
so with this sorted array the middle
value<00:00:27.920><c> is</c><00:00:28.160><c> three</c><00:00:28.400><c> so</c><00:00:28.560><c> the</c><00:00:28.720><c> median</c><00:00:29.199><c> is</c><00:00:29.359><c> three</c>

00:00:30.150 --> 00:00:30.160 align:start position:0%
value is three so the median is three
 

00:00:30.160 --> 00:00:32.470 align:start position:0%
value is three so the median is three
with<00:00:30.480><c> this</c><00:00:31.039><c> there</c><00:00:31.359><c> is</c><00:00:31.519><c> no</c><00:00:31.760><c> middle</c><00:00:32.000><c> value</c><00:00:32.320><c> so</c>

00:00:32.470 --> 00:00:32.480 align:start position:0%
with this there is no middle value so
 

00:00:32.480 --> 00:00:34.150 align:start position:0%
with this there is no middle value so
you<00:00:32.640><c> take</c><00:00:32.800><c> the</c><00:00:33.040><c> two</c><00:00:33.280><c> middle</c><00:00:33.520><c> values</c>

00:00:34.150 --> 00:00:34.160 align:start position:0%
you take the two middle values
 

00:00:34.160 --> 00:00:36.150 align:start position:0%
you take the two middle values
add<00:00:34.399><c> them</c><00:00:34.559><c> together</c><00:00:34.880><c> divide</c><00:00:35.280><c> by</c><00:00:35.520><c> two</c><00:00:35.840><c> and</c><00:00:36.000><c> then</c>

00:00:36.150 --> 00:00:36.160 align:start position:0%
add them together divide by two and then
 

00:00:36.160 --> 00:00:38.389 align:start position:0%
add them together divide by two and then
you<00:00:36.239><c> get</c><00:00:36.399><c> a</c><00:00:36.480><c> median</c><00:00:37.040><c> of</c><00:00:37.280><c> 2.5</c>

00:00:38.389 --> 00:00:38.399 align:start position:0%
you get a median of 2.5
 

00:00:38.399 --> 00:00:40.549 align:start position:0%
you get a median of 2.5
and<00:00:38.559><c> so</c><00:00:38.719><c> we're</c><00:00:38.960><c> actually</c><00:00:39.360><c> designing</c><00:00:40.079><c> a</c><00:00:40.239><c> data</c>

00:00:40.549 --> 00:00:40.559 align:start position:0%
and so we're actually designing a data
 

00:00:40.559 --> 00:00:41.830 align:start position:0%
and so we're actually designing a data
structure<00:00:40.960><c> that's</c><00:00:41.200><c> going</c><00:00:41.280><c> to</c><00:00:41.360><c> have</c><00:00:41.600><c> two</c>

00:00:41.830 --> 00:00:41.840 align:start position:0%
structure that's going to have two
 

00:00:41.840 --> 00:00:42.630 align:start position:0%
structure that's going to have two
operations

00:00:42.630 --> 00:00:42.640 align:start position:0%
operations
 

00:00:42.640 --> 00:00:44.549 align:start position:0%
operations
one<00:00:42.879><c> operation</c><00:00:43.360><c> is</c><00:00:43.520><c> going</c><00:00:43.600><c> to</c><00:00:43.680><c> be</c><00:00:43.920><c> adding</c><00:00:44.399><c> a</c>

00:00:44.549 --> 00:00:44.559 align:start position:0%
one operation is going to be adding a
 

00:00:44.559 --> 00:00:46.950 align:start position:0%
one operation is going to be adding a
number<00:00:45.200><c> to</c><00:00:45.440><c> our</c><00:00:45.600><c> data</c><00:00:45.920><c> stream</c><00:00:46.160><c> so</c><00:00:46.399><c> we</c><00:00:46.559><c> had</c>

00:00:46.950 --> 00:00:46.960 align:start position:0%
number to our data stream so we had
 

00:00:46.960 --> 00:00:49.910 align:start position:0%
number to our data stream so we had
we<00:00:47.120><c> actually</c><00:00:47.440><c> have</c><00:00:47.600><c> to</c><00:00:47.920><c> store</c><00:00:48.879><c> the</c><00:00:49.280><c> list</c><00:00:49.680><c> of</c>

00:00:49.910 --> 00:00:49.920 align:start position:0%
we actually have to store the list of
 

00:00:49.920 --> 00:00:52.389 align:start position:0%
we actually have to store the list of
numbers<00:00:50.399><c> and</c><00:00:50.559><c> that</c><00:00:50.879><c> list</c><00:00:51.120><c> of</c><00:00:51.280><c> numbers</c><00:00:51.840><c> is</c><00:00:52.000><c> not</c>

00:00:52.389 --> 00:00:52.399 align:start position:0%
numbers and that list of numbers is not
 

00:00:52.399 --> 00:00:55.110 align:start position:0%
numbers and that list of numbers is not
constant<00:00:52.960><c> it's</c><00:00:53.199><c> going</c><00:00:53.360><c> to</c><00:00:53.520><c> be</c><00:00:53.920><c> changing</c><00:00:54.719><c> every</c>

00:00:55.110 --> 00:00:55.120 align:start position:0%
constant it's going to be changing every
 

00:00:55.120 --> 00:00:55.430 align:start position:0%
constant it's going to be changing every
time

00:00:55.430 --> 00:00:55.440 align:start position:0%
time
 

00:00:55.440 --> 00:00:59.029 align:start position:0%
time
add<00:00:55.760><c> number</c><00:00:56.239><c> is</c><00:00:56.480><c> called</c><00:00:57.280><c> and</c><00:00:57.440><c> then</c><00:00:57.760><c> from</c><00:00:58.399><c> that</c>

00:00:59.029 --> 00:00:59.039 align:start position:0%
add number is called and then from that
 

00:00:59.039 --> 00:01:00.709 align:start position:0%
add number is called and then from that
list<00:00:59.440><c> of</c><00:00:59.680><c> numbers</c><00:01:00.000><c> that</c><00:01:00.079><c> we're</c><00:01:00.320><c> going</c><00:01:00.480><c> to</c><00:01:00.559><c> be</c>

00:01:00.709 --> 00:01:00.719 align:start position:0%
list of numbers that we're going to be
 

00:01:00.719 --> 00:01:02.470 align:start position:0%
list of numbers that we're going to be
maintaining<00:01:01.359><c> ourselves</c>

00:01:02.470 --> 00:01:02.480 align:start position:0%
maintaining ourselves
 

00:01:02.480 --> 00:01:04.950 align:start position:0%
maintaining ourselves
we<00:01:02.800><c> are</c><00:01:03.039><c> going</c><00:01:03.199><c> to</c><00:01:03.359><c> need</c><00:01:03.600><c> to</c><00:01:03.920><c> constantly</c><00:01:04.640><c> be</c>

00:01:04.950 --> 00:01:04.960 align:start position:0%
we are going to need to constantly be
 

00:01:04.960 --> 00:01:06.310 align:start position:0%
we are going to need to constantly be
finding<00:01:05.360><c> the</c><00:01:05.680><c> median</c>

00:01:06.310 --> 00:01:06.320 align:start position:0%
finding the median
 

00:01:06.320 --> 00:01:09.030 align:start position:0%
finding the median
of<00:01:06.560><c> that</c><00:01:06.960><c> list</c><00:01:07.360><c> so</c><00:01:07.600><c> every</c><00:01:07.920><c> time</c><00:01:08.240><c> this</c><00:01:08.479><c> function</c>

00:01:09.030 --> 00:01:09.040 align:start position:0%
of that list so every time this function
 

00:01:09.040 --> 00:01:09.429 align:start position:0%
of that list so every time this function
find

00:01:09.429 --> 00:01:09.439 align:start position:0%
find
 

00:01:09.439 --> 00:01:11.830 align:start position:0%
find
median<00:01:09.920><c> is</c><00:01:10.000><c> called</c><00:01:10.320><c> we</c><00:01:10.479><c> have</c><00:01:10.640><c> to</c><00:01:10.799><c> return</c><00:01:11.680><c> what</c>

00:01:11.830 --> 00:01:11.840 align:start position:0%
median is called we have to return what
 

00:01:11.840 --> 00:01:13.109 align:start position:0%
median is called we have to return what
the<00:01:12.000><c> median</c><00:01:12.560><c> is</c>

00:01:13.109 --> 00:01:13.119 align:start position:0%
the median is
 

00:01:13.119 --> 00:01:16.230 align:start position:0%
the median is
from<00:01:13.360><c> the</c><00:01:13.520><c> elements</c><00:01:14.080><c> so</c><00:01:14.320><c> far</c><00:01:15.200><c> so</c><00:01:15.439><c> this</c><00:01:15.680><c> is</c><00:01:15.920><c> just</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
from the elements so far so this is just
 

00:01:16.240 --> 00:01:17.109 align:start position:0%
from the elements so far so this is just
an<00:01:16.479><c> example</c>

00:01:17.109 --> 00:01:17.119 align:start position:0%
an example
 

00:01:17.119 --> 00:01:19.429 align:start position:0%
an example
if<00:01:17.280><c> we</c><00:01:17.520><c> add</c><00:01:17.759><c> num1</c><00:01:18.479><c> then</c><00:01:18.720><c> our</c><00:01:18.880><c> list</c><00:01:19.200><c> is</c><00:01:19.280><c> going</c><00:01:19.360><c> to</c>

00:01:19.429 --> 00:01:19.439 align:start position:0%
if we add num1 then our list is going to
 

00:01:19.439 --> 00:01:20.310 align:start position:0%
if we add num1 then our list is going to
have<00:01:19.680><c> one</c><00:01:19.920><c> in</c><00:01:20.080><c> it</c>

00:01:20.310 --> 00:01:20.320 align:start position:0%
have one in it
 

00:01:20.320 --> 00:01:22.390 align:start position:0%
have one in it
if<00:01:20.479><c> we</c><00:01:20.560><c> add</c><00:01:20.799><c> another</c><00:01:21.119><c> number</c><00:01:21.439><c> two</c><00:01:22.000><c> then</c><00:01:22.240><c> our</c>

00:01:22.390 --> 00:01:22.400 align:start position:0%
if we add another number two then our
 

00:01:22.400 --> 00:01:23.990 align:start position:0%
if we add another number two then our
list<00:01:22.640><c> is</c><00:01:22.720><c> going</c><00:01:22.799><c> to</c><00:01:22.880><c> have</c><00:01:23.040><c> two</c><00:01:23.280><c> numbers</c>

00:01:23.990 --> 00:01:24.000 align:start position:0%
list is going to have two numbers
 

00:01:24.000 --> 00:01:26.310 align:start position:0%
list is going to have two numbers
then<00:01:24.240><c> if</c><00:01:24.320><c> we</c><00:01:24.479><c> want</c><00:01:24.640><c> to</c><00:01:24.720><c> find</c><00:01:24.960><c> the</c><00:01:25.119><c> median</c><00:01:26.080><c> we</c>

00:01:26.310 --> 00:01:26.320 align:start position:0%
then if we want to find the median we
 

00:01:26.320 --> 00:01:27.830 align:start position:0%
then if we want to find the median we
will<00:01:26.479><c> take</c><00:01:26.720><c> the</c><00:01:26.880><c> average</c><00:01:27.200><c> of</c><00:01:27.360><c> these</c><00:01:27.600><c> two</c><00:01:27.759><c> and</c>

00:01:27.830 --> 00:01:27.840 align:start position:0%
will take the average of these two and
 

00:01:27.840 --> 00:01:28.550 align:start position:0%
will take the average of these two and
it's<00:01:28.000><c> going</c><00:01:28.159><c> to</c><00:01:28.240><c> be</c>

00:01:28.550 --> 00:01:28.560 align:start position:0%
it's going to be
 

00:01:28.560 --> 00:01:31.190 align:start position:0%
it's going to be
1.5<00:01:29.600><c> after</c><00:01:29.920><c> that</c><00:01:30.079><c> we'll</c><00:01:30.320><c> add</c><00:01:30.479><c> another</c><00:01:30.799><c> number</c>

00:01:31.190 --> 00:01:31.200 align:start position:0%
1.5 after that we'll add another number
 

00:01:31.200 --> 00:01:31.990 align:start position:0%
1.5 after that we'll add another number
three

00:01:31.990 --> 00:01:32.000 align:start position:0%
three
 

00:01:32.000 --> 00:01:33.910 align:start position:0%
three
and<00:01:32.079><c> then</c><00:01:32.320><c> we'll</c><00:01:32.479><c> find</c><00:01:32.799><c> the</c><00:01:32.960><c> median</c><00:01:33.439><c> again</c><00:01:33.840><c> in</c>

00:01:33.910 --> 00:01:33.920 align:start position:0%
and then we'll find the median again in
 

00:01:33.920 --> 00:01:35.270 align:start position:0%
and then we'll find the median again in
this<00:01:34.079><c> case</c><00:01:34.320><c> the</c><00:01:34.479><c> median</c><00:01:34.880><c> is</c><00:01:34.960><c> different</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
this case the median is different
 

00:01:35.280 --> 00:01:37.190 align:start position:0%
this case the median is different
because<00:01:35.520><c> our</c><00:01:35.759><c> list</c><00:01:36.000><c> got</c><00:01:36.240><c> updated</c><00:01:36.720><c> the</c><00:01:36.880><c> middle</c>

00:01:37.190 --> 00:01:37.200 align:start position:0%
because our list got updated the middle
 

00:01:37.200 --> 00:01:38.230 align:start position:0%
because our list got updated the middle
value<00:01:37.520><c> is</c><00:01:37.759><c> now</c>

00:01:38.230 --> 00:01:38.240 align:start position:0%
value is now
 

00:01:38.240 --> 00:01:41.429 align:start position:0%
value is now
two<00:01:39.040><c> so</c><00:01:39.520><c> what's</c><00:01:39.840><c> the</c><00:01:40.079><c> most</c><00:01:40.560><c> obvious</c><00:01:41.040><c> way</c><00:01:41.280><c> to</c>

00:01:41.429 --> 00:01:41.439 align:start position:0%
two so what's the most obvious way to
 

00:01:41.439 --> 00:01:42.789 align:start position:0%
two so what's the most obvious way to
solve<00:01:41.680><c> this</c><00:01:41.920><c> problem</c><00:01:42.320><c> well</c><00:01:42.560><c> i</c>

00:01:42.789 --> 00:01:42.799 align:start position:0%
solve this problem well i
 

00:01:42.799 --> 00:01:45.510 align:start position:0%
solve this problem well i
basically<00:01:43.360><c> just</c><00:01:43.840><c> hinted</c><00:01:44.320><c> at</c><00:01:44.479><c> it</c><00:01:44.640><c> right</c><00:01:44.880><c> so</c>

00:01:45.510 --> 00:01:45.520 align:start position:0%
basically just hinted at it right so
 

00:01:45.520 --> 00:01:45.910 align:start position:0%
basically just hinted at it right so
where

00:01:45.910 --> 00:01:45.920 align:start position:0%
where
 

00:01:45.920 --> 00:01:48.149 align:start position:0%
where
the<00:01:46.079><c> way</c><00:01:46.479><c> the</c><00:01:46.720><c> obvious</c><00:01:47.040><c> way</c><00:01:47.200><c> to</c><00:01:47.360><c> solve</c><00:01:47.600><c> this</c><00:01:47.840><c> is</c>

00:01:48.149 --> 00:01:48.159 align:start position:0%
the way the obvious way to solve this is
 

00:01:48.159 --> 00:01:49.429 align:start position:0%
the way the obvious way to solve this is
insert<00:01:48.799><c> elements</c>

00:01:49.429 --> 00:01:49.439 align:start position:0%
insert elements
 

00:01:49.439 --> 00:01:52.230 align:start position:0%
insert elements
in<00:01:49.840><c> order</c><00:01:50.479><c> so</c><00:01:50.720><c> let's</c><00:01:50.960><c> say</c><00:01:51.439><c> these</c><00:01:51.920><c> are</c><00:01:52.079><c> the</c>

00:01:52.230 --> 00:01:52.240 align:start position:0%
in order so let's say these are the
 

00:01:52.240 --> 00:01:53.990 align:start position:0%
in order so let's say these are the
function<00:01:52.720><c> calls</c><00:01:53.040><c> that</c><00:01:53.200><c> are</c><00:01:53.280><c> gonna</c><00:01:53.439><c> be</c><00:01:53.600><c> made</c><00:01:53.840><c> so</c>

00:01:53.990 --> 00:01:54.000 align:start position:0%
function calls that are gonna be made so
 

00:01:54.000 --> 00:01:54.870 align:start position:0%
function calls that are gonna be made so
we're<00:01:54.159><c> gonna</c><00:01:54.399><c> add</c>

00:01:54.870 --> 00:01:54.880 align:start position:0%
we're gonna add
 

00:01:54.880 --> 00:01:56.389 align:start position:0%
we're gonna add
four<00:01:55.200><c> numbers</c><00:01:55.520><c> and</c><00:01:55.600><c> then</c><00:01:55.759><c> we're</c><00:01:55.920><c> gonna</c><00:01:56.079><c> try</c><00:01:56.240><c> to</c>

00:01:56.389 --> 00:01:56.399 align:start position:0%
four numbers and then we're gonna try to
 

00:01:56.399 --> 00:01:59.109 align:start position:0%
four numbers and then we're gonna try to
get<00:01:56.479><c> the</c><00:01:56.640><c> median</c><00:01:57.119><c> so</c><00:01:57.680><c> we're</c><00:01:57.920><c> gonna</c><00:01:58.240><c> maintain</c>

00:01:59.109 --> 00:01:59.119 align:start position:0%
get the median so we're gonna maintain
 

00:01:59.119 --> 00:02:02.230 align:start position:0%
get the median so we're gonna maintain
a<00:01:59.759><c> list</c><00:02:00.399><c> or</c><00:02:00.560><c> an</c><00:02:00.799><c> array</c><00:02:01.360><c> right</c><00:02:01.920><c> and</c>

00:02:02.230 --> 00:02:02.240 align:start position:0%
a list or an array right and
 

00:02:02.240 --> 00:02:04.709 align:start position:0%
a list or an array right and
every<00:02:02.640><c> time</c><00:02:02.880><c> we</c><00:02:03.200><c> get</c><00:02:03.439><c> a</c><00:02:03.680><c> function</c><00:02:04.079><c> call</c><00:02:04.399><c> add</c>

00:02:04.709 --> 00:02:04.719 align:start position:0%
every time we get a function call add
 

00:02:04.719 --> 00:02:05.350 align:start position:0%
every time we get a function call add
three

00:02:05.350 --> 00:02:05.360 align:start position:0%
three
 

00:02:05.360 --> 00:02:08.229 align:start position:0%
three
we're<00:02:05.600><c> gonna</c><00:02:06.079><c> insert</c><00:02:06.799><c> in</c><00:02:07.280><c> order</c><00:02:07.600><c> just</c><00:02:07.840><c> like</c><00:02:08.000><c> it</c>

00:02:08.229 --> 00:02:08.239 align:start position:0%
we're gonna insert in order just like it
 

00:02:08.239 --> 00:02:09.589 align:start position:0%
we're gonna insert in order just like it
says<00:02:08.479><c> up</c><00:02:08.720><c> here</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
says up here
 

00:02:09.599 --> 00:02:13.110 align:start position:0%
says up here
and<00:02:09.840><c> basically</c><00:02:10.560><c> if</c><00:02:10.959><c> our</c><00:02:11.520><c> array</c><00:02:12.160><c> is</c><00:02:12.560><c> always</c>

00:02:13.110 --> 00:02:13.120 align:start position:0%
and basically if our array is always
 

00:02:13.120 --> 00:02:13.910 align:start position:0%
and basically if our array is always
sorted

00:02:13.910 --> 00:02:13.920 align:start position:0%
sorted
 

00:02:13.920 --> 00:02:16.150 align:start position:0%
sorted
then<00:02:14.160><c> it's</c><00:02:14.400><c> going</c><00:02:14.560><c> to</c><00:02:14.720><c> be</c><00:02:14.959><c> easy</c><00:02:15.360><c> to</c><00:02:15.599><c> identify</c>

00:02:16.150 --> 00:02:16.160 align:start position:0%
then it's going to be easy to identify
 

00:02:16.160 --> 00:02:17.990 align:start position:0%
then it's going to be easy to identify
the<00:02:16.400><c> middle</c><00:02:16.800><c> number</c><00:02:17.200><c> right</c><00:02:17.360><c> which</c><00:02:17.599><c> is</c><00:02:17.760><c> going</c>

00:02:17.990 --> 00:02:18.000 align:start position:0%
the middle number right which is going
 

00:02:18.000 --> 00:02:19.350 align:start position:0%
the middle number right which is going
to<00:02:18.160><c> be</c><00:02:18.400><c> the</c><00:02:18.640><c> median</c>

00:02:19.350 --> 00:02:19.360 align:start position:0%
to be the median
 

00:02:19.360 --> 00:02:21.750 align:start position:0%
to be the median
right<00:02:20.000><c> so</c><00:02:20.400><c> the</c><00:02:20.640><c> median</c><00:02:21.040><c> is</c><00:02:21.200><c> always</c><00:02:21.520><c> going</c><00:02:21.680><c> to</c>

00:02:21.750 --> 00:02:21.760 align:start position:0%
right so the median is always going to
 

00:02:21.760 --> 00:02:23.910 align:start position:0%
right so the median is always going to
be<00:02:22.080><c> in</c><00:02:22.239><c> the</c><00:02:22.560><c> middle</c><00:02:22.959><c> position</c><00:02:23.440><c> and</c><00:02:23.599><c> if</c><00:02:23.760><c> our</c>

00:02:23.910 --> 00:02:23.920 align:start position:0%
be in the middle position and if our
 

00:02:23.920 --> 00:02:25.589 align:start position:0%
be in the middle position and if our
array<00:02:24.160><c> is</c><00:02:24.319><c> sorted</c><00:02:24.720><c> we'll</c><00:02:24.879><c> always</c><00:02:25.280><c> know</c><00:02:25.440><c> where</c>

00:02:25.589 --> 00:02:25.599 align:start position:0%
array is sorted we'll always know where
 

00:02:25.599 --> 00:02:25.910 align:start position:0%
array is sorted we'll always know where
that

00:02:25.910 --> 00:02:25.920 align:start position:0%
that
 

00:02:25.920 --> 00:02:28.550 align:start position:0%
that
is<00:02:26.480><c> so</c><00:02:26.720><c> the</c><00:02:26.879><c> first</c><00:02:27.200><c> one</c><00:02:27.360><c> we</c><00:02:27.520><c> have</c><00:02:27.760><c> is</c><00:02:28.000><c> add</c><00:02:28.239><c> three</c>

00:02:28.550 --> 00:02:28.560 align:start position:0%
is so the first one we have is add three
 

00:02:28.560 --> 00:02:30.949 align:start position:0%
is so the first one we have is add three
so<00:02:28.879><c> just</c><00:02:29.120><c> add</c><00:02:29.440><c> it</c><00:02:29.599><c> to</c><00:02:29.760><c> the</c><00:02:29.920><c> first</c><00:02:30.239><c> spot</c>

00:02:30.949 --> 00:02:30.959 align:start position:0%
so just add it to the first spot
 

00:02:30.959 --> 00:02:33.830 align:start position:0%
so just add it to the first spot
next<00:02:31.440><c> we</c><00:02:31.680><c> want</c><00:02:31.840><c> to</c><00:02:32.080><c> add</c><00:02:32.560><c> two</c><00:02:32.959><c> so</c><00:02:33.200><c> how</c><00:02:33.360><c> do</c><00:02:33.440><c> we</c><00:02:33.599><c> do</c>

00:02:33.830 --> 00:02:33.840 align:start position:0%
next we want to add two so how do we do
 

00:02:33.840 --> 00:02:35.110 align:start position:0%
next we want to add two so how do we do
that<00:02:34.080><c> in</c><00:02:34.319><c> order</c><00:02:34.720><c> well</c>

00:02:35.110 --> 00:02:35.120 align:start position:0%
that in order well
 

00:02:35.120 --> 00:02:37.750 align:start position:0%
that in order well
we<00:02:35.280><c> have</c><00:02:35.360><c> to</c><00:02:35.680><c> traverse</c><00:02:36.400><c> our</c><00:02:36.640><c> array</c><00:02:37.120><c> so</c><00:02:37.360><c> far</c><00:02:37.599><c> so</c>

00:02:37.750 --> 00:02:37.760 align:start position:0%
we have to traverse our array so far so
 

00:02:37.760 --> 00:02:38.309 align:start position:0%
we have to traverse our array so far so
we<00:02:37.920><c> get</c>

00:02:38.309 --> 00:02:38.319 align:start position:0%
we get
 

00:02:38.319 --> 00:02:40.150 align:start position:0%
we get
we<00:02:38.480><c> see</c><00:02:38.640><c> that</c><00:02:38.800><c> there's</c><00:02:38.959><c> a</c><00:02:39.200><c> three</c><00:02:39.599><c> over</c><00:02:39.840><c> here</c>

00:02:40.150 --> 00:02:40.160 align:start position:0%
we see that there's a three over here
 

00:02:40.160 --> 00:02:42.630 align:start position:0%
we see that there's a three over here
right<00:02:40.720><c> so</c><00:02:40.959><c> then</c><00:02:41.120><c> we</c><00:02:41.280><c> gotta</c><00:02:41.519><c> replace</c><00:02:42.239><c> that</c>

00:02:42.630 --> 00:02:42.640 align:start position:0%
right so then we gotta replace that
 

00:02:42.640 --> 00:02:45.270 align:start position:0%
right so then we gotta replace that
three<00:02:43.440><c> we</c><00:02:43.680><c> shift</c><00:02:44.080><c> the</c><00:02:44.319><c> three</c><00:02:44.640><c> to</c><00:02:44.800><c> the</c><00:02:44.959><c> next</c>

00:02:45.270 --> 00:02:45.280 align:start position:0%
three we shift the three to the next
 

00:02:45.280 --> 00:02:46.630 align:start position:0%
three we shift the three to the next
position<00:02:45.760><c> and</c><00:02:45.840><c> then</c><00:02:46.000><c> we</c><00:02:46.160><c> put</c><00:02:46.400><c> a</c>

00:02:46.630 --> 00:02:46.640 align:start position:0%
position and then we put a
 

00:02:46.640 --> 00:02:48.949 align:start position:0%
position and then we put a
two<00:02:47.280><c> in</c><00:02:47.440><c> the</c><00:02:47.599><c> position</c><00:02:48.000><c> that</c><00:02:48.239><c> the</c><00:02:48.480><c> three</c><00:02:48.720><c> was</c>

00:02:48.949 --> 00:02:48.959 align:start position:0%
two in the position that the three was
 

00:02:48.959 --> 00:02:49.990 align:start position:0%
two in the position that the three was
initially<00:02:49.599><c> at</c>

00:02:49.990 --> 00:02:50.000 align:start position:0%
initially at
 

00:02:50.000 --> 00:02:53.350 align:start position:0%
initially at
right<00:02:50.640><c> so</c><00:02:50.959><c> now</c><00:02:51.360><c> our</c><00:02:51.760><c> array</c><00:02:52.319><c> is</c><00:02:52.720><c> in</c><00:02:52.879><c> sorted</c>

00:02:53.350 --> 00:02:53.360 align:start position:0%
right so now our array is in sorted
 

00:02:53.360 --> 00:02:54.790 align:start position:0%
right so now our array is in sorted
order<00:02:53.680><c> we</c><00:02:53.840><c> had</c><00:02:54.080><c> to</c>

00:02:54.790 --> 00:02:54.800 align:start position:0%
order we had to
 

00:02:54.800 --> 00:02:56.710 align:start position:0%
order we had to
uh<00:02:55.200><c> shift</c><00:02:55.519><c> some</c><00:02:55.760><c> elements</c><00:02:56.160><c> and</c><00:02:56.239><c> we</c><00:02:56.400><c> had</c><00:02:56.480><c> to</c>

00:02:56.710 --> 00:02:56.720 align:start position:0%
uh shift some elements and we had to
 

00:02:56.720 --> 00:02:59.430 align:start position:0%
uh shift some elements and we had to
search<00:02:57.120><c> for</c><00:02:57.280><c> the</c><00:02:57.440><c> spot</c><00:02:57.920><c> that</c><00:02:58.159><c> we</c><00:02:58.400><c> put</c><00:02:58.720><c> the</c><00:02:59.040><c> two</c>

00:02:59.430 --> 00:02:59.440 align:start position:0%
search for the spot that we put the two
 

00:02:59.440 --> 00:03:01.910 align:start position:0%
search for the spot that we put the two
in<00:02:59.760><c> right</c><00:03:00.159><c> so</c><00:03:00.319><c> you</c><00:03:00.480><c> can</c><00:03:00.640><c> tell</c><00:03:00.959><c> that</c><00:03:01.280><c> every</c><00:03:01.680><c> time</c>

00:03:01.910 --> 00:03:01.920 align:start position:0%
in right so you can tell that every time
 

00:03:01.920 --> 00:03:03.110 align:start position:0%
in right so you can tell that every time
we<00:03:02.159><c> add</c><00:03:02.480><c> a</c><00:03:02.560><c> number</c>

00:03:03.110 --> 00:03:03.120 align:start position:0%
we add a number
 

00:03:03.120 --> 00:03:06.149 align:start position:0%
we add a number
it's<00:03:03.440><c> going</c><00:03:03.599><c> to</c><00:03:03.760><c> be</c><00:03:04.239><c> an</c><00:03:04.640><c> o</c><00:03:04.959><c> of</c><00:03:05.280><c> n</c><00:03:05.599><c> operation</c>

00:03:06.149 --> 00:03:06.159 align:start position:0%
it's going to be an o of n operation
 

00:03:06.159 --> 00:03:06.470 align:start position:0%
it's going to be an o of n operation
where

00:03:06.470 --> 00:03:06.480 align:start position:0%
where
 

00:03:06.480 --> 00:03:08.869 align:start position:0%
where
n<00:03:06.800><c> is</c><00:03:07.040><c> the</c><00:03:07.200><c> number</c><00:03:07.440><c> of</c><00:03:07.680><c> elements</c><00:03:08.080><c> we</c><00:03:08.319><c> have</c>

00:03:08.869 --> 00:03:08.879 align:start position:0%
n is the number of elements we have
 

00:03:08.879 --> 00:03:10.470 align:start position:0%
n is the number of elements we have
added<00:03:09.440><c> so</c><00:03:09.760><c> far</c>

00:03:10.470 --> 00:03:10.480 align:start position:0%
added so far
 

00:03:10.480 --> 00:03:13.990 align:start position:0%
added so far
so<00:03:10.640><c> we</c><00:03:10.879><c> added</c><00:03:11.200><c> two</c><00:03:12.000><c> next</c><00:03:12.400><c> let's</c><00:03:12.720><c> add</c><00:03:13.360><c> one</c>

00:03:13.990 --> 00:03:14.000 align:start position:0%
so we added two next let's add one
 

00:03:14.000 --> 00:03:16.229 align:start position:0%
so we added two next let's add one
well<00:03:14.239><c> we're</c><00:03:14.400><c> gonna</c><00:03:14.640><c> traverse</c><00:03:15.519><c> the</c><00:03:15.920><c> array</c>

00:03:16.229 --> 00:03:16.239 align:start position:0%
well we're gonna traverse the array
 

00:03:16.239 --> 00:03:17.430 align:start position:0%
well we're gonna traverse the array
right<00:03:16.400><c> we're</c><00:03:16.560><c> gonna</c><00:03:16.720><c> see</c><00:03:16.879><c> okay</c><00:03:17.120><c> the</c><00:03:17.200><c> first</c>

00:03:17.430 --> 00:03:17.440 align:start position:0%
right we're gonna see okay the first
 

00:03:17.440 --> 00:03:18.869 align:start position:0%
right we're gonna see okay the first
element<00:03:17.760><c> is</c><00:03:17.920><c> two</c><00:03:18.159><c> we</c><00:03:18.319><c> know</c><00:03:18.560><c> that</c>

00:03:18.869 --> 00:03:18.879 align:start position:0%
element is two we know that
 

00:03:18.879 --> 00:03:21.350 align:start position:0%
element is two we know that
one<00:03:19.280><c> is</c><00:03:19.599><c> less</c><00:03:19.840><c> than</c><00:03:20.080><c> two</c><00:03:20.400><c> so</c><00:03:20.959><c> really</c><00:03:21.200><c> what</c>

00:03:21.350 --> 00:03:21.360 align:start position:0%
one is less than two so really what
 

00:03:21.360 --> 00:03:22.630 align:start position:0%
one is less than two so really what
we're<00:03:21.519><c> gonna</c><00:03:21.760><c> do</c><00:03:22.000><c> is</c>

00:03:22.630 --> 00:03:22.640 align:start position:0%
we're gonna do is
 

00:03:22.640 --> 00:03:24.390 align:start position:0%
we're gonna do is
cross<00:03:22.959><c> out</c><00:03:23.120><c> the</c><00:03:23.280><c> two</c><00:03:23.519><c> cross</c><00:03:23.760><c> out</c><00:03:23.920><c> the</c><00:03:24.080><c> three</c>

00:03:24.390 --> 00:03:24.400 align:start position:0%
cross out the two cross out the three
 

00:03:24.400 --> 00:03:26.229 align:start position:0%
cross out the two cross out the three
right<00:03:24.720><c> shift</c><00:03:25.040><c> the</c><00:03:25.200><c> two</c><00:03:25.440><c> over</c><00:03:25.680><c> here</c>

00:03:26.229 --> 00:03:26.239 align:start position:0%
right shift the two over here
 

00:03:26.239 --> 00:03:28.149 align:start position:0%
right shift the two over here
shift<00:03:26.560><c> the</c><00:03:26.799><c> three</c><00:03:27.120><c> over</c><00:03:27.280><c> here</c><00:03:27.519><c> and</c><00:03:27.599><c> then</c><00:03:27.760><c> put</c><00:03:27.920><c> a</c>

00:03:28.149 --> 00:03:28.159 align:start position:0%
shift the three over here and then put a
 

00:03:28.159 --> 00:03:29.350 align:start position:0%
shift the three over here and then put a
one<00:03:28.480><c> here</c><00:03:28.720><c> but</c>

00:03:29.350 --> 00:03:29.360 align:start position:0%
one here but
 

00:03:29.360 --> 00:03:32.229 align:start position:0%
one here but
i'll<00:03:29.599><c> just</c><00:03:30.159><c> to</c><00:03:30.400><c> keep</c><00:03:30.640><c> the</c><00:03:30.799><c> picture</c><00:03:31.200><c> simple</c><00:03:32.080><c> i'm</c>

00:03:32.229 --> 00:03:32.239 align:start position:0%
i'll just to keep the picture simple i'm
 

00:03:32.239 --> 00:03:34.149 align:start position:0%
i'll just to keep the picture simple i'm
just<00:03:32.400><c> gonna</c><00:03:32.640><c> put</c><00:03:32.799><c> the</c><00:03:32.959><c> one</c><00:03:33.280><c> over</c><00:03:33.519><c> here</c><00:03:33.760><c> but</c><00:03:33.920><c> we</c>

00:03:34.149 --> 00:03:34.159 align:start position:0%
just gonna put the one over here but we
 

00:03:34.159 --> 00:03:34.949 align:start position:0%
just gonna put the one over here but we
know<00:03:34.400><c> that</c>

00:03:34.949 --> 00:03:34.959 align:start position:0%
know that
 

00:03:34.959 --> 00:03:37.030 align:start position:0%
know that
in<00:03:35.120><c> the</c><00:03:35.280><c> worst</c><00:03:35.599><c> case</c><00:03:36.000><c> every</c><00:03:36.239><c> time</c><00:03:36.400><c> we</c><00:03:36.640><c> insert</c>

00:03:37.030 --> 00:03:37.040 align:start position:0%
in the worst case every time we insert
 

00:03:37.040 --> 00:03:38.470 align:start position:0%
in the worst case every time we insert
an<00:03:37.200><c> element</c><00:03:37.519><c> it's</c><00:03:37.599><c> gonna</c><00:03:37.840><c> be</c><00:03:38.000><c> o</c><00:03:38.239><c> of</c>

00:03:38.470 --> 00:03:38.480 align:start position:0%
an element it's gonna be o of
 

00:03:38.480 --> 00:03:41.670 align:start position:0%
an element it's gonna be o of
n<00:03:39.200><c> lastly</c><00:03:39.680><c> we're</c><00:03:39.920><c> gonna</c><00:03:40.080><c> take</c><00:03:40.319><c> the</c><00:03:40.560><c> four</c><00:03:41.360><c> and</c>

00:03:41.670 --> 00:03:41.680 align:start position:0%
n lastly we're gonna take the four and
 

00:03:41.680 --> 00:03:43.750 align:start position:0%
n lastly we're gonna take the four and
add<00:03:42.000><c> the</c><00:03:42.159><c> four</c><00:03:42.480><c> so</c><00:03:42.640><c> we're</c><00:03:42.799><c> gonna</c><00:03:43.040><c> see</c>

00:03:43.750 --> 00:03:43.760 align:start position:0%
add the four so we're gonna see
 

00:03:43.760 --> 00:03:45.910 align:start position:0%
add the four so we're gonna see
one<00:03:44.239><c> nope</c><00:03:44.560><c> four</c><00:03:44.720><c> is</c><00:03:44.959><c> bigger</c><00:03:45.200><c> than</c><00:03:45.360><c> that</c><00:03:45.599><c> two</c>

00:03:45.910 --> 00:03:45.920 align:start position:0%
one nope four is bigger than that two
 

00:03:45.920 --> 00:03:47.589 align:start position:0%
one nope four is bigger than that two
nope<00:03:46.239><c> four</c><00:03:46.400><c> is</c><00:03:46.560><c> bigger</c><00:03:46.799><c> than</c><00:03:46.959><c> that</c><00:03:47.200><c> three</c>

00:03:47.589 --> 00:03:47.599 align:start position:0%
nope four is bigger than that three
 

00:03:47.599 --> 00:03:49.270 align:start position:0%
nope four is bigger than that three
nope<00:03:47.920><c> four</c><00:03:48.159><c> is</c><00:03:48.239><c> bigger</c><00:03:48.480><c> than</c><00:03:48.560><c> that</c><00:03:48.720><c> so</c><00:03:48.879><c> we</c><00:03:49.040><c> add</c>

00:03:49.270 --> 00:03:49.280 align:start position:0%
nope four is bigger than that so we add
 

00:03:49.280 --> 00:03:50.949 align:start position:0%
nope four is bigger than that so we add
the<00:03:49.440><c> four</c><00:03:49.840><c> at</c><00:03:50.000><c> the</c><00:03:50.239><c> end</c>

00:03:50.949 --> 00:03:50.959 align:start position:0%
the four at the end
 

00:03:50.959 --> 00:03:53.429 align:start position:0%
the four at the end
so<00:03:51.280><c> now</c><00:03:51.519><c> we</c><00:03:51.680><c> finally</c><00:03:52.000><c> have</c><00:03:52.239><c> a</c><00:03:52.400><c> get</c><00:03:52.720><c> median</c><00:03:53.120><c> call</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
so now we finally have a get median call
 

00:03:53.439 --> 00:03:55.270 align:start position:0%
so now we finally have a get median call
well<00:03:53.760><c> good</c><00:03:53.920><c> thing</c><00:03:54.159><c> for</c><00:03:54.400><c> us</c><00:03:54.560><c> since</c><00:03:54.959><c> our</c>

00:03:55.270 --> 00:03:55.280 align:start position:0%
well good thing for us since our
 

00:03:55.280 --> 00:03:56.949 align:start position:0%
well good thing for us since our
array<00:03:55.599><c> is</c><00:03:55.760><c> in</c><00:03:55.840><c> sorted</c><00:03:56.159><c> order</c><00:03:56.480><c> we</c><00:03:56.560><c> know</c><00:03:56.720><c> getting</c>

00:03:56.949 --> 00:03:56.959 align:start position:0%
array is in sorted order we know getting
 

00:03:56.959 --> 00:03:59.110 align:start position:0%
array is in sorted order we know getting
the<00:03:57.120><c> median</c><00:03:57.519><c> is</c><00:03:57.599><c> super</c><00:03:58.000><c> easy</c><00:03:58.400><c> in</c><00:03:58.560><c> this</c><00:03:58.720><c> case</c><00:03:58.959><c> we</c>

00:03:59.110 --> 00:03:59.120 align:start position:0%
the median is super easy in this case we
 

00:03:59.120 --> 00:03:59.589 align:start position:0%
the median is super easy in this case we
have<00:03:59.280><c> an</c>

00:03:59.589 --> 00:03:59.599 align:start position:0%
have an
 

00:03:59.599 --> 00:04:01.350 align:start position:0%
have an
even<00:04:00.000><c> length</c><00:04:00.319><c> list</c><00:04:00.640><c> right</c><00:04:00.799><c> we</c><00:04:00.959><c> have</c><00:04:01.120><c> four</c>

00:04:01.350 --> 00:04:01.360 align:start position:0%
even length list right we have four
 

00:04:01.360 --> 00:04:03.110 align:start position:0%
even length list right we have four
elements<00:04:01.760><c> so</c><00:04:02.000><c> we</c><00:04:02.159><c> are</c><00:04:02.239><c> going</c><00:04:02.319><c> to</c><00:04:02.480><c> take</c>

00:04:03.110 --> 00:04:03.120 align:start position:0%
elements so we are going to take
 

00:04:03.120 --> 00:04:05.830 align:start position:0%
elements so we are going to take
the<00:04:03.519><c> two</c><00:04:03.840><c> middle</c><00:04:04.319><c> elements</c><00:04:04.879><c> two</c><00:04:05.120><c> and</c><00:04:05.280><c> three</c>

00:04:05.830 --> 00:04:05.840 align:start position:0%
the two middle elements two and three
 

00:04:05.840 --> 00:04:06.789 align:start position:0%
the two middle elements two and three
add<00:04:06.080><c> them</c><00:04:06.239><c> together</c>

00:04:06.789 --> 00:04:06.799 align:start position:0%
add them together
 

00:04:06.799 --> 00:04:09.509 align:start position:0%
add them together
divide<00:04:07.120><c> by</c><00:04:07.360><c> two</c><00:04:07.519><c> we're</c><00:04:07.680><c> going</c><00:04:07.760><c> to</c><00:04:07.840><c> get</c><00:04:08.000><c> 2.5</c><00:04:09.120><c> so</c>

00:04:09.509 --> 00:04:09.519 align:start position:0%
divide by two we're going to get 2.5 so
 

00:04:09.519 --> 00:04:10.309 align:start position:0%
divide by two we're going to get 2.5 so
we<00:04:09.680><c> know</c><00:04:09.920><c> that</c>

00:04:10.309 --> 00:04:10.319 align:start position:0%
we know that
 

00:04:10.319 --> 00:04:12.630 align:start position:0%
we know that
the<00:04:10.640><c> get</c><00:04:11.040><c> median</c><00:04:11.519><c> operation</c><00:04:12.000><c> is</c><00:04:12.239><c> always</c><00:04:12.560><c> going</c>

00:04:12.630 --> 00:04:12.640 align:start position:0%
the get median operation is always going
 

00:04:12.640 --> 00:04:14.149 align:start position:0%
the get median operation is always going
to<00:04:12.720><c> be</c><00:04:12.959><c> o</c><00:04:13.200><c> of</c><00:04:13.439><c> 1</c>

00:04:14.149 --> 00:04:14.159 align:start position:0%
to be o of 1
 

00:04:14.159 --> 00:04:15.910 align:start position:0%
to be o of 1
but<00:04:14.480><c> adding</c><00:04:14.879><c> a</c><00:04:15.040><c> number</c><00:04:15.360><c> is</c><00:04:15.439><c> always</c><00:04:15.760><c> going</c><00:04:15.840><c> to</c>

00:04:15.910 --> 00:04:15.920 align:start position:0%
but adding a number is always going to
 

00:04:15.920 --> 00:04:17.509 align:start position:0%
but adding a number is always going to
be<00:04:16.160><c> o</c><00:04:16.560><c> of</c><00:04:17.040><c> n</c>

00:04:17.509 --> 00:04:17.519 align:start position:0%
be o of n
 

00:04:17.519 --> 00:04:20.789 align:start position:0%
be o of n
so<00:04:18.079><c> how</c><00:04:18.320><c> can</c><00:04:18.560><c> we</c><00:04:18.959><c> speed</c><00:04:19.440><c> this</c><00:04:19.840><c> o</c><00:04:20.079><c> of</c><00:04:20.400><c> n</c>

00:04:20.789 --> 00:04:20.799 align:start position:0%
so how can we speed this o of n
 

00:04:20.799 --> 00:04:23.590 align:start position:0%
so how can we speed this o of n
operation<00:04:21.759><c> up</c><00:04:22.400><c> and</c><00:04:22.639><c> let</c><00:04:22.800><c> me</c><00:04:22.960><c> just</c><00:04:23.120><c> tell</c><00:04:23.360><c> you</c>

00:04:23.590 --> 00:04:23.600 align:start position:0%
operation up and let me just tell you
 

00:04:23.600 --> 00:04:25.430 align:start position:0%
operation up and let me just tell you
basically<00:04:24.160><c> what</c><00:04:24.400><c> we're</c><00:04:24.560><c> going</c><00:04:24.720><c> to</c><00:04:24.880><c> do</c>

00:04:25.430 --> 00:04:25.440 align:start position:0%
basically what we're going to do
 

00:04:25.440 --> 00:04:28.150 align:start position:0%
basically what we're going to do
is<00:04:25.600><c> instead</c><00:04:26.000><c> of</c><00:04:26.160><c> having</c><00:04:26.560><c> just</c><00:04:26.880><c> a</c><00:04:27.199><c> single</c><00:04:27.759><c> list</c>

00:04:28.150 --> 00:04:28.160 align:start position:0%
is instead of having just a single list
 

00:04:28.160 --> 00:04:28.469 align:start position:0%
is instead of having just a single list
of

00:04:28.469 --> 00:04:28.479 align:start position:0%
of
 

00:04:28.479 --> 00:04:30.550 align:start position:0%
of
elements<00:04:28.880><c> we're</c><00:04:29.120><c> gonna</c><00:04:29.440><c> break</c><00:04:29.759><c> this</c><00:04:30.000><c> up</c><00:04:30.160><c> into</c>

00:04:30.550 --> 00:04:30.560 align:start position:0%
elements we're gonna break this up into
 

00:04:30.560 --> 00:04:31.590 align:start position:0%
elements we're gonna break this up into
two<00:04:31.120><c> and</c>

00:04:31.590 --> 00:04:31.600 align:start position:0%
two and
 

00:04:31.600 --> 00:04:34.230 align:start position:0%
two and
the<00:04:32.000><c> we're</c><00:04:32.160><c> gonna</c><00:04:32.320><c> have</c><00:04:32.639><c> basically</c><00:04:33.360><c> two</c>

00:04:34.230 --> 00:04:34.240 align:start position:0%
the we're gonna have basically two
 

00:04:34.240 --> 00:04:35.590 align:start position:0%
the we're gonna have basically two
subsets<00:04:34.880><c> right</c>

00:04:35.590 --> 00:04:35.600 align:start position:0%
subsets right
 

00:04:35.600 --> 00:04:38.469 align:start position:0%
subsets right
and<00:04:36.080><c> one</c><00:04:36.880><c> is</c><00:04:37.120><c> always</c><00:04:37.440><c> gonna</c><00:04:37.600><c> be</c><00:04:37.759><c> less</c><00:04:38.000><c> so</c><00:04:38.240><c> this</c>

00:04:38.469 --> 00:04:38.479 align:start position:0%
and one is always gonna be less so this
 

00:04:38.479 --> 00:04:39.030 align:start position:0%
and one is always gonna be less so this
has<00:04:38.720><c> one</c>

00:04:39.030 --> 00:04:39.040 align:start position:0%
has one
 

00:04:39.040 --> 00:04:43.030 align:start position:0%
has one
and<00:04:39.199><c> two</c><00:04:39.919><c> and</c><00:04:40.800><c> this</c><00:04:41.120><c> has</c><00:04:41.600><c> three</c><00:04:42.000><c> and</c><00:04:42.320><c> four</c>

00:04:43.030 --> 00:04:43.040 align:start position:0%
and two and this has three and four
 

00:04:43.040 --> 00:04:46.310 align:start position:0%
and two and this has three and four
and<00:04:43.440><c> all</c><00:04:43.919><c> elements</c><00:04:44.800><c> from</c><00:04:45.600><c> the</c><00:04:45.840><c> left</c><00:04:46.160><c> are</c>

00:04:46.310 --> 00:04:46.320 align:start position:0%
and all elements from the left are
 

00:04:46.320 --> 00:04:47.110 align:start position:0%
and all elements from the left are
always<00:04:46.639><c> going</c><00:04:46.720><c> to</c><00:04:46.880><c> be</c>

00:04:47.110 --> 00:04:47.120 align:start position:0%
always going to be
 

00:04:47.120 --> 00:04:49.350 align:start position:0%
always going to be
less<00:04:47.360><c> than</c><00:04:47.520><c> or</c><00:04:47.759><c> equal</c><00:04:48.080><c> to</c><00:04:48.400><c> all</c><00:04:48.720><c> elements</c><00:04:49.199><c> in</c>

00:04:49.350 --> 00:04:49.360 align:start position:0%
less than or equal to all elements in
 

00:04:49.360 --> 00:04:50.150 align:start position:0%
less than or equal to all elements in
the<00:04:49.600><c> right</c>

00:04:50.150 --> 00:04:50.160 align:start position:0%
the right
 

00:04:50.160 --> 00:04:52.629 align:start position:0%
the right
so<00:04:50.479><c> this</c><00:04:50.639><c> will</c><00:04:50.960><c> also</c><00:04:51.280><c> make</c><00:04:51.520><c> it</c><00:04:51.680><c> easy</c><00:04:52.080><c> for</c><00:04:52.240><c> us</c><00:04:52.400><c> to</c>

00:04:52.629 --> 00:04:52.639 align:start position:0%
so this will also make it easy for us to
 

00:04:52.639 --> 00:04:53.670 align:start position:0%
so this will also make it easy for us to
get<00:04:52.800><c> the</c><00:04:53.040><c> median</c>

00:04:53.670 --> 00:04:53.680 align:start position:0%
get the median
 

00:04:53.680 --> 00:04:55.749 align:start position:0%
get the median
but<00:04:53.919><c> i'm</c><00:04:54.080><c> not</c><00:04:54.240><c> just</c><00:04:54.400><c> gonna</c><00:04:54.639><c> have</c><00:04:54.960><c> arrays</c><00:04:55.600><c> i'm</c>

00:04:55.749 --> 00:04:55.759 align:start position:0%
but i'm not just gonna have arrays i'm
 

00:04:55.759 --> 00:04:57.189 align:start position:0%
but i'm not just gonna have arrays i'm
going<00:04:55.840><c> to</c><00:04:56.000><c> use</c><00:04:56.479><c> a</c>

00:04:57.189 --> 00:04:57.199 align:start position:0%
going to use a
 

00:04:57.199 --> 00:05:00.629 align:start position:0%
going to use a
heap<00:04:57.919><c> or</c><00:04:58.240><c> a</c><00:04:58.560><c> priority</c><00:04:59.199><c> queue</c><00:05:00.160><c> so</c><00:05:00.400><c> we're</c><00:05:00.560><c> going</c>

00:05:00.629 --> 00:05:00.639 align:start position:0%
heap or a priority queue so we're going
 

00:05:00.639 --> 00:05:02.550 align:start position:0%
heap or a priority queue so we're going
to<00:05:00.720><c> use</c><00:05:00.960><c> a</c><00:05:01.120><c> heap</c><00:05:01.440><c> data</c><00:05:01.759><c> structure</c>

00:05:02.550 --> 00:05:02.560 align:start position:0%
to use a heap data structure
 

00:05:02.560 --> 00:05:04.710 align:start position:0%
to use a heap data structure
so<00:05:02.880><c> i'm</c><00:05:03.039><c> going</c><00:05:03.199><c> to</c><00:05:03.280><c> have</c><00:05:03.600><c> two</c><00:05:04.080><c> heaps</c><00:05:04.479><c> in</c><00:05:04.560><c> this</c>

00:05:04.710 --> 00:05:04.720 align:start position:0%
so i'm going to have two heaps in this
 

00:05:04.720 --> 00:05:07.110 align:start position:0%
so i'm going to have two heaps in this
case<00:05:05.120><c> a</c><00:05:05.360><c> small</c><00:05:05.759><c> heap</c><00:05:06.000><c> and</c><00:05:06.160><c> a</c><00:05:06.240><c> large</c><00:05:06.560><c> heap</c>

00:05:07.110 --> 00:05:07.120 align:start position:0%
case a small heap and a large heap
 

00:05:07.120 --> 00:05:09.270 align:start position:0%
case a small heap and a large heap
small<00:05:07.440><c> heap</c><00:05:08.080><c> all</c><00:05:08.400><c> elements</c><00:05:08.800><c> in</c><00:05:08.880><c> the</c><00:05:08.960><c> small</c>

00:05:09.270 --> 00:05:09.280 align:start position:0%
small heap all elements in the small
 

00:05:09.280 --> 00:05:10.950 align:start position:0%
small heap all elements in the small
heap<00:05:09.520><c> are</c><00:05:09.680><c> always</c><00:05:10.000><c> going</c><00:05:10.080><c> to</c><00:05:10.160><c> be</c><00:05:10.400><c> less</c><00:05:10.639><c> than</c><00:05:10.800><c> or</c>

00:05:10.950 --> 00:05:10.960 align:start position:0%
heap are always going to be less than or
 

00:05:10.960 --> 00:05:11.670 align:start position:0%
heap are always going to be less than or
equal<00:05:11.280><c> to</c>

00:05:11.670 --> 00:05:11.680 align:start position:0%
equal to
 

00:05:11.680 --> 00:05:14.950 align:start position:0%
equal to
all<00:05:12.000><c> elements</c><00:05:12.479><c> in</c><00:05:12.639><c> the</c><00:05:12.800><c> large</c><00:05:13.199><c> heap</c><00:05:14.000><c> also</c>

00:05:14.950 --> 00:05:14.960 align:start position:0%
all elements in the large heap also
 

00:05:14.960 --> 00:05:17.270 align:start position:0%
all elements in the large heap also
the<00:05:15.440><c> size</c><00:05:15.840><c> of</c><00:05:16.000><c> these</c><00:05:16.240><c> heaps</c><00:05:16.560><c> is</c><00:05:16.800><c> always</c><00:05:17.199><c> going</c>

00:05:17.270 --> 00:05:17.280 align:start position:0%
the size of these heaps is always going
 

00:05:17.280 --> 00:05:19.189 align:start position:0%
the size of these heaps is always going
to<00:05:17.360><c> be</c><00:05:17.520><c> approximately</c><00:05:18.400><c> equal</c><00:05:18.880><c> so</c>

00:05:19.189 --> 00:05:19.199 align:start position:0%
to be approximately equal so
 

00:05:19.199 --> 00:05:21.350 align:start position:0%
to be approximately equal so
if<00:05:19.360><c> there</c><00:05:19.520><c> were</c><00:05:19.759><c> two</c><00:05:20.000><c> elements</c><00:05:20.560><c> in</c><00:05:20.880><c> this</c><00:05:21.120><c> heap</c>

00:05:21.350 --> 00:05:21.360 align:start position:0%
if there were two elements in this heap
 

00:05:21.360 --> 00:05:23.350 align:start position:0%
if there were two elements in this heap
then<00:05:21.520><c> there's</c><00:05:22.080><c> there</c><00:05:22.400><c> has</c><00:05:22.560><c> to</c><00:05:22.720><c> be</c><00:05:23.039><c> two</c>

00:05:23.350 --> 00:05:23.360 align:start position:0%
then there's there has to be two
 

00:05:23.360 --> 00:05:25.430 align:start position:0%
then there's there has to be two
elements<00:05:23.759><c> in</c><00:05:23.919><c> this</c><00:05:24.160><c> heap</c><00:05:24.639><c> what</c><00:05:24.800><c> if</c><00:05:24.960><c> we</c><00:05:25.039><c> had</c><00:05:25.199><c> an</c>

00:05:25.430 --> 00:05:25.440 align:start position:0%
elements in this heap what if we had an
 

00:05:25.440 --> 00:05:27.110 align:start position:0%
elements in this heap what if we had an
odd<00:05:25.680><c> number</c><00:05:25.919><c> of</c><00:05:26.080><c> elements</c><00:05:26.479><c> so</c><00:05:26.720><c> what</c><00:05:26.880><c> if</c><00:05:26.960><c> there</c>

00:05:27.110 --> 00:05:27.120 align:start position:0%
odd number of elements so what if there
 

00:05:27.120 --> 00:05:28.629 align:start position:0%
odd number of elements so what if there
were<00:05:27.360><c> three</c><00:05:27.680><c> elements</c><00:05:28.080><c> in</c><00:05:28.160><c> this</c><00:05:28.320><c> heap</c>

00:05:28.629 --> 00:05:28.639 align:start position:0%
were three elements in this heap
 

00:05:28.639 --> 00:05:31.029 align:start position:0%
were three elements in this heap
that's<00:05:29.039><c> allowed</c><00:05:29.600><c> because</c><00:05:30.320><c> we</c><00:05:30.560><c> know</c><00:05:30.720><c> that</c><00:05:30.880><c> we</c>

00:05:31.029 --> 00:05:31.039 align:start position:0%
that's allowed because we know that we
 

00:05:31.039 --> 00:05:31.749 align:start position:0%
that's allowed because we know that we
can't<00:05:31.280><c> actually</c>

00:05:31.749 --> 00:05:31.759 align:start position:0%
can't actually
 

00:05:31.759 --> 00:05:34.550 align:start position:0%
can't actually
have<00:05:32.720><c> these</c><00:05:32.960><c> be</c><00:05:33.280><c> equal</c><00:05:33.759><c> if</c><00:05:33.919><c> there's</c><00:05:34.160><c> a</c><00:05:34.240><c> two</c><00:05:34.479><c> and</c>

00:05:34.550 --> 00:05:34.560 align:start position:0%
have these be equal if there's a two and
 

00:05:34.560 --> 00:05:35.350 align:start position:0%
have these be equal if there's a two and
a<00:05:34.639><c> three</c><00:05:34.960><c> right</c>

00:05:35.350 --> 00:05:35.360 align:start position:0%
a three right
 

00:05:35.360 --> 00:05:37.110 align:start position:0%
a three right
or<00:05:35.759><c> in</c><00:05:35.840><c> the</c><00:05:36.000><c> opposite</c><00:05:36.400><c> case</c><00:05:36.639><c> there</c><00:05:36.800><c> could</c><00:05:36.960><c> be</c>

00:05:37.110 --> 00:05:37.120 align:start position:0%
or in the opposite case there could be
 

00:05:37.120 --> 00:05:38.310 align:start position:0%
or in the opposite case there could be
two<00:05:37.280><c> elements</c><00:05:37.680><c> here</c><00:05:37.919><c> and</c><00:05:38.000><c> there</c><00:05:38.160><c> could</c>

00:05:38.310 --> 00:05:38.320 align:start position:0%
two elements here and there could
 

00:05:38.320 --> 00:05:39.270 align:start position:0%
two elements here and there could
actually<00:05:38.720><c> be</c>

00:05:39.270 --> 00:05:39.280 align:start position:0%
actually be
 

00:05:39.280 --> 00:05:41.430 align:start position:0%
actually be
three<00:05:39.600><c> elements</c><00:05:40.000><c> here</c><00:05:40.160><c> that's</c><00:05:40.560><c> also</c><00:05:40.960><c> allowed</c>

00:05:41.430 --> 00:05:41.440 align:start position:0%
three elements here that's also allowed
 

00:05:41.440 --> 00:05:43.110 align:start position:0%
three elements here that's also allowed
because<00:05:41.680><c> we</c><00:05:41.840><c> know</c><00:05:42.000><c> that's</c><00:05:42.320><c> approximately</c>

00:05:43.110 --> 00:05:43.120 align:start position:0%
because we know that's approximately
 

00:05:43.120 --> 00:05:43.510 align:start position:0%
because we know that's approximately
equal

00:05:43.510 --> 00:05:43.520 align:start position:0%
equal
 

00:05:43.520 --> 00:05:45.830 align:start position:0%
equal
if<00:05:43.759><c> the</c><00:05:43.919><c> difference</c><00:05:44.400><c> though</c><00:05:44.639><c> is</c><00:05:44.800><c> ever</c><00:05:45.120><c> greater</c>

00:05:45.830 --> 00:05:45.840 align:start position:0%
if the difference though is ever greater
 

00:05:45.840 --> 00:05:47.189 align:start position:0%
if the difference though is ever greater
than<00:05:46.160><c> one</c><00:05:46.479><c> so</c><00:05:46.639><c> if</c><00:05:46.720><c> there</c><00:05:46.880><c> were</c>

00:05:47.189 --> 00:05:47.199 align:start position:0%
than one so if there were
 

00:05:47.199 --> 00:05:49.510 align:start position:0%
than one so if there were
four<00:05:47.520><c> here</c><00:05:48.080><c> and</c><00:05:48.240><c> two</c><00:05:48.479><c> here</c><00:05:48.720><c> we</c><00:05:48.880><c> know</c><00:05:49.120><c> then</c><00:05:49.360><c> we</c>

00:05:49.510 --> 00:05:49.520 align:start position:0%
four here and two here we know then we
 

00:05:49.520 --> 00:05:51.270 align:start position:0%
four here and two here we know then we
have<00:05:49.680><c> to</c><00:05:49.840><c> balance</c><00:05:50.320><c> them</c><00:05:50.560><c> right</c><00:05:50.800><c> make</c><00:05:51.039><c> this</c>

00:05:51.270 --> 00:05:51.280 align:start position:0%
have to balance them right make this
 

00:05:51.280 --> 00:05:52.150 align:start position:0%
have to balance them right make this
equal

00:05:52.150 --> 00:05:52.160 align:start position:0%
equal
 

00:05:52.160 --> 00:05:55.270 align:start position:0%
equal
three<00:05:53.039><c> and</c><00:05:53.520><c> make</c><00:05:53.840><c> this</c><00:05:54.160><c> equal</c><00:05:54.639><c> three</c><00:05:54.880><c> right</c><00:05:55.120><c> we</c>

00:05:55.270 --> 00:05:55.280 align:start position:0%
three and make this equal three right we
 

00:05:55.280 --> 00:05:57.189 align:start position:0%
three and make this equal three right we
always<00:05:55.520><c> have</c><00:05:55.680><c> to</c><00:05:55.759><c> keep</c><00:05:56.000><c> it</c><00:05:56.160><c> as</c><00:05:56.400><c> balanced</c><00:05:56.880><c> as</c>

00:05:57.189 --> 00:05:57.199 align:start position:0%
always have to keep it as balanced as
 

00:05:57.199 --> 00:05:58.070 align:start position:0%
always have to keep it as balanced as
possible

00:05:58.070 --> 00:05:58.080 align:start position:0%
possible
 

00:05:58.080 --> 00:05:59.909 align:start position:0%
possible
and<00:05:58.319><c> if</c><00:05:58.479><c> you're</c><00:05:58.639><c> not</c><00:05:58.880><c> familiar</c><00:05:59.440><c> with</c><00:05:59.680><c> what</c>

00:05:59.909 --> 00:05:59.919 align:start position:0%
and if you're not familiar with what
 

00:05:59.919 --> 00:06:01.350 align:start position:0%
and if you're not familiar with what
exactly<00:06:00.400><c> a</c><00:06:00.639><c> heap</c><00:06:01.039><c> is</c>

00:06:01.350 --> 00:06:01.360 align:start position:0%
exactly a heap is
 

00:06:01.360 --> 00:06:04.309 align:start position:0%
exactly a heap is
it's<00:06:01.840><c> basically</c><00:06:02.800><c> like</c><00:06:03.199><c> a</c><00:06:03.440><c> list</c><00:06:03.840><c> it's</c><00:06:04.080><c> pretty</c>

00:06:04.309 --> 00:06:04.319 align:start position:0%
it's basically like a list it's pretty
 

00:06:04.319 --> 00:06:05.990 align:start position:0%
it's basically like a list it's pretty
similar<00:06:04.720><c> to</c><00:06:04.800><c> a</c><00:06:04.960><c> list</c><00:06:05.199><c> it's</c><00:06:05.440><c> implemented</c>

00:06:05.990 --> 00:06:06.000 align:start position:0%
similar to a list it's implemented
 

00:06:06.000 --> 00:06:08.550 align:start position:0%
similar to a list it's implemented
using<00:06:06.560><c> arrays</c><00:06:07.120><c> or</c><00:06:07.360><c> lists</c><00:06:08.000><c> the</c><00:06:08.160><c> only</c>

00:06:08.550 --> 00:06:08.560 align:start position:0%
using arrays or lists the only
 

00:06:08.560 --> 00:06:09.590 align:start position:0%
using arrays or lists the only
difference<00:06:08.960><c> is</c><00:06:09.199><c> though</c>

00:06:09.590 --> 00:06:09.600 align:start position:0%
difference is though
 

00:06:09.600 --> 00:06:11.670 align:start position:0%
difference is though
adding<00:06:10.160><c> a</c><00:06:10.400><c> number</c><00:06:10.720><c> we</c><00:06:10.880><c> don't</c><00:06:11.120><c> add</c><00:06:11.440><c> at</c><00:06:11.520><c> the</c>

00:06:11.670 --> 00:06:11.680 align:start position:0%
adding a number we don't add at the
 

00:06:11.680 --> 00:06:14.070 align:start position:0%
adding a number we don't add at the
beginning<00:06:12.240><c> or</c><00:06:12.479><c> at</c><00:06:12.560><c> the</c><00:06:12.800><c> end</c><00:06:13.120><c> we</c><00:06:13.280><c> just</c>

00:06:14.070 --> 00:06:14.080 align:start position:0%
beginning or at the end we just
 

00:06:14.080 --> 00:06:16.230 align:start position:0%
beginning or at the end we just
add<00:06:14.400><c> elements</c><00:06:14.800><c> to</c><00:06:14.960><c> the</c><00:06:15.039><c> heap</c><00:06:15.360><c> and</c><00:06:15.600><c> adding</c><00:06:16.080><c> an</c>

00:06:16.230 --> 00:06:16.240 align:start position:0%
add elements to the heap and adding an
 

00:06:16.240 --> 00:06:17.430 align:start position:0%
add elements to the heap and adding an
element<00:06:16.720><c> to</c><00:06:16.960><c> this</c>

00:06:17.430 --> 00:06:17.440 align:start position:0%
element to this
 

00:06:17.440 --> 00:06:20.309 align:start position:0%
element to this
heap<00:06:17.759><c> is</c><00:06:18.000><c> always</c><00:06:18.400><c> going</c><00:06:18.639><c> to</c><00:06:18.800><c> be</c><00:06:19.039><c> a</c><00:06:19.360><c> log</c><00:06:19.840><c> n</c>

00:06:20.309 --> 00:06:20.319 align:start position:0%
heap is always going to be a log n
 

00:06:20.319 --> 00:06:21.189 align:start position:0%
heap is always going to be a log n
operation

00:06:21.189 --> 00:06:21.199 align:start position:0%
operation
 

00:06:21.199 --> 00:06:23.909 align:start position:0%
operation
and<00:06:21.440><c> removing</c><00:06:22.080><c> an</c><00:06:22.319><c> element</c><00:06:22.720><c> is</c><00:06:22.960><c> also</c><00:06:23.440><c> going</c><00:06:23.680><c> to</c>

00:06:23.909 --> 00:06:23.919 align:start position:0%
and removing an element is also going to
 

00:06:23.919 --> 00:06:24.230 align:start position:0%
and removing an element is also going to
be

00:06:24.230 --> 00:06:24.240 align:start position:0%
be
 

00:06:24.240 --> 00:06:27.590 align:start position:0%
be
a<00:06:24.639><c> log</c><00:06:25.120><c> n</c><00:06:25.759><c> operation</c><00:06:26.479><c> right</c><00:06:26.639><c> so</c><00:06:26.960><c> add</c>

00:06:27.590 --> 00:06:27.600 align:start position:0%
a log n operation right so add
 

00:06:27.600 --> 00:06:31.350 align:start position:0%
a log n operation right so add
or<00:06:27.919><c> remove</c><00:06:28.800><c> is</c><00:06:29.039><c> log</c><00:06:29.520><c> n</c><00:06:30.400><c> and</c><00:06:30.639><c> there</c><00:06:30.880><c> happen</c><00:06:31.199><c> to</c>

00:06:31.350 --> 00:06:31.360 align:start position:0%
or remove is log n and there happen to
 

00:06:31.360 --> 00:06:31.670 align:start position:0%
or remove is log n and there happen to
be

00:06:31.670 --> 00:06:31.680 align:start position:0%
be
 

00:06:31.680 --> 00:06:34.790 align:start position:0%
be
two<00:06:32.000><c> kinds</c><00:06:32.319><c> of</c><00:06:32.479><c> heaps</c><00:06:32.960><c> a</c><00:06:33.199><c> max</c><00:06:33.600><c> heap</c><00:06:34.400><c> or</c>

00:06:34.790 --> 00:06:34.800 align:start position:0%
two kinds of heaps a max heap or
 

00:06:34.800 --> 00:06:38.150 align:start position:0%
two kinds of heaps a max heap or
a<00:06:35.280><c> min</c><00:06:35.759><c> heap</c><00:06:36.479><c> and</c><00:06:36.960><c> the</c><00:06:37.199><c> thing</c><00:06:37.440><c> about</c><00:06:37.759><c> these</c>

00:06:38.150 --> 00:06:38.160 align:start position:0%
a min heap and the thing about these
 

00:06:38.160 --> 00:06:41.749 align:start position:0%
a min heap and the thing about these
is<00:06:38.319><c> so</c><00:06:38.560><c> for</c><00:06:38.800><c> a</c><00:06:39.039><c> max</c><00:06:39.440><c> heap</c><00:06:40.080><c> finding</c><00:06:40.560><c> the</c><00:06:40.800><c> max</c>

00:06:41.749 --> 00:06:41.759 align:start position:0%
is so for a max heap finding the max
 

00:06:41.759 --> 00:06:45.189 align:start position:0%
is so for a max heap finding the max
in<00:06:42.000><c> this</c><00:06:42.319><c> list</c><00:06:42.720><c> so</c><00:06:43.120><c> find</c><00:06:43.600><c> max</c><00:06:44.240><c> in</c><00:06:44.400><c> a</c><00:06:44.560><c> max</c><00:06:44.880><c> heap</c>

00:06:45.189 --> 00:06:45.199 align:start position:0%
in this list so find max in a max heap
 

00:06:45.199 --> 00:06:46.550 align:start position:0%
in this list so find max in a max heap
is<00:06:45.440><c> always</c><00:06:45.840><c> going</c><00:06:46.000><c> to</c><00:06:46.240><c> be</c>

00:06:46.550 --> 00:06:46.560 align:start position:0%
is always going to be
 

00:06:46.560 --> 00:06:49.990 align:start position:0%
is always going to be
o<00:06:47.039><c> of</c><00:06:47.680><c> one</c><00:06:48.400><c> so</c><00:06:48.639><c> that's</c><00:06:49.039><c> the</c><00:06:49.199><c> advantage</c>

00:06:49.990 --> 00:06:50.000 align:start position:0%
o of one so that's the advantage
 

00:06:50.000 --> 00:06:52.070 align:start position:0%
o of one so that's the advantage
we<00:06:50.160><c> know</c><00:06:50.319><c> that</c><00:06:50.639><c> finding</c><00:06:51.039><c> the</c><00:06:51.199><c> max</c><00:06:51.680><c> in</c><00:06:51.840><c> a</c>

00:06:52.070 --> 00:06:52.080 align:start position:0%
we know that finding the max in a
 

00:06:52.080 --> 00:06:53.029 align:start position:0%
we know that finding the max in a
regular<00:06:52.639><c> list</c>

00:06:53.029 --> 00:06:53.039 align:start position:0%
regular list
 

00:06:53.039 --> 00:06:55.189 align:start position:0%
regular list
is<00:06:53.280><c> o</c><00:06:53.680><c> of</c><00:06:53.919><c> n</c><00:06:54.160><c> because</c><00:06:54.319><c> you</c><00:06:54.479><c> have</c><00:06:54.560><c> to</c><00:06:54.720><c> search</c><00:06:55.039><c> the</c>

00:06:55.189 --> 00:06:55.199 align:start position:0%
is o of n because you have to search the
 

00:06:55.199 --> 00:06:56.150 align:start position:0%
is o of n because you have to search the
entire<00:06:55.599><c> list</c>

00:06:56.150 --> 00:06:56.160 align:start position:0%
entire list
 

00:06:56.160 --> 00:06:58.710 align:start position:0%
entire list
but<00:06:56.319><c> with</c><00:06:56.560><c> a</c><00:06:56.639><c> heap</c><00:06:57.199><c> we</c><00:06:57.360><c> can</c><00:06:57.520><c> find</c><00:06:57.759><c> the</c><00:06:57.919><c> max</c><00:06:58.400><c> in</c>

00:06:58.710 --> 00:06:58.720 align:start position:0%
but with a heap we can find the max in
 

00:06:58.720 --> 00:07:00.070 align:start position:0%
but with a heap we can find the max in
constant<00:06:59.360><c> time</c>

00:07:00.070 --> 00:07:00.080 align:start position:0%
constant time
 

00:07:00.080 --> 00:07:02.150 align:start position:0%
constant time
similarly<00:07:00.639><c> with</c><00:07:00.880><c> a</c><00:07:01.039><c> min</c><00:07:01.280><c> heap</c><00:07:01.599><c> if</c><00:07:01.680><c> you</c><00:07:01.759><c> want</c><00:07:02.000><c> to</c>

00:07:02.150 --> 00:07:02.160 align:start position:0%
similarly with a min heap if you want to
 

00:07:02.160 --> 00:07:03.749 align:start position:0%
similarly with a min heap if you want to
find<00:07:02.560><c> the</c><00:07:02.800><c> min</c>

00:07:03.749 --> 00:07:03.759 align:start position:0%
find the min
 

00:07:03.759 --> 00:07:06.870 align:start position:0%
find the min
that's<00:07:04.160><c> also</c><00:07:04.720><c> an</c><00:07:05.039><c> o</c><00:07:05.280><c> of</c><00:07:05.520><c> one</c><00:07:05.919><c> operation</c>

00:07:06.870 --> 00:07:06.880 align:start position:0%
that's also an o of one operation
 

00:07:06.880 --> 00:07:09.510 align:start position:0%
that's also an o of one operation
so<00:07:07.120><c> with</c><00:07:07.360><c> that</c><00:07:07.599><c> being</c><00:07:08.000><c> said</c><00:07:08.319><c> the</c><00:07:08.639><c> small</c><00:07:09.199><c> heap</c>

00:07:09.510 --> 00:07:09.520 align:start position:0%
so with that being said the small heap
 

00:07:09.520 --> 00:07:11.510 align:start position:0%
so with that being said the small heap
is<00:07:09.680><c> going</c><00:07:09.919><c> to</c><00:07:10.080><c> be</c><00:07:10.319><c> implemented</c><00:07:10.960><c> as</c><00:07:11.199><c> a</c>

00:07:11.510 --> 00:07:11.520 align:start position:0%
is going to be implemented as a
 

00:07:11.520 --> 00:07:14.870 align:start position:0%
is going to be implemented as a
max<00:07:12.080><c> heap</c><00:07:12.800><c> and</c><00:07:12.960><c> the</c><00:07:13.280><c> reason</c><00:07:13.919><c> we</c><00:07:14.160><c> have</c><00:07:14.319><c> a</c><00:07:14.560><c> max</c>

00:07:14.870 --> 00:07:14.880 align:start position:0%
max heap and the reason we have a max
 

00:07:14.880 --> 00:07:16.390 align:start position:0%
max heap and the reason we have a max
heap<00:07:15.120><c> and</c><00:07:15.199><c> not</c><00:07:15.440><c> a</c><00:07:15.599><c> min</c><00:07:15.759><c> heap</c><00:07:16.000><c> it's</c><00:07:16.160><c> kind</c><00:07:16.319><c> of</c>

00:07:16.390 --> 00:07:16.400 align:start position:0%
heap and not a min heap it's kind of
 

00:07:16.400 --> 00:07:17.990 align:start position:0%
heap and not a min heap it's kind of
counterintuitive<00:07:17.199><c> right</c><00:07:17.360><c> if</c><00:07:17.520><c> this</c><00:07:17.680><c> is</c><00:07:17.759><c> the</c>

00:07:17.990 --> 00:07:18.000 align:start position:0%
counterintuitive right if this is the
 

00:07:18.000 --> 00:07:19.510 align:start position:0%
counterintuitive right if this is the
small<00:07:18.319><c> heap</c><00:07:18.639><c> why</c><00:07:18.800><c> are</c><00:07:18.880><c> we</c><00:07:19.039><c> using</c><00:07:19.280><c> a</c>

00:07:19.510 --> 00:07:19.520 align:start position:0%
small heap why are we using a
 

00:07:19.520 --> 00:07:21.990 align:start position:0%
small heap why are we using a
max<00:07:19.840><c> heap</c><00:07:20.400><c> and</c><00:07:21.039><c> that</c><00:07:21.199><c> for</c><00:07:21.360><c> this</c><00:07:21.520><c> one</c><00:07:21.759><c> we're</c>

00:07:21.990 --> 00:07:22.000 align:start position:0%
max heap and that for this one we're
 

00:07:22.000 --> 00:07:22.950 align:start position:0%
max heap and that for this one we're
actually<00:07:22.240><c> going</c><00:07:22.319><c> to</c><00:07:22.400><c> have</c><00:07:22.639><c> a</c>

00:07:22.950 --> 00:07:22.960 align:start position:0%
actually going to have a
 

00:07:22.960 --> 00:07:26.070 align:start position:0%
actually going to have a
min<00:07:23.280><c> heap</c><00:07:24.400><c> instead</c><00:07:24.800><c> of</c><00:07:24.960><c> a</c><00:07:25.120><c> max</c><00:07:25.440><c> heap</c>

00:07:26.070 --> 00:07:26.080 align:start position:0%
min heap instead of a max heap
 

00:07:26.080 --> 00:07:28.230 align:start position:0%
min heap instead of a max heap
and<00:07:26.240><c> the</c><00:07:26.479><c> reason</c><00:07:26.960><c> is</c><00:07:27.199><c> what</c><00:07:27.440><c> if</c><00:07:27.599><c> we</c><00:07:27.759><c> had</c>

00:07:28.230 --> 00:07:28.240 align:start position:0%
and the reason is what if we had
 

00:07:28.240 --> 00:07:29.350 align:start position:0%
and the reason is what if we had
elements<00:07:28.800><c> to</c>

00:07:29.350 --> 00:07:29.360 align:start position:0%
elements to
 

00:07:29.360 --> 00:07:32.790 align:start position:0%
elements to
these<00:07:30.080><c> heaps</c><00:07:30.479><c> such</c><00:07:30.720><c> as</c><00:07:31.520><c> right</c><00:07:31.759><c> what</c><00:07:31.919><c> if</c><00:07:32.160><c> we</c><00:07:32.319><c> had</c>

00:07:32.790 --> 00:07:32.800 align:start position:0%
these heaps such as right what if we had
 

00:07:32.800 --> 00:07:34.790 align:start position:0%
these heaps such as right what if we had
these<00:07:33.120><c> elements</c><00:07:33.919><c> in</c><00:07:34.160><c> each</c><00:07:34.319><c> of</c><00:07:34.400><c> the</c><00:07:34.560><c> heaps</c>

00:07:34.790 --> 00:07:34.800 align:start position:0%
these elements in each of the heaps
 

00:07:34.800 --> 00:07:36.790 align:start position:0%
these elements in each of the heaps
right<00:07:34.960><c> we</c><00:07:35.120><c> see</c><00:07:35.360><c> that</c><00:07:35.599><c> all</c><00:07:35.840><c> elements</c><00:07:36.400><c> here</c><00:07:36.639><c> are</c>

00:07:36.790 --> 00:07:36.800 align:start position:0%
right we see that all elements here are
 

00:07:36.800 --> 00:07:38.710 align:start position:0%
right we see that all elements here are
less<00:07:37.039><c> than</c><00:07:37.199><c> or</c><00:07:37.360><c> equal</c><00:07:37.759><c> to</c><00:07:37.919><c> the</c><00:07:38.000><c> elements</c><00:07:38.560><c> in</c>

00:07:38.710 --> 00:07:38.720 align:start position:0%
less than or equal to the elements in
 

00:07:38.720 --> 00:07:39.189 align:start position:0%
less than or equal to the elements in
the

00:07:39.189 --> 00:07:39.199 align:start position:0%
the
 

00:07:39.199 --> 00:07:41.350 align:start position:0%
the
right<00:07:39.520><c> heap</c><00:07:40.000><c> but</c><00:07:40.319><c> if</c><00:07:40.479><c> you</c><00:07:40.639><c> actually</c><00:07:41.039><c> want</c><00:07:41.199><c> to</c>

00:07:41.350 --> 00:07:41.360 align:start position:0%
right heap but if you actually want to
 

00:07:41.360 --> 00:07:42.550 align:start position:0%
right heap but if you actually want to
find<00:07:41.680><c> the</c><00:07:42.000><c> median</c>

00:07:42.550 --> 00:07:42.560 align:start position:0%
find the median
 

00:07:42.560 --> 00:07:45.589 align:start position:0%
find the median
of<00:07:43.039><c> these</c><00:07:43.360><c> we</c><00:07:43.520><c> know</c><00:07:43.759><c> we</c><00:07:44.000><c> need</c><00:07:44.160><c> to</c><00:07:44.240><c> get</c><00:07:44.639><c> the</c><00:07:45.120><c> max</c>

00:07:45.589 --> 00:07:45.599 align:start position:0%
of these we know we need to get the max
 

00:07:45.599 --> 00:07:48.309 align:start position:0%
of these we know we need to get the max
value<00:07:46.319><c> in</c><00:07:46.400><c> the</c><00:07:46.560><c> small</c><00:07:46.879><c> heap</c><00:07:47.199><c> right</c><00:07:47.520><c> two</c><00:07:48.000><c> and</c><00:07:48.160><c> we</c>

00:07:48.309 --> 00:07:48.319 align:start position:0%
value in the small heap right two and we
 

00:07:48.319 --> 00:07:49.189 align:start position:0%
value in the small heap right two and we
need<00:07:48.479><c> to</c><00:07:48.639><c> get</c><00:07:48.800><c> the</c>

00:07:49.189 --> 00:07:49.199 align:start position:0%
need to get the
 

00:07:49.199 --> 00:07:52.309 align:start position:0%
need to get the
min<00:07:49.599><c> value</c><00:07:50.479><c> in</c><00:07:50.879><c> the</c><00:07:51.039><c> large</c><00:07:51.360><c> heap</c><00:07:51.680><c> three</c>

00:07:52.309 --> 00:07:52.319 align:start position:0%
min value in the large heap three
 

00:07:52.319 --> 00:07:54.390 align:start position:0%
min value in the large heap three
add<00:07:52.560><c> them</c><00:07:52.720><c> together</c><00:07:53.280><c> and</c><00:07:53.360><c> then</c><00:07:53.520><c> divide</c><00:07:53.919><c> by</c><00:07:54.160><c> two</c>

00:07:54.390 --> 00:07:54.400 align:start position:0%
add them together and then divide by two
 

00:07:54.400 --> 00:07:55.510 align:start position:0%
add them together and then divide by two
right<00:07:54.560><c> that's</c><00:07:54.800><c> how</c><00:07:54.960><c> we're</c><00:07:55.039><c> going</c><00:07:55.120><c> to</c><00:07:55.199><c> get</c><00:07:55.360><c> the</c>

00:07:55.510 --> 00:07:55.520 align:start position:0%
right that's how we're going to get the
 

00:07:55.520 --> 00:07:57.430 align:start position:0%
right that's how we're going to get the
median<00:07:56.000><c> so</c><00:07:56.240><c> that's</c><00:07:56.400><c> why</c><00:07:56.560><c> we</c><00:07:56.720><c> need</c><00:07:56.879><c> the</c><00:07:57.120><c> min</c>

00:07:57.430 --> 00:07:57.440 align:start position:0%
median so that's why we need the min
 

00:07:57.440 --> 00:07:58.070 align:start position:0%
median so that's why we need the min
heap<00:07:57.680><c> right</c>

00:07:58.070 --> 00:07:58.080 align:start position:0%
heap right
 

00:07:58.080 --> 00:08:00.150 align:start position:0%
heap right
we<00:07:58.240><c> always</c><00:07:58.560><c> want</c><00:07:58.800><c> the</c><00:07:59.039><c> minimum</c><00:07:59.520><c> value</c><00:07:59.919><c> from</c>

00:08:00.150 --> 00:08:00.160 align:start position:0%
we always want the minimum value from
 

00:08:00.160 --> 00:08:02.230 align:start position:0%
we always want the minimum value from
our<00:08:00.319><c> large</c><00:08:00.639><c> heap</c><00:08:01.039><c> and</c><00:08:01.280><c> we</c><00:08:01.440><c> always</c><00:08:01.680><c> want</c><00:08:01.919><c> the</c>

00:08:02.230 --> 00:08:02.240 align:start position:0%
our large heap and we always want the
 

00:08:02.240 --> 00:08:05.510 align:start position:0%
our large heap and we always want the
max<00:08:02.720><c> value</c><00:08:03.520><c> from</c><00:08:04.080><c> our</c><00:08:04.400><c> small</c><00:08:04.879><c> heap</c><00:08:05.199><c> and</c><00:08:05.360><c> of</c>

00:08:05.510 --> 00:08:05.520 align:start position:0%
max value from our small heap and of
 

00:08:05.520 --> 00:08:05.990 align:start position:0%
max value from our small heap and of
course

00:08:05.990 --> 00:08:06.000 align:start position:0%
course
 

00:08:06.000 --> 00:08:08.230 align:start position:0%
course
finding<00:08:06.479><c> the</c><00:08:06.639><c> median</c><00:08:07.120><c> like</c><00:08:07.440><c> this</c><00:08:07.680><c> way</c><00:08:08.000><c> right</c>

00:08:08.230 --> 00:08:08.240 align:start position:0%
finding the median like this way right
 

00:08:08.240 --> 00:08:09.430 align:start position:0%
finding the median like this way right
getting<00:08:08.560><c> the</c>

00:08:09.430 --> 00:08:09.440 align:start position:0%
getting the
 

00:08:09.440 --> 00:08:11.189 align:start position:0%
getting the
value<00:08:09.919><c> getting</c><00:08:10.240><c> the</c><00:08:10.319><c> value</c><00:08:10.639><c> from</c><00:08:10.800><c> each</c><00:08:11.039><c> of</c><00:08:11.120><c> the</c>

00:08:11.189 --> 00:08:11.199 align:start position:0%
value getting the value from each of the
 

00:08:11.199 --> 00:08:13.189 align:start position:0%
value getting the value from each of the
heaps<00:08:11.840><c> it</c><00:08:12.080><c> only</c><00:08:12.479><c> works</c>

00:08:13.189 --> 00:08:13.199 align:start position:0%
heaps it only works
 

00:08:13.199 --> 00:08:15.589 align:start position:0%
heaps it only works
if<00:08:13.759><c> the</c><00:08:14.160><c> size</c><00:08:14.639><c> of</c><00:08:14.800><c> the</c><00:08:14.960><c> heaps</c><00:08:15.440><c> is</c>

00:08:15.589 --> 00:08:15.599 align:start position:0%
if the size of the heaps is
 

00:08:15.599 --> 00:08:17.589 align:start position:0%
if the size of the heaps is
approximately<00:08:16.479><c> the</c><00:08:16.720><c> same</c><00:08:17.039><c> right</c><00:08:17.280><c> if</c>

00:08:17.589 --> 00:08:17.599 align:start position:0%
approximately the same right if
 

00:08:17.599 --> 00:08:19.909 align:start position:0%
approximately the same right if
in<00:08:17.680><c> this</c><00:08:17.840><c> case</c><00:08:18.080><c> they're</c><00:08:18.400><c> equal</c><00:08:19.199><c> but</c><00:08:19.599><c> what</c><00:08:19.759><c> if</c>

00:08:19.909 --> 00:08:19.919 align:start position:0%
in this case they're equal but what if
 

00:08:19.919 --> 00:08:21.029 align:start position:0%
in this case they're equal but what if
we<00:08:20.080><c> had</c><00:08:20.400><c> a</c>

00:08:21.029 --> 00:08:21.039 align:start position:0%
we had a
 

00:08:21.039 --> 00:08:22.869 align:start position:0%
we had a
third<00:08:21.520><c> element</c><00:08:22.000><c> in</c><00:08:22.160><c> this</c><00:08:22.319><c> heap</c><00:08:22.479><c> what</c><00:08:22.639><c> if</c><00:08:22.800><c> we</c>

00:08:22.869 --> 00:08:22.879 align:start position:0%
third element in this heap what if we
 

00:08:22.879 --> 00:08:25.029 align:start position:0%
third element in this heap what if we
had<00:08:23.039><c> a</c><00:08:23.199><c> three</c><00:08:23.520><c> well</c><00:08:23.919><c> they're</c><00:08:24.160><c> approximately</c>

00:08:25.029 --> 00:08:25.039 align:start position:0%
had a three well they're approximately
 

00:08:25.039 --> 00:08:26.550 align:start position:0%
had a three well they're approximately
equal<00:08:25.360><c> right</c><00:08:25.520><c> but</c><00:08:25.680><c> you</c><00:08:25.759><c> can</c><00:08:25.840><c> see</c><00:08:26.000><c> the</c><00:08:26.319><c> length</c>

00:08:26.550 --> 00:08:26.560 align:start position:0%
equal right but you can see the length
 

00:08:26.560 --> 00:08:27.189 align:start position:0%
equal right but you can see the length
of<00:08:26.720><c> this</c><00:08:26.879><c> one</c>

00:08:27.189 --> 00:08:27.199 align:start position:0%
of this one
 

00:08:27.199 --> 00:08:29.029 align:start position:0%
of this one
is<00:08:27.440><c> greater</c><00:08:27.919><c> right</c><00:08:28.160><c> but</c><00:08:28.319><c> the</c><00:08:28.479><c> difference</c><00:08:28.879><c> in</c>

00:08:29.029 --> 00:08:29.039 align:start position:0%
is greater right but the difference in
 

00:08:29.039 --> 00:08:31.029 align:start position:0%
is greater right but the difference in
length<00:08:29.440><c> is</c><00:08:29.599><c> one</c><00:08:29.919><c> so</c><00:08:30.080><c> they're</c><00:08:30.319><c> approximately</c>

00:08:31.029 --> 00:08:31.039 align:start position:0%
length is one so they're approximately
 

00:08:31.039 --> 00:08:31.589 align:start position:0%
length is one so they're approximately
equal

00:08:31.589 --> 00:08:31.599 align:start position:0%
equal
 

00:08:31.599 --> 00:08:33.269 align:start position:0%
equal
in<00:08:31.759><c> that</c><00:08:32.000><c> case</c><00:08:32.320><c> how</c><00:08:32.560><c> are</c><00:08:32.640><c> we</c><00:08:32.800><c> going</c><00:08:32.880><c> to</c><00:08:33.039><c> find</c>

00:08:33.269 --> 00:08:33.279 align:start position:0%
in that case how are we going to find
 

00:08:33.279 --> 00:08:35.670 align:start position:0%
in that case how are we going to find
the<00:08:33.440><c> median</c><00:08:34.240><c> well</c><00:08:34.479><c> since</c><00:08:34.800><c> we</c><00:08:34.959><c> know</c><00:08:35.120><c> that</c><00:08:35.360><c> the</c>

00:08:35.670 --> 00:08:35.680 align:start position:0%
the median well since we know that the
 

00:08:35.680 --> 00:08:37.750 align:start position:0%
the median well since we know that the
length<00:08:36.080><c> of</c><00:08:36.320><c> this</c><00:08:36.640><c> heap</c><00:08:36.959><c> is</c><00:08:37.120><c> bigger</c><00:08:37.360><c> than</c><00:08:37.519><c> the</c>

00:08:37.750 --> 00:08:37.760 align:start position:0%
length of this heap is bigger than the
 

00:08:37.760 --> 00:08:39.110 align:start position:0%
length of this heap is bigger than the
length<00:08:38.159><c> of</c><00:08:38.320><c> this</c><00:08:38.640><c> heap</c>

00:08:39.110 --> 00:08:39.120 align:start position:0%
length of this heap
 

00:08:39.120 --> 00:08:41.269 align:start position:0%
length of this heap
we<00:08:39.360><c> know</c><00:08:39.519><c> that</c><00:08:39.680><c> we</c><00:08:39.839><c> have</c><00:08:40.080><c> an</c><00:08:40.479><c> odd</c><00:08:40.800><c> number</c><00:08:41.039><c> of</c>

00:08:41.269 --> 00:08:41.279 align:start position:0%
we know that we have an odd number of
 

00:08:41.279 --> 00:08:43.029 align:start position:0%
we know that we have an odd number of
elements<00:08:41.680><c> in</c><00:08:41.760><c> that</c><00:08:41.919><c> case</c><00:08:42.159><c> right</c><00:08:42.399><c> if</c><00:08:42.560><c> one</c><00:08:42.719><c> heap</c>

00:08:43.029 --> 00:08:43.039 align:start position:0%
elements in that case right if one heap
 

00:08:43.039 --> 00:08:44.470 align:start position:0%
elements in that case right if one heap
is<00:08:43.200><c> bigger</c><00:08:43.440><c> than</c><00:08:43.680><c> the</c><00:08:43.839><c> other</c><00:08:44.080><c> there's</c>

00:08:44.470 --> 00:08:44.480 align:start position:0%
is bigger than the other there's
 

00:08:44.480 --> 00:08:46.710 align:start position:0%
is bigger than the other there's
always<00:08:44.800><c> going</c><00:08:44.959><c> to</c><00:08:45.120><c> be</c><00:08:45.279><c> an</c><00:08:45.519><c> odd</c><00:08:45.839><c> number</c><00:08:46.399><c> and</c><00:08:46.560><c> in</c>

00:08:46.710 --> 00:08:46.720 align:start position:0%
always going to be an odd number and in
 

00:08:46.720 --> 00:08:48.949 align:start position:0%
always going to be an odd number and in
that<00:08:46.959><c> case</c><00:08:47.360><c> we're</c><00:08:47.600><c> going</c><00:08:47.839><c> to</c><00:08:48.080><c> want</c><00:08:48.320><c> to</c><00:08:48.480><c> get</c><00:08:48.720><c> the</c>

00:08:48.949 --> 00:08:48.959 align:start position:0%
that case we're going to want to get the
 

00:08:48.959 --> 00:08:49.750 align:start position:0%
that case we're going to want to get the
value

00:08:49.750 --> 00:08:49.760 align:start position:0%
value
 

00:08:49.760 --> 00:08:52.310 align:start position:0%
value
from<00:08:50.240><c> this</c><00:08:50.480><c> heap</c><00:08:50.720><c> so</c><00:08:50.880><c> if</c><00:08:51.200><c> the</c><00:08:51.519><c> length</c><00:08:51.920><c> of</c><00:08:52.080><c> this</c>

00:08:52.310 --> 00:08:52.320 align:start position:0%
from this heap so if the length of this
 

00:08:52.320 --> 00:08:52.790 align:start position:0%
from this heap so if the length of this
heap

00:08:52.790 --> 00:08:52.800 align:start position:0%
heap
 

00:08:52.800 --> 00:08:54.949 align:start position:0%
heap
is<00:08:52.959><c> bigger</c><00:08:53.440><c> we're</c><00:08:53.680><c> going</c><00:08:53.760><c> to</c><00:08:53.920><c> want</c><00:08:54.080><c> to</c><00:08:54.240><c> get</c><00:08:54.640><c> the</c>

00:08:54.949 --> 00:08:54.959 align:start position:0%
is bigger we're going to want to get the
 

00:08:54.959 --> 00:08:56.150 align:start position:0%
is bigger we're going to want to get the
max<00:08:55.760><c> from</c>

00:08:56.150 --> 00:08:56.160 align:start position:0%
max from
 

00:08:56.160 --> 00:08:58.389 align:start position:0%
max from
here<00:08:56.800><c> we're</c><00:08:56.959><c> going</c><00:08:57.040><c> to</c><00:08:57.120><c> want</c><00:08:57.279><c> to</c><00:08:57.360><c> get</c><00:08:57.519><c> the</c><00:08:57.839><c> max</c>

00:08:58.389 --> 00:08:58.399 align:start position:0%
here we're going to want to get the max
 

00:08:58.399 --> 00:09:00.230 align:start position:0%
here we're going to want to get the max
value<00:08:58.880><c> from</c><00:08:59.120><c> this</c><00:08:59.360><c> heap</c><00:08:59.680><c> and</c><00:08:59.760><c> that's</c><00:09:00.000><c> going</c><00:09:00.160><c> to</c>

00:09:00.230 --> 00:09:00.240 align:start position:0%
value from this heap and that's going to
 

00:09:00.240 --> 00:09:00.550 align:start position:0%
value from this heap and that's going to
be

00:09:00.550 --> 00:09:00.560 align:start position:0%
be
 

00:09:00.560 --> 00:09:03.030 align:start position:0%
be
3<00:09:01.040><c> and</c><00:09:01.120><c> we</c><00:09:01.360><c> know</c><00:09:01.600><c> in</c><00:09:01.760><c> this</c><00:09:01.920><c> case</c><00:09:02.160><c> 3</c><00:09:02.560><c> happens</c><00:09:02.880><c> to</c>

00:09:03.030 --> 00:09:03.040 align:start position:0%
3 and we know in this case 3 happens to
 

00:09:03.040 --> 00:09:04.470 align:start position:0%
3 and we know in this case 3 happens to
be<00:09:03.120><c> the</c><00:09:03.279><c> median</c><00:09:03.680><c> right</c><00:09:03.920><c> if</c><00:09:04.080><c> you</c>

00:09:04.470 --> 00:09:04.480 align:start position:0%
be the median right if you
 

00:09:04.480 --> 00:09:06.310 align:start position:0%
be the median right if you
because<00:09:04.800><c> look</c><00:09:05.040><c> at</c><00:09:05.120><c> them</c><00:09:05.440><c> these</c><00:09:05.600><c> values</c><00:09:06.080><c> are</c><00:09:06.160><c> in</c>

00:09:06.310 --> 00:09:06.320 align:start position:0%
because look at them these values are in
 

00:09:06.320 --> 00:09:08.470 align:start position:0%
because look at them these values are in
sorted<00:09:06.720><c> order</c><00:09:07.279><c> we</c><00:09:07.440><c> get</c><00:09:07.600><c> rid</c><00:09:07.760><c> of</c><00:09:07.920><c> these</c><00:09:08.160><c> two</c><00:09:08.399><c> we</c>

00:09:08.470 --> 00:09:08.480 align:start position:0%
sorted order we get rid of these two we
 

00:09:08.480 --> 00:09:09.750 align:start position:0%
sorted order we get rid of these two we
get<00:09:08.640><c> rid</c><00:09:08.800><c> of</c><00:09:08.959><c> these</c><00:09:09.200><c> through</c>

00:09:09.750 --> 00:09:09.760 align:start position:0%
get rid of these through
 

00:09:09.760 --> 00:09:12.150 align:start position:0%
get rid of these through
two<00:09:10.080><c> the</c><00:09:10.240><c> middle</c><00:09:10.480><c> value</c><00:09:10.959><c> is</c><00:09:11.120><c> three</c><00:09:11.920><c> and</c><00:09:12.080><c> i'm</c>

00:09:12.150 --> 00:09:12.160 align:start position:0%
two the middle value is three and i'm
 

00:09:12.160 --> 00:09:13.829 align:start position:0%
two the middle value is three and i'm
not<00:09:12.320><c> going</c><00:09:12.480><c> to</c><00:09:12.560><c> walk</c><00:09:12.800><c> you</c><00:09:13.040><c> through</c><00:09:13.279><c> this</c><00:09:13.519><c> case</c>

00:09:13.829 --> 00:09:13.839 align:start position:0%
not going to walk you through this case
 

00:09:13.839 --> 00:09:14.310 align:start position:0%
not going to walk you through this case
but

00:09:14.310 --> 00:09:14.320 align:start position:0%
but
 

00:09:14.320 --> 00:09:16.470 align:start position:0%
but
let's<00:09:14.560><c> just</c><00:09:14.720><c> say</c><00:09:14.959><c> imagine</c><00:09:15.360><c> we</c><00:09:15.440><c> had</c><00:09:15.600><c> a</c><00:09:15.760><c> two</c><00:09:16.160><c> over</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
let's just say imagine we had a two over
 

00:09:16.480 --> 00:09:18.790 align:start position:0%
let's just say imagine we had a two over
here<00:09:17.120><c> the</c><00:09:17.360><c> exact</c><00:09:17.680><c> same</c><00:09:17.920><c> thing</c><00:09:18.160><c> would</c><00:09:18.399><c> happen</c>

00:09:18.790 --> 00:09:18.800 align:start position:0%
here the exact same thing would happen
 

00:09:18.800 --> 00:09:20.550 align:start position:0%
here the exact same thing would happen
right<00:09:18.959><c> we</c><00:09:19.120><c> would</c><00:09:19.279><c> get</c><00:09:19.440><c> the</c><00:09:19.680><c> min</c><00:09:19.920><c> value</c><00:09:20.320><c> from</c>

00:09:20.550 --> 00:09:20.560 align:start position:0%
right we would get the min value from
 

00:09:20.560 --> 00:09:22.230 align:start position:0%
right we would get the min value from
here<00:09:21.120><c> we</c><00:09:21.279><c> get</c><00:09:21.440><c> the</c><00:09:21.600><c> two</c>

00:09:22.230 --> 00:09:22.240 align:start position:0%
here we get the two
 

00:09:22.240 --> 00:09:24.310 align:start position:0%
here we get the two
and<00:09:22.399><c> notice</c><00:09:22.880><c> that</c><00:09:23.120><c> look</c><00:09:23.360><c> the</c><00:09:23.600><c> max</c><00:09:23.920><c> value</c><00:09:24.160><c> from</c>

00:09:24.310 --> 00:09:24.320 align:start position:0%
and notice that look the max value from
 

00:09:24.320 --> 00:09:25.990 align:start position:0%
and notice that look the max value from
here<00:09:24.560><c> and</c><00:09:24.640><c> the</c><00:09:24.800><c> min</c><00:09:25.040><c> value</c><00:09:25.279><c> from</c><00:09:25.519><c> here</c><00:09:25.760><c> are</c>

00:09:25.990 --> 00:09:26.000 align:start position:0%
here and the min value from here are
 

00:09:26.000 --> 00:09:27.910 align:start position:0%
here and the min value from here are
equal<00:09:26.399><c> right</c><00:09:26.560><c> that's</c><00:09:26.800><c> why</c><00:09:26.959><c> i</c><00:09:27.200><c> say</c>

00:09:27.910 --> 00:09:27.920 align:start position:0%
equal right that's why i say
 

00:09:27.920 --> 00:09:30.630 align:start position:0%
equal right that's why i say
every<00:09:28.240><c> value</c><00:09:29.279><c> in</c><00:09:29.440><c> here</c><00:09:29.680><c> has</c><00:09:29.760><c> to</c><00:09:29.920><c> be</c><00:09:30.080><c> less</c><00:09:30.320><c> than</c>

00:09:30.630 --> 00:09:30.640 align:start position:0%
every value in here has to be less than
 

00:09:30.640 --> 00:09:32.630 align:start position:0%
every value in here has to be less than
or<00:09:30.880><c> equal</c><00:09:31.279><c> it's</c><00:09:31.519><c> possible</c><00:09:32.080><c> that</c><00:09:32.240><c> they</c><00:09:32.399><c> are</c>

00:09:32.630 --> 00:09:32.640 align:start position:0%
or equal it's possible that they are
 

00:09:32.640 --> 00:09:33.190 align:start position:0%
or equal it's possible that they are
equal

00:09:33.190 --> 00:09:33.200 align:start position:0%
equal
 

00:09:33.200 --> 00:09:34.870 align:start position:0%
equal
okay<00:09:33.440><c> so</c><00:09:33.600><c> now</c><00:09:33.760><c> let</c><00:09:33.920><c> me</c><00:09:34.080><c> just</c><00:09:34.240><c> go</c><00:09:34.399><c> through</c><00:09:34.640><c> a</c>

00:09:34.870 --> 00:09:34.880 align:start position:0%
okay so now let me just go through a
 

00:09:34.880 --> 00:09:36.949 align:start position:0%
okay so now let me just go through a
quick<00:09:35.200><c> walkthrough</c><00:09:35.760><c> of</c><00:09:35.920><c> this</c><00:09:36.160><c> code</c><00:09:36.480><c> again</c>

00:09:36.949 --> 00:09:36.959 align:start position:0%
quick walkthrough of this code again
 

00:09:36.959 --> 00:09:39.430 align:start position:0%
quick walkthrough of this code again
so<00:09:37.680><c> what</c><00:09:37.920><c> we're</c><00:09:38.080><c> gonna</c><00:09:38.320><c> do</c><00:09:38.800><c> add</c><00:09:39.040><c> the</c><00:09:39.120><c> first</c>

00:09:39.430 --> 00:09:39.440 align:start position:0%
so what we're gonna do add the first
 

00:09:39.440 --> 00:09:41.030 align:start position:0%
so what we're gonna do add the first
element<00:09:39.839><c> which</c><00:09:40.000><c> is</c><00:09:40.160><c> a</c><00:09:40.320><c> three</c>

00:09:41.030 --> 00:09:41.040 align:start position:0%
element which is a three
 

00:09:41.040 --> 00:09:42.870 align:start position:0%
element which is a three
which<00:09:41.440><c> heap</c><00:09:41.760><c> are</c><00:09:41.839><c> we</c><00:09:42.000><c> gonna</c><00:09:42.240><c> add</c><00:09:42.480><c> it</c><00:09:42.560><c> to</c><00:09:42.800><c> in</c>

00:09:42.870 --> 00:09:42.880 align:start position:0%
which heap are we gonna add it to in
 

00:09:42.880 --> 00:09:44.550 align:start position:0%
which heap are we gonna add it to in
this<00:09:43.040><c> case</c><00:09:43.360><c> it</c><00:09:43.440><c> doesn't</c><00:09:43.760><c> really</c><00:09:44.080><c> matter</c><00:09:44.399><c> so</c>

00:09:44.550 --> 00:09:44.560 align:start position:0%
this case it doesn't really matter so
 

00:09:44.560 --> 00:09:46.710 align:start position:0%
this case it doesn't really matter so
what<00:09:44.720><c> i'm</c><00:09:44.880><c> gonna</c><00:09:45.040><c> do</c><00:09:45.279><c> is</c><00:09:45.440><c> just</c><00:09:45.680><c> by</c><00:09:45.920><c> default</c><00:09:46.480><c> add</c>

00:09:46.710 --> 00:09:46.720 align:start position:0%
what i'm gonna do is just by default add
 

00:09:46.720 --> 00:09:48.470 align:start position:0%
what i'm gonna do is just by default add
it<00:09:46.880><c> to</c><00:09:47.040><c> the</c><00:09:47.360><c> small</c><00:09:47.839><c> heap</c>

00:09:48.470 --> 00:09:48.480 align:start position:0%
it to the small heap
 

00:09:48.480 --> 00:09:51.110 align:start position:0%
it to the small heap
so<00:09:48.640><c> let's</c><00:09:48.880><c> add</c><00:09:49.279><c> three</c><00:09:49.760><c> to</c><00:09:49.920><c> the</c><00:09:50.080><c> small</c><00:09:50.480><c> heap</c><00:09:50.959><c> and</c>

00:09:51.110 --> 00:09:51.120 align:start position:0%
so let's add three to the small heap and
 

00:09:51.120 --> 00:09:53.670 align:start position:0%
so let's add three to the small heap and
we<00:09:51.279><c> know</c><00:09:51.519><c> that</c><00:09:51.680><c> that</c><00:09:52.000><c> was</c><00:09:52.320><c> roughly</c><00:09:52.880><c> a</c><00:09:53.200><c> log</c>

00:09:53.670 --> 00:09:53.680 align:start position:0%
we know that that was roughly a log
 

00:09:53.680 --> 00:09:57.030 align:start position:0%
we know that that was roughly a log
n<00:09:54.080><c> operation</c><00:09:54.800><c> right</c><00:09:55.519><c> next</c><00:09:56.000><c> let's</c><00:09:56.399><c> add</c>

00:09:57.030 --> 00:09:57.040 align:start position:0%
n operation right next let's add
 

00:09:57.040 --> 00:10:00.150 align:start position:0%
n operation right next let's add
two<00:09:57.600><c> so</c><00:09:57.920><c> by</c><00:09:58.160><c> default</c><00:09:58.720><c> i'm</c><00:09:59.040><c> always</c><00:09:59.519><c> gonna</c><00:09:59.839><c> take</c>

00:10:00.150 --> 00:10:00.160 align:start position:0%
two so by default i'm always gonna take
 

00:10:00.160 --> 00:10:01.829 align:start position:0%
two so by default i'm always gonna take
whatever<00:10:00.560><c> element</c><00:10:00.959><c> we</c><00:10:01.120><c> add</c><00:10:01.360><c> and</c><00:10:01.519><c> i'm</c><00:10:01.600><c> gonna</c>

00:10:01.829 --> 00:10:01.839 align:start position:0%
whatever element we add and i'm gonna
 

00:10:01.839 --> 00:10:03.910 align:start position:0%
whatever element we add and i'm gonna
take<00:10:02.079><c> it</c><00:10:02.240><c> and</c><00:10:02.399><c> add</c><00:10:02.640><c> it</c><00:10:02.800><c> to</c><00:10:02.880><c> the</c><00:10:03.040><c> small</c><00:10:03.360><c> heap</c><00:10:03.680><c> now</c>

00:10:03.910 --> 00:10:03.920 align:start position:0%
take it and add it to the small heap now
 

00:10:03.920 --> 00:10:04.790 align:start position:0%
take it and add it to the small heap now
i<00:10:04.160><c> added</c>

00:10:04.790 --> 00:10:04.800 align:start position:0%
i added
 

00:10:04.800 --> 00:10:07.509 align:start position:0%
i added
two<00:10:05.200><c> to</c><00:10:05.360><c> the</c><00:10:05.519><c> small</c><00:10:05.839><c> heap</c><00:10:06.320><c> but</c><00:10:06.640><c> wait</c><00:10:06.880><c> a</c><00:10:06.959><c> minute</c>

00:10:07.509 --> 00:10:07.519 align:start position:0%
two to the small heap but wait a minute
 

00:10:07.519 --> 00:10:09.829 align:start position:0%
two to the small heap but wait a minute
now<00:10:07.839><c> the</c><00:10:08.000><c> heaps</c><00:10:08.399><c> are</c><00:10:08.640><c> not</c><00:10:08.880><c> approximately</c>

00:10:09.829 --> 00:10:09.839 align:start position:0%
now the heaps are not approximately
 

00:10:09.839 --> 00:10:10.470 align:start position:0%
now the heaps are not approximately
equal

00:10:10.470 --> 00:10:10.480 align:start position:0%
equal
 

00:10:10.480 --> 00:10:13.190 align:start position:0%
equal
this<00:10:10.720><c> has</c><00:10:10.959><c> a</c><00:10:11.120><c> length</c><00:10:11.600><c> of</c><00:10:12.079><c> two</c><00:10:12.640><c> this</c><00:10:12.800><c> has</c><00:10:13.040><c> a</c>

00:10:13.190 --> 00:10:13.200 align:start position:0%
this has a length of two this has a
 

00:10:13.200 --> 00:10:15.509 align:start position:0%
this has a length of two this has a
length<00:10:13.519><c> of</c><00:10:13.760><c> zero</c><00:10:14.079><c> it</c><00:10:14.240><c> was</c><00:10:14.480><c> okay</c><00:10:14.959><c> when</c><00:10:15.120><c> this</c><00:10:15.360><c> had</c>

00:10:15.509 --> 00:10:15.519 align:start position:0%
length of zero it was okay when this had
 

00:10:15.519 --> 00:10:17.269 align:start position:0%
length of zero it was okay when this had
a<00:10:15.600><c> length</c><00:10:15.920><c> of</c><00:10:16.160><c> one</c><00:10:16.480><c> because</c><00:10:16.720><c> that's</c><00:10:16.959><c> still</c>

00:10:17.269 --> 00:10:17.279 align:start position:0%
a length of one because that's still
 

00:10:17.279 --> 00:10:18.790 align:start position:0%
a length of one because that's still
approximately<00:10:18.320><c> equal</c>

00:10:18.790 --> 00:10:18.800 align:start position:0%
approximately equal
 

00:10:18.800 --> 00:10:21.829 align:start position:0%
approximately equal
but<00:10:19.200><c> 2</c><00:10:19.760><c> is</c><00:10:19.920><c> that's</c><00:10:20.240><c> too</c><00:10:20.480><c> big</c><00:10:20.720><c> of</c><00:10:20.880><c> a</c><00:10:20.959><c> difference</c>

00:10:21.829 --> 00:10:21.839 align:start position:0%
but 2 is that's too big of a difference
 

00:10:21.839 --> 00:10:24.150 align:start position:0%
but 2 is that's too big of a difference
so<00:10:22.160><c> now</c><00:10:22.399><c> what</c><00:10:22.640><c> we're</c><00:10:22.800><c> going</c><00:10:22.959><c> to</c><00:10:23.040><c> do</c><00:10:23.360><c> is</c><00:10:23.760><c> find</c>

00:10:24.150 --> 00:10:24.160 align:start position:0%
so now what we're going to do is find
 

00:10:24.160 --> 00:10:25.110 align:start position:0%
so now what we're going to do is find
the<00:10:24.560><c> max</c>

00:10:25.110 --> 00:10:25.120 align:start position:0%
the max
 

00:10:25.120 --> 00:10:28.310 align:start position:0%
the max
value<00:10:25.600><c> in</c><00:10:25.760><c> this</c><00:10:26.000><c> heap</c><00:10:26.560><c> and</c><00:10:26.959><c> add</c><00:10:27.200><c> it</c><00:10:27.600><c> to</c>

00:10:28.310 --> 00:10:28.320 align:start position:0%
value in this heap and add it to
 

00:10:28.320 --> 00:10:30.870 align:start position:0%
value in this heap and add it to
this<00:10:28.640><c> heap</c><00:10:29.120><c> the</c><00:10:29.519><c> large</c><00:10:29.839><c> heap</c><00:10:30.079><c> which</c><00:10:30.320><c> is</c><00:10:30.480><c> always</c>

00:10:30.870 --> 00:10:30.880 align:start position:0%
this heap the large heap which is always
 

00:10:30.880 --> 00:10:32.550 align:start position:0%
this heap the large heap which is always
going<00:10:30.959><c> to</c><00:10:31.040><c> have</c><00:10:31.279><c> elements</c><00:10:31.839><c> greater</c><00:10:32.240><c> than</c><00:10:32.399><c> or</c>

00:10:32.550 --> 00:10:32.560 align:start position:0%
going to have elements greater than or
 

00:10:32.560 --> 00:10:34.310 align:start position:0%
going to have elements greater than or
equal<00:10:32.880><c> to</c><00:10:33.040><c> the</c><00:10:33.279><c> small</c><00:10:33.680><c> heap</c>

00:10:34.310 --> 00:10:34.320 align:start position:0%
equal to the small heap
 

00:10:34.320 --> 00:10:37.590 align:start position:0%
equal to the small heap
so<00:10:34.560><c> we</c><00:10:34.800><c> need</c><00:10:34.959><c> to</c><00:10:35.360><c> get</c><00:10:35.680><c> the</c><00:10:36.000><c> max</c><00:10:36.480><c> value</c><00:10:37.040><c> from</c>

00:10:37.590 --> 00:10:37.600 align:start position:0%
so we need to get the max value from
 

00:10:37.600 --> 00:10:40.630 align:start position:0%
so we need to get the max value from
this<00:10:37.920><c> heap</c><00:10:38.399><c> and</c><00:10:38.720><c> since</c><00:10:39.040><c> this</c><00:10:39.279><c> is</c><00:10:39.440><c> a</c><00:10:39.600><c> max</c><00:10:40.000><c> heap</c>

00:10:40.630 --> 00:10:40.640 align:start position:0%
this heap and since this is a max heap
 

00:10:40.640 --> 00:10:43.430 align:start position:0%
this heap and since this is a max heap
actually<00:10:41.200><c> finding</c><00:10:41.600><c> the</c><00:10:41.839><c> maximum</c><00:10:42.480><c> is</c><00:10:42.560><c> an</c><00:10:42.880><c> o</c><00:10:43.120><c> of</c>

00:10:43.430 --> 00:10:43.440 align:start position:0%
actually finding the maximum is an o of
 

00:10:43.440 --> 00:10:43.910 align:start position:0%
actually finding the maximum is an o of
one

00:10:43.910 --> 00:10:43.920 align:start position:0%
one
 

00:10:43.920 --> 00:10:46.389 align:start position:0%
one
operation<00:10:44.800><c> now</c><00:10:45.040><c> the</c><00:10:45.200><c> downside</c><00:10:45.839><c> is</c><00:10:46.000><c> we</c><00:10:46.079><c> have</c><00:10:46.240><c> to</c>

00:10:46.389 --> 00:10:46.399 align:start position:0%
operation now the downside is we have to
 

00:10:46.399 --> 00:10:47.269 align:start position:0%
operation now the downside is we have to
remove

00:10:47.269 --> 00:10:47.279 align:start position:0%
remove
 

00:10:47.279 --> 00:10:51.190 align:start position:0%
remove
that<00:10:47.519><c> value</c><00:10:48.160><c> which</c><00:10:48.399><c> is</c><00:10:48.640><c> a</c><00:10:49.120><c> log</c><00:10:49.600><c> n</c><00:10:50.079><c> operation</c>

00:10:51.190 --> 00:10:51.200 align:start position:0%
that value which is a log n operation
 

00:10:51.200 --> 00:10:52.470 align:start position:0%
that value which is a log n operation
and<00:10:51.360><c> we're</c><00:10:51.519><c> going</c><00:10:51.600><c> to</c><00:10:51.680><c> take</c><00:10:51.920><c> that</c><00:10:52.160><c> element</c>

00:10:52.470 --> 00:10:52.480 align:start position:0%
and we're going to take that element
 

00:10:52.480 --> 00:10:54.550 align:start position:0%
and we're going to take that element
that<00:10:52.640><c> we</c><00:10:52.800><c> removed</c><00:10:53.600><c> and</c><00:10:53.839><c> add</c><00:10:54.160><c> it</c>

00:10:54.550 --> 00:10:54.560 align:start position:0%
that we removed and add it
 

00:10:54.560 --> 00:10:57.670 align:start position:0%
that we removed and add it
to<00:10:55.120><c> the</c><00:10:55.360><c> min</c><00:10:55.680><c> heap</c><00:10:56.320><c> and</c><00:10:56.560><c> that's</c><00:10:56.880><c> also</c><00:10:57.279><c> going</c><00:10:57.440><c> to</c>

00:10:57.670 --> 00:10:57.680 align:start position:0%
to the min heap and that's also going to
 

00:10:57.680 --> 00:10:58.230 align:start position:0%
to the min heap and that's also going to
be<00:10:57.920><c> a</c>

00:10:58.230 --> 00:10:58.240 align:start position:0%
be a
 

00:10:58.240 --> 00:11:00.470 align:start position:0%
be a
log<00:10:58.800><c> n</c><00:10:59.040><c> operation</c><00:10:59.519><c> we</c><00:10:59.680><c> know</c><00:10:59.920><c> adding</c><00:11:00.320><c> and</c>

00:11:00.470 --> 00:11:00.480 align:start position:0%
log n operation we know adding and
 

00:11:00.480 --> 00:11:01.269 align:start position:0%
log n operation we know adding and
removing

00:11:01.269 --> 00:11:01.279 align:start position:0%
removing
 

00:11:01.279 --> 00:11:04.150 align:start position:0%
removing
from<00:11:01.519><c> heaps</c><00:11:01.920><c> is</c><00:11:02.160><c> always</c><00:11:02.640><c> login</c><00:11:03.519><c> finding</c><00:11:04.000><c> the</c>

00:11:04.150 --> 00:11:04.160 align:start position:0%
from heaps is always login finding the
 

00:11:04.160 --> 00:11:05.829 align:start position:0%
from heaps is always login finding the
maximum<00:11:04.880><c> in</c><00:11:05.040><c> a</c><00:11:05.120><c> max</c><00:11:05.440><c> heap</c>

00:11:05.829 --> 00:11:05.839 align:start position:0%
maximum in a max heap
 

00:11:05.839 --> 00:11:09.030 align:start position:0%
maximum in a max heap
is<00:11:06.000><c> o</c><00:11:06.240><c> of</c><00:11:06.399><c> one</c><00:11:07.279><c> finding</c><00:11:07.760><c> the</c><00:11:07.920><c> minimum</c><00:11:08.480><c> in</c><00:11:08.640><c> a</c><00:11:08.800><c> min</c>

00:11:09.030 --> 00:11:09.040 align:start position:0%
is o of one finding the minimum in a min
 

00:11:09.040 --> 00:11:11.030 align:start position:0%
is o of one finding the minimum in a min
heap<00:11:09.360><c> is</c><00:11:09.600><c> also</c><00:11:10.000><c> o</c><00:11:10.240><c> of</c><00:11:10.399><c> one</c>

00:11:11.030 --> 00:11:11.040 align:start position:0%
heap is also o of one
 

00:11:11.040 --> 00:11:13.590 align:start position:0%
heap is also o of one
okay<00:11:11.279><c> so</c><00:11:11.519><c> now</c><00:11:11.760><c> we</c><00:11:11.920><c> did</c><00:11:12.160><c> add</c><00:11:12.480><c> three</c><00:11:12.800><c> add</c><00:11:13.120><c> two</c><00:11:13.440><c> now</c>

00:11:13.590 --> 00:11:13.600 align:start position:0%
okay so now we did add three add two now
 

00:11:13.600 --> 00:11:14.550 align:start position:0%
okay so now we did add three add two now
let's<00:11:14.000><c> add</c>

00:11:14.550 --> 00:11:14.560 align:start position:0%
let's add
 

00:11:14.560 --> 00:11:17.350 align:start position:0%
let's add
one<00:11:15.040><c> i'm</c><00:11:15.279><c> gonna</c><00:11:15.519><c> change</c><00:11:15.920><c> this</c><00:11:16.160><c> add</c><00:11:16.560><c> one</c><00:11:16.880><c> to</c><00:11:17.120><c> a</c>

00:11:17.350 --> 00:11:17.360 align:start position:0%
one i'm gonna change this add one to a
 

00:11:17.360 --> 00:11:17.829 align:start position:0%
one i'm gonna change this add one to a
add

00:11:17.829 --> 00:11:17.839 align:start position:0%
add
 

00:11:17.839 --> 00:11:21.110 align:start position:0%
add
seven<00:11:18.720><c> just</c><00:11:19.120><c> to</c><00:11:19.519><c> illustrate</c><00:11:20.240><c> one</c><00:11:20.480><c> last</c><00:11:20.800><c> thing</c>

00:11:21.110 --> 00:11:21.120 align:start position:0%
seven just to illustrate one last thing
 

00:11:21.120 --> 00:11:21.829 align:start position:0%
seven just to illustrate one last thing
about<00:11:21.440><c> this</c>

00:11:21.829 --> 00:11:21.839 align:start position:0%
about this
 

00:11:21.839 --> 00:11:23.430 align:start position:0%
about this
algorithm<00:11:22.320><c> that</c><00:11:22.480><c> we're</c><00:11:22.640><c> gonna</c><00:11:22.800><c> do</c><00:11:22.959><c> and</c><00:11:23.200><c> let</c><00:11:23.360><c> me</c>

00:11:23.430 --> 00:11:23.440 align:start position:0%
algorithm that we're gonna do and let me
 

00:11:23.440 --> 00:11:24.870 align:start position:0%
algorithm that we're gonna do and let me
just<00:11:23.600><c> cross</c><00:11:23.920><c> this</c><00:11:24.160><c> out</c><00:11:24.240><c> we're</c><00:11:24.480><c> not</c><00:11:24.640><c> doing</c>

00:11:24.870 --> 00:11:24.880 align:start position:0%
just cross this out we're not doing
 

00:11:24.880 --> 00:11:26.550 align:start position:0%
just cross this out we're not doing
insert<00:11:25.279><c> order</c><00:11:25.519><c> anymore</c><00:11:25.839><c> we're</c><00:11:26.079><c> doing</c><00:11:26.320><c> the</c>

00:11:26.550 --> 00:11:26.560 align:start position:0%
insert order anymore we're doing the
 

00:11:26.560 --> 00:11:27.590 align:start position:0%
insert order anymore we're doing the
heap<00:11:26.880><c> solution</c>

00:11:27.590 --> 00:11:27.600 align:start position:0%
heap solution
 

00:11:27.600 --> 00:11:30.230 align:start position:0%
heap solution
so<00:11:28.000><c> we're</c><00:11:28.160><c> gonna</c><00:11:28.480><c> add</c><00:11:28.880><c> seven</c><00:11:29.360><c> right</c><00:11:30.000><c> by</c>

00:11:30.230 --> 00:11:30.240 align:start position:0%
so we're gonna add seven right by
 

00:11:30.240 --> 00:11:30.790 align:start position:0%
so we're gonna add seven right by
default

00:11:30.790 --> 00:11:30.800 align:start position:0%
default
 

00:11:30.800 --> 00:11:32.630 align:start position:0%
default
i<00:11:30.959><c> know</c><00:11:31.200><c> that</c><00:11:31.360><c> i'm</c><00:11:31.600><c> adding</c><00:11:31.839><c> it</c><00:11:31.920><c> to</c><00:11:32.079><c> the</c><00:11:32.240><c> small</c>

00:11:32.630 --> 00:11:32.640 align:start position:0%
i know that i'm adding it to the small
 

00:11:32.640 --> 00:11:33.990 align:start position:0%
i know that i'm adding it to the small
heap<00:11:32.880><c> so</c><00:11:32.959><c> what</c><00:11:33.120><c> am</c><00:11:33.279><c> i</c><00:11:33.360><c> gonna</c><00:11:33.519><c> do</c><00:11:33.680><c> i'm</c><00:11:33.839><c> gonna</c>

00:11:33.990 --> 00:11:34.000 align:start position:0%
heap so what am i gonna do i'm gonna
 

00:11:34.000 --> 00:11:34.389 align:start position:0%
heap so what am i gonna do i'm gonna
take

00:11:34.389 --> 00:11:34.399 align:start position:0%
take
 

00:11:34.399 --> 00:11:36.710 align:start position:0%
take
seven<00:11:34.800><c> and</c><00:11:34.959><c> add</c><00:11:35.200><c> it</c><00:11:35.440><c> to</c><00:11:35.600><c> the</c><00:11:35.680><c> small</c><00:11:36.000><c> heap</c><00:11:36.320><c> now</c>

00:11:36.710 --> 00:11:36.720 align:start position:0%
seven and add it to the small heap now
 

00:11:36.720 --> 00:11:39.030 align:start position:0%
seven and add it to the small heap now
the<00:11:37.040><c> size</c><00:11:37.360><c> of</c><00:11:37.519><c> this</c><00:11:37.760><c> heap</c><00:11:38.000><c> is</c><00:11:38.160><c> two</c><00:11:38.480><c> the</c><00:11:38.640><c> size</c><00:11:38.959><c> of</c>

00:11:39.030 --> 00:11:39.040 align:start position:0%
the size of this heap is two the size of
 

00:11:39.040 --> 00:11:40.870 align:start position:0%
the size of this heap is two the size of
this<00:11:39.279><c> heap</c><00:11:39.600><c> is</c><00:11:39.839><c> one</c><00:11:40.079><c> so</c><00:11:40.240><c> they</c><00:11:40.560><c> are</c>

00:11:40.870 --> 00:11:40.880 align:start position:0%
this heap is one so they are
 

00:11:40.880 --> 00:11:43.509 align:start position:0%
this heap is one so they are
approximately<00:11:41.760><c> equal</c><00:11:42.399><c> the</c><00:11:42.640><c> last</c><00:11:42.959><c> condition</c>

00:11:43.509 --> 00:11:43.519 align:start position:0%
approximately equal the last condition
 

00:11:43.519 --> 00:11:44.230 align:start position:0%
approximately equal the last condition
though

00:11:44.230 --> 00:11:44.240 align:start position:0%
though
 

00:11:44.240 --> 00:11:46.949 align:start position:0%
though
is<00:11:44.640><c> every</c><00:11:44.959><c> element</c><00:11:45.519><c> in</c><00:11:45.680><c> the</c><00:11:45.920><c> small</c><00:11:46.240><c> heap</c><00:11:46.720><c> less</c>

00:11:46.949 --> 00:11:46.959 align:start position:0%
is every element in the small heap less
 

00:11:46.959 --> 00:11:47.990 align:start position:0%
is every element in the small heap less
than<00:11:47.200><c> or</c><00:11:47.360><c> equal</c>

00:11:47.990 --> 00:11:48.000 align:start position:0%
than or equal
 

00:11:48.000 --> 00:11:50.870 align:start position:0%
than or equal
to<00:11:48.240><c> every</c><00:11:48.480><c> element</c><00:11:48.959><c> in</c><00:11:49.360><c> the</c><00:11:49.519><c> min</c><00:11:49.760><c> heap</c><00:11:50.320><c> now</c><00:11:50.639><c> how</c>

00:11:50.870 --> 00:11:50.880 align:start position:0%
to every element in the min heap now how
 

00:11:50.880 --> 00:11:52.310 align:start position:0%
to every element in the min heap now how
are<00:11:50.959><c> we</c><00:11:51.120><c> going</c><00:11:51.200><c> to</c><00:11:51.440><c> check</c><00:11:51.680><c> that</c><00:11:51.920><c> well</c>

00:11:52.310 --> 00:11:52.320 align:start position:0%
are we going to check that well
 

00:11:52.320 --> 00:11:54.629 align:start position:0%
are we going to check that well
we<00:11:52.480><c> can</c><00:11:52.800><c> find</c><00:11:53.120><c> the</c><00:11:53.279><c> minimum</c><00:11:53.760><c> of</c><00:11:53.920><c> the</c><00:11:54.079><c> min</c><00:11:54.320><c> heap</c>

00:11:54.629 --> 00:11:54.639 align:start position:0%
we can find the minimum of the min heap
 

00:11:54.639 --> 00:11:55.990 align:start position:0%
we can find the minimum of the min heap
in<00:11:54.959><c> o</c><00:11:55.200><c> of</c><00:11:55.360><c> one</c><00:11:55.600><c> time</c>

00:11:55.990 --> 00:11:56.000 align:start position:0%
in o of one time
 

00:11:56.000 --> 00:11:58.629 align:start position:0%
in o of one time
right<00:11:56.480><c> it</c><00:11:56.639><c> happens</c><00:11:57.040><c> to</c><00:11:57.120><c> be</c><00:11:57.440><c> three</c><00:11:58.000><c> we</c><00:11:58.160><c> can</c><00:11:58.399><c> find</c>

00:11:58.629 --> 00:11:58.639 align:start position:0%
right it happens to be three we can find
 

00:11:58.639 --> 00:12:01.030 align:start position:0%
right it happens to be three we can find
the<00:11:58.959><c> max</c><00:11:59.360><c> of</c><00:11:59.519><c> the</c><00:11:59.680><c> small</c><00:12:00.000><c> heap</c><00:12:00.240><c> in</c><00:12:00.480><c> o</c><00:12:00.639><c> of</c><00:12:00.800><c> one</c>

00:12:01.030 --> 00:12:01.040 align:start position:0%
the max of the small heap in o of one
 

00:12:01.040 --> 00:12:01.430 align:start position:0%
the max of the small heap in o of one
time

00:12:01.430 --> 00:12:01.440 align:start position:0%
time
 

00:12:01.440 --> 00:12:04.710 align:start position:0%
time
it<00:12:01.600><c> happens</c><00:12:02.079><c> to</c><00:12:02.240><c> be</c><00:12:02.959><c> seven</c><00:12:03.760><c> is</c><00:12:04.000><c> that</c>

00:12:04.710 --> 00:12:04.720 align:start position:0%
it happens to be seven is that
 

00:12:04.720 --> 00:12:07.430 align:start position:0%
it happens to be seven is that
is<00:12:05.279><c> seven</c><00:12:05.600><c> less</c><00:12:05.839><c> than</c><00:12:06.000><c> or</c><00:12:06.160><c> equal</c><00:12:06.399><c> to</c><00:12:06.639><c> three</c><00:12:07.120><c> no</c>

00:12:07.430 --> 00:12:07.440 align:start position:0%
is seven less than or equal to three no
 

00:12:07.440 --> 00:12:08.389 align:start position:0%
is seven less than or equal to three no
it's<00:12:07.760><c> not</c><00:12:08.079><c> so</c>

00:12:08.389 --> 00:12:08.399 align:start position:0%
it's not so
 

00:12:08.399 --> 00:12:10.870 align:start position:0%
it's not so
what<00:12:08.560><c> are</c><00:12:08.639><c> we</c><00:12:08.800><c> gonna</c><00:12:09.120><c> do</c><00:12:09.920><c> well</c><00:12:10.160><c> we're</c><00:12:10.480><c> actually</c>

00:12:10.870 --> 00:12:10.880 align:start position:0%
what are we gonna do well we're actually
 

00:12:10.880 --> 00:12:12.389 align:start position:0%
what are we gonna do well we're actually
gonna<00:12:11.040><c> do</c><00:12:11.200><c> the</c><00:12:11.440><c> exact</c><00:12:11.920><c> same</c>

00:12:12.389 --> 00:12:12.399 align:start position:0%
gonna do the exact same
 

00:12:12.399 --> 00:12:14.710 align:start position:0%
gonna do the exact same
thing<00:12:12.639><c> we</c><00:12:12.800><c> did</c><00:12:12.959><c> before</c><00:12:13.440><c> so</c><00:12:13.760><c> i'm</c><00:12:13.920><c> gonna</c><00:12:14.320><c> find</c>

00:12:14.710 --> 00:12:14.720 align:start position:0%
thing we did before so i'm gonna find
 

00:12:14.720 --> 00:12:15.590 align:start position:0%
thing we did before so i'm gonna find
the<00:12:14.959><c> max</c>

00:12:15.590 --> 00:12:15.600 align:start position:0%
the max
 

00:12:15.600 --> 00:12:18.470 align:start position:0%
the max
from<00:12:15.839><c> the</c><00:12:16.000><c> small</c><00:12:16.399><c> heap</c><00:12:16.880><c> in</c><00:12:17.040><c> o</c><00:12:17.200><c> of</c><00:12:17.360><c> one</c><00:12:17.680><c> time</c><00:12:18.320><c> i'm</c>

00:12:18.470 --> 00:12:18.480 align:start position:0%
from the small heap in o of one time i'm
 

00:12:18.480 --> 00:12:20.389 align:start position:0%
from the small heap in o of one time i'm
gonna<00:12:18.800><c> remove</c><00:12:19.519><c> that</c><00:12:19.760><c> max</c><00:12:20.079><c> so</c>

00:12:20.389 --> 00:12:20.399 align:start position:0%
gonna remove that max so
 

00:12:20.399 --> 00:12:22.949 align:start position:0%
gonna remove that max so
seven<00:12:20.720><c> is</c><00:12:20.880><c> removed</c><00:12:21.839><c> to</c><00:12:22.079><c> remove</c><00:12:22.480><c> we</c><00:12:22.639><c> know</c><00:12:22.880><c> it</c>

00:12:22.949 --> 00:12:22.959 align:start position:0%
seven is removed to remove we know it
 

00:12:22.959 --> 00:12:24.550 align:start position:0%
seven is removed to remove we know it
takes<00:12:23.360><c> login</c><00:12:23.920><c> time</c>

00:12:24.550 --> 00:12:24.560 align:start position:0%
takes login time
 

00:12:24.560 --> 00:12:27.110 align:start position:0%
takes login time
and<00:12:24.639><c> then</c><00:12:24.880><c> i'm</c><00:12:24.959><c> going</c><00:12:25.120><c> to</c><00:12:25.360><c> add</c><00:12:25.600><c> it</c><00:12:26.079><c> to</c><00:12:26.639><c> the</c><00:12:26.880><c> min</c>

00:12:27.110 --> 00:12:27.120 align:start position:0%
and then i'm going to add it to the min
 

00:12:27.120 --> 00:12:27.670 align:start position:0%
and then i'm going to add it to the min
heap

00:12:27.670 --> 00:12:27.680 align:start position:0%
heap
 

00:12:27.680 --> 00:12:30.790 align:start position:0%
heap
which<00:12:28.000><c> also</c><00:12:28.320><c> takes</c><00:12:28.800><c> log</c><00:12:29.279><c> n</c><00:12:29.600><c> time</c><00:12:30.160><c> so</c><00:12:30.399><c> now</c>

00:12:30.790 --> 00:12:30.800 align:start position:0%
which also takes log n time so now
 

00:12:30.800 --> 00:12:33.590 align:start position:0%
which also takes log n time so now
i'm<00:12:31.120><c> adding</c><00:12:31.600><c> seven</c><00:12:32.399><c> and</c><00:12:32.800><c> the</c><00:12:33.120><c> lengths</c><00:12:33.519><c> are</c>

00:12:33.590 --> 00:12:33.600 align:start position:0%
i'm adding seven and the lengths are
 

00:12:33.600 --> 00:12:35.509 align:start position:0%
i'm adding seven and the lengths are
approximately<00:12:34.320><c> equal</c><00:12:34.560><c> still</c><00:12:34.880><c> right</c><00:12:35.040><c> this</c><00:12:35.279><c> has</c>

00:12:35.509 --> 00:12:35.519 align:start position:0%
approximately equal still right this has
 

00:12:35.519 --> 00:12:36.790 align:start position:0%
approximately equal still right this has
one<00:12:35.760><c> element</c><00:12:36.160><c> this</c><00:12:36.320><c> has</c>

00:12:36.790 --> 00:12:36.800 align:start position:0%
one element this has
 

00:12:36.800 --> 00:12:39.030 align:start position:0%
one element this has
two<00:12:37.040><c> elements</c><00:12:37.839><c> and</c><00:12:38.240><c> now</c><00:12:38.480><c> if</c><00:12:38.560><c> we</c><00:12:38.720><c> get</c><00:12:38.800><c> the</c>

00:12:39.030 --> 00:12:39.040 align:start position:0%
two elements and now if we get the
 

00:12:39.040 --> 00:12:40.310 align:start position:0%
two elements and now if we get the
maximum<00:12:39.600><c> from</c><00:12:39.839><c> here</c>

00:12:40.310 --> 00:12:40.320 align:start position:0%
maximum from here
 

00:12:40.320 --> 00:12:42.949 align:start position:0%
maximum from here
two<00:12:40.639><c> and</c><00:12:40.800><c> we</c><00:12:40.880><c> get</c><00:12:41.040><c> the</c><00:12:41.200><c> min</c><00:12:41.440><c> from</c><00:12:41.680><c> here</c><00:12:42.399><c> three</c>

00:12:42.949 --> 00:12:42.959 align:start position:0%
two and we get the min from here three
 

00:12:42.959 --> 00:12:44.949 align:start position:0%
two and we get the min from here three
we<00:12:43.200><c> see</c><00:12:43.360><c> that</c><00:12:43.519><c> the</c><00:12:43.600><c> condition</c><00:12:44.160><c> actually</c><00:12:44.639><c> now</c>

00:12:44.949 --> 00:12:44.959 align:start position:0%
we see that the condition actually now
 

00:12:44.959 --> 00:12:46.790 align:start position:0%
we see that the condition actually now
is<00:12:45.120><c> true</c><00:12:45.440><c> every</c><00:12:45.760><c> element</c><00:12:46.160><c> in</c><00:12:46.240><c> the</c><00:12:46.399><c> left</c>

00:12:46.790 --> 00:12:46.800 align:start position:0%
is true every element in the left
 

00:12:46.800 --> 00:12:49.750 align:start position:0%
is true every element in the left
is<00:12:47.040><c> less</c><00:12:47.360><c> than</c><00:12:47.839><c> or</c><00:12:48.079><c> equal</c><00:12:48.560><c> to</c><00:12:49.120><c> every</c><00:12:49.360><c> element</c>

00:12:49.750 --> 00:12:49.760 align:start position:0%
is less than or equal to every element
 

00:12:49.760 --> 00:12:50.550 align:start position:0%
is less than or equal to every element
in<00:12:49.920><c> the</c><00:12:50.079><c> right</c>

00:12:50.550 --> 00:12:50.560 align:start position:0%
in the right
 

00:12:50.560 --> 00:12:53.990 align:start position:0%
in the right
now<00:12:50.720><c> we</c><00:12:50.959><c> added</c><00:12:51.360><c> seven</c><00:12:51.760><c> now</c><00:12:52.079><c> let's</c><00:12:52.480><c> do</c><00:12:52.880><c> add</c><00:12:53.440><c> four</c>

00:12:53.990 --> 00:12:54.000 align:start position:0%
now we added seven now let's do add four
 

00:12:54.000 --> 00:12:55.990 align:start position:0%
now we added seven now let's do add four
so<00:12:54.320><c> by</c><00:12:54.560><c> default</c><00:12:55.040><c> i'm</c><00:12:55.200><c> always</c><00:12:55.519><c> going</c><00:12:55.600><c> to</c><00:12:55.680><c> add</c><00:12:55.839><c> it</c>

00:12:55.990 --> 00:12:56.000 align:start position:0%
so by default i'm always going to add it
 

00:12:56.000 --> 00:12:57.110 align:start position:0%
so by default i'm always going to add it
to<00:12:56.079><c> the</c><00:12:56.240><c> small</c><00:12:56.560><c> heap</c>

00:12:57.110 --> 00:12:57.120 align:start position:0%
to the small heap
 

00:12:57.120 --> 00:12:59.269 align:start position:0%
to the small heap
so<00:12:57.279><c> i'm</c><00:12:57.440><c> adding</c><00:12:57.839><c> four</c><00:12:58.079><c> to</c><00:12:58.240><c> the</c><00:12:58.399><c> small</c><00:12:58.720><c> heap</c><00:12:59.120><c> the</c>

00:12:59.269 --> 00:12:59.279 align:start position:0%
so i'm adding four to the small heap the
 

00:12:59.279 --> 00:13:00.629 align:start position:0%
so i'm adding four to the small heap the
small<00:12:59.600><c> heap</c><00:12:59.839><c> has</c><00:13:00.079><c> two</c>

00:13:00.629 --> 00:13:00.639 align:start position:0%
small heap has two
 

00:13:00.639 --> 00:13:03.590 align:start position:0%
small heap has two
the<00:13:01.120><c> large</c><00:13:01.360><c> g</c><00:13:01.680><c> has</c><00:13:01.839><c> two</c><00:13:02.160><c> also</c><00:13:02.880><c> but</c><00:13:03.200><c> we</c><00:13:03.360><c> know</c>

00:13:03.590 --> 00:13:03.600 align:start position:0%
the large g has two also but we know
 

00:13:03.600 --> 00:13:03.910 align:start position:0%
the large g has two also but we know
that

00:13:03.910 --> 00:13:03.920 align:start position:0%
that
 

00:13:03.920 --> 00:13:05.590 align:start position:0%
that
this<00:13:04.240><c> condition</c><00:13:04.720><c> doesn't</c><00:13:04.959><c> hold</c><00:13:05.279><c> right</c><00:13:05.440><c> the</c>

00:13:05.590 --> 00:13:05.600 align:start position:0%
this condition doesn't hold right the
 

00:13:05.600 --> 00:13:07.670 align:start position:0%
this condition doesn't hold right the
less<00:13:05.839><c> than</c><00:13:06.000><c> or</c><00:13:06.240><c> equal</c><00:13:06.560><c> condition</c><00:13:07.040><c> if</c><00:13:07.200><c> we</c><00:13:07.440><c> get</c>

00:13:07.670 --> 00:13:07.680 align:start position:0%
less than or equal condition if we get
 

00:13:07.680 --> 00:13:08.629 align:start position:0%
less than or equal condition if we get
the<00:13:08.000><c> max</c>

00:13:08.629 --> 00:13:08.639 align:start position:0%
the max
 

00:13:08.639 --> 00:13:09.910 align:start position:0%
the max
from<00:13:08.800><c> here</c><00:13:09.040><c> that's</c><00:13:09.279><c> going</c><00:13:09.360><c> to</c><00:13:09.440><c> be</c><00:13:09.600><c> four</c><00:13:09.760><c> if</c><00:13:09.839><c> we</c>

00:13:09.910 --> 00:13:09.920 align:start position:0%
from here that's going to be four if we
 

00:13:09.920 --> 00:13:11.670 align:start position:0%
from here that's going to be four if we
get<00:13:10.079><c> the</c><00:13:10.320><c> min</c><00:13:10.639><c> from</c><00:13:10.800><c> here</c><00:13:11.040><c> that's</c><00:13:11.279><c> going</c><00:13:11.360><c> to</c><00:13:11.440><c> be</c>

00:13:11.670 --> 00:13:11.680 align:start position:0%
get the min from here that's going to be
 

00:13:11.680 --> 00:13:12.389 align:start position:0%
get the min from here that's going to be
three

00:13:12.389 --> 00:13:12.399 align:start position:0%
three
 

00:13:12.399 --> 00:13:14.310 align:start position:0%
three
this<00:13:12.639><c> is</c><00:13:12.720><c> just</c><00:13:12.880><c> not</c><00:13:13.120><c> true</c><00:13:13.440><c> right</c><00:13:13.760><c> four</c><00:13:14.000><c> is</c><00:13:14.079><c> not</c>

00:13:14.310 --> 00:13:14.320 align:start position:0%
this is just not true right four is not
 

00:13:14.320 --> 00:13:15.750 align:start position:0%
this is just not true right four is not
less<00:13:14.480><c> than</c><00:13:14.639><c> or</c><00:13:14.720><c> equal</c><00:13:14.959><c> to</c><00:13:15.120><c> three</c>

00:13:15.750 --> 00:13:15.760 align:start position:0%
less than or equal to three
 

00:13:15.760 --> 00:13:18.550 align:start position:0%
less than or equal to three
so<00:13:15.920><c> we</c><00:13:16.079><c> have</c><00:13:16.160><c> to</c><00:13:16.399><c> pop</c><00:13:16.880><c> this</c><00:13:17.760><c> and</c><00:13:17.920><c> we</c><00:13:18.079><c> have</c><00:13:18.240><c> to</c>

00:13:18.550 --> 00:13:18.560 align:start position:0%
so we have to pop this and we have to
 

00:13:18.560 --> 00:13:19.350 align:start position:0%
so we have to pop this and we have to
move<00:13:18.880><c> it</c>

00:13:19.350 --> 00:13:19.360 align:start position:0%
move it
 

00:13:19.360 --> 00:13:22.230 align:start position:0%
move it
to<00:13:19.680><c> this</c><00:13:20.000><c> heap</c><00:13:20.800><c> so</c><00:13:21.040><c> now</c><00:13:21.360><c> everything</c><00:13:21.760><c> is</c><00:13:21.920><c> good</c>

00:13:22.230 --> 00:13:22.240 align:start position:0%
to this heap so now everything is good
 

00:13:22.240 --> 00:13:22.870 align:start position:0%
to this heap so now everything is good
right<00:13:22.480><c> it's</c>

00:13:22.870 --> 00:13:22.880 align:start position:0%
right it's
 

00:13:22.880 --> 00:13:24.629 align:start position:0%
right it's
every<00:13:23.200><c> value</c><00:13:23.519><c> is</c><00:13:23.680><c> less</c><00:13:23.839><c> than</c><00:13:24.000><c> or</c><00:13:24.160><c> equal</c><00:13:24.399><c> write</c>

00:13:24.629 --> 00:13:24.639 align:start position:0%
every value is less than or equal write
 

00:13:24.639 --> 00:13:27.110 align:start position:0%
every value is less than or equal write
this<00:13:25.040><c> as</c><00:13:25.360><c> two</c><00:13:25.760><c> this</c><00:13:26.079><c> has</c><00:13:26.320><c> three</c><00:13:26.639><c> that's</c><00:13:26.959><c> less</c>

00:13:27.110 --> 00:13:27.120 align:start position:0%
this as two this has three that's less
 

00:13:27.120 --> 00:13:28.389 align:start position:0%
this as two this has three that's less
than<00:13:27.279><c> or</c><00:13:27.440><c> equal</c><00:13:27.839><c> gray</c>

00:13:28.389 --> 00:13:28.399 align:start position:0%
than or equal gray
 

00:13:28.399 --> 00:13:30.949 align:start position:0%
than or equal gray
only<00:13:28.800><c> problem</c><00:13:29.279><c> now</c><00:13:29.600><c> is</c><00:13:29.839><c> the</c><00:13:30.160><c> lengths</c><00:13:30.639><c> are</c><00:13:30.720><c> not</c>

00:13:30.949 --> 00:13:30.959 align:start position:0%
only problem now is the lengths are not
 

00:13:30.959 --> 00:13:32.069 align:start position:0%
only problem now is the lengths are not
approximately<00:13:31.680><c> equal</c>

00:13:32.069 --> 00:13:32.079 align:start position:0%
approximately equal
 

00:13:32.079 --> 00:13:35.269 align:start position:0%
approximately equal
this<00:13:32.399><c> has</c><00:13:32.800><c> one</c><00:13:33.120><c> element</c><00:13:34.079><c> this</c><00:13:34.399><c> has</c><00:13:34.959><c> three</c>

00:13:35.269 --> 00:13:35.279 align:start position:0%
this has one element this has three
 

00:13:35.279 --> 00:13:36.150 align:start position:0%
this has one element this has three
elements

00:13:36.150 --> 00:13:36.160 align:start position:0%
elements
 

00:13:36.160 --> 00:13:38.470 align:start position:0%
elements
so<00:13:36.480><c> since</c><00:13:36.800><c> the</c><00:13:37.120><c> length</c><00:13:37.519><c> of</c><00:13:37.680><c> this</c><00:13:37.920><c> one</c><00:13:38.240><c> is</c>

00:13:38.470 --> 00:13:38.480 align:start position:0%
so since the length of this one is
 

00:13:38.480 --> 00:13:40.150 align:start position:0%
so since the length of this one is
greater<00:13:38.959><c> what</c><00:13:39.120><c> are</c><00:13:39.199><c> we</c><00:13:39.360><c> gonna</c><00:13:39.519><c> do</c><00:13:39.760><c> we're</c><00:13:39.920><c> gonna</c>

00:13:40.150 --> 00:13:40.160 align:start position:0%
greater what are we gonna do we're gonna
 

00:13:40.160 --> 00:13:41.990 align:start position:0%
greater what are we gonna do we're gonna
get<00:13:40.399><c> we're</c><00:13:40.560><c> gonna</c><00:13:40.800><c> find</c><00:13:41.199><c> the</c><00:13:41.360><c> min</c>

00:13:41.990 --> 00:13:42.000 align:start position:0%
get we're gonna find the min
 

00:13:42.000 --> 00:13:45.110 align:start position:0%
get we're gonna find the min
o<00:13:42.240><c> of</c><00:13:42.399><c> one</c><00:13:42.639><c> time</c><00:13:42.959><c> remove</c><00:13:43.600><c> that</c><00:13:43.920><c> min</c><00:13:44.560><c> and</c>

00:13:45.110 --> 00:13:45.120 align:start position:0%
o of one time remove that min and
 

00:13:45.120 --> 00:13:47.990 align:start position:0%
o of one time remove that min and
then<00:13:45.680><c> move</c><00:13:45.920><c> it</c><00:13:46.320><c> to</c><00:13:46.639><c> this</c><00:13:46.880><c> heap</c><00:13:47.440><c> so</c><00:13:47.600><c> we</c><00:13:47.760><c> know</c>

00:13:47.990 --> 00:13:48.000 align:start position:0%
then move it to this heap so we know
 

00:13:48.000 --> 00:13:48.710 align:start position:0%
then move it to this heap so we know
that<00:13:48.160><c> the</c><00:13:48.320><c> min</c>

00:13:48.710 --> 00:13:48.720 align:start position:0%
that the min
 

00:13:48.720 --> 00:13:51.110 align:start position:0%
that the min
is<00:13:49.279><c> three</c><00:13:49.600><c> we</c><00:13:49.760><c> can</c><00:13:49.920><c> do</c><00:13:50.079><c> that</c><00:13:50.240><c> in</c><00:13:50.399><c> o</c><00:13:50.560><c> of</c><00:13:50.720><c> one</c><00:13:50.880><c> time</c>

00:13:51.110 --> 00:13:51.120 align:start position:0%
is three we can do that in o of one time
 

00:13:51.120 --> 00:13:52.790 align:start position:0%
is three we can do that in o of one time
but<00:13:51.360><c> removing</c><00:13:52.000><c> it</c><00:13:52.160><c> is</c><00:13:52.320><c> gonna</c><00:13:52.480><c> be</c>

00:13:52.790 --> 00:13:52.800 align:start position:0%
but removing it is gonna be
 

00:13:52.800 --> 00:13:56.550 align:start position:0%
but removing it is gonna be
log<00:13:53.120><c> n</c><00:13:53.839><c> and</c><00:13:54.240><c> adding</c><00:13:54.639><c> it</c><00:13:55.040><c> to</c><00:13:55.600><c> the</c><00:13:55.839><c> left</c><00:13:56.160><c> heap</c><00:13:56.399><c> is</c>

00:13:56.550 --> 00:13:56.560 align:start position:0%
log n and adding it to the left heap is
 

00:13:56.560 --> 00:13:57.990 align:start position:0%
log n and adding it to the left heap is
also<00:13:56.800><c> gonna</c><00:13:56.959><c> be</c><00:13:57.199><c> log</c><00:13:57.519><c> n</c>

00:13:57.990 --> 00:13:58.000 align:start position:0%
also gonna be log n
 

00:13:58.000 --> 00:14:00.790 align:start position:0%
also gonna be log n
so<00:13:58.320><c> now</c><00:13:59.120><c> the</c><00:13:59.440><c> lengths</c><00:13:59.920><c> are</c><00:14:00.079><c> approximately</c>

00:14:00.790 --> 00:14:00.800 align:start position:0%
so now the lengths are approximately
 

00:14:00.800 --> 00:14:02.629 align:start position:0%
so now the lengths are approximately
equal<00:14:01.040><c> this</c><00:14:01.279><c> has</c><00:14:01.600><c> two</c><00:14:01.839><c> elements</c>

00:14:02.629 --> 00:14:02.639 align:start position:0%
equal this has two elements
 

00:14:02.639 --> 00:14:04.629 align:start position:0%
equal this has two elements
this<00:14:02.880><c> has</c><00:14:03.199><c> two</c><00:14:03.440><c> elements</c><00:14:04.079><c> and</c><00:14:04.240><c> the</c><00:14:04.399><c> other</c>

00:14:04.629 --> 00:14:04.639 align:start position:0%
this has two elements and the other
 

00:14:04.639 --> 00:14:07.030 align:start position:0%
this has two elements and the other
condition<00:14:05.440><c> find</c><00:14:05.760><c> the</c><00:14:05.920><c> max</c><00:14:06.320><c> from</c><00:14:06.480><c> here</c><00:14:06.800><c> find</c>

00:14:07.030 --> 00:14:07.040 align:start position:0%
condition find the max from here find
 

00:14:07.040 --> 00:14:07.990 align:start position:0%
condition find the max from here find
the<00:14:07.199><c> min</c><00:14:07.440><c> here</c>

00:14:07.990 --> 00:14:08.000 align:start position:0%
the min here
 

00:14:08.000 --> 00:14:10.150 align:start position:0%
the min here
we'll<00:14:08.160><c> end</c><00:14:08.399><c> up</c><00:14:08.480><c> with</c><00:14:08.639><c> three</c><00:14:08.959><c> and</c><00:14:09.199><c> four</c><00:14:09.680><c> and</c>

00:14:10.150 --> 00:14:10.160 align:start position:0%
we'll end up with three and four and
 

00:14:10.160 --> 00:14:12.629 align:start position:0%
we'll end up with three and four and
less<00:14:10.399><c> than</c><00:14:10.560><c> or</c><00:14:10.720><c> equal</c><00:14:11.120><c> is</c><00:14:11.279><c> definitely</c><00:14:11.920><c> true</c>

00:14:12.629 --> 00:14:12.639 align:start position:0%
less than or equal is definitely true
 

00:14:12.639 --> 00:14:15.110 align:start position:0%
less than or equal is definitely true
so<00:14:12.959><c> it</c><00:14:13.279><c> looks</c><00:14:13.600><c> like</c><00:14:13.839><c> a</c><00:14:14.000><c> lot</c><00:14:14.240><c> of</c><00:14:14.480><c> work</c><00:14:14.800><c> and</c><00:14:14.959><c> it</c>

00:14:15.110 --> 00:14:15.120 align:start position:0%
so it looks like a lot of work and it
 

00:14:15.120 --> 00:14:15.990 align:start position:0%
so it looks like a lot of work and it
definitely<00:14:15.760><c> is</c>

00:14:15.990 --> 00:14:16.000 align:start position:0%
definitely is
 

00:14:16.000 --> 00:14:18.230 align:start position:0%
definitely is
it's<00:14:16.160><c> a</c><00:14:16.320><c> lot</c><00:14:16.720><c> harder</c><00:14:17.040><c> than</c><00:14:17.199><c> just</c><00:14:17.440><c> having</c><00:14:17.920><c> one</c>

00:14:18.230 --> 00:14:18.240 align:start position:0%
it's a lot harder than just having one
 

00:14:18.240 --> 00:14:19.189 align:start position:0%
it's a lot harder than just having one
array<00:14:18.720><c> right</c>

00:14:19.189 --> 00:14:19.199 align:start position:0%
array right
 

00:14:19.199 --> 00:14:21.189 align:start position:0%
array right
it's<00:14:19.360><c> definitely</c><00:14:19.680><c> more</c><00:14:20.079><c> code</c><00:14:20.560><c> but</c><00:14:20.720><c> it's</c><00:14:20.880><c> also</c>

00:14:21.189 --> 00:14:21.199 align:start position:0%
it's definitely more code but it's also
 

00:14:21.199 --> 00:14:22.870 align:start position:0%
it's definitely more code but it's also
a<00:14:21.360><c> lot</c><00:14:21.600><c> more</c><00:14:21.760><c> efficient</c><00:14:22.240><c> now</c>

00:14:22.870 --> 00:14:22.880 align:start position:0%
a lot more efficient now
 

00:14:22.880 --> 00:14:24.870 align:start position:0%
a lot more efficient now
the<00:14:23.040><c> only</c><00:14:23.279><c> thing</c><00:14:23.440><c> we</c><00:14:23.600><c> have</c><00:14:23.680><c> to</c><00:14:23.839><c> do</c><00:14:24.079><c> is</c><00:14:24.399><c> get</c><00:14:24.639><c> the</c>

00:14:24.870 --> 00:14:24.880 align:start position:0%
the only thing we have to do is get the
 

00:14:24.880 --> 00:14:25.990 align:start position:0%
the only thing we have to do is get the
median<00:14:25.600><c> and</c>

00:14:25.990 --> 00:14:26.000 align:start position:0%
median and
 

00:14:26.000 --> 00:14:28.230 align:start position:0%
median and
the<00:14:26.160><c> time</c><00:14:26.399><c> complexity</c><00:14:27.040><c> for</c><00:14:27.279><c> get</c><00:14:27.519><c> median</c><00:14:28.079><c> is</c>

00:14:28.230 --> 00:14:28.240 align:start position:0%
the time complexity for get median is
 

00:14:28.240 --> 00:14:29.350 align:start position:0%
the time complexity for get median is
actually<00:14:28.880><c> still</c>

00:14:29.350 --> 00:14:29.360 align:start position:0%
actually still
 

00:14:29.360 --> 00:14:31.990 align:start position:0%
actually still
o<00:14:29.680><c> of</c><00:14:29.920><c> one</c><00:14:30.160><c> which</c><00:14:30.399><c> is</c><00:14:30.560><c> exactly</c><00:14:31.040><c> what</c><00:14:31.199><c> we</c><00:14:31.440><c> wanted</c>

00:14:31.990 --> 00:14:32.000 align:start position:0%
o of one which is exactly what we wanted
 

00:14:32.000 --> 00:14:33.269 align:start position:0%
o of one which is exactly what we wanted
let<00:14:32.160><c> me</c><00:14:32.320><c> show</c><00:14:32.480><c> you</c><00:14:32.720><c> why</c>

00:14:33.269 --> 00:14:33.279 align:start position:0%
let me show you why
 

00:14:33.279 --> 00:14:35.189 align:start position:0%
let me show you why
well<00:14:33.519><c> we</c><00:14:33.680><c> need</c><00:14:34.240><c> in</c><00:14:34.320><c> this</c><00:14:34.480><c> case</c><00:14:34.720><c> we</c><00:14:34.880><c> have</c><00:14:35.040><c> an</c>

00:14:35.189 --> 00:14:35.199 align:start position:0%
well we need in this case we have an
 

00:14:35.199 --> 00:14:36.629 align:start position:0%
well we need in this case we have an
even<00:14:35.519><c> number</c><00:14:35.839><c> of</c><00:14:36.000><c> elements</c><00:14:36.320><c> right</c>

00:14:36.629 --> 00:14:36.639 align:start position:0%
even number of elements right
 

00:14:36.639 --> 00:14:39.590 align:start position:0%
even number of elements right
two<00:14:36.880><c> plus</c><00:14:37.199><c> two</c><00:14:37.600><c> is</c><00:14:37.839><c> even</c><00:14:38.399><c> so</c><00:14:38.560><c> we</c><00:14:38.720><c> wanna</c><00:14:39.199><c> find</c>

00:14:39.590 --> 00:14:39.600 align:start position:0%
two plus two is even so we wanna find
 

00:14:39.600 --> 00:14:41.910 align:start position:0%
two plus two is even so we wanna find
the<00:14:39.920><c> maximum</c><00:14:40.480><c> from</c><00:14:40.720><c> our</c><00:14:40.959><c> left</c><00:14:41.199><c> heap</c><00:14:41.440><c> which</c><00:14:41.680><c> is</c>

00:14:41.910 --> 00:14:41.920 align:start position:0%
the maximum from our left heap which is
 

00:14:41.920 --> 00:14:43.750 align:start position:0%
the maximum from our left heap which is
three<00:14:42.320><c> right</c><00:14:42.560><c> we</c><00:14:42.720><c> know</c><00:14:42.880><c> we</c><00:14:43.040><c> can</c><00:14:43.199><c> do</c><00:14:43.360><c> that</c><00:14:43.519><c> in</c>

00:14:43.750 --> 00:14:43.760 align:start position:0%
three right we know we can do that in
 

00:14:43.760 --> 00:14:46.629 align:start position:0%
three right we know we can do that in
o<00:14:44.000><c> of</c><00:14:44.240><c> one</c><00:14:44.560><c> time</c><00:14:44.880><c> because</c><00:14:45.120><c> this</c><00:14:45.360><c> is</c><00:14:45.519><c> a</c><00:14:45.760><c> max</c><00:14:46.160><c> heap</c>

00:14:46.629 --> 00:14:46.639 align:start position:0%
o of one time because this is a max heap
 

00:14:46.639 --> 00:14:48.790 align:start position:0%
o of one time because this is a max heap
we<00:14:46.800><c> want</c><00:14:46.959><c> to</c><00:14:47.040><c> find</c><00:14:47.279><c> the</c><00:14:47.519><c> minimum</c><00:14:48.000><c> value</c><00:14:48.480><c> from</c>

00:14:48.790 --> 00:14:48.800 align:start position:0%
we want to find the minimum value from
 

00:14:48.800 --> 00:14:51.030 align:start position:0%
we want to find the minimum value from
our<00:14:49.120><c> right</c><00:14:49.440><c> heap</c><00:14:50.000><c> and</c><00:14:50.240><c> we</c><00:14:50.399><c> know</c><00:14:50.639><c> we</c><00:14:50.720><c> can</c><00:14:50.880><c> do</c>

00:14:51.030 --> 00:14:51.040 align:start position:0%
our right heap and we know we can do
 

00:14:51.040 --> 00:14:53.350 align:start position:0%
our right heap and we know we can do
that<00:14:51.279><c> in</c><00:14:51.440><c> o</c><00:14:51.680><c> of</c><00:14:51.760><c> one</c><00:14:52.079><c> time</c><00:14:52.399><c> because</c><00:14:52.639><c> this</c><00:14:52.880><c> is</c><00:14:53.040><c> a</c>

00:14:53.350 --> 00:14:53.360 align:start position:0%
that in o of one time because this is a
 

00:14:53.360 --> 00:14:55.829 align:start position:0%
that in o of one time because this is a
min<00:14:53.680><c> heap</c><00:14:54.240><c> and</c><00:14:54.480><c> we</c><00:14:54.639><c> know</c><00:14:54.800><c> that</c><00:14:55.120><c> four</c><00:14:55.440><c> happens</c>

00:14:55.829 --> 00:14:55.839 align:start position:0%
min heap and we know that four happens
 

00:14:55.839 --> 00:14:57.189 align:start position:0%
min heap and we know that four happens
to<00:14:55.920><c> be</c><00:14:56.079><c> the</c><00:14:56.240><c> min</c><00:14:56.560><c> value</c>

00:14:57.189 --> 00:14:57.199 align:start position:0%
to be the min value
 

00:14:57.199 --> 00:14:59.750 align:start position:0%
to be the min value
so<00:14:57.360><c> we</c><00:14:57.600><c> get</c><00:14:57.839><c> these</c><00:14:58.160><c> two</c><00:14:58.399><c> values</c><00:14:58.880><c> three</c><00:14:59.279><c> plus</c>

00:14:59.750 --> 00:14:59.760 align:start position:0%
so we get these two values three plus
 

00:14:59.760 --> 00:15:00.470 align:start position:0%
so we get these two values three plus
four

00:15:00.470 --> 00:15:00.480 align:start position:0%
four
 

00:15:00.480 --> 00:15:02.550 align:start position:0%
four
add<00:15:00.720><c> them</c><00:15:00.959><c> together</c><00:15:01.360><c> divide</c><00:15:01.839><c> by</c><00:15:02.079><c> two</c><00:15:02.399><c> and</c>

00:15:02.550 --> 00:15:02.560 align:start position:0%
add them together divide by two and
 

00:15:02.560 --> 00:15:04.710 align:start position:0%
add them together divide by two and
that's<00:15:02.880><c> going</c><00:15:03.040><c> to</c><00:15:03.279><c> be</c><00:15:03.519><c> our</c><00:15:03.760><c> median</c><00:15:04.240><c> so</c><00:15:04.399><c> we</c><00:15:04.560><c> can</c>

00:15:04.710 --> 00:15:04.720 align:start position:0%
that's going to be our median so we can
 

00:15:04.720 --> 00:15:05.189 align:start position:0%
that's going to be our median so we can
still

00:15:05.189 --> 00:15:05.199 align:start position:0%
still
 

00:15:05.199 --> 00:15:07.829 align:start position:0%
still
find<00:15:05.519><c> the</c><00:15:05.680><c> median</c><00:15:06.240><c> in</c><00:15:06.560><c> o</c><00:15:06.800><c> of</c><00:15:06.959><c> one</c><00:15:07.279><c> time</c><00:15:07.519><c> which</c>

00:15:07.829 --> 00:15:07.839 align:start position:0%
find the median in o of one time which
 

00:15:07.839 --> 00:15:08.870 align:start position:0%
find the median in o of one time which
is<00:15:08.079><c> great</c>

00:15:08.870 --> 00:15:08.880 align:start position:0%
is great
 

00:15:08.880 --> 00:15:10.710 align:start position:0%
is great
now<00:15:09.040><c> with</c><00:15:09.360><c> all</c><00:15:09.519><c> that</c><00:15:09.760><c> being</c><00:15:10.079><c> said</c><00:15:10.320><c> let</c><00:15:10.480><c> me</c>

00:15:10.710 --> 00:15:10.720 align:start position:0%
now with all that being said let me
 

00:15:10.720 --> 00:15:11.990 align:start position:0%
now with all that being said let me
finally<00:15:11.199><c> show</c><00:15:11.360><c> you</c><00:15:11.519><c> the</c><00:15:11.680><c> code</c>

00:15:11.990 --> 00:15:12.000 align:start position:0%
finally show you the code
 

00:15:12.000 --> 00:15:13.670 align:start position:0%
finally show you the code
and<00:15:12.079><c> show</c><00:15:12.320><c> you</c><00:15:12.399><c> that</c><00:15:12.560><c> it's</c><00:15:12.800><c> not</c><00:15:13.040><c> as</c><00:15:13.279><c> long</c><00:15:13.519><c> as</c>

00:15:13.670 --> 00:15:13.680 align:start position:0%
and show you that it's not as long as
 

00:15:13.680 --> 00:15:16.150 align:start position:0%
and show you that it's not as long as
you<00:15:13.839><c> might</c><00:15:14.079><c> expect</c><00:15:14.959><c> okay</c><00:15:15.279><c> so</c><00:15:15.519><c> now</c><00:15:15.760><c> let's</c><00:15:16.000><c> look</c>

00:15:16.150 --> 00:15:16.160 align:start position:0%
you might expect okay so now let's look
 

00:15:16.160 --> 00:15:17.269 align:start position:0%
you might expect okay so now let's look
at<00:15:16.320><c> the</c><00:15:16.480><c> code</c>

00:15:17.269 --> 00:15:17.279 align:start position:0%
at the code
 

00:15:17.279 --> 00:15:18.949 align:start position:0%
at the code
so<00:15:17.600><c> here's</c><00:15:17.920><c> a</c><00:15:18.000><c> couple</c><00:15:18.320><c> comments</c><00:15:18.639><c> we're</c><00:15:18.800><c> gonna</c>

00:15:18.949 --> 00:15:18.959 align:start position:0%
so here's a couple comments we're gonna
 

00:15:18.959 --> 00:15:21.269 align:start position:0%
so here's a couple comments we're gonna
have<00:15:19.120><c> two</c><00:15:19.440><c> heaps</c><00:15:19.920><c> large</c><00:15:20.240><c> and</c><00:15:20.480><c> small</c>

00:15:21.269 --> 00:15:21.279 align:start position:0%
have two heaps large and small
 

00:15:21.279 --> 00:15:23.829 align:start position:0%
have two heaps large and small
large<00:15:21.600><c> is</c><00:15:21.760><c> gonna</c><00:15:21.920><c> be</c><00:15:22.079><c> a</c><00:15:22.240><c> min</c><00:15:22.480><c> heap</c><00:15:23.040><c> mac</c><00:15:23.440><c> or</c>

00:15:23.829 --> 00:15:23.839 align:start position:0%
large is gonna be a min heap mac or
 

00:15:23.839 --> 00:15:25.590 align:start position:0%
large is gonna be a min heap mac or
small<00:15:24.240><c> is</c><00:15:24.320><c> gonna</c><00:15:24.480><c> be</c><00:15:24.639><c> a</c><00:15:24.800><c> max</c><00:15:25.120><c> heap</c>

00:15:25.590 --> 00:15:25.600 align:start position:0%
small is gonna be a max heap
 

00:15:25.600 --> 00:15:28.470 align:start position:0%
small is gonna be a max heap
and<00:15:25.760><c> the</c><00:15:25.920><c> heaps</c><00:15:26.240><c> should</c><00:15:26.480><c> be</c><00:15:26.720><c> roughly</c><00:15:27.279><c> equal</c><00:15:27.519><c> to</c>

00:15:28.470 --> 00:15:28.480 align:start position:0%
and the heaps should be roughly equal to
 

00:15:28.480 --> 00:15:29.030 align:start position:0%
and the heaps should be roughly equal to
roughly

00:15:29.030 --> 00:15:29.040 align:start position:0%
roughly
 

00:15:29.040 --> 00:15:31.430 align:start position:0%
roughly
the<00:15:29.199><c> same</c><00:15:29.519><c> size</c><00:15:30.079><c> so</c><00:15:30.320><c> in</c><00:15:30.560><c> python</c><00:15:31.120><c> you</c><00:15:31.199><c> can</c>

00:15:31.430 --> 00:15:31.440 align:start position:0%
the same size so in python you can
 

00:15:31.440 --> 00:15:32.870 align:start position:0%
the same size so in python you can
actually<00:15:32.000><c> have</c><00:15:32.240><c> a</c><00:15:32.399><c> heap</c>

00:15:32.870 --> 00:15:32.880 align:start position:0%
actually have a heap
 

00:15:32.880 --> 00:15:35.590 align:start position:0%
actually have a heap
be<00:15:33.199><c> just</c><00:15:33.519><c> a</c><00:15:33.920><c> list</c><00:15:34.639><c> and</c><00:15:34.880><c> i'll</c><00:15:35.120><c> show</c><00:15:35.279><c> you</c><00:15:35.440><c> the</c>

00:15:35.590 --> 00:15:35.600 align:start position:0%
be just a list and i'll show you the
 

00:15:35.600 --> 00:15:37.430 align:start position:0%
be just a list and i'll show you the
other<00:15:35.839><c> things</c><00:15:36.079><c> we'll</c><00:15:36.240><c> need</c><00:15:36.399><c> to</c><00:15:36.560><c> do</c><00:15:36.800><c> later</c><00:15:37.199><c> so</c>

00:15:37.430 --> 00:15:37.440 align:start position:0%
other things we'll need to do later so
 

00:15:37.440 --> 00:15:39.110 align:start position:0%
other things we'll need to do later so
actually<00:15:37.759><c> in</c><00:15:37.920><c> python</c><00:15:38.399><c> since</c><00:15:38.639><c> these</c><00:15:38.880><c> are</c>

00:15:39.110 --> 00:15:39.120 align:start position:0%
actually in python since these are
 

00:15:39.120 --> 00:15:40.069 align:start position:0%
actually in python since these are
members

00:15:40.069 --> 00:15:40.079 align:start position:0%
members
 

00:15:40.079 --> 00:15:42.550 align:start position:0%
members
of<00:15:40.240><c> this</c><00:15:40.560><c> object</c><00:15:41.440><c> large</c><00:15:41.759><c> and</c><00:15:41.920><c> small</c><00:15:42.240><c> we</c><00:15:42.399><c> need</c>

00:15:42.550 --> 00:15:42.560 align:start position:0%
of this object large and small we need
 

00:15:42.560 --> 00:15:43.189 align:start position:0%
of this object large and small we need
to

00:15:43.189 --> 00:15:43.199 align:start position:0%
to
 

00:15:43.199 --> 00:15:46.470 align:start position:0%
to
have<00:15:43.759><c> a</c><00:15:44.079><c> self</c><00:15:44.480><c> as</c><00:15:44.639><c> the</c><00:15:44.800><c> prefix</c><00:15:45.759><c> and</c><00:15:46.000><c> so</c>

00:15:46.470 --> 00:15:46.480 align:start position:0%
have a self as the prefix and so
 

00:15:46.480 --> 00:15:48.550 align:start position:0%
have a self as the prefix and so
now<00:15:46.720><c> we</c><00:15:46.880><c> have</c><00:15:47.279><c> two</c><00:15:47.519><c> functions</c><00:15:47.920><c> to</c><00:15:48.079><c> implement</c>

00:15:48.550 --> 00:15:48.560 align:start position:0%
now we have two functions to implement
 

00:15:48.560 --> 00:15:50.629 align:start position:0%
now we have two functions to implement
find<00:15:48.800><c> median</c><00:15:49.199><c> and</c><00:15:49.360><c> add</c><00:15:49.600><c> num</c><00:15:49.839><c> let's</c><00:15:50.160><c> start</c><00:15:50.320><c> with</c>

00:15:50.629 --> 00:15:50.639 align:start position:0%
find median and add num let's start with
 

00:15:50.639 --> 00:15:51.509 align:start position:0%
find median and add num let's start with
add<00:15:50.959><c> num</c>

00:15:51.509 --> 00:15:51.519 align:start position:0%
add num
 

00:15:51.519 --> 00:15:53.350 align:start position:0%
add num
so<00:15:52.079><c> just</c><00:15:52.240><c> like</c><00:15:52.480><c> i</c><00:15:52.639><c> showed</c><00:15:52.880><c> you</c><00:15:52.959><c> what</c><00:15:53.199><c> i'm</c><00:15:53.279><c> going</c>

00:15:53.350 --> 00:15:53.360 align:start position:0%
so just like i showed you what i'm going
 

00:15:53.360 --> 00:15:54.629 align:start position:0%
so just like i showed you what i'm going
to<00:15:53.600><c> do</c><00:15:54.160><c> is</c>

00:15:54.629 --> 00:15:54.639 align:start position:0%
to do is
 

00:15:54.639 --> 00:15:57.350 align:start position:0%
to do is
i'm<00:15:55.040><c> always</c><00:15:55.440><c> going</c><00:15:55.519><c> to</c><00:15:55.680><c> take</c><00:15:56.000><c> num</c><00:15:56.399><c> and</c><00:15:56.880><c> add</c><00:15:57.120><c> it</c>

00:15:57.350 --> 00:15:57.360 align:start position:0%
i'm always going to take num and add it
 

00:15:57.360 --> 00:15:58.949 align:start position:0%
i'm always going to take num and add it
to<00:15:57.600><c> the</c><00:15:57.920><c> small</c><00:15:58.320><c> heap</c><00:15:58.639><c> so</c>

00:15:58.949 --> 00:15:58.959 align:start position:0%
to the small heap so
 

00:15:58.959 --> 00:16:01.749 align:start position:0%
to the small heap so
heap<00:15:59.279><c> q</c><00:15:59.600><c> dot</c><00:15:59.920><c> heap</c><00:16:00.480><c> push</c><00:16:01.040><c> this</c><00:16:01.199><c> is</c><00:16:01.279><c> how</c><00:16:01.440><c> you</c><00:16:01.600><c> do</c>

00:16:01.749 --> 00:16:01.759 align:start position:0%
heap q dot heap push this is how you do
 

00:16:01.759 --> 00:16:02.870 align:start position:0%
heap q dot heap push this is how you do
it<00:16:01.920><c> in</c><00:16:02.160><c> python</c>

00:16:02.870 --> 00:16:02.880 align:start position:0%
it in python
 

00:16:02.880 --> 00:16:04.550 align:start position:0%
it in python
other<00:16:03.120><c> languages</c><00:16:03.680><c> might</c><00:16:03.839><c> be</c><00:16:04.160><c> different</c>

00:16:04.550 --> 00:16:04.560 align:start position:0%
other languages might be different
 

00:16:04.560 --> 00:16:06.949 align:start position:0%
other languages might be different
obviously<00:16:05.519><c> so</c><00:16:05.759><c> to</c><00:16:06.000><c> the</c><00:16:06.160><c> small</c><00:16:06.560><c> heap</c><00:16:06.800><c> we're</c>

00:16:06.949 --> 00:16:06.959 align:start position:0%
obviously so to the small heap we're
 

00:16:06.959 --> 00:16:08.629 align:start position:0%
obviously so to the small heap we're
going<00:16:07.120><c> to</c><00:16:07.360><c> push</c><00:16:07.839><c> num</c>

00:16:08.629 --> 00:16:08.639 align:start position:0%
going to push num
 

00:16:08.639 --> 00:16:11.590 align:start position:0%
going to push num
now<00:16:09.360><c> python</c><00:16:09.920><c> is</c><00:16:10.079><c> kind</c><00:16:10.240><c> of</c><00:16:10.639><c> annoying</c><00:16:11.199><c> in</c><00:16:11.360><c> that</c>

00:16:11.590 --> 00:16:11.600 align:start position:0%
now python is kind of annoying in that
 

00:16:11.600 --> 00:16:12.470 align:start position:0%
now python is kind of annoying in that
it<00:16:11.920><c> only</c>

00:16:12.470 --> 00:16:12.480 align:start position:0%
it only
 

00:16:12.480 --> 00:16:14.870 align:start position:0%
it only
implements<00:16:13.120><c> min</c><00:16:13.440><c> heaps</c><00:16:13.759><c> we</c><00:16:13.920><c> know</c><00:16:14.240><c> small</c><00:16:14.639><c> is</c>

00:16:14.870 --> 00:16:14.880 align:start position:0%
implements min heaps we know small is
 

00:16:14.880 --> 00:16:15.670 align:start position:0%
implements min heaps we know small is
actually<00:16:15.279><c> a</c>

00:16:15.670 --> 00:16:15.680 align:start position:0%
actually a
 

00:16:15.680 --> 00:16:19.829 align:start position:0%
actually a
max<00:16:16.079><c> heap</c><00:16:16.880><c> so</c><00:16:17.680><c> to</c><00:16:18.639><c> get</c><00:16:18.880><c> around</c><00:16:19.279><c> that</c><00:16:19.519><c> what</c><00:16:19.759><c> i'm</c>

00:16:19.829 --> 00:16:19.839 align:start position:0%
max heap so to get around that what i'm
 

00:16:19.839 --> 00:16:20.230 align:start position:0%
max heap so to get around that what i'm
going<00:16:19.920><c> to</c>

00:16:20.230 --> 00:16:20.240 align:start position:0%
going to
 

00:16:20.240 --> 00:16:21.910 align:start position:0%
going to
have<00:16:20.399><c> to</c><00:16:20.560><c> do</c><00:16:20.800><c> is</c><00:16:20.959><c> take</c><00:16:21.199><c> every</c><00:16:21.440><c> number</c><00:16:21.759><c> and</c>

00:16:21.910 --> 00:16:21.920 align:start position:0%
have to do is take every number and
 

00:16:21.920 --> 00:16:24.310 align:start position:0%
have to do is take every number and
actually<00:16:22.399><c> multiply</c><00:16:22.880><c> it</c><00:16:22.959><c> by</c><00:16:23.199><c> negative</c><00:16:23.680><c> one</c>

00:16:24.310 --> 00:16:24.320 align:start position:0%
actually multiply it by negative one
 

00:16:24.320 --> 00:16:26.550 align:start position:0%
actually multiply it by negative one
this<00:16:24.639><c> allows</c><00:16:24.959><c> us</c><00:16:25.120><c> to</c><00:16:25.279><c> actually</c><00:16:25.680><c> implement</c><00:16:26.240><c> a</c>

00:16:26.550 --> 00:16:26.560 align:start position:0%
this allows us to actually implement a
 

00:16:26.560 --> 00:16:27.670 align:start position:0%
this allows us to actually implement a
max<00:16:26.880><c> heap</c><00:16:27.199><c> which</c>

00:16:27.670 --> 00:16:27.680 align:start position:0%
max heap which
 

00:16:27.680 --> 00:16:29.749 align:start position:0%
max heap which
isn't<00:16:28.079><c> implemented</c><00:16:28.639><c> by</c><00:16:28.800><c> default</c><00:16:29.199><c> in</c><00:16:29.360><c> python</c>

00:16:29.749 --> 00:16:29.759 align:start position:0%
isn't implemented by default in python
 

00:16:29.759 --> 00:16:30.949 align:start position:0%
isn't implemented by default in python
for<00:16:29.920><c> some</c><00:16:30.160><c> reason</c>

00:16:30.949 --> 00:16:30.959 align:start position:0%
for some reason
 

00:16:30.959 --> 00:16:33.189 align:start position:0%
for some reason
but<00:16:31.440><c> what</c><00:16:31.680><c> i'm</c><00:16:31.759><c> doing</c><00:16:32.000><c> here</c><00:16:32.240><c> is</c><00:16:32.399><c> taking</c><00:16:32.800><c> num</c>

00:16:33.189 --> 00:16:33.199 align:start position:0%
but what i'm doing here is taking num
 

00:16:33.199 --> 00:16:34.629 align:start position:0%
but what i'm doing here is taking num
and<00:16:33.440><c> adding</c><00:16:33.839><c> it</c><00:16:34.079><c> to</c>

00:16:34.629 --> 00:16:34.639 align:start position:0%
and adding it to
 

00:16:34.639 --> 00:16:37.670 align:start position:0%
and adding it to
the<00:16:34.959><c> small</c><00:16:35.440><c> heap</c><00:16:35.759><c> the</c><00:16:36.079><c> max</c><00:16:36.399><c> heap</c><00:16:36.720><c> right</c><00:16:37.360><c> but</c>

00:16:37.670 --> 00:16:37.680 align:start position:0%
the small heap the max heap right but
 

00:16:37.680 --> 00:16:39.509 align:start position:0%
the small heap the max heap right but
now<00:16:38.000><c> we</c><00:16:38.160><c> want</c><00:16:38.320><c> to</c><00:16:38.560><c> make</c><00:16:38.959><c> sure</c>

00:16:39.509 --> 00:16:39.519 align:start position:0%
now we want to make sure
 

00:16:39.519 --> 00:16:42.949 align:start position:0%
now we want to make sure
every<00:16:40.160><c> element</c><00:16:41.120><c> in</c><00:16:41.839><c> small</c>

00:16:42.949 --> 00:16:42.959 align:start position:0%
every element in small
 

00:16:42.959 --> 00:16:46.310 align:start position:0%
every element in small
is<00:16:43.360><c> less</c><00:16:44.320><c> is</c><00:16:44.720><c> less</c><00:16:44.959><c> than</c><00:16:45.279><c> or</c><00:16:45.519><c> equal</c><00:16:45.920><c> to</c>

00:16:46.310 --> 00:16:46.320 align:start position:0%
is less is less than or equal to
 

00:16:46.320 --> 00:16:49.910 align:start position:0%
is less is less than or equal to
every<00:16:46.800><c> element</c><00:16:47.600><c> in</c><00:16:48.399><c> large</c><00:16:49.040><c> right</c><00:16:49.360><c> so</c><00:16:49.600><c> every</c>

00:16:49.910 --> 00:16:49.920 align:start position:0%
every element in large right so every
 

00:16:49.920 --> 00:16:51.590 align:start position:0%
every element in large right so every
element<00:16:50.240><c> in</c><00:16:50.320><c> the</c><00:16:50.480><c> small</c><00:16:50.720><c> heap</c><00:16:50.959><c> has</c><00:16:51.120><c> to</c><00:16:51.199><c> be</c><00:16:51.360><c> less</c>

00:16:51.590 --> 00:16:51.600 align:start position:0%
element in the small heap has to be less
 

00:16:51.600 --> 00:16:53.030 align:start position:0%
element in the small heap has to be less
than<00:16:51.759><c> or</c><00:16:51.920><c> equal</c><00:16:52.160><c> to</c><00:16:52.320><c> every</c><00:16:52.480><c> element</c><00:16:52.880><c> in</c><00:16:52.959><c> the</c>

00:16:53.030 --> 00:16:53.040 align:start position:0%
than or equal to every element in the
 

00:16:53.040 --> 00:16:54.550 align:start position:0%
than or equal to every element in the
large<00:16:53.360><c> heap</c><00:16:53.600><c> so</c><00:16:53.759><c> i'm</c><00:16:53.920><c> going</c><00:16:54.000><c> to</c><00:16:54.079><c> make</c><00:16:54.320><c> sure</c>

00:16:54.550 --> 00:16:54.560 align:start position:0%
large heap so i'm going to make sure
 

00:16:54.560 --> 00:16:55.670 align:start position:0%
large heap so i'm going to make sure
that<00:16:54.720><c> that's</c><00:16:55.040><c> true</c><00:16:55.360><c> so</c>

00:16:55.670 --> 00:16:55.680 align:start position:0%
that that's true so
 

00:16:55.680 --> 00:16:59.350 align:start position:0%
that that's true so
if<00:16:56.240><c> if</c><00:16:56.560><c> small</c><00:16:57.440><c> and</c><00:16:57.759><c> large</c><00:16:58.240><c> are</c><00:16:58.480><c> non-null</c>

00:16:59.350 --> 00:16:59.360 align:start position:0%
if if small and large are non-null
 

00:16:59.360 --> 00:17:02.550 align:start position:0%
if if small and large are non-null
and<00:17:00.160><c> so</c><00:17:00.480><c> from</c><00:17:01.040><c> from</c><00:17:01.440><c> small</c><00:17:01.920><c> from</c><00:17:02.160><c> our</c>

00:17:02.550 --> 00:17:02.560 align:start position:0%
and so from from small from our
 

00:17:02.560 --> 00:17:04.390 align:start position:0%
and so from from small from our
small<00:17:02.880><c> heap</c><00:17:03.279><c> our</c><00:17:03.440><c> max</c><00:17:03.759><c> heap</c><00:17:04.000><c> what</c><00:17:04.160><c> i'm</c><00:17:04.240><c> going</c>

00:17:04.390 --> 00:17:04.400 align:start position:0%
small heap our max heap what i'm going
 

00:17:04.400 --> 00:17:07.270 align:start position:0%
small heap our max heap what i'm going
to<00:17:04.480><c> do</c><00:17:04.720><c> is</c><00:17:05.039><c> get</c><00:17:05.439><c> the</c><00:17:05.839><c> max</c><00:17:06.160><c> value</c><00:17:06.559><c> from</c><00:17:06.799><c> it</c><00:17:06.959><c> so</c>

00:17:07.270 --> 00:17:07.280 align:start position:0%
to do is get the max value from it so
 

00:17:07.280 --> 00:17:08.949 align:start position:0%
to do is get the max value from it so
how<00:17:07.439><c> can</c><00:17:07.600><c> i</c><00:17:07.679><c> do</c><00:17:07.839><c> that</c><00:17:08.000><c> i</c><00:17:08.160><c> can</c><00:17:08.240><c> just</c><00:17:08.480><c> take</c><00:17:08.720><c> the</c>

00:17:08.949 --> 00:17:08.959 align:start position:0%
how can i do that i can just take the
 

00:17:08.959 --> 00:17:10.870 align:start position:0%
how can i do that i can just take the
index<00:17:09.439><c> of</c><00:17:09.600><c> 0</c><00:17:10.000><c> because</c><00:17:10.240><c> it's</c>

00:17:10.870 --> 00:17:10.880 align:start position:0%
index of 0 because it's
 

00:17:10.880 --> 00:17:12.710 align:start position:0%
index of 0 because it's
implemented<00:17:11.439><c> as</c><00:17:11.600><c> a</c><00:17:11.760><c> list</c><00:17:12.240><c> heaps</c><00:17:12.559><c> are</c>

00:17:12.710 --> 00:17:12.720 align:start position:0%
implemented as a list heaps are
 

00:17:12.720 --> 00:17:14.069 align:start position:0%
implemented as a list heaps are
implemented<00:17:13.280><c> as</c><00:17:13.520><c> lists</c>

00:17:14.069 --> 00:17:14.079 align:start position:0%
implemented as lists
 

00:17:14.079 --> 00:17:15.829 align:start position:0%
implemented as lists
so<00:17:14.240><c> if</c><00:17:14.400><c> you</c><00:17:14.480><c> get</c><00:17:14.559><c> the</c><00:17:14.720><c> 0th</c><00:17:15.280><c> index</c><00:17:15.600><c> you're</c>

00:17:15.829 --> 00:17:15.839 align:start position:0%
so if you get the 0th index you're
 

00:17:15.839 --> 00:17:17.350 align:start position:0%
so if you get the 0th index you're
getting<00:17:16.079><c> the</c><00:17:16.400><c> max</c><00:17:16.799><c> value</c>

00:17:17.350 --> 00:17:17.360 align:start position:0%
getting the max value
 

00:17:17.360 --> 00:17:19.350 align:start position:0%
getting the max value
we<00:17:17.600><c> know</c><00:17:17.839><c> that</c><00:17:18.079><c> every</c><00:17:18.319><c> time</c><00:17:18.480><c> we</c><00:17:18.720><c> add</c><00:17:18.959><c> a</c><00:17:19.039><c> value</c>

00:17:19.350 --> 00:17:19.360 align:start position:0%
we know that every time we add a value
 

00:17:19.360 --> 00:17:20.870 align:start position:0%
we know that every time we add a value
to<00:17:19.600><c> the</c><00:17:19.679><c> small</c><00:17:19.919><c> heap</c><00:17:20.079><c> we're</c><00:17:20.319><c> multiplying</c><00:17:20.799><c> it</c>

00:17:20.870 --> 00:17:20.880 align:start position:0%
to the small heap we're multiplying it
 

00:17:20.880 --> 00:17:21.829 align:start position:0%
to the small heap we're multiplying it
by<00:17:21.120><c> negative</c><00:17:21.520><c> one</c>

00:17:21.829 --> 00:17:21.839 align:start position:0%
by negative one
 

00:17:21.839 --> 00:17:24.069 align:start position:0%
by negative one
so<00:17:22.079><c> to</c><00:17:22.240><c> reverse</c><00:17:22.799><c> that</c><00:17:23.120><c> i'm</c><00:17:23.280><c> going</c><00:17:23.360><c> to</c><00:17:23.520><c> take</c>

00:17:24.069 --> 00:17:24.079 align:start position:0%
so to reverse that i'm going to take
 

00:17:24.079 --> 00:17:25.110 align:start position:0%
so to reverse that i'm going to take
this<00:17:24.400><c> value</c>

00:17:25.110 --> 00:17:25.120 align:start position:0%
this value
 

00:17:25.120 --> 00:17:27.029 align:start position:0%
this value
and<00:17:25.520><c> multiply</c><00:17:26.000><c> it</c><00:17:26.079><c> by</c><00:17:26.240><c> negative</c><00:17:26.559><c> one</c><00:17:26.799><c> and</c><00:17:26.880><c> get</c>

00:17:27.029 --> 00:17:27.039 align:start position:0%
and multiply it by negative one and get
 

00:17:27.039 --> 00:17:29.190 align:start position:0%
and multiply it by negative one and get
the<00:17:27.280><c> true</c><00:17:27.679><c> value</c><00:17:28.000><c> that</c><00:17:28.160><c> we</c><00:17:28.319><c> actually</c><00:17:28.640><c> added</c><00:17:29.039><c> to</c>

00:17:29.190 --> 00:17:29.200 align:start position:0%
the true value that we actually added to
 

00:17:29.200 --> 00:17:30.070 align:start position:0%
the true value that we actually added to
the<00:17:29.360><c> heap</c>

00:17:30.070 --> 00:17:30.080 align:start position:0%
the heap
 

00:17:30.080 --> 00:17:32.870 align:start position:0%
the heap
and<00:17:30.320><c> so</c><00:17:30.640><c> i</c><00:17:30.799><c> wanna</c><00:17:31.039><c> know</c><00:17:31.360><c> is</c><00:17:31.600><c> this</c><00:17:31.919><c> value</c>

00:17:32.870 --> 00:17:32.880 align:start position:0%
and so i wanna know is this value
 

00:17:32.880 --> 00:17:34.070 align:start position:0%
and so i wanna know is this value
somehow

00:17:34.070 --> 00:17:34.080 align:start position:0%
somehow
 

00:17:34.080 --> 00:17:37.190 align:start position:0%
somehow
greater<00:17:34.640><c> than</c><00:17:35.280><c> the</c><00:17:35.520><c> smallest</c><00:17:36.080><c> value</c><00:17:36.640><c> in</c><00:17:36.880><c> our</c>

00:17:37.190 --> 00:17:37.200 align:start position:0%
greater than the smallest value in our
 

00:17:37.200 --> 00:17:38.950 align:start position:0%
greater than the smallest value in our
large<00:17:37.520><c> heap</c><00:17:37.840><c> how</c><00:17:38.000><c> can</c><00:17:38.160><c> i</c><00:17:38.240><c> get</c><00:17:38.400><c> the</c><00:17:38.480><c> smallest</c>

00:17:38.950 --> 00:17:38.960 align:start position:0%
large heap how can i get the smallest
 

00:17:38.960 --> 00:17:40.549 align:start position:0%
large heap how can i get the smallest
value<00:17:39.280><c> in</c><00:17:39.360><c> our</c><00:17:39.520><c> large</c><00:17:39.840><c> heap</c><00:17:40.080><c> i</c><00:17:40.160><c> can</c><00:17:40.320><c> do</c><00:17:40.480><c> the</c>

00:17:40.549 --> 00:17:40.559 align:start position:0%
value in our large heap i can do the
 

00:17:40.559 --> 00:17:41.510 align:start position:0%
value in our large heap i can do the
exact<00:17:40.880><c> same</c><00:17:41.120><c> thing</c>

00:17:41.510 --> 00:17:41.520 align:start position:0%
exact same thing
 

00:17:41.520 --> 00:17:43.430 align:start position:0%
exact same thing
index<00:17:42.000><c> of</c><00:17:42.160><c> zero</c><00:17:42.559><c> but</c><00:17:42.720><c> i</c><00:17:42.799><c> didn't</c><00:17:43.039><c> have</c><00:17:43.200><c> to</c>

00:17:43.430 --> 00:17:43.440 align:start position:0%
index of zero but i didn't have to
 

00:17:43.440 --> 00:17:45.430 align:start position:0%
index of zero but i didn't have to
multiply<00:17:43.919><c> this</c><00:17:44.160><c> by</c><00:17:44.400><c> negative</c><00:17:44.799><c> one</c>

00:17:45.430 --> 00:17:45.440 align:start position:0%
multiply this by negative one
 

00:17:45.440 --> 00:17:48.070 align:start position:0%
multiply this by negative one
because<00:17:46.240><c> this</c><00:17:46.640><c> is</c><00:17:46.799><c> a</c><00:17:46.960><c> min</c><00:17:47.280><c> heap</c><00:17:47.679><c> and</c><00:17:47.840><c> that's</c>

00:17:48.070 --> 00:17:48.080 align:start position:0%
because this is a min heap and that's
 

00:17:48.080 --> 00:17:50.070 align:start position:0%
because this is a min heap and that's
what<00:17:48.240><c> python</c><00:17:48.720><c> does</c><00:17:49.039><c> by</c><00:17:49.280><c> default</c>

00:17:50.070 --> 00:17:50.080 align:start position:0%
what python does by default
 

00:17:50.080 --> 00:17:53.430 align:start position:0%
what python does by default
so<00:17:50.480><c> if</c><00:17:50.880><c> this</c><00:17:51.200><c> condition</c><00:17:51.919><c> is</c><00:17:52.400><c> true</c><00:17:52.880><c> let</c><00:17:53.039><c> me</c><00:17:53.200><c> make</c>

00:17:53.430 --> 00:17:53.440 align:start position:0%
so if this condition is true let me make
 

00:17:53.440 --> 00:17:54.870 align:start position:0%
so if this condition is true let me make
it<00:17:53.520><c> look</c><00:17:53.679><c> a</c><00:17:53.760><c> little</c><00:17:53.919><c> nicer</c><00:17:54.320><c> so</c>

00:17:54.870 --> 00:17:54.880 align:start position:0%
it look a little nicer so
 

00:17:54.880 --> 00:17:57.830 align:start position:0%
it look a little nicer so
so<00:17:55.039><c> that</c><00:17:55.440><c> mainly</c><00:17:55.840><c> this</c><00:17:56.080><c> condition</c><00:17:56.880><c> is</c><00:17:57.120><c> true</c>

00:17:57.830 --> 00:17:57.840 align:start position:0%
so that mainly this condition is true
 

00:17:57.840 --> 00:17:59.669 align:start position:0%
so that mainly this condition is true
meaning<00:17:58.240><c> that</c><00:17:58.559><c> some</c><00:17:58.880><c> value</c>

00:17:59.669 --> 00:17:59.679 align:start position:0%
meaning that some value
 

00:17:59.679 --> 00:18:02.549 align:start position:0%
meaning that some value
in<00:18:00.080><c> our</c><00:18:00.720><c> our</c><00:18:00.960><c> small</c><00:18:01.280><c> heap</c><00:18:01.760><c> is</c><00:18:02.000><c> greater</c><00:18:02.400><c> than</c>

00:18:02.549 --> 00:18:02.559 align:start position:0%
in our our small heap is greater than
 

00:18:02.559 --> 00:18:04.150 align:start position:0%
in our our small heap is greater than
our<00:18:02.720><c> large</c><00:18:02.960><c> heap</c><00:18:03.280><c> then</c><00:18:03.440><c> we</c><00:18:03.600><c> have</c><00:18:03.760><c> to</c>

00:18:04.150 --> 00:18:04.160 align:start position:0%
our large heap then we have to
 

00:18:04.160 --> 00:18:06.950 align:start position:0%
our large heap then we have to
pop<00:18:04.720><c> from</c><00:18:04.960><c> our</c><00:18:05.120><c> small</c><00:18:05.440><c> heap</c><00:18:06.000><c> and</c><00:18:06.160><c> then</c><00:18:06.480><c> add</c><00:18:06.799><c> to</c>

00:18:06.950 --> 00:18:06.960 align:start position:0%
pop from our small heap and then add to
 

00:18:06.960 --> 00:18:07.990 align:start position:0%
pop from our small heap and then add to
our<00:18:07.120><c> large</c><00:18:07.520><c> heap</c>

00:18:07.990 --> 00:18:08.000 align:start position:0%
our large heap
 

00:18:08.000 --> 00:18:11.190 align:start position:0%
our large heap
so<00:18:08.240><c> i'm</c><00:18:08.480><c> going</c><00:18:08.799><c> to</c><00:18:09.679><c> heap</c><00:18:10.080><c> q</c><00:18:10.640><c> dot</c>

00:18:11.190 --> 00:18:11.200 align:start position:0%
so i'm going to heap q dot
 

00:18:11.200 --> 00:18:13.590 align:start position:0%
so i'm going to heap q dot
heap<00:18:11.760><c> pop</c><00:18:12.400><c> so</c><00:18:12.559><c> i'm</c><00:18:12.640><c> going</c><00:18:12.720><c> to</c><00:18:12.880><c> pop</c><00:18:13.200><c> from</c><00:18:13.440><c> our</c>

00:18:13.590 --> 00:18:13.600 align:start position:0%
heap pop so i'm going to pop from our
 

00:18:13.600 --> 00:18:15.590 align:start position:0%
heap pop so i'm going to pop from our
small<00:18:13.919><c> heap</c><00:18:14.240><c> i'm</c><00:18:14.400><c> going</c><00:18:14.559><c> to</c><00:18:14.720><c> get</c><00:18:14.960><c> the</c><00:18:15.200><c> largest</c>

00:18:15.590 --> 00:18:15.600 align:start position:0%
small heap i'm going to get the largest
 

00:18:15.600 --> 00:18:18.070 align:start position:0%
small heap i'm going to get the largest
value<00:18:15.919><c> from</c><00:18:16.160><c> our</c><00:18:16.240><c> small</c><00:18:16.559><c> heap</c><00:18:16.880><c> stored</c><00:18:17.280><c> in</c><00:18:17.520><c> val</c>

00:18:18.070 --> 00:18:18.080 align:start position:0%
value from our small heap stored in val
 

00:18:18.080 --> 00:18:20.630 align:start position:0%
value from our small heap stored in val
and<00:18:18.240><c> then</c><00:18:18.559><c> i'm</c><00:18:18.720><c> going</c><00:18:18.960><c> to</c><00:18:19.600><c> i'm</c><00:18:19.840><c> going</c><00:18:19.919><c> to</c><00:18:20.240><c> push</c>

00:18:20.630 --> 00:18:20.640 align:start position:0%
and then i'm going to i'm going to push
 

00:18:20.640 --> 00:18:21.750 align:start position:0%
and then i'm going to i'm going to push
that<00:18:20.960><c> value</c>

00:18:21.750 --> 00:18:21.760 align:start position:0%
that value
 

00:18:21.760 --> 00:18:24.789 align:start position:0%
that value
to<00:18:22.160><c> our</c><00:18:22.559><c> large</c><00:18:22.960><c> heap</c><00:18:23.440><c> so</c><00:18:24.000><c> to</c><00:18:24.160><c> our</c><00:18:24.320><c> large</c><00:18:24.559><c> heap</c>

00:18:24.789 --> 00:18:24.799 align:start position:0%
to our large heap so to our large heap
 

00:18:24.799 --> 00:18:26.310 align:start position:0%
to our large heap so to our large heap
i'm<00:18:24.960><c> going</c><00:18:25.039><c> to</c><00:18:25.120><c> push</c><00:18:25.360><c> that</c><00:18:25.679><c> value</c>

00:18:26.310 --> 00:18:26.320 align:start position:0%
i'm going to push that value
 

00:18:26.320 --> 00:18:28.390 align:start position:0%
i'm going to push that value
basically<00:18:26.880><c> exactly</c><00:18:27.280><c> what</c><00:18:27.440><c> i</c><00:18:27.600><c> did</c><00:18:27.919><c> in</c><00:18:28.160><c> the</c>

00:18:28.390 --> 00:18:28.400 align:start position:0%
basically exactly what i did in the
 

00:18:28.400 --> 00:18:30.070 align:start position:0%
basically exactly what i did in the
picture<00:18:28.960><c> but</c><00:18:29.200><c> maybe</c><00:18:29.600><c> the</c>

00:18:30.070 --> 00:18:30.080 align:start position:0%
picture but maybe the
 

00:18:30.080 --> 00:18:32.150 align:start position:0%
picture but maybe the
code<00:18:30.320><c> is</c><00:18:30.480><c> a</c><00:18:30.480><c> little</c><00:18:30.720><c> confusing</c><00:18:31.679><c> oh</c><00:18:31.919><c> and</c>

00:18:32.150 --> 00:18:32.160 align:start position:0%
code is a little confusing oh and
 

00:18:32.160 --> 00:18:33.510 align:start position:0%
code is a little confusing oh and
actually<00:18:32.559><c> since</c><00:18:32.799><c> we</c><00:18:32.960><c> know</c>

00:18:33.510 --> 00:18:33.520 align:start position:0%
actually since we know
 

00:18:33.520 --> 00:18:36.230 align:start position:0%
actually since we know
every<00:18:33.840><c> value</c><00:18:34.240><c> pushed</c><00:18:34.720><c> to</c><00:18:34.880><c> the</c><00:18:35.039><c> small</c><00:18:35.440><c> heap</c><00:18:36.080><c> is</c>

00:18:36.230 --> 00:18:36.240 align:start position:0%
every value pushed to the small heap is
 

00:18:36.240 --> 00:18:37.909 align:start position:0%
every value pushed to the small heap is
being<00:18:36.400><c> multiplied</c><00:18:36.960><c> by</c><00:18:37.120><c> negative</c><00:18:37.520><c> one</c>

00:18:37.909 --> 00:18:37.919 align:start position:0%
being multiplied by negative one
 

00:18:37.919 --> 00:18:40.070 align:start position:0%
being multiplied by negative one
to<00:18:38.080><c> reverse</c><00:18:38.559><c> that</c><00:18:38.799><c> we</c><00:18:38.960><c> have</c><00:18:39.039><c> to</c><00:18:39.280><c> also</c><00:18:39.600><c> multiply</c>

00:18:40.070 --> 00:18:40.080 align:start position:0%
to reverse that we have to also multiply
 

00:18:40.080 --> 00:18:42.470 align:start position:0%
to reverse that we have to also multiply
it<00:18:40.160><c> by</c><00:18:40.320><c> negative</c><00:18:40.640><c> one</c><00:18:40.880><c> when</c><00:18:41.039><c> we</c><00:18:41.280><c> pop</c><00:18:41.600><c> from</c><00:18:41.919><c> it</c>

00:18:42.470 --> 00:18:42.480 align:start position:0%
it by negative one when we pop from it
 

00:18:42.480 --> 00:18:44.070 align:start position:0%
it by negative one when we pop from it
because<00:18:42.799><c> look</c><00:18:43.039><c> when</c><00:18:43.200><c> we</c><00:18:43.360><c> pushed</c><00:18:43.679><c> to</c><00:18:43.840><c> it</c><00:18:43.919><c> we</c>

00:18:44.070 --> 00:18:44.080 align:start position:0%
because look when we pushed to it we
 

00:18:44.080 --> 00:18:46.470 align:start position:0%
because look when we pushed to it we
multiplied<00:18:44.640><c> that</c><00:18:44.960><c> number</c><00:18:45.280><c> by</c><00:18:45.520><c> negative</c><00:18:45.919><c> one</c>

00:18:46.470 --> 00:18:46.480 align:start position:0%
multiplied that number by negative one
 

00:18:46.480 --> 00:18:49.270 align:start position:0%
multiplied that number by negative one
but<00:18:47.039><c> to</c><00:18:47.360><c> our</c><00:18:47.679><c> large</c><00:18:48.000><c> heap</c><00:18:48.320><c> we</c><00:18:48.640><c> can</c><00:18:48.880><c> actually</c>

00:18:49.270 --> 00:18:49.280 align:start position:0%
but to our large heap we can actually
 

00:18:49.280 --> 00:18:51.350 align:start position:0%
but to our large heap we can actually
give<00:18:49.600><c> the</c><00:18:49.760><c> correct</c><00:18:50.320><c> values</c><00:18:50.880><c> we</c><00:18:50.960><c> don't</c><00:18:51.120><c> have</c><00:18:51.280><c> to</c>

00:18:51.350 --> 00:18:51.360 align:start position:0%
give the correct values we don't have to
 

00:18:51.360 --> 00:18:53.190 align:start position:0%
give the correct values we don't have to
multiply<00:18:51.840><c> by</c><00:18:52.080><c> negative</c><00:18:52.480><c> one</c>

00:18:53.190 --> 00:18:53.200 align:start position:0%
multiply by negative one
 

00:18:53.200 --> 00:18:54.789 align:start position:0%
multiply by negative one
that<00:18:53.440><c> is</c><00:18:53.679><c> actually</c><00:18:53.919><c> probably</c><00:18:54.320><c> one</c><00:18:54.480><c> of</c><00:18:54.559><c> the</c>

00:18:54.789 --> 00:18:54.799 align:start position:0%
that is actually probably one of the
 

00:18:54.799 --> 00:18:56.710 align:start position:0%
that is actually probably one of the
more<00:18:55.039><c> confusing</c><00:18:55.600><c> parts</c><00:18:56.000><c> about</c><00:18:56.320><c> this</c>

00:18:56.710 --> 00:18:56.720 align:start position:0%
more confusing parts about this
 

00:18:56.720 --> 00:18:58.950 align:start position:0%
more confusing parts about this
which<00:18:56.960><c> is</c><00:18:57.360><c> annoying</c><00:18:57.840><c> because</c><00:18:58.320><c> there's</c><00:18:58.559><c> no</c><00:18:58.799><c> way</c>

00:18:58.950 --> 00:18:58.960 align:start position:0%
which is annoying because there's no way
 

00:18:58.960 --> 00:19:00.950 align:start position:0%
which is annoying because there's no way
to<00:18:59.039><c> really</c><00:18:59.280><c> get</c><00:18:59.440><c> around</c><00:18:59.760><c> it</c><00:18:59.919><c> in</c><00:19:00.080><c> python</c>

00:19:00.950 --> 00:19:00.960 align:start position:0%
to really get around it in python
 

00:19:00.960 --> 00:19:03.270 align:start position:0%
to really get around it in python
so<00:19:01.120><c> now</c><00:19:01.360><c> we</c><00:19:01.600><c> check</c><00:19:01.919><c> this</c><00:19:02.160><c> condition</c><00:19:02.640><c> the</c><00:19:02.880><c> only</c>

00:19:03.270 --> 00:19:03.280 align:start position:0%
so now we check this condition the only
 

00:19:03.280 --> 00:19:05.029 align:start position:0%
so now we check this condition the only
other<00:19:03.520><c> condition</c><00:19:04.000><c> that</c><00:19:04.080><c> we</c><00:19:04.240><c> have</c><00:19:04.320><c> to</c><00:19:04.559><c> check</c>

00:19:05.029 --> 00:19:05.039 align:start position:0%
other condition that we have to check
 

00:19:05.039 --> 00:19:08.150 align:start position:0%
other condition that we have to check
is<00:19:05.600><c> what</c><00:19:05.840><c> if</c><00:19:06.000><c> the</c><00:19:06.240><c> size</c><00:19:06.880><c> is</c><00:19:07.200><c> uneven</c>

00:19:08.150 --> 00:19:08.160 align:start position:0%
is what if the size is uneven
 

00:19:08.160 --> 00:19:10.630 align:start position:0%
is what if the size is uneven
and<00:19:08.400><c> so</c><00:19:08.559><c> by</c><00:19:08.880><c> uneven</c><00:19:09.280><c> size</c><00:19:09.600><c> we</c><00:19:09.760><c> actually</c><00:19:10.080><c> mean</c><00:19:10.400><c> a</c>

00:19:10.630 --> 00:19:10.640 align:start position:0%
and so by uneven size we actually mean a
 

00:19:10.640 --> 00:19:11.190 align:start position:0%
and so by uneven size we actually mean a
difference

00:19:11.190 --> 00:19:11.200 align:start position:0%
difference
 

00:19:11.200 --> 00:19:14.150 align:start position:0%
difference
greater<00:19:12.000><c> than</c><00:19:12.400><c> one</c><00:19:12.720><c> so</c><00:19:12.960><c> if</c><00:19:13.200><c> the</c><00:19:13.440><c> length</c><00:19:13.840><c> of</c>

00:19:14.150 --> 00:19:14.160 align:start position:0%
greater than one so if the length of
 

00:19:14.160 --> 00:19:15.190 align:start position:0%
greater than one so if the length of
small

00:19:15.190 --> 00:19:15.200 align:start position:0%
small
 

00:19:15.200 --> 00:19:18.710 align:start position:0%
small
is<00:19:15.679><c> greater</c><00:19:16.160><c> than</c><00:19:16.320><c> the</c><00:19:16.559><c> length</c><00:19:16.960><c> of</c><00:19:17.360><c> large</c><00:19:18.160><c> plus</c>

00:19:18.710 --> 00:19:18.720 align:start position:0%
is greater than the length of large plus
 

00:19:18.720 --> 00:19:21.110 align:start position:0%
is greater than the length of large plus
one<00:19:18.960><c> that</c><00:19:19.200><c> means</c><00:19:19.440><c> the</c><00:19:19.679><c> difference</c><00:19:20.160><c> is</c><00:19:20.480><c> two</c><00:19:20.880><c> or</c>

00:19:21.110 --> 00:19:21.120 align:start position:0%
one that means the difference is two or
 

00:19:21.120 --> 00:19:21.909 align:start position:0%
one that means the difference is two or
greater

00:19:21.909 --> 00:19:21.919 align:start position:0%
greater
 

00:19:21.919 --> 00:19:24.150 align:start position:0%
greater
in<00:19:22.080><c> that</c><00:19:22.400><c> case</c><00:19:23.200><c> in</c><00:19:23.280><c> that</c><00:19:23.520><c> case</c><00:19:23.760><c> what</c><00:19:23.919><c> are</c><00:19:24.000><c> we</c>

00:19:24.150 --> 00:19:24.160 align:start position:0%
in that case in that case what are we
 

00:19:24.160 --> 00:19:25.669 align:start position:0%
in that case in that case what are we
going<00:19:24.240><c> to</c><00:19:24.320><c> do</c><00:19:24.559><c> this</c><00:19:24.799><c> is</c><00:19:24.960><c> too</c><00:19:25.200><c> big</c><00:19:25.440><c> so</c><00:19:25.600><c> what</c>

00:19:25.669 --> 00:19:25.679 align:start position:0%
going to do this is too big so what
 

00:19:25.679 --> 00:19:26.390 align:start position:0%
going to do this is too big so what
we're<00:19:25.840><c> going</c><00:19:25.919><c> to</c><00:19:26.000><c> do</c><00:19:26.160><c> is</c>

00:19:26.390 --> 00:19:26.400 align:start position:0%
we're going to do is
 

00:19:26.400 --> 00:19:28.630 align:start position:0%
we're going to do is
pop<00:19:26.720><c> from</c><00:19:26.880><c> the</c><00:19:27.120><c> small</c><00:19:27.520><c> and</c><00:19:27.600><c> then</c><00:19:27.840><c> up</c><00:19:28.240><c> and</c><00:19:28.320><c> then</c>

00:19:28.630 --> 00:19:28.640 align:start position:0%
pop from the small and then up and then
 

00:19:28.640 --> 00:19:30.549 align:start position:0%
pop from the small and then up and then
push<00:19:29.039><c> to</c><00:19:29.280><c> the</c><00:19:29.520><c> large</c><00:19:29.919><c> which</c><00:19:30.080><c> is</c><00:19:30.240><c> actually</c>

00:19:30.549 --> 00:19:30.559 align:start position:0%
push to the large which is actually
 

00:19:30.559 --> 00:19:31.590 align:start position:0%
push to the large which is actually
exactly<00:19:30.960><c> what</c><00:19:31.120><c> we</c><00:19:31.200><c> did</c>

00:19:31.590 --> 00:19:31.600 align:start position:0%
exactly what we did
 

00:19:31.600 --> 00:19:33.510 align:start position:0%
exactly what we did
up<00:19:31.760><c> here</c><00:19:32.000><c> so</c><00:19:32.160><c> i'm</c><00:19:32.320><c> just</c><00:19:32.480><c> going</c><00:19:32.559><c> to</c><00:19:32.799><c> copy</c><00:19:33.280><c> and</c>

00:19:33.510 --> 00:19:33.520 align:start position:0%
up here so i'm just going to copy and
 

00:19:33.520 --> 00:19:34.710 align:start position:0%
up here so i'm just going to copy and
paste<00:19:34.000><c> that</c>

00:19:34.710 --> 00:19:34.720 align:start position:0%
paste that
 

00:19:34.720 --> 00:19:37.990 align:start position:0%
paste that
and<00:19:35.280><c> the</c><00:19:35.760><c> other</c><00:19:36.160><c> case</c><00:19:36.720><c> is</c><00:19:37.039><c> if</c><00:19:37.280><c> the</c><00:19:37.520><c> length</c>

00:19:37.990 --> 00:19:38.000 align:start position:0%
and the other case is if the length
 

00:19:38.000 --> 00:19:40.630 align:start position:0%
and the other case is if the length
of<00:19:38.160><c> the</c><00:19:38.480><c> large</c><00:19:38.880><c> heap</c><00:19:39.600><c> is</c><00:19:39.840><c> greater</c><00:19:40.240><c> than</c><00:19:40.480><c> the</c>

00:19:40.630 --> 00:19:40.640 align:start position:0%
of the large heap is greater than the
 

00:19:40.640 --> 00:19:42.390 align:start position:0%
of the large heap is greater than the
length<00:19:41.039><c> of</c><00:19:41.200><c> the</c><00:19:41.360><c> small</c><00:19:41.760><c> heap</c>

00:19:42.390 --> 00:19:42.400 align:start position:0%
length of the small heap
 

00:19:42.400 --> 00:19:45.029 align:start position:0%
length of the small heap
plus<00:19:42.799><c> one</c><00:19:43.120><c> meaning</c><00:19:43.520><c> the</c><00:19:43.760><c> difference</c><00:19:44.240><c> is</c><00:19:44.640><c> two</c>

00:19:45.029 --> 00:19:45.039 align:start position:0%
plus one meaning the difference is two
 

00:19:45.039 --> 00:19:45.909 align:start position:0%
plus one meaning the difference is two
or<00:19:45.280><c> greater</c>

00:19:45.909 --> 00:19:45.919 align:start position:0%
or greater
 

00:19:45.919 --> 00:19:47.590 align:start position:0%
or greater
and<00:19:46.240><c> in</c><00:19:46.400><c> that</c><00:19:46.559><c> case</c><00:19:46.799><c> i'm</c><00:19:46.960><c> basically</c><00:19:47.440><c> going</c><00:19:47.520><c> to</c>

00:19:47.590 --> 00:19:47.600 align:start position:0%
and in that case i'm basically going to
 

00:19:47.600 --> 00:19:49.750 align:start position:0%
and in that case i'm basically going to
do<00:19:47.840><c> the</c><00:19:48.080><c> opposite</c><00:19:48.720><c> of</c><00:19:48.799><c> what</c><00:19:48.960><c> we</c><00:19:49.120><c> just</c><00:19:49.280><c> did</c><00:19:49.600><c> up</c>

00:19:49.750 --> 00:19:49.760 align:start position:0%
do the opposite of what we just did up
 

00:19:49.760 --> 00:19:52.549 align:start position:0%
do the opposite of what we just did up
here<00:19:49.919><c> so</c><00:19:50.080><c> let</c><00:19:50.240><c> me</c><00:19:50.480><c> copy</c><00:19:50.880><c> and</c><00:19:51.039><c> paste</c><00:19:51.360><c> that</c><00:19:51.679><c> so</c>

00:19:52.549 --> 00:19:52.559 align:start position:0%
here so let me copy and paste that so
 

00:19:52.559 --> 00:19:54.549 align:start position:0%
here so let me copy and paste that so
we<00:19:52.720><c> don't</c><00:19:52.880><c> need</c><00:19:53.039><c> this</c><00:19:53.280><c> negative</c><00:19:53.760><c> one</c><00:19:54.080><c> because</c>

00:19:54.549 --> 00:19:54.559 align:start position:0%
we don't need this negative one because
 

00:19:54.559 --> 00:19:56.230 align:start position:0%
we don't need this negative one because
we<00:19:54.720><c> are</c><00:19:54.799><c> going</c><00:19:54.880><c> to</c><00:19:54.960><c> be</c><00:19:55.200><c> popping</c><00:19:55.760><c> from</c>

00:19:56.230 --> 00:19:56.240 align:start position:0%
we are going to be popping from
 

00:19:56.240 --> 00:19:59.029 align:start position:0%
we are going to be popping from
the<00:19:56.640><c> large</c><00:19:57.120><c> heap</c><00:19:57.679><c> which</c><00:19:57.919><c> has</c><00:19:58.160><c> the</c><00:19:58.400><c> correct</c>

00:19:59.029 --> 00:19:59.039 align:start position:0%
the large heap which has the correct
 

00:19:59.039 --> 00:20:01.190 align:start position:0%
the large heap which has the correct
values<00:19:59.520><c> not</c><00:19:59.760><c> the</c><00:20:00.000><c> negative</c><00:20:00.400><c> one</c><00:20:00.559><c> multiplied</c>

00:20:01.190 --> 00:20:01.200 align:start position:0%
values not the negative one multiplied
 

00:20:01.200 --> 00:20:01.909 align:start position:0%
values not the negative one multiplied
values

00:20:01.909 --> 00:20:01.919 align:start position:0%
values
 

00:20:01.919 --> 00:20:04.630 align:start position:0%
values
and<00:20:02.159><c> with</c><00:20:02.400><c> that</c><00:20:02.720><c> value</c><00:20:03.200><c> though</c><00:20:03.919><c> i'm</c><00:20:04.159><c> going</c><00:20:04.400><c> to</c>

00:20:04.630 --> 00:20:04.640 align:start position:0%
and with that value though i'm going to
 

00:20:04.640 --> 00:20:06.710 align:start position:0%
and with that value though i'm going to
take<00:20:04.880><c> that</c><00:20:05.039><c> value</c><00:20:05.520><c> and</c><00:20:05.679><c> add</c><00:20:05.919><c> it</c><00:20:06.159><c> to</c><00:20:06.400><c> the</c>

00:20:06.710 --> 00:20:06.720 align:start position:0%
take that value and add it to the
 

00:20:06.720 --> 00:20:08.630 align:start position:0%
take that value and add it to the
small<00:20:07.039><c> heap</c><00:20:07.520><c> and</c><00:20:07.760><c> actually</c><00:20:08.080><c> we</c><00:20:08.240><c> are</c><00:20:08.400><c> going</c><00:20:08.559><c> to</c>

00:20:08.630 --> 00:20:08.640 align:start position:0%
small heap and actually we are going to
 

00:20:08.640 --> 00:20:10.070 align:start position:0%
small heap and actually we are going to
need<00:20:08.799><c> to</c><00:20:08.880><c> take</c><00:20:09.120><c> this</c><00:20:09.360><c> value</c><00:20:09.760><c> and</c><00:20:09.840><c> then</c>

00:20:10.070 --> 00:20:10.080 align:start position:0%
need to take this value and then
 

00:20:10.080 --> 00:20:11.990 align:start position:0%
need to take this value and then
multiply<00:20:10.640><c> it</c><00:20:10.799><c> by</c><00:20:11.039><c> negative</c><00:20:11.440><c> 1</c>

00:20:11.990 --> 00:20:12.000 align:start position:0%
multiply it by negative 1
 

00:20:12.000 --> 00:20:13.830 align:start position:0%
multiply it by negative 1
because<00:20:12.240><c> we</c><00:20:12.400><c> have</c><00:20:12.559><c> to</c><00:20:12.720><c> do</c><00:20:12.880><c> that</c><00:20:13.120><c> whenever</c><00:20:13.600><c> we</c>

00:20:13.830 --> 00:20:13.840 align:start position:0%
because we have to do that whenever we
 

00:20:13.840 --> 00:20:15.110 align:start position:0%
because we have to do that whenever we
add<00:20:14.480><c> to</c><00:20:14.640><c> this</c>

00:20:15.110 --> 00:20:15.120 align:start position:0%
add to this
 

00:20:15.120 --> 00:20:17.590 align:start position:0%
add to this
small<00:20:15.440><c> heap</c><00:20:16.080><c> so</c><00:20:16.240><c> now</c><00:20:16.480><c> we</c><00:20:16.720><c> are</c><00:20:16.799><c> making</c><00:20:17.200><c> sure</c><00:20:17.440><c> we</c>

00:20:17.590 --> 00:20:17.600 align:start position:0%
small heap so now we are making sure we
 

00:20:17.600 --> 00:20:19.510 align:start position:0%
small heap so now we are making sure we
take<00:20:17.840><c> every</c><00:20:18.159><c> element</c><00:20:18.559><c> add</c><00:20:18.799><c> it</c><00:20:18.880><c> to</c><00:20:19.039><c> one</c><00:20:19.200><c> of</c><00:20:19.280><c> the</c>

00:20:19.510 --> 00:20:19.520 align:start position:0%
take every element add it to one of the
 

00:20:19.520 --> 00:20:21.350 align:start position:0%
take every element add it to one of the
heaps<00:20:19.840><c> and</c><00:20:20.000><c> if</c><00:20:20.080><c> there</c><00:20:20.320><c> happens</c><00:20:20.720><c> to</c><00:20:20.880><c> be</c>

00:20:21.350 --> 00:20:21.360 align:start position:0%
heaps and if there happens to be
 

00:20:21.360 --> 00:20:23.990 align:start position:0%
heaps and if there happens to be
a<00:20:21.679><c> size</c><00:20:22.159><c> difference</c><00:20:22.640><c> we're</c><00:20:22.880><c> handling</c><00:20:23.440><c> that</c><00:20:23.840><c> if</c>

00:20:23.990 --> 00:20:24.000 align:start position:0%
a size difference we're handling that if
 

00:20:24.000 --> 00:20:25.029 align:start position:0%
a size difference we're handling that if
there<00:20:24.159><c> happens</c><00:20:24.559><c> to</c><00:20:24.720><c> be</c>

00:20:25.029 --> 00:20:25.039 align:start position:0%
there happens to be
 

00:20:25.039 --> 00:20:27.350 align:start position:0%
there happens to be
an<00:20:25.360><c> order</c><00:20:25.679><c> difference</c><00:20:26.320><c> right</c><00:20:26.640><c> like</c><00:20:27.039><c> the</c>

00:20:27.350 --> 00:20:27.360 align:start position:0%
an order difference right like the
 

00:20:27.360 --> 00:20:29.029 align:start position:0%
an order difference right like the
values<00:20:27.840><c> are</c><00:20:28.000><c> in</c><00:20:28.080><c> the</c><00:20:28.159><c> wrong</c><00:20:28.480><c> order</c><00:20:28.799><c> we're</c>

00:20:29.029 --> 00:20:29.039 align:start position:0%
values are in the wrong order we're
 

00:20:29.039 --> 00:20:30.549 align:start position:0%
values are in the wrong order we're
handling<00:20:29.520><c> that</c><00:20:29.840><c> as</c><00:20:30.000><c> well</c>

00:20:30.549 --> 00:20:30.559 align:start position:0%
handling that as well
 

00:20:30.559 --> 00:20:32.390 align:start position:0%
handling that as well
and<00:20:30.799><c> remember</c><00:20:31.440><c> all</c><00:20:31.679><c> of</c><00:20:31.840><c> these</c><00:20:32.080><c> heap</c>

00:20:32.390 --> 00:20:32.400 align:start position:0%
and remember all of these heap
 

00:20:32.400 --> 00:20:34.070 align:start position:0%
and remember all of these heap
operations<00:20:33.440><c> are</c>

00:20:34.070 --> 00:20:34.080 align:start position:0%
operations are
 

00:20:34.080 --> 00:20:37.590 align:start position:0%
operations are
log<00:20:35.039><c> n</c><00:20:35.520><c> operations</c><00:20:36.400><c> log</c><00:20:36.880><c> n</c>

00:20:37.590 --> 00:20:37.600 align:start position:0%
log n operations log n
 

00:20:37.600 --> 00:20:39.590 align:start position:0%
log n operations log n
and<00:20:37.760><c> now</c><00:20:38.000><c> the</c><00:20:38.240><c> last</c><00:20:38.559><c> thing</c><00:20:38.720><c> we</c><00:20:38.880><c> have</c><00:20:38.960><c> to</c><00:20:39.120><c> handle</c>

00:20:39.590 --> 00:20:39.600 align:start position:0%
and now the last thing we have to handle
 

00:20:39.600 --> 00:20:41.510 align:start position:0%
and now the last thing we have to handle
is<00:20:39.919><c> finding</c><00:20:40.480><c> the</c><00:20:40.640><c> median</c>

00:20:41.510 --> 00:20:41.520 align:start position:0%
is finding the median
 

00:20:41.520 --> 00:20:44.070 align:start position:0%
is finding the median
so<00:20:42.080><c> one</c><00:20:42.400><c> case</c><00:20:42.799><c> is</c><00:20:42.960><c> that</c><00:20:43.200><c> there's</c><00:20:43.520><c> an</c><00:20:43.679><c> odd</c>

00:20:44.070 --> 00:20:44.080 align:start position:0%
so one case is that there's an odd
 

00:20:44.080 --> 00:20:45.909 align:start position:0%
so one case is that there's an odd
length<00:20:44.400><c> how</c><00:20:44.559><c> do</c><00:20:44.720><c> we</c><00:20:44.960><c> know</c><00:20:45.120><c> if</c><00:20:45.280><c> there's</c><00:20:45.520><c> an</c><00:20:45.679><c> odd</c>

00:20:45.909 --> 00:20:45.919 align:start position:0%
length how do we know if there's an odd
 

00:20:45.919 --> 00:20:46.710 align:start position:0%
length how do we know if there's an odd
length<00:20:46.320><c> well</c>

00:20:46.710 --> 00:20:46.720 align:start position:0%
length well
 

00:20:46.720 --> 00:20:49.830 align:start position:0%
length well
if<00:20:47.039><c> the</c><00:20:47.520><c> length</c><00:20:48.000><c> of</c><00:20:48.320><c> small</c><00:20:49.120><c> was</c><00:20:49.440><c> ever</c>

00:20:49.830 --> 00:20:49.840 align:start position:0%
if the length of small was ever
 

00:20:49.840 --> 00:20:52.870 align:start position:0%
if the length of small was ever
greater<00:20:50.400><c> than</c><00:20:50.559><c> the</c><00:20:50.799><c> length</c><00:20:51.280><c> of</c><00:20:51.760><c> large</c><00:20:52.480><c> we</c><00:20:52.720><c> know</c>

00:20:52.870 --> 00:20:52.880 align:start position:0%
greater than the length of large we know
 

00:20:52.880 --> 00:20:53.909 align:start position:0%
greater than the length of large we know
that<00:20:53.120><c> then</c><00:20:53.360><c> we</c><00:20:53.520><c> have</c><00:20:53.679><c> an</c>

00:20:53.909 --> 00:20:53.919 align:start position:0%
that then we have an
 

00:20:53.919 --> 00:20:55.750 align:start position:0%
that then we have an
odd<00:20:54.240><c> length</c><00:20:54.559><c> right</c><00:20:54.880><c> because</c><00:20:55.120><c> maybe</c><00:20:55.440><c> one</c><00:20:55.600><c> of</c>

00:20:55.750 --> 00:20:55.760 align:start position:0%
odd length right because maybe one of
 

00:20:55.760 --> 00:20:57.590 align:start position:0%
odd length right because maybe one of
them<00:20:55.919><c> has</c><00:20:56.240><c> three</c><00:20:56.559><c> elements</c><00:20:56.960><c> the</c><00:20:57.120><c> other</c><00:20:57.360><c> has</c>

00:20:57.590 --> 00:20:57.600 align:start position:0%
them has three elements the other has
 

00:20:57.600 --> 00:20:58.549 align:start position:0%
them has three elements the other has
two<00:20:57.840><c> elements</c>

00:20:58.549 --> 00:20:58.559 align:start position:0%
two elements
 

00:20:58.559 --> 00:21:00.950 align:start position:0%
two elements
we<00:20:58.799><c> know</c><00:20:59.520><c> with</c><00:20:59.760><c> this</c><00:21:00.000><c> function</c><00:21:00.400><c> we're</c><00:21:00.640><c> always</c>

00:21:00.950 --> 00:21:00.960 align:start position:0%
we know with this function we're always
 

00:21:00.960 --> 00:21:01.909 align:start position:0%
we know with this function we're always
making<00:21:01.200><c> sure</c><00:21:01.440><c> that</c><00:21:01.600><c> they're</c>

00:21:01.909 --> 00:21:01.919 align:start position:0%
making sure that they're
 

00:21:01.919 --> 00:21:04.789 align:start position:0%
making sure that they're
about<00:21:02.400><c> roughly</c><00:21:02.880><c> equal</c><00:21:03.520><c> so</c><00:21:03.679><c> if</c><00:21:03.840><c> this</c><00:21:04.159><c> evaluated</c>

00:21:04.789 --> 00:21:04.799 align:start position:0%
about roughly equal so if this evaluated
 

00:21:04.799 --> 00:21:06.390 align:start position:0%
about roughly equal so if this evaluated
true<00:21:05.039><c> that</c><00:21:05.200><c> means</c><00:21:05.360><c> we</c><00:21:05.520><c> have</c><00:21:05.600><c> an</c><00:21:05.760><c> odd</c><00:21:06.000><c> number</c><00:21:06.240><c> of</c>

00:21:06.390 --> 00:21:06.400 align:start position:0%
true that means we have an odd number of
 

00:21:06.400 --> 00:21:07.029 align:start position:0%
true that means we have an odd number of
elements

00:21:07.029 --> 00:21:07.039 align:start position:0%
elements
 

00:21:07.039 --> 00:21:09.110 align:start position:0%
elements
and<00:21:07.440><c> small</c><00:21:07.919><c> happens</c><00:21:08.240><c> to</c><00:21:08.400><c> have</c><00:21:08.559><c> an</c><00:21:08.799><c> extra</c>

00:21:09.110 --> 00:21:09.120 align:start position:0%
and small happens to have an extra
 

00:21:09.120 --> 00:21:10.789 align:start position:0%
and small happens to have an extra
element<00:21:09.520><c> so</c><00:21:09.679><c> what</c><00:21:09.840><c> we</c><00:21:10.000><c> can</c><00:21:10.240><c> do</c>

00:21:10.789 --> 00:21:10.799 align:start position:0%
element so what we can do
 

00:21:10.799 --> 00:21:13.990 align:start position:0%
element so what we can do
is<00:21:11.440><c> return</c><00:21:12.000><c> the</c><00:21:12.320><c> largest</c><00:21:12.880><c> value</c><00:21:13.440><c> in</c><00:21:13.679><c> small</c>

00:21:13.990 --> 00:21:14.000 align:start position:0%
is return the largest value in small
 

00:21:14.000 --> 00:21:16.870 align:start position:0%
is return the largest value in small
which<00:21:14.240><c> is</c><00:21:14.480><c> stored</c><00:21:14.960><c> in</c><00:21:15.200><c> index</c><00:21:15.840><c> 0</c><00:21:16.240><c> of</c><00:21:16.400><c> small</c>

00:21:16.870 --> 00:21:16.880 align:start position:0%
which is stored in index 0 of small
 

00:21:16.880 --> 00:21:19.510 align:start position:0%
which is stored in index 0 of small
if<00:21:16.960><c> the</c><00:21:17.200><c> opposite</c><00:21:17.760><c> is</c><00:21:17.919><c> true</c><00:21:18.400><c> if</c><00:21:18.880><c> the</c><00:21:19.039><c> length</c><00:21:19.280><c> of</c>

00:21:19.510 --> 00:21:19.520 align:start position:0%
if the opposite is true if the length of
 

00:21:19.520 --> 00:21:19.990 align:start position:0%
if the opposite is true if the length of
large

00:21:19.990 --> 00:21:20.000 align:start position:0%
large
 

00:21:20.000 --> 00:21:22.390 align:start position:0%
large
is<00:21:20.159><c> somehow</c><00:21:20.640><c> greater</c><00:21:21.039><c> than</c><00:21:21.600><c> the</c><00:21:21.760><c> length</c><00:21:22.159><c> of</c>

00:21:22.390 --> 00:21:22.400 align:start position:0%
is somehow greater than the length of
 

00:21:22.400 --> 00:21:23.110 align:start position:0%
is somehow greater than the length of
small

00:21:23.110 --> 00:21:23.120 align:start position:0%
small
 

00:21:23.120 --> 00:21:24.950 align:start position:0%
small
we<00:21:23.280><c> know</c><00:21:23.440><c> that</c><00:21:23.600><c> the</c><00:21:23.840><c> opposite</c><00:21:24.400><c> happens</c><00:21:24.720><c> to</c><00:21:24.799><c> be</c>

00:21:24.950 --> 00:21:24.960 align:start position:0%
we know that the opposite happens to be
 

00:21:24.960 --> 00:21:26.630 align:start position:0%
we know that the opposite happens to be
true<00:21:25.200><c> so</c><00:21:25.440><c> we</c><00:21:25.679><c> can</c><00:21:25.919><c> return</c>

00:21:26.630 --> 00:21:26.640 align:start position:0%
true so we can return
 

00:21:26.640 --> 00:21:30.310 align:start position:0%
true so we can return
the<00:21:26.960><c> smallest</c><00:21:27.679><c> value</c><00:21:28.400><c> in</c><00:21:29.039><c> large</c><00:21:29.840><c> now</c><00:21:30.080><c> if</c>

00:21:30.310 --> 00:21:30.320 align:start position:0%
the smallest value in large now if
 

00:21:30.320 --> 00:21:31.270 align:start position:0%
the smallest value in large now if
neither<00:21:30.720><c> of</c><00:21:30.880><c> these</c>

00:21:31.270 --> 00:21:31.280 align:start position:0%
neither of these
 

00:21:31.280 --> 00:21:33.190 align:start position:0%
neither of these
evaluates<00:21:31.840><c> that</c><00:21:32.000><c> means</c><00:21:32.240><c> we</c><00:21:32.400><c> have</c><00:21:32.559><c> an</c><00:21:32.799><c> even</c>

00:21:33.190 --> 00:21:33.200 align:start position:0%
evaluates that means we have an even
 

00:21:33.200 --> 00:21:34.310 align:start position:0%
evaluates that means we have an even
number<00:21:33.440><c> of</c><00:21:33.600><c> elements</c><00:21:34.000><c> so</c>

00:21:34.310 --> 00:21:34.320 align:start position:0%
number of elements so
 

00:21:34.320 --> 00:21:36.470 align:start position:0%
number of elements so
each<00:21:34.880><c> each</c><00:21:35.039><c> of</c><00:21:35.200><c> these</c><00:21:35.440><c> heaps</c><00:21:35.760><c> has</c><00:21:36.000><c> the</c><00:21:36.159><c> exact</c>

00:21:36.470 --> 00:21:36.480 align:start position:0%
each each of these heaps has the exact
 

00:21:36.480 --> 00:21:38.870 align:start position:0%
each each of these heaps has the exact
same<00:21:36.799><c> size</c><00:21:37.200><c> so</c><00:21:37.360><c> what</c><00:21:37.520><c> we</c><00:21:37.679><c> can</c><00:21:37.840><c> do</c><00:21:38.080><c> in</c><00:21:38.159><c> that</c><00:21:38.400><c> case</c>

00:21:38.870 --> 00:21:38.880 align:start position:0%
same size so what we can do in that case
 

00:21:38.880 --> 00:21:42.310 align:start position:0%
same size so what we can do in that case
is<00:21:39.440><c> return</c><00:21:40.480><c> the</c><00:21:41.200><c> largest</c><00:21:41.760><c> value</c>

00:21:42.310 --> 00:21:42.320 align:start position:0%
is return the largest value
 

00:21:42.320 --> 00:21:45.590 align:start position:0%
is return the largest value
in<00:21:42.400><c> the</c><00:21:42.640><c> small</c><00:21:43.039><c> heap</c><00:21:43.600><c> plus</c><00:21:44.480><c> the</c><00:21:44.880><c> smallest</c>

00:21:45.590 --> 00:21:45.600 align:start position:0%
in the small heap plus the smallest
 

00:21:45.600 --> 00:21:48.470 align:start position:0%
in the small heap plus the smallest
value<00:21:46.320><c> in</c><00:21:46.720><c> the</c><00:21:47.039><c> large</c><00:21:47.440><c> heap</c><00:21:48.080><c> add</c><00:21:48.320><c> them</c>

00:21:48.470 --> 00:21:48.480 align:start position:0%
value in the large heap add them
 

00:21:48.480 --> 00:21:49.270 align:start position:0%
value in the large heap add them
together

00:21:49.270 --> 00:21:49.280 align:start position:0%
together
 

00:21:49.280 --> 00:21:51.350 align:start position:0%
together
and<00:21:49.440><c> then</c><00:21:49.679><c> divide</c><00:21:50.080><c> by</c><00:21:50.320><c> two</c><00:21:50.640><c> and</c><00:21:50.720><c> then</c><00:21:51.039><c> return</c>

00:21:51.350 --> 00:21:51.360 align:start position:0%
and then divide by two and then return
 

00:21:51.360 --> 00:21:52.710 align:start position:0%
and then divide by two and then return
the<00:21:51.520><c> result</c><00:21:51.919><c> of</c><00:21:52.080><c> that</c>

00:21:52.710 --> 00:21:52.720 align:start position:0%
the result of that
 

00:21:52.720 --> 00:21:55.909 align:start position:0%
the result of that
so<00:21:53.039><c> here</c><00:21:53.440><c> is</c><00:21:53.679><c> the</c><00:21:53.919><c> final</c><00:21:54.400><c> code</c><00:21:54.799><c> it's</c><00:21:55.039><c> 34</c><00:21:55.679><c> lines</c>

00:21:55.909 --> 00:21:55.919 align:start position:0%
so here is the final code it's 34 lines
 

00:21:55.919 --> 00:21:57.590 align:start position:0%
so here is the final code it's 34 lines
but<00:21:56.080><c> you</c><00:21:56.240><c> can</c><00:21:56.320><c> see</c><00:21:56.480><c> we</c><00:21:56.640><c> have</c><00:21:56.799><c> some</c><00:21:57.039><c> comments</c>

00:21:57.590 --> 00:21:57.600 align:start position:0%
but you can see we have some comments
 

00:21:57.600 --> 00:21:58.470 align:start position:0%
but you can see we have some comments
and<00:21:57.919><c> some</c>

00:21:58.470 --> 00:21:58.480 align:start position:0%
and some
 

00:21:58.480 --> 00:22:01.510 align:start position:0%
and some
you<00:21:58.559><c> know</c><00:21:59.120><c> boilerplate</c><00:22:00.000><c> type</c><00:22:00.559><c> uh</c><00:22:01.039><c> code</c>

00:22:01.510 --> 00:22:01.520 align:start position:0%
you know boilerplate type uh code
 

00:22:01.520 --> 00:22:03.430 align:start position:0%
you know boilerplate type uh code
but<00:22:01.760><c> the</c><00:22:01.919><c> code</c><00:22:02.159><c> that</c><00:22:02.320><c> itself</c><00:22:02.720><c> that</c><00:22:02.880><c> we</c><00:22:03.039><c> had</c><00:22:03.280><c> to</c>

00:22:03.430 --> 00:22:03.440 align:start position:0%
but the code that itself that we had to
 

00:22:03.440 --> 00:22:05.590 align:start position:0%
but the code that itself that we had to
write<00:22:03.679><c> was</c><00:22:03.919><c> relatively</c><00:22:04.640><c> short</c><00:22:05.039><c> right</c><00:22:05.280><c> because</c>

00:22:05.590 --> 00:22:05.600 align:start position:0%
write was relatively short right because
 

00:22:05.600 --> 00:22:07.190 align:start position:0%
write was relatively short right because
we<00:22:05.760><c> did</c><00:22:06.000><c> this</c><00:22:06.240><c> with</c><00:22:06.480><c> a</c><00:22:06.640><c> heap</c>

00:22:07.190 --> 00:22:07.200 align:start position:0%
we did this with a heap
 

00:22:07.200 --> 00:22:09.350 align:start position:0%
we did this with a heap
and<00:22:07.440><c> we</c><00:22:07.600><c> did</c><00:22:07.760><c> it</c><00:22:08.000><c> pretty</c><00:22:08.320><c> efficiently</c><00:22:09.120><c> let</c><00:22:09.280><c> me</c>

00:22:09.350 --> 00:22:09.360 align:start position:0%
and we did it pretty efficiently let me
 

00:22:09.360 --> 00:22:11.669 align:start position:0%
and we did it pretty efficiently let me
just<00:22:09.679><c> run</c><00:22:09.919><c> it</c><00:22:10.000><c> to</c><00:22:10.240><c> prove</c><00:22:10.559><c> that</c><00:22:10.720><c> it</c><00:22:10.880><c> works</c>

00:22:11.669 --> 00:22:11.679 align:start position:0%
just run it to prove that it works
 

00:22:11.679 --> 00:22:14.710 align:start position:0%
just run it to prove that it works
okay<00:22:12.159><c> uh</c><00:22:12.400><c> just</c><00:22:12.799><c> one</c><00:22:13.120><c> time</c><00:22:13.440><c> i</c><00:22:13.600><c> forgot</c><00:22:14.000><c> to</c>

00:22:14.710 --> 00:22:14.720 align:start position:0%
okay uh just one time i forgot to
 

00:22:14.720 --> 00:22:17.830 align:start position:0%
okay uh just one time i forgot to
say<00:22:15.360><c> that</c><00:22:15.679><c> this</c><00:22:16.159><c> small</c><00:22:16.799><c> is</c><00:22:16.960><c> a</c><00:22:17.120><c> member</c><00:22:17.520><c> object</c>

00:22:17.830 --> 00:22:17.840 align:start position:0%
say that this small is a member object
 

00:22:17.840 --> 00:22:19.350 align:start position:0%
say that this small is a member object
so<00:22:18.159><c> self.small</c>

00:22:19.350 --> 00:22:19.360 align:start position:0%
so self.small
 

00:22:19.360 --> 00:22:20.789 align:start position:0%
so self.small
and<00:22:19.520><c> i</c><00:22:19.600><c> actually</c><00:22:19.919><c> forgot</c><00:22:20.240><c> to</c><00:22:20.320><c> do</c><00:22:20.480><c> that</c><00:22:20.640><c> in</c><00:22:20.720><c> a</c>

00:22:20.789 --> 00:22:20.799 align:start position:0%
and i actually forgot to do that in a
 

00:22:20.799 --> 00:22:23.110 align:start position:0%
and i actually forgot to do that in a
couple<00:22:21.120><c> places</c><00:22:21.440><c> so</c><00:22:21.600><c> let</c><00:22:21.760><c> me</c><00:22:21.919><c> just</c><00:22:22.159><c> fix</c><00:22:22.480><c> that</c><00:22:22.720><c> so</c>

00:22:23.110 --> 00:22:23.120 align:start position:0%
couple places so let me just fix that so
 

00:22:23.120 --> 00:22:26.590 align:start position:0%
couple places so let me just fix that so
self.small<00:22:24.320><c> self.large</c><00:22:25.440><c> self.small</c>

00:22:26.590 --> 00:22:26.600 align:start position:0%
self.small self.large self.small
 

00:22:26.600 --> 00:22:30.310 align:start position:0%
self.small self.large self.small
self.large<00:22:27.840><c> self.small</c><00:22:29.080><c> self.large</c>

00:22:30.310 --> 00:22:30.320 align:start position:0%
self.large self.small self.large
 

00:22:30.320 --> 00:22:32.789 align:start position:0%
self.large self.small self.large
and<00:22:30.559><c> a</c><00:22:30.640><c> couple</c><00:22:30.960><c> more</c><00:22:31.200><c> places</c><00:22:32.240><c> okay</c><00:22:32.480><c> so</c><00:22:32.640><c> we</c>

00:22:32.789 --> 00:22:32.799 align:start position:0%
and a couple more places okay so we
 

00:22:32.799 --> 00:22:33.510 align:start position:0%
and a couple more places okay so we
corrected

00:22:33.510 --> 00:22:33.520 align:start position:0%
corrected
 

00:22:33.520 --> 00:22:36.149 align:start position:0%
corrected
the<00:22:33.840><c> self</c><00:22:34.240><c> errors</c><00:22:34.960><c> one</c><00:22:35.200><c> last</c><00:22:35.440><c> thing</c><00:22:35.600><c> i</c><00:22:35.760><c> forgot</c>

00:22:36.149 --> 00:22:36.159 align:start position:0%
the self errors one last thing i forgot
 

00:22:36.159 --> 00:22:37.270 align:start position:0%
the self errors one last thing i forgot
is<00:22:36.400><c> remember</c>

00:22:37.270 --> 00:22:37.280 align:start position:0%
is remember
 

00:22:37.280 --> 00:22:39.750 align:start position:0%
is remember
small<00:22:37.919><c> as</c><00:22:38.480><c> negative</c><00:22:38.960><c> we</c><00:22:39.200><c> multiplied</c><00:22:39.679><c> the</c>

00:22:39.750 --> 00:22:39.760 align:start position:0%
small as negative we multiplied the
 

00:22:39.760 --> 00:22:41.190 align:start position:0%
small as negative we multiplied the
numbers<00:22:40.080><c> by</c><00:22:40.240><c> negative</c><00:22:40.559><c> so</c><00:22:40.720><c> when</c><00:22:40.880><c> we're</c>

00:22:41.190 --> 00:22:41.200 align:start position:0%
numbers by negative so when we're
 

00:22:41.200 --> 00:22:42.549 align:start position:0%
numbers by negative so when we're
getting<00:22:41.520><c> the</c><00:22:41.679><c> number</c><00:22:42.000><c> and</c><00:22:42.080><c> actually</c><00:22:42.400><c> trying</c>

00:22:42.549 --> 00:22:42.559 align:start position:0%
getting the number and actually trying
 

00:22:42.559 --> 00:22:44.390 align:start position:0%
getting the number and actually trying
to<00:22:42.720><c> calculate</c><00:22:43.280><c> the</c><00:22:43.440><c> median</c><00:22:43.760><c> we</c><00:22:43.919><c> have</c><00:22:44.000><c> to</c><00:22:44.159><c> take</c>

00:22:44.390 --> 00:22:44.400 align:start position:0%
to calculate the median we have to take
 

00:22:44.400 --> 00:22:46.390 align:start position:0%
to calculate the median we have to take
that<00:22:44.720><c> number</c><00:22:45.039><c> and</c><00:22:45.200><c> multiply</c><00:22:45.679><c> it</c><00:22:45.760><c> by</c><00:22:46.000><c> negative</c>

00:22:46.390 --> 00:22:46.400 align:start position:0%
that number and multiply it by negative
 

00:22:46.400 --> 00:22:47.029 align:start position:0%
that number and multiply it by negative
one

00:22:47.029 --> 00:22:47.039 align:start position:0%
one
 

00:22:47.039 --> 00:22:49.750 align:start position:0%
one
before<00:22:47.440><c> we</c><00:22:47.679><c> add</c><00:22:47.919><c> it</c><00:22:48.320><c> to</c><00:22:48.960><c> this</c><00:22:49.200><c> number</c><00:22:49.520><c> and</c><00:22:49.600><c> then</c>

00:22:49.750 --> 00:22:49.760 align:start position:0%
before we add it to this number and then
 

00:22:49.760 --> 00:22:50.710 align:start position:0%
before we add it to this number and then
divide<00:22:50.080><c> by</c><00:22:50.320><c> two</c>

00:22:50.710 --> 00:22:50.720 align:start position:0%
divide by two
 

00:22:50.720 --> 00:22:52.789 align:start position:0%
divide by two
and<00:22:50.960><c> let</c><00:22:51.120><c> me</c><00:22:51.280><c> not</c><00:22:51.440><c> forget</c><00:22:51.760><c> to</c><00:22:52.000><c> do</c><00:22:52.240><c> the</c><00:22:52.480><c> exact</c>

00:22:52.789 --> 00:22:52.799 align:start position:0%
and let me not forget to do the exact
 

00:22:52.799 --> 00:22:55.029 align:start position:0%
and let me not forget to do the exact
same<00:22:53.039><c> calculation</c><00:22:53.679><c> when</c><00:22:53.919><c> we're</c><00:22:54.080><c> returning</c>

00:22:55.029 --> 00:22:55.039 align:start position:0%
same calculation when we're returning
 

00:22:55.039 --> 00:22:58.710 align:start position:0%
same calculation when we're returning
the<00:22:55.200><c> value</c><00:22:56.000><c> here</c><00:22:56.559><c> right</c><00:22:56.960><c> so</c><00:22:57.679><c> i</c><00:22:58.000><c> somehow</c><00:22:58.480><c> had</c>

00:22:58.710 --> 00:22:58.720 align:start position:0%
the value here right so i somehow had
 

00:22:58.720 --> 00:23:00.710 align:start position:0%
the value here right so i somehow had
too<00:22:58.880><c> many</c><00:22:59.120><c> bugs</c><00:22:59.440><c> in</c><00:22:59.600><c> here</c><00:22:59.760><c> but</c><00:22:59.919><c> okay</c><00:23:00.159><c> so</c><00:23:00.400><c> now</c>

00:23:00.710 --> 00:23:00.720 align:start position:0%
too many bugs in here but okay so now
 

00:23:00.720 --> 00:23:01.750 align:start position:0%
too many bugs in here but okay so now
finally

00:23:01.750 --> 00:23:01.760 align:start position:0%
finally
 

00:23:01.760 --> 00:23:04.630 align:start position:0%
finally
this<00:23:02.080><c> should</c><00:23:02.400><c> be</c><00:23:02.720><c> the</c><00:23:03.039><c> final</c><00:23:03.600><c> code</c><00:23:04.240><c> the</c><00:23:04.480><c> big</c>

00:23:04.630 --> 00:23:04.640 align:start position:0%
this should be the final code the big
 

00:23:04.640 --> 00:23:06.470 align:start position:0%
this should be the final code the big
thing<00:23:04.880><c> in</c><00:23:05.039><c> python</c><00:23:05.440><c> at</c><00:23:05.520><c> least</c><00:23:05.840><c> is</c><00:23:05.919><c> to</c><00:23:06.080><c> remember</c>

00:23:06.470 --> 00:23:06.480 align:start position:0%
thing in python at least is to remember
 

00:23:06.480 --> 00:23:07.909 align:start position:0%
thing in python at least is to remember
these<00:23:06.720><c> negative</c><00:23:07.039><c> ones</c><00:23:07.280><c> if</c><00:23:07.360><c> you're</c><00:23:07.520><c> doing</c><00:23:07.679><c> this</c>

00:23:07.909 --> 00:23:07.919 align:start position:0%
these negative ones if you're doing this
 

00:23:07.919 --> 00:23:08.310 align:start position:0%
these negative ones if you're doing this
in<00:23:08.080><c> c</c>

00:23:08.310 --> 00:23:08.320 align:start position:0%
in c
 

00:23:08.320 --> 00:23:10.710 align:start position:0%
in c
plus<00:23:08.559><c> plus</c><00:23:08.880><c> or</c><00:23:09.120><c> java</c><00:23:09.840><c> i'm</c><00:23:10.159><c> pretty</c><00:23:10.400><c> sure</c><00:23:10.559><c> you</c>

00:23:10.710 --> 00:23:10.720 align:start position:0%
plus plus or java i'm pretty sure you
 

00:23:10.720 --> 00:23:12.549 align:start position:0%
plus plus or java i'm pretty sure you
will<00:23:10.880><c> not</c><00:23:11.120><c> have</c><00:23:11.200><c> to</c><00:23:11.360><c> worry</c><00:23:11.679><c> about</c><00:23:11.919><c> that</c>

00:23:12.549 --> 00:23:12.559 align:start position:0%
will not have to worry about that
 

00:23:12.559 --> 00:23:15.029 align:start position:0%
will not have to worry about that
this<00:23:12.880><c> should</c><00:23:13.120><c> be</c><00:23:13.360><c> the</c><00:23:13.840><c> final</c><00:23:14.159><c> code</c><00:23:14.480><c> finally</c>

00:23:15.029 --> 00:23:15.039 align:start position:0%
this should be the final code finally
 

00:23:15.039 --> 00:23:15.990 align:start position:0%
this should be the final code finally
and<00:23:15.200><c> you</c><00:23:15.360><c> can</c><00:23:15.520><c> see</c>

00:23:15.990 --> 00:23:16.000 align:start position:0%
and you can see
 

00:23:16.000 --> 00:23:19.669 align:start position:0%
and you can see
yes<00:23:16.480><c> it</c><00:23:16.640><c> is</c><00:23:17.120><c> pretty</c><00:23:17.520><c> efficient</c><00:23:18.559><c> and</c><00:23:18.960><c> in</c><00:23:19.120><c> python</c>

00:23:19.669 --> 00:23:19.679 align:start position:0%
yes it is pretty efficient and in python
 

00:23:19.679 --> 00:23:20.630 align:start position:0%
yes it is pretty efficient and in python
at<00:23:19.760><c> least</c><00:23:20.080><c> it's</c><00:23:20.320><c> not</c>

00:23:20.630 --> 00:23:20.640 align:start position:0%
at least it's not
 

00:23:20.640 --> 00:23:23.669 align:start position:0%
at least it's not
a<00:23:20.720><c> lot</c><00:23:20.960><c> of</c><00:23:21.200><c> code</c><00:23:21.520><c> i</c><00:23:21.679><c> think</c><00:23:22.159><c> even</c><00:23:22.480><c> in</c><00:23:22.720><c> java</c><00:23:23.120><c> and</c><00:23:23.200><c> c</c>

00:23:23.669 --> 00:23:23.679 align:start position:0%
a lot of code i think even in java and c
 

00:23:23.679 --> 00:23:25.190 align:start position:0%
a lot of code i think even in java and c
plus<00:23:23.919><c> it</c><00:23:24.000><c> shouldn't</c><00:23:24.240><c> be</c><00:23:24.400><c> that</c><00:23:24.559><c> much</c><00:23:24.799><c> code</c>

00:23:25.190 --> 00:23:25.200 align:start position:0%
plus it shouldn't be that much code
 

00:23:25.200 --> 00:23:27.510 align:start position:0%
plus it shouldn't be that much code
either<00:23:25.919><c> so</c><00:23:26.159><c> i</c><00:23:26.240><c> hope</c><00:23:26.480><c> this</c><00:23:26.720><c> was</c><00:23:26.880><c> helpful</c>

00:23:27.510 --> 00:23:27.520 align:start position:0%
either so i hope this was helpful
 

00:23:27.520 --> 00:23:29.909 align:start position:0%
either so i hope this was helpful
if<00:23:27.679><c> you</c><00:23:27.840><c> enjoyed</c><00:23:28.640><c> please</c><00:23:28.960><c> like</c><00:23:29.200><c> and</c><00:23:29.360><c> subscribe</c>

00:23:29.909 --> 00:23:29.919 align:start position:0%
if you enjoyed please like and subscribe
 

00:23:29.919 --> 00:23:31.029 align:start position:0%
if you enjoyed please like and subscribe
it<00:23:30.080><c> supports</c><00:23:30.480><c> the</c><00:23:30.559><c> channel</c>

00:23:31.029 --> 00:23:31.039 align:start position:0%
it supports the channel
 

00:23:31.039 --> 00:23:33.310 align:start position:0%
it supports the channel
a<00:23:31.200><c> lot</c><00:23:31.520><c> and</c><00:23:31.679><c> i'll</c><00:23:31.840><c> hopefully</c><00:23:32.400><c> see</c><00:23:32.559><c> you</c><00:23:32.720><c> pretty</c>

00:23:33.310 --> 00:23:33.320 align:start position:0%
a lot and i'll hopefully see you pretty
 

00:23:33.320 --> 00:23:36.320 align:start position:0%
a lot and i'll hopefully see you pretty
soon

