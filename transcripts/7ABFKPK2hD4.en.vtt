WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.589 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c>

00:00:01.589 --> 00:00:01.599 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.599 --> 00:00:03.110 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.760><c> some</c><00:00:01.920><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.639><c> today</c>

00:00:03.110 --> 00:00:03.120 align:start position:0%
write some more neat code today
 

00:00:03.120 --> 00:00:05.030 align:start position:0%
write some more neat code today
let's<00:00:03.280><c> take</c><00:00:03.520><c> a</c><00:00:03.600><c> look</c><00:00:03.760><c> at</c><00:00:03.919><c> a</c><00:00:04.080><c> really</c><00:00:04.480><c> popular</c>

00:00:05.030 --> 00:00:05.040 align:start position:0%
let's take a look at a really popular
 

00:00:05.040 --> 00:00:07.110 align:start position:0%
let's take a look at a really popular
interview<00:00:05.440><c> question</c><00:00:06.080><c> lru</c><00:00:06.720><c> cash</c>

00:00:07.110 --> 00:00:07.120 align:start position:0%
interview question lru cash
 

00:00:07.120 --> 00:00:09.589 align:start position:0%
interview question lru cash
it's<00:00:07.279><c> even</c><00:00:07.520><c> asked</c><00:00:07.919><c> by</c><00:00:08.240><c> twitch</c><00:00:08.559><c> tv</c><00:00:09.120><c> it's</c><00:00:09.360><c> one</c><00:00:09.519><c> of</c>

00:00:09.589 --> 00:00:09.599 align:start position:0%
it's even asked by twitch tv it's one of
 

00:00:09.599 --> 00:00:11.749 align:start position:0%
it's even asked by twitch tv it's one of
their<00:00:09.840><c> most</c><00:00:10.080><c> popular</c><00:00:10.559><c> interview</c><00:00:10.960><c> questions</c>

00:00:11.749 --> 00:00:11.759 align:start position:0%
their most popular interview questions
 

00:00:11.759 --> 00:00:13.830 align:start position:0%
their most popular interview questions
and<00:00:12.000><c> also</c><00:00:12.400><c> don't</c><00:00:12.559><c> forget</c><00:00:12.960><c> to</c><00:00:13.200><c> like</c><00:00:13.360><c> the</c><00:00:13.519><c> video</c>

00:00:13.830 --> 00:00:13.840 align:start position:0%
and also don't forget to like the video
 

00:00:13.840 --> 00:00:14.870 align:start position:0%
and also don't forget to like the video
it<00:00:13.920><c> supports</c><00:00:14.320><c> the</c><00:00:14.480><c> channel</c>

00:00:14.870 --> 00:00:14.880 align:start position:0%
it supports the channel
 

00:00:14.880 --> 00:00:17.189 align:start position:0%
it supports the channel
a<00:00:14.960><c> lot</c><00:00:15.599><c> so</c><00:00:15.759><c> this</c><00:00:15.920><c> is</c><00:00:16.080><c> definitely</c><00:00:16.640><c> more</c><00:00:16.960><c> of</c><00:00:17.119><c> a</c>

00:00:17.189 --> 00:00:17.199 align:start position:0%
a lot so this is definitely more of a
 

00:00:17.199 --> 00:00:19.189 align:start position:0%
a lot so this is definitely more of a
design<00:00:17.760><c> problem</c><00:00:18.240><c> than</c><00:00:18.400><c> an</c><00:00:18.560><c> actual</c>

00:00:19.189 --> 00:00:19.199 align:start position:0%
design problem than an actual
 

00:00:19.199 --> 00:00:21.590 align:start position:0%
design problem than an actual
algorithms<00:00:19.920><c> problem</c><00:00:20.480><c> so</c><00:00:20.720><c> we</c><00:00:20.880><c> have</c><00:00:21.039><c> some</c><00:00:21.279><c> kind</c>

00:00:21.590 --> 00:00:21.600 align:start position:0%
algorithms problem so we have some kind
 

00:00:21.600 --> 00:00:22.790 align:start position:0%
algorithms problem so we have some kind
of<00:00:21.840><c> cache</c>

00:00:22.790 --> 00:00:22.800 align:start position:0%
of cache
 

00:00:22.800 --> 00:00:24.790 align:start position:0%
of cache
that's<00:00:23.039><c> going</c><00:00:23.199><c> to</c><00:00:23.279><c> store</c><00:00:23.680><c> values</c><00:00:24.320><c> it</c><00:00:24.480><c> has</c><00:00:24.640><c> a</c>

00:00:24.790 --> 00:00:24.800 align:start position:0%
that's going to store values it has a
 

00:00:24.800 --> 00:00:26.310 align:start position:0%
that's going to store values it has a
capacity<00:00:25.439><c> so</c><00:00:25.599><c> it's</c><00:00:25.840><c> fixed</c>

00:00:26.310 --> 00:00:26.320 align:start position:0%
capacity so it's fixed
 

00:00:26.320 --> 00:00:28.630 align:start position:0%
capacity so it's fixed
size<00:00:27.119><c> and</c><00:00:27.439><c> we</c><00:00:27.680><c> want</c><00:00:27.840><c> to</c><00:00:27.920><c> be</c><00:00:28.000><c> able</c><00:00:28.160><c> to</c><00:00:28.400><c> get</c>

00:00:28.630 --> 00:00:28.640 align:start position:0%
size and we want to be able to get
 

00:00:28.640 --> 00:00:30.790 align:start position:0%
size and we want to be able to get
values<00:00:29.119><c> from</c><00:00:29.279><c> this</c><00:00:29.519><c> cache</c><00:00:29.920><c> based</c><00:00:30.320><c> on</c><00:00:30.480><c> a</c>

00:00:30.790 --> 00:00:30.800 align:start position:0%
values from this cache based on a
 

00:00:30.800 --> 00:00:34.069 align:start position:0%
values from this cache based on a
key<00:00:31.119><c> value</c><00:00:32.079><c> if</c><00:00:32.320><c> that</c><00:00:32.559><c> key</c><00:00:32.800><c> value</c><00:00:33.200><c> exists</c>

00:00:34.069 --> 00:00:34.079 align:start position:0%
key value if that key value exists
 

00:00:34.079 --> 00:00:35.750 align:start position:0%
key value if that key value exists
then<00:00:34.320><c> we'll</c><00:00:34.480><c> return</c><00:00:34.880><c> the</c><00:00:35.040><c> value</c><00:00:35.360><c> that</c><00:00:35.600><c> it</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
then we'll return the value that it
 

00:00:35.760 --> 00:00:37.750 align:start position:0%
then we'll return the value that it
corresponds<00:00:36.320><c> to</c><00:00:36.559><c> if</c><00:00:36.719><c> it</c><00:00:36.800><c> doesn't</c><00:00:37.200><c> exist</c><00:00:37.600><c> the</c>

00:00:37.750 --> 00:00:37.760 align:start position:0%
corresponds to if it doesn't exist the
 

00:00:37.760 --> 00:00:39.430 align:start position:0%
corresponds to if it doesn't exist the
default<00:00:38.239><c> value</c><00:00:38.640><c> we</c><00:00:38.719><c> want</c><00:00:38.879><c> to</c><00:00:38.960><c> return</c><00:00:39.280><c> is</c>

00:00:39.430 --> 00:00:39.440 align:start position:0%
default value we want to return is
 

00:00:39.440 --> 00:00:40.549 align:start position:0%
default value we want to return is
negative<00:00:39.840><c> one</c>

00:00:40.549 --> 00:00:40.559 align:start position:0%
negative one
 

00:00:40.559 --> 00:00:42.310 align:start position:0%
negative one
and<00:00:40.719><c> if</c><00:00:40.879><c> we're</c><00:00:41.040><c> getting</c><00:00:41.360><c> values</c><00:00:41.760><c> we</c><00:00:41.920><c> also</c><00:00:42.160><c> need</c>

00:00:42.310 --> 00:00:42.320 align:start position:0%
and if we're getting values we also need
 

00:00:42.320 --> 00:00:43.990 align:start position:0%
and if we're getting values we also need
to<00:00:42.399><c> be</c><00:00:42.559><c> able</c><00:00:42.640><c> to</c><00:00:42.879><c> put</c><00:00:43.120><c> values</c><00:00:43.600><c> into</c><00:00:43.760><c> the</c>

00:00:43.990 --> 00:00:44.000 align:start position:0%
to be able to put values into the
 

00:00:44.000 --> 00:00:46.790 align:start position:0%
to be able to put values into the
cache<00:00:44.719><c> we're</c><00:00:44.960><c> putting</c><00:00:45.200><c> them</c><00:00:45.520><c> in</c><00:00:45.840><c> based</c><00:00:46.239><c> on</c><00:00:46.559><c> key</c>

00:00:46.790 --> 00:00:46.800 align:start position:0%
cache we're putting them in based on key
 

00:00:46.800 --> 00:00:47.910 align:start position:0%
cache we're putting them in based on key
value<00:00:47.280><c> pairs</c>

00:00:47.910 --> 00:00:47.920 align:start position:0%
value pairs
 

00:00:47.920 --> 00:00:49.990 align:start position:0%
value pairs
and<00:00:48.160><c> there's</c><00:00:48.399><c> a</c><00:00:48.480><c> lot</c><00:00:48.719><c> of</c><00:00:48.879><c> edge</c><00:00:49.120><c> cases</c><00:00:49.680><c> and</c><00:00:49.840><c> they</c>

00:00:49.990 --> 00:00:50.000 align:start position:0%
and there's a lot of edge cases and they
 

00:00:50.000 --> 00:00:51.670 align:start position:0%
and there's a lot of edge cases and they
explain<00:00:50.480><c> a</c><00:00:50.559><c> bit</c><00:00:50.719><c> of</c><00:00:50.800><c> them</c><00:00:51.039><c> to</c><00:00:51.280><c> us</c>

00:00:51.670 --> 00:00:51.680 align:start position:0%
explain a bit of them to us
 

00:00:51.680 --> 00:00:54.950 align:start position:0%
explain a bit of them to us
if<00:00:51.840><c> the</c><00:00:52.079><c> key</c><00:00:52.480><c> already</c><00:00:53.039><c> exists</c><00:00:54.000><c> in</c><00:00:54.320><c> the</c><00:00:54.480><c> cache</c>

00:00:54.950 --> 00:00:54.960 align:start position:0%
if the key already exists in the cache
 

00:00:54.960 --> 00:00:55.670 align:start position:0%
if the key already exists in the cache
then

00:00:55.670 --> 00:00:55.680 align:start position:0%
then
 

00:00:55.680 --> 00:00:58.229 align:start position:0%
then
we<00:00:56.000><c> just</c><00:00:56.160><c> want</c><00:00:56.399><c> to</c><00:00:56.559><c> update</c><00:00:56.960><c> the</c><00:00:57.120><c> value</c><00:00:58.000><c> if</c><00:00:58.160><c> it</c>

00:00:58.229 --> 00:00:58.239 align:start position:0%
we just want to update the value if it
 

00:00:58.239 --> 00:00:59.750 align:start position:0%
we just want to update the value if it
doesn't<00:00:58.559><c> already</c><00:00:58.960><c> exist</c><00:00:59.359><c> then</c><00:00:59.520><c> we're</c>

00:00:59.750 --> 00:00:59.760 align:start position:0%
doesn't already exist then we're
 

00:00:59.760 --> 00:01:01.510 align:start position:0%
doesn't already exist then we're
inserting<00:01:00.239><c> it</c><00:01:00.320><c> for</c><00:01:00.480><c> the</c><00:01:00.559><c> first</c><00:01:00.960><c> time</c><00:01:01.199><c> so</c><00:01:01.440><c> we</c>

00:01:01.510 --> 00:01:01.520 align:start position:0%
inserting it for the first time so we
 

00:01:01.520 --> 00:01:03.430 align:start position:0%
inserting it for the first time so we
can<00:01:01.760><c> put</c><00:01:02.000><c> that</c><00:01:02.239><c> key</c><00:01:02.480><c> value</c><00:01:02.960><c> pair</c>

00:01:03.430 --> 00:01:03.440 align:start position:0%
can put that key value pair
 

00:01:03.440 --> 00:01:06.149 align:start position:0%
can put that key value pair
into<00:01:03.760><c> the</c><00:01:03.920><c> cache</c><00:01:04.559><c> and</c><00:01:05.119><c> remember</c><00:01:05.680><c> this</c><00:01:05.920><c> does</c>

00:01:06.149 --> 00:01:06.159 align:start position:0%
into the cache and remember this does
 

00:01:06.159 --> 00:01:08.070 align:start position:0%
into the cache and remember this does
have<00:01:06.400><c> a</c><00:01:06.560><c> fixed</c><00:01:06.880><c> size</c><00:01:07.280><c> capacity</c>

00:01:08.070 --> 00:01:08.080 align:start position:0%
have a fixed size capacity
 

00:01:08.080 --> 00:01:11.750 align:start position:0%
have a fixed size capacity
so<00:01:08.479><c> if</c><00:01:08.640><c> we</c><00:01:08.960><c> ever</c><00:01:09.360><c> exceed</c><00:01:09.920><c> the</c><00:01:10.080><c> capacity</c>

00:01:11.750 --> 00:01:11.760 align:start position:0%
so if we ever exceed the capacity
 

00:01:11.760 --> 00:01:15.109 align:start position:0%
so if we ever exceed the capacity
then<00:01:12.000><c> we</c><00:01:12.240><c> have</c><00:01:12.400><c> to</c><00:01:12.720><c> evict</c><00:01:13.680><c> the</c><00:01:14.000><c> least</c><00:01:14.400><c> recently</c>

00:01:15.109 --> 00:01:15.119 align:start position:0%
then we have to evict the least recently
 

00:01:15.119 --> 00:01:15.830 align:start position:0%
then we have to evict the least recently
used

00:01:15.830 --> 00:01:15.840 align:start position:0%
used
 

00:01:15.840 --> 00:01:17.990 align:start position:0%
used
so<00:01:16.000><c> that's</c><00:01:16.240><c> why</c><00:01:16.479><c> this</c><00:01:16.720><c> is</c><00:01:16.799><c> called</c><00:01:17.119><c> the</c><00:01:17.439><c> lru</c>

00:01:17.990 --> 00:01:18.000 align:start position:0%
so that's why this is called the lru
 

00:01:18.000 --> 00:01:19.190 align:start position:0%
so that's why this is called the lru
cash<00:01:18.400><c> problem</c>

00:01:19.190 --> 00:01:19.200 align:start position:0%
cash problem
 

00:01:19.200 --> 00:01:20.950 align:start position:0%
cash problem
and<00:01:19.360><c> it</c><00:01:19.520><c> also</c><00:01:19.759><c> makes</c><00:01:20.000><c> sense</c><00:01:20.320><c> right</c><00:01:20.560><c> if</c><00:01:20.720><c> there's</c>

00:01:20.950 --> 00:01:20.960 align:start position:0%
and it also makes sense right if there's
 

00:01:20.960 --> 00:01:23.510 align:start position:0%
and it also makes sense right if there's
a<00:01:21.200><c> key</c><00:01:21.520><c> that</c><00:01:21.680><c> we're</c><00:01:21.920><c> not</c><00:01:22.159><c> really</c><00:01:22.560><c> using</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
a key that we're not really using
 

00:01:23.520 --> 00:01:25.270 align:start position:0%
a key that we're not really using
then<00:01:24.000><c> that's</c><00:01:24.320><c> the</c><00:01:24.479><c> one</c><00:01:24.720><c> that</c><00:01:24.880><c> we're</c><00:01:25.040><c> going</c><00:01:25.200><c> to</c>

00:01:25.270 --> 00:01:25.280 align:start position:0%
then that's the one that we're going to
 

00:01:25.280 --> 00:01:27.109 align:start position:0%
then that's the one that we're going to
take<00:01:25.680><c> out</c><00:01:26.000><c> of</c><00:01:26.159><c> the</c><00:01:26.320><c> cache</c>

00:01:27.109 --> 00:01:27.119 align:start position:0%
take out of the cache
 

00:01:27.119 --> 00:01:29.830 align:start position:0%
take out of the cache
and<00:01:27.280><c> this</c><00:01:27.439><c> is</c><00:01:27.600><c> actually</c><00:01:27.920><c> pretty</c><00:01:28.240><c> similar</c><00:01:28.960><c> to</c>

00:01:29.830 --> 00:01:29.840 align:start position:0%
and this is actually pretty similar to
 

00:01:29.840 --> 00:01:31.350 align:start position:0%
and this is actually pretty similar to
how<00:01:30.159><c> browsers</c><00:01:30.799><c> work</c>

00:01:31.350 --> 00:01:31.360 align:start position:0%
how browsers work
 

00:01:31.360 --> 00:01:33.749 align:start position:0%
how browsers work
so<00:01:31.600><c> for</c><00:01:31.759><c> example</c><00:01:32.400><c> if</c><00:01:32.560><c> you're</c><00:01:32.720><c> using</c><00:01:33.040><c> chrome</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
so for example if you're using chrome
 

00:01:33.759 --> 00:01:34.870 align:start position:0%
so for example if you're using chrome
and<00:01:34.320><c> you</c><00:01:34.479><c> know</c>

00:01:34.870 --> 00:01:34.880 align:start position:0%
and you know
 

00:01:34.880 --> 00:01:36.950 align:start position:0%
and you know
web<00:01:35.119><c> browsers</c><00:01:35.520><c> have</c><00:01:35.759><c> caches</c><00:01:36.479><c> if</c><00:01:36.640><c> there</c><00:01:36.799><c> are</c>

00:01:36.950 --> 00:01:36.960 align:start position:0%
web browsers have caches if there are
 

00:01:36.960 --> 00:01:38.630 align:start position:0%
web browsers have caches if there are
values<00:01:37.360><c> that</c><00:01:37.439><c> we're</c><00:01:37.600><c> not</c><00:01:37.759><c> really</c><00:01:38.159><c> using</c><00:01:38.560><c> in</c>

00:01:38.630 --> 00:01:38.640 align:start position:0%
values that we're not really using in
 

00:01:38.640 --> 00:01:39.030 align:start position:0%
values that we're not really using in
those

00:01:39.030 --> 00:01:39.040 align:start position:0%
those
 

00:01:39.040 --> 00:01:40.789 align:start position:0%
those
in<00:01:39.200><c> that</c><00:01:39.360><c> cache</c><00:01:39.600><c> then</c><00:01:40.000><c> of</c><00:01:40.159><c> course</c><00:01:40.479><c> we</c><00:01:40.640><c> can</c>

00:01:40.789 --> 00:01:40.799 align:start position:0%
in that cache then of course we can
 

00:01:40.799 --> 00:01:43.109 align:start position:0%
in that cache then of course we can
remove<00:01:41.200><c> them</c><00:01:41.680><c> let's</c><00:01:41.920><c> also</c><00:01:42.159><c> try</c><00:01:42.320><c> to</c><00:01:42.479><c> solve</c><00:01:42.799><c> this</c>

00:01:43.109 --> 00:01:43.119 align:start position:0%
remove them let's also try to solve this
 

00:01:43.119 --> 00:01:45.749 align:start position:0%
remove them let's also try to solve this
the<00:01:43.520><c> most</c><00:01:43.920><c> efficient</c><00:01:44.399><c> way</c><00:01:44.640><c> which</c><00:01:44.960><c> is</c><00:01:45.360><c> each</c><00:01:45.600><c> of</c>

00:01:45.749 --> 00:01:45.759 align:start position:0%
the most efficient way which is each of
 

00:01:45.759 --> 00:01:47.190 align:start position:0%
the most efficient way which is each of
these<00:01:46.079><c> operations</c><00:01:46.799><c> get</c>

00:01:47.190 --> 00:01:47.200 align:start position:0%
these operations get
 

00:01:47.200 --> 00:01:49.670 align:start position:0%
these operations get
and<00:01:47.439><c> put</c><00:01:47.759><c> are</c><00:01:47.920><c> going</c><00:01:48.000><c> to</c><00:01:48.079><c> be</c><00:01:48.479><c> constant</c><00:01:49.200><c> time</c>

00:01:49.670 --> 00:01:49.680 align:start position:0%
and put are going to be constant time
 

00:01:49.680 --> 00:01:51.350 align:start position:0%
and put are going to be constant time
operations<00:01:50.479><c> and</c><00:01:50.640><c> it's</c><00:01:50.720><c> going</c><00:01:50.799><c> to</c><00:01:50.880><c> be</c><00:01:51.040><c> kind</c><00:01:51.200><c> of</c>

00:01:51.350 --> 00:01:51.360 align:start position:0%
operations and it's going to be kind of
 

00:01:51.360 --> 00:01:52.389 align:start position:0%
operations and it's going to be kind of
tricky<00:01:51.840><c> but</c>

00:01:52.389 --> 00:01:52.399 align:start position:0%
tricky but
 

00:01:52.399 --> 00:01:54.469 align:start position:0%
tricky but
it's<00:01:52.640><c> definitely</c><00:01:53.119><c> possible</c><00:01:53.920><c> so</c><00:01:54.079><c> let's</c><00:01:54.320><c> just</c>

00:01:54.469 --> 00:01:54.479 align:start position:0%
it's definitely possible so let's just
 

00:01:54.479 --> 00:01:56.550 align:start position:0%
it's definitely possible so let's just
look<00:01:54.720><c> at</c><00:01:54.799><c> the</c><00:01:54.960><c> first</c><00:01:55.360><c> example</c><00:01:55.920><c> so</c>

00:01:56.550 --> 00:01:56.560 align:start position:0%
look at the first example so
 

00:01:56.560 --> 00:01:59.429 align:start position:0%
look at the first example so
the<00:01:56.880><c> input</c><00:01:57.600><c> is</c><00:01:58.159><c> two</c><00:01:58.719><c> so</c><00:01:58.880><c> that's</c><00:01:59.119><c> something</c>

00:01:59.429 --> 00:01:59.439 align:start position:0%
the input is two so that's something
 

00:01:59.439 --> 00:02:00.469 align:start position:0%
the input is two so that's something
that<00:01:59.600><c> we</c><00:01:59.759><c> need</c><00:02:00.079><c> to</c>

00:02:00.469 --> 00:02:00.479 align:start position:0%
that we need to
 

00:02:00.479 --> 00:02:03.830 align:start position:0%
that we need to
kind<00:02:00.719><c> of</c><00:02:01.040><c> remember</c><00:02:01.680><c> right</c><00:02:01.840><c> the</c><00:02:02.000><c> capacity</c><00:02:03.040><c> is</c>

00:02:03.830 --> 00:02:03.840 align:start position:0%
kind of remember right the capacity is
 

00:02:03.840 --> 00:02:05.910 align:start position:0%
kind of remember right the capacity is
two<00:02:04.079><c> in</c><00:02:04.159><c> this</c><00:02:04.399><c> case</c><00:02:04.719><c> and</c><00:02:04.880><c> the</c><00:02:05.040><c> next</c><00:02:05.280><c> operation</c>

00:02:05.910 --> 00:02:05.920 align:start position:0%
two in this case and the next operation
 

00:02:05.920 --> 00:02:08.229 align:start position:0%
two in this case and the next operation
is<00:02:06.159><c> put</c><00:02:06.799><c> so</c><00:02:06.960><c> we're</c><00:02:07.200><c> putting</c><00:02:07.840><c> a</c>

00:02:08.229 --> 00:02:08.239 align:start position:0%
is put so we're putting a
 

00:02:08.239 --> 00:02:11.910 align:start position:0%
is put so we're putting a
pair<00:02:08.640><c> of</c><00:02:09.200><c> one</c><00:02:09.440><c> one</c><00:02:09.920><c> key</c><00:02:10.239><c> one</c><00:02:10.720><c> value</c><00:02:11.280><c> one</c>

00:02:11.910 --> 00:02:11.920 align:start position:0%
pair of one one key one value one
 

00:02:11.920 --> 00:02:14.470 align:start position:0%
pair of one one key one value one
and<00:02:12.480><c> we're</c><00:02:12.720><c> going</c><00:02:12.800><c> to</c><00:02:12.959><c> keep</c><00:02:13.200><c> these</c><00:02:13.680><c> kind</c><00:02:14.000><c> of</c><00:02:14.239><c> in</c>

00:02:14.470 --> 00:02:14.480 align:start position:0%
and we're going to keep these kind of in
 

00:02:14.480 --> 00:02:15.830 align:start position:0%
and we're going to keep these kind of in
order<00:02:14.959><c> right</c><00:02:15.280><c> because</c>

00:02:15.830 --> 00:02:15.840 align:start position:0%
order right because
 

00:02:15.840 --> 00:02:18.070 align:start position:0%
order right because
we<00:02:16.000><c> want</c><00:02:16.160><c> to</c><00:02:16.319><c> remove</c><00:02:17.040><c> the</c><00:02:17.280><c> least</c><00:02:17.599><c> recently</c>

00:02:18.070 --> 00:02:18.080 align:start position:0%
we want to remove the least recently
 

00:02:18.080 --> 00:02:19.830 align:start position:0%
we want to remove the least recently
used<00:02:18.319><c> so</c><00:02:18.480><c> we</c><00:02:18.640><c> got</c><00:02:18.800><c> to</c><00:02:18.879><c> kind</c><00:02:19.040><c> of</c><00:02:19.200><c> remember</c>

00:02:19.830 --> 00:02:19.840 align:start position:0%
used so we got to kind of remember
 

00:02:19.840 --> 00:02:22.150 align:start position:0%
used so we got to kind of remember
in<00:02:20.000><c> what</c><00:02:20.319><c> order</c><00:02:20.800><c> are</c><00:02:20.879><c> we</c><00:02:21.120><c> adding</c><00:02:21.360><c> these</c><00:02:21.680><c> values</c>

00:02:22.150 --> 00:02:22.160 align:start position:0%
in what order are we adding these values
 

00:02:22.160 --> 00:02:23.589 align:start position:0%
in what order are we adding these values
in<00:02:22.400><c> the</c><00:02:22.560><c> next</c><00:02:22.879><c> one</c>

00:02:23.589 --> 00:02:23.599 align:start position:0%
in the next one
 

00:02:23.599 --> 00:02:25.510 align:start position:0%
in the next one
is<00:02:23.760><c> another</c><00:02:24.239><c> put</c><00:02:24.560><c> operation</c><00:02:25.200><c> and</c><00:02:25.360><c> we're</c>

00:02:25.510 --> 00:02:25.520 align:start position:0%
is another put operation and we're
 

00:02:25.520 --> 00:02:26.949 align:start position:0%
is another put operation and we're
putting<00:02:26.000><c> 2</c><00:02:26.239><c> 2.</c>

00:02:26.949 --> 00:02:26.959 align:start position:0%
putting 2 2.
 

00:02:26.959 --> 00:02:28.630 align:start position:0%
putting 2 2.
of<00:02:27.120><c> course</c><00:02:27.520><c> for</c><00:02:27.760><c> these</c><00:02:28.000><c> first</c><00:02:28.400><c> three</c>

00:02:28.630 --> 00:02:28.640 align:start position:0%
of course for these first three
 

00:02:28.640 --> 00:02:30.470 align:start position:0%
of course for these first three
operations<00:02:29.280><c> we're</c><00:02:29.440><c> not</c><00:02:29.680><c> really</c><00:02:29.920><c> returning</c>

00:02:30.470 --> 00:02:30.480 align:start position:0%
operations we're not really returning
 

00:02:30.480 --> 00:02:30.949 align:start position:0%
operations we're not really returning
anything

00:02:30.949 --> 00:02:30.959 align:start position:0%
anything
 

00:02:30.959 --> 00:02:35.030 align:start position:0%
anything
so<00:02:31.120><c> the</c><00:02:31.360><c> output</c><00:02:31.760><c> is</c><00:02:31.840><c> going</c><00:02:31.920><c> to</c><00:02:32.000><c> be</c><00:02:32.239><c> null</c>

00:02:35.030 --> 00:02:35.040 align:start position:0%
 
 

00:02:35.040 --> 00:02:37.430 align:start position:0%
 
so<00:02:35.360><c> next</c><00:02:35.680><c> we're</c><00:02:35.920><c> actually</c><00:02:36.239><c> doing</c><00:02:36.640><c> a</c><00:02:37.040><c> get</c>

00:02:37.430 --> 00:02:37.440 align:start position:0%
so next we're actually doing a get
 

00:02:37.440 --> 00:02:38.390 align:start position:0%
so next we're actually doing a get
operation

00:02:38.390 --> 00:02:38.400 align:start position:0%
operation
 

00:02:38.400 --> 00:02:41.350 align:start position:0%
operation
and<00:02:38.560><c> we</c><00:02:38.800><c> want</c><00:02:38.959><c> to</c><00:02:39.280><c> get</c><00:02:39.599><c> the</c><00:02:39.840><c> value</c><00:02:40.640><c> that</c><00:02:40.879><c> has</c><00:02:41.120><c> a</c>

00:02:41.350 --> 00:02:41.360 align:start position:0%
and we want to get the value that has a
 

00:02:41.360 --> 00:02:41.830 align:start position:0%
and we want to get the value that has a
key

00:02:41.830 --> 00:02:41.840 align:start position:0%
key
 

00:02:41.840 --> 00:02:44.150 align:start position:0%
key
of<00:02:42.160><c> one</c><00:02:42.640><c> and</c><00:02:42.800><c> remember</c><00:02:43.280><c> we're</c><00:02:43.519><c> trying</c><00:02:43.840><c> to</c><00:02:43.920><c> do</c>

00:02:44.150 --> 00:02:44.160 align:start position:0%
of one and remember we're trying to do
 

00:02:44.160 --> 00:02:44.869 align:start position:0%
of one and remember we're trying to do
this<00:02:44.560><c> as</c>

00:02:44.869 --> 00:02:44.879 align:start position:0%
this as
 

00:02:44.879 --> 00:02:47.110 align:start position:0%
this as
fast<00:02:45.280><c> as</c><00:02:45.519><c> possible</c><00:02:46.000><c> we're</c><00:02:46.239><c> trying</c><00:02:46.480><c> to</c><00:02:46.560><c> do</c><00:02:46.800><c> each</c>

00:02:47.110 --> 00:02:47.120 align:start position:0%
fast as possible we're trying to do each
 

00:02:47.120 --> 00:02:47.910 align:start position:0%
fast as possible we're trying to do each
operation

00:02:47.910 --> 00:02:47.920 align:start position:0%
operation
 

00:02:47.920 --> 00:02:51.030 align:start position:0%
operation
in<00:02:48.160><c> constant</c><00:02:48.800><c> time</c><00:02:49.280><c> so</c><00:02:49.680><c> how</c><00:02:50.000><c> can</c><00:02:50.160><c> we</c><00:02:50.480><c> know</c>

00:02:51.030 --> 00:02:51.040 align:start position:0%
in constant time so how can we know
 

00:02:51.040 --> 00:02:54.390 align:start position:0%
in constant time so how can we know
instantly<00:02:52.239><c> what</c><00:02:52.640><c> the</c><00:02:52.959><c> value</c><00:02:53.599><c> is</c>

00:02:54.390 --> 00:02:54.400 align:start position:0%
instantly what the value is
 

00:02:54.400 --> 00:02:57.509 align:start position:0%
instantly what the value is
when<00:02:54.560><c> the</c><00:02:54.879><c> key</c><00:02:55.440><c> is</c><00:02:55.760><c> one</c><00:02:56.400><c> well</c><00:02:56.640><c> the</c><00:02:56.879><c> easiest</c><00:02:57.360><c> way</c>

00:02:57.509 --> 00:02:57.519 align:start position:0%
when the key is one well the easiest way
 

00:02:57.519 --> 00:02:59.990 align:start position:0%
when the key is one well the easiest way
to<00:02:57.680><c> do</c><00:02:57.840><c> that</c><00:02:58.080><c> would</c><00:02:58.319><c> be</c><00:02:58.480><c> with</c><00:02:58.720><c> a</c><00:02:58.800><c> hashmap</c><00:02:59.440><c> right</c>

00:02:59.990 --> 00:03:00.000 align:start position:0%
to do that would be with a hashmap right
 

00:03:00.000 --> 00:03:03.030 align:start position:0%
to do that would be with a hashmap right
so<00:03:00.239><c> we're</c><00:03:00.480><c> going</c><00:03:00.560><c> to</c><00:03:00.720><c> use</c><00:03:01.200><c> a</c><00:03:01.599><c> hashmap</c><00:03:02.560><c> to</c>

00:03:03.030 --> 00:03:03.040 align:start position:0%
so we're going to use a hashmap to
 

00:03:03.040 --> 00:03:06.470 align:start position:0%
so we're going to use a hashmap to
instantly<00:03:03.840><c> look</c><00:03:04.080><c> up</c><00:03:04.480><c> the</c><00:03:04.720><c> value</c><00:03:05.280><c> of</c><00:03:05.440><c> every</c><00:03:05.840><c> key</c>

00:03:06.470 --> 00:03:06.480 align:start position:0%
instantly look up the value of every key
 

00:03:06.480 --> 00:03:08.470 align:start position:0%
instantly look up the value of every key
we<00:03:06.640><c> can</c><00:03:06.879><c> of</c><00:03:06.959><c> course</c><00:03:07.280><c> do</c><00:03:07.440><c> this</c><00:03:07.680><c> in</c><00:03:07.920><c> constant</c>

00:03:08.470 --> 00:03:08.480 align:start position:0%
we can of course do this in constant
 

00:03:08.480 --> 00:03:10.630 align:start position:0%
we can of course do this in constant
time<00:03:09.040><c> and</c><00:03:09.200><c> we</c><00:03:09.519><c> know</c><00:03:09.840><c> that</c>

00:03:10.630 --> 00:03:10.640 align:start position:0%
time and we know that
 

00:03:10.640 --> 00:03:13.430 align:start position:0%
time and we know that
we<00:03:11.519><c> the</c><00:03:11.760><c> size</c><00:03:12.159><c> of</c><00:03:12.239><c> this</c><00:03:12.400><c> hash</c><00:03:12.720><c> map</c><00:03:13.040><c> doesn't</c>

00:03:13.430 --> 00:03:13.440 align:start position:0%
we the size of this hash map doesn't
 

00:03:13.440 --> 00:03:15.589 align:start position:0%
we the size of this hash map doesn't
need<00:03:13.680><c> to</c><00:03:13.840><c> exceed</c><00:03:14.319><c> our</c><00:03:14.480><c> capacity</c><00:03:15.200><c> so</c>

00:03:15.589 --> 00:03:15.599 align:start position:0%
need to exceed our capacity so
 

00:03:15.599 --> 00:03:18.550 align:start position:0%
need to exceed our capacity so
we<00:03:15.840><c> can</c><00:03:16.080><c> have</c><00:03:16.319><c> only</c><00:03:16.640><c> two</c><00:03:16.879><c> values</c><00:03:17.280><c> here</c><00:03:17.519><c> right</c>

00:03:18.550 --> 00:03:18.560 align:start position:0%
we can have only two values here right
 

00:03:18.560 --> 00:03:21.110 align:start position:0%
we can have only two values here right
so<00:03:18.720><c> for</c><00:03:18.879><c> the</c><00:03:19.120><c> key</c><00:03:19.360><c> value</c><00:03:19.760><c> we</c><00:03:19.920><c> can</c><00:03:20.239><c> use</c><00:03:20.560><c> the</c><00:03:20.720><c> same</c>

00:03:21.110 --> 00:03:21.120 align:start position:0%
so for the key value we can use the same
 

00:03:21.120 --> 00:03:21.830 align:start position:0%
so for the key value we can use the same
value

00:03:21.830 --> 00:03:21.840 align:start position:0%
value
 

00:03:21.840 --> 00:03:24.550 align:start position:0%
value
that<00:03:22.080><c> we</c><00:03:22.239><c> use</c><00:03:22.480><c> for</c><00:03:22.720><c> each</c><00:03:22.959><c> of</c><00:03:23.120><c> our</c><00:03:23.280><c> nodes</c><00:03:24.159><c> and</c><00:03:24.400><c> we</c>

00:03:24.550 --> 00:03:24.560 align:start position:0%
that we use for each of our nodes and we
 

00:03:24.560 --> 00:03:24.949 align:start position:0%
that we use for each of our nodes and we
could

00:03:24.949 --> 00:03:24.959 align:start position:0%
could
 

00:03:24.959 --> 00:03:27.110 align:start position:0%
could
and<00:03:25.120><c> for</c><00:03:25.280><c> the</c><00:03:25.440><c> value</c><00:03:25.840><c> we</c><00:03:26.000><c> could</c><00:03:26.319><c> also</c><00:03:26.720><c> do</c><00:03:26.959><c> the</c>

00:03:27.110 --> 00:03:27.120 align:start position:0%
and for the value we could also do the
 

00:03:27.120 --> 00:03:29.190 align:start position:0%
and for the value we could also do the
same<00:03:27.440><c> thing</c><00:03:27.680><c> we</c><00:03:27.840><c> could</c><00:03:28.080><c> use</c><00:03:28.400><c> the</c><00:03:28.720><c> same</c>

00:03:29.190 --> 00:03:29.200 align:start position:0%
same thing we could use the same
 

00:03:29.200 --> 00:03:31.830 align:start position:0%
same thing we could use the same
value<00:03:29.519><c> that</c><00:03:29.680><c> we</c><00:03:29.840><c> use</c><00:03:30.080><c> in</c><00:03:30.239><c> our</c><00:03:30.400><c> nodes</c><00:03:31.360><c> but</c><00:03:31.680><c> i'm</c>

00:03:31.830 --> 00:03:31.840 align:start position:0%
value that we use in our nodes but i'm
 

00:03:31.840 --> 00:03:33.750 align:start position:0%
value that we use in our nodes but i'm
going<00:03:32.000><c> to</c><00:03:32.080><c> show</c><00:03:32.239><c> you</c><00:03:32.560><c> why</c><00:03:32.879><c> it's</c><00:03:33.120><c> going</c><00:03:33.200><c> to</c><00:03:33.280><c> be</c><00:03:33.519><c> a</c>

00:03:33.750 --> 00:03:33.760 align:start position:0%
going to show you why it's going to be a
 

00:03:33.760 --> 00:03:34.390 align:start position:0%
going to show you why it's going to be a
little<00:03:34.000><c> bit</c>

00:03:34.390 --> 00:03:34.400 align:start position:0%
little bit
 

00:03:34.400 --> 00:03:37.670 align:start position:0%
little bit
better<00:03:34.799><c> for</c><00:03:34.959><c> us</c><00:03:35.360><c> instead</c><00:03:36.560><c> to</c><00:03:36.799><c> have</c><00:03:37.040><c> the</c><00:03:37.280><c> value</c>

00:03:37.670 --> 00:03:37.680 align:start position:0%
better for us instead to have the value
 

00:03:37.680 --> 00:03:38.229 align:start position:0%
better for us instead to have the value
be<00:03:37.920><c> a</c>

00:03:38.229 --> 00:03:38.239 align:start position:0%
be a
 

00:03:38.239 --> 00:03:41.910 align:start position:0%
be a
pointer<00:03:39.040><c> to</c><00:03:39.440><c> the</c><00:03:39.680><c> node</c><00:03:40.080><c> itself</c><00:03:41.120><c> and</c><00:03:41.280><c> we</c><00:03:41.440><c> can</c><00:03:41.680><c> do</c>

00:03:41.910 --> 00:03:41.920 align:start position:0%
pointer to the node itself and we can do
 

00:03:41.920 --> 00:03:44.229 align:start position:0%
pointer to the node itself and we can do
the<00:03:42.080><c> same</c><00:03:42.319><c> thing</c><00:03:42.720><c> with</c><00:03:42.959><c> the</c><00:03:43.280><c> second</c><00:03:43.680><c> node</c>

00:03:44.229 --> 00:03:44.239 align:start position:0%
the same thing with the second node
 

00:03:44.239 --> 00:03:47.750 align:start position:0%
the same thing with the second node
that<00:03:44.400><c> we</c><00:03:44.720><c> inserted</c><00:03:45.280><c> as</c><00:03:45.440><c> well</c><00:03:47.120><c> so</c><00:03:47.280><c> for</c><00:03:47.519><c> key</c>

00:03:47.750 --> 00:03:47.760 align:start position:0%
that we inserted as well so for key
 

00:03:47.760 --> 00:03:48.789 align:start position:0%
that we inserted as well so for key
value<00:03:48.239><c> 2</c>

00:03:48.789 --> 00:03:48.799 align:start position:0%
value 2
 

00:03:48.799 --> 00:03:51.910 align:start position:0%
value 2
we're<00:03:48.959><c> going</c><00:03:49.120><c> to</c><00:03:49.280><c> point</c><00:03:49.680><c> at</c><00:03:49.920><c> this</c><00:03:50.239><c> node</c><00:03:51.200><c> so</c><00:03:51.440><c> now</c>

00:03:51.910 --> 00:03:51.920 align:start position:0%
we're going to point at this node so now
 

00:03:51.920 --> 00:03:55.270 align:start position:0%
we're going to point at this node so now
finally<00:03:52.560><c> when</c><00:03:52.799><c> we</c><00:03:53.200><c> call</c><00:03:53.519><c> this</c><00:03:54.000><c> get</c><00:03:54.560><c> and</c><00:03:54.720><c> we</c><00:03:54.959><c> ask</c>

00:03:55.270 --> 00:03:55.280 align:start position:0%
finally when we call this get and we ask
 

00:03:55.280 --> 00:03:56.070 align:start position:0%
finally when we call this get and we ask
for<00:03:55.439><c> the</c><00:03:55.680><c> key</c>

00:03:56.070 --> 00:03:56.080 align:start position:0%
for the key
 

00:03:56.080 --> 00:03:58.949 align:start position:0%
for the key
1<00:03:56.640><c> we're</c><00:03:56.799><c> going</c><00:03:56.879><c> to</c><00:03:57.040><c> return</c><00:03:57.920><c> the</c><00:03:58.159><c> value</c><00:03:58.720><c> 1</c>

00:03:58.949 --> 00:03:58.959 align:start position:0%
1 we're going to return the value 1
 

00:03:58.959 --> 00:04:00.869 align:start position:0%
1 we're going to return the value 1
that's<00:03:59.280><c> over</c><00:03:59.519><c> here</c>

00:04:00.869 --> 00:04:00.879 align:start position:0%
that's over here
 

00:04:00.879 --> 00:04:03.030 align:start position:0%
that's over here
which<00:04:01.120><c> is</c><00:04:01.280><c> exactly</c><00:04:01.840><c> what</c><00:04:02.080><c> the</c><00:04:02.319><c> output</c><00:04:02.720><c> tells</c>

00:04:03.030 --> 00:04:03.040 align:start position:0%
which is exactly what the output tells
 

00:04:03.040 --> 00:04:04.550 align:start position:0%
which is exactly what the output tells
us<00:04:03.360><c> is</c><00:04:03.519><c> correct</c>

00:04:04.550 --> 00:04:04.560 align:start position:0%
us is correct
 

00:04:04.560 --> 00:04:08.070 align:start position:0%
us is correct
so<00:04:04.879><c> since</c><00:04:05.360><c> we</c><00:04:05.760><c> just</c><00:04:06.400><c> used</c><00:04:06.720><c> the</c><00:04:07.040><c> get</c><00:04:07.439><c> operation</c>

00:04:08.070 --> 00:04:08.080 align:start position:0%
so since we just used the get operation
 

00:04:08.080 --> 00:04:10.229 align:start position:0%
so since we just used the get operation
to<00:04:08.400><c> get</c><00:04:08.640><c> this</c><00:04:08.799><c> one</c><00:04:08.959><c> we</c><00:04:09.120><c> went</c><00:04:09.360><c> to</c><00:04:09.519><c> our</c><00:04:09.760><c> key</c>

00:04:10.229 --> 00:04:10.239 align:start position:0%
to get this one we went to our key
 

00:04:10.239 --> 00:04:11.990 align:start position:0%
to get this one we went to our key
then<00:04:10.480><c> we</c><00:04:10.640><c> found</c><00:04:10.959><c> this</c><00:04:11.200><c> value</c><00:04:11.519><c> and</c><00:04:11.599><c> then</c><00:04:11.760><c> we</c>

00:04:11.990 --> 00:04:12.000 align:start position:0%
then we found this value and then we
 

00:04:12.000 --> 00:04:13.750 align:start position:0%
then we found this value and then we
returned<00:04:12.480><c> that</c><00:04:12.720><c> value</c>

00:04:13.750 --> 00:04:13.760 align:start position:0%
returned that value
 

00:04:13.760 --> 00:04:16.550 align:start position:0%
returned that value
that<00:04:14.080><c> makes</c><00:04:14.480><c> this</c><00:04:14.799><c> the</c><00:04:15.040><c> most</c><00:04:15.519><c> recently</c><00:04:16.160><c> used</c>

00:04:16.550 --> 00:04:16.560 align:start position:0%
that makes this the most recently used
 

00:04:16.560 --> 00:04:19.030 align:start position:0%
that makes this the most recently used
value<00:04:17.120><c> and</c><00:04:17.359><c> this</c><00:04:17.680><c> is</c><00:04:17.840><c> the</c><00:04:18.160><c> least</c><00:04:18.479><c> recently</c>

00:04:19.030 --> 00:04:19.040 align:start position:0%
value and this is the least recently
 

00:04:19.040 --> 00:04:20.469 align:start position:0%
value and this is the least recently
used<00:04:19.280><c> value</c><00:04:19.759><c> now</c>

00:04:20.469 --> 00:04:20.479 align:start position:0%
used value now
 

00:04:20.479 --> 00:04:22.629 align:start position:0%
used value now
so<00:04:20.880><c> i'm</c><00:04:21.120><c> going</c><00:04:21.280><c> to</c><00:04:21.359><c> keep</c><00:04:21.600><c> track</c><00:04:21.919><c> of</c><00:04:22.079><c> the</c><00:04:22.240><c> most</c>

00:04:22.629 --> 00:04:22.639 align:start position:0%
so i'm going to keep track of the most
 

00:04:22.639 --> 00:04:24.230 align:start position:0%
so i'm going to keep track of the most
recent<00:04:23.199><c> and</c><00:04:23.360><c> least</c><00:04:23.680><c> recent</c>

00:04:24.230 --> 00:04:24.240 align:start position:0%
recent and least recent
 

00:04:24.240 --> 00:04:27.270 align:start position:0%
recent and least recent
by<00:04:24.639><c> having</c><00:04:25.040><c> a</c><00:04:25.360><c> left</c><00:04:25.759><c> and</c><00:04:26.080><c> right</c>

00:04:27.270 --> 00:04:27.280 align:start position:0%
by having a left and right
 

00:04:27.280 --> 00:04:29.590 align:start position:0%
by having a left and right
pointers<00:04:27.680><c> right</c><00:04:28.000><c> so</c><00:04:28.240><c> this</c><00:04:28.560><c> left</c><00:04:28.960><c> side</c><00:04:29.440><c> is</c>

00:04:29.590 --> 00:04:29.600 align:start position:0%
pointers right so this left side is
 

00:04:29.600 --> 00:04:30.550 align:start position:0%
pointers right so this left side is
going<00:04:29.759><c> to</c><00:04:29.840><c> be</c>

00:04:30.550 --> 00:04:30.560 align:start position:0%
going to be
 

00:04:30.560 --> 00:04:33.990 align:start position:0%
going to be
the<00:04:30.800><c> least</c><00:04:31.199><c> recently</c><00:04:31.759><c> used</c><00:04:32.720><c> and</c><00:04:33.120><c> the</c><00:04:33.440><c> right</c>

00:04:33.990 --> 00:04:34.000 align:start position:0%
the least recently used and the right
 

00:04:34.000 --> 00:04:39.430 align:start position:0%
the least recently used and the right
over<00:04:34.320><c> here</c><00:04:34.880><c> is</c><00:04:35.040><c> going</c><00:04:35.199><c> to</c><00:04:35.360><c> be</c><00:04:36.240><c> the</c><00:04:36.720><c> most</c><00:04:37.120><c> recent</c>

00:04:39.430 --> 00:04:39.440 align:start position:0%
over here is going to be the most recent
 

00:04:39.440 --> 00:04:41.510 align:start position:0%
over here is going to be the most recent
so<00:04:39.680><c> therefore</c><00:04:40.240><c> we're</c><00:04:40.479><c> basically</c><00:04:40.960><c> going</c><00:04:41.120><c> to</c><00:04:41.199><c> be</c>

00:04:41.510 --> 00:04:41.520 align:start position:0%
so therefore we're basically going to be
 

00:04:41.520 --> 00:04:42.629 align:start position:0%
so therefore we're basically going to be
swapping

00:04:42.629 --> 00:04:42.639 align:start position:0%
swapping
 

00:04:42.639 --> 00:04:45.510 align:start position:0%
swapping
these<00:04:42.960><c> two</c><00:04:43.199><c> nodes</c><00:04:43.680><c> right</c><00:04:44.479><c> and</c><00:04:44.639><c> so</c><00:04:44.880><c> this</c><00:04:45.280><c> part</c>

00:04:45.510 --> 00:04:45.520 align:start position:0%
these two nodes right and so this part
 

00:04:45.520 --> 00:04:47.189 align:start position:0%
these two nodes right and so this part
this<00:04:45.840><c> portion</c><00:04:46.400><c> of</c><00:04:46.560><c> the</c><00:04:46.720><c> problem</c>

00:04:47.189 --> 00:04:47.199 align:start position:0%
this portion of the problem
 

00:04:47.199 --> 00:04:49.749 align:start position:0%
this portion of the problem
is<00:04:47.440><c> starting</c><00:04:48.000><c> to</c><00:04:48.400><c> to</c><00:04:48.639><c> keep</c><00:04:48.800><c> the</c><00:04:49.040><c> ordering</c><00:04:49.600><c> of</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
is starting to to keep the ordering of
 

00:04:49.759 --> 00:04:50.310 align:start position:0%
is starting to to keep the ordering of
these

00:04:50.310 --> 00:04:50.320 align:start position:0%
these
 

00:04:50.320 --> 00:04:51.909 align:start position:0%
these
it<00:04:50.479><c> looks</c><00:04:50.720><c> like</c><00:04:50.880><c> we're</c><00:04:51.040><c> going</c><00:04:51.120><c> to</c><00:04:51.280><c> need</c><00:04:51.600><c> a</c>

00:04:51.909 --> 00:04:51.919 align:start position:0%
it looks like we're going to need a
 

00:04:51.919 --> 00:04:53.749 align:start position:0%
it looks like we're going to need a
linked<00:04:52.320><c> list</c><00:04:53.199><c> and</c>

00:04:53.749 --> 00:04:53.759 align:start position:0%
linked list and
 

00:04:53.759 --> 00:04:57.430 align:start position:0%
linked list and
not<00:04:54.000><c> only</c><00:04:54.400><c> a</c><00:04:54.639><c> linked</c><00:04:54.960><c> list</c><00:04:55.360><c> but</c><00:04:55.680><c> a</c><00:04:56.080><c> double</c>

00:04:57.430 --> 00:04:57.440 align:start position:0%
not only a linked list but a double
 

00:04:57.440 --> 00:05:01.670 align:start position:0%
not only a linked list but a double
linked<00:04:57.759><c> list</c><00:05:00.000><c> because</c><00:05:00.400><c> remember</c><00:05:00.960><c> we</c><00:05:01.199><c> can</c>

00:05:01.670 --> 00:05:01.680 align:start position:0%
linked list because remember we can
 

00:05:01.680 --> 00:05:04.870 align:start position:0%
linked list because remember we can
easily<00:05:02.560><c> look</c><00:05:02.880><c> up</c><00:05:03.120><c> where</c><00:05:03.360><c> these</c><00:05:03.680><c> values</c><00:05:04.160><c> are</c>

00:05:04.870 --> 00:05:04.880 align:start position:0%
easily look up where these values are
 

00:05:04.880 --> 00:05:08.230 align:start position:0%
easily look up where these values are
but<00:05:05.039><c> if</c><00:05:05.199><c> we</c><00:05:05.520><c> want</c><00:05:05.840><c> to</c><00:05:06.639><c> also</c><00:05:07.199><c> reorder</c><00:05:07.919><c> them</c>

00:05:08.230 --> 00:05:08.240 align:start position:0%
but if we want to also reorder them
 

00:05:08.240 --> 00:05:09.189 align:start position:0%
but if we want to also reorder them
quickly

00:05:09.189 --> 00:05:09.199 align:start position:0%
quickly
 

00:05:09.199 --> 00:05:12.390 align:start position:0%
quickly
by<00:05:10.080><c> by</c><00:05:10.400><c> for</c><00:05:10.560><c> example</c><00:05:11.120><c> every</c><00:05:11.440><c> time</c><00:05:11.680><c> we</c><00:05:11.840><c> use</c><00:05:12.080><c> a</c>

00:05:12.390 --> 00:05:12.400 align:start position:0%
by by for example every time we use a
 

00:05:12.400 --> 00:05:15.830 align:start position:0%
by by for example every time we use a
get<00:05:12.880><c> operation</c><00:05:13.520><c> we</c><00:05:13.680><c> want</c><00:05:13.840><c> to</c><00:05:14.000><c> take</c><00:05:14.800><c> this</c>

00:05:15.830 --> 00:05:15.840 align:start position:0%
get operation we want to take this
 

00:05:15.840 --> 00:05:18.550 align:start position:0%
get operation we want to take this
value<00:05:16.400><c> and</c><00:05:16.560><c> then</c><00:05:16.880><c> move</c><00:05:17.199><c> it</c><00:05:17.520><c> over</c><00:05:17.840><c> here</c><00:05:18.240><c> because</c>

00:05:18.550 --> 00:05:18.560 align:start position:0%
value and then move it over here because
 

00:05:18.560 --> 00:05:19.430 align:start position:0%
value and then move it over here because
it<00:05:18.639><c> was</c><00:05:18.800><c> the</c><00:05:19.039><c> most</c>

00:05:19.430 --> 00:05:19.440 align:start position:0%
it was the most
 

00:05:19.440 --> 00:05:22.150 align:start position:0%
it was the most
recent<00:05:20.479><c> and</c><00:05:20.639><c> so</c><00:05:20.880><c> now</c><00:05:21.039><c> we're</c><00:05:21.199><c> going</c><00:05:21.360><c> to</c><00:05:21.520><c> reorder</c>

00:05:22.150 --> 00:05:22.160 align:start position:0%
recent and so now we're going to reorder
 

00:05:22.160 --> 00:05:24.070 align:start position:0%
recent and so now we're going to reorder
the<00:05:22.320><c> two</c><00:05:22.560><c> nodes</c><00:05:23.039><c> so</c><00:05:23.199><c> now</c><00:05:23.440><c> this</c><00:05:23.680><c> is</c><00:05:23.840><c> the</c>

00:05:24.070 --> 00:05:24.080 align:start position:0%
the two nodes so now this is the
 

00:05:24.080 --> 00:05:26.150 align:start position:0%
the two nodes so now this is the
least<00:05:24.400><c> recently</c><00:05:24.880><c> used</c><00:05:25.199><c> and</c><00:05:25.280><c> this</c><00:05:25.520><c> is</c><00:05:25.600><c> the</c><00:05:25.840><c> most</c>

00:05:26.150 --> 00:05:26.160 align:start position:0%
least recently used and this is the most
 

00:05:26.160 --> 00:05:28.150 align:start position:0%
least recently used and this is the most
recently<00:05:26.800><c> used</c>

00:05:28.150 --> 00:05:28.160 align:start position:0%
recently used
 

00:05:28.160 --> 00:05:30.390 align:start position:0%
recently used
and<00:05:28.400><c> since</c><00:05:28.720><c> this</c><00:05:28.880><c> is</c><00:05:29.039><c> a</c><00:05:29.120><c> doubly</c><00:05:29.600><c> linked</c><00:05:29.919><c> list</c>

00:05:30.390 --> 00:05:30.400 align:start position:0%
and since this is a doubly linked list
 

00:05:30.400 --> 00:05:31.189 align:start position:0%
and since this is a doubly linked list
we<00:05:30.639><c> need</c>

00:05:31.189 --> 00:05:31.199 align:start position:0%
we need
 

00:05:31.199 --> 00:05:34.550 align:start position:0%
we need
the<00:05:31.440><c> pointers</c><00:05:32.080><c> to</c><00:05:32.320><c> be</c><00:05:32.560><c> connected</c><00:05:33.600><c> of</c><00:05:33.840><c> course</c>

00:05:34.550 --> 00:05:34.560 align:start position:0%
the pointers to be connected of course
 

00:05:34.560 --> 00:05:36.790 align:start position:0%
the pointers to be connected of course
the<00:05:34.960><c> the</c><00:05:35.120><c> hashmap</c><00:05:35.840><c> won't</c><00:05:36.080><c> really</c><00:05:36.320><c> need</c><00:05:36.479><c> to</c><00:05:36.639><c> be</c>

00:05:36.790 --> 00:05:36.800 align:start position:0%
the the hashmap won't really need to be
 

00:05:36.800 --> 00:05:38.710 align:start position:0%
the the hashmap won't really need to be
updated<00:05:37.280><c> because</c><00:05:37.759><c> these</c><00:05:38.000><c> are</c><00:05:38.240><c> pointers</c>

00:05:38.710 --> 00:05:38.720 align:start position:0%
updated because these are pointers
 

00:05:38.720 --> 00:05:39.909 align:start position:0%
updated because these are pointers
they're<00:05:38.960><c> already</c><00:05:39.360><c> going</c><00:05:39.440><c> to</c><00:05:39.600><c> be</c>

00:05:39.909 --> 00:05:39.919 align:start position:0%
they're already going to be
 

00:05:39.919 --> 00:05:41.510 align:start position:0%
they're already going to be
pointing<00:05:40.240><c> to</c><00:05:40.400><c> the</c><00:05:40.479><c> correct</c><00:05:40.880><c> ones</c><00:05:41.120><c> and</c><00:05:41.280><c> i'm</c><00:05:41.360><c> not</c>

00:05:41.510 --> 00:05:41.520 align:start position:0%
pointing to the correct ones and i'm not
 

00:05:41.520 --> 00:05:43.909 align:start position:0%
pointing to the correct ones and i'm not
going<00:05:41.680><c> to</c><00:05:41.759><c> show</c><00:05:42.000><c> that</c><00:05:42.560><c> and</c><00:05:42.720><c> now</c><00:05:42.960><c> we</c><00:05:43.120><c> can</c><00:05:43.360><c> get</c><00:05:43.680><c> to</c>

00:05:43.909 --> 00:05:43.919 align:start position:0%
going to show that and now we can get to
 

00:05:43.919 --> 00:05:44.629 align:start position:0%
going to show that and now we can get to
the<00:05:44.160><c> most</c>

00:05:44.629 --> 00:05:44.639 align:start position:0%
the most
 

00:05:44.639 --> 00:05:47.430 align:start position:0%
the most
interesting<00:05:45.280><c> operation</c><00:05:46.000><c> the</c><00:05:46.320><c> third</c><00:05:46.800><c> put</c><00:05:47.280><c> so</c>

00:05:47.430 --> 00:05:47.440 align:start position:0%
interesting operation the third put so
 

00:05:47.440 --> 00:05:49.430 align:start position:0%
interesting operation the third put so
we're<00:05:47.680><c> putting</c><00:05:48.000><c> a</c><00:05:48.240><c> third</c><00:05:48.639><c> value</c>

00:05:49.430 --> 00:05:49.440 align:start position:0%
we're putting a third value
 

00:05:49.440 --> 00:05:52.550 align:start position:0%
we're putting a third value
key<00:05:49.600><c> value</c><00:05:50.160><c> 3</c><00:05:50.479><c> 3</c><00:05:51.280><c> and</c><00:05:51.520><c> since</c>

00:05:52.550 --> 00:05:52.560 align:start position:0%
key value 3 3 and since
 

00:05:52.560 --> 00:05:56.790 align:start position:0%
key value 3 3 and since
3<00:05:53.919><c> is</c><00:05:54.639><c> greater</c><00:05:55.360><c> than</c><00:05:55.600><c> our</c><00:05:55.840><c> capacity</c>

00:05:56.790 --> 00:05:56.800 align:start position:0%
3 is greater than our capacity
 

00:05:56.800 --> 00:06:00.150 align:start position:0%
3 is greater than our capacity
of<00:05:57.199><c> 2</c><00:05:57.759><c> then</c><00:05:58.080><c> we're</c><00:05:58.240><c> going</c><00:05:58.400><c> to</c><00:05:58.479><c> have</c><00:05:58.720><c> to</c><00:05:59.120><c> remove</c>

00:06:00.150 --> 00:06:00.160 align:start position:0%
of 2 then we're going to have to remove
 

00:06:00.160 --> 00:06:02.469 align:start position:0%
of 2 then we're going to have to remove
the<00:06:00.400><c> least</c><00:06:00.800><c> recently</c><00:06:01.360><c> used</c><00:06:01.759><c> value</c><00:06:02.319><c> and</c>

00:06:02.469 --> 00:06:02.479 align:start position:0%
the least recently used value and
 

00:06:02.479 --> 00:06:03.990 align:start position:0%
the least recently used value and
convenient<00:06:03.280><c> for</c><00:06:03.520><c> us</c>

00:06:03.990 --> 00:06:04.000 align:start position:0%
convenient for us
 

00:06:04.000 --> 00:06:07.350 align:start position:0%
convenient for us
we<00:06:04.240><c> know</c><00:06:04.479><c> exactly</c><00:06:05.280><c> what</c><00:06:05.520><c> that</c><00:06:05.840><c> value</c><00:06:06.479><c> is</c><00:06:06.960><c> so</c>

00:06:07.350 --> 00:06:07.360 align:start position:0%
we know exactly what that value is so
 

00:06:07.360 --> 00:06:09.110 align:start position:0%
we know exactly what that value is so
first<00:06:07.680><c> we're</c><00:06:07.919><c> going</c><00:06:08.000><c> to</c><00:06:08.160><c> end</c><00:06:08.319><c> up</c><00:06:08.639><c> updating</c>

00:06:09.110 --> 00:06:09.120 align:start position:0%
first we're going to end up updating
 

00:06:09.120 --> 00:06:10.469 align:start position:0%
first we're going to end up updating
these<00:06:09.520><c> pointers</c>

00:06:10.469 --> 00:06:10.479 align:start position:0%
these pointers
 

00:06:10.479 --> 00:06:13.590 align:start position:0%
these pointers
to<00:06:11.039><c> make</c><00:06:11.280><c> the</c><00:06:11.440><c> least</c><00:06:11.680><c> recently</c><00:06:12.240><c> used</c><00:06:12.639><c> 1</c><00:06:12.960><c> 1</c>

00:06:13.590 --> 00:06:13.600 align:start position:0%
to make the least recently used 1 1
 

00:06:13.600 --> 00:06:17.189 align:start position:0%
to make the least recently used 1 1
and<00:06:14.639><c> get</c><00:06:14.960><c> rid</c><00:06:15.199><c> of</c><00:06:15.440><c> this</c><00:06:16.400><c> and</c><00:06:16.639><c> of</c><00:06:16.800><c> course</c>

00:06:17.189 --> 00:06:17.199 align:start position:0%
and get rid of this and of course
 

00:06:17.199 --> 00:06:19.749 align:start position:0%
and get rid of this and of course
we<00:06:17.360><c> want</c><00:06:17.520><c> to</c><00:06:17.680><c> replace</c><00:06:18.720><c> that</c><00:06:19.039><c> too</c><00:06:19.280><c> since</c><00:06:19.520><c> we</c>

00:06:19.749 --> 00:06:19.759 align:start position:0%
we want to replace that too since we
 

00:06:19.759 --> 00:06:21.909 align:start position:0%
we want to replace that too since we
know<00:06:20.000><c> it's</c><00:06:20.160><c> the</c><00:06:20.319><c> least</c><00:06:20.639><c> recently</c><00:06:21.199><c> used</c>

00:06:21.909 --> 00:06:21.919 align:start position:0%
know it's the least recently used
 

00:06:21.919 --> 00:06:24.870 align:start position:0%
know it's the least recently used
we<00:06:22.080><c> want</c><00:06:22.240><c> to</c><00:06:22.319><c> replace</c><00:06:22.800><c> it</c><00:06:22.960><c> with</c><00:06:23.120><c> the</c><00:06:23.360><c> new</c><00:06:23.680><c> key</c><00:06:24.080><c> 3</c>

00:06:24.870 --> 00:06:24.880 align:start position:0%
we want to replace it with the new key 3
 

00:06:24.880 --> 00:06:27.029 align:start position:0%
we want to replace it with the new key 3
and<00:06:25.039><c> now</c><00:06:25.280><c> we</c><00:06:25.440><c> also</c><00:06:25.680><c> want</c><00:06:25.840><c> to</c><00:06:26.080><c> update</c><00:06:26.639><c> that</c>

00:06:27.029 --> 00:06:27.039 align:start position:0%
and now we also want to update that
 

00:06:27.039 --> 00:06:29.830 align:start position:0%
and now we also want to update that
pointer<00:06:27.680><c> we</c><00:06:28.000><c> want</c><00:06:28.160><c> it</c><00:06:28.240><c> to</c><00:06:28.479><c> point</c><00:06:28.960><c> at</c><00:06:29.199><c> the</c><00:06:29.520><c> new</c>

00:06:29.830 --> 00:06:29.840 align:start position:0%
pointer we want it to point at the new
 

00:06:29.840 --> 00:06:30.629 align:start position:0%
pointer we want it to point at the new
node

00:06:30.629 --> 00:06:30.639 align:start position:0%
node
 

00:06:30.639 --> 00:06:33.350 align:start position:0%
node
and<00:06:30.880><c> since</c><00:06:31.199><c> the</c><00:06:31.360><c> new</c><00:06:31.600><c> node</c><00:06:31.919><c> 3</c><00:06:32.240><c> 3</c><00:06:32.560><c> is</c><00:06:32.720><c> the</c><00:06:32.960><c> most</c>

00:06:33.350 --> 00:06:33.360 align:start position:0%
and since the new node 3 3 is the most
 

00:06:33.360 --> 00:06:33.990 align:start position:0%
and since the new node 3 3 is the most
recent<00:06:33.759><c> we're</c>

00:06:33.990 --> 00:06:34.000 align:start position:0%
recent we're
 

00:06:34.000 --> 00:06:37.430 align:start position:0%
recent we're
going<00:06:34.080><c> to</c><00:06:34.240><c> put</c><00:06:34.479><c> it</c><00:06:34.800><c> over</c><00:06:35.199><c> here</c><00:06:36.000><c> 3</c><00:06:36.800><c> 3</c>

00:06:37.430 --> 00:06:37.440 align:start position:0%
going to put it over here 3 3
 

00:06:37.440 --> 00:06:40.469 align:start position:0%
going to put it over here 3 3
and<00:06:37.600><c> the</c><00:06:37.840><c> pointer</c><00:06:38.319><c> is</c><00:06:38.479><c> going</c><00:06:38.639><c> to</c><00:06:38.720><c> point</c><00:06:39.039><c> here</c>

00:06:40.469 --> 00:06:40.479 align:start position:0%
and the pointer is going to point here
 

00:06:40.479 --> 00:06:42.070 align:start position:0%
and the pointer is going to point here
this<00:06:40.720><c> pointer</c><00:06:40.960><c> is</c><00:06:41.120><c> going</c><00:06:41.199><c> to</c><00:06:41.280><c> point</c><00:06:41.600><c> here</c><00:06:41.919><c> and</c>

00:06:42.070 --> 00:06:42.080 align:start position:0%
this pointer is going to point here and
 

00:06:42.080 --> 00:06:43.510 align:start position:0%
this pointer is going to point here and
there's<00:06:42.319><c> going</c><00:06:42.479><c> to</c><00:06:42.560><c> be</c><00:06:42.720><c> a</c><00:06:42.960><c> double</c>

00:06:43.510 --> 00:06:43.520 align:start position:0%
there's going to be a double
 

00:06:43.520 --> 00:06:46.469 align:start position:0%
there's going to be a double
link<00:06:44.000><c> between</c><00:06:44.479><c> them</c><00:06:45.199><c> so</c><00:06:45.440><c> this</c><00:06:45.680><c> is</c><00:06:45.840><c> basically</c>

00:06:46.469 --> 00:06:46.479 align:start position:0%
link between them so this is basically
 

00:06:46.479 --> 00:06:48.550 align:start position:0%
link between them so this is basically
the<00:06:46.639><c> main</c><00:06:46.960><c> idea</c><00:06:47.440><c> we're</c><00:06:47.600><c> going</c><00:06:47.680><c> to</c><00:06:47.919><c> keep</c><00:06:48.160><c> track</c>

00:06:48.550 --> 00:06:48.560 align:start position:0%
the main idea we're going to keep track
 

00:06:48.560 --> 00:06:50.469 align:start position:0%
the main idea we're going to keep track
of<00:06:48.800><c> a</c><00:06:48.880><c> capacity</c>

00:06:50.469 --> 00:06:50.479 align:start position:0%
of a capacity
 

00:06:50.479 --> 00:06:52.629 align:start position:0%
of a capacity
we're<00:06:50.639><c> going</c><00:06:50.720><c> to</c><00:06:50.800><c> have</c><00:06:50.960><c> a</c><00:06:51.199><c> double</c><00:06:51.599><c> linked</c><00:06:52.000><c> list</c>

00:06:52.629 --> 00:06:52.639 align:start position:0%
we're going to have a double linked list
 

00:06:52.639 --> 00:06:54.390 align:start position:0%
we're going to have a double linked list
we're<00:06:52.880><c> going</c><00:06:52.960><c> to</c><00:06:53.039><c> have</c><00:06:53.199><c> a</c><00:06:53.360><c> hash</c><00:06:53.840><c> map</c>

00:06:54.390 --> 00:06:54.400 align:start position:0%
we're going to have a hash map
 

00:06:54.400 --> 00:06:56.150 align:start position:0%
we're going to have a hash map
where<00:06:54.639><c> the</c><00:06:54.800><c> key</c><00:06:55.039><c> of</c><00:06:55.199><c> the</c><00:06:55.280><c> hashmap</c><00:06:55.840><c> is</c><00:06:56.000><c> going</c><00:06:56.080><c> to</c>

00:06:56.150 --> 00:06:56.160 align:start position:0%
where the key of the hashmap is going to
 

00:06:56.160 --> 00:06:58.070 align:start position:0%
where the key of the hashmap is going to
be<00:06:56.319><c> the</c><00:06:56.479><c> same</c><00:06:56.880><c> key</c><00:06:57.199><c> that</c><00:06:57.360><c> we</c><00:06:57.520><c> get</c><00:06:57.680><c> from</c><00:06:57.840><c> the</c>

00:06:58.070 --> 00:06:58.080 align:start position:0%
be the same key that we get from the
 

00:06:58.080 --> 00:07:00.309 align:start position:0%
be the same key that we get from the
input<00:06:58.560><c> and</c><00:06:58.720><c> the</c><00:06:58.960><c> value</c><00:06:59.520><c> is</c><00:06:59.680><c> going</c><00:06:59.759><c> to</c><00:06:59.840><c> be</c><00:07:00.080><c> a</c>

00:07:00.309 --> 00:07:00.319 align:start position:0%
input and the value is going to be a
 

00:07:00.319 --> 00:07:01.189 align:start position:0%
input and the value is going to be a
pointer

00:07:01.189 --> 00:07:01.199 align:start position:0%
pointer
 

00:07:01.199 --> 00:07:04.629 align:start position:0%
pointer
to<00:07:02.000><c> the</c><00:07:02.400><c> nodes</c><00:07:02.960><c> and</c><00:07:03.280><c> each</c><00:07:03.759><c> node</c><00:07:04.240><c> is</c><00:07:04.400><c> going</c><00:07:04.560><c> to</c>

00:07:04.629 --> 00:07:04.639 align:start position:0%
to the nodes and each node is going to
 

00:07:04.639 --> 00:07:06.309 align:start position:0%
to the nodes and each node is going to
look<00:07:04.880><c> something</c><00:07:05.280><c> like</c><00:07:05.680><c> this</c>

00:07:06.309 --> 00:07:06.319 align:start position:0%
look something like this
 

00:07:06.319 --> 00:07:07.749 align:start position:0%
look something like this
and<00:07:06.479><c> it's</c><00:07:06.639><c> going</c><00:07:06.720><c> to</c><00:07:06.800><c> have</c><00:07:07.039><c> two</c><00:07:07.280><c> pointers</c>

00:07:07.749 --> 00:07:07.759 align:start position:0%
and it's going to have two pointers
 

00:07:07.759 --> 00:07:09.270 align:start position:0%
and it's going to have two pointers
remember<00:07:08.160><c> so</c><00:07:08.639><c> it's</c><00:07:08.800><c> going</c><00:07:08.880><c> to</c><00:07:08.960><c> have</c><00:07:09.120><c> a</c>

00:07:09.270 --> 00:07:09.280 align:start position:0%
remember so it's going to have a
 

00:07:09.280 --> 00:07:10.629 align:start position:0%
remember so it's going to have a
previous<00:07:09.759><c> pointer</c>

00:07:10.629 --> 00:07:10.639 align:start position:0%
previous pointer
 

00:07:10.639 --> 00:07:13.589 align:start position:0%
previous pointer
and<00:07:10.800><c> a</c><00:07:11.039><c> next</c><00:07:11.599><c> pointer</c><00:07:12.880><c> and</c><00:07:13.120><c> don't</c><00:07:13.280><c> forget</c>

00:07:13.589 --> 00:07:13.599 align:start position:0%
and a next pointer and don't forget
 

00:07:13.599 --> 00:07:14.070 align:start position:0%
and a next pointer and don't forget
about

00:07:14.070 --> 00:07:14.080 align:start position:0%
about
 

00:07:14.080 --> 00:07:17.510 align:start position:0%
about
this<00:07:14.560><c> right</c><00:07:15.759><c> and</c><00:07:16.080><c> this</c><00:07:16.560><c> left</c><00:07:17.039><c> these</c>

00:07:17.510 --> 00:07:17.520 align:start position:0%
this right and this left these
 

00:07:17.520 --> 00:07:20.550 align:start position:0%
this right and this left these
are<00:07:17.840><c> also</c><00:07:18.479><c> going</c><00:07:18.639><c> to</c><00:07:18.720><c> be</c><00:07:19.120><c> nodes</c><00:07:19.919><c> because</c>

00:07:20.550 --> 00:07:20.560 align:start position:0%
are also going to be nodes because
 

00:07:20.560 --> 00:07:23.270 align:start position:0%
are also going to be nodes because
we<00:07:20.720><c> want</c><00:07:21.039><c> to</c><00:07:21.280><c> have</c><00:07:21.919><c> pointers</c><00:07:22.720><c> we</c><00:07:22.880><c> want</c><00:07:23.039><c> to</c><00:07:23.120><c> be</c>

00:07:23.270 --> 00:07:23.280 align:start position:0%
we want to have pointers we want to be
 

00:07:23.280 --> 00:07:25.430 align:start position:0%
we want to have pointers we want to be
able<00:07:23.520><c> to</c><00:07:23.759><c> instantly</c><00:07:24.319><c> know</c><00:07:24.560><c> what's</c><00:07:24.880><c> the</c><00:07:25.039><c> least</c>

00:07:25.430 --> 00:07:25.440 align:start position:0%
able to instantly know what's the least
 

00:07:25.440 --> 00:07:27.749 align:start position:0%
able to instantly know what's the least
recently<00:07:26.000><c> used</c><00:07:26.479><c> and</c><00:07:26.720><c> what's</c><00:07:26.960><c> the</c><00:07:27.280><c> most</c>

00:07:27.749 --> 00:07:27.759 align:start position:0%
recently used and what's the most
 

00:07:27.759 --> 00:07:29.670 align:start position:0%
recently used and what's the most
recently<00:07:28.240><c> used</c><00:07:28.479><c> so</c><00:07:28.960><c> these</c><00:07:29.199><c> are</c><00:07:29.280><c> going</c><00:07:29.360><c> to</c><00:07:29.440><c> be</c>

00:07:29.670 --> 00:07:29.680 align:start position:0%
recently used so these are going to be
 

00:07:29.680 --> 00:07:31.350 align:start position:0%
recently used so these are going to be
dummy<00:07:30.080><c> nodes</c><00:07:30.479><c> pretty</c><00:07:30.800><c> much</c>

00:07:31.350 --> 00:07:31.360 align:start position:0%
dummy nodes pretty much
 

00:07:31.360 --> 00:07:33.510 align:start position:0%
dummy nodes pretty much
so<00:07:31.599><c> getting</c><00:07:31.919><c> into</c><00:07:32.160><c> the</c><00:07:32.319><c> code</c><00:07:32.880><c> remember</c><00:07:33.360><c> we're</c>

00:07:33.510 --> 00:07:33.520 align:start position:0%
so getting into the code remember we're
 

00:07:33.520 --> 00:07:34.629 align:start position:0%
so getting into the code remember we're
going<00:07:33.680><c> to</c><00:07:33.840><c> need</c><00:07:34.240><c> a</c>

00:07:34.629 --> 00:07:34.639 align:start position:0%
going to need a
 

00:07:34.639 --> 00:07:37.749 align:start position:0%
going to need a
node<00:07:35.360><c> so</c><00:07:35.520><c> before</c><00:07:35.919><c> we</c><00:07:36.160><c> even</c><00:07:36.639><c> write</c><00:07:36.880><c> this</c><00:07:37.199><c> lru</c>

00:07:37.749 --> 00:07:37.759 align:start position:0%
node so before we even write this lru
 

00:07:37.759 --> 00:07:38.550 align:start position:0%
node so before we even write this lru
cache<00:07:38.080><c> class</c>

00:07:38.550 --> 00:07:38.560 align:start position:0%
cache class
 

00:07:38.560 --> 00:07:40.870 align:start position:0%
cache class
let's<00:07:38.800><c> make</c><00:07:39.039><c> another</c><00:07:39.520><c> class</c><00:07:40.000><c> for</c><00:07:40.240><c> that</c><00:07:40.560><c> node</c>

00:07:40.870 --> 00:07:40.880 align:start position:0%
let's make another class for that node
 

00:07:40.880 --> 00:07:42.309 align:start position:0%
let's make another class for that node
that<00:07:40.960><c> we're</c><00:07:41.120><c> going</c><00:07:41.199><c> to</c><00:07:41.360><c> use</c>

00:07:42.309 --> 00:07:42.319 align:start position:0%
that we're going to use
 

00:07:42.319 --> 00:07:44.150 align:start position:0%
that we're going to use
and<00:07:42.639><c> remember</c><00:07:43.039><c> each</c><00:07:43.280><c> node</c><00:07:43.599><c> is</c><00:07:43.680><c> going</c><00:07:43.840><c> to</c><00:07:43.919><c> have</c>

00:07:44.150 --> 00:07:44.160 align:start position:0%
and remember each node is going to have
 

00:07:44.160 --> 00:07:45.510 align:start position:0%
and remember each node is going to have
a<00:07:44.319><c> key</c><00:07:44.560><c> value</c><00:07:45.120><c> pair</c>

00:07:45.510 --> 00:07:45.520 align:start position:0%
a key value pair
 

00:07:45.520 --> 00:07:48.469 align:start position:0%
a key value pair
so<00:07:45.759><c> we're</c><00:07:46.000><c> going</c><00:07:46.160><c> to</c><00:07:46.319><c> get</c><00:07:46.639><c> those</c><00:07:48.240><c> we're</c><00:07:48.400><c> going</c>

00:07:48.469 --> 00:07:48.479 align:start position:0%
so we're going to get those we're going
 

00:07:48.479 --> 00:07:53.029 align:start position:0%
so we're going to get those we're going
to<00:07:48.639><c> initialize</c><00:07:49.280><c> those</c>

00:07:53.029 --> 00:07:53.039 align:start position:0%
 
 

00:07:53.039 --> 00:07:54.790 align:start position:0%
 
and<00:07:53.280><c> we're</c><00:07:53.520><c> also</c><00:07:53.919><c> going</c><00:07:54.080><c> to</c><00:07:54.160><c> have</c><00:07:54.479><c> two</c>

00:07:54.790 --> 00:07:54.800 align:start position:0%
and we're also going to have two
 

00:07:54.800 --> 00:07:58.150 align:start position:0%
and we're also going to have two
pointers<00:07:55.599><c> one</c><00:07:56.000><c> for</c><00:07:56.160><c> the</c><00:07:56.400><c> previous</c><00:07:56.960><c> node</c><00:07:57.680><c> and</c>

00:07:58.150 --> 00:07:58.160 align:start position:0%
pointers one for the previous node and
 

00:07:58.160 --> 00:08:01.589 align:start position:0%
pointers one for the previous node and
one<00:07:58.879><c> for</c><00:07:59.520><c> the</c><00:07:59.919><c> next</c><00:08:00.400><c> node</c><00:08:00.879><c> and</c><00:08:01.039><c> they're</c><00:08:01.280><c> both</c>

00:08:01.589 --> 00:08:01.599 align:start position:0%
one for the next node and they're both
 

00:08:01.599 --> 00:08:03.589 align:start position:0%
one for the next node and they're both
going<00:08:01.759><c> to</c><00:08:01.919><c> initially</c><00:08:02.400><c> be</c><00:08:02.560><c> set</c><00:08:02.960><c> to</c><00:08:03.199><c> null</c>

00:08:03.589 --> 00:08:03.599 align:start position:0%
going to initially be set to null
 

00:08:03.599 --> 00:08:05.270 align:start position:0%
going to initially be set to null
now<00:08:03.759><c> when</c><00:08:03.919><c> we</c><00:08:04.000><c> actually</c><00:08:04.319><c> get</c><00:08:04.479><c> into</c><00:08:04.720><c> the</c><00:08:04.800><c> lru</c>

00:08:05.270 --> 00:08:05.280 align:start position:0%
now when we actually get into the lru
 

00:08:05.280 --> 00:08:08.550 align:start position:0%
now when we actually get into the lru
class<00:08:05.840><c> we</c><00:08:06.479><c> know</c><00:08:06.879><c> that</c><00:08:07.120><c> the</c><00:08:07.280><c> capacity</c>

00:08:08.550 --> 00:08:08.560 align:start position:0%
class we know that the capacity
 

00:08:08.560 --> 00:08:10.309 align:start position:0%
class we know that the capacity
needs<00:08:08.879><c> to</c><00:08:08.960><c> be</c><00:08:09.199><c> stored</c><00:08:09.680><c> because</c><00:08:09.919><c> we</c><00:08:10.080><c> want</c><00:08:10.240><c> to</c>

00:08:10.309 --> 00:08:10.319 align:start position:0%
needs to be stored because we want to
 

00:08:10.319 --> 00:08:13.029 align:start position:0%
needs to be stored because we want to
know<00:08:10.479><c> if</c><00:08:10.639><c> we</c><00:08:10.800><c> ever</c><00:08:11.039><c> go</c><00:08:11.280><c> over</c><00:08:11.599><c> that</c><00:08:11.840><c> capacity</c>

00:08:13.029 --> 00:08:13.039 align:start position:0%
know if we ever go over that capacity
 

00:08:13.039 --> 00:08:14.950 align:start position:0%
know if we ever go over that capacity
we<00:08:13.199><c> also</c><00:08:13.520><c> need</c><00:08:13.680><c> a</c><00:08:13.840><c> hashmap</c><00:08:14.479><c> and</c><00:08:14.639><c> i'm</c><00:08:14.720><c> going</c><00:08:14.800><c> to</c>

00:08:14.950 --> 00:08:14.960 align:start position:0%
we also need a hashmap and i'm going to
 

00:08:14.960 --> 00:08:18.309 align:start position:0%
we also need a hashmap and i'm going to
call<00:08:15.280><c> that</c><00:08:15.840><c> our</c><00:08:16.240><c> cache</c>

00:08:18.309 --> 00:08:18.319 align:start position:0%
call that our cache
 

00:08:18.319 --> 00:08:21.830 align:start position:0%
call that our cache
and<00:08:19.199><c> remember</c><00:08:19.599><c> this</c><00:08:19.840><c> is</c><00:08:19.919><c> going</c><00:08:20.080><c> to</c><00:08:20.400><c> map</c><00:08:21.120><c> map</c>

00:08:21.830 --> 00:08:21.840 align:start position:0%
and remember this is going to map map
 

00:08:21.840 --> 00:08:25.670 align:start position:0%
and remember this is going to map map
the<00:08:22.319><c> key</c><00:08:23.360><c> to</c><00:08:24.240><c> nodes</c>

00:08:25.670 --> 00:08:25.680 align:start position:0%
the key to nodes
 

00:08:25.680 --> 00:08:28.150 align:start position:0%
the key to nodes
and<00:08:25.840><c> before</c><00:08:26.319><c> we</c><00:08:26.560><c> even</c><00:08:26.879><c> have</c><00:08:27.120><c> any</c><00:08:27.440><c> values</c><00:08:28.000><c> in</c>

00:08:28.150 --> 00:08:28.160 align:start position:0%
and before we even have any values in
 

00:08:28.160 --> 00:08:29.189 align:start position:0%
and before we even have any values in
our<00:08:28.319><c> cache</c><00:08:28.800><c> we</c>

00:08:29.189 --> 00:08:29.199 align:start position:0%
our cache we
 

00:08:29.199 --> 00:08:31.670 align:start position:0%
our cache we
want<00:08:29.440><c> to</c><00:08:29.759><c> have</c><00:08:30.160><c> a</c><00:08:30.240><c> couple</c><00:08:30.639><c> dummy</c><00:08:31.039><c> pointers</c><00:08:31.599><c> a</c>

00:08:31.670 --> 00:08:31.680 align:start position:0%
want to have a couple dummy pointers a
 

00:08:31.680 --> 00:08:32.949 align:start position:0%
want to have a couple dummy pointers a
couple<00:08:31.919><c> dummy</c><00:08:32.240><c> nodes</c>

00:08:32.949 --> 00:08:32.959 align:start position:0%
couple dummy nodes
 

00:08:32.959 --> 00:08:35.110 align:start position:0%
couple dummy nodes
which<00:08:33.279><c> tell</c><00:08:33.519><c> us</c><00:08:33.839><c> what</c><00:08:34.080><c> are</c><00:08:34.240><c> the</c><00:08:34.320><c> most</c><00:08:34.640><c> recent</c>

00:08:35.110 --> 00:08:35.120 align:start position:0%
which tell us what are the most recent
 

00:08:35.120 --> 00:08:36.870 align:start position:0%
which tell us what are the most recent
and<00:08:35.279><c> least</c><00:08:35.599><c> recent</c>

00:08:36.870 --> 00:08:36.880 align:start position:0%
and least recent
 

00:08:36.880 --> 00:08:39.509 align:start position:0%
and least recent
uh<00:08:37.680><c> values</c><00:08:38.159><c> that</c><00:08:38.240><c> we</c><00:08:38.399><c> added</c><00:08:38.800><c> so</c><00:08:39.039><c> we</c><00:08:39.200><c> can</c><00:08:39.360><c> just</c>

00:08:39.509 --> 00:08:39.519 align:start position:0%
uh values that we added so we can just
 

00:08:39.519 --> 00:08:42.070 align:start position:0%
uh values that we added so we can just
initialize<00:08:40.080><c> these</c><00:08:40.399><c> to</c><00:08:40.719><c> zero</c>

00:08:42.070 --> 00:08:42.080 align:start position:0%
initialize these to zero
 

00:08:42.080 --> 00:08:45.509 align:start position:0%
initialize these to zero
for<00:08:42.240><c> the</c><00:08:42.399><c> default</c><00:08:42.800><c> values</c><00:08:43.360><c> so</c><00:08:43.599><c> zero</c><00:08:44.000><c> zero</c>

00:08:45.509 --> 00:08:45.519 align:start position:0%
for the default values so zero zero
 

00:08:45.519 --> 00:08:48.150 align:start position:0%
for the default values so zero zero
and<00:08:45.920><c> initially</c><00:08:46.640><c> we</c><00:08:46.880><c> want</c><00:08:47.120><c> these</c><00:08:47.440><c> nodes</c><00:08:47.760><c> to</c><00:08:47.920><c> be</c>

00:08:48.150 --> 00:08:48.160 align:start position:0%
and initially we want these nodes to be
 

00:08:48.160 --> 00:08:49.509 align:start position:0%
and initially we want these nodes to be
connected<00:08:48.720><c> to</c><00:08:48.880><c> each</c><00:08:49.120><c> other</c>

00:08:49.509 --> 00:08:49.519 align:start position:0%
connected to each other
 

00:08:49.519 --> 00:08:52.310 align:start position:0%
connected to each other
because<00:08:50.399><c> if</c><00:08:50.560><c> we're</c><00:08:50.880><c> inserting</c><00:08:51.600><c> a</c><00:08:52.000><c> if</c><00:08:52.160><c> we're</c>

00:08:52.310 --> 00:08:52.320 align:start position:0%
because if we're inserting a if we're
 

00:08:52.320 --> 00:08:53.990 align:start position:0%
because if we're inserting a if we're
putting<00:08:52.640><c> a</c><00:08:52.800><c> new</c><00:08:52.959><c> node</c><00:08:53.200><c> we</c><00:08:53.360><c> want</c><00:08:53.519><c> to</c><00:08:53.600><c> put</c>

00:08:53.990 --> 00:08:54.000 align:start position:0%
putting a new node we want to put
 

00:08:54.000 --> 00:08:56.630 align:start position:0%
putting a new node we want to put
it<00:08:54.399><c> in</c><00:08:54.560><c> the</c><00:08:54.720><c> middle</c><00:08:55.120><c> between</c><00:08:55.600><c> left</c><00:08:55.839><c> and</c><00:08:56.000><c> right</c>

00:08:56.630 --> 00:08:56.640 align:start position:0%
it in the middle between left and right
 

00:08:56.640 --> 00:08:58.470 align:start position:0%
it in the middle between left and right
and<00:08:56.880><c> we</c><00:08:57.040><c> can</c><00:08:57.120><c> do</c><00:08:57.279><c> that</c><00:08:57.519><c> with</c><00:08:57.760><c> some</c><00:08:58.080><c> pointer</c>

00:08:58.470 --> 00:08:58.480 align:start position:0%
and we can do that with some pointer
 

00:08:58.480 --> 00:08:58.949 align:start position:0%
and we can do that with some pointer
stuff

00:08:58.949 --> 00:08:58.959 align:start position:0%
stuff
 

00:08:58.959 --> 00:09:03.190 align:start position:0%
stuff
so<00:08:59.440><c> left</c><00:08:59.680><c> dot</c><00:09:00.000><c> next</c><00:09:00.320><c> is</c><00:09:00.480><c> going</c><00:09:00.640><c> to</c><00:09:00.800><c> be</c><00:09:01.839><c> right</c>

00:09:03.190 --> 00:09:03.200 align:start position:0%
so left dot next is going to be right
 

00:09:03.200 --> 00:09:06.829 align:start position:0%
so left dot next is going to be right
and<00:09:04.160><c> right</c><00:09:04.480><c> dot</c><00:09:04.800><c> previous</c><00:09:05.440><c> is</c><00:09:05.600><c> going</c><00:09:05.760><c> to</c><00:09:05.920><c> be</c>

00:09:06.829 --> 00:09:06.839 align:start position:0%
and right dot previous is going to be
 

00:09:06.839 --> 00:09:09.590 align:start position:0%
and right dot previous is going to be
left<00:09:07.839><c> and</c><00:09:08.000><c> remember</c><00:09:08.640><c> left</c><00:09:08.959><c> is</c><00:09:09.120><c> going</c><00:09:09.200><c> to</c><00:09:09.279><c> help</c>

00:09:09.590 --> 00:09:09.600 align:start position:0%
left and remember left is going to help
 

00:09:09.600 --> 00:09:09.910 align:start position:0%
left and remember left is going to help
us

00:09:09.910 --> 00:09:09.920 align:start position:0%
us
 

00:09:09.920 --> 00:09:13.030 align:start position:0%
us
find<00:09:10.480><c> the</c><00:09:10.720><c> least</c><00:09:11.040><c> recently</c><00:09:11.600><c> used</c><00:09:12.399><c> and</c>

00:09:13.030 --> 00:09:13.040 align:start position:0%
find the least recently used and
 

00:09:13.040 --> 00:09:17.110 align:start position:0%
find the least recently used and
right<00:09:13.839><c> is</c><00:09:14.080><c> going</c><00:09:14.160><c> to</c><00:09:14.320><c> be</c><00:09:15.120><c> most</c><00:09:15.440><c> recent</c>

00:09:17.110 --> 00:09:17.120 align:start position:0%
right is going to be most recent
 

00:09:17.120 --> 00:09:19.670 align:start position:0%
right is going to be most recent
so<00:09:17.360><c> now</c><00:09:17.600><c> let's</c><00:09:17.839><c> start</c><00:09:18.240><c> with</c><00:09:18.480><c> our</c><00:09:18.800><c> get</c><00:09:19.200><c> function</c>

00:09:19.670 --> 00:09:19.680 align:start position:0%
so now let's start with our get function
 

00:09:19.680 --> 00:09:22.550 align:start position:0%
so now let's start with our get function
because<00:09:20.000><c> it's</c><00:09:20.320><c> mostly</c><00:09:20.839><c> straightforward</c>

00:09:22.550 --> 00:09:22.560 align:start position:0%
because it's mostly straightforward
 

00:09:22.560 --> 00:09:25.910 align:start position:0%
because it's mostly straightforward
if<00:09:23.040><c> the</c><00:09:23.279><c> key</c><00:09:23.839><c> exists</c><00:09:24.560><c> so</c><00:09:24.720><c> if</c><00:09:24.880><c> the</c><00:09:25.120><c> key</c><00:09:25.519><c> is</c>

00:09:25.910 --> 00:09:25.920 align:start position:0%
if the key exists so if the key is
 

00:09:25.920 --> 00:09:29.590 align:start position:0%
if the key exists so if the key is
in<00:09:26.320><c> our</c><00:09:26.720><c> cache</c><00:09:28.000><c> then</c><00:09:28.480><c> we</c><00:09:28.640><c> can</c><00:09:28.880><c> return</c>

00:09:29.590 --> 00:09:29.600 align:start position:0%
in our cache then we can return
 

00:09:29.600 --> 00:09:32.630 align:start position:0%
in our cache then we can return
that<00:09:29.920><c> value</c><00:09:30.480><c> right</c><00:09:30.800><c> so</c><00:09:31.120><c> we</c><00:09:31.279><c> can</c><00:09:31.440><c> return</c>

00:09:32.630 --> 00:09:32.640 align:start position:0%
that value right so we can return
 

00:09:32.640 --> 00:09:36.389 align:start position:0%
that value right so we can return
self<00:09:33.760><c> dot</c><00:09:34.240><c> cash</c><00:09:35.360><c> of</c><00:09:35.680><c> key</c>

00:09:36.389 --> 00:09:36.399 align:start position:0%
self dot cash of key
 

00:09:36.399 --> 00:09:39.030 align:start position:0%
self dot cash of key
now<00:09:36.880><c> this</c><00:09:37.200><c> tells</c><00:09:37.519><c> us</c><00:09:37.760><c> the</c><00:09:38.080><c> node</c><00:09:38.480><c> remember</c>

00:09:39.030 --> 00:09:39.040 align:start position:0%
now this tells us the node remember
 

00:09:39.040 --> 00:09:39.910 align:start position:0%
now this tells us the node remember
because

00:09:39.910 --> 00:09:39.920 align:start position:0%
because
 

00:09:39.920 --> 00:09:42.790 align:start position:0%
because
each<00:09:40.880><c> key</c><00:09:41.200><c> is</c><00:09:41.360><c> mapped</c><00:09:41.680><c> to</c><00:09:41.920><c> a</c><00:09:42.080><c> node</c><00:09:42.320><c> so</c><00:09:42.480><c> to</c><00:09:42.640><c> get</c>

00:09:42.790 --> 00:09:42.800 align:start position:0%
each key is mapped to a node so to get
 

00:09:42.800 --> 00:09:43.590 align:start position:0%
each key is mapped to a node so to get
the<00:09:42.959><c> value</c>

00:09:43.590 --> 00:09:43.600 align:start position:0%
the value
 

00:09:43.600 --> 00:09:46.710 align:start position:0%
the value
we<00:09:43.839><c> can</c><00:09:44.080><c> just</c><00:09:44.320><c> do</c><00:09:44.560><c> dot</c><00:09:44.959><c> val</c><00:09:46.240><c> and</c>

00:09:46.710 --> 00:09:46.720 align:start position:0%
we can just do dot val and
 

00:09:46.720 --> 00:09:48.790 align:start position:0%
we can just do dot val and
of<00:09:46.880><c> course</c><00:09:47.200><c> if</c><00:09:47.360><c> it</c><00:09:47.519><c> doesn't</c><00:09:47.920><c> exist</c><00:09:48.560><c> they</c>

00:09:48.790 --> 00:09:48.800 align:start position:0%
of course if it doesn't exist they
 

00:09:48.800 --> 00:09:50.389 align:start position:0%
of course if it doesn't exist they
wanted<00:09:49.200><c> us</c><00:09:49.360><c> to</c><00:09:49.519><c> just</c><00:09:49.760><c> return</c>

00:09:50.389 --> 00:09:50.399 align:start position:0%
wanted us to just return
 

00:09:50.399 --> 00:09:52.550 align:start position:0%
wanted us to just return
negative<00:09:50.800><c> one</c><00:09:51.360><c> now</c><00:09:51.519><c> the</c><00:09:51.760><c> only</c><00:09:52.080><c> thing</c><00:09:52.320><c> we're</c>

00:09:52.550 --> 00:09:52.560 align:start position:0%
negative one now the only thing we're
 

00:09:52.560 --> 00:09:53.670 align:start position:0%
negative one now the only thing we're
forgetting<00:09:53.200><c> with</c><00:09:53.360><c> this</c>

00:09:53.670 --> 00:09:53.680 align:start position:0%
forgetting with this
 

00:09:53.680 --> 00:09:57.350 align:start position:0%
forgetting with this
get<00:09:54.080><c> is</c><00:09:54.399><c> that</c><00:09:55.279><c> every</c><00:09:55.600><c> time</c><00:09:55.920><c> we</c><00:09:56.320><c> get</c><00:09:56.640><c> a</c>

00:09:57.350 --> 00:09:57.360 align:start position:0%
get is that every time we get a
 

00:09:57.360 --> 00:10:01.269 align:start position:0%
get is that every time we get a
a<00:09:58.560><c> value</c><00:09:59.120><c> we</c><00:09:59.360><c> want</c><00:09:59.519><c> to</c><00:09:59.920><c> update</c><00:10:00.320><c> it</c><00:10:00.480><c> to</c><00:10:00.640><c> the</c><00:10:00.800><c> most</c>

00:10:01.269 --> 00:10:01.279 align:start position:0%
a value we want to update it to the most
 

00:10:01.279 --> 00:10:03.990 align:start position:0%
a value we want to update it to the most
recent<00:10:01.839><c> so</c><00:10:02.079><c> to</c><00:10:02.320><c> help</c><00:10:02.640><c> us</c><00:10:02.800><c> with</c><00:10:03.040><c> this</c><00:10:03.360><c> part</c><00:10:03.760><c> i'm</c>

00:10:03.990 --> 00:10:04.000 align:start position:0%
recent so to help us with this part i'm
 

00:10:04.000 --> 00:10:05.670 align:start position:0%
recent so to help us with this part i'm
actually<00:10:04.320><c> going</c><00:10:04.480><c> to</c><00:10:04.560><c> write</c><00:10:04.800><c> a</c><00:10:04.880><c> couple</c><00:10:05.200><c> helper</c>

00:10:05.670 --> 00:10:05.680 align:start position:0%
actually going to write a couple helper
 

00:10:05.680 --> 00:10:06.550 align:start position:0%
actually going to write a couple helper
functions

00:10:06.550 --> 00:10:06.560 align:start position:0%
functions
 

00:10:06.560 --> 00:10:09.190 align:start position:0%
functions
so<00:10:07.120><c> i'm</c><00:10:07.279><c> going</c><00:10:07.440><c> to</c><00:10:07.600><c> write</c><00:10:08.399><c> i'm</c><00:10:08.560><c> going</c><00:10:08.720><c> to</c><00:10:08.880><c> write</c>

00:10:09.190 --> 00:10:09.200 align:start position:0%
so i'm going to write i'm going to write
 

00:10:09.200 --> 00:10:10.389 align:start position:0%
so i'm going to write i'm going to write
a<00:10:09.360><c> remove</c>

00:10:10.389 --> 00:10:10.399 align:start position:0%
a remove
 

00:10:10.399 --> 00:10:12.710 align:start position:0%
a remove
and<00:10:10.800><c> insert</c><00:10:11.440><c> helper</c><00:10:11.839><c> function</c><00:10:12.240><c> and</c><00:10:12.480><c> these</c>

00:10:12.710 --> 00:10:12.720 align:start position:0%
and insert helper function and these
 

00:10:12.720 --> 00:10:14.710 align:start position:0%
and insert helper function and these
helper<00:10:13.120><c> functions</c><00:10:13.600><c> are</c><00:10:13.680><c> going</c><00:10:13.760><c> to</c><00:10:13.839><c> be</c><00:10:14.000><c> applied</c>

00:10:14.710 --> 00:10:14.720 align:start position:0%
helper functions are going to be applied
 

00:10:14.720 --> 00:10:17.269 align:start position:0%
helper functions are going to be applied
to<00:10:14.959><c> our</c><00:10:15.200><c> linked</c><00:10:15.680><c> list</c><00:10:16.560><c> so</c><00:10:16.880><c> we're</c><00:10:17.040><c> going</c><00:10:17.120><c> to</c>

00:10:17.269 --> 00:10:17.279 align:start position:0%
to our linked list so we're going to
 

00:10:17.279 --> 00:10:18.230 align:start position:0%
to our linked list so we're going to
pass<00:10:17.680><c> in</c>

00:10:18.230 --> 00:10:18.240 align:start position:0%
pass in
 

00:10:18.240 --> 00:10:21.430 align:start position:0%
pass in
the<00:10:18.560><c> node</c><00:10:19.040><c> that</c><00:10:19.279><c> we</c><00:10:19.440><c> want</c><00:10:19.839><c> to</c><00:10:20.480><c> remove</c>

00:10:21.430 --> 00:10:21.440 align:start position:0%
the node that we want to remove
 

00:10:21.440 --> 00:10:24.470 align:start position:0%
the node that we want to remove
from<00:10:21.680><c> our</c><00:10:22.240><c> our</c><00:10:22.399><c> doubly</c><00:10:22.880><c> linked</c><00:10:23.200><c> list</c><00:10:24.079><c> and</c><00:10:24.240><c> i'm</c>

00:10:24.470 --> 00:10:24.480 align:start position:0%
from our our doubly linked list and i'm
 

00:10:24.480 --> 00:10:25.269 align:start position:0%
from our our doubly linked list and i'm
also

00:10:25.269 --> 00:10:25.279 align:start position:0%
also
 

00:10:25.279 --> 00:10:28.870 align:start position:0%
also
going<00:10:25.440><c> to</c><00:10:25.680><c> write</c><00:10:26.320><c> a</c><00:10:26.560><c> function</c><00:10:27.440><c> to</c><00:10:27.920><c> insert</c>

00:10:28.870 --> 00:10:28.880 align:start position:0%
going to write a function to insert
 

00:10:28.880 --> 00:10:32.069 align:start position:0%
going to write a function to insert
into<00:10:29.200><c> our</c><00:10:29.360><c> linked</c><00:10:29.680><c> list</c><00:10:30.560><c> and</c><00:10:30.800><c> when</c><00:10:31.040><c> we</c><00:10:31.279><c> insert</c>

00:10:32.069 --> 00:10:32.079 align:start position:0%
into our linked list and when we insert
 

00:10:32.079 --> 00:10:35.269 align:start position:0%
into our linked list and when we insert
we're<00:10:32.320><c> going</c><00:10:32.399><c> to</c><00:10:32.880><c> insert</c><00:10:34.399><c> at</c>

00:10:35.269 --> 00:10:35.279 align:start position:0%
we're going to insert at
 

00:10:35.279 --> 00:10:37.829 align:start position:0%
we're going to insert at
right<00:10:36.399><c> and</c><00:10:36.480><c> the</c><00:10:36.640><c> remove</c><00:10:37.279><c> is</c><00:10:37.440><c> just</c><00:10:37.600><c> going</c><00:10:37.760><c> to</c>

00:10:37.829 --> 00:10:37.839 align:start position:0%
right and the remove is just going to
 

00:10:37.839 --> 00:10:39.030 align:start position:0%
right and the remove is just going to
remove

00:10:39.030 --> 00:10:39.040 align:start position:0%
remove
 

00:10:39.040 --> 00:10:42.069 align:start position:0%
remove
from<00:10:39.760><c> the</c><00:10:40.000><c> list</c><00:10:41.040><c> so</c>

00:10:42.069 --> 00:10:42.079 align:start position:0%
from the list so
 

00:10:42.079 --> 00:10:44.470 align:start position:0%
from the list so
these<00:10:42.720><c> are</c><00:10:42.959><c> basically</c><00:10:43.519><c> going</c><00:10:43.680><c> to</c><00:10:43.760><c> be</c><00:10:44.000><c> pointer</c>

00:10:44.470 --> 00:10:44.480 align:start position:0%
these are basically going to be pointer
 

00:10:44.480 --> 00:10:46.150 align:start position:0%
these are basically going to be pointer
functions<00:10:44.880><c> we're</c><00:10:45.120><c> going</c><00:10:45.200><c> to</c><00:10:45.279><c> be</c><00:10:45.519><c> manipulating</c>

00:10:46.150 --> 00:10:46.160 align:start position:0%
functions we're going to be manipulating
 

00:10:46.160 --> 00:10:47.829 align:start position:0%
functions we're going to be manipulating
some<00:10:46.399><c> pointers</c><00:10:46.800><c> from</c><00:10:46.959><c> our</c><00:10:47.120><c> left</c><00:10:47.440><c> from</c><00:10:47.600><c> our</c>

00:10:47.829 --> 00:10:47.839 align:start position:0%
some pointers from our left from our
 

00:10:47.839 --> 00:10:49.430 align:start position:0%
some pointers from our left from our
right<00:10:48.079><c> and</c><00:10:48.240><c> doing</c><00:10:48.480><c> some</c><00:10:48.640><c> stuff</c><00:10:48.959><c> so</c><00:10:49.200><c> i'm</c><00:10:49.279><c> not</c>

00:10:49.430 --> 00:10:49.440 align:start position:0%
right and doing some stuff so i'm not
 

00:10:49.440 --> 00:10:50.949 align:start position:0%
right and doing some stuff so i'm not
even<00:10:49.600><c> going</c><00:10:49.680><c> to</c><00:10:49.760><c> worry</c><00:10:50.079><c> about</c><00:10:50.320><c> that</c>

00:10:50.949 --> 00:10:50.959 align:start position:0%
even going to worry about that
 

00:10:50.959 --> 00:10:52.790 align:start position:0%
even going to worry about that
i'd<00:10:51.279><c> all</c><00:10:51.440><c> i</c><00:10:51.600><c> know</c><00:10:51.839><c> is</c><00:10:51.920><c> that</c><00:10:52.079><c> we</c><00:10:52.240><c> have</c><00:10:52.399><c> a</c><00:10:52.480><c> helper</c>

00:10:52.790 --> 00:10:52.800 align:start position:0%
i'd all i know is that we have a helper
 

00:10:52.800 --> 00:10:54.310 align:start position:0%
i'd all i know is that we have a helper
function<00:10:53.200><c> that</c><00:10:53.360><c> can</c><00:10:53.600><c> remove</c>

00:10:54.310 --> 00:10:54.320 align:start position:0%
function that can remove
 

00:10:54.320 --> 00:10:57.030 align:start position:0%
function that can remove
any<00:10:54.720><c> node</c><00:10:55.120><c> from</c><00:10:55.360><c> our</c><00:10:55.519><c> list</c><00:10:56.240><c> and</c><00:10:56.560><c> a</c><00:10:56.720><c> helper</c>

00:10:57.030 --> 00:10:57.040 align:start position:0%
any node from our list and a helper
 

00:10:57.040 --> 00:10:57.910 align:start position:0%
any node from our list and a helper
function<00:10:57.440><c> that</c><00:10:57.600><c> can</c>

00:10:57.910 --> 00:10:57.920 align:start position:0%
function that can
 

00:10:57.920 --> 00:11:01.110 align:start position:0%
function that can
insert<00:10:58.640><c> any</c><00:10:58.959><c> node</c><00:10:59.760><c> at</c><00:11:00.160><c> the</c><00:11:00.399><c> rightmost</c>

00:11:01.110 --> 00:11:01.120 align:start position:0%
insert any node at the rightmost
 

00:11:01.120 --> 00:11:03.030 align:start position:0%
insert any node at the rightmost
position<00:11:01.680><c> of</c><00:11:01.839><c> our</c><00:11:02.000><c> linked</c><00:11:02.399><c> list</c>

00:11:03.030 --> 00:11:03.040 align:start position:0%
position of our linked list
 

00:11:03.040 --> 00:11:05.670 align:start position:0%
position of our linked list
so<00:11:03.360><c> since</c><00:11:03.680><c> we're</c><00:11:04.160><c> getting</c><00:11:04.959><c> what</c><00:11:05.200><c> we</c><00:11:05.360><c> want</c><00:11:05.519><c> to</c>

00:11:05.670 --> 00:11:05.680 align:start position:0%
so since we're getting what we want to
 

00:11:05.680 --> 00:11:06.949 align:start position:0%
so since we're getting what we want to
do<00:11:06.000><c> to</c><00:11:06.160><c> our</c><00:11:06.399><c> list</c>

00:11:06.949 --> 00:11:06.959 align:start position:0%
do to our list
 

00:11:06.959 --> 00:11:10.150 align:start position:0%
do to our list
is<00:11:07.680><c> take</c><00:11:08.160><c> this</c><00:11:08.640><c> node</c>

00:11:10.150 --> 00:11:10.160 align:start position:0%
is take this node
 

00:11:10.160 --> 00:11:13.910 align:start position:0%
is take this node
self<00:11:10.480><c> dot</c><00:11:10.880><c> cache</c><00:11:11.680><c> of</c><00:11:12.000><c> key</c><00:11:12.800><c> and</c><00:11:12.959><c> remove</c><00:11:13.519><c> it</c><00:11:13.600><c> from</c>

00:11:13.910 --> 00:11:13.920 align:start position:0%
self dot cache of key and remove it from
 

00:11:13.920 --> 00:11:14.949 align:start position:0%
self dot cache of key and remove it from
our<00:11:14.079><c> list</c>

00:11:14.949 --> 00:11:14.959 align:start position:0%
our list
 

00:11:14.959 --> 00:11:17.750 align:start position:0%
our list
and<00:11:15.440><c> after</c><00:11:15.839><c> we</c><00:11:16.000><c> remove</c><00:11:16.560><c> it</c><00:11:16.880><c> then</c><00:11:17.120><c> we</c><00:11:17.279><c> want</c><00:11:17.440><c> to</c>

00:11:17.750 --> 00:11:17.760 align:start position:0%
and after we remove it then we want to
 

00:11:17.760 --> 00:11:18.870 align:start position:0%
and after we remove it then we want to
reinsert<00:11:18.560><c> it</c>

00:11:18.870 --> 00:11:18.880 align:start position:0%
reinsert it
 

00:11:18.880 --> 00:11:21.430 align:start position:0%
reinsert it
at<00:11:19.040><c> the</c><00:11:19.360><c> right</c><00:11:19.839><c> most</c><00:11:20.240><c> position</c><00:11:20.959><c> so</c><00:11:21.120><c> we</c><00:11:21.279><c> can</c>

00:11:21.430 --> 00:11:21.440 align:start position:0%
at the right most position so we can
 

00:11:21.440 --> 00:11:27.590 align:start position:0%
at the right most position so we can
just<00:11:21.680><c> do</c><00:11:22.000><c> self</c>

00:11:27.590 --> 00:11:27.600 align:start position:0%
 
 

00:11:27.600 --> 00:11:29.990 align:start position:0%
 
and<00:11:27.839><c> looking</c><00:11:28.160><c> at</c><00:11:28.240><c> this</c><00:11:28.720><c> get</c><00:11:29.040><c> isn't</c><00:11:29.279><c> so</c><00:11:29.519><c> bad</c><00:11:29.920><c> as</c>

00:11:29.990 --> 00:11:30.000 align:start position:0%
and looking at this get isn't so bad as
 

00:11:30.000 --> 00:11:31.190 align:start position:0%
and looking at this get isn't so bad as
long<00:11:30.240><c> as</c><00:11:30.399><c> we</c><00:11:30.640><c> fill</c><00:11:30.880><c> out</c>

00:11:31.190 --> 00:11:31.200 align:start position:0%
long as we fill out
 

00:11:31.200 --> 00:11:33.990 align:start position:0%
long as we fill out
these<00:11:31.519><c> two</c><00:11:31.680><c> helper</c><00:11:32.079><c> functions</c><00:11:32.640><c> for</c><00:11:32.959><c> us</c><00:11:33.519><c> so</c><00:11:33.760><c> now</c>

00:11:33.990 --> 00:11:34.000 align:start position:0%
these two helper functions for us so now
 

00:11:34.000 --> 00:11:35.509 align:start position:0%
these two helper functions for us so now
when<00:11:34.160><c> we</c><00:11:34.320><c> actually</c><00:11:34.640><c> look</c><00:11:34.880><c> at</c><00:11:34.959><c> our</c><00:11:35.200><c> put</c>

00:11:35.509 --> 00:11:35.519 align:start position:0%
when we actually look at our put
 

00:11:35.519 --> 00:11:36.630 align:start position:0%
when we actually look at our put
function

00:11:36.630 --> 00:11:36.640 align:start position:0%
function
 

00:11:36.640 --> 00:11:39.910 align:start position:0%
function
let's<00:11:37.279><c> remember</c><00:11:38.079><c> that</c><00:11:38.959><c> if</c><00:11:39.200><c> we</c><00:11:39.360><c> have</c><00:11:39.600><c> a</c>

00:11:39.910 --> 00:11:39.920 align:start position:0%
let's remember that if we have a
 

00:11:39.920 --> 00:11:43.590 align:start position:0%
let's remember that if we have a
key<00:11:40.959><c> that's</c><00:11:41.519><c> already</c><00:11:42.240><c> in</c><00:11:42.560><c> our</c><00:11:42.800><c> cache</c>

00:11:43.590 --> 00:11:43.600 align:start position:0%
key that's already in our cache
 

00:11:43.600 --> 00:11:48.069 align:start position:0%
key that's already in our cache
that<00:11:44.079><c> means</c><00:11:44.959><c> that</c><00:11:45.279><c> a</c><00:11:45.680><c> node</c><00:11:46.320><c> already</c><00:11:46.800><c> exists</c>

00:11:48.069 --> 00:11:48.079 align:start position:0%
that means that a node already exists
 

00:11:48.079 --> 00:11:51.829 align:start position:0%
that means that a node already exists
in<00:11:48.399><c> our</c><00:11:48.800><c> list</c><00:11:49.360><c> with</c><00:11:49.600><c> that</c><00:11:50.000><c> same</c><00:11:50.560><c> key</c><00:11:50.959><c> value</c>

00:11:51.829 --> 00:11:51.839 align:start position:0%
in our list with that same key value
 

00:11:51.839 --> 00:11:54.710 align:start position:0%
in our list with that same key value
so<00:11:52.240><c> before</c><00:11:52.720><c> we</c><00:11:52.880><c> can</c><00:11:53.200><c> insert</c><00:11:53.760><c> this</c><00:11:54.160><c> new</c><00:11:54.480><c> key</c>

00:11:54.710 --> 00:11:54.720 align:start position:0%
so before we can insert this new key
 

00:11:54.720 --> 00:11:55.750 align:start position:0%
so before we can insert this new key
value<00:11:55.200><c> pair</c>

00:11:55.750 --> 00:11:55.760 align:start position:0%
value pair
 

00:11:55.760 --> 00:11:59.190 align:start position:0%
value pair
we<00:11:56.079><c> want</c><00:11:56.399><c> to</c><00:11:57.200><c> remove</c><00:11:58.320><c> from</c><00:11:58.560><c> our</c>

00:11:59.190 --> 00:11:59.200 align:start position:0%
we want to remove from our
 

00:11:59.200 --> 00:12:02.550 align:start position:0%
we want to remove from our
list<00:11:59.760><c> so</c><00:12:00.079><c> we</c><00:12:00.240><c> can</c><00:12:00.560><c> get</c><00:12:00.800><c> that</c><00:12:01.120><c> node</c><00:12:01.839><c> by</c>

00:12:02.550 --> 00:12:02.560 align:start position:0%
list so we can get that node by
 

00:12:02.560 --> 00:12:05.910 align:start position:0%
list so we can get that node by
getting<00:12:02.880><c> our</c><00:12:03.120><c> cache</c><00:12:04.000><c> and</c><00:12:04.639><c> using</c><00:12:05.440><c> the</c><00:12:05.680><c> key</c>

00:12:05.910 --> 00:12:05.920 align:start position:0%
getting our cache and using the key
 

00:12:05.920 --> 00:12:06.790 align:start position:0%
getting our cache and using the key
value

00:12:06.790 --> 00:12:06.800 align:start position:0%
value
 

00:12:06.800 --> 00:12:08.629 align:start position:0%
value
so<00:12:06.959><c> these</c><00:12:07.200><c> helper</c><00:12:07.519><c> functions</c><00:12:08.079><c> are</c><00:12:08.160><c> definitely</c>

00:12:08.629 --> 00:12:08.639 align:start position:0%
so these helper functions are definitely
 

00:12:08.639 --> 00:12:10.389 align:start position:0%
so these helper functions are definitely
coming<00:12:08.880><c> in</c><00:12:09.040><c> handy</c><00:12:09.440><c> for</c><00:12:09.680><c> us</c>

00:12:10.389 --> 00:12:10.399 align:start position:0%
coming in handy for us
 

00:12:10.399 --> 00:12:13.430 align:start position:0%
coming in handy for us
so<00:12:10.639><c> now</c><00:12:10.959><c> we</c><00:12:11.120><c> can</c><00:12:11.360><c> create</c><00:12:11.839><c> a</c><00:12:12.160><c> new</c><00:12:12.560><c> node</c><00:12:13.040><c> with</c>

00:12:13.430 --> 00:12:13.440 align:start position:0%
so now we can create a new node with
 

00:12:13.440 --> 00:12:17.110 align:start position:0%
so now we can create a new node with
this<00:12:13.760><c> key</c><00:12:14.000><c> value</c><00:12:14.399><c> pair</c><00:12:14.800><c> so</c><00:12:16.079><c> node</c>

00:12:17.110 --> 00:12:17.120 align:start position:0%
this key value pair so node
 

00:12:17.120 --> 00:12:20.230 align:start position:0%
this key value pair so node
key<00:12:17.440><c> value</c><00:12:19.839><c> and</c>

00:12:20.230 --> 00:12:20.240 align:start position:0%
key value and
 

00:12:20.240 --> 00:12:26.629 align:start position:0%
key value and
we<00:12:20.399><c> can</c><00:12:20.720><c> put</c><00:12:21.040><c> that</c><00:12:21.440><c> in</c><00:12:21.920><c> our</c><00:12:22.839><c> hashmap</c>

00:12:26.629 --> 00:12:26.639 align:start position:0%
 
 

00:12:26.639 --> 00:12:29.110 align:start position:0%
 
so<00:12:26.880><c> now</c><00:12:27.040><c> our</c><00:12:27.200><c> hashmap</c><00:12:27.839><c> has</c><00:12:28.000><c> a</c><00:12:28.160><c> pointer</c><00:12:28.639><c> to</c><00:12:28.800><c> this</c>

00:12:29.110 --> 00:12:29.120 align:start position:0%
so now our hashmap has a pointer to this
 

00:12:29.120 --> 00:12:29.670 align:start position:0%
so now our hashmap has a pointer to this
node

00:12:29.670 --> 00:12:29.680 align:start position:0%
node
 

00:12:29.680 --> 00:12:31.910 align:start position:0%
node
but<00:12:29.920><c> remember</c><00:12:30.320><c> that's</c><00:12:30.639><c> not</c><00:12:30.800><c> enough</c><00:12:31.200><c> we</c><00:12:31.440><c> also</c>

00:12:31.910 --> 00:12:31.920 align:start position:0%
but remember that's not enough we also
 

00:12:31.920 --> 00:12:33.670 align:start position:0%
but remember that's not enough we also
have<00:12:32.160><c> a</c><00:12:32.399><c> doubly</c><00:12:32.880><c> linked</c><00:12:33.279><c> list</c>

00:12:33.670 --> 00:12:33.680 align:start position:0%
have a doubly linked list
 

00:12:33.680 --> 00:12:36.069 align:start position:0%
have a doubly linked list
so<00:12:33.920><c> we</c><00:12:34.079><c> need</c><00:12:34.240><c> to</c><00:12:34.399><c> take</c><00:12:34.639><c> this</c><00:12:34.880><c> node</c><00:12:35.279><c> and</c><00:12:35.519><c> insert</c>

00:12:36.069 --> 00:12:36.079 align:start position:0%
so we need to take this node and insert
 

00:12:36.079 --> 00:12:37.430 align:start position:0%
so we need to take this node and insert
it<00:12:36.399><c> into</c>

00:12:37.430 --> 00:12:37.440 align:start position:0%
it into
 

00:12:37.440 --> 00:12:40.870 align:start position:0%
it into
our<00:12:37.839><c> list</c><00:12:38.320><c> so</c><00:12:39.440><c> insert</c>

00:12:40.870 --> 00:12:40.880 align:start position:0%
our list so insert
 

00:12:40.880 --> 00:12:44.150 align:start position:0%
our list so insert
and<00:12:41.279><c> just</c><00:12:41.519><c> pass</c><00:12:41.920><c> in</c><00:12:42.079><c> the</c><00:12:42.320><c> node</c><00:12:42.800><c> which</c><00:12:43.120><c> is</c>

00:12:44.150 --> 00:12:44.160 align:start position:0%
and just pass in the node which is
 

00:12:44.160 --> 00:12:47.590 align:start position:0%
and just pass in the node which is
cache<00:12:44.959><c> of</c><00:12:45.440><c> the</c><00:12:45.680><c> key</c><00:12:45.920><c> value</c><00:12:46.959><c> so</c><00:12:47.120><c> the</c><00:12:47.279><c> node</c><00:12:47.519><c> is</c>

00:12:47.590 --> 00:12:47.600 align:start position:0%
cache of the key value so the node is
 

00:12:47.600 --> 00:12:49.509 align:start position:0%
cache of the key value so the node is
stored<00:12:47.920><c> here</c><00:12:48.079><c> and</c><00:12:48.240><c> we</c><00:12:48.399><c> pass</c><00:12:48.639><c> that</c><00:12:48.880><c> node</c><00:12:49.279><c> into</c>

00:12:49.509 --> 00:12:49.519 align:start position:0%
stored here and we pass that node into
 

00:12:49.519 --> 00:12:51.110 align:start position:0%
stored here and we pass that node into
our<00:12:49.760><c> insert</c><00:12:50.240><c> function</c>

00:12:51.110 --> 00:12:51.120 align:start position:0%
our insert function
 

00:12:51.120 --> 00:12:53.509 align:start position:0%
our insert function
okay<00:12:51.360><c> so</c><00:12:51.519><c> we</c><00:12:51.680><c> just</c><00:12:52.000><c> inserted</c><00:12:52.639><c> a</c><00:12:52.720><c> new</c><00:12:52.880><c> value</c><00:12:53.360><c> but</c>

00:12:53.509 --> 00:12:53.519 align:start position:0%
okay so we just inserted a new value but
 

00:12:53.519 --> 00:12:54.389 align:start position:0%
okay so we just inserted a new value but
remember

00:12:54.389 --> 00:12:54.399 align:start position:0%
remember
 

00:12:54.399 --> 00:12:56.870 align:start position:0%
remember
we<00:12:54.639><c> have</c><00:12:54.880><c> a</c><00:12:54.959><c> capacity</c><00:12:55.839><c> to</c><00:12:56.000><c> worry</c><00:12:56.320><c> about</c><00:12:56.639><c> so</c>

00:12:56.870 --> 00:12:56.880 align:start position:0%
we have a capacity to worry about so
 

00:12:56.880 --> 00:12:58.230 align:start position:0%
we have a capacity to worry about so
every<00:12:57.360><c> time</c><00:12:57.680><c> we</c>

00:12:58.230 --> 00:12:58.240 align:start position:0%
every time we
 

00:12:58.240 --> 00:13:01.430 align:start position:0%
every time we
insert<00:12:58.639><c> a</c><00:12:58.720><c> value</c><00:12:59.200><c> we</c><00:12:59.440><c> gotta</c><00:12:59.839><c> check</c><00:13:00.720><c> did</c><00:13:01.120><c> does</c>

00:13:01.430 --> 00:13:01.440 align:start position:0%
insert a value we gotta check did does
 

00:13:01.440 --> 00:13:01.829 align:start position:0%
insert a value we gotta check did does
the

00:13:01.829 --> 00:13:01.839 align:start position:0%
the
 

00:13:01.839 --> 00:13:05.590 align:start position:0%
the
length<00:13:02.399><c> of</c><00:13:02.800><c> our</c><00:13:03.120><c> cache</c><00:13:04.240><c> now</c><00:13:04.800><c> exceed</c>

00:13:05.590 --> 00:13:05.600 align:start position:0%
length of our cache now exceed
 

00:13:05.600 --> 00:13:08.949 align:start position:0%
length of our cache now exceed
the<00:13:05.839><c> capacity</c><00:13:07.760><c> if</c><00:13:08.000><c> it</c><00:13:08.240><c> does</c>

00:13:08.949 --> 00:13:08.959 align:start position:0%
the capacity if it does
 

00:13:08.959 --> 00:13:10.949 align:start position:0%
the capacity if it does
this<00:13:09.200><c> is</c><00:13:09.360><c> the</c><00:13:09.519><c> part</c><00:13:09.760><c> where</c><00:13:10.000><c> we're</c><00:13:10.160><c> gonna</c><00:13:10.720><c> we're</c>

00:13:10.949 --> 00:13:10.959 align:start position:0%
this is the part where we're gonna we're
 

00:13:10.959 --> 00:13:12.550 align:start position:0%
this is the part where we're gonna we're
gonna<00:13:11.200><c> remove</c>

00:13:12.550 --> 00:13:12.560 align:start position:0%
gonna remove
 

00:13:12.560 --> 00:13:15.910 align:start position:0%
gonna remove
and<00:13:13.200><c> delete</c><00:13:13.839><c> or</c><00:13:14.240><c> evict</c>

00:13:15.910 --> 00:13:15.920 align:start position:0%
and delete or evict
 

00:13:15.920 --> 00:13:20.230 align:start position:0%
and delete or evict
the<00:13:16.720><c> mo</c><00:13:17.360><c> the</c><00:13:18.160><c> least</c><00:13:18.480><c> recently</c><00:13:19.040><c> used</c>

00:13:20.230 --> 00:13:20.240 align:start position:0%
the mo the least recently used
 

00:13:20.240 --> 00:13:22.710 align:start position:0%
the mo the least recently used
so<00:13:20.480><c> we're</c><00:13:20.639><c> going</c><00:13:20.720><c> to</c><00:13:20.880><c> remove</c><00:13:21.440><c> it</c><00:13:21.680><c> from</c><00:13:22.399><c> the</c>

00:13:22.710 --> 00:13:22.720 align:start position:0%
so we're going to remove it from the
 

00:13:22.720 --> 00:13:23.910 align:start position:0%
so we're going to remove it from the
list

00:13:23.910 --> 00:13:23.920 align:start position:0%
list
 

00:13:23.920 --> 00:13:27.269 align:start position:0%
list
the<00:13:24.079><c> linked</c><00:13:24.399><c> list</c><00:13:24.959><c> and</c><00:13:25.120><c> delete</c><00:13:25.760><c> the</c><00:13:26.000><c> lru</c>

00:13:27.269 --> 00:13:27.279 align:start position:0%
the linked list and delete the lru
 

00:13:27.279 --> 00:13:30.790 align:start position:0%
the linked list and delete the lru
from<00:13:28.399><c> the</c><00:13:28.720><c> cache</c><00:13:29.519><c> or</c>

00:13:30.790 --> 00:13:30.800 align:start position:0%
from the cache or
 

00:13:30.800 --> 00:13:33.990 align:start position:0%
from the cache or
the<00:13:30.959><c> hashmap</c><00:13:32.079><c> so</c><00:13:32.240><c> how</c><00:13:32.399><c> do</c><00:13:32.480><c> we</c><00:13:32.720><c> actually</c><00:13:33.360><c> find</c>

00:13:33.990 --> 00:13:34.000 align:start position:0%
the hashmap so how do we actually find
 

00:13:34.000 --> 00:13:37.430 align:start position:0%
the hashmap so how do we actually find
the<00:13:34.240><c> node</c><00:13:34.639><c> for</c><00:13:34.880><c> the</c><00:13:35.040><c> lru</c><00:13:35.839><c> well</c><00:13:36.160><c> this</c><00:13:36.480><c> is</c><00:13:36.720><c> why</c>

00:13:37.430 --> 00:13:37.440 align:start position:0%
the node for the lru well this is why
 

00:13:37.440 --> 00:13:39.990 align:start position:0%
the node for the lru well this is why
we<00:13:37.839><c> have</c><00:13:38.240><c> our</c><00:13:38.560><c> left</c><00:13:38.959><c> and</c><00:13:39.120><c> right</c><00:13:39.360><c> pointers</c>

00:13:39.990 --> 00:13:40.000 align:start position:0%
we have our left and right pointers
 

00:13:40.000 --> 00:13:42.150 align:start position:0%
we have our left and right pointers
remember<00:13:40.399><c> the</c><00:13:40.720><c> left</c><00:13:41.040><c> pointer</c><00:13:41.360><c> is</c><00:13:41.600><c> all</c><00:13:41.839><c> the</c><00:13:41.920><c> way</c>

00:13:42.150 --> 00:13:42.160 align:start position:0%
remember the left pointer is all the way
 

00:13:42.160 --> 00:13:43.590 align:start position:0%
remember the left pointer is all the way
at<00:13:42.240><c> the</c><00:13:42.480><c> left</c><00:13:42.800><c> and</c><00:13:42.959><c> it's</c><00:13:43.199><c> going</c><00:13:43.279><c> to</c>

00:13:43.590 --> 00:13:43.600 align:start position:0%
at the left and it's going to
 

00:13:43.600 --> 00:13:46.069 align:start position:0%
at the left and it's going to
tell<00:13:43.839><c> us</c><00:13:44.240><c> what</c><00:13:44.399><c> the</c><00:13:44.560><c> least</c><00:13:44.880><c> recently</c><00:13:45.360><c> used</c><00:13:45.760><c> was</c>

00:13:46.069 --> 00:13:46.079 align:start position:0%
tell us what the least recently used was
 

00:13:46.079 --> 00:13:47.590 align:start position:0%
tell us what the least recently used was
so<00:13:46.480><c> left</c>

00:13:47.590 --> 00:13:47.600 align:start position:0%
so left
 

00:13:47.600 --> 00:13:51.030 align:start position:0%
so left
left<00:13:48.079><c> dot</c><00:13:48.560><c> next</c><00:13:49.120><c> is</c><00:13:49.600><c> always</c><00:13:50.160><c> going</c><00:13:50.480><c> to</c><00:13:50.720><c> be</c>

00:13:51.030 --> 00:13:51.040 align:start position:0%
left dot next is always going to be
 

00:13:51.040 --> 00:13:53.829 align:start position:0%
left dot next is always going to be
the<00:13:51.279><c> least</c><00:13:51.600><c> recently</c><00:13:52.160><c> used</c><00:13:52.959><c> and</c><00:13:53.120><c> so</c><00:13:53.440><c> first</c>

00:13:53.829 --> 00:13:53.839 align:start position:0%
the least recently used and so first
 

00:13:53.839 --> 00:13:55.829 align:start position:0%
the least recently used and so first
we're<00:13:54.000><c> going</c><00:13:54.160><c> to</c><00:13:54.320><c> remove</c><00:13:54.880><c> it</c><00:13:55.040><c> from</c><00:13:55.279><c> our</c><00:13:55.440><c> linked</c>

00:13:55.829 --> 00:13:55.839 align:start position:0%
we're going to remove it from our linked
 

00:13:55.839 --> 00:13:56.389 align:start position:0%
we're going to remove it from our linked
list

00:13:56.389 --> 00:13:56.399 align:start position:0%
list
 

00:13:56.399 --> 00:13:59.509 align:start position:0%
list
by<00:13:56.639><c> just</c><00:13:56.880><c> passing</c><00:13:57.360><c> in</c><00:13:57.440><c> the</c><00:13:57.600><c> node</c><00:13:59.040><c> and</c><00:13:59.199><c> we're</c>

00:13:59.509 --> 00:13:59.519 align:start position:0%
by just passing in the node and we're
 

00:13:59.519 --> 00:14:01.509 align:start position:0%
by just passing in the node and we're
also<00:13:59.839><c> going</c><00:13:59.920><c> to</c><00:14:00.079><c> delete</c><00:14:00.560><c> it</c><00:14:00.880><c> from</c>

00:14:01.509 --> 00:14:01.519 align:start position:0%
also going to delete it from
 

00:14:01.519 --> 00:14:05.189 align:start position:0%
also going to delete it from
our<00:14:01.920><c> hashmap</c><00:14:02.639><c> so</c><00:14:03.399><c> self.cache</c>

00:14:05.189 --> 00:14:05.199 align:start position:0%
our hashmap so self.cache
 

00:14:05.199 --> 00:14:07.829 align:start position:0%
our hashmap so self.cache
and<00:14:05.440><c> we</c><00:14:05.600><c> want</c><00:14:05.839><c> the</c><00:14:06.079><c> key</c><00:14:06.560><c> of</c><00:14:06.800><c> this</c><00:14:07.040><c> node</c><00:14:07.519><c> which</c>

00:14:07.829 --> 00:14:07.839 align:start position:0%
and we want the key of this node which
 

00:14:07.839 --> 00:14:10.550 align:start position:0%
and we want the key of this node which
is<00:14:08.000><c> actually</c><00:14:08.399><c> stored</c><00:14:08.880><c> in</c><00:14:08.959><c> the</c><00:14:09.120><c> node</c><00:14:09.440><c> itself</c>

00:14:10.550 --> 00:14:10.560 align:start position:0%
is actually stored in the node itself
 

00:14:10.560 --> 00:14:13.430 align:start position:0%
is actually stored in the node itself
this<00:14:10.800><c> is</c><00:14:10.959><c> why</c><00:14:11.360><c> we</c><00:14:11.760><c> didn't</c><00:14:12.160><c> only</c><00:14:12.560><c> store</c><00:14:12.959><c> the</c><00:14:13.279><c> the</c>

00:14:13.430 --> 00:14:13.440 align:start position:0%
this is why we didn't only store the the
 

00:14:13.440 --> 00:14:16.629 align:start position:0%
this is why we didn't only store the the
value<00:14:13.920><c> we</c><00:14:14.079><c> also</c><00:14:14.480><c> store</c><00:14:14.800><c> the</c><00:14:15.120><c> key</c><00:14:15.920><c> in</c><00:14:16.079><c> our</c><00:14:16.240><c> node</c>

00:14:16.629 --> 00:14:16.639 align:start position:0%
value we also store the key in our node
 

00:14:16.639 --> 00:14:17.189 align:start position:0%
value we also store the key in our node
class

00:14:17.189 --> 00:14:17.199 align:start position:0%
class
 

00:14:17.199 --> 00:14:19.030 align:start position:0%
class
so<00:14:17.360><c> we</c><00:14:17.519><c> don't</c><00:14:17.680><c> have</c><00:14:17.760><c> to</c><00:14:17.920><c> return</c><00:14:18.320><c> anything</c>

00:14:19.030 --> 00:14:19.040 align:start position:0%
so we don't have to return anything
 

00:14:19.040 --> 00:14:20.629 align:start position:0%
so we don't have to return anything
input<00:14:20.000><c> but</c><00:14:20.320><c> we</c>

00:14:20.629 --> 00:14:20.639 align:start position:0%
input but we
 

00:14:20.639 --> 00:14:23.189 align:start position:0%
input but we
do<00:14:20.959><c> now</c><00:14:21.279><c> have</c><00:14:21.440><c> to</c><00:14:21.680><c> fill</c><00:14:21.920><c> out</c><00:14:22.160><c> these</c><00:14:22.480><c> two</c><00:14:22.800><c> helper</c>

00:14:23.189 --> 00:14:23.199 align:start position:0%
do now have to fill out these two helper
 

00:14:23.199 --> 00:14:23.910 align:start position:0%
do now have to fill out these two helper
functions

00:14:23.910 --> 00:14:23.920 align:start position:0%
functions
 

00:14:23.920 --> 00:14:27.189 align:start position:0%
functions
remove<00:14:24.639><c> and</c><00:14:25.040><c> insert</c><00:14:26.160><c> so</c><00:14:26.480><c> if</c><00:14:26.639><c> you</c><00:14:26.800><c> have</c>

00:14:27.189 --> 00:14:27.199 align:start position:0%
remove and insert so if you have
 

00:14:27.199 --> 00:14:30.310 align:start position:0%
remove and insert so if you have
three<00:14:27.680><c> nodes</c><00:14:28.399><c> and</c><00:14:28.720><c> you</c><00:14:28.959><c> want</c><00:14:29.120><c> to</c><00:14:29.279><c> remove</c><00:14:30.079><c> the</c>

00:14:30.310 --> 00:14:30.320 align:start position:0%
three nodes and you want to remove the
 

00:14:30.320 --> 00:14:31.269 align:start position:0%
three nodes and you want to remove the
middle<00:14:30.639><c> node</c>

00:14:31.269 --> 00:14:31.279 align:start position:0%
middle node
 

00:14:31.279 --> 00:14:34.230 align:start position:0%
middle node
what<00:14:31.519><c> do</c><00:14:31.680><c> you</c><00:14:31.839><c> do</c><00:14:32.480><c> well</c><00:14:32.800><c> you</c><00:14:33.040><c> take</c><00:14:33.839><c> this</c>

00:14:34.230 --> 00:14:34.240 align:start position:0%
what do you do well you take this
 

00:14:34.240 --> 00:14:35.590 align:start position:0%
what do you do well you take this
pointer

00:14:35.590 --> 00:14:35.600 align:start position:0%
pointer
 

00:14:35.600 --> 00:14:38.710 align:start position:0%
pointer
and<00:14:36.560><c> move</c><00:14:36.800><c> it</c><00:14:36.959><c> over</c><00:14:37.199><c> here</c><00:14:38.000><c> and</c><00:14:38.160><c> you</c><00:14:38.320><c> take</c>

00:14:38.710 --> 00:14:38.720 align:start position:0%
and move it over here and you take
 

00:14:38.720 --> 00:14:41.910 align:start position:0%
and move it over here and you take
this<00:14:39.040><c> pointer</c><00:14:40.000><c> and</c><00:14:40.320><c> move</c><00:14:40.639><c> it</c><00:14:40.959><c> over</c><00:14:41.440><c> here</c>

00:14:41.910 --> 00:14:41.920 align:start position:0%
this pointer and move it over here
 

00:14:41.920 --> 00:14:45.670 align:start position:0%
this pointer and move it over here
so<00:14:42.240><c> this</c><00:14:42.480><c> stuff</c><00:14:43.600><c> is</c><00:14:43.920><c> no</c><00:14:44.160><c> longer</c><00:14:44.639><c> relevant</c>

00:14:45.670 --> 00:14:45.680 align:start position:0%
so this stuff is no longer relevant
 

00:14:45.680 --> 00:14:49.590 align:start position:0%
so this stuff is no longer relevant
and<00:14:46.160><c> we</c><00:14:46.399><c> have</c><00:14:46.639><c> removed</c><00:14:48.160><c> the</c><00:14:48.320><c> middle</c><00:14:48.639><c> node</c>

00:14:49.590 --> 00:14:49.600 align:start position:0%
and we have removed the middle node
 

00:14:49.600 --> 00:14:51.670 align:start position:0%
and we have removed the middle node
this<00:14:49.920><c> is</c><00:14:50.079><c> going</c><00:14:50.240><c> to</c><00:14:50.320><c> be</c><00:14:50.480><c> referred</c><00:14:50.959><c> to</c><00:14:51.199><c> as</c><00:14:51.440><c> our</c>

00:14:51.670 --> 00:14:51.680 align:start position:0%
this is going to be referred to as our
 

00:14:51.680 --> 00:14:52.790 align:start position:0%
this is going to be referred to as our
previous<00:14:52.240><c> node</c>

00:14:52.790 --> 00:14:52.800 align:start position:0%
previous node
 

00:14:52.800 --> 00:14:56.870 align:start position:0%
previous node
this<00:14:53.120><c> is</c><00:14:53.360><c> referred</c><00:14:53.839><c> to</c><00:14:54.079><c> as</c><00:14:54.320><c> our</c><00:14:54.639><c> next</c><00:14:55.120><c> node</c>

00:14:56.870 --> 00:14:56.880 align:start position:0%
this is referred to as our next node
 

00:14:56.880 --> 00:14:59.269 align:start position:0%
this is referred to as our next node
so<00:14:57.120><c> when</c><00:14:57.279><c> we're</c><00:14:57.519><c> writing</c><00:14:57.839><c> this</c><00:14:58.079><c> function</c><00:14:58.880><c> node</c>

00:14:59.269 --> 00:14:59.279 align:start position:0%
so when we're writing this function node
 

00:14:59.279 --> 00:15:00.790 align:start position:0%
so when we're writing this function node
is<00:14:59.440><c> going</c><00:14:59.519><c> to</c><00:14:59.600><c> be</c><00:14:59.760><c> the</c><00:14:59.920><c> middle</c><00:15:00.240><c> node</c><00:15:00.480><c> so</c><00:15:00.639><c> we</c>

00:15:00.790 --> 00:15:00.800 align:start position:0%
is going to be the middle node so we
 

00:15:00.800 --> 00:15:02.230 align:start position:0%
is going to be the middle node so we
want<00:15:00.959><c> to</c><00:15:01.040><c> get</c><00:15:01.199><c> the</c><00:15:01.440><c> previous</c>

00:15:02.230 --> 00:15:02.240 align:start position:0%
want to get the previous
 

00:15:02.240 --> 00:15:06.550 align:start position:0%
want to get the previous
and<00:15:02.720><c> next</c><00:15:03.199><c> nodes</c><00:15:03.839><c> of</c><00:15:04.240><c> node</c><00:15:05.120><c> so</c><00:15:05.360><c> we</c><00:15:05.600><c> can</c><00:15:05.920><c> just</c>

00:15:06.550 --> 00:15:06.560 align:start position:0%
and next nodes of node so we can just
 

00:15:06.560 --> 00:15:09.389 align:start position:0%
and next nodes of node so we can just
get<00:15:06.800><c> the</c><00:15:06.959><c> pointer</c><00:15:07.360><c> so</c><00:15:07.720><c> node.previous</c>

00:15:09.389 --> 00:15:09.399 align:start position:0%
get the pointer so node.previous
 

00:15:09.399 --> 00:15:11.030 align:start position:0%
get the pointer so node.previous
node.next

00:15:11.030 --> 00:15:11.040 align:start position:0%
node.next
 

00:15:11.040 --> 00:15:13.829 align:start position:0%
node.next
all<00:15:11.279><c> we</c><00:15:11.440><c> want</c><00:15:11.600><c> to</c><00:15:11.680><c> do</c><00:15:12.000><c> is</c><00:15:12.240><c> say</c><00:15:12.880><c> that</c><00:15:13.279><c> previous</c>

00:15:13.829 --> 00:15:13.839 align:start position:0%
all we want to do is say that previous
 

00:15:13.839 --> 00:15:14.230 align:start position:0%
all we want to do is say that previous
dot

00:15:14.230 --> 00:15:14.240 align:start position:0%
dot
 

00:15:14.240 --> 00:15:18.310 align:start position:0%
dot
next<00:15:14.959><c> should</c><00:15:15.199><c> be</c><00:15:15.440><c> updated</c><00:15:16.320><c> and</c><00:15:17.040><c> next</c>

00:15:18.310 --> 00:15:18.320 align:start position:0%
next should be updated and next
 

00:15:18.320 --> 00:15:21.110 align:start position:0%
next should be updated and next
dot<00:15:18.959><c> previous</c><00:15:19.920><c> should</c><00:15:20.079><c> be</c><00:15:20.240><c> updated</c><00:15:20.720><c> these</c><00:15:20.959><c> are</c>

00:15:21.110 --> 00:15:21.120 align:start position:0%
dot previous should be updated these are
 

00:15:21.120 --> 00:15:22.230 align:start position:0%
dot previous should be updated these are
the<00:15:21.279><c> two</c><00:15:21.519><c> pointers</c>

00:15:22.230 --> 00:15:22.240 align:start position:0%
the two pointers
 

00:15:22.240 --> 00:15:24.509 align:start position:0%
the two pointers
of<00:15:22.320><c> the</c><00:15:22.480><c> next</c><00:15:22.880><c> and</c><00:15:23.040><c> previous</c><00:15:23.519><c> nodes</c><00:15:24.240><c> so</c>

00:15:24.509 --> 00:15:24.519 align:start position:0%
of the next and previous nodes so
 

00:15:24.519 --> 00:15:25.670 align:start position:0%
of the next and previous nodes so
previous.next

00:15:25.670 --> 00:15:25.680 align:start position:0%
previous.next
 

00:15:25.680 --> 00:15:29.269 align:start position:0%
previous.next
should<00:15:26.000><c> be</c><00:15:26.320><c> next</c>

00:15:29.269 --> 00:15:29.279 align:start position:0%
 
 

00:15:29.279 --> 00:15:33.110 align:start position:0%
 
next<00:15:29.600><c> stop</c><00:15:30.000><c> previous</c><00:15:30.720><c> should</c><00:15:30.959><c> be</c><00:15:31.279><c> previous</c>

00:15:33.110 --> 00:15:33.120 align:start position:0%
next stop previous should be previous
 

00:15:33.120 --> 00:15:36.629 align:start position:0%
next stop previous should be previous
so<00:15:33.360><c> now</c><00:15:33.680><c> node</c><00:15:34.160><c> is</c><00:15:34.320><c> no</c><00:15:34.639><c> longer</c><00:15:35.199><c> in</c><00:15:35.360><c> between</c>

00:15:36.629 --> 00:15:36.639 align:start position:0%
so now node is no longer in between
 

00:15:36.639 --> 00:15:39.430 align:start position:0%
so now node is no longer in between
previous<00:15:37.199><c> and</c><00:15:37.440><c> next</c><00:15:38.240><c> the</c><00:15:38.560><c> last</c><00:15:38.959><c> thing</c><00:15:39.120><c> we</c><00:15:39.279><c> need</c>

00:15:39.430 --> 00:15:39.440 align:start position:0%
previous and next the last thing we need
 

00:15:39.440 --> 00:15:40.150 align:start position:0%
previous and next the last thing we need
to<00:15:39.600><c> do</c><00:15:39.839><c> is</c>

00:15:40.150 --> 00:15:40.160 align:start position:0%
to do is
 

00:15:40.160 --> 00:15:42.389 align:start position:0%
to do is
fill<00:15:40.399><c> out</c><00:15:40.639><c> our</c><00:15:40.800><c> insert</c><00:15:41.360><c> function</c><00:15:41.759><c> which</c><00:15:42.160><c> what</c>

00:15:42.389 --> 00:15:42.399 align:start position:0%
fill out our insert function which what
 

00:15:42.399 --> 00:15:43.430 align:start position:0%
fill out our insert function which what
we<00:15:42.560><c> want</c><00:15:42.800><c> it</c><00:15:42.880><c> to</c><00:15:43.040><c> do</c>

00:15:43.430 --> 00:15:43.440 align:start position:0%
we want it to do
 

00:15:43.440 --> 00:15:46.470 align:start position:0%
we want it to do
is<00:15:43.839><c> insert</c><00:15:44.240><c> a</c><00:15:44.399><c> node</c><00:15:45.279><c> at</c><00:15:45.600><c> the</c><00:15:45.839><c> rightmost</c>

00:15:46.470 --> 00:15:46.480 align:start position:0%
is insert a node at the rightmost
 

00:15:46.480 --> 00:15:48.069 align:start position:0%
is insert a node at the rightmost
position

00:15:48.069 --> 00:15:48.079 align:start position:0%
position
 

00:15:48.079 --> 00:15:52.230 align:start position:0%
position
right<00:15:48.399><c> before</c><00:15:49.120><c> our</c><00:15:49.440><c> right</c><00:15:49.759><c> pointer</c>

00:15:52.230 --> 00:15:52.240 align:start position:0%
right before our right pointer
 

00:15:52.240 --> 00:15:55.350 align:start position:0%
right before our right pointer
so<00:15:52.480><c> let's</c><00:15:52.639><c> say</c><00:15:52.880><c> this</c><00:15:53.120><c> is</c><00:15:53.279><c> our</c><00:15:53.600><c> right</c><00:15:53.920><c> pointer</c>

00:15:55.350 --> 00:15:55.360 align:start position:0%
so let's say this is our right pointer
 

00:15:55.360 --> 00:15:58.629 align:start position:0%
so let's say this is our right pointer
we<00:15:55.600><c> want</c><00:15:55.759><c> to</c><00:15:55.920><c> insert</c><00:15:56.639><c> right</c><00:15:56.959><c> here</c><00:15:58.160><c> and</c><00:15:58.320><c> this</c>

00:15:58.629 --> 00:15:58.639 align:start position:0%
we want to insert right here and this
 

00:15:58.639 --> 00:16:01.590 align:start position:0%
we want to insert right here and this
is<00:15:58.720><c> going</c><00:15:58.880><c> to</c><00:15:58.959><c> be</c><00:15:59.279><c> our</c><00:15:59.519><c> previous</c><00:16:00.079><c> pointer</c><00:16:01.040><c> so</c>

00:16:01.590 --> 00:16:01.600 align:start position:0%
is going to be our previous pointer so
 

00:16:01.600 --> 00:16:02.629 align:start position:0%
is going to be our previous pointer so
when<00:16:01.839><c> we</c><00:16:02.000><c> have</c><00:16:02.240><c> our</c>

00:16:02.629 --> 00:16:02.639 align:start position:0%
when we have our
 

00:16:02.639 --> 00:16:05.829 align:start position:0%
when we have our
new<00:16:03.759><c> node</c><00:16:04.240><c> that</c><00:16:04.399><c> we're</c><00:16:04.560><c> trying</c><00:16:04.800><c> to</c><00:16:05.040><c> insert</c>

00:16:05.829 --> 00:16:05.839 align:start position:0%
new node that we're trying to insert
 

00:16:05.839 --> 00:16:09.030 align:start position:0%
new node that we're trying to insert
what<00:16:06.000><c> we</c><00:16:06.160><c> want</c><00:16:06.320><c> to</c><00:16:06.480><c> do</c><00:16:06.720><c> is</c><00:16:06.959><c> take</c><00:16:08.000><c> this</c><00:16:08.320><c> pointer</c>

00:16:09.030 --> 00:16:09.040 align:start position:0%
what we want to do is take this pointer
 

00:16:09.040 --> 00:16:12.550 align:start position:0%
what we want to do is take this pointer
and<00:16:10.000><c> reassign</c><00:16:10.639><c> it</c><00:16:10.880><c> to</c><00:16:11.199><c> that</c>

00:16:12.550 --> 00:16:12.560 align:start position:0%
and reassign it to that
 

00:16:12.560 --> 00:16:16.629 align:start position:0%
and reassign it to that
this<00:16:12.959><c> pointer</c><00:16:14.320><c> and</c><00:16:14.959><c> reassign</c><00:16:15.600><c> it</c>

00:16:16.629 --> 00:16:16.639 align:start position:0%
this pointer and reassign it
 

00:16:16.639 --> 00:16:19.990 align:start position:0%
this pointer and reassign it
over<00:16:17.040><c> here</c><00:16:18.320><c> and</c><00:16:18.480><c> we</c><00:16:18.639><c> also</c><00:16:18.959><c> want</c><00:16:19.360><c> this</c><00:16:19.600><c> node</c><00:16:19.839><c> to</c>

00:16:19.990 --> 00:16:20.000 align:start position:0%
over here and we also want this node to
 

00:16:20.000 --> 00:16:21.350 align:start position:0%
over here and we also want this node to
be<00:16:20.160><c> connected</c>

00:16:21.350 --> 00:16:21.360 align:start position:0%
be connected
 

00:16:21.360 --> 00:16:23.590 align:start position:0%
be connected
to<00:16:22.320><c> its</c><00:16:22.560><c> neighbors</c><00:16:22.959><c> so</c><00:16:23.120><c> we're</c><00:16:23.279><c> going</c><00:16:23.360><c> to</c><00:16:23.440><c> have</c>

00:16:23.590 --> 00:16:23.600 align:start position:0%
to its neighbors so we're going to have
 

00:16:23.600 --> 00:16:25.590 align:start position:0%
to its neighbors so we're going to have
the<00:16:23.759><c> next</c><00:16:24.079><c> pointer</c><00:16:24.560><c> over</c><00:16:24.800><c> here</c><00:16:25.199><c> and</c><00:16:25.360><c> the</c>

00:16:25.590 --> 00:16:25.600 align:start position:0%
the next pointer over here and the
 

00:16:25.600 --> 00:16:27.030 align:start position:0%
the next pointer over here and the
previous<00:16:26.160><c> pointer</c>

00:16:27.030 --> 00:16:27.040 align:start position:0%
previous pointer
 

00:16:27.040 --> 00:16:30.310 align:start position:0%
previous pointer
to<00:16:27.279><c> be</c><00:16:28.320><c> here</c><00:16:29.199><c> so</c><00:16:29.440><c> in</c><00:16:29.600><c> this</c><00:16:29.920><c> case</c>

00:16:30.310 --> 00:16:30.320 align:start position:0%
to be here so in this case
 

00:16:30.320 --> 00:16:33.749 align:start position:0%
to be here so in this case
our<00:16:30.639><c> previous</c><00:16:31.519><c> and</c><00:16:31.839><c> next</c><00:16:32.240><c> pointers</c><00:16:33.199><c> we</c><00:16:33.440><c> can</c>

00:16:33.749 --> 00:16:33.759 align:start position:0%
our previous and next pointers we can
 

00:16:33.759 --> 00:16:34.470 align:start position:0%
our previous and next pointers we can
get

00:16:34.470 --> 00:16:34.480 align:start position:0%
get
 

00:16:34.480 --> 00:16:38.310 align:start position:0%
get
by<00:16:34.839><c> using</c><00:16:35.839><c> our</c><00:16:36.160><c> rightmost</c><00:16:36.800><c> pointer</c>

00:16:38.310 --> 00:16:38.320 align:start position:0%
by using our rightmost pointer
 

00:16:38.320 --> 00:16:42.550 align:start position:0%
by using our rightmost pointer
so<00:16:40.680><c> self.write.previous</c>

00:16:42.550 --> 00:16:42.560 align:start position:0%
so self.write.previous
 

00:16:42.560 --> 00:16:46.470 align:start position:0%
so self.write.previous
and<00:16:43.720><c> self.write</c><00:16:45.279><c> now</c><00:16:45.519><c> we</c><00:16:45.680><c> want</c><00:16:46.000><c> both</c>

00:16:46.470 --> 00:16:46.480 align:start position:0%
and self.write now we want both
 

00:16:46.480 --> 00:16:49.749 align:start position:0%
and self.write now we want both
previous<00:16:47.120><c> and</c><00:16:47.360><c> next</c><00:16:47.680><c> to</c><00:16:47.920><c> point</c><00:16:48.320><c> to</c><00:16:48.560><c> node</c><00:16:49.360><c> so</c><00:16:49.600><c> we</c>

00:16:49.749 --> 00:16:49.759 align:start position:0%
previous and next to point to node so we
 

00:16:49.759 --> 00:16:49.990 align:start position:0%
previous and next to point to node so we
can

00:16:49.990 --> 00:16:50.000 align:start position:0%
can
 

00:16:50.000 --> 00:16:55.269 align:start position:0%
can
do<00:16:50.240><c> that</c><00:16:50.959><c> like</c><00:16:51.279><c> this</c><00:16:51.759><c> previous</c><00:16:52.480><c> dot</c><00:16:52.959><c> next</c>

00:16:55.269 --> 00:16:55.279 align:start position:0%
do that like this previous dot next
 

00:16:55.279 --> 00:16:58.069 align:start position:0%
do that like this previous dot next
is<00:16:55.440><c> going</c><00:16:55.519><c> to</c><00:16:55.600><c> be</c><00:16:55.839><c> equal</c><00:16:56.399><c> to</c><00:16:56.880><c> next</c><00:16:57.680><c> dot</c>

00:16:58.069 --> 00:16:58.079 align:start position:0%
is going to be equal to next dot
 

00:16:58.079 --> 00:16:58.790 align:start position:0%
is going to be equal to next dot
previous

00:16:58.790 --> 00:16:58.800 align:start position:0%
previous
 

00:16:58.800 --> 00:17:00.949 align:start position:0%
previous
which<00:16:59.120><c> is</c><00:16:59.199><c> going</c><00:16:59.360><c> to</c><00:16:59.440><c> be</c><00:16:59.600><c> equal</c><00:17:00.240><c> to</c><00:17:00.560><c> node</c>

00:17:00.949 --> 00:17:00.959 align:start position:0%
which is going to be equal to node
 

00:17:00.959 --> 00:17:01.829 align:start position:0%
which is going to be equal to node
they're<00:17:01.279><c> both</c>

00:17:01.829 --> 00:17:01.839 align:start position:0%
they're both
 

00:17:01.839 --> 00:17:04.549 align:start position:0%
they're both
pointing<00:17:02.240><c> at</c><00:17:02.639><c> node</c><00:17:03.120><c> node</c><00:17:03.440><c> has</c><00:17:03.680><c> been</c><00:17:03.920><c> inserted</c>

00:17:04.549 --> 00:17:04.559 align:start position:0%
pointing at node node has been inserted
 

00:17:04.559 --> 00:17:06.150 align:start position:0%
pointing at node node has been inserted
in<00:17:04.640><c> the</c><00:17:04.799><c> middle</c><00:17:05.120><c> of</c><00:17:05.280><c> them</c>

00:17:06.150 --> 00:17:06.160 align:start position:0%
in the middle of them
 

00:17:06.160 --> 00:17:09.909 align:start position:0%
in the middle of them
and<00:17:07.880><c> node.next</c>

00:17:09.909 --> 00:17:09.919 align:start position:0%
and node.next
 

00:17:09.919 --> 00:17:13.110 align:start position:0%
and node.next
and<00:17:10.919><c> node.previous</c><00:17:12.160><c> also</c><00:17:12.559><c> need</c><00:17:12.720><c> to</c><00:17:12.880><c> be</c>

00:17:13.110 --> 00:17:13.120 align:start position:0%
and node.previous also need to be
 

00:17:13.120 --> 00:17:13.909 align:start position:0%
and node.previous also need to be
assigned

00:17:13.909 --> 00:17:13.919 align:start position:0%
assigned
 

00:17:13.919 --> 00:17:17.350 align:start position:0%
assigned
to<00:17:15.520><c> next</c><00:17:16.720><c> and</c>

00:17:17.350 --> 00:17:17.360 align:start position:0%
to next and
 

00:17:17.360 --> 00:17:20.470 align:start position:0%
to next and
previous<00:17:18.400><c> so</c><00:17:18.640><c> this</c><00:17:18.880><c> is</c><00:17:19.199><c> quite</c><00:17:19.600><c> a</c><00:17:19.679><c> lot</c><00:17:19.839><c> of</c><00:17:20.000><c> code</c>

00:17:20.470 --> 00:17:20.480 align:start position:0%
previous so this is quite a lot of code
 

00:17:20.480 --> 00:17:21.029 align:start position:0%
previous so this is quite a lot of code
about

00:17:21.029 --> 00:17:21.039 align:start position:0%
about
 

00:17:21.039 --> 00:17:23.590 align:start position:0%
about
44<00:17:21.679><c> lines</c><00:17:22.079><c> with</c><00:17:22.240><c> some</c><00:17:22.480><c> space</c><00:17:22.880><c> and</c><00:17:23.039><c> comments</c><00:17:23.520><c> in</c>

00:17:23.590 --> 00:17:23.600 align:start position:0%
44 lines with some space and comments in
 

00:17:23.600 --> 00:17:24.549 align:start position:0%
44 lines with some space and comments in
between<00:17:24.160><c> but</c>

00:17:24.549 --> 00:17:24.559 align:start position:0%
between but
 

00:17:24.559 --> 00:17:27.029 align:start position:0%
between but
this<00:17:24.880><c> is</c><00:17:24.959><c> how</c><00:17:25.199><c> you</c><00:17:25.439><c> get</c><00:17:25.760><c> the</c><00:17:26.079><c> most</c><00:17:26.559><c> optimal</c>

00:17:27.029 --> 00:17:27.039 align:start position:0%
this is how you get the most optimal
 

00:17:27.039 --> 00:17:27.909 align:start position:0%
this is how you get the most optimal
solution

00:17:27.909 --> 00:17:27.919 align:start position:0%
solution
 

00:17:27.919 --> 00:17:30.070 align:start position:0%
solution
for<00:17:28.160><c> this</c><00:17:28.480><c> problem</c><00:17:29.039><c> and</c><00:17:29.200><c> of</c><00:17:29.280><c> course</c><00:17:29.679><c> i</c><00:17:29.760><c> had</c><00:17:30.000><c> a</c>

00:17:30.070 --> 00:17:30.080 align:start position:0%
for this problem and of course i had a
 

00:17:30.080 --> 00:17:31.750 align:start position:0%
for this problem and of course i had a
bug<00:17:30.559><c> so</c>

00:17:31.750 --> 00:17:31.760 align:start position:0%
bug so
 

00:17:31.760 --> 00:17:33.750 align:start position:0%
bug so
i<00:17:31.919><c> misspelled</c><00:17:32.480><c> something</c><00:17:32.799><c> i'm</c><00:17:33.039><c> really</c><00:17:33.440><c> hoping</c>

00:17:33.750 --> 00:17:33.760 align:start position:0%
i misspelled something i'm really hoping
 

00:17:33.760 --> 00:17:35.909 align:start position:0%
i misspelled something i'm really hoping
that's<00:17:34.000><c> the</c><00:17:34.160><c> only</c><00:17:34.400><c> bug</c><00:17:34.720><c> here</c><00:17:35.039><c> because</c><00:17:35.440><c> i</c><00:17:35.600><c> do</c>

00:17:35.909 --> 00:17:35.919 align:start position:0%
that's the only bug here because i do
 

00:17:35.919 --> 00:17:38.230 align:start position:0%
that's the only bug here because i do
not<00:17:36.240><c> want</c><00:17:36.400><c> to</c><00:17:36.559><c> search</c><00:17:36.799><c> for</c><00:17:36.960><c> a</c><00:17:37.120><c> bug</c><00:17:37.440><c> in</c><00:17:37.919><c> these</c>

00:17:38.230 --> 00:17:38.240 align:start position:0%
not want to search for a bug in these
 

00:17:38.240 --> 00:17:39.510 align:start position:0%
not want to search for a bug in these
lines<00:17:38.480><c> of</c><00:17:38.640><c> code</c>

00:17:39.510 --> 00:17:39.520 align:start position:0%
lines of code
 

00:17:39.520 --> 00:17:42.710 align:start position:0%
lines of code
okay<00:17:39.840><c> so</c><00:17:40.400><c> we</c><00:17:40.559><c> got</c><00:17:40.720><c> it</c><00:17:40.799><c> to</c><00:17:41.039><c> pass</c><00:17:41.760><c> so</c><00:17:42.080><c> i</c><00:17:42.240><c> hope</c><00:17:42.480><c> this</c>

00:17:42.710 --> 00:17:42.720 align:start position:0%
okay so we got it to pass so i hope this
 

00:17:42.720 --> 00:17:43.590 align:start position:0%
okay so we got it to pass so i hope this
was<00:17:42.880><c> helpful</c>

00:17:43.590 --> 00:17:43.600 align:start position:0%
was helpful
 

00:17:43.600 --> 00:17:45.830 align:start position:0%
was helpful
if<00:17:43.760><c> you</c><00:17:43.840><c> enjoyed</c><00:17:44.480><c> please</c><00:17:44.799><c> like</c><00:17:45.039><c> and</c><00:17:45.120><c> subscribe</c>

00:17:45.830 --> 00:17:45.840 align:start position:0%
if you enjoyed please like and subscribe
 

00:17:45.840 --> 00:17:50.799 align:start position:0%
if you enjoyed please like and subscribe
and<00:17:46.000><c> i'll</c><00:17:46.160><c> hopefully</c><00:17:46.640><c> see</c><00:17:46.880><c> you</c><00:17:47.039><c> pretty</c><00:17:47.799><c> soon</c>

