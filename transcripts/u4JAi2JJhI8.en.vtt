WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.750 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.120><c> back</c><00:00:01.360><c> and</c><00:00:01.520><c> let's</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.760 --> 00:00:03.590 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.920><c> some</c><00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.560><c> code</c><00:00:02.879><c> today</c><00:00:03.120><c> so</c><00:00:03.280><c> today</c>

00:00:03.590 --> 00:00:03.600 align:start position:0%
write some more neat code today so today
 

00:00:03.600 --> 00:00:04.309 align:start position:0%
write some more neat code today so today
let's<00:00:03.919><c> solve</c>

00:00:04.309 --> 00:00:04.319 align:start position:0%
let's solve
 

00:00:04.319 --> 00:00:07.909 align:start position:0%
let's solve
serialize<00:00:05.040><c> and</c><00:00:05.200><c> deserialize</c><00:00:06.319><c> a</c><00:00:06.560><c> binary</c><00:00:07.200><c> tree</c>

00:00:07.909 --> 00:00:07.919 align:start position:0%
serialize and deserialize a binary tree
 

00:00:07.919 --> 00:00:09.430 align:start position:0%
serialize and deserialize a binary tree
basically<00:00:08.480><c> what</c><00:00:08.639><c> we're</c><00:00:08.800><c> trying</c><00:00:09.040><c> to</c><00:00:09.120><c> do</c><00:00:09.280><c> is</c>

00:00:09.430 --> 00:00:09.440 align:start position:0%
basically what we're trying to do is
 

00:00:09.440 --> 00:00:11.350 align:start position:0%
basically what we're trying to do is
we're<00:00:09.679><c> given</c><00:00:10.000><c> a</c><00:00:10.160><c> binary</c><00:00:10.639><c> tree</c><00:00:10.880><c> right</c><00:00:11.120><c> and</c><00:00:11.200><c> we</c>

00:00:11.350 --> 00:00:11.360 align:start position:0%
we're given a binary tree right and we
 

00:00:11.360 --> 00:00:13.030 align:start position:0%
we're given a binary tree right and we
want<00:00:11.519><c> to</c><00:00:11.599><c> write</c><00:00:11.840><c> two</c><00:00:12.160><c> functions</c><00:00:12.639><c> for</c><00:00:12.880><c> it</c>

00:00:13.030 --> 00:00:13.040 align:start position:0%
want to write two functions for it
 

00:00:13.040 --> 00:00:15.589 align:start position:0%
want to write two functions for it
serializing<00:00:13.840><c> it</c><00:00:14.000><c> and</c><00:00:14.080><c> then</c><00:00:14.320><c> deserializing</c><00:00:15.360><c> it</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
serializing it and then deserializing it
 

00:00:15.599 --> 00:00:17.910 align:start position:0%
serializing it and then deserializing it
when<00:00:15.759><c> we</c><00:00:15.920><c> serialize</c><00:00:16.560><c> we're</c><00:00:16.720><c> taking</c><00:00:17.119><c> an</c><00:00:17.440><c> object</c>

00:00:17.910 --> 00:00:17.920 align:start position:0%
when we serialize we're taking an object
 

00:00:17.920 --> 00:00:18.950 align:start position:0%
when we serialize we're taking an object
right<00:00:18.160><c> and</c><00:00:18.240><c> this</c><00:00:18.480><c> object</c>

00:00:18.950 --> 00:00:18.960 align:start position:0%
right and this object
 

00:00:18.960 --> 00:00:20.470 align:start position:0%
right and this object
in<00:00:19.199><c> memory</c><00:00:19.600><c> it</c><00:00:19.680><c> could</c><00:00:19.840><c> be</c><00:00:19.920><c> anything</c><00:00:20.320><c> right</c>

00:00:20.470 --> 00:00:20.480 align:start position:0%
in memory it could be anything right
 

00:00:20.480 --> 00:00:22.070 align:start position:0%
in memory it could be anything right
like<00:00:20.640><c> you</c><00:00:20.800><c> don't</c><00:00:20.960><c> know</c><00:00:21.119><c> where</c><00:00:21.359><c> this</c><00:00:21.760><c> node</c>

00:00:22.070 --> 00:00:22.080 align:start position:0%
like you don't know where this node
 

00:00:22.080 --> 00:00:22.630 align:start position:0%
like you don't know where this node
could<00:00:22.320><c> be</c>

00:00:22.630 --> 00:00:22.640 align:start position:0%
could be
 

00:00:22.640 --> 00:00:24.230 align:start position:0%
could be
in<00:00:22.960><c> memory</c><00:00:23.359><c> you</c><00:00:23.439><c> don't</c><00:00:23.600><c> know</c><00:00:23.680><c> where</c><00:00:23.840><c> this</c><00:00:24.000><c> node</c>

00:00:24.230 --> 00:00:24.240 align:start position:0%
in memory you don't know where this node
 

00:00:24.240 --> 00:00:25.670 align:start position:0%
in memory you don't know where this node
could<00:00:24.400><c> be</c><00:00:24.560><c> we</c><00:00:24.640><c> know</c><00:00:24.800><c> that</c><00:00:24.880><c> there's</c><00:00:25.119><c> some</c><00:00:25.359><c> links</c>

00:00:25.670 --> 00:00:25.680 align:start position:0%
could be we know that there's some links
 

00:00:25.680 --> 00:00:27.189 align:start position:0%
could be we know that there's some links
and<00:00:25.840><c> stuff</c><00:00:26.080><c> connecting</c><00:00:26.480><c> them</c><00:00:26.720><c> all</c><00:00:26.880><c> together</c>

00:00:27.189 --> 00:00:27.199 align:start position:0%
and stuff connecting them all together
 

00:00:27.199 --> 00:00:27.589 align:start position:0%
and stuff connecting them all together
but

00:00:27.589 --> 00:00:27.599 align:start position:0%
but
 

00:00:27.599 --> 00:00:29.589 align:start position:0%
but
what<00:00:27.760><c> we</c><00:00:27.840><c> want</c><00:00:28.000><c> to</c><00:00:28.080><c> do</c><00:00:28.320><c> is</c><00:00:28.560><c> take</c><00:00:28.800><c> this</c><00:00:29.199><c> and</c><00:00:29.359><c> put</c>

00:00:29.589 --> 00:00:29.599 align:start position:0%
what we want to do is take this and put
 

00:00:29.599 --> 00:00:31.830 align:start position:0%
what we want to do is take this and put
it<00:00:29.760><c> into</c><00:00:30.160><c> a</c><00:00:30.320><c> very</c><00:00:30.720><c> easy</c><00:00:31.119><c> to</c><00:00:31.359><c> read</c>

00:00:31.830 --> 00:00:31.840 align:start position:0%
it into a very easy to read
 

00:00:31.840 --> 00:00:33.990 align:start position:0%
it into a very easy to read
string<00:00:32.239><c> that</c><00:00:32.399><c> could</c><00:00:32.559><c> be</c><00:00:32.800><c> passed</c><00:00:33.200><c> around</c>

00:00:33.990 --> 00:00:34.000 align:start position:0%
string that could be passed around
 

00:00:34.000 --> 00:00:35.590 align:start position:0%
string that could be passed around
easily<00:00:34.480><c> right</c><00:00:34.640><c> so</c><00:00:34.880><c> basically</c>

00:00:35.590 --> 00:00:35.600 align:start position:0%
easily right so basically
 

00:00:35.600 --> 00:00:38.150 align:start position:0%
easily right so basically
for<00:00:35.760><c> example</c><00:00:36.640><c> we</c><00:00:36.800><c> could</c><00:00:36.960><c> convert</c><00:00:37.600><c> basically</c>

00:00:38.150 --> 00:00:38.160 align:start position:0%
for example we could convert basically
 

00:00:38.160 --> 00:00:39.270 align:start position:0%
for example we could convert basically
we<00:00:38.320><c> could</c><00:00:38.480><c> convert</c>

00:00:39.270 --> 00:00:39.280 align:start position:0%
we could convert
 

00:00:39.280 --> 00:00:41.510 align:start position:0%
we could convert
this<00:00:39.520><c> entire</c><00:00:39.920><c> tree</c><00:00:40.320><c> into</c><00:00:40.559><c> a</c><00:00:40.800><c> string</c><00:00:41.200><c> something</c>

00:00:41.510 --> 00:00:41.520 align:start position:0%
this entire tree into a string something
 

00:00:41.520 --> 00:00:42.389 align:start position:0%
this entire tree into a string something
like<00:00:41.760><c> this</c><00:00:42.079><c> right</c>

00:00:42.389 --> 00:00:42.399 align:start position:0%
like this right
 

00:00:42.399 --> 00:00:44.150 align:start position:0%
like this right
one<00:00:42.719><c> is</c><00:00:42.800><c> the</c><00:00:42.960><c> root</c><00:00:43.200><c> node</c><00:00:43.440><c> then</c><00:00:43.600><c> there's</c><00:00:43.840><c> a</c><00:00:44.000><c> two</c>

00:00:44.150 --> 00:00:44.160 align:start position:0%
one is the root node then there's a two
 

00:00:44.160 --> 00:00:45.350 align:start position:0%
one is the root node then there's a two
then<00:00:44.320><c> there's</c><00:00:44.559><c> a</c><00:00:44.640><c> three</c><00:00:44.879><c> then</c><00:00:45.039><c> there's</c><00:00:45.280><c> a</c>

00:00:45.350 --> 00:00:45.360 align:start position:0%
then there's a three then there's a
 

00:00:45.360 --> 00:00:47.270 align:start position:0%
then there's a three then there's a
couple<00:00:45.760><c> nulls</c><00:00:46.239><c> because</c><00:00:46.640><c> two</c><00:00:46.879><c> doesn't</c><00:00:47.120><c> have</c>

00:00:47.270 --> 00:00:47.280 align:start position:0%
couple nulls because two doesn't have
 

00:00:47.280 --> 00:00:48.069 align:start position:0%
couple nulls because two doesn't have
any<00:00:47.440><c> children</c>

00:00:48.069 --> 00:00:48.079 align:start position:0%
any children
 

00:00:48.079 --> 00:00:49.830 align:start position:0%
any children
and<00:00:48.239><c> then</c><00:00:48.399><c> there's</c><00:00:48.640><c> the</c><00:00:48.800><c> other</c><00:00:49.039><c> nodes</c><00:00:49.680><c> four</c>

00:00:49.830 --> 00:00:49.840 align:start position:0%
and then there's the other nodes four
 

00:00:49.840 --> 00:00:51.189 align:start position:0%
and then there's the other nodes four
and<00:00:50.000><c> five</c><00:00:50.320><c> right</c><00:00:50.559><c> basically</c>

00:00:51.189 --> 00:00:51.199 align:start position:0%
and five right basically
 

00:00:51.199 --> 00:00:53.590 align:start position:0%
and five right basically
this<00:00:51.440><c> is</c><00:00:51.520><c> something</c><00:00:51.760><c> that's</c><00:00:52.079><c> easy</c><00:00:52.399><c> to</c><00:00:52.640><c> use</c><00:00:53.360><c> and</c>

00:00:53.590 --> 00:00:53.600 align:start position:0%
this is something that's easy to use and
 

00:00:53.600 --> 00:00:54.790 align:start position:0%
this is something that's easy to use and
pass<00:00:53.920><c> around</c><00:00:54.399><c> right</c>

00:00:54.790 --> 00:00:54.800 align:start position:0%
pass around right
 

00:00:54.800 --> 00:00:57.189 align:start position:0%
pass around right
and<00:00:54.960><c> we</c><00:00:55.280><c> also</c><00:00:55.680><c> wanna</c><00:00:56.000><c> be</c><00:00:56.160><c> able</c><00:00:56.480><c> to</c><00:00:56.719><c> take</c><00:00:56.960><c> a</c>

00:00:57.189 --> 00:00:57.199 align:start position:0%
and we also wanna be able to take a
 

00:00:57.199 --> 00:00:59.110 align:start position:0%
and we also wanna be able to take a
string<00:00:57.600><c> like</c><00:00:57.920><c> this</c><00:00:58.160><c> and</c><00:00:58.239><c> then</c><00:00:58.480><c> turn</c><00:00:58.800><c> it</c>

00:00:59.110 --> 00:00:59.120 align:start position:0%
string like this and then turn it
 

00:00:59.120 --> 00:01:02.470 align:start position:0%
string like this and then turn it
back<00:00:59.600><c> into</c><00:01:00.079><c> a</c><00:01:00.480><c> tree</c><00:01:01.440><c> so</c><00:01:01.600><c> we</c><00:01:01.760><c> have</c><00:01:01.840><c> to</c><00:01:02.000><c> keep</c><00:01:02.239><c> that</c>

00:01:02.470 --> 00:01:02.480 align:start position:0%
back into a tree so we have to keep that
 

00:01:02.480 --> 00:01:04.149 align:start position:0%
back into a tree so we have to keep that
in<00:01:02.640><c> mind</c><00:01:02.960><c> it's</c><00:01:03.120><c> something</c><00:01:03.359><c> that</c><00:01:03.600><c> could</c><00:01:03.760><c> be</c>

00:01:04.149 --> 00:01:04.159 align:start position:0%
in mind it's something that could be
 

00:01:04.159 --> 00:01:05.990 align:start position:0%
in mind it's something that could be
you<00:01:04.320><c> know</c><00:01:04.479><c> taken</c><00:01:04.879><c> back</c><00:01:05.119><c> and</c><00:01:05.280><c> forth</c><00:01:05.519><c> easily</c>

00:01:05.990 --> 00:01:06.000 align:start position:0%
you know taken back and forth easily
 

00:01:06.000 --> 00:01:08.149 align:start position:0%
you know taken back and forth easily
reversed<00:01:06.880><c> so</c><00:01:07.040><c> there's</c><00:01:07.280><c> a</c><00:01:07.520><c> lot</c><00:01:07.680><c> of</c><00:01:07.840><c> different</c>

00:01:08.149 --> 00:01:08.159 align:start position:0%
reversed so there's a lot of different
 

00:01:08.159 --> 00:01:09.670 align:start position:0%
reversed so there's a lot of different
ways<00:01:08.479><c> to</c><00:01:08.640><c> solve</c><00:01:08.960><c> this</c><00:01:09.200><c> problem</c>

00:01:09.670 --> 00:01:09.680 align:start position:0%
ways to solve this problem
 

00:01:09.680 --> 00:01:11.830 align:start position:0%
ways to solve this problem
i'm<00:01:09.840><c> gonna</c><00:01:10.080><c> show</c><00:01:10.320><c> you</c><00:01:10.560><c> a</c><00:01:10.799><c> pretty</c><00:01:11.280><c> easy</c><00:01:11.680><c> and</c>

00:01:11.830 --> 00:01:11.840 align:start position:0%
i'm gonna show you a pretty easy and
 

00:01:11.840 --> 00:01:13.350 align:start position:0%
i'm gonna show you a pretty easy and
straightforward<00:01:12.560><c> way</c><00:01:12.720><c> to</c><00:01:12.880><c> do</c><00:01:13.040><c> it</c>

00:01:13.350 --> 00:01:13.360 align:start position:0%
straightforward way to do it
 

00:01:13.360 --> 00:01:15.350 align:start position:0%
straightforward way to do it
you<00:01:13.520><c> could</c><00:01:13.680><c> use</c><00:01:14.080><c> breadth</c><00:01:14.479><c> first</c><00:01:14.799><c> search</c>

00:01:15.350 --> 00:01:15.360 align:start position:0%
you could use breadth first search
 

00:01:15.360 --> 00:01:17.190 align:start position:0%
you could use breadth first search
basically<00:01:15.920><c> taking</c><00:01:16.240><c> the</c><00:01:16.560><c> tree</c><00:01:16.880><c> and</c><00:01:16.960><c> then</c>

00:01:17.190 --> 00:01:17.200 align:start position:0%
basically taking the tree and then
 

00:01:17.200 --> 00:01:19.190 align:start position:0%
basically taking the tree and then
serializing<00:01:17.920><c> it</c><00:01:18.080><c> level</c><00:01:18.479><c> by</c><00:01:18.720><c> level</c>

00:01:19.190 --> 00:01:19.200 align:start position:0%
serializing it level by level
 

00:01:19.200 --> 00:01:21.030 align:start position:0%
serializing it level by level
and<00:01:19.360><c> then</c><00:01:19.840><c> you</c><00:01:19.920><c> know</c><00:01:20.159><c> reading</c><00:01:20.560><c> through</c><00:01:20.880><c> the</c>

00:01:21.030 --> 00:01:21.040 align:start position:0%
and then you know reading through the
 

00:01:21.040 --> 00:01:22.390 align:start position:0%
and then you know reading through the
input<00:01:21.439><c> level</c><00:01:21.759><c> by</c><00:01:22.000><c> level</c>

00:01:22.390 --> 00:01:22.400 align:start position:0%
input level by level
 

00:01:22.400 --> 00:01:25.429 align:start position:0%
input level by level
etc<00:01:23.200><c> but</c><00:01:23.360><c> there's</c><00:01:23.680><c> also</c><00:01:24.400><c> a</c><00:01:24.560><c> way</c><00:01:24.720><c> to</c><00:01:24.880><c> do</c><00:01:25.040><c> it</c><00:01:25.119><c> with</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
etc but there's also a way to do it with
 

00:01:25.439 --> 00:01:26.870 align:start position:0%
etc but there's also a way to do it with
depth<00:01:25.759><c> first</c><00:01:26.080><c> search</c><00:01:26.400><c> using</c>

00:01:26.870 --> 00:01:26.880 align:start position:0%
depth first search using
 

00:01:26.880 --> 00:01:29.429 align:start position:0%
depth first search using
pre-order<00:01:27.680><c> traversal</c><00:01:28.400><c> and</c><00:01:28.640><c> i'll</c><00:01:29.119><c> show</c><00:01:29.280><c> you</c>

00:01:29.429 --> 00:01:29.439 align:start position:0%
pre-order traversal and i'll show you
 

00:01:29.439 --> 00:01:31.109 align:start position:0%
pre-order traversal and i'll show you
this<00:01:29.680><c> way</c><00:01:29.920><c> because</c><00:01:30.159><c> it</c><00:01:30.240><c> requires</c><00:01:30.799><c> a</c><00:01:30.880><c> little</c>

00:01:31.109 --> 00:01:31.119 align:start position:0%
this way because it requires a little
 

00:01:31.119 --> 00:01:32.390 align:start position:0%
this way because it requires a little
bit<00:01:31.360><c> less</c><00:01:31.759><c> code</c>

00:01:32.390 --> 00:01:32.400 align:start position:0%
bit less code
 

00:01:32.400 --> 00:01:33.830 align:start position:0%
bit less code
so<00:01:32.640><c> like</c><00:01:32.880><c> i</c><00:01:32.960><c> mentioned</c><00:01:33.360><c> we're</c><00:01:33.520><c> going</c><00:01:33.600><c> to</c><00:01:33.680><c> be</c>

00:01:33.830 --> 00:01:33.840 align:start position:0%
so like i mentioned we're going to be
 

00:01:33.840 --> 00:01:35.749 align:start position:0%
so like i mentioned we're going to be
doing<00:01:34.079><c> this</c><00:01:34.240><c> with</c><00:01:34.479><c> pre-order</c><00:01:35.040><c> traversal</c><00:01:35.600><c> so</c>

00:01:35.749 --> 00:01:35.759 align:start position:0%
doing this with pre-order traversal so
 

00:01:35.759 --> 00:01:36.950 align:start position:0%
doing this with pre-order traversal so
let's<00:01:36.000><c> just</c><00:01:36.320><c> see</c>

00:01:36.950 --> 00:01:36.960 align:start position:0%
let's just see
 

00:01:36.960 --> 00:01:38.870 align:start position:0%
let's just see
what<00:01:37.200><c> would</c><00:01:37.439><c> a</c><00:01:37.600><c> tree</c><00:01:38.000><c> like</c><00:01:38.320><c> this</c><00:01:38.560><c> if</c><00:01:38.720><c> we</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
what would a tree like this if we
 

00:01:38.880 --> 00:01:40.710 align:start position:0%
what would a tree like this if we
converted<00:01:39.360><c> it</c><00:01:39.439><c> into</c><00:01:39.680><c> pre-order</c><00:01:40.159><c> traversal</c>

00:01:40.710 --> 00:01:40.720 align:start position:0%
converted it into pre-order traversal
 

00:01:40.720 --> 00:01:42.710 align:start position:0%
converted it into pre-order traversal
into<00:01:40.960><c> the</c><00:01:41.119><c> form</c><00:01:41.439><c> of</c><00:01:41.600><c> a</c><00:01:41.840><c> string</c><00:01:42.240><c> what</c><00:01:42.399><c> would</c><00:01:42.560><c> it</c>

00:01:42.710 --> 00:01:42.720 align:start position:0%
into the form of a string what would it
 

00:01:42.720 --> 00:01:44.550 align:start position:0%
into the form of a string what would it
look<00:01:42.880><c> like</c><00:01:43.119><c> well</c><00:01:43.360><c> obviously</c><00:01:43.840><c> the</c><00:01:44.079><c> first</c>

00:01:44.550 --> 00:01:44.560 align:start position:0%
look like well obviously the first
 

00:01:44.560 --> 00:01:46.950 align:start position:0%
look like well obviously the first
value<00:01:45.280><c> is</c><00:01:45.600><c> one</c><00:01:45.840><c> so</c><00:01:46.000><c> we're</c><00:01:46.159><c> gonna</c><00:01:46.320><c> say</c><00:01:46.560><c> okay</c><00:01:46.799><c> the</c>

00:01:46.950 --> 00:01:46.960 align:start position:0%
value is one so we're gonna say okay the
 

00:01:46.960 --> 00:01:48.389 align:start position:0%
value is one so we're gonna say okay the
root<00:01:47.200><c> note</c><00:01:47.520><c> is</c><00:01:47.600><c> one</c><00:01:47.840><c> right</c><00:01:48.000><c> that's</c><00:01:48.240><c> what</c>

00:01:48.389 --> 00:01:48.399 align:start position:0%
root note is one right that's what
 

00:01:48.399 --> 00:01:49.910 align:start position:0%
root note is one right that's what
pre-order<00:01:48.880><c> means</c><00:01:49.119><c> we're</c><00:01:49.200><c> gonna</c><00:01:49.360><c> do</c><00:01:49.439><c> the</c><00:01:49.600><c> first</c>

00:01:49.910 --> 00:01:49.920 align:start position:0%
pre-order means we're gonna do the first
 

00:01:49.920 --> 00:01:50.389 align:start position:0%
pre-order means we're gonna do the first
node

00:01:50.389 --> 00:01:50.399 align:start position:0%
node
 

00:01:50.399 --> 00:01:52.870 align:start position:0%
node
then<00:01:50.640><c> we're</c><00:01:50.799><c> gonna</c><00:01:50.960><c> recursively</c><00:01:51.759><c> do</c><00:01:52.240><c> the</c><00:01:52.560><c> left</c>

00:01:52.870 --> 00:01:52.880 align:start position:0%
then we're gonna recursively do the left
 

00:01:52.880 --> 00:01:54.069 align:start position:0%
then we're gonna recursively do the left
subtree<00:01:53.439><c> with</c><00:01:53.600><c> pre-order</c>

00:01:54.069 --> 00:01:54.079 align:start position:0%
subtree with pre-order
 

00:01:54.079 --> 00:01:56.389 align:start position:0%
subtree with pre-order
traversal<00:01:54.799><c> and</c><00:01:54.960><c> then</c><00:01:55.200><c> similarly</c><00:01:55.840><c> after</c><00:01:56.240><c> that</c>

00:01:56.389 --> 00:01:56.399 align:start position:0%
traversal and then similarly after that
 

00:01:56.399 --> 00:01:58.069 align:start position:0%
traversal and then similarly after that
we're<00:01:56.640><c> going</c><00:01:56.719><c> to</c><00:01:56.799><c> do</c><00:01:56.960><c> the</c><00:01:57.200><c> right</c><00:01:57.439><c> subtree</c><00:01:58.000><c> in</c>

00:01:58.069 --> 00:01:58.079 align:start position:0%
we're going to do the right subtree in
 

00:01:58.079 --> 00:01:59.270 align:start position:0%
we're going to do the right subtree in
pre-order<00:01:58.560><c> traversal</c>

00:01:59.270 --> 00:01:59.280 align:start position:0%
pre-order traversal
 

00:01:59.280 --> 00:02:01.510 align:start position:0%
pre-order traversal
now<00:01:59.600><c> obviously</c><00:02:00.560><c> we</c><00:02:00.719><c> want</c><00:02:00.880><c> to</c><00:02:00.960><c> be</c><00:02:01.119><c> able</c><00:02:01.280><c> to</c>

00:02:01.510 --> 00:02:01.520 align:start position:0%
now obviously we want to be able to
 

00:02:01.520 --> 00:02:02.950 align:start position:0%
now obviously we want to be able to
separate<00:02:02.159><c> values</c>

00:02:02.950 --> 00:02:02.960 align:start position:0%
separate values
 

00:02:02.960 --> 00:02:04.630 align:start position:0%
separate values
so<00:02:03.200><c> we're</c><00:02:03.360><c> going</c><00:02:03.439><c> to</c><00:02:03.520><c> use</c><00:02:03.840><c> a</c><00:02:04.000><c> comma</c><00:02:04.399><c> as</c><00:02:04.560><c> a</c>

00:02:04.630 --> 00:02:04.640 align:start position:0%
so we're going to use a comma as a
 

00:02:04.640 --> 00:02:06.550 align:start position:0%
so we're going to use a comma as a
delimiter<00:02:05.200><c> but</c><00:02:05.360><c> you</c><00:02:05.439><c> could</c><00:02:05.600><c> use</c><00:02:05.840><c> a</c><00:02:06.000><c> space</c><00:02:06.399><c> if</c>

00:02:06.550 --> 00:02:06.560 align:start position:0%
delimiter but you could use a space if
 

00:02:06.560 --> 00:02:07.510 align:start position:0%
delimiter but you could use a space if
you<00:02:06.719><c> really</c><00:02:06.960><c> wanted</c><00:02:07.200><c> to</c>

00:02:07.510 --> 00:02:07.520 align:start position:0%
you really wanted to
 

00:02:07.520 --> 00:02:09.350 align:start position:0%
you really wanted to
or<00:02:07.759><c> use</c><00:02:07.920><c> something</c><00:02:08.319><c> else</c><00:02:08.560><c> but</c><00:02:08.720><c> i'll</c><00:02:08.879><c> just</c><00:02:09.119><c> use</c>

00:02:09.350 --> 00:02:09.360 align:start position:0%
or use something else but i'll just use
 

00:02:09.360 --> 00:02:11.670 align:start position:0%
or use something else but i'll just use
a<00:02:09.599><c> comma</c><00:02:10.160><c> so</c><00:02:10.319><c> now</c><00:02:10.560><c> let's</c><00:02:10.720><c> recursively</c><00:02:11.360><c> do</c><00:02:11.520><c> the</c>

00:02:11.670 --> 00:02:11.680 align:start position:0%
a comma so now let's recursively do the
 

00:02:11.680 --> 00:02:13.270 align:start position:0%
a comma so now let's recursively do the
same<00:02:11.920><c> thing</c><00:02:12.080><c> for</c><00:02:12.239><c> the</c><00:02:12.319><c> left</c><00:02:12.560><c> subtree</c><00:02:13.040><c> so</c>

00:02:13.270 --> 00:02:13.280 align:start position:0%
same thing for the left subtree so
 

00:02:13.280 --> 00:02:14.470 align:start position:0%
same thing for the left subtree so
obviously<00:02:13.760><c> we</c><00:02:13.840><c> have</c><00:02:14.000><c> a</c><00:02:14.160><c> two</c>

00:02:14.470 --> 00:02:14.480 align:start position:0%
obviously we have a two
 

00:02:14.480 --> 00:02:15.910 align:start position:0%
obviously we have a two
let's<00:02:14.720><c> add</c><00:02:14.879><c> that</c><00:02:15.120><c> too</c><00:02:15.360><c> because</c><00:02:15.520><c> we're</c><00:02:15.680><c> doing</c>

00:02:15.910 --> 00:02:15.920 align:start position:0%
let's add that too because we're doing
 

00:02:15.920 --> 00:02:18.550 align:start position:0%
let's add that too because we're doing
pre-order<00:02:16.720><c> and</c><00:02:16.959><c> now</c><00:02:17.360><c> let's</c><00:02:17.680><c> do</c><00:02:17.840><c> the</c><00:02:18.080><c> left</c><00:02:18.400><c> and</c>

00:02:18.550 --> 00:02:18.560 align:start position:0%
pre-order and now let's do the left and
 

00:02:18.560 --> 00:02:20.550 align:start position:0%
pre-order and now let's do the left and
right<00:02:18.879><c> subtree</c><00:02:19.440><c> of</c><00:02:19.599><c> two</c><00:02:19.840><c> so</c><00:02:20.000><c> first</c><00:02:20.239><c> let's</c><00:02:20.400><c> go</c>

00:02:20.550 --> 00:02:20.560 align:start position:0%
right subtree of two so first let's go
 

00:02:20.560 --> 00:02:21.750 align:start position:0%
right subtree of two so first let's go
to<00:02:20.720><c> the</c><00:02:20.879><c> left</c><00:02:21.120><c> subtree</c>

00:02:21.750 --> 00:02:21.760 align:start position:0%
to the left subtree
 

00:02:21.760 --> 00:02:24.229 align:start position:0%
to the left subtree
now<00:02:21.920><c> we're</c><00:02:22.080><c> gonna</c><00:02:22.319><c> see</c><00:02:22.879><c> null</c><00:02:23.520><c> right</c><00:02:23.760><c> this</c><00:02:24.000><c> is</c>

00:02:24.229 --> 00:02:24.239 align:start position:0%
now we're gonna see null right this is
 

00:02:24.239 --> 00:02:26.229 align:start position:0%
now we're gonna see null right this is
null<00:02:24.640><c> it's</c><00:02:24.879><c> empty</c><00:02:25.200><c> there's</c><00:02:25.440><c> nothing</c><00:02:25.840><c> there</c>

00:02:26.229 --> 00:02:26.239 align:start position:0%
null it's empty there's nothing there
 

00:02:26.239 --> 00:02:29.430 align:start position:0%
null it's empty there's nothing there
but<00:02:26.480><c> we</c><00:02:26.800><c> are</c><00:02:27.040><c> gonna</c><00:02:27.440><c> add</c><00:02:27.760><c> that</c><00:02:28.239><c> to</c><00:02:28.560><c> our</c><00:02:28.959><c> string</c>

00:02:29.430 --> 00:02:29.440 align:start position:0%
but we are gonna add that to our string
 

00:02:29.440 --> 00:02:31.509 align:start position:0%
but we are gonna add that to our string
just<00:02:29.680><c> to</c><00:02:29.920><c> indicate</c><00:02:30.400><c> to</c><00:02:30.560><c> us</c><00:02:30.720><c> that</c><00:02:31.040><c> this</c>

00:02:31.509 --> 00:02:31.519 align:start position:0%
just to indicate to us that this
 

00:02:31.519 --> 00:02:34.390 align:start position:0%
just to indicate to us that this
left<00:02:32.000><c> portion</c><00:02:32.640><c> of</c><00:02:33.200><c> the</c><00:02:33.360><c> subtree</c><00:02:33.920><c> cannot</c><00:02:34.239><c> be</c>

00:02:34.390 --> 00:02:34.400 align:start position:0%
left portion of the subtree cannot be
 

00:02:34.400 --> 00:02:35.589 align:start position:0%
left portion of the subtree cannot be
continued<00:02:34.959><c> right</c><00:02:35.200><c> and</c>

00:02:35.589 --> 00:02:35.599 align:start position:0%
continued right and
 

00:02:35.599 --> 00:02:37.350 align:start position:0%
continued right and
you<00:02:35.760><c> could</c><00:02:36.000><c> add</c><00:02:36.239><c> the</c><00:02:36.400><c> word</c><00:02:36.720><c> null</c><00:02:36.959><c> but</c><00:02:37.120><c> i'm</c><00:02:37.280><c> just</c>

00:02:37.350 --> 00:02:37.360 align:start position:0%
you could add the word null but i'm just
 

00:02:37.360 --> 00:02:39.030 align:start position:0%
you could add the word null but i'm just
going<00:02:37.440><c> to</c><00:02:37.519><c> use</c><00:02:37.760><c> a</c><00:02:37.920><c> capital</c><00:02:38.319><c> letter</c><00:02:38.720><c> n</c><00:02:38.879><c> to</c>

00:02:39.030 --> 00:02:39.040 align:start position:0%
going to use a capital letter n to
 

00:02:39.040 --> 00:02:40.470 align:start position:0%
going to use a capital letter n to
indicate<00:02:39.440><c> that</c><00:02:39.599><c> so</c><00:02:39.760><c> that's</c><00:02:40.000><c> going</c><00:02:40.080><c> to</c><00:02:40.160><c> be</c><00:02:40.319><c> our</c>

00:02:40.470 --> 00:02:40.480 align:start position:0%
indicate that so that's going to be our
 

00:02:40.480 --> 00:02:42.309 align:start position:0%
indicate that so that's going to be our
special<00:02:41.040><c> value</c><00:02:41.360><c> that</c><00:02:41.599><c> indicates</c><00:02:42.080><c> an</c>

00:02:42.309 --> 00:02:42.319 align:start position:0%
special value that indicates an
 

00:02:42.319 --> 00:02:45.589 align:start position:0%
special value that indicates an
empty<00:02:42.800><c> no</c><00:02:43.519><c> node</c><00:02:43.840><c> or</c><00:02:44.080><c> empty</c><00:02:44.480><c> tree</c><00:02:45.040><c> since</c><00:02:45.280><c> we</c>

00:02:45.589 --> 00:02:45.599 align:start position:0%
empty no node or empty tree since we
 

00:02:45.599 --> 00:02:47.750 align:start position:0%
empty no node or empty tree since we
finished<00:02:45.920><c> the</c><00:02:46.080><c> entire</c><00:02:46.480><c> left</c><00:02:46.800><c> subtree</c><00:02:47.360><c> and</c><00:02:47.440><c> we</c>

00:02:47.750 --> 00:02:47.760 align:start position:0%
finished the entire left subtree and we
 

00:02:47.760 --> 00:02:49.670 align:start position:0%
finished the entire left subtree and we
know<00:02:48.000><c> that</c><00:02:48.160><c> it</c><00:02:48.319><c> was</c><00:02:48.480><c> a</c><00:02:48.640><c> null</c><00:02:49.120><c> right</c><00:02:49.280><c> so</c><00:02:49.440><c> that's</c>

00:02:49.670 --> 00:02:49.680 align:start position:0%
know that it was a null right so that's
 

00:02:49.680 --> 00:02:51.270 align:start position:0%
know that it was a null right so that's
basically<00:02:50.080><c> our</c><00:02:50.160><c> base</c><00:02:50.400><c> case</c><00:02:50.640><c> that</c><00:02:50.800><c> tells</c><00:02:51.040><c> us</c><00:02:51.200><c> we</c>

00:02:51.270 --> 00:02:51.280 align:start position:0%
basically our base case that tells us we
 

00:02:51.280 --> 00:02:53.270 align:start position:0%
basically our base case that tells us we
can't<00:02:51.440><c> go</c><00:02:51.599><c> any</c><00:02:51.840><c> farther</c><00:02:52.160><c> here</c><00:02:52.480><c> so</c><00:02:52.720><c> now</c><00:02:52.959><c> what's</c>

00:02:53.270 --> 00:02:53.280 align:start position:0%
can't go any farther here so now what's
 

00:02:53.280 --> 00:02:55.750 align:start position:0%
can't go any farther here so now what's
our<00:02:53.599><c> right</c><00:02:53.920><c> subtree</c><00:02:54.480><c> for</c><00:02:54.720><c> two</c><00:02:54.959><c> it's</c><00:02:55.200><c> also</c>

00:02:55.750 --> 00:02:55.760 align:start position:0%
our right subtree for two it's also
 

00:02:55.760 --> 00:02:58.309 align:start position:0%
our right subtree for two it's also
null<00:02:56.000><c> so</c><00:02:56.160><c> we're</c><00:02:56.319><c> going</c><00:02:56.400><c> to</c><00:02:56.560><c> add</c><00:02:56.879><c> another</c><00:02:57.599><c> null</c>

00:02:58.309 --> 00:02:58.319 align:start position:0%
null so we're going to add another null
 

00:02:58.319 --> 00:03:00.309 align:start position:0%
null so we're going to add another null
and<00:02:58.560><c> see</c><00:02:58.800><c> how</c><00:02:58.959><c> we've</c><00:02:59.200><c> done</c><00:02:59.440><c> the</c><00:02:59.680><c> entire</c><00:03:00.080><c> left</c>

00:03:00.309 --> 00:03:00.319 align:start position:0%
and see how we've done the entire left
 

00:03:00.319 --> 00:03:01.430 align:start position:0%
and see how we've done the entire left
subtree<00:03:00.800><c> here</c>

00:03:01.430 --> 00:03:01.440 align:start position:0%
subtree here
 

00:03:01.440 --> 00:03:04.070 align:start position:0%
subtree here
so<00:03:01.680><c> now</c><00:03:01.920><c> we</c><00:03:02.080><c> can</c><00:03:02.319><c> start</c><00:03:02.640><c> going</c><00:03:02.959><c> down</c><00:03:03.519><c> the</c><00:03:03.760><c> right</c>

00:03:04.070 --> 00:03:04.080 align:start position:0%
so now we can start going down the right
 

00:03:04.080 --> 00:03:05.030 align:start position:0%
so now we can start going down the right
subtree

00:03:05.030 --> 00:03:05.040 align:start position:0%
subtree
 

00:03:05.040 --> 00:03:07.270 align:start position:0%
subtree
so<00:03:05.360><c> of</c><00:03:05.519><c> course</c><00:03:05.760><c> the</c><00:03:05.920><c> first</c><00:03:06.239><c> value</c><00:03:06.640><c> is</c><00:03:06.800><c> a</c><00:03:06.959><c> three</c>

00:03:07.270 --> 00:03:07.280 align:start position:0%
so of course the first value is a three
 

00:03:07.280 --> 00:03:09.030 align:start position:0%
so of course the first value is a three
so<00:03:07.519><c> let's</c><00:03:07.760><c> go</c><00:03:07.920><c> ahead</c><00:03:08.159><c> and</c><00:03:08.319><c> add</c><00:03:08.560><c> that</c>

00:03:09.030 --> 00:03:09.040 align:start position:0%
so let's go ahead and add that
 

00:03:09.040 --> 00:03:10.470 align:start position:0%
so let's go ahead and add that
and<00:03:09.360><c> similarly</c><00:03:09.920><c> we're</c><00:03:10.080><c> going</c><00:03:10.159><c> to</c><00:03:10.239><c> do</c>

00:03:10.470 --> 00:03:10.480 align:start position:0%
and similarly we're going to do
 

00:03:10.480 --> 00:03:12.149 align:start position:0%
and similarly we're going to do
pre-order<00:03:10.879><c> traversal</c><00:03:11.440><c> on</c><00:03:11.519><c> the</c><00:03:11.599><c> left</c><00:03:11.840><c> subtree</c>

00:03:12.149 --> 00:03:12.159 align:start position:0%
pre-order traversal on the left subtree
 

00:03:12.159 --> 00:03:13.350 align:start position:0%
pre-order traversal on the left subtree
now<00:03:12.319><c> you</c><00:03:12.480><c> can</c><00:03:12.560><c> basically</c><00:03:13.040><c> see</c>

00:03:13.350 --> 00:03:13.360 align:start position:0%
now you can basically see
 

00:03:13.360 --> 00:03:15.750 align:start position:0%
now you can basically see
this<00:03:14.000><c> is</c><00:03:14.400><c> the</c><00:03:14.560><c> exact</c><00:03:14.879><c> same</c><00:03:15.120><c> thing</c><00:03:15.280><c> that</c><00:03:15.360><c> we</c><00:03:15.519><c> did</c>

00:03:15.750 --> 00:03:15.760 align:start position:0%
this is the exact same thing that we did
 

00:03:15.760 --> 00:03:16.550 align:start position:0%
this is the exact same thing that we did
up<00:03:15.920><c> here</c><00:03:16.239><c> right</c>

00:03:16.550 --> 00:03:16.560 align:start position:0%
up here right
 

00:03:16.560 --> 00:03:19.910 align:start position:0%
up here right
2<00:03:17.040><c> was</c><00:03:17.280><c> a</c><00:03:17.440><c> node</c><00:03:17.840><c> and</c><00:03:18.000><c> two</c><00:03:18.480><c> had</c><00:03:18.720><c> no</c><00:03:19.040><c> children</c><00:03:19.519><c> so</c>

00:03:19.910 --> 00:03:19.920 align:start position:0%
2 was a node and two had no children so
 

00:03:19.920 --> 00:03:21.670 align:start position:0%
2 was a node and two had no children so
left<00:03:20.159><c> and</c><00:03:20.239><c> right</c><00:03:20.480><c> child</c><00:03:20.800><c> of</c><00:03:20.879><c> two</c><00:03:21.040><c> were</c><00:03:21.280><c> null</c>

00:03:21.670 --> 00:03:21.680 align:start position:0%
left and right child of two were null
 

00:03:21.680 --> 00:03:23.110 align:start position:0%
left and right child of two were null
that's<00:03:21.920><c> the</c><00:03:22.000><c> same</c><00:03:22.239><c> that's</c><00:03:22.560><c> true</c><00:03:22.800><c> for</c><00:03:22.959><c> this</c>

00:03:23.110 --> 00:03:23.120 align:start position:0%
that's the same that's true for this
 

00:03:23.120 --> 00:03:24.309 align:start position:0%
that's the same that's true for this
four<00:03:23.440><c> node</c><00:03:23.599><c> so</c><00:03:23.760><c> we're</c><00:03:23.840><c> gonna</c><00:03:24.000><c> add</c>

00:03:24.309 --> 00:03:24.319 align:start position:0%
four node so we're gonna add
 

00:03:24.319 --> 00:03:26.229 align:start position:0%
four node so we're gonna add
four<00:03:24.879><c> and</c><00:03:24.959><c> then</c><00:03:25.120><c> we're</c><00:03:25.280><c> gonna</c><00:03:25.440><c> add</c><00:03:25.599><c> the</c><00:03:25.840><c> two</c>

00:03:26.229 --> 00:03:26.239 align:start position:0%
four and then we're gonna add the two
 

00:03:26.239 --> 00:03:28.390 align:start position:0%
four and then we're gonna add the two
null<00:03:26.560><c> nodes</c><00:03:27.200><c> basically</c><00:03:27.680><c> indicating</c><00:03:28.080><c> that</c>

00:03:28.390 --> 00:03:28.400 align:start position:0%
null nodes basically indicating that
 

00:03:28.400 --> 00:03:28.869 align:start position:0%
null nodes basically indicating that
four

00:03:28.869 --> 00:03:28.879 align:start position:0%
four
 

00:03:28.879 --> 00:03:31.990 align:start position:0%
four
does<00:03:29.200><c> not</c><00:03:29.440><c> have</c><00:03:29.760><c> any</c><00:03:30.000><c> children</c><00:03:30.879><c> n</c>

00:03:31.990 --> 00:03:32.000 align:start position:0%
does not have any children n
 

00:03:32.000 --> 00:03:34.710 align:start position:0%
does not have any children n
n<00:03:32.560><c> so</c><00:03:32.799><c> now</c><00:03:33.280><c> let's</c><00:03:33.519><c> go</c><00:03:33.680><c> do</c><00:03:33.920><c> the</c><00:03:34.080><c> right</c><00:03:34.319><c> subtree</c>

00:03:34.710 --> 00:03:34.720 align:start position:0%
n so now let's go do the right subtree
 

00:03:34.720 --> 00:03:35.509 align:start position:0%
n so now let's go do the right subtree
basically<00:03:35.200><c> you</c>

00:03:35.509 --> 00:03:35.519 align:start position:0%
basically you
 

00:03:35.519 --> 00:03:36.710 align:start position:0%
basically you
can<00:03:35.680><c> probably</c><00:03:35.920><c> tell</c><00:03:36.080><c> what</c><00:03:36.239><c> i'm</c><00:03:36.400><c> going</c><00:03:36.480><c> to</c><00:03:36.560><c> do</c>

00:03:36.710 --> 00:03:36.720 align:start position:0%
can probably tell what i'm going to do
 

00:03:36.720 --> 00:03:38.149 align:start position:0%
can probably tell what i'm going to do
here<00:03:36.959><c> so</c><00:03:37.200><c> i'm</c><00:03:37.360><c> running</c><00:03:37.599><c> out</c><00:03:37.680><c> of</c><00:03:37.760><c> space</c><00:03:38.000><c> so</c>

00:03:38.149 --> 00:03:38.159 align:start position:0%
here so i'm running out of space so
 

00:03:38.159 --> 00:03:39.750 align:start position:0%
here so i'm running out of space so
let's<00:03:38.319><c> put</c><00:03:38.480><c> the</c><00:03:38.640><c> five</c><00:03:38.959><c> down</c><00:03:39.200><c> here</c>

00:03:39.750 --> 00:03:39.760 align:start position:0%
let's put the five down here
 

00:03:39.760 --> 00:03:43.589 align:start position:0%
let's put the five down here
comma<00:03:40.400><c> and</c><00:03:40.480><c> then</c><00:03:40.640><c> a</c><00:03:40.720><c> couple</c><00:03:41.680><c> empty</c><00:03:42.080><c> null</c><00:03:42.400><c> nodes</c>

00:03:43.589 --> 00:03:43.599 align:start position:0%
comma and then a couple empty null nodes
 

00:03:43.599 --> 00:03:45.350 align:start position:0%
comma and then a couple empty null nodes
and<00:03:44.000><c> now</c><00:03:44.239><c> we're</c><00:03:44.400><c> done</c><00:03:44.640><c> right</c><00:03:44.799><c> that</c><00:03:44.959><c> was</c><00:03:45.200><c> the</c>

00:03:45.350 --> 00:03:45.360 align:start position:0%
and now we're done right that was the
 

00:03:45.360 --> 00:03:46.630 align:start position:0%
and now we're done right that was the
entire<00:03:45.840><c> string</c>

00:03:46.630 --> 00:03:46.640 align:start position:0%
entire string
 

00:03:46.640 --> 00:03:49.030 align:start position:0%
entire string
so<00:03:46.879><c> now</c><00:03:47.120><c> i'm</c><00:03:47.200><c> going</c><00:03:47.360><c> to</c><00:03:47.519><c> get</c><00:03:47.840><c> rid</c><00:03:48.159><c> of</c><00:03:48.319><c> this</c><00:03:48.720><c> tree</c>

00:03:49.030 --> 00:03:49.040 align:start position:0%
so now i'm going to get rid of this tree
 

00:03:49.040 --> 00:03:49.910 align:start position:0%
so now i'm going to get rid of this tree
and<00:03:49.120><c> we're</c><00:03:49.360><c> going</c><00:03:49.440><c> to</c><00:03:49.599><c> see</c>

00:03:49.910 --> 00:03:49.920 align:start position:0%
and we're going to see
 

00:03:49.920 --> 00:03:52.390 align:start position:0%
and we're going to see
is<00:03:50.159><c> it</c><00:03:50.319><c> even</c><00:03:50.720><c> possible</c><00:03:51.360><c> for</c><00:03:51.599><c> us</c><00:03:51.760><c> to</c><00:03:51.920><c> be</c><00:03:52.080><c> able</c><00:03:52.239><c> to</c>

00:03:52.390 --> 00:03:52.400 align:start position:0%
is it even possible for us to be able to
 

00:03:52.400 --> 00:03:53.750 align:start position:0%
is it even possible for us to be able to
take<00:03:52.640><c> a</c><00:03:52.799><c> string</c><00:03:53.120><c> like</c><00:03:53.360><c> this</c>

00:03:53.750 --> 00:03:53.760 align:start position:0%
take a string like this
 

00:03:53.760 --> 00:03:55.670 align:start position:0%
take a string like this
and<00:03:54.000><c> know</c><00:03:54.319><c> exactly</c><00:03:54.879><c> which</c><00:03:55.120><c> one</c><00:03:55.360><c> is</c><00:03:55.439><c> going</c><00:03:55.599><c> to</c>

00:03:55.670 --> 00:03:55.680 align:start position:0%
and know exactly which one is going to
 

00:03:55.680 --> 00:03:56.869 align:start position:0%
and know exactly which one is going to
be<00:03:55.760><c> the</c><00:03:55.920><c> left</c><00:03:56.159><c> node</c><00:03:56.400><c> and</c><00:03:56.480><c> which</c><00:03:56.640><c> is</c><00:03:56.720><c> going</c><00:03:56.799><c> to</c>

00:03:56.869 --> 00:03:56.879 align:start position:0%
be the left node and which is going to
 

00:03:56.879 --> 00:03:58.949 align:start position:0%
be the left node and which is going to
be<00:03:57.040><c> the</c><00:03:57.120><c> right</c><00:03:57.360><c> etc</c><00:03:57.840><c> etc</c><00:03:58.319><c> right</c><00:03:58.560><c> well</c><00:03:58.720><c> we're</c>

00:03:58.949 --> 00:03:58.959 align:start position:0%
be the right etc etc right well we're
 

00:03:58.959 --> 00:04:00.070 align:start position:0%
be the right etc etc right well we're
obviously<00:03:59.360><c> going</c><00:03:59.519><c> to</c><00:03:59.599><c> use</c>

00:04:00.070 --> 00:04:00.080 align:start position:0%
obviously going to use
 

00:04:00.080 --> 00:04:02.550 align:start position:0%
obviously going to use
pre-order<00:04:00.720><c> traversal</c><00:04:01.360><c> on</c><00:04:01.680><c> this</c><00:04:02.000><c> string</c>

00:04:02.550 --> 00:04:02.560 align:start position:0%
pre-order traversal on this string
 

00:04:02.560 --> 00:04:03.350 align:start position:0%
pre-order traversal on this string
basically

00:04:03.350 --> 00:04:03.360 align:start position:0%
basically
 

00:04:03.360 --> 00:04:06.229 align:start position:0%
basically
to<00:04:03.519><c> create</c><00:04:04.159><c> a</c><00:04:04.400><c> new</c><00:04:04.720><c> tree</c><00:04:05.680><c> and</c><00:04:05.920><c> i'm</c><00:04:06.080><c> going</c><00:04:06.159><c> to</c>

00:04:06.229 --> 00:04:06.239 align:start position:0%
to create a new tree and i'm going to
 

00:04:06.239 --> 00:04:07.509 align:start position:0%
to create a new tree and i'm going to
show<00:04:06.400><c> you</c><00:04:06.560><c> that</c><00:04:06.799><c> it</c><00:04:07.040><c> is</c>

00:04:07.509 --> 00:04:07.519 align:start position:0%
show you that it is
 

00:04:07.519 --> 00:04:09.509 align:start position:0%
show you that it is
possible<00:04:08.080><c> that</c><00:04:08.319><c> this</c><00:04:08.560><c> string</c><00:04:08.959><c> is</c><00:04:09.040><c> actually</c>

00:04:09.509 --> 00:04:09.519 align:start position:0%
possible that this string is actually
 

00:04:09.519 --> 00:04:10.710 align:start position:0%
possible that this string is actually
not<00:04:09.840><c> ambiguous</c>

00:04:10.710 --> 00:04:10.720 align:start position:0%
not ambiguous
 

00:04:10.720 --> 00:04:12.309 align:start position:0%
not ambiguous
because<00:04:10.959><c> clearly</c><00:04:11.360><c> you</c><00:04:11.439><c> can</c><00:04:11.519><c> see</c><00:04:11.680><c> okay</c><00:04:12.000><c> one</c><00:04:12.239><c> is</c>

00:04:12.309 --> 00:04:12.319 align:start position:0%
because clearly you can see okay one is
 

00:04:12.319 --> 00:04:13.990 align:start position:0%
because clearly you can see okay one is
going<00:04:12.400><c> to</c><00:04:12.480><c> be</c><00:04:12.640><c> the</c><00:04:12.720><c> root</c><00:04:12.959><c> note</c><00:04:13.360><c> then</c><00:04:13.519><c> the</c><00:04:13.680><c> next</c>

00:04:13.990 --> 00:04:14.000 align:start position:0%
going to be the root note then the next
 

00:04:14.000 --> 00:04:16.629 align:start position:0%
going to be the root note then the next
value<00:04:14.400><c> must</c><00:04:14.640><c> be</c><00:04:14.879><c> the</c><00:04:15.120><c> left</c><00:04:15.680><c> if</c><00:04:15.840><c> this</c><00:04:16.079><c> were</c><00:04:16.400><c> a</c>

00:04:16.629 --> 00:04:16.639 align:start position:0%
value must be the left if this were a
 

00:04:16.639 --> 00:04:17.110 align:start position:0%
value must be the left if this were a
null

00:04:17.110 --> 00:04:17.120 align:start position:0%
null
 

00:04:17.120 --> 00:04:19.110 align:start position:0%
null
that<00:04:17.280><c> would</c><00:04:17.519><c> mean</c><00:04:17.680><c> that</c><00:04:18.000><c> one</c><00:04:18.320><c> has</c><00:04:18.560><c> no</c><00:04:18.799><c> left</c>

00:04:19.110 --> 00:04:19.120 align:start position:0%
that would mean that one has no left
 

00:04:19.120 --> 00:04:20.949 align:start position:0%
that would mean that one has no left
subtree<00:04:19.680><c> right</c><00:04:20.000><c> so</c><00:04:20.160><c> we</c><00:04:20.320><c> could</c><00:04:20.479><c> just</c><00:04:20.639><c> put</c>

00:04:20.949 --> 00:04:20.959 align:start position:0%
subtree right so we could just put
 

00:04:20.959 --> 00:04:22.870 align:start position:0%
subtree right so we could just put
null<00:04:21.199><c> for</c><00:04:21.359><c> its</c><00:04:21.600><c> left</c><00:04:21.840><c> subtree</c><00:04:22.320><c> but</c><00:04:22.560><c> clearly</c>

00:04:22.870 --> 00:04:22.880 align:start position:0%
null for its left subtree but clearly
 

00:04:22.880 --> 00:04:24.230 align:start position:0%
null for its left subtree but clearly
this<00:04:23.120><c> is</c><00:04:23.360><c> not</c><00:04:23.759><c> null</c>

00:04:24.230 --> 00:04:24.240 align:start position:0%
this is not null
 

00:04:24.240 --> 00:04:26.950 align:start position:0%
this is not null
so<00:04:24.560><c> that</c><00:04:24.800><c> means</c><00:04:25.440><c> two</c><00:04:25.840><c> is</c><00:04:25.919><c> the</c><00:04:26.080><c> left</c><00:04:26.320><c> child</c><00:04:26.720><c> of</c>

00:04:26.950 --> 00:04:26.960 align:start position:0%
so that means two is the left child of
 

00:04:26.960 --> 00:04:27.590 align:start position:0%
so that means two is the left child of
one

00:04:27.590 --> 00:04:27.600 align:start position:0%
one
 

00:04:27.600 --> 00:04:30.469 align:start position:0%
one
next<00:04:28.000><c> we</c><00:04:28.160><c> see</c><00:04:28.479><c> okay</c><00:04:29.199><c> let's</c><00:04:29.520><c> create</c><00:04:29.919><c> the</c>

00:04:30.469 --> 00:04:30.479 align:start position:0%
next we see okay let's create the
 

00:04:30.479 --> 00:04:31.430 align:start position:0%
next we see okay let's create the
subtree<00:04:31.040><c> for</c>

00:04:31.430 --> 00:04:31.440 align:start position:0%
subtree for
 

00:04:31.440 --> 00:04:34.070 align:start position:0%
subtree for
two<00:04:31.759><c> right</c><00:04:32.080><c> well</c><00:04:32.479><c> it's</c><00:04:32.720><c> left</c><00:04:33.040><c> child</c><00:04:33.360><c> is</c><00:04:33.600><c> null</c>

00:04:34.070 --> 00:04:34.080 align:start position:0%
two right well it's left child is null
 

00:04:34.080 --> 00:04:36.070 align:start position:0%
two right well it's left child is null
and<00:04:34.320><c> next</c><00:04:34.720><c> it's</c><00:04:34.960><c> right</c><00:04:35.199><c> child</c><00:04:35.520><c> is</c><00:04:35.680><c> also</c>

00:04:36.070 --> 00:04:36.080 align:start position:0%
and next it's right child is also
 

00:04:36.080 --> 00:04:38.150 align:start position:0%
and next it's right child is also
null<00:04:36.479><c> so</c><00:04:36.639><c> therefore</c><00:04:37.440><c> two</c><00:04:37.759><c> is</c><00:04:37.840><c> not</c><00:04:38.000><c> going</c><00:04:38.080><c> to</c>

00:04:38.150 --> 00:04:38.160 align:start position:0%
null so therefore two is not going to
 

00:04:38.160 --> 00:04:39.350 align:start position:0%
null so therefore two is not going to
have<00:04:38.320><c> anything</c><00:04:38.720><c> right</c><00:04:38.960><c> so</c>

00:04:39.350 --> 00:04:39.360 align:start position:0%
have anything right so
 

00:04:39.360 --> 00:04:41.270 align:start position:0%
have anything right so
that's<00:04:39.600><c> basically</c><00:04:40.080><c> the</c><00:04:40.320><c> idea</c><00:04:40.720><c> so</c><00:04:40.880><c> now</c><00:04:41.040><c> let's</c>

00:04:41.270 --> 00:04:41.280 align:start position:0%
that's basically the idea so now let's
 

00:04:41.280 --> 00:04:42.950 align:start position:0%
that's basically the idea so now let's
actually<00:04:41.520><c> do</c><00:04:41.759><c> it</c><00:04:42.080><c> okay</c><00:04:42.320><c> since</c><00:04:42.560><c> we</c><00:04:42.639><c> know</c><00:04:42.800><c> we</c>

00:04:42.950 --> 00:04:42.960 align:start position:0%
actually do it okay since we know we
 

00:04:42.960 --> 00:04:44.469 align:start position:0%
actually do it okay since we know we
created<00:04:43.360><c> the</c><00:04:43.520><c> string</c><00:04:43.840><c> with</c><00:04:44.000><c> pre-order</c>

00:04:44.469 --> 00:04:44.479 align:start position:0%
created the string with pre-order
 

00:04:44.479 --> 00:04:45.990 align:start position:0%
created the string with pre-order
traversal<00:04:44.960><c> that's</c><00:04:45.120><c> basically</c><00:04:45.600><c> the</c><00:04:45.680><c> idea</c>

00:04:45.990 --> 00:04:46.000 align:start position:0%
traversal that's basically the idea
 

00:04:46.000 --> 00:04:46.870 align:start position:0%
traversal that's basically the idea
we're<00:04:46.160><c> going</c><00:04:46.240><c> to</c><00:04:46.320><c> use</c><00:04:46.479><c> so</c><00:04:46.639><c> we're</c><00:04:46.800><c> going</c><00:04:46.800><c> to</c>

00:04:46.870 --> 00:04:46.880 align:start position:0%
we're going to use so we're going to
 

00:04:46.880 --> 00:04:47.990 align:start position:0%
we're going to use so we're going to
have<00:04:47.040><c> a</c><00:04:47.280><c> pointer</c>

00:04:47.990 --> 00:04:48.000 align:start position:0%
have a pointer
 

00:04:48.000 --> 00:04:49.430 align:start position:0%
have a pointer
we'll<00:04:48.240><c> call</c><00:04:48.479><c> it</c><00:04:48.639><c> i</c><00:04:48.960><c> that's</c><00:04:49.199><c> going</c><00:04:49.280><c> to</c>

00:04:49.430 --> 00:04:49.440 align:start position:0%
we'll call it i that's going to
 

00:04:49.440 --> 00:04:51.590 align:start position:0%
we'll call it i that's going to
basically<00:04:49.919><c> tell</c><00:04:50.080><c> us</c><00:04:50.400><c> what</c><00:04:50.720><c> index</c>

00:04:51.590 --> 00:04:51.600 align:start position:0%
basically tell us what index
 

00:04:51.600 --> 00:04:53.670 align:start position:0%
basically tell us what index
of<00:04:51.840><c> this</c><00:04:52.320><c> string</c><00:04:52.639><c> that</c><00:04:52.800><c> we're</c><00:04:52.960><c> at</c><00:04:53.120><c> well</c><00:04:53.440><c> in</c>

00:04:53.670 --> 00:04:53.680 align:start position:0%
of this string that we're at well in
 

00:04:53.680 --> 00:04:54.870 align:start position:0%
of this string that we're at well in
reality<00:04:54.160><c> what</c><00:04:54.240><c> we're</c><00:04:54.400><c> going</c><00:04:54.479><c> to</c><00:04:54.560><c> do</c><00:04:54.720><c> we're</c>

00:04:54.870 --> 00:04:54.880 align:start position:0%
reality what we're going to do we're
 

00:04:54.880 --> 00:04:55.990 align:start position:0%
reality what we're going to do we're
actually<00:04:55.199><c> going</c><00:04:55.280><c> to</c><00:04:55.360><c> take</c><00:04:55.520><c> this</c><00:04:55.759><c> string</c>

00:04:55.990 --> 00:04:56.000 align:start position:0%
actually going to take this string
 

00:04:56.000 --> 00:04:58.629 align:start position:0%
actually going to take this string
and<00:04:56.080><c> then</c><00:04:56.400><c> split</c><00:04:56.800><c> it</c><00:04:57.040><c> based</c><00:04:57.360><c> on</c><00:04:57.759><c> the</c><00:04:57.919><c> delimiter</c>

00:04:58.629 --> 00:04:58.639 align:start position:0%
and then split it based on the delimiter
 

00:04:58.639 --> 00:05:00.230 align:start position:0%
and then split it based on the delimiter
comma<00:04:59.040><c> so</c><00:04:59.199><c> then</c><00:04:59.440><c> it's</c><00:04:59.600><c> actually</c><00:04:59.840><c> going</c><00:04:59.919><c> to</c><00:05:00.000><c> be</c>

00:05:00.230 --> 00:05:00.240 align:start position:0%
comma so then it's actually going to be
 

00:05:00.240 --> 00:05:02.230 align:start position:0%
comma so then it's actually going to be
an<00:05:00.400><c> array</c><00:05:00.960><c> but</c><00:05:01.199><c> i'm</c><00:05:01.280><c> not</c><00:05:01.440><c> going</c><00:05:01.600><c> to</c><00:05:01.759><c> redraw</c>

00:05:02.230 --> 00:05:02.240 align:start position:0%
an array but i'm not going to redraw
 

00:05:02.240 --> 00:05:03.350 align:start position:0%
an array but i'm not going to redraw
that<00:05:02.479><c> just</c><00:05:02.720><c> because</c>

00:05:03.350 --> 00:05:03.360 align:start position:0%
that just because
 

00:05:03.360 --> 00:05:04.550 align:start position:0%
that just because
it's<00:05:03.520><c> pretty</c><00:05:03.680><c> straightforward</c><00:05:04.240><c> what</c><00:05:04.400><c> we're</c>

00:05:04.550 --> 00:05:04.560 align:start position:0%
it's pretty straightforward what we're
 

00:05:04.560 --> 00:05:06.390 align:start position:0%
it's pretty straightforward what we're
going<00:05:04.639><c> to</c><00:05:04.720><c> be</c><00:05:04.880><c> doing</c><00:05:05.039><c> with</c><00:05:05.199><c> this</c><00:05:05.440><c> string</c>

00:05:06.390 --> 00:05:06.400 align:start position:0%
going to be doing with this string
 

00:05:06.400 --> 00:05:09.430 align:start position:0%
going to be doing with this string
so<00:05:06.639><c> first</c><00:05:06.960><c> one</c><00:05:07.600><c> is</c><00:05:07.919><c> non-null</c><00:05:08.720><c> so</c><00:05:08.960><c> it's</c><00:05:09.120><c> a</c><00:05:09.199><c> one</c>

00:05:09.430 --> 00:05:09.440 align:start position:0%
so first one is non-null so it's a one
 

00:05:09.440 --> 00:05:09.990 align:start position:0%
so first one is non-null so it's a one
right<00:05:09.600><c> so</c><00:05:09.759><c> we</c>

00:05:09.990 --> 00:05:10.000 align:start position:0%
right so we
 

00:05:10.000 --> 00:05:12.150 align:start position:0%
right so we
are<00:05:10.080><c> going</c><00:05:10.240><c> to</c><00:05:10.320><c> create</c><00:05:10.800><c> a</c><00:05:10.960><c> root</c><00:05:11.280><c> node</c><00:05:11.759><c> with</c><00:05:12.000><c> the</c>

00:05:12.150 --> 00:05:12.160 align:start position:0%
are going to create a root node with the
 

00:05:12.160 --> 00:05:13.590 align:start position:0%
are going to create a root node with the
value<00:05:12.960><c> one</c>

00:05:13.590 --> 00:05:13.600 align:start position:0%
value one
 

00:05:13.600 --> 00:05:15.510 align:start position:0%
value one
now<00:05:14.000><c> let's</c><00:05:14.240><c> create</c><00:05:14.560><c> the</c><00:05:14.800><c> left</c><00:05:15.039><c> sub</c><00:05:15.280><c> tree</c>

00:05:15.510 --> 00:05:15.520 align:start position:0%
now let's create the left sub tree
 

00:05:15.520 --> 00:05:17.029 align:start position:0%
now let's create the left sub tree
similar<00:05:15.919><c> to</c><00:05:16.080><c> pre-order</c><00:05:16.479><c> traversal</c><00:05:16.880><c> right</c>

00:05:17.029 --> 00:05:17.039 align:start position:0%
similar to pre-order traversal right
 

00:05:17.039 --> 00:05:18.469 align:start position:0%
similar to pre-order traversal right
we're<00:05:17.199><c> creating</c><00:05:17.600><c> the</c><00:05:17.759><c> node</c><00:05:18.000><c> now</c><00:05:18.240><c> then</c><00:05:18.400><c> we're</c>

00:05:18.469 --> 00:05:18.479 align:start position:0%
we're creating the node now then we're
 

00:05:18.479 --> 00:05:19.670 align:start position:0%
we're creating the node now then we're
gonna<00:05:18.639><c> do</c><00:05:18.720><c> the</c><00:05:18.880><c> left</c><00:05:19.039><c> subtree</c><00:05:19.360><c> then</c><00:05:19.520><c> we're</c>

00:05:19.670 --> 00:05:19.680 align:start position:0%
gonna do the left subtree then we're
 

00:05:19.680 --> 00:05:21.350 align:start position:0%
gonna do the left subtree then we're
gonna<00:05:19.840><c> do</c><00:05:19.919><c> the</c><00:05:20.080><c> right</c><00:05:20.320><c> subtree</c><00:05:20.880><c> the</c><00:05:21.039><c> question</c>

00:05:21.350 --> 00:05:21.360 align:start position:0%
gonna do the right subtree the question
 

00:05:21.360 --> 00:05:22.390 align:start position:0%
gonna do the right subtree the question
you<00:05:21.520><c> might</c><00:05:21.759><c> have</c><00:05:22.080><c> is</c>

00:05:22.390 --> 00:05:22.400 align:start position:0%
you might have is
 

00:05:22.400 --> 00:05:25.350 align:start position:0%
you might have is
how<00:05:22.560><c> do</c><00:05:22.720><c> we</c><00:05:23.120><c> know</c><00:05:23.840><c> when</c><00:05:24.080><c> the</c><00:05:24.400><c> left</c><00:05:24.639><c> sub</c><00:05:24.960><c> tree</c>

00:05:25.350 --> 00:05:25.360 align:start position:0%
how do we know when the left sub tree
 

00:05:25.360 --> 00:05:26.070 align:start position:0%
how do we know when the left sub tree
stops

00:05:26.070 --> 00:05:26.080 align:start position:0%
stops
 

00:05:26.080 --> 00:05:29.189 align:start position:0%
stops
and<00:05:26.320><c> when</c><00:05:26.560><c> the</c><00:05:26.880><c> right</c><00:05:27.199><c> sub</c><00:05:28.000><c> sub</c><00:05:28.240><c> tree</c><00:05:28.639><c> starts</c>

00:05:29.189 --> 00:05:29.199 align:start position:0%
and when the right sub sub tree starts
 

00:05:29.199 --> 00:05:30.790 align:start position:0%
and when the right sub sub tree starts
i'm<00:05:29.360><c> going</c><00:05:29.440><c> to</c><00:05:29.600><c> show</c><00:05:29.759><c> you</c><00:05:30.000><c> it's</c><00:05:30.240><c> actually</c>

00:05:30.790 --> 00:05:30.800 align:start position:0%
i'm going to show you it's actually
 

00:05:30.800 --> 00:05:32.469 align:start position:0%
i'm going to show you it's actually
simpler<00:05:31.280><c> than</c><00:05:31.440><c> you</c><00:05:31.600><c> might</c><00:05:31.840><c> think</c>

00:05:32.469 --> 00:05:32.479 align:start position:0%
simpler than you might think
 

00:05:32.479 --> 00:05:34.629 align:start position:0%
simpler than you might think
so<00:05:32.639><c> we</c><00:05:32.800><c> know</c><00:05:32.960><c> that</c><00:05:33.120><c> the</c><00:05:33.440><c> first</c><00:05:33.840><c> value</c><00:05:34.240><c> here</c><00:05:34.479><c> is</c>

00:05:34.629 --> 00:05:34.639 align:start position:0%
so we know that the first value here is
 

00:05:34.639 --> 00:05:36.230 align:start position:0%
so we know that the first value here is
going<00:05:34.800><c> to</c><00:05:34.960><c> be</c><00:05:35.440><c> the</c><00:05:35.759><c> left</c>

00:05:36.230 --> 00:05:36.240 align:start position:0%
going to be the left
 

00:05:36.240 --> 00:05:38.710 align:start position:0%
going to be the left
child<00:05:36.800><c> if</c><00:05:36.960><c> this</c><00:05:37.199><c> were</c><00:05:37.440><c> null</c><00:05:37.919><c> we</c><00:05:38.080><c> would</c><00:05:38.320><c> put</c><00:05:38.560><c> a</c>

00:05:38.710 --> 00:05:38.720 align:start position:0%
child if this were null we would put a
 

00:05:38.720 --> 00:05:40.870 align:start position:0%
child if this were null we would put a
null<00:05:39.039><c> here</c><00:05:39.280><c> but</c><00:05:39.360><c> it's</c><00:05:39.680><c> not</c><00:05:39.919><c> null</c><00:05:40.240><c> it's</c><00:05:40.479><c> two</c><00:05:40.720><c> so</c>

00:05:40.870 --> 00:05:40.880 align:start position:0%
null here but it's not null it's two so
 

00:05:40.880 --> 00:05:42.150 align:start position:0%
null here but it's not null it's two so
we<00:05:41.120><c> are</c><00:05:41.360><c> creating</c><00:05:41.919><c> a</c>

00:05:42.150 --> 00:05:42.160 align:start position:0%
we are creating a
 

00:05:42.160 --> 00:05:44.790 align:start position:0%
we are creating a
two<00:05:42.400><c> node</c><00:05:42.880><c> over</c><00:05:43.120><c> here</c><00:05:43.840><c> and</c><00:05:44.080><c> once</c><00:05:44.320><c> again</c>

00:05:44.790 --> 00:05:44.800 align:start position:0%
two node over here and once again
 

00:05:44.800 --> 00:05:46.390 align:start position:0%
two node over here and once again
recursively<00:05:45.600><c> creating</c>

00:05:46.390 --> 00:05:46.400 align:start position:0%
recursively creating
 

00:05:46.400 --> 00:05:48.790 align:start position:0%
recursively creating
this<00:05:46.639><c> subtree</c><00:05:47.120><c> so</c><00:05:47.360><c> start</c><00:05:47.600><c> with</c><00:05:47.759><c> the</c><00:05:47.919><c> left</c><00:05:48.639><c> so</c>

00:05:48.790 --> 00:05:48.800 align:start position:0%
this subtree so start with the left so
 

00:05:48.800 --> 00:05:50.390 align:start position:0%
this subtree so start with the left so
this<00:05:49.120><c> first</c><00:05:49.440><c> value</c><00:05:49.759><c> is</c><00:05:49.840><c> going</c><00:05:49.919><c> to</c><00:05:50.000><c> be</c><00:05:50.160><c> the</c><00:05:50.240><c> left</c>

00:05:50.390 --> 00:05:50.400 align:start position:0%
this first value is going to be the left
 

00:05:50.400 --> 00:05:51.350 align:start position:0%
this first value is going to be the left
subtree<00:05:50.880><c> it's</c><00:05:51.039><c> a</c>

00:05:51.350 --> 00:05:51.360 align:start position:0%
subtree it's a
 

00:05:51.360 --> 00:05:54.390 align:start position:0%
subtree it's a
null<00:05:51.919><c> right</c><00:05:52.479><c> so</c><00:05:52.960><c> since</c><00:05:53.280><c> it's</c><00:05:53.440><c> a</c><00:05:53.759><c> null</c><00:05:54.240><c> that</c>

00:05:54.390 --> 00:05:54.400 align:start position:0%
null right so since it's a null that
 

00:05:54.400 --> 00:05:56.309 align:start position:0%
null right so since it's a null that
means<00:05:54.720><c> we</c><00:05:54.960><c> can't</c><00:05:55.280><c> continue</c>

00:05:56.309 --> 00:05:56.319 align:start position:0%
means we can't continue
 

00:05:56.319 --> 00:05:59.189 align:start position:0%
means we can't continue
this<00:05:56.880><c> subtree</c><00:05:57.520><c> anymore</c><00:05:58.160><c> right</c><00:05:58.400><c> so</c><00:05:58.560><c> that</c><00:05:58.800><c> means</c>

00:05:59.189 --> 00:05:59.199 align:start position:0%
this subtree anymore right so that means
 

00:05:59.199 --> 00:06:00.230 align:start position:0%
this subtree anymore right so that means
whatever<00:05:59.680><c> value</c>

00:06:00.230 --> 00:06:00.240 align:start position:0%
whatever value
 

00:06:00.240 --> 00:06:02.390 align:start position:0%
whatever value
so<00:06:00.400><c> we're</c><00:06:00.880><c> done</c><00:06:01.120><c> with</c><00:06:01.280><c> this</c><00:06:01.520><c> first</c><00:06:01.840><c> null</c><00:06:02.240><c> now</c>

00:06:02.390 --> 00:06:02.400 align:start position:0%
so we're done with this first null now
 

00:06:02.400 --> 00:06:03.670 align:start position:0%
so we're done with this first null now
whatever<00:06:02.800><c> value</c><00:06:03.199><c> comes</c>

00:06:03.670 --> 00:06:03.680 align:start position:0%
whatever value comes
 

00:06:03.680 --> 00:06:05.990 align:start position:0%
whatever value comes
next<00:06:04.000><c> here</c><00:06:04.240><c> is</c><00:06:04.479><c> going</c><00:06:04.639><c> to</c><00:06:04.800><c> be</c><00:06:04.960><c> the</c><00:06:05.120><c> value</c><00:06:05.840><c> in</c>

00:06:05.990 --> 00:06:06.000 align:start position:0%
next here is going to be the value in
 

00:06:06.000 --> 00:06:07.270 align:start position:0%
next here is going to be the value in
the<00:06:06.319><c> right</c><00:06:06.639><c> subtree</c>

00:06:07.270 --> 00:06:07.280 align:start position:0%
the right subtree
 

00:06:07.280 --> 00:06:10.390 align:start position:0%
the right subtree
of<00:06:07.520><c> this</c><00:06:07.919><c> two</c><00:06:08.160><c> node</c><00:06:08.720><c> it</c><00:06:08.880><c> happens</c><00:06:09.199><c> to</c><00:06:09.600><c> also</c><00:06:10.080><c> be</c>

00:06:10.390 --> 00:06:10.400 align:start position:0%
of this two node it happens to also be
 

00:06:10.400 --> 00:06:12.230 align:start position:0%
of this two node it happens to also be
null<00:06:10.720><c> but</c><00:06:10.880><c> maybe</c><00:06:11.280><c> if</c><00:06:11.520><c> it</c><00:06:11.600><c> wasn't</c><00:06:11.919><c> unknown</c>

00:06:12.230 --> 00:06:12.240 align:start position:0%
null but maybe if it wasn't unknown
 

00:06:12.240 --> 00:06:13.830 align:start position:0%
null but maybe if it wasn't unknown
maybe<00:06:12.479><c> it</c><00:06:12.560><c> could</c><00:06:12.720><c> have</c><00:06:12.800><c> been</c><00:06:12.960><c> a</c><00:06:13.120><c> three</c><00:06:13.440><c> right</c>

00:06:13.830 --> 00:06:13.840 align:start position:0%
maybe it could have been a three right
 

00:06:13.840 --> 00:06:15.909 align:start position:0%
maybe it could have been a three right
that's<00:06:14.160><c> when</c><00:06:14.319><c> we</c><00:06:14.479><c> would</c><00:06:14.639><c> put</c><00:06:14.960><c> three</c><00:06:15.280><c> over</c><00:06:15.440><c> here</c>

00:06:15.909 --> 00:06:15.919 align:start position:0%
that's when we would put three over here
 

00:06:15.919 --> 00:06:18.469 align:start position:0%
that's when we would put three over here
but<00:06:16.400><c> clearly</c><00:06:16.880><c> it's</c><00:06:17.120><c> not</c><00:06:17.360><c> it's</c><00:06:17.600><c> a</c><00:06:17.759><c> null</c><00:06:18.000><c> so</c><00:06:18.240><c> that</c>

00:06:18.469 --> 00:06:18.479 align:start position:0%
but clearly it's not it's a null so that
 

00:06:18.479 --> 00:06:18.950 align:start position:0%
but clearly it's not it's a null so that
means

00:06:18.950 --> 00:06:18.960 align:start position:0%
means
 

00:06:18.960 --> 00:06:22.070 align:start position:0%
means
we<00:06:19.120><c> can</c><00:06:19.360><c> actually</c><00:06:20.160><c> stop</c><00:06:20.880><c> this</c><00:06:21.199><c> subtree</c>

00:06:22.070 --> 00:06:22.080 align:start position:0%
we can actually stop this subtree
 

00:06:22.080 --> 00:06:24.629 align:start position:0%
we can actually stop this subtree
as<00:06:22.319><c> well</c><00:06:22.800><c> so</c><00:06:23.280><c> since</c><00:06:23.600><c> both</c><00:06:23.919><c> of</c><00:06:24.000><c> the</c><00:06:24.160><c> children</c>

00:06:24.629 --> 00:06:24.639 align:start position:0%
as well so since both of the children
 

00:06:24.639 --> 00:06:25.350 align:start position:0%
as well so since both of the children
were<00:06:24.960><c> null</c>

00:06:25.350 --> 00:06:25.360 align:start position:0%
were null
 

00:06:25.360 --> 00:06:27.830 align:start position:0%
were null
that<00:06:25.520><c> means</c><00:06:25.759><c> we're</c><00:06:26.000><c> actually</c><00:06:26.479><c> done</c><00:06:26.880><c> creating</c>

00:06:27.830 --> 00:06:27.840 align:start position:0%
that means we're actually done creating
 

00:06:27.840 --> 00:06:29.990 align:start position:0%
that means we're actually done creating
this<00:06:28.240><c> entire</c><00:06:28.960><c> subtree</c>

00:06:29.990 --> 00:06:30.000 align:start position:0%
this entire subtree
 

00:06:30.000 --> 00:06:32.790 align:start position:0%
this entire subtree
we<00:06:30.240><c> reached</c><00:06:30.720><c> our</c><00:06:31.120><c> base</c><00:06:31.520><c> case</c><00:06:31.840><c> basically</c><00:06:32.639><c> so</c>

00:06:32.790 --> 00:06:32.800 align:start position:0%
we reached our base case basically so
 

00:06:32.800 --> 00:06:33.590 align:start position:0%
we reached our base case basically so
we're<00:06:32.960><c> done</c><00:06:33.199><c> with</c><00:06:33.280><c> this</c>

00:06:33.590 --> 00:06:33.600 align:start position:0%
we're done with this
 

00:06:33.600 --> 00:06:35.749 align:start position:0%
we're done with this
now<00:06:33.759><c> the</c><00:06:34.160><c> next</c><00:06:34.479><c> value</c><00:06:34.800><c> that</c><00:06:35.039><c> comes</c><00:06:35.440><c> in</c><00:06:35.600><c> our</c>

00:06:35.749 --> 00:06:35.759 align:start position:0%
now the next value that comes in our
 

00:06:35.759 --> 00:06:38.150 align:start position:0%
now the next value that comes in our
string<00:06:36.160><c> is</c><00:06:36.400><c> clearly</c><00:06:36.880><c> going</c><00:06:37.039><c> to</c><00:06:37.199><c> be</c><00:06:37.360><c> the</c><00:06:37.759><c> right</c>

00:06:38.150 --> 00:06:38.160 align:start position:0%
string is clearly going to be the right
 

00:06:38.160 --> 00:06:41.270 align:start position:0%
string is clearly going to be the right
child<00:06:38.880><c> of</c><00:06:39.440><c> one</c><00:06:39.919><c> so</c><00:06:40.080><c> the</c><00:06:40.319><c> three</c><00:06:40.800><c> is</c><00:06:40.960><c> gonna</c><00:06:41.120><c> be</c>

00:06:41.270 --> 00:06:41.280 align:start position:0%
child of one so the three is gonna be
 

00:06:41.280 --> 00:06:41.990 align:start position:0%
child of one so the three is gonna be
the<00:06:41.360><c> right</c><00:06:41.600><c> child</c>

00:06:41.990 --> 00:06:42.000 align:start position:0%
the right child
 

00:06:42.000 --> 00:06:44.629 align:start position:0%
the right child
here<00:06:42.720><c> and</c><00:06:43.280><c> now</c><00:06:43.840><c> of</c><00:06:43.919><c> course</c><00:06:44.240><c> pre-order</c>

00:06:44.629 --> 00:06:44.639 align:start position:0%
here and now of course pre-order
 

00:06:44.639 --> 00:06:46.070 align:start position:0%
here and now of course pre-order
traversal<00:06:45.039><c> we're</c><00:06:45.199><c> gonna</c><00:06:45.360><c> fill</c><00:06:45.600><c> in</c><00:06:45.759><c> the</c><00:06:45.840><c> left</c>

00:06:46.070 --> 00:06:46.080 align:start position:0%
traversal we're gonna fill in the left
 

00:06:46.080 --> 00:06:47.670 align:start position:0%
traversal we're gonna fill in the left
subtree<00:06:46.479><c> of</c><00:06:46.639><c> three</c><00:06:46.960><c> so</c><00:06:47.120><c> what's</c><00:06:47.360><c> the</c><00:06:47.440><c> next</c>

00:06:47.670 --> 00:06:47.680 align:start position:0%
subtree of three so what's the next
 

00:06:47.680 --> 00:06:48.070 align:start position:0%
subtree of three so what's the next
value

00:06:48.070 --> 00:06:48.080 align:start position:0%
value
 

00:06:48.080 --> 00:06:50.870 align:start position:0%
value
in<00:06:48.160><c> our</c><00:06:48.319><c> string</c><00:06:48.639><c> it's</c><00:06:48.800><c> a</c><00:06:48.960><c> four</c><00:06:49.599><c> so</c><00:06:50.160><c> this</c><00:06:50.560><c> does</c>

00:06:50.870 --> 00:06:50.880 align:start position:0%
in our string it's a four so this does
 

00:06:50.880 --> 00:06:52.150 align:start position:0%
in our string it's a four so this does
have<00:06:51.120><c> a</c><00:06:51.280><c> left</c><00:06:51.520><c> subtree</c>

00:06:52.150 --> 00:06:52.160 align:start position:0%
have a left subtree
 

00:06:52.160 --> 00:06:54.150 align:start position:0%
have a left subtree
four<00:06:52.800><c> continuously</c><00:06:53.599><c> we're</c><00:06:53.759><c> going</c><00:06:53.840><c> to</c><00:06:54.000><c> be</c>

00:06:54.150 --> 00:06:54.160 align:start position:0%
four continuously we're going to be
 

00:06:54.160 --> 00:06:56.230 align:start position:0%
four continuously we're going to be
doing<00:06:54.400><c> the</c><00:06:54.560><c> left</c><00:06:54.800><c> subtree</c><00:06:55.360><c> of</c><00:06:55.599><c> four</c>

00:06:56.230 --> 00:06:56.240 align:start position:0%
doing the left subtree of four
 

00:06:56.240 --> 00:06:58.710 align:start position:0%
doing the left subtree of four
we<00:06:56.479><c> see</c><00:06:56.880><c> it's</c><00:06:57.120><c> a</c><00:06:57.280><c> null</c><00:06:57.599><c> that's</c><00:06:57.840><c> our</c><00:06:58.000><c> base</c><00:06:58.319><c> case</c>

00:06:58.710 --> 00:06:58.720 align:start position:0%
we see it's a null that's our base case
 

00:06:58.720 --> 00:07:00.629 align:start position:0%
we see it's a null that's our base case
so<00:06:58.880><c> we're</c><00:06:59.199><c> done</c><00:06:59.520><c> with</c><00:06:59.680><c> the</c><00:06:59.840><c> left</c><00:07:00.080><c> sub</c><00:07:00.319><c> tree</c><00:07:00.560><c> of</c>

00:07:00.629 --> 00:07:00.639 align:start position:0%
so we're done with the left sub tree of
 

00:07:00.639 --> 00:07:01.189 align:start position:0%
so we're done with the left sub tree of
four

00:07:01.189 --> 00:07:01.199 align:start position:0%
four
 

00:07:01.199 --> 00:07:03.189 align:start position:0%
four
next<00:07:01.520><c> we're</c><00:07:01.759><c> looking</c><00:07:02.080><c> for</c><00:07:02.240><c> the</c><00:07:02.479><c> right</c><00:07:02.800><c> subtree</c>

00:07:03.189 --> 00:07:03.199 align:start position:0%
next we're looking for the right subtree
 

00:07:03.199 --> 00:07:05.350 align:start position:0%
next we're looking for the right subtree
of<00:07:03.280><c> four</c><00:07:03.520><c> so</c><00:07:03.680><c> what's</c><00:07:03.919><c> the</c><00:07:04.160><c> next</c><00:07:04.560><c> value</c><00:07:05.039><c> in</c><00:07:05.199><c> our</c>

00:07:05.350 --> 00:07:05.360 align:start position:0%
of four so what's the next value in our
 

00:07:05.360 --> 00:07:06.870 align:start position:0%
of four so what's the next value in our
string<00:07:05.680><c> it's</c><00:07:05.919><c> again</c>

00:07:06.870 --> 00:07:06.880 align:start position:0%
string it's again
 

00:07:06.880 --> 00:07:09.510 align:start position:0%
string it's again
null<00:07:07.199><c> so</c><00:07:07.440><c> we</c><00:07:07.599><c> reach</c><00:07:07.919><c> the</c><00:07:08.080><c> base</c><00:07:08.400><c> case</c><00:07:08.880><c> we</c><00:07:09.039><c> can</c><00:07:09.199><c> be</c>

00:07:09.510 --> 00:07:09.520 align:start position:0%
null so we reach the base case we can be
 

00:07:09.520 --> 00:07:09.909 align:start position:0%
null so we reach the base case we can be
done

00:07:09.909 --> 00:07:09.919 align:start position:0%
done
 

00:07:09.919 --> 00:07:12.150 align:start position:0%
done
with<00:07:10.080><c> this</c><00:07:10.400><c> entire</c><00:07:11.039><c> subtree</c><00:07:11.599><c> so</c><00:07:11.759><c> we're</c><00:07:11.919><c> gonna</c>

00:07:12.150 --> 00:07:12.160 align:start position:0%
with this entire subtree so we're gonna
 

00:07:12.160 --> 00:07:14.629 align:start position:0%
with this entire subtree so we're gonna
pop<00:07:12.560><c> back</c><00:07:12.880><c> up</c><00:07:13.039><c> recursively</c><00:07:13.840><c> over</c><00:07:14.160><c> here</c><00:07:14.400><c> to</c>

00:07:14.629 --> 00:07:14.639 align:start position:0%
pop back up recursively over here to
 

00:07:14.639 --> 00:07:15.110 align:start position:0%
pop back up recursively over here to
three

00:07:15.110 --> 00:07:15.120 align:start position:0%
three
 

00:07:15.120 --> 00:07:17.029 align:start position:0%
three
and<00:07:15.280><c> now</c><00:07:15.440><c> we</c><00:07:15.599><c> know</c><00:07:15.840><c> we</c><00:07:15.919><c> need</c><00:07:16.080><c> to</c><00:07:16.240><c> fill</c><00:07:16.560><c> in</c><00:07:16.880><c> the</c>

00:07:17.029 --> 00:07:17.039 align:start position:0%
and now we know we need to fill in the
 

00:07:17.039 --> 00:07:18.790 align:start position:0%
and now we know we need to fill in the
right<00:07:17.280><c> subtree</c><00:07:17.680><c> it</c><00:07:17.840><c> could</c><00:07:18.000><c> be</c><00:07:18.240><c> null</c><00:07:18.560><c> or</c><00:07:18.639><c> it</c>

00:07:18.790 --> 00:07:18.800 align:start position:0%
right subtree it could be null or it
 

00:07:18.800 --> 00:07:20.710 align:start position:0%
right subtree it could be null or it
could<00:07:18.960><c> be</c><00:07:19.039><c> a</c><00:07:19.120><c> real</c><00:07:19.440><c> value</c><00:07:19.840><c> let's</c><00:07:20.080><c> find</c><00:07:20.400><c> out</c>

00:07:20.710 --> 00:07:20.720 align:start position:0%
could be a real value let's find out
 

00:07:20.720 --> 00:07:22.710 align:start position:0%
could be a real value let's find out
well<00:07:20.960><c> the</c><00:07:21.039><c> next</c><00:07:21.360><c> value</c><00:07:21.680><c> in</c><00:07:21.840><c> our</c><00:07:22.000><c> string</c><00:07:22.319><c> is</c><00:07:22.479><c> a</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
well the next value in our string is a
 

00:07:22.720 --> 00:07:24.309 align:start position:0%
well the next value in our string is a
five<00:07:23.280><c> so</c><00:07:23.520><c> therefore</c>

00:07:24.309 --> 00:07:24.319 align:start position:0%
five so therefore
 

00:07:24.319 --> 00:07:27.350 align:start position:0%
five so therefore
this<00:07:24.560><c> is</c><00:07:24.720><c> going</c><00:07:24.880><c> to</c><00:07:25.039><c> be</c><00:07:25.280><c> five</c><00:07:26.000><c> so</c><00:07:26.400><c> next</c><00:07:26.800><c> we</c><00:07:27.039><c> see</c>

00:07:27.350 --> 00:07:27.360 align:start position:0%
this is going to be five so next we see
 

00:07:27.360 --> 00:07:29.189 align:start position:0%
this is going to be five so next we see
that<00:07:27.599><c> okay</c><00:07:27.919><c> left</c><00:07:28.240><c> child</c><00:07:28.560><c> of</c><00:07:28.639><c> five</c><00:07:28.960><c> is</c><00:07:29.039><c> going</c><00:07:29.120><c> to</c>

00:07:29.189 --> 00:07:29.199 align:start position:0%
that okay left child of five is going to
 

00:07:29.199 --> 00:07:30.390 align:start position:0%
that okay left child of five is going to
be<00:07:29.440><c> null</c><00:07:30.080><c> and</c>

00:07:30.390 --> 00:07:30.400 align:start position:0%
be null and
 

00:07:30.400 --> 00:07:32.150 align:start position:0%
be null and
right<00:07:30.720><c> child</c><00:07:31.039><c> of</c><00:07:31.120><c> 5</c><00:07:31.360><c> is</c><00:07:31.440><c> going</c><00:07:31.599><c> to</c><00:07:31.680><c> be</c><00:07:31.840><c> null</c>

00:07:32.150 --> 00:07:32.160 align:start position:0%
right child of 5 is going to be null
 

00:07:32.160 --> 00:07:34.629 align:start position:0%
right child of 5 is going to be null
right<00:07:32.479><c> so</c><00:07:32.880><c> clearly</c><00:07:33.280><c> what</c><00:07:33.440><c> you</c><00:07:33.520><c> can</c><00:07:33.759><c> see</c><00:07:34.080><c> here</c>

00:07:34.629 --> 00:07:34.639 align:start position:0%
right so clearly what you can see here
 

00:07:34.639 --> 00:07:37.350 align:start position:0%
right so clearly what you can see here
is<00:07:34.800><c> that</c><00:07:35.039><c> for</c><00:07:35.360><c> every</c><00:07:35.840><c> single</c><00:07:36.400><c> leaf</c><00:07:36.720><c> node</c><00:07:37.120><c> we</c>

00:07:37.350 --> 00:07:37.360 align:start position:0%
is that for every single leaf node we
 

00:07:37.360 --> 00:07:37.909 align:start position:0%
is that for every single leaf node we
have

00:07:37.909 --> 00:07:37.919 align:start position:0%
have
 

00:07:37.919 --> 00:07:40.950 align:start position:0%
have
in<00:07:38.160><c> our</c><00:07:38.400><c> tree</c><00:07:38.960><c> we</c><00:07:39.360><c> we</c><00:07:39.680><c> specified</c><00:07:40.479><c> what</c><00:07:40.720><c> their</c>

00:07:40.950 --> 00:07:40.960 align:start position:0%
in our tree we we specified what their
 

00:07:40.960 --> 00:07:42.870 align:start position:0%
in our tree we we specified what their
children<00:07:41.280><c> were</c><00:07:41.440><c> going</c><00:07:41.520><c> to</c><00:07:41.599><c> be</c><00:07:41.759><c> we</c><00:07:41.919><c> specified</c>

00:07:42.870 --> 00:07:42.880 align:start position:0%
children were going to be we specified
 

00:07:42.880 --> 00:07:45.350 align:start position:0%
children were going to be we specified
the<00:07:43.039><c> leaf</c><00:07:43.280><c> node</c><00:07:43.520><c> two</c><00:07:43.840><c> has</c><00:07:44.240><c> two</c><00:07:44.479><c> null</c><00:07:44.800><c> children</c>

00:07:45.350 --> 00:07:45.360 align:start position:0%
the leaf node two has two null children
 

00:07:45.360 --> 00:07:47.749 align:start position:0%
the leaf node two has two null children
leaf<00:07:45.680><c> node</c><00:07:46.000><c> four</c><00:07:46.240><c> has</c><00:07:46.479><c> two</c><00:07:46.720><c> nulls</c><00:07:47.199><c> and</c><00:07:47.440><c> leaf</c>

00:07:47.749 --> 00:07:47.759 align:start position:0%
leaf node four has two nulls and leaf
 

00:07:47.759 --> 00:07:49.510 align:start position:0%
leaf node four has two nulls and leaf
node<00:07:48.080><c> five</c><00:07:48.479><c> has</c><00:07:48.720><c> two</c><00:07:48.960><c> nulls</c>

00:07:49.510 --> 00:07:49.520 align:start position:0%
node five has two nulls
 

00:07:49.520 --> 00:07:51.589 align:start position:0%
node five has two nulls
that's<00:07:49.759><c> how</c><00:07:49.919><c> you</c><00:07:50.240><c> know</c><00:07:50.639><c> we're</c><00:07:51.039><c> done</c><00:07:51.280><c> with</c><00:07:51.440><c> the</c>

00:07:51.589 --> 00:07:51.599 align:start position:0%
that's how you know we're done with the
 

00:07:51.599 --> 00:07:52.790 align:start position:0%
that's how you know we're done with the
entire<00:07:51.919><c> string</c><00:07:52.400><c> we're</c>

00:07:52.790 --> 00:07:52.800 align:start position:0%
entire string we're
 

00:07:52.800 --> 00:07:54.390 align:start position:0%
entire string we're
we're<00:07:52.960><c> gonna</c><00:07:53.280><c> stop</c><00:07:53.680><c> here</c><00:07:53.919><c> we</c><00:07:54.080><c> know</c><00:07:54.240><c> that</c>

00:07:54.390 --> 00:07:54.400 align:start position:0%
we're gonna stop here we know that
 

00:07:54.400 --> 00:07:55.830 align:start position:0%
we're gonna stop here we know that
there's<00:07:54.639><c> nothing</c><00:07:55.039><c> left</c><00:07:55.360><c> to</c><00:07:55.520><c> do</c>

00:07:55.830 --> 00:07:55.840 align:start position:0%
there's nothing left to do
 

00:07:55.840 --> 00:07:57.830 align:start position:0%
there's nothing left to do
right<00:07:56.319><c> every</c><00:07:56.560><c> single</c><00:07:56.879><c> leaf</c><00:07:57.199><c> had</c><00:07:57.520><c> null</c>

00:07:57.830 --> 00:07:57.840 align:start position:0%
right every single leaf had null
 

00:07:57.840 --> 00:07:59.510 align:start position:0%
right every single leaf had null
children<00:07:58.240><c> therefore</c><00:07:58.639><c> we</c><00:07:58.800><c> can't</c><00:07:59.039><c> possibly</c>

00:07:59.510 --> 00:07:59.520 align:start position:0%
children therefore we can't possibly
 

00:07:59.520 --> 00:08:01.430 align:start position:0%
children therefore we can't possibly
continue<00:08:00.000><c> this</c><00:08:00.240><c> tree</c><00:08:00.400><c> right</c><00:08:00.560><c> so</c><00:08:00.720><c> we're</c><00:08:01.039><c> done</c>

00:08:01.430 --> 00:08:01.440 align:start position:0%
continue this tree right so we're done
 

00:08:01.440 --> 00:08:04.070 align:start position:0%
continue this tree right so we're done
so<00:08:01.599><c> that's</c><00:08:01.919><c> why</c><00:08:02.080><c> it's</c><00:08:02.319><c> not</c><00:08:02.639><c> ambiguous</c><00:08:03.759><c> and</c><00:08:03.919><c> by</c>

00:08:04.070 --> 00:08:04.080 align:start position:0%
so that's why it's not ambiguous and by
 

00:08:04.080 --> 00:08:05.350 align:start position:0%
so that's why it's not ambiguous and by
the<00:08:04.240><c> way</c><00:08:04.400><c> what</c><00:08:04.560><c> do</c><00:08:04.720><c> you</c><00:08:04.800><c> think</c><00:08:04.960><c> the</c><00:08:05.120><c> time</c>

00:08:05.350 --> 00:08:05.360 align:start position:0%
the way what do you think the time
 

00:08:05.360 --> 00:08:07.270 align:start position:0%
the way what do you think the time
complexity<00:08:06.000><c> of</c><00:08:06.080><c> this</c><00:08:06.319><c> was</c><00:08:06.560><c> well</c><00:08:06.800><c> we</c><00:08:06.960><c> know</c><00:08:07.120><c> that</c>

00:08:07.270 --> 00:08:07.280 align:start position:0%
complexity of this was well we know that
 

00:08:07.280 --> 00:08:09.189 align:start position:0%
complexity of this was well we know that
pre-order<00:08:07.759><c> traversal</c><00:08:08.319><c> is</c><00:08:08.400><c> pretty</c><00:08:08.720><c> linear</c>

00:08:09.189 --> 00:08:09.199 align:start position:0%
pre-order traversal is pretty linear
 

00:08:09.199 --> 00:08:09.749 align:start position:0%
pre-order traversal is pretty linear
right<00:08:09.360><c> so</c>

00:08:09.749 --> 00:08:09.759 align:start position:0%
right so
 

00:08:09.759 --> 00:08:13.029 align:start position:0%
right so
basically<00:08:10.479><c> o</c><00:08:10.720><c> of</c><00:08:10.879><c> n</c><00:08:11.199><c> for</c><00:08:11.440><c> serializing</c><00:08:12.479><c> and</c><00:08:12.800><c> for</c>

00:08:13.029 --> 00:08:13.039 align:start position:0%
basically o of n for serializing and for
 

00:08:13.039 --> 00:08:13.270 align:start position:0%
basically o of n for serializing and for
d

00:08:13.270 --> 00:08:13.280 align:start position:0%
d
 

00:08:13.280 --> 00:08:15.510 align:start position:0%
d
serializing<00:08:14.319><c> this</c><00:08:14.560><c> problem</c><00:08:14.960><c> is</c><00:08:15.120><c> actually</c><00:08:15.440><c> a</c>

00:08:15.510 --> 00:08:15.520 align:start position:0%
serializing this problem is actually a
 

00:08:15.520 --> 00:08:17.350 align:start position:0%
serializing this problem is actually a
little<00:08:15.840><c> simpler</c><00:08:16.160><c> than</c><00:08:16.319><c> you</c><00:08:16.479><c> might</c><00:08:16.800><c> think</c>

00:08:17.350 --> 00:08:17.360 align:start position:0%
little simpler than you might think
 

00:08:17.360 --> 00:08:19.510 align:start position:0%
little simpler than you might think
for<00:08:17.520><c> a</c><00:08:17.680><c> hard</c><00:08:18.000><c> problem</c><00:08:18.319><c> at</c><00:08:18.479><c> least</c><00:08:18.960><c> so</c><00:08:19.120><c> now</c><00:08:19.360><c> with</c>

00:08:19.510 --> 00:08:19.520 align:start position:0%
for a hard problem at least so now with
 

00:08:19.520 --> 00:08:21.430 align:start position:0%
for a hard problem at least so now with
that<00:08:19.680><c> being</c><00:08:19.840><c> said</c><00:08:20.080><c> let's</c><00:08:20.319><c> jump</c><00:08:20.560><c> into</c><00:08:20.720><c> the</c><00:08:20.879><c> code</c>

00:08:21.430 --> 00:08:21.440 align:start position:0%
that being said let's jump into the code
 

00:08:21.440 --> 00:08:22.869 align:start position:0%
that being said let's jump into the code
so<00:08:21.680><c> good</c><00:08:21.840><c> thing</c><00:08:22.000><c> for</c><00:08:22.160><c> us</c><00:08:22.319><c> we</c><00:08:22.479><c> only</c><00:08:22.639><c> have</c><00:08:22.800><c> to</c>

00:08:22.869 --> 00:08:22.879 align:start position:0%
so good thing for us we only have to
 

00:08:22.879 --> 00:08:24.710 align:start position:0%
so good thing for us we only have to
fill<00:08:23.039><c> in</c><00:08:23.199><c> two</c><00:08:23.440><c> functions</c><00:08:23.919><c> so</c><00:08:24.080><c> let's</c><00:08:24.319><c> start</c><00:08:24.560><c> out</c>

00:08:24.710 --> 00:08:24.720 align:start position:0%
fill in two functions so let's start out
 

00:08:24.720 --> 00:08:26.070 align:start position:0%
fill in two functions so let's start out
with<00:08:24.800><c> the</c><00:08:24.960><c> serialize</c><00:08:25.520><c> so</c><00:08:25.680><c> we're</c><00:08:25.759><c> going</c><00:08:25.919><c> to</c><00:08:26.000><c> be</c>

00:08:26.070 --> 00:08:26.080 align:start position:0%
with the serialize so we're going to be
 

00:08:26.080 --> 00:08:27.990 align:start position:0%
with the serialize so we're going to be
given<00:08:26.319><c> a</c><00:08:26.560><c> root</c><00:08:26.800><c> node</c><00:08:27.039><c> for</c><00:08:27.199><c> a</c><00:08:27.360><c> tree</c><00:08:27.680><c> and</c><00:08:27.759><c> we</c><00:08:27.919><c> want</c>

00:08:27.990 --> 00:08:28.000 align:start position:0%
given a root node for a tree and we want
 

00:08:28.000 --> 00:08:29.589 align:start position:0%
given a root node for a tree and we want
to<00:08:28.080><c> convert</c><00:08:28.479><c> it</c><00:08:28.639><c> into</c><00:08:28.879><c> a</c><00:08:29.039><c> string</c><00:08:29.360><c> and</c><00:08:29.440><c> then</c>

00:08:29.589 --> 00:08:29.599 align:start position:0%
to convert it into a string and then
 

00:08:29.599 --> 00:08:31.510 align:start position:0%
to convert it into a string and then
return<00:08:30.000><c> that</c><00:08:30.160><c> string</c><00:08:30.479><c> so</c><00:08:30.639><c> let's</c><00:08:30.960><c> start</c>

00:08:31.510 --> 00:08:31.520 align:start position:0%
return that string so let's start
 

00:08:31.520 --> 00:08:34.630 align:start position:0%
return that string so let's start
with<00:08:32.080><c> a</c><00:08:32.479><c> empty</c><00:08:32.880><c> string</c><00:08:33.519><c> initially</c><00:08:34.159><c> right</c>

00:08:34.630 --> 00:08:34.640 align:start position:0%
with a empty string initially right
 

00:08:34.640 --> 00:08:36.630 align:start position:0%
with a empty string initially right
and<00:08:34.959><c> actually</c><00:08:35.440><c> just</c><00:08:35.919><c> to</c><00:08:36.080><c> make</c><00:08:36.320><c> things</c><00:08:36.560><c> a</c>

00:08:36.630 --> 00:08:36.640 align:start position:0%
and actually just to make things a
 

00:08:36.640 --> 00:08:37.829 align:start position:0%
and actually just to make things a
little<00:08:36.800><c> bit</c><00:08:36.959><c> easier</c><00:08:37.279><c> i'm</c><00:08:37.440><c> going</c><00:08:37.519><c> to</c>

00:08:37.829 --> 00:08:37.839 align:start position:0%
little bit easier i'm going to
 

00:08:37.839 --> 00:08:40.149 align:start position:0%
little bit easier i'm going to
set<00:08:38.080><c> our</c><00:08:38.320><c> result</c><00:08:38.719><c> to</c><00:08:38.959><c> an</c><00:08:39.120><c> array</c><00:08:39.599><c> i'm</c><00:08:39.760><c> basically</c>

00:08:40.149 --> 00:08:40.159 align:start position:0%
set our result to an array i'm basically
 

00:08:40.159 --> 00:08:41.269 align:start position:0%
set our result to an array i'm basically
going<00:08:40.320><c> to</c><00:08:40.399><c> be</c><00:08:40.560><c> adding</c>

00:08:41.269 --> 00:08:41.279 align:start position:0%
going to be adding
 

00:08:41.279 --> 00:08:42.790 align:start position:0%
going to be adding
strings<00:08:41.680><c> together</c><00:08:42.000><c> like</c><00:08:42.159><c> for</c><00:08:42.320><c> example</c><00:08:42.560><c> if</c><00:08:42.719><c> we</c>

00:08:42.790 --> 00:08:42.800 align:start position:0%
strings together like for example if we
 

00:08:42.800 --> 00:08:44.230 align:start position:0%
strings together like for example if we
had<00:08:42.880><c> a</c><00:08:42.959><c> node</c><00:08:43.279><c> 1</c><00:08:43.599><c> i'm</c><00:08:43.680><c> going</c><00:08:43.760><c> to</c><00:08:43.839><c> add</c><00:08:44.000><c> it</c><00:08:44.080><c> like</c>

00:08:44.230 --> 00:08:44.240 align:start position:0%
had a node 1 i'm going to add it like
 

00:08:44.240 --> 00:08:45.990 align:start position:0%
had a node 1 i'm going to add it like
this<00:08:44.480><c> if</c><00:08:44.640><c> we</c><00:08:44.720><c> add</c><00:08:44.880><c> a</c><00:08:44.959><c> node</c><00:08:45.279><c> 2</c><00:08:45.519><c> i'm</c><00:08:45.600><c> going</c><00:08:45.680><c> to</c><00:08:45.839><c> add</c>

00:08:45.990 --> 00:08:46.000 align:start position:0%
this if we add a node 2 i'm going to add
 

00:08:46.000 --> 00:08:46.310 align:start position:0%
this if we add a node 2 i'm going to add
it

00:08:46.310 --> 00:08:46.320 align:start position:0%
it
 

00:08:46.320 --> 00:08:47.990 align:start position:0%
it
like<00:08:46.640><c> this</c><00:08:47.040><c> and</c><00:08:47.120><c> then</c><00:08:47.360><c> at</c><00:08:47.440><c> the</c><00:08:47.600><c> end</c><00:08:47.839><c> i'm</c>

00:08:47.990 --> 00:08:48.000 align:start position:0%
like this and then at the end i'm
 

00:08:48.000 --> 00:08:49.509 align:start position:0%
like this and then at the end i'm
basically<00:08:48.399><c> going</c><00:08:48.480><c> to</c><00:08:48.560><c> be</c><00:08:48.800><c> joining</c><00:08:49.279><c> all</c><00:08:49.360><c> the</c>

00:08:49.509 --> 00:08:49.519 align:start position:0%
basically going to be joining all the
 

00:08:49.519 --> 00:08:51.190 align:start position:0%
basically going to be joining all the
strings<00:08:49.920><c> together</c><00:08:50.240><c> with</c><00:08:50.480><c> a</c><00:08:50.640><c> comma</c>

00:08:51.190 --> 00:08:51.200 align:start position:0%
strings together with a comma
 

00:08:51.200 --> 00:08:53.110 align:start position:0%
strings together with a comma
delimiter<00:08:52.000><c> so</c><00:08:52.240><c> i'm</c><00:08:52.399><c> going</c><00:08:52.480><c> to</c><00:08:52.560><c> define</c><00:08:52.959><c> a</c>

00:08:53.110 --> 00:08:53.120 align:start position:0%
delimiter so i'm going to define a
 

00:08:53.120 --> 00:08:54.710 align:start position:0%
delimiter so i'm going to define a
function<00:08:53.519><c> inside</c><00:08:53.839><c> a</c><00:08:53.920><c> function</c><00:08:54.320><c> just</c><00:08:54.480><c> because</c>

00:08:54.710 --> 00:08:54.720 align:start position:0%
function inside a function just because
 

00:08:54.720 --> 00:08:56.389 align:start position:0%
function inside a function just because
it's<00:08:54.959><c> easier</c><00:08:55.279><c> once</c><00:08:55.519><c> again</c><00:08:55.760><c> right</c><00:08:56.000><c> so</c><00:08:56.160><c> this</c><00:08:56.240><c> is</c>

00:08:56.389 --> 00:08:56.399 align:start position:0%
it's easier once again right so this is
 

00:08:56.399 --> 00:08:57.829 align:start position:0%
it's easier once again right so this is
going<00:08:56.480><c> to</c><00:08:56.560><c> be</c><00:08:56.640><c> our</c><00:08:56.880><c> pre-order</c><00:08:57.440><c> depth</c><00:08:57.680><c> first</c>

00:08:57.829 --> 00:08:57.839 align:start position:0%
going to be our pre-order depth first
 

00:08:57.839 --> 00:08:59.350 align:start position:0%
going to be our pre-order depth first
search<00:08:58.160><c> we</c><00:08:58.320><c> are</c><00:08:58.399><c> going</c><00:08:58.480><c> to</c><00:08:58.560><c> be</c><00:08:58.720><c> passing</c><00:08:59.040><c> in</c><00:08:59.200><c> the</c>

00:08:59.350 --> 00:08:59.360 align:start position:0%
search we are going to be passing in the
 

00:08:59.360 --> 00:09:01.190 align:start position:0%
search we are going to be passing in the
current<00:08:59.760><c> root</c><00:09:00.080><c> or</c><00:09:00.240><c> the</c><00:09:00.399><c> current</c><00:09:00.800><c> node</c><00:09:01.040><c> that</c>

00:09:01.190 --> 00:09:01.200 align:start position:0%
current root or the current node that
 

00:09:01.200 --> 00:09:02.150 align:start position:0%
current root or the current node that
we're<00:09:01.360><c> visiting</c>

00:09:02.150 --> 00:09:02.160 align:start position:0%
we're visiting
 

00:09:02.160 --> 00:09:04.070 align:start position:0%
we're visiting
and<00:09:02.399><c> of</c><00:09:02.560><c> course</c><00:09:02.800><c> we</c><00:09:02.959><c> know</c><00:09:03.200><c> that</c><00:09:03.440><c> the</c><00:09:03.519><c> base</c><00:09:03.839><c> case</c>

00:09:04.070 --> 00:09:04.080 align:start position:0%
and of course we know that the base case
 

00:09:04.080 --> 00:09:05.910 align:start position:0%
and of course we know that the base case
is<00:09:04.320><c> if</c><00:09:04.560><c> the</c><00:09:04.880><c> node</c><00:09:05.360><c> is</c>

00:09:05.910 --> 00:09:05.920 align:start position:0%
is if the node is
 

00:09:05.920 --> 00:09:07.750 align:start position:0%
is if the node is
null<00:09:06.480><c> and</c><00:09:06.640><c> in</c><00:09:06.800><c> that</c><00:09:06.959><c> case</c><00:09:07.279><c> what</c><00:09:07.519><c> are</c><00:09:07.600><c> we</c><00:09:07.680><c> going</c>

00:09:07.750 --> 00:09:07.760 align:start position:0%
null and in that case what are we going
 

00:09:07.760 --> 00:09:09.829 align:start position:0%
null and in that case what are we going
to<00:09:07.920><c> do</c><00:09:08.480><c> our</c><00:09:08.800><c> special</c><00:09:09.279><c> character</c><00:09:09.600><c> that</c><00:09:09.680><c> we're</c>

00:09:09.829 --> 00:09:09.839 align:start position:0%
to do our special character that we're
 

00:09:09.839 --> 00:09:10.710 align:start position:0%
to do our special character that we're
going<00:09:10.000><c> to</c><00:09:10.080><c> define</c>

00:09:10.710 --> 00:09:10.720 align:start position:0%
going to define
 

00:09:10.720 --> 00:09:13.190 align:start position:0%
going to define
is<00:09:10.880><c> going</c><00:09:11.040><c> to</c><00:09:11.200><c> basically</c><00:09:11.760><c> be</c><00:09:12.080><c> a</c><00:09:12.560><c> n</c><00:09:12.800><c> character</c>

00:09:13.190 --> 00:09:13.200 align:start position:0%
is going to basically be a n character
 

00:09:13.200 --> 00:09:15.269 align:start position:0%
is going to basically be a n character
so<00:09:13.440><c> to</c><00:09:13.600><c> result</c><00:09:13.920><c> i'm</c><00:09:14.000><c> going</c><00:09:14.080><c> to</c><00:09:14.240><c> append</c>

00:09:15.269 --> 00:09:15.279 align:start position:0%
so to result i'm going to append
 

00:09:15.279 --> 00:09:18.070 align:start position:0%
so to result i'm going to append
and<00:09:16.000><c> end</c><00:09:16.320><c> character</c><00:09:17.120><c> and</c><00:09:17.600><c> then</c><00:09:17.839><c> we're</c><00:09:18.000><c> going</c>

00:09:18.070 --> 00:09:18.080 align:start position:0%
and end character and then we're going
 

00:09:18.080 --> 00:09:19.030 align:start position:0%
and end character and then we're going
to<00:09:18.240><c> return</c>

00:09:19.030 --> 00:09:19.040 align:start position:0%
to return
 

00:09:19.040 --> 00:09:21.350 align:start position:0%
to return
if<00:09:19.279><c> it's</c><00:09:19.600><c> not</c><00:09:19.920><c> null</c><00:09:20.320><c> then</c><00:09:20.560><c> we</c><00:09:20.800><c> know</c><00:09:21.040><c> we</c><00:09:21.200><c> can</c>

00:09:21.350 --> 00:09:21.360 align:start position:0%
if it's not null then we know we can
 

00:09:21.360 --> 00:09:22.790 align:start position:0%
if it's not null then we know we can
append<00:09:21.920><c> we</c><00:09:22.000><c> can</c><00:09:22.160><c> we're</c><00:09:22.320><c> since</c><00:09:22.480><c> we're</c><00:09:22.640><c> doing</c>

00:09:22.790 --> 00:09:22.800 align:start position:0%
append we can we're since we're doing
 

00:09:22.800 --> 00:09:24.230 align:start position:0%
append we can we're since we're doing
pre-order<00:09:23.279><c> we're</c><00:09:23.440><c> going</c><00:09:23.519><c> to</c><00:09:23.600><c> be</c><00:09:23.760><c> appending</c>

00:09:24.230 --> 00:09:24.240 align:start position:0%
pre-order we're going to be appending
 

00:09:24.240 --> 00:09:25.829 align:start position:0%
pre-order we're going to be appending
before<00:09:24.560><c> we</c><00:09:24.720><c> recursively</c><00:09:25.360><c> do</c><00:09:25.519><c> depth</c><00:09:25.680><c> for</c>

00:09:25.829 --> 00:09:25.839 align:start position:0%
before we recursively do depth for
 

00:09:25.839 --> 00:09:27.190 align:start position:0%
before we recursively do depth for
search<00:09:26.080><c> we're</c><00:09:26.240><c> going</c><00:09:26.320><c> to</c><00:09:26.480><c> append</c>

00:09:27.190 --> 00:09:27.200 align:start position:0%
search we're going to append
 

00:09:27.200 --> 00:09:29.110 align:start position:0%
search we're going to append
node.val<00:09:28.080><c> but</c><00:09:28.240><c> we</c><00:09:28.320><c> know</c><00:09:28.480><c> it's</c><00:09:28.640><c> going</c><00:09:28.720><c> to</c><00:09:28.800><c> be</c><00:09:28.959><c> an</c>

00:09:29.110 --> 00:09:29.120 align:start position:0%
node.val but we know it's going to be an
 

00:09:29.120 --> 00:09:30.389 align:start position:0%
node.val but we know it's going to be an
integer<00:09:29.440><c> so</c><00:09:29.600><c> we're</c><00:09:29.760><c> going</c><00:09:29.839><c> to</c><00:09:30.080><c> we're</c><00:09:30.240><c> going</c><00:09:30.320><c> to</c>

00:09:30.389 --> 00:09:30.399 align:start position:0%
integer so we're going to we're going to
 

00:09:30.399 --> 00:09:32.389 align:start position:0%
integer so we're going to we're going to
convert<00:09:30.800><c> it</c><00:09:30.880><c> into</c><00:09:31.120><c> a</c><00:09:31.200><c> string</c><00:09:31.519><c> so</c><00:09:31.680><c> node.val</c>

00:09:32.389 --> 00:09:32.399 align:start position:0%
convert it into a string so node.val
 

00:09:32.399 --> 00:09:33.750 align:start position:0%
convert it into a string so node.val
converted<00:09:32.880><c> into</c><00:09:33.120><c> a</c><00:09:33.200><c> string</c>

00:09:33.750 --> 00:09:33.760 align:start position:0%
converted into a string
 

00:09:33.760 --> 00:09:36.230 align:start position:0%
converted into a string
appended<00:09:34.240><c> to</c><00:09:34.399><c> result</c><00:09:35.040><c> after</c><00:09:35.360><c> that</c><00:09:35.519><c> of</c><00:09:35.600><c> course</c>

00:09:36.230 --> 00:09:36.240 align:start position:0%
appended to result after that of course
 

00:09:36.240 --> 00:09:38.070 align:start position:0%
appended to result after that of course
we<00:09:36.399><c> just</c><00:09:36.640><c> call</c><00:09:36.959><c> our</c><00:09:37.120><c> recursive</c><00:09:37.600><c> different</c>

00:09:38.070 --> 00:09:38.080 align:start position:0%
we just call our recursive different
 

00:09:38.080 --> 00:09:38.790 align:start position:0%
we just call our recursive different
search

00:09:38.790 --> 00:09:38.800 align:start position:0%
search
 

00:09:38.800 --> 00:09:41.350 align:start position:0%
search
on<00:09:38.959><c> the</c><00:09:39.120><c> left</c><00:09:39.440><c> and</c><00:09:39.519><c> right</c><00:09:39.760><c> subtree</c><00:09:40.240><c> so</c><00:09:40.959><c> uh</c><00:09:41.200><c> debt</c>

00:09:41.350 --> 00:09:41.360 align:start position:0%
on the left and right subtree so uh debt
 

00:09:41.360 --> 00:09:43.350 align:start position:0%
on the left and right subtree so uh debt
for<00:09:41.600><c> search</c><00:09:41.920><c> on</c><00:09:42.160><c> node.left</c>

00:09:43.350 --> 00:09:43.360 align:start position:0%
for search on node.left
 

00:09:43.360 --> 00:09:46.470 align:start position:0%
for search on node.left
and<00:09:44.000><c> depth</c><00:09:44.240><c> for</c><00:09:44.480><c> search</c><00:09:44.880><c> on</c><00:09:45.120><c> node.right</c><00:09:46.240><c> and</c>

00:09:46.470 --> 00:09:46.480 align:start position:0%
and depth for search on node.right and
 

00:09:46.480 --> 00:09:48.150 align:start position:0%
and depth for search on node.right and
we<00:09:46.640><c> don't</c><00:09:46.800><c> even</c><00:09:46.959><c> have</c><00:09:47.120><c> to</c><00:09:47.279><c> call</c><00:09:47.600><c> our</c><00:09:47.760><c> return</c>

00:09:48.150 --> 00:09:48.160 align:start position:0%
we don't even have to call our return
 

00:09:48.160 --> 00:09:49.670 align:start position:0%
we don't even have to call our return
function<00:09:48.560><c> because</c><00:09:48.880><c> once</c><00:09:49.120><c> this</c><00:09:49.279><c> is</c><00:09:49.360><c> done</c>

00:09:49.670 --> 00:09:49.680 align:start position:0%
function because once this is done
 

00:09:49.680 --> 00:09:51.110 align:start position:0%
function because once this is done
executing<00:09:50.080><c> it's</c><00:09:50.160><c> going</c><00:09:50.320><c> to</c><00:09:50.399><c> basically</c><00:09:50.720><c> return</c>

00:09:51.110 --> 00:09:51.120 align:start position:0%
executing it's going to basically return
 

00:09:51.120 --> 00:09:51.990 align:start position:0%
executing it's going to basically return
by<00:09:51.360><c> default</c>

00:09:51.990 --> 00:09:52.000 align:start position:0%
by default
 

00:09:52.000 --> 00:09:53.910 align:start position:0%
by default
so<00:09:52.240><c> once</c><00:09:52.560><c> that</c><00:09:52.800><c> is</c><00:09:52.959><c> done</c><00:09:53.279><c> we</c><00:09:53.519><c> know</c><00:09:53.680><c> that</c><00:09:53.760><c> our</c>

00:09:53.910 --> 00:09:53.920 align:start position:0%
so once that is done we know that our
 

00:09:53.920 --> 00:09:55.269 align:start position:0%
so once that is done we know that our
result<00:09:54.399><c> is</c><00:09:54.480><c> going</c><00:09:54.560><c> to</c><00:09:54.720><c> contain</c>

00:09:55.269 --> 00:09:55.279 align:start position:0%
result is going to contain
 

00:09:55.279 --> 00:09:57.670 align:start position:0%
result is going to contain
all<00:09:55.440><c> the</c><00:09:55.600><c> strings</c><00:09:56.560><c> that</c><00:09:56.720><c> we</c><00:09:56.880><c> want</c><00:09:57.040><c> it</c><00:09:57.120><c> to</c><00:09:57.360><c> so</c>

00:09:57.670 --> 00:09:57.680 align:start position:0%
all the strings that we want it to so
 

00:09:57.680 --> 00:10:00.150 align:start position:0%
all the strings that we want it to so
basically<00:09:58.080><c> what</c><00:09:58.240><c> i'm</c><00:09:58.320><c> going</c><00:09:58.399><c> to</c><00:09:58.480><c> do</c><00:09:58.720><c> is</c><00:09:58.959><c> return</c>

00:10:00.150 --> 00:10:00.160 align:start position:0%
basically what i'm going to do is return
 

00:10:00.160 --> 00:10:03.430 align:start position:0%
basically what i'm going to do is return
the<00:10:00.320><c> result</c><00:10:01.200><c> joined</c><00:10:01.920><c> by</c><00:10:02.560><c> a</c>

00:10:03.430 --> 00:10:03.440 align:start position:0%
the result joined by a
 

00:10:03.440 --> 00:10:07.190 align:start position:0%
the result joined by a
comma<00:10:04.000><c> delimiter</c><00:10:04.560><c> so</c><00:10:05.360><c> comma</c><00:10:05.839><c> dot</c><00:10:06.320><c> join</c>

00:10:07.190 --> 00:10:07.200 align:start position:0%
comma delimiter so comma dot join
 

00:10:07.200 --> 00:10:08.949 align:start position:0%
comma delimiter so comma dot join
everything<00:10:07.600><c> in</c><00:10:07.760><c> result</c><00:10:08.240><c> oh</c><00:10:08.480><c> but</c><00:10:08.640><c> i</c><00:10:08.720><c> almost</c>

00:10:08.949 --> 00:10:08.959 align:start position:0%
everything in result oh but i almost
 

00:10:08.959 --> 00:10:10.230 align:start position:0%
everything in result oh but i almost
forgot<00:10:09.279><c> we</c><00:10:09.440><c> actually</c><00:10:09.760><c> have</c><00:10:09.839><c> to</c>

00:10:10.230 --> 00:10:10.240 align:start position:0%
forgot we actually have to
 

00:10:10.240 --> 00:10:12.069 align:start position:0%
forgot we actually have to
remember<00:10:10.640><c> to</c><00:10:10.959><c> call</c><00:10:11.279><c> our</c><00:10:11.440><c> debt</c><00:10:11.600><c> for</c><00:10:11.760><c> search</c>

00:10:12.069 --> 00:10:12.079 align:start position:0%
remember to call our debt for search
 

00:10:12.079 --> 00:10:13.590 align:start position:0%
remember to call our debt for search
function<00:10:12.399><c> so</c><00:10:12.560><c> i'm</c><00:10:12.640><c> going</c><00:10:12.720><c> to</c><00:10:12.880><c> call</c><00:10:13.040><c> it</c><00:10:13.200><c> passing</c>

00:10:13.590 --> 00:10:13.600 align:start position:0%
function so i'm going to call it passing
 

00:10:13.600 --> 00:10:14.790 align:start position:0%
function so i'm going to call it passing
in<00:10:13.680><c> the</c><00:10:13.839><c> root</c><00:10:14.079><c> value</c>

00:10:14.790 --> 00:10:14.800 align:start position:0%
in the root value
 

00:10:14.800 --> 00:10:16.710 align:start position:0%
in the root value
so<00:10:15.040><c> our</c><00:10:15.279><c> serialized</c><00:10:15.839><c> function</c><00:10:16.240><c> is</c><00:10:16.399><c> actually</c>

00:10:16.710 --> 00:10:16.720 align:start position:0%
so our serialized function is actually
 

00:10:16.720 --> 00:10:17.990 align:start position:0%
so our serialized function is actually
just<00:10:16.959><c> as</c><00:10:17.120><c> simple</c><00:10:17.440><c> as</c><00:10:17.519><c> that</c><00:10:17.760><c> so</c>

00:10:17.990 --> 00:10:18.000 align:start position:0%
just as simple as that so
 

00:10:18.000 --> 00:10:20.550 align:start position:0%
just as simple as that so
next<00:10:18.320><c> we're</c><00:10:18.480><c> going</c><00:10:18.560><c> to</c><00:10:18.640><c> be</c><00:10:18.800><c> moving</c><00:10:19.200><c> on</c><00:10:19.519><c> to</c><00:10:20.000><c> our</c>

00:10:20.550 --> 00:10:20.560 align:start position:0%
next we're going to be moving on to our
 

00:10:20.560 --> 00:10:22.069 align:start position:0%
next we're going to be moving on to our
deserialize<00:10:21.360><c> function</c><00:10:21.600><c> so</c><00:10:21.760><c> we're</c><00:10:21.920><c> going</c><00:10:22.000><c> to</c>

00:10:22.069 --> 00:10:22.079 align:start position:0%
deserialize function so we're going to
 

00:10:22.079 --> 00:10:23.430 align:start position:0%
deserialize function so we're going to
be<00:10:22.240><c> given</c><00:10:22.480><c> the</c><00:10:22.640><c> data</c><00:10:23.040><c> right</c>

00:10:23.430 --> 00:10:23.440 align:start position:0%
be given the data right
 

00:10:23.440 --> 00:10:25.750 align:start position:0%
be given the data right
we<00:10:23.680><c> know</c><00:10:24.160><c> that</c><00:10:24.320><c> the</c><00:10:24.480><c> data</c><00:10:24.959><c> is</c><00:10:25.120><c> going</c><00:10:25.360><c> to</c><00:10:25.519><c> be</c>

00:10:25.750 --> 00:10:25.760 align:start position:0%
we know that the data is going to be
 

00:10:25.760 --> 00:10:27.430 align:start position:0%
we know that the data is going to be
comma<00:10:26.160><c> delimited</c><00:10:26.640><c> so</c><00:10:26.800><c> we're</c><00:10:26.959><c> basically</c><00:10:27.360><c> going</c>

00:10:27.430 --> 00:10:27.440 align:start position:0%
comma delimited so we're basically going
 

00:10:27.440 --> 00:10:28.230 align:start position:0%
comma delimited so we're basically going
to<00:10:27.600><c> split</c><00:10:28.000><c> it</c>

00:10:28.230 --> 00:10:28.240 align:start position:0%
to split it
 

00:10:28.240 --> 00:10:31.829 align:start position:0%
to split it
based<00:10:28.640><c> on</c><00:10:28.800><c> that</c><00:10:29.120><c> comma</c><00:10:29.600><c> into</c><00:10:30.000><c> an</c><00:10:30.240><c> array</c><00:10:31.040><c> a</c><00:10:31.279><c> list</c>

00:10:31.829 --> 00:10:31.839 align:start position:0%
based on that comma into an array a list
 

00:10:31.839 --> 00:10:32.230 align:start position:0%
based on that comma into an array a list
of

00:10:32.230 --> 00:10:32.240 align:start position:0%
of
 

00:10:32.240 --> 00:10:33.590 align:start position:0%
of
the<00:10:32.399><c> data</c><00:10:32.720><c> that</c><00:10:32.800><c> we're</c><00:10:32.959><c> going</c><00:10:33.040><c> to</c><00:10:33.120><c> be</c><00:10:33.279><c> needing</c>

00:10:33.590 --> 00:10:33.600 align:start position:0%
the data that we're going to be needing
 

00:10:33.600 --> 00:10:35.670 align:start position:0%
the data that we're going to be needing
so<00:10:33.839><c> i'm</c><00:10:34.000><c> just</c><00:10:34.160><c> going</c><00:10:34.240><c> to</c><00:10:34.320><c> call</c><00:10:34.560><c> that</c><00:10:34.880><c> vals</c>

00:10:35.670 --> 00:10:35.680 align:start position:0%
so i'm just going to call that vals
 

00:10:35.680 --> 00:10:37.590 align:start position:0%
so i'm just going to call that vals
and<00:10:35.920><c> i'm</c><00:10:36.079><c> also</c><00:10:36.320><c> going</c><00:10:36.480><c> to</c><00:10:36.560><c> create</c><00:10:36.959><c> a</c><00:10:37.200><c> pointer</c>

00:10:37.590 --> 00:10:37.600 align:start position:0%
and i'm also going to create a pointer
 

00:10:37.600 --> 00:10:39.430 align:start position:0%
and i'm also going to create a pointer
i'm<00:10:37.760><c> going</c><00:10:37.839><c> to</c><00:10:37.920><c> call</c><00:10:38.079><c> it</c><00:10:38.240><c> self.i</c>

00:10:39.430 --> 00:10:39.440 align:start position:0%
i'm going to call it self.i
 

00:10:39.440 --> 00:10:41.110 align:start position:0%
i'm going to call it self.i
self<00:10:39.839><c> because</c><00:10:40.160><c> it's</c><00:10:40.320><c> going</c><00:10:40.399><c> to</c><00:10:40.480><c> be</c><00:10:40.640><c> a</c><00:10:40.720><c> member</c>

00:10:41.110 --> 00:10:41.120 align:start position:0%
self because it's going to be a member
 

00:10:41.120 --> 00:10:42.710 align:start position:0%
self because it's going to be a member
variable<00:10:41.600><c> of</c><00:10:41.760><c> this</c><00:10:42.079><c> class</c>

00:10:42.710 --> 00:10:42.720 align:start position:0%
variable of this class
 

00:10:42.720 --> 00:10:44.470 align:start position:0%
variable of this class
basically<00:10:43.279><c> because</c><00:10:43.680><c> we</c><00:10:43.839><c> want</c><00:10:44.000><c> it</c><00:10:44.079><c> to</c><00:10:44.240><c> be</c>

00:10:44.470 --> 00:10:44.480 align:start position:0%
basically because we want it to be
 

00:10:44.480 --> 00:10:46.310 align:start position:0%
basically because we want it to be
global<00:10:44.959><c> because</c><00:10:45.200><c> i'm</c><00:10:45.360><c> about</c><00:10:45.600><c> to</c><00:10:45.760><c> define</c>

00:10:46.310 --> 00:10:46.320 align:start position:0%
global because i'm about to define
 

00:10:46.320 --> 00:10:46.949 align:start position:0%
global because i'm about to define
another

00:10:46.949 --> 00:10:46.959 align:start position:0%
another
 

00:10:46.959 --> 00:10:48.710 align:start position:0%
another
recursive<00:10:47.600><c> function</c><00:10:48.000><c> inside</c><00:10:48.399><c> of</c><00:10:48.480><c> this</c>

00:10:48.710 --> 00:10:48.720 align:start position:0%
recursive function inside of this
 

00:10:48.720 --> 00:10:50.550 align:start position:0%
recursive function inside of this
function<00:10:49.279><c> and</c><00:10:49.440><c> i</c><00:10:49.600><c> don't</c><00:10:49.760><c> even</c><00:10:49.920><c> need</c><00:10:50.079><c> to</c><00:10:50.240><c> pass</c>

00:10:50.550 --> 00:10:50.560 align:start position:0%
function and i don't even need to pass
 

00:10:50.560 --> 00:10:52.389 align:start position:0%
function and i don't even need to pass
any<00:10:50.800><c> variables</c><00:10:51.360><c> into</c><00:10:51.680><c> it</c><00:10:51.839><c> because</c>

00:10:52.389 --> 00:10:52.399 align:start position:0%
any variables into it because
 

00:10:52.399 --> 00:10:54.630 align:start position:0%
any variables into it because
the<00:10:52.640><c> self.i</c><00:10:53.519><c> is</c><00:10:53.680><c> global</c><00:10:54.240><c> so</c><00:10:54.399><c> i'm</c><00:10:54.480><c> going</c><00:10:54.480><c> to</c>

00:10:54.630 --> 00:10:54.640 align:start position:0%
the self.i is global so i'm going to
 

00:10:54.640 --> 00:10:56.470 align:start position:0%
the self.i is global so i'm going to
initialize<00:10:55.120><c> this</c><00:10:55.279><c> to</c><00:10:55.440><c> 0</c><00:10:55.839><c> indicating</c><00:10:56.320><c> we're</c>

00:10:56.470 --> 00:10:56.480 align:start position:0%
initialize this to 0 indicating we're
 

00:10:56.480 --> 00:10:57.829 align:start position:0%
initialize this to 0 indicating we're
going<00:10:56.560><c> to</c><00:10:56.720><c> start</c><00:10:56.959><c> at</c><00:10:57.120><c> the</c><00:10:57.360><c> first</c>

00:10:57.829 --> 00:10:57.839 align:start position:0%
going to start at the first
 

00:10:57.839 --> 00:11:00.870 align:start position:0%
going to start at the first
value<00:10:58.320><c> in</c><00:10:58.480><c> our</c><00:10:58.640><c> list</c><00:10:58.959><c> of</c><00:10:59.200><c> values</c><00:11:00.240><c> and</c><00:11:00.480><c> so</c><00:11:00.640><c> once</c>

00:11:00.870 --> 00:11:00.880 align:start position:0%
value in our list of values and so once
 

00:11:00.880 --> 00:11:02.069 align:start position:0%
value in our list of values and so once
again<00:11:01.120><c> we're</c><00:11:01.279><c> going</c><00:11:01.360><c> to</c><00:11:01.440><c> start</c><00:11:01.600><c> with</c><00:11:01.760><c> the</c><00:11:01.839><c> base</c>

00:11:02.069 --> 00:11:02.079 align:start position:0%
again we're going to start with the base
 

00:11:02.079 --> 00:11:03.509 align:start position:0%
again we're going to start with the base
case<00:11:02.320><c> now</c><00:11:02.480><c> what's</c><00:11:02.720><c> the</c><00:11:02.800><c> base</c><00:11:03.040><c> case</c><00:11:03.279><c> going</c><00:11:03.440><c> to</c>

00:11:03.509 --> 00:11:03.519 align:start position:0%
case now what's the base case going to
 

00:11:03.519 --> 00:11:04.389 align:start position:0%
case now what's the base case going to
be<00:11:03.680><c> well</c><00:11:03.920><c> if</c><00:11:04.079><c> our</c>

00:11:04.389 --> 00:11:04.399 align:start position:0%
be well if our
 

00:11:04.399 --> 00:11:07.030 align:start position:0%
be well if our
pointer<00:11:05.120><c> is</c><00:11:05.360><c> pointing</c><00:11:05.839><c> at</c><00:11:06.079><c> a</c><00:11:06.240><c> value</c><00:11:06.720><c> in</c><00:11:06.880><c> the</c>

00:11:07.030 --> 00:11:07.040 align:start position:0%
pointer is pointing at a value in the
 

00:11:07.040 --> 00:11:07.670 align:start position:0%
pointer is pointing at a value in the
vowels

00:11:07.670 --> 00:11:07.680 align:start position:0%
vowels
 

00:11:07.680 --> 00:11:09.990 align:start position:0%
vowels
and<00:11:08.000><c> if</c><00:11:08.160><c> that</c><00:11:08.320><c> value</c><00:11:08.720><c> happens</c><00:11:08.959><c> to</c><00:11:09.120><c> be</c><00:11:09.440><c> null</c><00:11:09.839><c> now</c>

00:11:09.990 --> 00:11:10.000 align:start position:0%
and if that value happens to be null now
 

00:11:10.000 --> 00:11:11.509 align:start position:0%
and if that value happens to be null now
how<00:11:10.160><c> do</c><00:11:10.240><c> we</c><00:11:10.399><c> know</c><00:11:10.640><c> if</c><00:11:10.880><c> it's</c><00:11:11.120><c> null</c>

00:11:11.509 --> 00:11:11.519 align:start position:0%
how do we know if it's null
 

00:11:11.519 --> 00:11:13.670 align:start position:0%
how do we know if it's null
well<00:11:11.680><c> that's</c><00:11:12.000><c> pretty</c><00:11:12.240><c> easy</c><00:11:12.560><c> right</c><00:11:13.040><c> we</c><00:11:13.200><c> can</c><00:11:13.279><c> say</c>

00:11:13.670 --> 00:11:13.680 align:start position:0%
well that's pretty easy right we can say
 

00:11:13.680 --> 00:11:15.269 align:start position:0%
well that's pretty easy right we can say
vals<00:11:14.399><c> at</c><00:11:14.720><c> index</c>

00:11:15.269 --> 00:11:15.279 align:start position:0%
vals at index
 

00:11:15.279 --> 00:11:17.829 align:start position:0%
vals at index
self<00:11:15.600><c> dot</c><00:11:16.160><c> i</c><00:11:16.640><c> and</c><00:11:16.800><c> if</c><00:11:16.959><c> it</c><00:11:17.040><c> happens</c><00:11:17.360><c> to</c><00:11:17.440><c> be</c><00:11:17.600><c> equal</c>

00:11:17.829 --> 00:11:17.839 align:start position:0%
self dot i and if it happens to be equal
 

00:11:17.839 --> 00:11:18.790 align:start position:0%
self dot i and if it happens to be equal
to<00:11:18.000><c> the</c><00:11:18.079><c> character</c><00:11:18.560><c> n</c>

00:11:18.790 --> 00:11:18.800 align:start position:0%
to the character n
 

00:11:18.800 --> 00:11:20.550 align:start position:0%
to the character n
we<00:11:18.959><c> know</c><00:11:19.120><c> that's</c><00:11:19.600><c> null</c><00:11:20.000><c> so</c><00:11:20.160><c> what</c><00:11:20.320><c> are</c><00:11:20.399><c> we</c><00:11:20.560><c> going</c>

00:11:20.550 --> 00:11:20.560 align:start position:0%
we know that's null so what are we going
 

00:11:20.560 --> 00:11:21.670 align:start position:0%
we know that's null so what are we going
to<00:11:20.640><c> do</c><00:11:20.800><c> we're</c><00:11:20.959><c> just</c><00:11:21.120><c> going</c><00:11:21.200><c> to</c><00:11:21.279><c> return</c><00:11:21.600><c> the</c>

00:11:21.670 --> 00:11:21.680 align:start position:0%
to do we're just going to return the
 

00:11:21.680 --> 00:11:22.870 align:start position:0%
to do we're just going to return the
base<00:11:21.839><c> case</c><00:11:22.079><c> we're</c><00:11:22.240><c> going</c><00:11:22.320><c> to</c><00:11:22.399><c> return</c>

00:11:22.870 --> 00:11:22.880 align:start position:0%
base case we're going to return
 

00:11:22.880 --> 00:11:25.590 align:start position:0%
base case we're going to return
a<00:11:23.279><c> null</c><00:11:23.600><c> node</c><00:11:24.079><c> if</c><00:11:24.320><c> it's</c><00:11:24.480><c> not</c><00:11:24.800><c> null</c><00:11:25.200><c> that</c><00:11:25.360><c> means</c>

00:11:25.590 --> 00:11:25.600 align:start position:0%
a null node if it's not null that means
 

00:11:25.600 --> 00:11:26.949 align:start position:0%
a null node if it's not null that means
we<00:11:25.760><c> have</c><00:11:25.839><c> some</c><00:11:26.000><c> work</c><00:11:26.240><c> to</c><00:11:26.320><c> do</c><00:11:26.480><c> right</c><00:11:26.640><c> we</c><00:11:26.720><c> have</c><00:11:26.880><c> to</c>

00:11:26.949 --> 00:11:26.959 align:start position:0%
we have some work to do right we have to
 

00:11:26.959 --> 00:11:28.389 align:start position:0%
we have some work to do right we have to
create<00:11:27.440><c> a</c><00:11:27.600><c> tree</c><00:11:27.920><c> node</c>

00:11:28.389 --> 00:11:28.399 align:start position:0%
create a tree node
 

00:11:28.399 --> 00:11:30.790 align:start position:0%
create a tree node
with<00:11:28.640><c> that</c><00:11:28.959><c> particular</c><00:11:29.600><c> value</c><00:11:30.320><c> but</c><00:11:30.480><c> we</c><00:11:30.640><c> know</c>

00:11:30.790 --> 00:11:30.800 align:start position:0%
with that particular value but we know
 

00:11:30.800 --> 00:11:31.750 align:start position:0%
with that particular value but we know
this<00:11:31.120><c> valves</c>

00:11:31.750 --> 00:11:31.760 align:start position:0%
this valves
 

00:11:31.760 --> 00:11:34.710 align:start position:0%
this valves
at<00:11:31.920><c> self.i</c><00:11:33.200><c> we</c><00:11:33.360><c> know</c><00:11:33.519><c> this</c><00:11:33.680><c> is</c><00:11:33.839><c> going</c><00:11:34.000><c> to</c><00:11:34.160><c> be</c><00:11:34.399><c> a</c>

00:11:34.710 --> 00:11:34.720 align:start position:0%
at self.i we know this is going to be a
 

00:11:34.720 --> 00:11:35.750 align:start position:0%
at self.i we know this is going to be a
string<00:11:35.120><c> right</c><00:11:35.360><c> so</c>

00:11:35.750 --> 00:11:35.760 align:start position:0%
string right so
 

00:11:35.760 --> 00:11:37.670 align:start position:0%
string right so
and<00:11:35.920><c> we</c><00:11:36.000><c> know</c><00:11:36.160><c> that</c><00:11:36.399><c> tree</c><00:11:36.640><c> nodes</c><00:11:36.959><c> have</c><00:11:37.200><c> integer</c>

00:11:37.670 --> 00:11:37.680 align:start position:0%
and we know that tree nodes have integer
 

00:11:37.680 --> 00:11:38.949 align:start position:0%
and we know that tree nodes have integer
values<00:11:38.000><c> so</c><00:11:38.079><c> we're</c><00:11:38.240><c> going</c><00:11:38.320><c> to</c><00:11:38.399><c> convert</c><00:11:38.720><c> this</c>

00:11:38.949 --> 00:11:38.959 align:start position:0%
values so we're going to convert this
 

00:11:38.959 --> 00:11:39.430 align:start position:0%
values so we're going to convert this
into<00:11:39.200><c> an</c>

00:11:39.430 --> 00:11:39.440 align:start position:0%
into an
 

00:11:39.440 --> 00:11:41.990 align:start position:0%
into an
integer<00:11:39.760><c> before</c><00:11:40.079><c> we</c><00:11:40.240><c> pass</c><00:11:40.480><c> it</c><00:11:40.720><c> in</c><00:11:41.200><c> and</c><00:11:41.440><c> so</c><00:11:41.600><c> this</c>

00:11:41.990 --> 00:11:42.000 align:start position:0%
integer before we pass it in and so this
 

00:11:42.000 --> 00:11:43.990 align:start position:0%
integer before we pass it in and so this
node<00:11:42.399><c> is</c><00:11:42.560><c> going</c><00:11:42.720><c> to</c><00:11:42.880><c> be</c><00:11:43.120><c> referred</c><00:11:43.600><c> to</c>

00:11:43.990 --> 00:11:44.000 align:start position:0%
node is going to be referred to
 

00:11:44.000 --> 00:11:46.389 align:start position:0%
node is going to be referred to
as<00:11:44.320><c> node</c><00:11:45.200><c> one</c><00:11:45.440><c> thing</c><00:11:45.600><c> i</c><00:11:45.760><c> actually</c><00:11:46.079><c> almost</c>

00:11:46.389 --> 00:11:46.399 align:start position:0%
as node one thing i actually almost
 

00:11:46.399 --> 00:11:47.110 align:start position:0%
as node one thing i actually almost
forgot

00:11:47.110 --> 00:11:47.120 align:start position:0%
forgot
 

00:11:47.120 --> 00:11:49.110 align:start position:0%
forgot
if<00:11:47.360><c> we're</c><00:11:47.600><c> create</c><00:11:48.079><c> if</c><00:11:48.160><c> we're</c><00:11:48.320><c> saying</c><00:11:48.640><c> that</c><00:11:48.959><c> the</c>

00:11:49.110 --> 00:11:49.120 align:start position:0%
if we're create if we're saying that the
 

00:11:49.120 --> 00:11:50.710 align:start position:0%
if we're create if we're saying that the
value<00:11:49.519><c> at</c><00:11:49.760><c> this</c><00:11:50.000><c> vowels</c>

00:11:50.710 --> 00:11:50.720 align:start position:0%
value at this vowels
 

00:11:50.720 --> 00:11:53.190 align:start position:0%
value at this vowels
is<00:11:51.360><c> null</c><00:11:51.920><c> so</c><00:11:52.079><c> we're</c><00:11:52.320><c> basically</c><00:11:52.720><c> saying</c><00:11:52.959><c> we're</c>

00:11:53.190 --> 00:11:53.200 align:start position:0%
is null so we're basically saying we're
 

00:11:53.200 --> 00:11:55.670 align:start position:0%
is null so we're basically saying we're
done<00:11:53.600><c> visiting</c><00:11:54.079><c> this</c><00:11:54.320><c> right</c><00:11:54.480><c> we're</c><00:11:55.040><c> returning</c>

00:11:55.670 --> 00:11:55.680 align:start position:0%
done visiting this right we're returning
 

00:11:55.680 --> 00:11:59.509 align:start position:0%
done visiting this right we're returning
null<00:11:56.160><c> for</c><00:11:56.560><c> this</c><00:11:57.120><c> n</c><00:11:57.920><c> in</c><00:11:58.079><c> our</c><00:11:58.240><c> values</c><00:11:58.720><c> array</c><00:11:59.040><c> so</c>

00:11:59.509 --> 00:11:59.519 align:start position:0%
null for this n in our values array so
 

00:11:59.519 --> 00:12:01.190 align:start position:0%
null for this n in our values array so
before<00:11:59.920><c> we</c><00:12:00.079><c> return</c><00:12:00.480><c> we</c><00:12:00.639><c> want</c><00:12:00.800><c> to</c><00:12:00.880><c> make</c><00:12:01.040><c> sure</c>

00:12:01.190 --> 00:12:01.200 align:start position:0%
before we return we want to make sure
 

00:12:01.200 --> 00:12:03.590 align:start position:0%
before we return we want to make sure
that<00:12:01.360><c> we</c><00:12:01.600><c> increment</c><00:12:02.160><c> i</c><00:12:02.480><c> so</c><00:12:02.720><c> self.i</c>

00:12:03.590 --> 00:12:03.600 align:start position:0%
that we increment i so self.i
 

00:12:03.600 --> 00:12:06.870 align:start position:0%
that we increment i so self.i
plus<00:12:04.399><c> one</c><00:12:04.639><c> so</c><00:12:04.800><c> that</c><00:12:05.040><c> next</c><00:12:05.360><c> time</c><00:12:05.839><c> we</c><00:12:06.079><c> go</c><00:12:06.399><c> we</c><00:12:06.560><c> call</c>

00:12:06.870 --> 00:12:06.880 align:start position:0%
plus one so that next time we go we call
 

00:12:06.880 --> 00:12:07.829 align:start position:0%
plus one so that next time we go we call
a<00:12:07.200><c> function</c>

00:12:07.829 --> 00:12:07.839 align:start position:0%
a function
 

00:12:07.839 --> 00:12:10.790 align:start position:0%
a function
that<00:12:08.000><c> we're</c><00:12:08.399><c> at</c><00:12:08.639><c> the</c><00:12:08.880><c> appropriate</c><00:12:10.079><c> value</c><00:12:10.560><c> in</c>

00:12:10.790 --> 00:12:10.800 align:start position:0%
that we're at the appropriate value in
 

00:12:10.800 --> 00:12:12.470 align:start position:0%
that we're at the appropriate value in
our<00:12:11.040><c> list</c><00:12:11.360><c> of</c><00:12:11.600><c> values</c>

00:12:12.470 --> 00:12:12.480 align:start position:0%
our list of values
 

00:12:12.480 --> 00:12:13.750 align:start position:0%
our list of values
and<00:12:12.639><c> that's</c><00:12:12.959><c> exactly</c><00:12:13.279><c> what</c><00:12:13.440><c> we're</c><00:12:13.600><c> going</c><00:12:13.680><c> to</c>

00:12:13.750 --> 00:12:13.760 align:start position:0%
and that's exactly what we're going to
 

00:12:13.760 --> 00:12:15.269 align:start position:0%
and that's exactly what we're going to
be<00:12:13.839><c> doing</c><00:12:14.079><c> down</c><00:12:14.320><c> here</c><00:12:14.560><c> too</c><00:12:14.720><c> right</c><00:12:14.880><c> so</c><00:12:15.120><c> since</c>

00:12:15.269 --> 00:12:15.279 align:start position:0%
be doing down here too right so since
 

00:12:15.279 --> 00:12:16.389 align:start position:0%
be doing down here too right so since
we're<00:12:15.519><c> already</c><00:12:15.920><c> using</c>

00:12:16.389 --> 00:12:16.399 align:start position:0%
we're already using
 

00:12:16.399 --> 00:12:18.949 align:start position:0%
we're already using
the<00:12:16.560><c> value</c><00:12:16.959><c> at</c><00:12:17.120><c> self.i</c><00:12:18.079><c> once</c><00:12:18.320><c> we</c><00:12:18.480><c> create</c><00:12:18.720><c> this</c>

00:12:18.949 --> 00:12:18.959 align:start position:0%
the value at self.i once we create this
 

00:12:18.959 --> 00:12:21.110 align:start position:0%
the value at self.i once we create this
tree<00:12:19.200><c> node</c><00:12:19.519><c> we</c><00:12:19.760><c> know</c><00:12:19.920><c> we</c><00:12:20.079><c> have</c><00:12:20.160><c> to</c><00:12:20.399><c> increment</c>

00:12:21.110 --> 00:12:21.120 align:start position:0%
tree node we know we have to increment
 

00:12:21.120 --> 00:12:23.590 align:start position:0%
tree node we know we have to increment
our<00:12:21.360><c> pointer</c><00:12:21.839><c> i</c><00:12:22.320><c> so</c><00:12:22.480><c> that</c><00:12:22.560><c> we</c><00:12:22.720><c> can</c><00:12:22.880><c> be</c><00:12:23.200><c> moving</c>

00:12:23.590 --> 00:12:23.600 align:start position:0%
our pointer i so that we can be moving
 

00:12:23.600 --> 00:12:24.790 align:start position:0%
our pointer i so that we can be moving
on<00:12:23.760><c> to</c><00:12:23.920><c> the</c><00:12:24.240><c> next</c>

00:12:24.790 --> 00:12:24.800 align:start position:0%
on to the next
 

00:12:24.800 --> 00:12:27.269 align:start position:0%
on to the next
value<00:12:25.200><c> that</c><00:12:25.360><c> we</c><00:12:25.440><c> need</c><00:12:25.600><c> to</c><00:12:25.760><c> create</c><00:12:26.240><c> a</c><00:12:26.399><c> node</c><00:12:26.720><c> for</c>

00:12:27.269 --> 00:12:27.279 align:start position:0%
value that we need to create a node for
 

00:12:27.279 --> 00:12:28.629 align:start position:0%
value that we need to create a node for
so<00:12:27.519><c> i'm</c><00:12:27.600><c> going</c><00:12:27.680><c> to</c><00:12:27.760><c> call</c><00:12:28.000><c> depth</c><00:12:28.240><c> first</c><00:12:28.399><c> search</c>

00:12:28.629 --> 00:12:28.639 align:start position:0%
so i'm going to call depth first search
 

00:12:28.639 --> 00:12:30.310 align:start position:0%
so i'm going to call depth first search
remember<00:12:29.040><c> we</c><00:12:29.200><c> don't</c><00:12:29.360><c> actually</c><00:12:29.600><c> have</c><00:12:29.760><c> to</c><00:12:30.000><c> pass</c>

00:12:30.310 --> 00:12:30.320 align:start position:0%
remember we don't actually have to pass
 

00:12:30.320 --> 00:12:32.310 align:start position:0%
remember we don't actually have to pass
any<00:12:30.560><c> parameters</c><00:12:31.200><c> into</c><00:12:31.440><c> this</c><00:12:31.680><c> and</c><00:12:31.839><c> the</c><00:12:31.920><c> return</c>

00:12:32.310 --> 00:12:32.320 align:start position:0%
any parameters into this and the return
 

00:12:32.320 --> 00:12:34.069 align:start position:0%
any parameters into this and the return
value<00:12:32.639><c> for</c><00:12:32.880><c> this</c><00:12:33.120><c> is</c><00:12:33.200><c> going</c><00:12:33.360><c> to</c><00:12:33.519><c> be</c><00:12:33.680><c> the</c><00:12:33.839><c> sub</c>

00:12:34.069 --> 00:12:34.079 align:start position:0%
value for this is going to be the sub
 

00:12:34.079 --> 00:12:35.430 align:start position:0%
value for this is going to be the sub
tree<00:12:34.399><c> i</c><00:12:34.560><c> created</c>

00:12:35.430 --> 00:12:35.440 align:start position:0%
tree i created
 

00:12:35.440 --> 00:12:38.629 align:start position:0%
tree i created
for<00:12:35.839><c> node</c><00:12:36.560><c> dot</c><00:12:37.279><c> left</c><00:12:37.600><c> it</c><00:12:37.680><c> could</c><00:12:38.000><c> be</c><00:12:38.240><c> null</c>

00:12:38.629 --> 00:12:38.639 align:start position:0%
for node dot left it could be null
 

00:12:38.639 --> 00:12:40.870 align:start position:0%
for node dot left it could be null
or<00:12:38.880><c> it</c><00:12:38.959><c> could</c><00:12:39.120><c> be</c><00:12:39.279><c> something</c><00:12:39.680><c> else</c><00:12:40.320><c> now</c><00:12:40.560><c> after</c>

00:12:40.870 --> 00:12:40.880 align:start position:0%
or it could be something else now after
 

00:12:40.880 --> 00:12:42.310 align:start position:0%
or it could be something else now after
calling<00:12:41.200><c> the</c><00:12:41.360><c> step</c><00:12:41.519><c> for</c><00:12:41.680><c> a</c><00:12:41.760><c> search</c><00:12:42.000><c> function</c>

00:12:42.310 --> 00:12:42.320 align:start position:0%
calling the step for a search function
 

00:12:42.320 --> 00:12:44.150 align:start position:0%
calling the step for a search function
we<00:12:42.480><c> don't</c><00:12:42.720><c> have</c><00:12:42.800><c> to</c><00:12:42.959><c> increment</c><00:12:43.440><c> self.i</c>

00:12:44.150 --> 00:12:44.160 align:start position:0%
we don't have to increment self.i
 

00:12:44.160 --> 00:12:45.269 align:start position:0%
we don't have to increment self.i
because<00:12:44.399><c> that's</c><00:12:44.560><c> going</c><00:12:44.639><c> to</c><00:12:44.720><c> be</c><00:12:44.880><c> happening</c>

00:12:45.269 --> 00:12:45.279 align:start position:0%
because that's going to be happening
 

00:12:45.279 --> 00:12:46.389 align:start position:0%
because that's going to be happening
recursively<00:12:46.000><c> so</c>

00:12:46.389 --> 00:12:46.399 align:start position:0%
recursively so
 

00:12:46.399 --> 00:12:47.910 align:start position:0%
recursively so
once<00:12:46.639><c> this</c><00:12:46.880><c> is</c><00:12:46.959><c> done</c><00:12:47.360><c> we're</c><00:12:47.519><c> going</c><00:12:47.600><c> to</c><00:12:47.680><c> do</c><00:12:47.760><c> the</c>

00:12:47.910 --> 00:12:47.920 align:start position:0%
once this is done we're going to do the
 

00:12:47.920 --> 00:12:49.829 align:start position:0%
once this is done we're going to do the
exact<00:12:48.240><c> same</c><00:12:48.399><c> thing</c><00:12:48.639><c> for</c><00:12:48.800><c> the</c><00:12:49.120><c> right</c><00:12:49.440><c> subtree</c>

00:12:49.829 --> 00:12:49.839 align:start position:0%
exact same thing for the right subtree
 

00:12:49.839 --> 00:12:50.470 align:start position:0%
exact same thing for the right subtree
so

00:12:50.470 --> 00:12:50.480 align:start position:0%
so
 

00:12:50.480 --> 00:12:52.949 align:start position:0%
so
uh<00:12:51.120><c> node.write</c><00:12:52.000><c> is</c><00:12:52.160><c> also</c><00:12:52.399><c> going</c><00:12:52.480><c> to</c><00:12:52.560><c> be</c>

00:12:52.949 --> 00:12:52.959 align:start position:0%
uh node.write is also going to be
 

00:12:52.959 --> 00:12:54.389 align:start position:0%
uh node.write is also going to be
basically<00:12:53.360><c> whatever</c><00:12:53.760><c> debt</c><00:12:53.920><c> for</c><00:12:54.160><c> search</c>

00:12:54.389 --> 00:12:54.399 align:start position:0%
basically whatever debt for search
 

00:12:54.399 --> 00:12:55.670 align:start position:0%
basically whatever debt for search
returns<00:12:54.959><c> for</c><00:12:55.120><c> us</c>

00:12:55.670 --> 00:12:55.680 align:start position:0%
returns for us
 

00:12:55.680 --> 00:12:57.990 align:start position:0%
returns for us
and<00:12:55.839><c> once</c><00:12:56.240><c> all</c><00:12:56.399><c> of</c><00:12:56.560><c> that</c><00:12:56.880><c> is</c><00:12:57.040><c> done</c><00:12:57.519><c> we</c><00:12:57.760><c> know</c>

00:12:57.990 --> 00:12:58.000 align:start position:0%
and once all of that is done we know
 

00:12:58.000 --> 00:13:00.230 align:start position:0%
and once all of that is done we know
that<00:12:58.160><c> we</c><00:12:58.320><c> can</c><00:12:58.560><c> simply</c><00:12:58.959><c> return</c><00:12:59.440><c> the</c><00:12:59.680><c> node</c><00:13:00.079><c> the</c>

00:13:00.230 --> 00:13:00.240 align:start position:0%
that we can simply return the node the
 

00:13:00.240 --> 00:13:02.230 align:start position:0%
that we can simply return the node the
root<00:13:00.480><c> node</c><00:13:00.720><c> that</c><00:13:00.800><c> we</c><00:13:00.959><c> ended</c><00:13:01.279><c> up</c><00:13:01.440><c> creating</c>

00:13:02.230 --> 00:13:02.240 align:start position:0%
root node that we ended up creating
 

00:13:02.240 --> 00:13:03.509 align:start position:0%
root node that we ended up creating
and<00:13:02.399><c> then</c><00:13:02.560><c> once</c><00:13:02.880><c> that's</c><00:13:03.120><c> done</c><00:13:03.360><c> we've</c>

00:13:03.509 --> 00:13:03.519 align:start position:0%
and then once that's done we've
 

00:13:03.519 --> 00:13:05.269 align:start position:0%
and then once that's done we've
basically<00:13:04.000><c> defined</c><00:13:04.480><c> our</c><00:13:04.639><c> debt</c><00:13:04.800><c> for</c><00:13:04.959><c> search</c>

00:13:05.269 --> 00:13:05.279 align:start position:0%
basically defined our debt for search
 

00:13:05.279 --> 00:13:06.470 align:start position:0%
basically defined our debt for search
function<00:13:05.600><c> so</c><00:13:05.760><c> what</c><00:13:05.920><c> are</c><00:13:06.000><c> we</c><00:13:06.079><c> going</c><00:13:06.160><c> to</c><00:13:06.320><c> do</c>

00:13:06.470 --> 00:13:06.480 align:start position:0%
function so what are we going to do
 

00:13:06.480 --> 00:13:07.990 align:start position:0%
function so what are we going to do
we're<00:13:06.800><c> just</c><00:13:06.959><c> going</c><00:13:07.120><c> to</c><00:13:07.279><c> call</c><00:13:07.519><c> that</c><00:13:07.680><c> debt</c><00:13:07.839><c> for</c>

00:13:07.990 --> 00:13:08.000 align:start position:0%
we're just going to call that debt for
 

00:13:08.000 --> 00:13:09.030 align:start position:0%
we're just going to call that debt for
search<00:13:08.320><c> function</c>

00:13:09.030 --> 00:13:09.040 align:start position:0%
search function
 

00:13:09.040 --> 00:13:11.829 align:start position:0%
search function
and<00:13:09.279><c> return</c><00:13:10.079><c> the</c><00:13:10.240><c> result</c><00:13:10.800><c> because</c><00:13:11.440><c> for</c><00:13:11.600><c> this</c>

00:13:11.829 --> 00:13:11.839 align:start position:0%
and return the result because for this
 

00:13:11.839 --> 00:13:13.590 align:start position:0%
and return the result because for this
function<00:13:12.160><c> we're</c><00:13:12.320><c> taking</c><00:13:12.720><c> in</c><00:13:12.880><c> a</c><00:13:12.959><c> string</c><00:13:13.440><c> of</c>

00:13:13.590 --> 00:13:13.600 align:start position:0%
function we're taking in a string of
 

00:13:13.600 --> 00:13:15.509 align:start position:0%
function we're taking in a string of
data<00:13:14.000><c> and</c><00:13:14.079><c> then</c><00:13:14.320><c> converting</c><00:13:14.800><c> it</c><00:13:14.880><c> into</c><00:13:15.120><c> a</c><00:13:15.200><c> tree</c>

00:13:15.509 --> 00:13:15.519 align:start position:0%
data and then converting it into a tree
 

00:13:15.519 --> 00:13:17.030 align:start position:0%
data and then converting it into a tree
and<00:13:15.600><c> then</c><00:13:15.760><c> returning</c><00:13:16.240><c> that</c><00:13:16.480><c> tree</c>

00:13:17.030 --> 00:13:17.040 align:start position:0%
and then returning that tree
 

00:13:17.040 --> 00:13:19.269 align:start position:0%
and then returning that tree
this<00:13:17.279><c> problem</c><00:13:17.760><c> is</c><00:13:17.920><c> not</c><00:13:18.079><c> too</c><00:13:18.320><c> bad</c><00:13:18.720><c> if</c><00:13:18.880><c> you</c><00:13:19.040><c> do</c>

00:13:19.269 --> 00:13:19.279 align:start position:0%
this problem is not too bad if you do
 

00:13:19.279 --> 00:13:21.110 align:start position:0%
this problem is not too bad if you do
have<00:13:19.440><c> a</c><00:13:19.600><c> pretty</c><00:13:19.920><c> good</c><00:13:20.160><c> understanding</c><00:13:20.880><c> of</c>

00:13:21.110 --> 00:13:21.120 align:start position:0%
have a pretty good understanding of
 

00:13:21.120 --> 00:13:22.470 align:start position:0%
have a pretty good understanding of
depth<00:13:21.360><c> first</c><00:13:21.519><c> search</c><00:13:21.839><c> or</c><00:13:22.000><c> pre-order</c>

00:13:22.470 --> 00:13:22.480 align:start position:0%
depth first search or pre-order
 

00:13:22.480 --> 00:13:23.990 align:start position:0%
depth first search or pre-order
traversal<00:13:23.040><c> or</c><00:13:23.279><c> you</c><00:13:23.440><c> know</c><00:13:23.600><c> just</c>

00:13:23.990 --> 00:13:24.000 align:start position:0%
traversal or you know just
 

00:13:24.000 --> 00:13:26.790 align:start position:0%
traversal or you know just
general<00:13:24.639><c> binary</c><00:13:25.120><c> tree</c><00:13:25.440><c> traversals</c><00:13:26.560><c> you</c><00:13:26.720><c> could</c>

00:13:26.790 --> 00:13:26.800 align:start position:0%
general binary tree traversals you could
 

00:13:26.800 --> 00:13:28.470 align:start position:0%
general binary tree traversals you could
do<00:13:26.959><c> this</c><00:13:27.200><c> with</c><00:13:27.440><c> breadth-first</c><00:13:27.920><c> search</c><00:13:28.240><c> if</c><00:13:28.320><c> you</c>

00:13:28.470 --> 00:13:28.480 align:start position:0%
do this with breadth-first search if you
 

00:13:28.480 --> 00:13:29.910 align:start position:0%
do this with breadth-first search if you
really<00:13:28.720><c> wanted</c><00:13:28.959><c> to</c><00:13:29.120><c> it</c><00:13:29.200><c> just</c><00:13:29.440><c> takes</c><00:13:29.680><c> a</c><00:13:29.760><c> little</c>

00:13:29.910 --> 00:13:29.920 align:start position:0%
really wanted to it just takes a little
 

00:13:29.920 --> 00:13:31.430 align:start position:0%
really wanted to it just takes a little
bit<00:13:30.079><c> more</c><00:13:30.320><c> code</c><00:13:30.560><c> but</c><00:13:30.720><c> you</c><00:13:30.800><c> can</c><00:13:30.959><c> see</c><00:13:31.120><c> that</c><00:13:31.200><c> this</c>

00:13:31.430 --> 00:13:31.440 align:start position:0%
bit more code but you can see that this
 

00:13:31.440 --> 00:13:33.430 align:start position:0%
bit more code but you can see that this
is<00:13:31.600><c> a</c><00:13:31.760><c> pretty</c><00:13:32.000><c> efficient</c><00:13:32.399><c> enough</c><00:13:32.720><c> solution</c>

00:13:33.430 --> 00:13:33.440 align:start position:0%
is a pretty efficient enough solution
 

00:13:33.440 --> 00:13:35.190 align:start position:0%
is a pretty efficient enough solution
this<00:13:33.600><c> is</c><00:13:33.760><c> about</c><00:13:34.079><c> as</c><00:13:34.160><c> good</c><00:13:34.320><c> as</c><00:13:34.480><c> it</c><00:13:34.639><c> gets</c><00:13:34.959><c> so</c><00:13:35.120><c> i</c>

00:13:35.190 --> 00:13:35.200 align:start position:0%
this is about as good as it gets so i
 

00:13:35.200 --> 00:13:36.470 align:start position:0%
this is about as good as it gets so i
hope<00:13:35.360><c> that</c><00:13:35.519><c> this</c><00:13:35.680><c> was</c><00:13:35.839><c> helpful</c>

00:13:36.470 --> 00:13:36.480 align:start position:0%
hope that this was helpful
 

00:13:36.480 --> 00:13:38.470 align:start position:0%
hope that this was helpful
if<00:13:36.639><c> it</c><00:13:36.800><c> was</c><00:13:37.120><c> please</c><00:13:37.440><c> like</c><00:13:37.680><c> and</c><00:13:37.760><c> subscribe</c><00:13:38.320><c> it</c>

00:13:38.470 --> 00:13:38.480 align:start position:0%
if it was please like and subscribe it
 

00:13:38.480 --> 00:13:40.550 align:start position:0%
if it was please like and subscribe it
supports<00:13:38.880><c> the</c><00:13:38.959><c> channel</c><00:13:39.440><c> a</c><00:13:39.760><c> lot</c><00:13:40.160><c> and</c><00:13:40.320><c> i'll</c>

00:13:40.550 --> 00:13:40.560 align:start position:0%
supports the channel a lot and i'll
 

00:13:40.560 --> 00:13:41.350 align:start position:0%
supports the channel a lot and i'll
hopefully

00:13:41.350 --> 00:13:41.360 align:start position:0%
hopefully
 

00:13:41.360 --> 00:13:49.600 align:start position:0%
hopefully
see<00:13:41.519><c> you</c><00:13:41.600><c> pretty</c><00:13:41.920><c> soon</c><00:13:42.560><c> thanks</c><00:13:42.800><c> for</c><00:13:46.600><c> watching</c>

