WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.070 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.880><c> welcome</c><00:00:01.360><c> back</c><00:00:01.680><c> and</c><00:00:01.839><c> let's</c>

00:00:02.070 --> 00:00:02.080 align:start position:0%
hey everyone welcome back and let's
 

00:00:02.080 --> 00:00:04.230 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.320><c> some</c><00:00:02.480><c> more</c><00:00:02.800><c> neat</c><00:00:03.040><c> code</c><00:00:03.360><c> today</c><00:00:03.679><c> so</c><00:00:03.840><c> today</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
write some more neat code today so today
 

00:00:04.240 --> 00:00:06.789 align:start position:0%
write some more neat code today so today
let's<00:00:04.400><c> solve</c><00:00:04.720><c> the</c><00:00:04.960><c> problem</c><00:00:05.520><c> find</c><00:00:06.080><c> minimum</c><00:00:06.640><c> in</c>

00:00:06.789 --> 00:00:06.799 align:start position:0%
let's solve the problem find minimum in
 

00:00:06.799 --> 00:00:10.709 align:start position:0%
let's solve the problem find minimum in
a<00:00:07.040><c> rotated</c><00:00:07.919><c> sorted</c><00:00:08.480><c> array</c><00:00:09.519><c> so</c><00:00:09.760><c> we</c><00:00:09.920><c> are</c><00:00:10.160><c> given</c>

00:00:10.709 --> 00:00:10.719 align:start position:0%
a rotated sorted array so we are given
 

00:00:10.719 --> 00:00:13.749 align:start position:0%
a rotated sorted array so we are given
an<00:00:11.040><c> input</c><00:00:11.519><c> array</c><00:00:12.000><c> of</c><00:00:12.240><c> length</c><00:00:12.719><c> n</c><00:00:13.040><c> that</c><00:00:13.440><c> is</c>

00:00:13.749 --> 00:00:13.759 align:start position:0%
an input array of length n that is
 

00:00:13.759 --> 00:00:17.109 align:start position:0%
an input array of length n that is
assorted<00:00:14.639><c> in</c><00:00:14.960><c> ascending</c><00:00:15.679><c> order</c><00:00:16.240><c> but</c><00:00:16.560><c> it</c><00:00:16.880><c> could</c>

00:00:17.109 --> 00:00:17.119 align:start position:0%
assorted in ascending order but it could
 

00:00:17.119 --> 00:00:18.870 align:start position:0%
assorted in ascending order but it could
be<00:00:17.600><c> rotated</c>

00:00:18.870 --> 00:00:18.880 align:start position:0%
be rotated
 

00:00:18.880 --> 00:00:22.390 align:start position:0%
be rotated
one<00:00:19.199><c> to</c><00:00:19.520><c> n</c><00:00:19.920><c> times</c><00:00:20.720><c> for</c><00:00:20.960><c> example</c><00:00:21.520><c> if</c><00:00:21.760><c> we</c><00:00:21.920><c> have</c><00:00:22.240><c> an</c>

00:00:22.390 --> 00:00:22.400 align:start position:0%
one to n times for example if we have an
 

00:00:22.400 --> 00:00:24.710 align:start position:0%
one to n times for example if we have an
array<00:00:22.720><c> like</c><00:00:23.119><c> one</c><00:00:23.760><c> two</c>

00:00:24.710 --> 00:00:24.720 align:start position:0%
array like one two
 

00:00:24.720 --> 00:00:27.990 align:start position:0%
array like one two
one<00:00:25.039><c> zero</c><00:00:25.439><c> one</c><00:00:25.680><c> two</c><00:00:26.240><c> right</c><00:00:26.720><c> to</c><00:00:26.960><c> rotate</c><00:00:27.519><c> it</c><00:00:27.680><c> by</c>

00:00:27.990 --> 00:00:28.000 align:start position:0%
one zero one two right to rotate it by
 

00:00:28.000 --> 00:00:29.669 align:start position:0%
one zero one two right to rotate it by
one<00:00:28.320><c> basically</c><00:00:28.880><c> means</c><00:00:29.119><c> to</c><00:00:29.279><c> take</c><00:00:29.439><c> the</c>

00:00:29.669 --> 00:00:29.679 align:start position:0%
one basically means to take the
 

00:00:29.679 --> 00:00:32.549 align:start position:0%
one basically means to take the
rightmost<00:00:30.240><c> element</c><00:00:30.960><c> you</c><00:00:31.039><c> know</c><00:00:31.599><c> move</c><00:00:31.920><c> it</c><00:00:32.320><c> to</c>

00:00:32.549 --> 00:00:32.559 align:start position:0%
rightmost element you know move it to
 

00:00:32.559 --> 00:00:34.150 align:start position:0%
rightmost element you know move it to
the<00:00:32.800><c> beginning</c>

00:00:34.150 --> 00:00:34.160 align:start position:0%
the beginning
 

00:00:34.160 --> 00:00:36.950 align:start position:0%
the beginning
like<00:00:34.800><c> this</c><00:00:35.200><c> right</c><00:00:35.440><c> so</c><00:00:35.680><c> this</c><00:00:36.000><c> has</c><00:00:36.160><c> been</c><00:00:36.399><c> rotated</c>

00:00:36.950 --> 00:00:36.960 align:start position:0%
like this right so this has been rotated
 

00:00:36.960 --> 00:00:39.350 align:start position:0%
like this right so this has been rotated
by<00:00:37.360><c> one</c><00:00:37.680><c> we</c><00:00:37.760><c> could</c><00:00:37.920><c> also</c><00:00:38.239><c> rotate</c><00:00:38.640><c> it</c><00:00:38.719><c> by</c><00:00:38.960><c> two</c><00:00:39.200><c> by</c>

00:00:39.350 --> 00:00:39.360 align:start position:0%
by one we could also rotate it by two by
 

00:00:39.360 --> 00:00:42.229 align:start position:0%
by one we could also rotate it by two by
taking<00:00:40.000><c> the</c><00:00:40.239><c> last</c><00:00:40.640><c> two</c><00:00:40.879><c> elements</c><00:00:41.680><c> and</c><00:00:41.920><c> moving</c>

00:00:42.229 --> 00:00:42.239 align:start position:0%
taking the last two elements and moving
 

00:00:42.239 --> 00:00:45.110 align:start position:0%
taking the last two elements and moving
them<00:00:42.480><c> to</c><00:00:42.719><c> the</c><00:00:42.879><c> beginning</c><00:00:43.680><c> so</c><00:00:44.079><c> something</c><00:00:44.399><c> like</c>

00:00:45.110 --> 00:00:45.120 align:start position:0%
them to the beginning so something like
 

00:00:45.120 --> 00:00:48.069 align:start position:0%
them to the beginning so something like
this<00:00:45.760><c> right</c><00:00:46.000><c> this</c><00:00:46.239><c> has</c><00:00:46.399><c> been</c><00:00:46.559><c> rotated</c><00:00:47.120><c> by</c><00:00:47.440><c> two</c>

00:00:48.069 --> 00:00:48.079 align:start position:0%
this right this has been rotated by two
 

00:00:48.079 --> 00:00:51.590 align:start position:0%
this right this has been rotated by two
and<00:00:48.239><c> so</c><00:00:48.559><c> we</c><00:00:48.879><c> want</c><00:00:49.520><c> to</c><00:00:49.920><c> find</c><00:00:50.239><c> the</c><00:00:50.399><c> minimum</c><00:00:50.879><c> value</c>

00:00:51.590 --> 00:00:51.600 align:start position:0%
and so we want to find the minimum value
 

00:00:51.600 --> 00:00:55.189 align:start position:0%
and so we want to find the minimum value
and<00:00:51.840><c> we</c><00:00:52.079><c> want</c><00:00:52.320><c> to</c><00:00:52.480><c> do</c><00:00:52.719><c> it</c><00:00:52.960><c> in</c><00:00:53.520><c> log</c><00:00:54.160><c> n</c><00:00:54.480><c> time</c><00:00:54.960><c> as</c>

00:00:55.189 --> 00:00:55.199 align:start position:0%
and we want to do it in log n time as
 

00:00:55.199 --> 00:00:57.670 align:start position:0%
and we want to do it in log n time as
they<00:00:55.440><c> say</c><00:00:56.000><c> the</c><00:00:56.160><c> good</c><00:00:56.320><c> thing</c><00:00:56.640><c> is</c><00:00:57.199><c> that</c><00:00:57.360><c> we</c><00:00:57.520><c> do</c>

00:00:57.670 --> 00:00:57.680 align:start position:0%
they say the good thing is that we do
 

00:00:57.680 --> 00:00:59.830 align:start position:0%
they say the good thing is that we do
have<00:00:58.079><c> some</c><00:00:58.320><c> kind</c><00:00:58.559><c> of</c><00:00:58.719><c> sorting</c><00:00:59.199><c> property</c><00:00:59.680><c> that</c>

00:00:59.830 --> 00:00:59.840 align:start position:0%
have some kind of sorting property that
 

00:00:59.840 --> 00:01:01.990 align:start position:0%
have some kind of sorting property that
we<00:00:59.920><c> can</c><00:01:00.079><c> use</c><00:01:00.320><c> to</c><00:01:00.399><c> our</c><00:01:00.559><c> advantage</c><00:01:01.199><c> to</c><00:01:01.440><c> find</c><00:01:01.680><c> this</c>

00:01:01.990 --> 00:01:02.000 align:start position:0%
we can use to our advantage to find this
 

00:01:02.000 --> 00:01:04.630 align:start position:0%
we can use to our advantage to find this
log<00:01:02.480><c> n</c><00:01:02.719><c> time</c><00:01:03.039><c> solution</c><00:01:03.840><c> and</c><00:01:04.239><c> we</c><00:01:04.479><c> are</c>

00:01:04.630 --> 00:01:04.640 align:start position:0%
log n time solution and we are
 

00:01:04.640 --> 00:01:06.789 align:start position:0%
log n time solution and we are
guaranteed<00:01:05.119><c> that</c><00:01:05.360><c> every</c><00:01:05.600><c> value</c><00:01:06.000><c> in</c><00:01:06.159><c> the</c><00:01:06.400><c> array</c>

00:01:06.789 --> 00:01:06.799 align:start position:0%
guaranteed that every value in the array
 

00:01:06.799 --> 00:01:09.109 align:start position:0%
guaranteed that every value in the array
happens<00:01:07.119><c> to</c><00:01:07.280><c> be</c><00:01:07.520><c> unique</c><00:01:08.400><c> of</c><00:01:08.560><c> course</c><00:01:08.880><c> it</c><00:01:08.960><c> would</c>

00:01:09.109 --> 00:01:09.119 align:start position:0%
happens to be unique of course it would
 

00:01:09.119 --> 00:01:11.429 align:start position:0%
happens to be unique of course it would
be<00:01:09.280><c> easy</c><00:01:09.600><c> to</c><00:01:09.760><c> find</c><00:01:10.159><c> a</c><00:01:10.320><c> linear</c><00:01:10.720><c> time</c><00:01:10.960><c> solution</c>

00:01:11.429 --> 00:01:11.439 align:start position:0%
be easy to find a linear time solution
 

00:01:11.439 --> 00:01:13.670 align:start position:0%
be easy to find a linear time solution
basically<00:01:11.920><c> just</c><00:01:12.080><c> scan</c><00:01:12.479><c> through</c><00:01:13.119><c> every</c><00:01:13.360><c> single</c>

00:01:13.670 --> 00:01:13.680 align:start position:0%
basically just scan through every single
 

00:01:13.680 --> 00:01:15.670 align:start position:0%
basically just scan through every single
value<00:01:14.080><c> in</c><00:01:14.240><c> the</c><00:01:14.400><c> array</c><00:01:14.799><c> and</c><00:01:14.880><c> then</c><00:01:15.280><c> take</c><00:01:15.439><c> the</c>

00:01:15.670 --> 00:01:15.680 align:start position:0%
value in the array and then take the
 

00:01:15.680 --> 00:01:18.149 align:start position:0%
value in the array and then take the
minimum<00:01:16.080><c> value</c><00:01:16.479><c> and</c><00:01:16.640><c> return</c><00:01:17.040><c> it</c><00:01:17.439><c> but</c><00:01:17.680><c> we</c><00:01:17.920><c> can</c>

00:01:18.149 --> 00:01:18.159 align:start position:0%
minimum value and return it but we can
 

00:01:18.159 --> 00:01:19.749 align:start position:0%
minimum value and return it but we can
use<00:01:18.400><c> the</c><00:01:18.560><c> sorting</c><00:01:18.960><c> property</c><00:01:19.360><c> to</c><00:01:19.600><c> our</c>

00:01:19.749 --> 00:01:19.759 align:start position:0%
use the sorting property to our
 

00:01:19.759 --> 00:01:21.830 align:start position:0%
use the sorting property to our
advantage<00:01:20.320><c> even</c><00:01:20.640><c> if</c><00:01:20.880><c> the</c><00:01:21.040><c> array</c><00:01:21.360><c> has</c><00:01:21.600><c> been</c>

00:01:21.830 --> 00:01:21.840 align:start position:0%
advantage even if the array has been
 

00:01:21.840 --> 00:01:23.830 align:start position:0%
advantage even if the array has been
rotated<00:01:22.400><c> let</c><00:01:22.560><c> me</c><00:01:22.799><c> show</c><00:01:22.960><c> you</c><00:01:23.200><c> how</c><00:01:23.360><c> we</c><00:01:23.520><c> can</c><00:01:23.680><c> do</c>

00:01:23.830 --> 00:01:23.840 align:start position:0%
rotated let me show you how we can do
 

00:01:23.840 --> 00:01:25.910 align:start position:0%
rotated let me show you how we can do
that<00:01:24.080><c> solution</c><00:01:24.799><c> as</c><00:01:25.040><c> you</c><00:01:25.200><c> might</c><00:01:25.439><c> be</c><00:01:25.520><c> able</c><00:01:25.680><c> to</c>

00:01:25.910 --> 00:01:25.920 align:start position:0%
that solution as you might be able to
 

00:01:25.920 --> 00:01:28.950 align:start position:0%
that solution as you might be able to
guess<00:01:26.400><c> it</c><00:01:26.640><c> is</c><00:01:26.880><c> going</c><00:01:27.119><c> to</c><00:01:27.360><c> involve</c><00:01:28.080><c> the</c><00:01:28.400><c> binary</c>

00:01:28.950 --> 00:01:28.960 align:start position:0%
guess it is going to involve the binary
 

00:01:28.960 --> 00:01:31.190 align:start position:0%
guess it is going to involve the binary
search<00:01:29.600><c> algorithm</c><00:01:30.159><c> which</c><00:01:30.479><c> is</c><00:01:30.640><c> usually</c><00:01:31.040><c> the</c>

00:01:31.190 --> 00:01:31.200 align:start position:0%
search algorithm which is usually the
 

00:01:31.200 --> 00:01:34.310 align:start position:0%
search algorithm which is usually the
algorithm<00:01:31.680><c> that</c><00:01:31.840><c> runs</c><00:01:32.320><c> in</c><00:01:32.640><c> log</c><00:01:33.119><c> and</c><00:01:33.439><c> time</c><00:01:34.159><c> so</c>

00:01:34.310 --> 00:01:34.320 align:start position:0%
algorithm that runs in log and time so
 

00:01:34.320 --> 00:01:36.149 align:start position:0%
algorithm that runs in log and time so
the<00:01:34.479><c> fact</c><00:01:34.720><c> that</c><00:01:34.880><c> the</c><00:01:35.040><c> array</c><00:01:35.360><c> was</c><00:01:35.600><c> originally</c>

00:01:36.149 --> 00:01:36.159 align:start position:0%
the fact that the array was originally
 

00:01:36.159 --> 00:01:38.149 align:start position:0%
the fact that the array was originally
sorted<00:01:36.640><c> is</c><00:01:36.720><c> what</c><00:01:36.960><c> hints</c><00:01:37.280><c> to</c><00:01:37.439><c> you</c><00:01:37.600><c> that</c><00:01:37.759><c> binary</c>

00:01:38.149 --> 00:01:38.159 align:start position:0%
sorted is what hints to you that binary
 

00:01:38.159 --> 00:01:40.149 align:start position:0%
sorted is what hints to you that binary
search<00:01:38.560><c> might</c><00:01:38.880><c> work</c><00:01:39.200><c> in</c><00:01:39.280><c> this</c><00:01:39.439><c> case</c><00:01:39.759><c> but</c><00:01:40.000><c> it's</c>

00:01:40.149 --> 00:01:40.159 align:start position:0%
search might work in this case but it's
 

00:01:40.159 --> 00:01:41.910 align:start position:0%
search might work in this case but it's
not<00:01:40.320><c> going</c><00:01:40.479><c> to</c><00:01:40.560><c> be</c><00:01:40.720><c> a</c><00:01:40.960><c> traditional</c><00:01:41.520><c> binary</c>

00:01:41.910 --> 00:01:41.920 align:start position:0%
not going to be a traditional binary
 

00:01:41.920 --> 00:01:44.550 align:start position:0%
not going to be a traditional binary
search<00:01:42.399><c> now</c><00:01:42.560><c> of</c><00:01:42.720><c> course</c><00:01:43.119><c> if</c><00:01:43.360><c> the</c><00:01:43.680><c> entire</c><00:01:44.240><c> array</c>

00:01:44.550 --> 00:01:44.560 align:start position:0%
search now of course if the entire array
 

00:01:44.560 --> 00:01:47.510 align:start position:0%
search now of course if the entire array
was<00:01:44.720><c> sort</c><00:01:45.040><c> was</c><00:01:45.439><c> uh</c><00:01:46.000><c> rotated</c><00:01:46.720><c> n</c><00:01:47.040><c> times</c><00:01:47.360><c> that</c>

00:01:47.510 --> 00:01:47.520 align:start position:0%
was sort was uh rotated n times that
 

00:01:47.520 --> 00:01:49.590 align:start position:0%
was sort was uh rotated n times that
basically<00:01:48.000><c> means</c><00:01:48.320><c> we</c><00:01:48.479><c> took</c><00:01:48.720><c> a</c><00:01:48.960><c> sorted</c><00:01:49.280><c> array</c>

00:01:49.590 --> 00:01:49.600 align:start position:0%
basically means we took a sorted array
 

00:01:49.600 --> 00:01:51.990 align:start position:0%
basically means we took a sorted array
such<00:01:49.840><c> as</c><00:01:50.079><c> one</c><00:01:50.399><c> two</c><00:01:50.720><c> three</c><00:01:50.960><c> four</c><00:01:51.200><c> five</c><00:01:51.520><c> rotated</c>

00:01:51.990 --> 00:01:52.000 align:start position:0%
such as one two three four five rotated
 

00:01:52.000 --> 00:01:54.469 align:start position:0%
such as one two three four five rotated
it<00:01:52.159><c> n</c><00:01:52.399><c> times</c><00:01:52.960><c> basically</c><00:01:53.439><c> leaving</c><00:01:53.840><c> it</c><00:01:54.240><c> in</c><00:01:54.320><c> the</c>

00:01:54.469 --> 00:01:54.479 align:start position:0%
it n times basically leaving it in the
 

00:01:54.479 --> 00:01:56.630 align:start position:0%
it n times basically leaving it in the
original<00:01:54.960><c> sorted</c><00:01:55.360><c> order</c><00:01:55.680><c> now</c><00:01:55.840><c> if</c><00:01:56.000><c> we</c><00:01:56.159><c> had</c><00:01:56.479><c> an</c>

00:01:56.630 --> 00:01:56.640 align:start position:0%
original sorted order now if we had an
 

00:01:56.640 --> 00:01:58.789 align:start position:0%
original sorted order now if we had an
array<00:01:56.960><c> that</c><00:01:57.200><c> was</c><00:01:57.680><c> completely</c><00:01:58.240><c> sorted</c><00:01:58.640><c> like</c>

00:01:58.789 --> 00:01:58.799 align:start position:0%
array that was completely sorted like
 

00:01:58.799 --> 00:02:01.030 align:start position:0%
array that was completely sorted like
this<00:01:59.040><c> one</c><00:01:59.520><c> an</c><00:01:59.680><c> easy</c><00:02:00.000><c> binary</c><00:02:00.479><c> search</c><00:02:00.799><c> would</c>

00:02:01.030 --> 00:02:01.040 align:start position:0%
this one an easy binary search would
 

00:02:01.040 --> 00:02:03.350 align:start position:0%
this one an easy binary search would
work<00:02:01.360><c> on</c><00:02:01.520><c> a</c><00:02:01.680><c> sorted</c><00:02:02.000><c> array</c><00:02:02.320><c> but</c><00:02:02.640><c> if</c><00:02:02.799><c> the</c><00:02:02.960><c> array</c>

00:02:03.350 --> 00:02:03.360 align:start position:0%
work on a sorted array but if the array
 

00:02:03.360 --> 00:02:05.190 align:start position:0%
work on a sorted array but if the array
is<00:02:03.520><c> fully</c><00:02:03.840><c> sorted</c><00:02:04.240><c> then</c><00:02:04.479><c> we</c><00:02:04.640><c> know</c><00:02:04.799><c> that</c><00:02:05.040><c> the</c>

00:02:05.190 --> 00:02:05.200 align:start position:0%
is fully sorted then we know that the
 

00:02:05.200 --> 00:02:06.789 align:start position:0%
is fully sorted then we know that the
minimum<00:02:05.600><c> value</c><00:02:06.000><c> is</c><00:02:06.079><c> going</c><00:02:06.320><c> to</c><00:02:06.399><c> be</c><00:02:06.560><c> the</c>

00:02:06.789 --> 00:02:06.799 align:start position:0%
minimum value is going to be the
 

00:02:06.799 --> 00:02:09.910 align:start position:0%
minimum value is going to be the
leftmost<00:02:07.439><c> right</c><00:02:07.600><c> so</c><00:02:07.680><c> if</c><00:02:07.920><c> at</c><00:02:08.080><c> any</c><00:02:08.319><c> point</c><00:02:08.800><c> we</c><00:02:09.119><c> get</c>

00:02:09.910 --> 00:02:09.920 align:start position:0%
leftmost right so if at any point we get
 

00:02:09.920 --> 00:02:11.830 align:start position:0%
leftmost right so if at any point we get
a<00:02:10.319><c> you</c><00:02:10.399><c> know</c><00:02:10.720><c> binary</c><00:02:11.120><c> search</c><00:02:11.360><c> is</c><00:02:11.440><c> going</c><00:02:11.520><c> to</c><00:02:11.599><c> run</c>

00:02:11.830 --> 00:02:11.840 align:start position:0%
a you know binary search is going to run
 

00:02:11.840 --> 00:02:13.510 align:start position:0%
a you know binary search is going to run
like<00:02:12.000><c> this</c><00:02:12.239><c> a</c><00:02:12.400><c> left</c><00:02:12.640><c> pointer</c><00:02:13.040><c> and</c><00:02:13.120><c> a</c><00:02:13.280><c> right</c>

00:02:13.510 --> 00:02:13.520 align:start position:0%
like this a left pointer and a right
 

00:02:13.520 --> 00:02:16.150 align:start position:0%
like this a left pointer and a right
pointer<00:02:13.920><c> if</c><00:02:14.000><c> we</c><00:02:14.239><c> ever</c><00:02:14.720><c> get</c><00:02:14.959><c> to</c><00:02:15.200><c> a</c><00:02:15.280><c> point</c><00:02:15.599><c> where</c>

00:02:16.150 --> 00:02:16.160 align:start position:0%
pointer if we ever get to a point where
 

00:02:16.160 --> 00:02:18.070 align:start position:0%
pointer if we ever get to a point where
the<00:02:16.480><c> entire</c><00:02:16.879><c> array</c><00:02:17.280><c> is</c><00:02:17.360><c> sorted</c><00:02:17.680><c> we</c><00:02:17.840><c> can</c><00:02:17.920><c> just</c>

00:02:18.070 --> 00:02:18.080 align:start position:0%
the entire array is sorted we can just
 

00:02:18.080 --> 00:02:20.229 align:start position:0%
the entire array is sorted we can just
return<00:02:18.480><c> the</c><00:02:18.720><c> leftmost</c><00:02:19.360><c> element</c><00:02:19.760><c> or</c><00:02:19.920><c> at</c><00:02:20.000><c> least</c>

00:02:20.229 --> 00:02:20.239 align:start position:0%
return the leftmost element or at least
 

00:02:20.239 --> 00:02:23.110 align:start position:0%
return the leftmost element or at least
consider<00:02:20.720><c> this</c><00:02:21.040><c> as</c><00:02:21.280><c> being</c><00:02:21.520><c> the</c><00:02:21.760><c> minimum</c><00:02:22.239><c> value</c>

00:02:23.110 --> 00:02:23.120 align:start position:0%
consider this as being the minimum value
 

00:02:23.120 --> 00:02:25.750 align:start position:0%
consider this as being the minimum value
so<00:02:23.280><c> let's</c><00:02:23.680><c> try</c><00:02:24.160><c> a</c><00:02:24.239><c> binary</c><00:02:24.720><c> search</c><00:02:25.040><c> and</c><00:02:25.280><c> see</c><00:02:25.520><c> how</c>

00:02:25.750 --> 00:02:25.760 align:start position:0%
so let's try a binary search and see how
 

00:02:25.760 --> 00:02:28.229 align:start position:0%
so let's try a binary search and see how
it's<00:02:26.000><c> going</c><00:02:26.160><c> to</c><00:02:26.319><c> be</c><00:02:26.640><c> different</c><00:02:27.440><c> than</c><00:02:28.000><c> a</c>

00:02:28.229 --> 00:02:28.239 align:start position:0%
it's going to be different than a
 

00:02:28.239 --> 00:02:30.710 align:start position:0%
it's going to be different than a
regular<00:02:28.640><c> binary</c><00:02:29.040><c> search</c><00:02:29.520><c> now</c><00:02:29.760><c> of</c><00:02:29.920><c> course</c><00:02:30.400><c> we</c>

00:02:30.710 --> 00:02:30.720 align:start position:0%
regular binary search now of course we
 

00:02:30.720 --> 00:02:32.790 align:start position:0%
regular binary search now of course we
want<00:02:31.040><c> to</c><00:02:31.599><c> find</c><00:02:31.840><c> the</c><00:02:31.920><c> minimum</c><00:02:32.319><c> value</c><00:02:32.640><c> we're</c>

00:02:32.790 --> 00:02:32.800 align:start position:0%
want to find the minimum value we're
 

00:02:32.800 --> 00:02:34.229 align:start position:0%
want to find the minimum value we're
going<00:02:32.879><c> to</c><00:02:32.959><c> initialize</c><00:02:33.519><c> our</c><00:02:33.680><c> left</c><00:02:33.840><c> pointer</c>

00:02:34.229 --> 00:02:34.239 align:start position:0%
going to initialize our left pointer
 

00:02:34.239 --> 00:02:35.430 align:start position:0%
going to initialize our left pointer
here<00:02:34.400><c> and</c><00:02:34.560><c> our</c><00:02:34.720><c> right</c><00:02:34.879><c> pointer</c><00:02:35.200><c> here</c>

00:02:35.430 --> 00:02:35.440 align:start position:0%
here and our right pointer here
 

00:02:35.440 --> 00:02:37.910 align:start position:0%
here and our right pointer here
basically<00:02:36.319><c> the</c><00:02:36.480><c> current</c><00:02:36.879><c> pointer</c><00:02:37.280><c> situation</c>

00:02:37.910 --> 00:02:37.920 align:start position:0%
basically the current pointer situation
 

00:02:37.920 --> 00:02:39.509 align:start position:0%
basically the current pointer situation
means<00:02:38.239><c> that</c><00:02:38.400><c> we</c><00:02:38.560><c> are</c><00:02:38.720><c> considering</c><00:02:39.280><c> this</c>

00:02:39.509 --> 00:02:39.519 align:start position:0%
means that we are considering this
 

00:02:39.519 --> 00:02:42.150 align:start position:0%
means that we are considering this
entire<00:02:40.160><c> array</c><00:02:40.879><c> to</c><00:02:41.280><c> find</c><00:02:41.519><c> the</c><00:02:41.680><c> minimum</c><00:02:42.080><c> the</c>

00:02:42.150 --> 00:02:42.160 align:start position:0%
entire array to find the minimum the
 

00:02:42.160 --> 00:02:44.630 align:start position:0%
entire array to find the minimum the
minimum<00:02:42.640><c> could</c><00:02:42.879><c> be</c><00:02:43.120><c> from</c><00:02:43.440><c> anywhere</c><00:02:44.080><c> in</c><00:02:44.319><c> this</c>

00:02:44.630 --> 00:02:44.640 align:start position:0%
minimum could be from anywhere in this
 

00:02:44.640 --> 00:02:47.430 align:start position:0%
minimum could be from anywhere in this
array<00:02:45.280><c> and</c><00:02:45.519><c> the</c><00:02:45.760><c> result</c><00:02:46.400><c> is</c><00:02:46.640><c> going</c><00:02:46.879><c> to</c><00:02:47.040><c> be</c><00:02:47.200><c> the</c>

00:02:47.430 --> 00:02:47.440 align:start position:0%
array and the result is going to be the
 

00:02:47.440 --> 00:02:49.030 align:start position:0%
array and the result is going to be the
minimum<00:02:48.000><c> and</c><00:02:48.239><c> i'm</c><00:02:48.400><c> going</c><00:02:48.480><c> to</c><00:02:48.560><c> keep</c><00:02:48.720><c> track</c><00:02:48.959><c> of</c>

00:02:49.030 --> 00:02:49.040 align:start position:0%
minimum and i'm going to keep track of
 

00:02:49.040 --> 00:02:51.670 align:start position:0%
minimum and i'm going to keep track of
that<00:02:49.280><c> over</c><00:02:49.599><c> here</c><00:02:50.160><c> now</c><00:02:50.319><c> of</c><00:02:50.480><c> course</c><00:02:50.959><c> one</c><00:02:51.280><c> way</c><00:02:51.519><c> we</c>

00:02:51.670 --> 00:02:51.680 align:start position:0%
that over here now of course one way we
 

00:02:51.680 --> 00:02:53.670 align:start position:0%
that over here now of course one way we
could<00:02:51.840><c> do</c><00:02:52.000><c> this</c><00:02:52.239><c> problem</c><00:02:52.560><c> is</c><00:02:52.640><c> basically</c><00:02:53.200><c> find</c>

00:02:53.670 --> 00:02:53.680 align:start position:0%
could do this problem is basically find
 

00:02:53.680 --> 00:02:56.070 align:start position:0%
could do this problem is basically find
the<00:02:53.920><c> pivot</c><00:02:54.319><c> right</c><00:02:54.560><c> find</c><00:02:54.879><c> the</c><00:02:55.040><c> position</c><00:02:55.519><c> where</c>

00:02:56.070 --> 00:02:56.080 align:start position:0%
the pivot right find the position where
 

00:02:56.080 --> 00:02:57.190 align:start position:0%
the pivot right find the position where
you<00:02:56.160><c> know</c><00:02:56.480><c> the</c>

00:02:57.190 --> 00:02:57.200 align:start position:0%
you know the
 

00:02:57.200 --> 00:02:58.990 align:start position:0%
you know the
the<00:02:57.360><c> elements</c><00:02:57.840><c> are</c><00:02:58.080><c> not</c><00:02:58.319><c> in</c>

00:02:58.990 --> 00:02:59.000 align:start position:0%
the elements are not in
 

00:02:59.000 --> 00:03:01.670 align:start position:0%
the elements are not in
increasing<00:03:00.080><c> order</c><00:03:00.400><c> right</c><00:03:00.560><c> from</c><00:03:00.959><c> from</c><00:03:01.120><c> here</c><00:03:01.440><c> to</c>

00:03:01.670 --> 00:03:01.680 align:start position:0%
increasing order right from from here to
 

00:03:01.680 --> 00:03:03.270 align:start position:0%
increasing order right from from here to
here<00:03:02.239><c> three</c><00:03:02.480><c> to</c><00:03:02.640><c> four</c><00:03:02.879><c> they're</c><00:03:03.120><c> in</c><00:03:03.280><c> an</c>

00:03:03.270 --> 00:03:03.280 align:start position:0%
here three to four they're in an
 

00:03:03.280 --> 00:03:05.270 align:start position:0%
here three to four they're in an
increasing<00:03:03.920><c> order</c><00:03:04.159><c> from</c><00:03:04.319><c> four</c><00:03:04.480><c> to</c><00:03:04.640><c> five</c><00:03:04.879><c> there</c>

00:03:05.270 --> 00:03:05.280 align:start position:0%
increasing order from four to five there
 

00:03:05.280 --> 00:03:07.430 align:start position:0%
increasing order from four to five there
they<00:03:05.440><c> are</c><00:03:05.680><c> in</c><00:03:05.920><c> increasing</c><00:03:06.400><c> order</c><00:03:06.800><c> from</c><00:03:07.040><c> one</c><00:03:07.280><c> to</c>

00:03:07.430 --> 00:03:07.440 align:start position:0%
they are in increasing order from one to
 

00:03:07.440 --> 00:03:09.670 align:start position:0%
they are in increasing order from one to
two<00:03:07.760><c> they're</c><00:03:08.000><c> also</c><00:03:08.480><c> in</c><00:03:08.720><c> increasing</c><00:03:09.200><c> order</c><00:03:09.440><c> but</c>

00:03:09.670 --> 00:03:09.680 align:start position:0%
two they're also in increasing order but
 

00:03:09.680 --> 00:03:11.910 align:start position:0%
two they're also in increasing order but
from<00:03:09.920><c> five</c><00:03:10.239><c> to</c><00:03:10.400><c> one</c><00:03:10.879><c> they're</c><00:03:11.120><c> in</c><00:03:11.280><c> decreasing</c>

00:03:11.910 --> 00:03:11.920 align:start position:0%
from five to one they're in decreasing
 

00:03:11.920 --> 00:03:13.670 align:start position:0%
from five to one they're in decreasing
order<00:03:12.159><c> this</c><00:03:12.400><c> is</c><00:03:12.480><c> the</c><00:03:12.640><c> pivot</c><00:03:13.120><c> right</c><00:03:13.440><c> so</c>

00:03:13.670 --> 00:03:13.680 align:start position:0%
order this is the pivot right so
 

00:03:13.680 --> 00:03:15.350 align:start position:0%
order this is the pivot right so
basically<00:03:14.159><c> this</c><00:03:14.400><c> value</c><00:03:14.720><c> is</c><00:03:14.879><c> going</c><00:03:15.040><c> to</c><00:03:15.120><c> be</c><00:03:15.280><c> the</c>

00:03:15.350 --> 00:03:15.360 align:start position:0%
basically this value is going to be the
 

00:03:15.360 --> 00:03:16.790 align:start position:0%
basically this value is going to be the
minimum<00:03:15.840><c> but</c><00:03:16.080><c> i'm</c><00:03:16.159><c> going</c><00:03:16.239><c> to</c><00:03:16.319><c> do</c><00:03:16.480><c> it</c><00:03:16.560><c> in</c><00:03:16.640><c> a</c>

00:03:16.790 --> 00:03:16.800 align:start position:0%
minimum but i'm going to do it in a
 

00:03:16.800 --> 00:03:17.990 align:start position:0%
minimum but i'm going to do it in a
slightly<00:03:17.120><c> different</c><00:03:17.360><c> way</c><00:03:17.519><c> where</c><00:03:17.680><c> we</c><00:03:17.840><c> don't</c>

00:03:17.990 --> 00:03:18.000 align:start position:0%
slightly different way where we don't
 

00:03:18.000 --> 00:03:20.149 align:start position:0%
slightly different way where we don't
necessarily<00:03:18.640><c> have</c><00:03:18.879><c> to</c><00:03:19.440><c> you</c><00:03:19.519><c> know</c><00:03:19.840><c> look</c>

00:03:20.149 --> 00:03:20.159 align:start position:0%
necessarily have to you know look
 

00:03:20.159 --> 00:03:21.990 align:start position:0%
necessarily have to you know look
exactly<00:03:20.640><c> for</c><00:03:20.879><c> the</c><00:03:21.040><c> pivot</c><00:03:21.360><c> i'm</c><00:03:21.519><c> going</c><00:03:21.599><c> to</c><00:03:21.760><c> take</c>

00:03:21.990 --> 00:03:22.000 align:start position:0%
exactly for the pivot i'm going to take
 

00:03:22.000 --> 00:03:24.550 align:start position:0%
exactly for the pivot i'm going to take
okay<00:03:22.319><c> left</c><00:03:22.720><c> right</c><00:03:23.360><c> take</c><00:03:23.599><c> the</c><00:03:23.760><c> half</c><00:03:24.000><c> of</c><00:03:24.080><c> them</c>

00:03:24.550 --> 00:03:24.560 align:start position:0%
okay left right take the half of them
 

00:03:24.560 --> 00:03:26.070 align:start position:0%
okay left right take the half of them
get<00:03:24.799><c> our</c><00:03:24.959><c> middle</c><00:03:25.280><c> pointer</c><00:03:25.599><c> our</c><00:03:25.680><c> middle</c><00:03:26.000><c> is</c>

00:03:26.070 --> 00:03:26.080 align:start position:0%
get our middle pointer our middle is
 

00:03:26.080 --> 00:03:28.710 align:start position:0%
get our middle pointer our middle is
going<00:03:26.159><c> to</c><00:03:26.239><c> be</c><00:03:26.400><c> over</c><00:03:26.640><c> here</c><00:03:26.959><c> at</c><00:03:27.280><c> 5.</c><00:03:28.000><c> so</c><00:03:28.400><c> i'm</c><00:03:28.560><c> going</c>

00:03:28.710 --> 00:03:28.720 align:start position:0%
going to be over here at 5. so i'm going
 

00:03:28.720 --> 00:03:30.949 align:start position:0%
going to be over here at 5. so i'm going
to<00:03:28.799><c> consider</c><00:03:29.200><c> as</c><00:03:29.440><c> 5</c><00:03:29.840><c> being</c><00:03:30.000><c> the</c><00:03:30.159><c> minimum</c><00:03:30.560><c> value</c>

00:03:30.949 --> 00:03:30.959 align:start position:0%
to consider as 5 being the minimum value
 

00:03:30.959 --> 00:03:33.110 align:start position:0%
to consider as 5 being the minimum value
we<00:03:31.120><c> have</c><00:03:31.360><c> seen</c><00:03:31.680><c> so</c><00:03:32.000><c> far</c><00:03:32.239><c> right</c><00:03:32.400><c> so</c><00:03:32.560><c> our</c><00:03:32.720><c> result</c>

00:03:33.110 --> 00:03:33.120 align:start position:0%
we have seen so far right so our result
 

00:03:33.120 --> 00:03:35.509 align:start position:0%
we have seen so far right so our result
is<00:03:33.280><c> going</c><00:03:33.440><c> to</c><00:03:33.599><c> be</c><00:03:33.920><c> five</c><00:03:34.720><c> now</c>

00:03:35.509 --> 00:03:35.519 align:start position:0%
is going to be five now
 

00:03:35.519 --> 00:03:38.070 align:start position:0%
is going to be five now
now<00:03:35.760><c> we</c><00:03:35.920><c> have</c><00:03:36.000><c> to</c><00:03:36.159><c> ask</c><00:03:36.480><c> ourselves</c><00:03:37.120><c> okay</c>

00:03:38.070 --> 00:03:38.080 align:start position:0%
now we have to ask ourselves okay
 

00:03:38.080 --> 00:03:39.670 align:start position:0%
now we have to ask ourselves okay
you<00:03:38.239><c> know</c><00:03:38.480><c> this</c><00:03:38.720><c> could</c><00:03:38.959><c> have</c><00:03:39.040><c> been</c><00:03:39.200><c> the</c><00:03:39.360><c> result</c>

00:03:39.670 --> 00:03:39.680 align:start position:0%
you know this could have been the result
 

00:03:39.680 --> 00:03:41.589 align:start position:0%
you know this could have been the result
but<00:03:39.840><c> now</c><00:03:40.239><c> we</c><00:03:40.400><c> don't</c><00:03:40.640><c> want</c><00:03:40.879><c> to</c><00:03:41.120><c> you</c><00:03:41.280><c> know</c><00:03:41.360><c> look</c>

00:03:41.589 --> 00:03:41.599 align:start position:0%
but now we don't want to you know look
 

00:03:41.599 --> 00:03:43.030 align:start position:0%
but now we don't want to you know look
at<00:03:41.680><c> this</c><00:03:41.840><c> value</c><00:03:42.239><c> again</c><00:03:42.480><c> so</c><00:03:42.640><c> the</c><00:03:42.720><c> question</c>

00:03:43.030 --> 00:03:43.040 align:start position:0%
at this value again so the question
 

00:03:43.040 --> 00:03:44.789 align:start position:0%
at this value again so the question
becomes<00:03:43.519><c> are</c><00:03:43.680><c> we</c><00:03:43.840><c> going</c><00:03:43.920><c> to</c><00:03:44.080><c> search</c><00:03:44.400><c> to</c><00:03:44.560><c> the</c>

00:03:44.789 --> 00:03:44.799 align:start position:0%
becomes are we going to search to the
 

00:03:44.799 --> 00:03:46.390 align:start position:0%
becomes are we going to search to the
left<00:03:45.200><c> or</c><00:03:45.440><c> are</c><00:03:45.519><c> we</c><00:03:45.680><c> going</c><00:03:45.760><c> to</c><00:03:45.840><c> search</c><00:03:46.159><c> to</c><00:03:46.319><c> the</c>

00:03:46.390 --> 00:03:46.400 align:start position:0%
left or are we going to search to the
 

00:03:46.400 --> 00:03:48.390 align:start position:0%
left or are we going to search to the
right<00:03:46.879><c> where</c><00:03:47.280><c> are</c><00:03:47.440><c> we</c><00:03:47.599><c> going</c><00:03:47.680><c> to</c><00:03:47.920><c> find</c><00:03:48.159><c> the</c>

00:03:48.390 --> 00:03:48.400 align:start position:0%
right where are we going to find the
 

00:03:48.400 --> 00:03:50.149 align:start position:0%
right where are we going to find the
minimum<00:03:48.799><c> value</c><00:03:49.200><c> where</c><00:03:49.360><c> are</c><00:03:49.519><c> we</c><00:03:49.599><c> going</c><00:03:49.760><c> to</c><00:03:49.840><c> find</c>

00:03:50.149 --> 00:03:50.159 align:start position:0%
minimum value where are we going to find
 

00:03:50.159 --> 00:03:52.869 align:start position:0%
minimum value where are we going to find
a<00:03:50.319><c> value</c><00:03:50.720><c> that's</c><00:03:50.959><c> even</c><00:03:51.200><c> smaller</c><00:03:51.680><c> than</c><00:03:52.000><c> 5.</c><00:03:52.560><c> well</c>

00:03:52.869 --> 00:03:52.879 align:start position:0%
a value that's even smaller than 5. well
 

00:03:52.879 --> 00:03:54.710 align:start position:0%
a value that's even smaller than 5. well
first<00:03:53.280><c> consider</c><00:03:53.920><c> this</c>

00:03:54.710 --> 00:03:54.720 align:start position:0%
first consider this
 

00:03:54.720 --> 00:03:57.190 align:start position:0%
first consider this
since<00:03:54.959><c> we</c><00:03:55.200><c> rotated</c><00:03:55.760><c> the</c><00:03:55.920><c> array</c><00:03:56.319><c> we</c><00:03:56.400><c> have</c><00:03:56.720><c> two</c>

00:03:57.190 --> 00:03:57.200 align:start position:0%
since we rotated the array we have two
 

00:03:57.200 --> 00:03:58.949 align:start position:0%
since we rotated the array we have two
portions<00:03:57.760><c> of</c><00:03:57.840><c> the</c><00:03:58.000><c> array</c><00:03:58.319><c> that</c><00:03:58.480><c> are</c><00:03:58.640><c> sorted</c>

00:03:58.949 --> 00:03:58.959 align:start position:0%
portions of the array that are sorted
 

00:03:58.959 --> 00:04:01.270 align:start position:0%
portions of the array that are sorted
right<00:03:59.120><c> we</c><00:03:59.280><c> have</c><00:03:59.519><c> this</c><00:03:59.920><c> portion</c><00:04:00.640><c> of</c><00:04:00.799><c> the</c><00:04:00.959><c> array</c>

00:04:01.270 --> 00:04:01.280 align:start position:0%
right we have this portion of the array
 

00:04:01.280 --> 00:04:03.910 align:start position:0%
right we have this portion of the array
that's<00:04:01.519><c> sorted</c><00:04:02.239><c> the</c><00:04:02.480><c> left</c><00:04:02.879><c> portion</c><00:04:03.360><c> right</c><00:04:03.760><c> and</c>

00:04:03.910 --> 00:04:03.920 align:start position:0%
that's sorted the left portion right and
 

00:04:03.920 --> 00:04:05.910 align:start position:0%
that's sorted the left portion right and
we<00:04:04.080><c> have</c><00:04:04.159><c> the</c><00:04:04.480><c> right</c><00:04:04.799><c> sorted</c><00:04:05.280><c> portion</c><00:04:05.680><c> of</c><00:04:05.760><c> the</c>

00:04:05.910 --> 00:04:05.920 align:start position:0%
we have the right sorted portion of the
 

00:04:05.920 --> 00:04:08.149 align:start position:0%
we have the right sorted portion of the
array<00:04:06.239><c> which</c><00:04:06.400><c> is</c><00:04:06.640><c> also</c><00:04:07.120><c> sorted</c><00:04:07.680><c> so</c><00:04:07.840><c> the</c>

00:04:08.149 --> 00:04:08.159 align:start position:0%
array which is also sorted so the
 

00:04:08.159 --> 00:04:10.949 align:start position:0%
array which is also sorted so the
question<00:04:08.720><c> is</c><00:04:08.959><c> for</c><00:04:09.360><c> us</c><00:04:09.920><c> with</c><00:04:10.159><c> this</c><00:04:10.480><c> middle</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
question is for us with this middle
 

00:04:10.959 --> 00:04:14.309 align:start position:0%
question is for us with this middle
pointer<00:04:11.760><c> at</c><00:04:11.920><c> this</c><00:04:12.159><c> value</c><00:04:12.640><c> 5</c><00:04:13.040><c> are</c><00:04:13.200><c> we</c><00:04:13.599><c> currently</c>

00:04:14.309 --> 00:04:14.319 align:start position:0%
pointer at this value 5 are we currently
 

00:04:14.319 --> 00:04:17.430 align:start position:0%
pointer at this value 5 are we currently
in<00:04:14.879><c> the</c><00:04:15.280><c> left</c><00:04:15.680><c> sorted</c><00:04:16.160><c> portion</c><00:04:16.720><c> or</c><00:04:17.040><c> are</c><00:04:17.199><c> we</c>

00:04:17.430 --> 00:04:17.440 align:start position:0%
in the left sorted portion or are we
 

00:04:17.440 --> 00:04:20.150 align:start position:0%
in the left sorted portion or are we
currently<00:04:18.079><c> in</c><00:04:18.560><c> the</c><00:04:18.799><c> right</c><00:04:19.120><c> sorted</c><00:04:19.519><c> portion</c>

00:04:20.150 --> 00:04:20.160 align:start position:0%
currently in the right sorted portion
 

00:04:20.160 --> 00:04:22.950 align:start position:0%
currently in the right sorted portion
now<00:04:20.639><c> if</c><00:04:20.880><c> we</c><00:04:21.120><c> are</c><00:04:21.359><c> in</c><00:04:21.600><c> the</c><00:04:21.759><c> left</c><00:04:22.079><c> sorted</c><00:04:22.479><c> portion</c>

00:04:22.950 --> 00:04:22.960 align:start position:0%
now if we are in the left sorted portion
 

00:04:22.960 --> 00:04:25.749 align:start position:0%
now if we are in the left sorted portion
of<00:04:23.040><c> the</c><00:04:23.199><c> array</c><00:04:23.919><c> don't</c><00:04:24.160><c> we</c><00:04:24.479><c> want</c><00:04:24.800><c> to</c><00:04:25.040><c> search</c><00:04:25.440><c> the</c>

00:04:25.749 --> 00:04:25.759 align:start position:0%
of the array don't we want to search the
 

00:04:25.759 --> 00:04:28.710 align:start position:0%
of the array don't we want to search the
right<00:04:26.000><c> sorted</c><00:04:26.479><c> portion</c><00:04:27.199><c> reason</c><00:04:27.840><c> being</c><00:04:28.240><c> if</c><00:04:28.479><c> we</c>

00:04:28.710 --> 00:04:28.720 align:start position:0%
right sorted portion reason being if we
 

00:04:28.720 --> 00:04:31.670 align:start position:0%
right sorted portion reason being if we
sorted<00:04:29.199><c> the</c><00:04:29.680><c> if</c><00:04:29.759><c> we</c><00:04:30.000><c> rotated</c><00:04:30.560><c> the</c><00:04:30.720><c> array</c><00:04:31.280><c> the</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
sorted the if we rotated the array the
 

00:04:31.680 --> 00:04:34.390 align:start position:0%
sorted the if we rotated the array the
left<00:04:32.000><c> portion</c><00:04:32.560><c> is</c><00:04:32.960><c> always</c><00:04:33.600><c> going</c><00:04:33.840><c> to</c><00:04:34.080><c> have</c>

00:04:34.390 --> 00:04:34.400 align:start position:0%
left portion is always going to have
 

00:04:34.400 --> 00:04:37.670 align:start position:0%
left portion is always going to have
values<00:04:35.120><c> that</c><00:04:35.280><c> are</c><00:04:35.600><c> greater</c><00:04:36.240><c> than</c><00:04:36.720><c> every</c><00:04:37.199><c> value</c>

00:04:37.670 --> 00:04:37.680 align:start position:0%
values that are greater than every value
 

00:04:37.680 --> 00:04:39.830 align:start position:0%
values that are greater than every value
in<00:04:37.759><c> the</c><00:04:38.080><c> right</c><00:04:38.400><c> sorted</c><00:04:38.880><c> portion</c><00:04:39.360><c> right</c>

00:04:39.830 --> 00:04:39.840 align:start position:0%
in the right sorted portion right
 

00:04:39.840 --> 00:04:41.909 align:start position:0%
in the right sorted portion right
because<00:04:40.240><c> when</c><00:04:40.400><c> we</c><00:04:40.639><c> rotate</c><00:04:41.120><c> right</c><00:04:41.280><c> suppose</c><00:04:41.759><c> an</c>

00:04:41.909 --> 00:04:41.919 align:start position:0%
because when we rotate right suppose an
 

00:04:41.919 --> 00:04:44.070 align:start position:0%
because when we rotate right suppose an
array<00:04:42.240><c> like</c><00:04:42.400><c> this</c><00:04:42.639><c> we're</c><00:04:42.880><c> taking</c><00:04:43.520><c> the</c><00:04:43.919><c> the</c>

00:04:44.070 --> 00:04:44.080 align:start position:0%
array like this we're taking the the
 

00:04:44.080 --> 00:04:46.390 align:start position:0%
array like this we're taking the the
rightmost<00:04:44.639><c> value</c><00:04:44.960><c> the</c><00:04:45.280><c> largest</c><00:04:45.759><c> value</c><00:04:46.240><c> and</c>

00:04:46.390 --> 00:04:46.400 align:start position:0%
rightmost value the largest value and
 

00:04:46.400 --> 00:04:48.070 align:start position:0%
rightmost value the largest value and
putting<00:04:46.720><c> it</c><00:04:46.880><c> over</c><00:04:47.280><c> here</c><00:04:47.520><c> right</c><00:04:47.680><c> so</c><00:04:47.840><c> we're</c>

00:04:48.070 --> 00:04:48.080 align:start position:0%
putting it over here right so we're
 

00:04:48.080 --> 00:04:50.710 align:start position:0%
putting it over here right so we're
taking<00:04:48.639><c> larger</c><00:04:49.120><c> values</c><00:04:49.759><c> putting</c><00:04:50.080><c> them</c><00:04:50.320><c> on</c><00:04:50.400><c> the</c>

00:04:50.710 --> 00:04:50.720 align:start position:0%
taking larger values putting them on the
 

00:04:50.720 --> 00:04:53.430 align:start position:0%
taking larger values putting them on the
left<00:04:51.360><c> side</c><00:04:51.919><c> right</c><00:04:52.160><c> so</c><00:04:52.320><c> therefore</c><00:04:52.800><c> the</c><00:04:52.960><c> values</c>

00:04:53.430 --> 00:04:53.440 align:start position:0%
left side right so therefore the values
 

00:04:53.440 --> 00:04:56.070 align:start position:0%
left side right so therefore the values
on<00:04:53.520><c> the</c><00:04:53.759><c> right</c><00:04:54.240><c> are</c><00:04:54.400><c> going</c><00:04:54.639><c> to</c><00:04:54.800><c> be</c><00:04:55.040><c> smaller</c><00:04:55.600><c> now</c>

00:04:56.070 --> 00:04:56.080 align:start position:0%
on the right are going to be smaller now
 

00:04:56.080 --> 00:04:57.510 align:start position:0%
on the right are going to be smaller now
so<00:04:56.240><c> that's</c><00:04:56.560><c> why</c><00:04:56.800><c> it's</c><00:04:56.960><c> always</c><00:04:57.199><c> going</c><00:04:57.280><c> to</c><00:04:57.360><c> be</c>

00:04:57.510 --> 00:04:57.520 align:start position:0%
so that's why it's always going to be
 

00:04:57.520 --> 00:05:00.150 align:start position:0%
so that's why it's always going to be
that<00:04:57.680><c> way</c><00:04:58.000><c> so</c><00:04:58.479><c> if</c><00:04:58.960><c> our</c><00:04:59.199><c> middle</c><00:04:59.520><c> pointer</c><00:05:00.000><c> is</c>

00:05:00.150 --> 00:05:00.160 align:start position:0%
that way so if our middle pointer is
 

00:05:00.160 --> 00:05:03.029 align:start position:0%
that way so if our middle pointer is
currently<00:05:01.039><c> in</c><00:05:01.280><c> a</c><00:05:01.520><c> value</c><00:05:01.840><c> that's</c><00:05:02.160><c> in</c><00:05:02.320><c> the</c><00:05:02.639><c> left</c>

00:05:03.029 --> 00:05:03.039 align:start position:0%
currently in a value that's in the left
 

00:05:03.039 --> 00:05:05.270 align:start position:0%
currently in a value that's in the left
sorted<00:05:03.520><c> portion</c><00:05:04.160><c> then</c><00:05:04.320><c> we</c><00:05:04.639><c> want</c><00:05:04.880><c> to</c><00:05:05.039><c> search</c>

00:05:05.270 --> 00:05:05.280 align:start position:0%
sorted portion then we want to search
 

00:05:05.280 --> 00:05:07.029 align:start position:0%
sorted portion then we want to search
the<00:05:05.440><c> right</c><00:05:05.680><c> sorted</c><00:05:06.080><c> portion</c><00:05:06.400><c> because</c><00:05:06.639><c> it</c><00:05:06.800><c> has</c>

00:05:07.029 --> 00:05:07.039 align:start position:0%
the right sorted portion because it has
 

00:05:07.039 --> 00:05:09.990 align:start position:0%
the right sorted portion because it has
smaller<00:05:07.520><c> values</c><00:05:08.160><c> in</c><00:05:08.320><c> it</c><00:05:08.560><c> right</c><00:05:08.960><c> so</c><00:05:09.199><c> how</c><00:05:09.440><c> can</c><00:05:09.600><c> we</c>

00:05:09.990 --> 00:05:10.000 align:start position:0%
smaller values in it right so how can we
 

00:05:10.000 --> 00:05:12.550 align:start position:0%
smaller values in it right so how can we
know<00:05:10.560><c> if</c><00:05:10.800><c> we</c><00:05:11.039><c> are</c><00:05:11.280><c> in</c><00:05:11.600><c> the</c><00:05:11.840><c> left</c><00:05:12.160><c> sorted</c>

00:05:12.550 --> 00:05:12.560 align:start position:0%
know if we are in the left sorted
 

00:05:12.560 --> 00:05:15.830 align:start position:0%
know if we are in the left sorted
portion<00:05:13.360><c> well</c><00:05:14.000><c> like</c><00:05:14.240><c> i</c><00:05:14.479><c> said</c><00:05:14.880><c> every</c><00:05:15.280><c> value</c><00:05:15.759><c> in</c>

00:05:15.830 --> 00:05:15.840 align:start position:0%
portion well like i said every value in
 

00:05:15.840 --> 00:05:17.510 align:start position:0%
portion well like i said every value in
the<00:05:16.000><c> right</c><00:05:16.240><c> sorted</c><00:05:16.639><c> portion</c><00:05:16.960><c> is</c><00:05:17.120><c> going</c><00:05:17.199><c> to</c><00:05:17.280><c> be</c>

00:05:17.510 --> 00:05:17.520 align:start position:0%
the right sorted portion is going to be
 

00:05:17.520 --> 00:05:19.590 align:start position:0%
the right sorted portion is going to be
smaller<00:05:18.000><c> than</c><00:05:18.320><c> every</c><00:05:18.639><c> value</c><00:05:19.120><c> in</c><00:05:19.199><c> the</c><00:05:19.360><c> left</c>

00:05:19.590 --> 00:05:19.600 align:start position:0%
smaller than every value in the left
 

00:05:19.600 --> 00:05:22.310 align:start position:0%
smaller than every value in the left
sorted<00:05:20.000><c> portion</c><00:05:20.560><c> so</c><00:05:20.880><c> one</c><00:05:21.120><c> thing</c><00:05:21.280><c> we</c><00:05:21.440><c> can</c><00:05:21.759><c> check</c>

00:05:22.310 --> 00:05:22.320 align:start position:0%
sorted portion so one thing we can check
 

00:05:22.320 --> 00:05:25.990 align:start position:0%
sorted portion so one thing we can check
is<00:05:22.800><c> if</c><00:05:23.120><c> the</c><00:05:23.440><c> current</c><00:05:24.080><c> middle</c><00:05:24.479><c> value</c><00:05:25.440><c> is</c>

00:05:25.990 --> 00:05:26.000 align:start position:0%
is if the current middle value is
 

00:05:26.000 --> 00:05:29.350 align:start position:0%
is if the current middle value is
greater<00:05:26.639><c> than</c><00:05:27.039><c> or</c><00:05:27.440><c> equal</c><00:05:28.080><c> to</c><00:05:28.240><c> the</c><00:05:28.400><c> value</c><00:05:29.120><c> all</c>

00:05:29.350 --> 00:05:29.360 align:start position:0%
greater than or equal to the value all
 

00:05:29.360 --> 00:05:33.029 align:start position:0%
greater than or equal to the value all
the<00:05:29.600><c> way</c><00:05:30.000><c> at</c><00:05:30.240><c> the</c><00:05:30.720><c> left</c><00:05:31.440><c> of</c><00:05:31.919><c> our</c><00:05:32.560><c> thing</c><00:05:32.800><c> right</c>

00:05:33.029 --> 00:05:33.039 align:start position:0%
the way at the left of our thing right
 

00:05:33.039 --> 00:05:35.430 align:start position:0%
the way at the left of our thing right
because<00:05:33.360><c> the</c><00:05:33.759><c> left</c><00:05:34.160><c> value</c><00:05:34.560><c> is</c><00:05:34.639><c> going</c><00:05:34.880><c> to</c><00:05:35.039><c> be</c>

00:05:35.430 --> 00:05:35.440 align:start position:0%
because the left value is going to be
 

00:05:35.440 --> 00:05:38.390 align:start position:0%
because the left value is going to be
the<00:05:35.680><c> smallest</c><00:05:36.320><c> value</c><00:05:37.039><c> if</c><00:05:37.440><c> the</c><00:05:37.680><c> middle</c><00:05:38.000><c> value</c>

00:05:38.390 --> 00:05:38.400 align:start position:0%
the smallest value if the middle value
 

00:05:38.400 --> 00:05:40.790 align:start position:0%
the smallest value if the middle value
is<00:05:38.639><c> greater</c><00:05:39.039><c> than</c><00:05:39.199><c> or</c><00:05:39.360><c> equal</c><00:05:39.680><c> to</c><00:05:39.840><c> the</c><00:05:40.080><c> leftmost</c>

00:05:40.790 --> 00:05:40.800 align:start position:0%
is greater than or equal to the leftmost
 

00:05:40.800 --> 00:05:44.070 align:start position:0%
is greater than or equal to the leftmost
value<00:05:41.440><c> that</c><00:05:41.680><c> means</c><00:05:41.919><c> this</c><00:05:42.320><c> middle</c><00:05:42.720><c> value</c><00:05:43.520><c> is</c><00:05:43.840><c> a</c>

00:05:44.070 --> 00:05:44.080 align:start position:0%
value that means this middle value is a
 

00:05:44.080 --> 00:05:47.350 align:start position:0%
value that means this middle value is a
part<00:05:44.560><c> of</c><00:05:44.880><c> this</c><00:05:45.360><c> left</c><00:05:45.759><c> sorted</c><00:05:46.320><c> portion</c><00:05:47.039><c> right</c>

00:05:47.350 --> 00:05:47.360 align:start position:0%
part of this left sorted portion right
 

00:05:47.360 --> 00:05:49.749 align:start position:0%
part of this left sorted portion right
in<00:05:47.600><c> which</c><00:05:47.919><c> case</c><00:05:48.240><c> we</c><00:05:48.479><c> want</c><00:05:48.639><c> to</c><00:05:48.800><c> search</c><00:05:49.280><c> to</c><00:05:49.440><c> the</c>

00:05:49.749 --> 00:05:49.759 align:start position:0%
in which case we want to search to the
 

00:05:49.759 --> 00:05:52.150 align:start position:0%
in which case we want to search to the
right<00:05:50.160><c> now</c><00:05:50.400><c> if</c><00:05:50.720><c> our</c><00:05:50.880><c> middle</c><00:05:51.199><c> pointer</c><00:05:51.520><c> suppose</c>

00:05:52.150 --> 00:05:52.160 align:start position:0%
right now if our middle pointer suppose
 

00:05:52.160 --> 00:05:54.550 align:start position:0%
right now if our middle pointer suppose
in<00:05:52.240><c> this</c><00:05:52.400><c> case</c><00:05:52.639><c> we</c><00:05:52.800><c> can</c><00:05:52.960><c> see</c><00:05:53.280><c> five</c><00:05:53.919><c> is</c><00:05:54.240><c> greater</c>

00:05:54.550 --> 00:05:54.560 align:start position:0%
in this case we can see five is greater
 

00:05:54.560 --> 00:05:56.870 align:start position:0%
in this case we can see five is greater
than<00:05:54.800><c> or</c><00:05:54.960><c> equal</c><00:05:55.440><c> to</c><00:05:55.680><c> three</c><00:05:56.000><c> the</c><00:05:56.479><c> the</c><00:05:56.639><c> reason</c>

00:05:56.870 --> 00:05:56.880 align:start position:0%
than or equal to three the the reason
 

00:05:56.880 --> 00:05:58.710 align:start position:0%
than or equal to three the the reason
we're<00:05:57.039><c> doing</c><00:05:57.280><c> greater</c><00:05:57.600><c> than</c><00:05:57.840><c> or</c><00:05:58.160><c> equal</c><00:05:58.560><c> is</c>

00:05:58.710 --> 00:05:58.720 align:start position:0%
we're doing greater than or equal is
 

00:05:58.720 --> 00:06:00.150 align:start position:0%
we're doing greater than or equal is
technically<00:05:59.199><c> this</c><00:05:59.360><c> middle</c><00:05:59.680><c> pointer</c><00:05:59.919><c> could</c>

00:06:00.150 --> 00:06:00.160 align:start position:0%
technically this middle pointer could
 

00:06:00.160 --> 00:06:02.309 align:start position:0%
technically this middle pointer could
actually<00:06:00.479><c> be</c><00:06:00.720><c> at</c><00:06:00.960><c> the</c><00:06:01.120><c> left</c><00:06:01.440><c> position</c><00:06:01.919><c> as</c><00:06:02.080><c> well</c>

00:06:02.309 --> 00:06:02.319 align:start position:0%
actually be at the left position as well
 

00:06:02.319 --> 00:06:04.550 align:start position:0%
actually be at the left position as well
that's<00:06:02.560><c> one</c><00:06:02.800><c> edge</c><00:06:03.120><c> case</c><00:06:03.600><c> and</c><00:06:03.919><c> in</c><00:06:04.000><c> that</c><00:06:04.160><c> case</c><00:06:04.400><c> we</c>

00:06:04.550 --> 00:06:04.560 align:start position:0%
that's one edge case and in that case we
 

00:06:04.560 --> 00:06:06.550 align:start position:0%
that's one edge case and in that case we
would<00:06:04.800><c> also</c><00:06:05.520><c> you</c><00:06:05.600><c> know</c><00:06:05.919><c> this</c><00:06:06.160><c> would</c><00:06:06.319><c> be</c><00:06:06.479><c> the</c>

00:06:06.550 --> 00:06:06.560 align:start position:0%
would also you know this would be the
 

00:06:06.560 --> 00:06:08.790 align:start position:0%
would also you know this would be the
left<00:06:06.800><c> sorted</c><00:06:07.199><c> portion</c><00:06:07.680><c> but</c><00:06:07.919><c> suppose</c><00:06:08.560><c> our</c>

00:06:08.790 --> 00:06:08.800 align:start position:0%
left sorted portion but suppose our
 

00:06:08.800 --> 00:06:11.350 align:start position:0%
left sorted portion but suppose our
middle<00:06:09.120><c> pointer</c><00:06:09.680><c> instead</c><00:06:10.000><c> of</c><00:06:10.080><c> being</c><00:06:10.479><c> at</c><00:06:10.800><c> five</c>

00:06:11.350 --> 00:06:11.360 align:start position:0%
middle pointer instead of being at five
 

00:06:11.360 --> 00:06:14.629 align:start position:0%
middle pointer instead of being at five
was<00:06:11.680><c> actually</c><00:06:12.319><c> over</c><00:06:12.800><c> here</c><00:06:13.120><c> it</c><00:06:13.199><c> was</c><00:06:13.440><c> at</c><00:06:13.840><c> one</c>

00:06:14.629 --> 00:06:14.639 align:start position:0%
was actually over here it was at one
 

00:06:14.639 --> 00:06:16.790 align:start position:0%
was actually over here it was at one
what<00:06:14.800><c> would</c><00:06:15.120><c> our</c><00:06:15.440><c> condition</c><00:06:16.080><c> evaluate</c><00:06:16.639><c> to</c>

00:06:16.790 --> 00:06:16.800 align:start position:0%
what would our condition evaluate to
 

00:06:16.800 --> 00:06:19.270 align:start position:0%
what would our condition evaluate to
that<00:06:17.120><c> numbs</c><00:06:17.680><c> of</c><00:06:17.919><c> middle</c><00:06:18.319><c> would</c><00:06:18.479><c> be</c><00:06:18.720><c> one</c><00:06:19.120><c> is</c>

00:06:19.270 --> 00:06:19.280 align:start position:0%
that numbs of middle would be one is
 

00:06:19.280 --> 00:06:21.350 align:start position:0%
that numbs of middle would be one is
that<00:06:19.520><c> greater</c><00:06:19.919><c> than</c><00:06:20.080><c> or</c><00:06:20.240><c> equal</c><00:06:20.639><c> to</c><00:06:20.800><c> the</c><00:06:21.039><c> left</c>

00:06:21.350 --> 00:06:21.360 align:start position:0%
that greater than or equal to the left
 

00:06:21.360 --> 00:06:23.990 align:start position:0%
that greater than or equal to the left
value<00:06:21.919><c> which</c><00:06:22.160><c> is</c><00:06:22.639><c> three</c><00:06:23.039><c> it's</c><00:06:23.440><c> not</c><00:06:23.759><c> right</c>

00:06:23.990 --> 00:06:24.000 align:start position:0%
value which is three it's not right
 

00:06:24.000 --> 00:06:25.990 align:start position:0%
value which is three it's not right
because<00:06:24.400><c> the</c><00:06:24.560><c> values</c><00:06:25.039><c> in</c><00:06:25.199><c> this</c><00:06:25.440><c> right</c><00:06:25.680><c> sorted</c>

00:06:25.990 --> 00:06:26.000 align:start position:0%
because the values in this right sorted
 

00:06:26.000 --> 00:06:28.150 align:start position:0%
because the values in this right sorted
portion<00:06:26.400><c> are</c><00:06:26.479><c> going</c><00:06:26.560><c> to</c><00:06:26.639><c> be</c><00:06:26.960><c> smaller</c><00:06:27.759><c> than</c><00:06:28.000><c> the</c>

00:06:28.150 --> 00:06:28.160 align:start position:0%
portion are going to be smaller than the
 

00:06:28.160 --> 00:06:30.150 align:start position:0%
portion are going to be smaller than the
left<00:06:28.400><c> sorted</c><00:06:28.800><c> portion</c><00:06:29.280><c> in</c><00:06:29.440><c> which</c><00:06:29.680><c> case</c><00:06:30.000><c> this</c>

00:06:30.150 --> 00:06:30.160 align:start position:0%
left sorted portion in which case this
 

00:06:30.160 --> 00:06:32.870 align:start position:0%
left sorted portion in which case this
would<00:06:30.319><c> evaluate</c><00:06:30.960><c> to</c><00:06:31.360><c> false</c><00:06:31.919><c> right</c><00:06:32.240><c> if</c><00:06:32.479><c> it's</c>

00:06:32.870 --> 00:06:32.880 align:start position:0%
would evaluate to false right if it's
 

00:06:32.880 --> 00:06:35.430 align:start position:0%
would evaluate to false right if it's
false<00:06:33.520><c> that</c><00:06:33.759><c> means</c><00:06:34.319><c> you</c><00:06:34.400><c> know</c><00:06:34.560><c> if</c><00:06:34.720><c> we're</c><00:06:35.039><c> at</c><00:06:35.280><c> a</c>

00:06:35.430 --> 00:06:35.440 align:start position:0%
false that means you know if we're at a
 

00:06:35.440 --> 00:06:37.909 align:start position:0%
false that means you know if we're at a
value<00:06:35.840><c> that's</c><00:06:36.160><c> in</c><00:06:36.240><c> the</c><00:06:36.560><c> right</c><00:06:36.800><c> sorted</c><00:06:37.199><c> portion</c>

00:06:37.909 --> 00:06:37.919 align:start position:0%
value that's in the right sorted portion
 

00:06:37.919 --> 00:06:40.469 align:start position:0%
value that's in the right sorted portion
then<00:06:38.160><c> we</c><00:06:38.479><c> want</c><00:06:38.639><c> to</c><00:06:38.880><c> search</c><00:06:39.360><c> to</c><00:06:39.520><c> the</c><00:06:39.840><c> left</c><00:06:40.240><c> right</c>

00:06:40.469 --> 00:06:40.479 align:start position:0%
then we want to search to the left right
 

00:06:40.479 --> 00:06:43.510 align:start position:0%
then we want to search to the left right
because<00:06:41.039><c> in</c><00:06:41.199><c> this</c><00:06:41.360><c> case</c><00:06:41.919><c> the</c><00:06:42.479><c> the</c><00:06:42.639><c> right</c><00:06:43.039><c> if</c><00:06:43.360><c> if</c>

00:06:43.510 --> 00:06:43.520 align:start position:0%
because in this case the the right if if
 

00:06:43.520 --> 00:06:45.590 align:start position:0%
because in this case the the right if if
our<00:06:43.600><c> middle</c><00:06:43.919><c> was</c><00:06:44.160><c> at</c><00:06:44.400><c> this</c><00:06:44.800><c> it</c><00:06:44.960><c> makes</c><00:06:45.280><c> sense</c>

00:06:45.590 --> 00:06:45.600 align:start position:0%
our middle was at this it makes sense
 

00:06:45.600 --> 00:06:47.749 align:start position:0%
our middle was at this it makes sense
that<00:06:45.840><c> okay</c><00:06:46.479><c> you</c><00:06:46.560><c> know</c><00:06:46.880><c> all</c><00:06:47.039><c> the</c><00:06:47.120><c> values</c><00:06:47.520><c> to</c><00:06:47.680><c> the</c>

00:06:47.749 --> 00:06:47.759 align:start position:0%
that okay you know all the values to the
 

00:06:47.759 --> 00:06:50.150 align:start position:0%
that okay you know all the values to the
right<00:06:48.080><c> of</c><00:06:48.240><c> it</c><00:06:48.479><c> are</c><00:06:48.720><c> going</c><00:06:48.800><c> to</c><00:06:48.880><c> be</c><00:06:49.039><c> greater</c><00:06:49.919><c> so</c>

00:06:50.150 --> 00:06:50.160 align:start position:0%
right of it are going to be greater so
 

00:06:50.160 --> 00:06:51.909 align:start position:0%
right of it are going to be greater so
then<00:06:50.319><c> we</c><00:06:50.400><c> want</c><00:06:50.560><c> to</c><00:06:50.720><c> search</c><00:06:50.960><c> to</c><00:06:51.120><c> the</c><00:06:51.280><c> left</c><00:06:51.599><c> but</c>

00:06:51.909 --> 00:06:51.919 align:start position:0%
then we want to search to the left but
 

00:06:51.919 --> 00:06:54.150 align:start position:0%
then we want to search to the left but
obviously<00:06:52.319><c> these</c><00:06:52.560><c> values</c><00:06:53.120><c> are</c><00:06:53.280><c> also</c><00:06:53.680><c> greater</c>

00:06:54.150 --> 00:06:54.160 align:start position:0%
obviously these values are also greater
 

00:06:54.160 --> 00:06:56.150 align:start position:0%
obviously these values are also greater
but<00:06:54.800><c> that</c><00:06:54.960><c> kind</c><00:06:55.120><c> of</c><00:06:55.280><c> doesn't</c><00:06:55.599><c> illustrate</c><00:06:56.080><c> the</c>

00:06:56.150 --> 00:06:56.160 align:start position:0%
but that kind of doesn't illustrate the
 

00:06:56.160 --> 00:06:57.510 align:start position:0%
but that kind of doesn't illustrate the
point<00:06:56.400><c> because</c><00:06:56.560><c> what</c><00:06:56.720><c> if</c><00:06:56.880><c> our</c><00:06:56.960><c> middle</c><00:06:57.199><c> pointer</c>

00:06:57.510 --> 00:06:57.520 align:start position:0%
point because what if our middle pointer
 

00:06:57.520 --> 00:06:59.110 align:start position:0%
point because what if our middle pointer
was<00:06:57.680><c> over</c><00:06:57.919><c> here</c><00:06:58.160><c> right</c><00:06:58.400><c> maybe</c><00:06:58.639><c> we</c><00:06:58.720><c> had</c><00:06:58.880><c> some</c>

00:06:59.110 --> 00:06:59.120 align:start position:0%
was over here right maybe we had some
 

00:06:59.120 --> 00:07:00.790 align:start position:0%
was over here right maybe we had some
values<00:06:59.840><c> over</c><00:07:00.080><c> here</c>

00:07:00.790 --> 00:07:00.800 align:start position:0%
values over here
 

00:07:00.800 --> 00:07:01.990 align:start position:0%
values over here
you<00:07:00.880><c> know</c><00:07:01.039><c> this</c><00:07:01.199><c> is</c><00:07:01.360><c> where</c><00:07:01.599><c> our</c><00:07:01.680><c> middle</c>

00:07:01.990 --> 00:07:02.000 align:start position:0%
you know this is where our middle
 

00:07:02.000 --> 00:07:04.309 align:start position:0%
you know this is where our middle
pointer<00:07:02.319><c> is</c><00:07:02.479><c> we</c><00:07:02.720><c> see</c><00:07:03.039><c> two</c><00:07:03.440><c> okay</c>

00:07:04.309 --> 00:07:04.319 align:start position:0%
pointer is we see two okay
 

00:07:04.319 --> 00:07:06.629 align:start position:0%
pointer is we see two okay
two<00:07:04.639><c> could</c><00:07:04.880><c> have</c><00:07:04.960><c> been</c><00:07:05.120><c> the</c><00:07:05.280><c> minimum</c><00:07:06.000><c> then</c><00:07:06.479><c> we</c>

00:07:06.629 --> 00:07:06.639 align:start position:0%
two could have been the minimum then we
 

00:07:06.639 --> 00:07:08.309 align:start position:0%
two could have been the minimum then we
want<00:07:06.880><c> to</c><00:07:07.039><c> search</c><00:07:07.280><c> to</c><00:07:07.440><c> the</c><00:07:07.680><c> left</c><00:07:08.000><c> because</c><00:07:08.240><c> we</c>

00:07:08.309 --> 00:07:08.319 align:start position:0%
want to search to the left because we
 

00:07:08.319 --> 00:07:10.230 align:start position:0%
want to search to the left because we
want<00:07:08.479><c> to</c><00:07:08.560><c> find</c><00:07:08.880><c> even</c><00:07:09.199><c> smaller</c><00:07:09.680><c> values</c>

00:07:10.230 --> 00:07:10.240 align:start position:0%
want to find even smaller values
 

00:07:10.240 --> 00:07:12.309 align:start position:0%
want to find even smaller values
particularly<00:07:11.039><c> we</c><00:07:11.199><c> would</c><00:07:11.360><c> want</c><00:07:11.520><c> to</c><00:07:11.599><c> find</c><00:07:11.919><c> this</c>

00:07:12.309 --> 00:07:12.319 align:start position:0%
particularly we would want to find this
 

00:07:12.319 --> 00:07:14.070 align:start position:0%
particularly we would want to find this
one<00:07:12.800><c> that</c><00:07:12.960><c> happens</c><00:07:13.280><c> to</c><00:07:13.360><c> be</c><00:07:13.520><c> smaller</c><00:07:13.840><c> because</c>

00:07:14.070 --> 00:07:14.080 align:start position:0%
one that happens to be smaller because
 

00:07:14.080 --> 00:07:16.070 align:start position:0%
one that happens to be smaller because
we<00:07:14.240><c> don't</c><00:07:14.400><c> know</c><00:07:14.639><c> where</c><00:07:14.800><c> the</c><00:07:14.960><c> pivot</c><00:07:15.520><c> is</c><00:07:15.919><c> the</c>

00:07:16.070 --> 00:07:16.080 align:start position:0%
we don't know where the pivot is the
 

00:07:16.080 --> 00:07:17.830 align:start position:0%
we don't know where the pivot is the
pivot<00:07:16.400><c> could</c><00:07:16.560><c> be</c><00:07:16.720><c> here</c><00:07:17.039><c> the</c><00:07:17.199><c> pivot</c><00:07:17.520><c> could</c><00:07:17.680><c> be</c>

00:07:17.830 --> 00:07:17.840 align:start position:0%
pivot could be here the pivot could be
 

00:07:17.840 --> 00:07:19.670 align:start position:0%
pivot could be here the pivot could be
here<00:07:18.080><c> it</c><00:07:18.160><c> could</c><00:07:18.319><c> be</c><00:07:18.560><c> anywhere</c><00:07:19.120><c> we</c><00:07:19.280><c> just</c><00:07:19.520><c> know</c>

00:07:19.670 --> 00:07:19.680 align:start position:0%
here it could be anywhere we just know
 

00:07:19.680 --> 00:07:21.350 align:start position:0%
here it could be anywhere we just know
we<00:07:19.840><c> have</c><00:07:19.919><c> to</c><00:07:20.000><c> look</c><00:07:20.160><c> to</c><00:07:20.319><c> the</c><00:07:20.479><c> left</c><00:07:20.880><c> if</c><00:07:21.039><c> we</c><00:07:21.120><c> want</c>

00:07:21.350 --> 00:07:21.360 align:start position:0%
we have to look to the left if we want
 

00:07:21.360 --> 00:07:23.909 align:start position:0%
we have to look to the left if we want
to<00:07:21.440><c> find</c><00:07:21.759><c> smaller</c><00:07:22.319><c> elements</c><00:07:22.880><c> if</c><00:07:23.199><c> we</c><00:07:23.599><c> if</c><00:07:23.759><c> our</c>

00:07:23.909 --> 00:07:23.919 align:start position:0%
to find smaller elements if we if our
 

00:07:23.919 --> 00:07:25.589 align:start position:0%
to find smaller elements if we if our
middle<00:07:24.160><c> pointer</c><00:07:24.560><c> happens</c><00:07:24.800><c> to</c><00:07:24.960><c> be</c><00:07:25.199><c> in</c><00:07:25.280><c> the</c>

00:07:25.589 --> 00:07:25.599 align:start position:0%
middle pointer happens to be in the
 

00:07:25.599 --> 00:07:27.189 align:start position:0%
middle pointer happens to be in the
right<00:07:25.919><c> sorted</c><00:07:26.319><c> portion</c><00:07:26.639><c> then</c><00:07:26.800><c> we</c><00:07:26.960><c> want</c><00:07:27.120><c> to</c>

00:07:27.189 --> 00:07:27.199 align:start position:0%
right sorted portion then we want to
 

00:07:27.199 --> 00:07:29.189 align:start position:0%
right sorted portion then we want to
search<00:07:27.440><c> to</c><00:07:27.599><c> the</c><00:07:27.759><c> left</c><00:07:28.240><c> if</c><00:07:28.400><c> our</c><00:07:28.560><c> middle</c><00:07:28.800><c> pointer</c>

00:07:29.189 --> 00:07:29.199 align:start position:0%
search to the left if our middle pointer
 

00:07:29.199 --> 00:07:31.270 align:start position:0%
search to the left if our middle pointer
is<00:07:29.280><c> in</c><00:07:29.440><c> the</c><00:07:29.680><c> left</c><00:07:30.000><c> sorted</c><00:07:30.400><c> portion</c><00:07:30.960><c> then</c><00:07:31.120><c> we</c>

00:07:31.270 --> 00:07:31.280 align:start position:0%
is in the left sorted portion then we
 

00:07:31.280 --> 00:07:33.189 align:start position:0%
is in the left sorted portion then we
want<00:07:31.440><c> to</c><00:07:31.599><c> search</c><00:07:31.919><c> to</c><00:07:32.080><c> the</c><00:07:32.319><c> right</c><00:07:32.720><c> and</c><00:07:32.880><c> i</c><00:07:32.960><c> just</c>

00:07:33.189 --> 00:07:33.199 align:start position:0%
want to search to the right and i just
 

00:07:33.199 --> 00:07:34.950 align:start position:0%
want to search to the right and i just
showed<00:07:33.440><c> you</c><00:07:33.599><c> the</c><00:07:33.759><c> condition</c><00:07:34.240><c> we</c><00:07:34.400><c> can</c><00:07:34.560><c> use</c><00:07:34.800><c> to</c>

00:07:34.950 --> 00:07:34.960 align:start position:0%
showed you the condition we can use to
 

00:07:34.960 --> 00:07:36.629 align:start position:0%
showed you the condition we can use to
detect<00:07:35.440><c> that</c><00:07:35.759><c> so</c><00:07:35.919><c> now</c><00:07:36.080><c> i'm</c><00:07:36.240><c> going</c><00:07:36.319><c> to</c><00:07:36.400><c> run</c>

00:07:36.629 --> 00:07:36.639 align:start position:0%
detect that so now i'm going to run
 

00:07:36.639 --> 00:07:38.150 align:start position:0%
detect that so now i'm going to run
through<00:07:36.800><c> the</c><00:07:36.960><c> example</c><00:07:37.440><c> and</c><00:07:37.599><c> it'll</c><00:07:37.840><c> probably</c>

00:07:38.150 --> 00:07:38.160 align:start position:0%
through the example and it'll probably
 

00:07:38.160 --> 00:07:40.390 align:start position:0%
through the example and it'll probably
make<00:07:38.400><c> more</c><00:07:38.720><c> sense</c><00:07:39.520><c> and</c><00:07:39.680><c> by</c><00:07:39.840><c> the</c><00:07:40.000><c> way</c><00:07:40.160><c> the</c>

00:07:40.390 --> 00:07:40.400 align:start position:0%
make more sense and by the way the
 

00:07:40.400 --> 00:07:43.350 align:start position:0%
make more sense and by the way the
algorithm<00:07:40.880><c> i'm</c><00:07:41.039><c> describing</c><00:07:41.919><c> only</c><00:07:42.400><c> works</c><00:07:42.800><c> on</c><00:07:42.960><c> a</c>

00:07:43.350 --> 00:07:43.360 align:start position:0%
algorithm i'm describing only works on a
 

00:07:43.360 --> 00:07:46.390 align:start position:0%
algorithm i'm describing only works on a
on<00:07:43.599><c> a</c><00:07:43.840><c> rotated</c><00:07:44.720><c> sorted</c><00:07:45.199><c> array</c><00:07:45.520><c> if</c><00:07:45.759><c> we</c><00:07:46.000><c> ever</c><00:07:46.240><c> got</c>

00:07:46.390 --> 00:07:46.400 align:start position:0%
on a rotated sorted array if we ever got
 

00:07:46.400 --> 00:07:48.070 align:start position:0%
on a rotated sorted array if we ever got
to<00:07:46.560><c> a</c><00:07:46.720><c> point</c><00:07:46.960><c> where</c><00:07:47.199><c> our</c><00:07:47.360><c> let's</c><00:07:47.520><c> say</c><00:07:47.680><c> our</c><00:07:47.840><c> right</c>

00:07:48.070 --> 00:07:48.080 align:start position:0%
to a point where our let's say our right
 

00:07:48.080 --> 00:07:49.990 align:start position:0%
to a point where our let's say our right
pointer<00:07:48.400><c> was</c><00:07:48.639><c> over</c><00:07:48.960><c> here</c><00:07:49.440><c> meaning</c><00:07:49.759><c> that</c><00:07:49.919><c> you</c>

00:07:49.990 --> 00:07:50.000 align:start position:0%
pointer was over here meaning that you
 

00:07:50.000 --> 00:07:52.070 align:start position:0%
pointer was over here meaning that you
know<00:07:50.080><c> this</c><00:07:50.240><c> is</c><00:07:50.400><c> our</c><00:07:50.560><c> entire</c><00:07:51.039><c> search</c><00:07:51.440><c> range</c>

00:07:52.070 --> 00:07:52.080 align:start position:0%
know this is our entire search range
 

00:07:52.080 --> 00:07:53.990 align:start position:0%
know this is our entire search range
then<00:07:52.319><c> we</c><00:07:52.560><c> could</c><00:07:52.720><c> not</c><00:07:52.960><c> do</c><00:07:53.199><c> this</c><00:07:53.440><c> algorithm</c><00:07:53.919><c> in</c>

00:07:53.990 --> 00:07:54.000 align:start position:0%
then we could not do this algorithm in
 

00:07:54.000 --> 00:07:56.710 align:start position:0%
then we could not do this algorithm in
this<00:07:54.160><c> case</c><00:07:54.400><c> if</c><00:07:54.479><c> we</c><00:07:54.639><c> ever</c><00:07:54.879><c> got</c><00:07:55.039><c> to</c><00:07:55.280><c> a</c><00:07:55.840><c> a</c><00:07:56.319><c> portion</c>

00:07:56.710 --> 00:07:56.720 align:start position:0%
this case if we ever got to a a portion
 

00:07:56.720 --> 00:07:58.469 align:start position:0%
this case if we ever got to a a portion
of<00:07:56.800><c> the</c><00:07:56.960><c> array</c><00:07:57.199><c> that's</c><00:07:57.440><c> completely</c><00:07:57.919><c> sorted</c><00:07:58.400><c> we</c>

00:07:58.469 --> 00:07:58.479 align:start position:0%
of the array that's completely sorted we
 

00:07:58.479 --> 00:08:00.390 align:start position:0%
of the array that's completely sorted we
would<00:07:58.639><c> just</c><00:07:58.879><c> take</c><00:07:59.039><c> the</c><00:07:59.280><c> leftmost</c><00:07:59.840><c> value</c><00:08:00.240><c> and</c>

00:08:00.390 --> 00:08:00.400 align:start position:0%
would just take the leftmost value and
 

00:08:00.400 --> 00:08:02.150 align:start position:0%
would just take the leftmost value and
see<00:08:00.800><c> if</c><00:08:01.039><c> it's</c><00:08:01.120><c> smaller</c><00:08:01.520><c> than</c><00:08:01.680><c> our</c><00:08:01.840><c> current</c>

00:08:02.150 --> 00:08:02.160 align:start position:0%
see if it's smaller than our current
 

00:08:02.160 --> 00:08:04.550 align:start position:0%
see if it's smaller than our current
result<00:08:02.479><c> and</c><00:08:02.560><c> then</c><00:08:02.720><c> we</c><00:08:02.879><c> would</c><00:08:03.120><c> stop</c><00:08:03.840><c> the</c><00:08:04.160><c> entire</c>

00:08:04.550 --> 00:08:04.560 align:start position:0%
result and then we would stop the entire
 

00:08:04.560 --> 00:08:06.790 align:start position:0%
result and then we would stop the entire
binary<00:08:05.039><c> search</c><00:08:05.680><c> okay</c><00:08:06.000><c> so</c><00:08:06.160><c> now</c><00:08:06.319><c> let's</c><00:08:06.560><c> run</c>

00:08:06.790 --> 00:08:06.800 align:start position:0%
binary search okay so now let's run
 

00:08:06.800 --> 00:08:08.230 align:start position:0%
binary search okay so now let's run
through<00:08:06.960><c> the</c><00:08:07.120><c> example</c><00:08:07.680><c> these</c><00:08:07.919><c> are</c><00:08:08.080><c> the</c>

00:08:08.230 --> 00:08:08.240 align:start position:0%
through the example these are the
 

00:08:08.240 --> 00:08:09.589 align:start position:0%
through the example these are the
conditions<00:08:08.720><c> that</c><00:08:08.879><c> i</c><00:08:09.039><c> talked</c><00:08:09.280><c> about</c><00:08:09.440><c> that</c>

00:08:09.589 --> 00:08:09.599 align:start position:0%
conditions that i talked about that
 

00:08:09.599 --> 00:08:11.350 align:start position:0%
conditions that i talked about that
we're<00:08:09.759><c> going</c><00:08:09.840><c> to</c><00:08:09.919><c> be</c><00:08:10.160><c> using</c><00:08:10.720><c> so</c><00:08:10.879><c> our</c><00:08:11.039><c> middle</c>

00:08:11.350 --> 00:08:11.360 align:start position:0%
we're going to be using so our middle
 

00:08:11.360 --> 00:08:14.550 align:start position:0%
we're going to be using so our middle
pointer<00:08:11.759><c> is</c><00:08:12.000><c> here</c><00:08:12.479><c> let's</c><00:08:12.800><c> check</c><00:08:13.360><c> is</c><00:08:14.080><c> so</c><00:08:14.400><c> you</c>

00:08:14.550 --> 00:08:14.560 align:start position:0%
pointer is here let's check is so you
 

00:08:14.560 --> 00:08:15.990 align:start position:0%
pointer is here let's check is so you
know<00:08:14.639><c> we</c><00:08:14.879><c> we</c><00:08:15.120><c> checked</c><00:08:15.280><c> that</c><00:08:15.440><c> this</c><00:08:15.680><c> might</c><00:08:15.840><c> be</c>

00:08:15.990 --> 00:08:16.000 align:start position:0%
know we we checked that this might be
 

00:08:16.000 --> 00:08:17.589 align:start position:0%
know we we checked that this might be
the<00:08:16.080><c> minimum</c><00:08:16.639><c> now</c><00:08:17.039><c> we're</c><00:08:17.199><c> never</c><00:08:17.440><c> going</c><00:08:17.520><c> to</c>

00:08:17.589 --> 00:08:17.599 align:start position:0%
the minimum now we're never going to
 

00:08:17.599 --> 00:08:18.869 align:start position:0%
the minimum now we're never going to
look<00:08:17.759><c> at</c><00:08:17.919><c> this</c><00:08:18.080><c> again</c><00:08:18.319><c> so</c><00:08:18.479><c> now</c><00:08:18.639><c> we're</c><00:08:18.720><c> going</c><00:08:18.800><c> to</c>

00:08:18.869 --> 00:08:18.879 align:start position:0%
look at this again so now we're going to
 

00:08:18.879 --> 00:08:20.469 align:start position:0%
look at this again so now we're going to
check<00:08:19.120><c> is</c><00:08:19.280><c> this</c><00:08:19.440><c> value</c><00:08:19.840><c> greater</c><00:08:20.160><c> than</c><00:08:20.319><c> the</c>

00:08:20.469 --> 00:08:20.479 align:start position:0%
check is this value greater than the
 

00:08:20.479 --> 00:08:22.230 align:start position:0%
check is this value greater than the
value<00:08:20.879><c> all</c><00:08:20.960><c> the</c><00:08:21.039><c> way</c><00:08:21.199><c> to</c><00:08:21.360><c> the</c><00:08:21.520><c> left</c><00:08:21.759><c> yes</c><00:08:22.000><c> it</c><00:08:22.160><c> is</c>

00:08:22.230 --> 00:08:22.240 align:start position:0%
value all the way to the left yes it is
 

00:08:22.240 --> 00:08:23.749 align:start position:0%
value all the way to the left yes it is
so<00:08:22.400><c> we're</c><00:08:22.479><c> going</c><00:08:22.639><c> to</c><00:08:22.720><c> search</c><00:08:23.120><c> right</c><00:08:23.520><c> since</c>

00:08:23.749 --> 00:08:23.759 align:start position:0%
so we're going to search right since
 

00:08:23.759 --> 00:08:25.270 align:start position:0%
so we're going to search right since
we're<00:08:23.919><c> searching</c><00:08:24.400><c> right</c><00:08:24.800><c> that</c><00:08:24.960><c> means</c><00:08:25.120><c> we're</c>

00:08:25.270 --> 00:08:25.280 align:start position:0%
we're searching right that means we're
 

00:08:25.280 --> 00:08:27.110 align:start position:0%
we're searching right that means we're
never<00:08:25.520><c> going</c><00:08:25.680><c> to</c><00:08:25.759><c> search</c><00:08:26.080><c> these</c><00:08:26.400><c> values</c><00:08:26.879><c> again</c>

00:08:27.110 --> 00:08:27.120 align:start position:0%
never going to search these values again
 

00:08:27.120 --> 00:08:29.749 align:start position:0%
never going to search these values again
so<00:08:27.280><c> we</c><00:08:27.440><c> can</c><00:08:27.680><c> cross</c><00:08:28.400><c> them</c><00:08:29.120><c> out</c><00:08:29.440><c> we're</c><00:08:29.599><c> going</c><00:08:29.680><c> to</c>

00:08:29.749 --> 00:08:29.759 align:start position:0%
so we can cross them out we're going to
 

00:08:29.759 --> 00:08:32.310 align:start position:0%
so we can cross them out we're going to
take<00:08:30.000><c> our</c><00:08:30.160><c> left</c><00:08:30.479><c> pointer</c><00:08:31.199><c> and</c>

00:08:32.310 --> 00:08:32.320 align:start position:0%
take our left pointer and
 

00:08:32.320 --> 00:08:34.949 align:start position:0%
take our left pointer and
shift<00:08:32.640><c> it</c><00:08:33.200><c> to</c><00:08:33.440><c> mid</c><00:08:33.839><c> plus</c><00:08:34.240><c> one</c><00:08:34.399><c> so</c><00:08:34.640><c> our</c><00:08:34.719><c> left</c>

00:08:34.949 --> 00:08:34.959 align:start position:0%
shift it to mid plus one so our left
 

00:08:34.959 --> 00:08:36.469 align:start position:0%
shift it to mid plus one so our left
pointer<00:08:35.279><c> is</c><00:08:35.360><c> now</c><00:08:35.599><c> going</c><00:08:35.680><c> to</c><00:08:35.760><c> be</c><00:08:36.000><c> over</c><00:08:36.240><c> here</c>

00:08:36.469 --> 00:08:36.479 align:start position:0%
pointer is now going to be over here
 

00:08:36.479 --> 00:08:38.949 align:start position:0%
pointer is now going to be over here
this<00:08:36.640><c> is</c><00:08:36.800><c> our</c><00:08:36.959><c> new</c><00:08:37.200><c> search</c><00:08:37.680><c> range</c><00:08:38.320><c> and</c><00:08:38.719><c> as</c><00:08:38.880><c> you</c>

00:08:38.949 --> 00:08:38.959 align:start position:0%
this is our new search range and as you
 

00:08:38.959 --> 00:08:41.589 align:start position:0%
this is our new search range and as you
can<00:08:39.200><c> see</c><00:08:39.919><c> this</c><00:08:40.399><c> portion</c><00:08:40.800><c> of</c><00:08:40.880><c> the</c><00:08:41.039><c> array</c><00:08:41.440><c> is</c>

00:08:41.589 --> 00:08:41.599 align:start position:0%
can see this portion of the array is
 

00:08:41.599 --> 00:08:43.430 align:start position:0%
can see this portion of the array is
already<00:08:42.080><c> in</c><00:08:42.240><c> sorted</c><00:08:42.640><c> order</c><00:08:42.880><c> right</c><00:08:43.039><c> how</c><00:08:43.200><c> do</c><00:08:43.279><c> we</c>

00:08:43.430 --> 00:08:43.440 align:start position:0%
already in sorted order right how do we
 

00:08:43.440 --> 00:08:45.590 align:start position:0%
already in sorted order right how do we
know<00:08:43.599><c> that</c><00:08:44.000><c> because</c><00:08:44.720><c> our</c><00:08:45.040><c> the</c><00:08:45.200><c> point</c><00:08:45.440><c> the</c>

00:08:45.590 --> 00:08:45.600 align:start position:0%
know that because our the point the
 

00:08:45.600 --> 00:08:47.350 align:start position:0%
know that because our the point the
value<00:08:45.920><c> at</c><00:08:46.080><c> our</c><00:08:46.240><c> right</c><00:08:46.480><c> pointer</c><00:08:46.800><c> is</c><00:08:46.959><c> greater</c>

00:08:47.350 --> 00:08:47.360 align:start position:0%
value at our right pointer is greater
 

00:08:47.360 --> 00:08:49.430 align:start position:0%
value at our right pointer is greater
than<00:08:47.519><c> the</c><00:08:47.680><c> value</c><00:08:48.080><c> at</c><00:08:48.240><c> our</c><00:08:48.480><c> left</c><00:08:48.720><c> pointer</c><00:08:49.200><c> so</c>

00:08:49.430 --> 00:08:49.440 align:start position:0%
than the value at our left pointer so
 

00:08:49.440 --> 00:08:51.509 align:start position:0%
than the value at our left pointer so
that<00:08:49.680><c> means</c><00:08:49.920><c> that</c><00:08:50.000><c> the</c><00:08:50.160><c> array</c><00:08:50.560><c> is</c><00:08:50.880><c> entirely</c>

00:08:51.509 --> 00:08:51.519 align:start position:0%
that means that the array is entirely
 

00:08:51.519 --> 00:08:53.030 align:start position:0%
that means that the array is entirely
sorted<00:08:52.080><c> and</c><00:08:52.160><c> then</c><00:08:52.320><c> we</c><00:08:52.480><c> can</c><00:08:52.560><c> just</c><00:08:52.720><c> take</c><00:08:52.880><c> the</c>

00:08:53.030 --> 00:08:53.040 align:start position:0%
sorted and then we can just take the
 

00:08:53.040 --> 00:08:55.269 align:start position:0%
sorted and then we can just take the
leftmost<00:08:53.519><c> value</c><00:08:53.839><c> here</c><00:08:54.080><c> which</c><00:08:54.320><c> is</c><00:08:54.480><c> one</c><00:08:54.959><c> see</c><00:08:55.120><c> if</c>

00:08:55.269 --> 00:08:55.279 align:start position:0%
leftmost value here which is one see if
 

00:08:55.279 --> 00:08:56.949 align:start position:0%
leftmost value here which is one see if
it's<00:08:55.360><c> smaller</c><00:08:55.760><c> than</c><00:08:55.920><c> our</c><00:08:56.000><c> current</c><00:08:56.320><c> result</c><00:08:56.720><c> yes</c>

00:08:56.949 --> 00:08:56.959 align:start position:0%
it's smaller than our current result yes
 

00:08:56.959 --> 00:09:00.550 align:start position:0%
it's smaller than our current result yes
it<00:08:57.200><c> is</c><00:08:57.600><c> so</c><00:08:57.839><c> then</c><00:08:58.320><c> we</c><00:08:58.480><c> can</c><00:08:58.800><c> return</c><00:08:59.680><c> one</c><00:09:00.160><c> in</c><00:09:00.320><c> this</c>

00:09:00.550 --> 00:09:00.560 align:start position:0%
it is so then we can return one in this
 

00:09:00.560 --> 00:09:03.190 align:start position:0%
it is so then we can return one in this
case<00:09:01.200><c> now</c><00:09:01.360><c> just</c><00:09:01.600><c> to</c><00:09:01.839><c> kind</c><00:09:02.000><c> of</c><00:09:02.160><c> illustrate</c><00:09:02.640><c> the</c>

00:09:03.190 --> 00:09:03.200 align:start position:0%
case now just to kind of illustrate the
 

00:09:03.200 --> 00:09:05.110 align:start position:0%
case now just to kind of illustrate the
opposite<00:09:03.600><c> case</c><00:09:03.920><c> arbitrarily</c><00:09:04.800><c> i'm</c><00:09:04.880><c> just</c><00:09:05.040><c> going</c>

00:09:05.110 --> 00:09:05.120 align:start position:0%
opposite case arbitrarily i'm just going
 

00:09:05.120 --> 00:09:07.190 align:start position:0%
opposite case arbitrarily i'm just going
to<00:09:05.200><c> say</c><00:09:05.440><c> our</c><00:09:05.680><c> middle</c><00:09:06.000><c> pointer</c><00:09:06.399><c> is</c><00:09:06.640><c> actually</c>

00:09:07.190 --> 00:09:07.200 align:start position:0%
to say our middle pointer is actually
 

00:09:07.200 --> 00:09:09.670 align:start position:0%
to say our middle pointer is actually
gonna<00:09:07.760><c> be</c><00:09:08.160><c> over</c><00:09:08.480><c> here</c><00:09:08.880><c> for</c><00:09:09.040><c> some</c><00:09:09.279><c> random</c>

00:09:09.670 --> 00:09:09.680 align:start position:0%
gonna be over here for some random
 

00:09:09.680 --> 00:09:11.110 align:start position:0%
gonna be over here for some random
reason<00:09:10.000><c> let's</c><00:09:10.160><c> just</c><00:09:10.320><c> see</c><00:09:10.480><c> how</c><00:09:10.640><c> our</c><00:09:10.720><c> binary</c>

00:09:11.110 --> 00:09:11.120 align:start position:0%
reason let's just see how our binary
 

00:09:11.120 --> 00:09:13.590 align:start position:0%
reason let's just see how our binary
search<00:09:11.360><c> would</c><00:09:11.680><c> work</c><00:09:12.000><c> in</c><00:09:12.080><c> that</c><00:09:12.320><c> case</c><00:09:12.959><c> well</c><00:09:13.440><c> we</c>

00:09:13.590 --> 00:09:13.600 align:start position:0%
search would work in that case well we
 

00:09:13.600 --> 00:09:15.430 align:start position:0%
search would work in that case well we
would<00:09:13.760><c> take</c><00:09:14.080><c> this</c><00:09:14.320><c> middle</c><00:09:14.640><c> value</c><00:09:14.959><c> say</c><00:09:15.120><c> that</c><00:09:15.360><c> it</c>

00:09:15.430 --> 00:09:15.440 align:start position:0%
would take this middle value say that it
 

00:09:15.440 --> 00:09:16.949 align:start position:0%
would take this middle value say that it
might<00:09:15.600><c> be</c><00:09:15.760><c> our</c><00:09:15.920><c> result</c><00:09:16.240><c> so</c><00:09:16.399><c> our</c><00:09:16.560><c> result</c><00:09:16.880><c> is</c>

00:09:16.949 --> 00:09:16.959 align:start position:0%
might be our result so our result is
 

00:09:16.959 --> 00:09:19.030 align:start position:0%
might be our result so our result is
gonna<00:09:17.120><c> initially</c><00:09:17.519><c> be</c><00:09:17.839><c> one</c><00:09:18.560><c> and</c><00:09:18.720><c> then</c><00:09:18.880><c> we're</c>

00:09:19.030 --> 00:09:19.040 align:start position:0%
gonna initially be one and then we're
 

00:09:19.040 --> 00:09:20.949 align:start position:0%
gonna initially be one and then we're
gonna<00:09:19.360><c> run</c><00:09:19.600><c> through</c><00:09:19.760><c> these</c><00:09:20.000><c> conditions</c><00:09:20.560><c> is</c>

00:09:20.949 --> 00:09:20.959 align:start position:0%
gonna run through these conditions is
 

00:09:20.959 --> 00:09:22.630 align:start position:0%
gonna run through these conditions is
the<00:09:21.120><c> middle</c><00:09:21.440><c> value</c><00:09:21.839><c> greater</c><00:09:22.080><c> than</c><00:09:22.240><c> or</c><00:09:22.399><c> equal</c>

00:09:22.630 --> 00:09:22.640 align:start position:0%
the middle value greater than or equal
 

00:09:22.640 --> 00:09:24.870 align:start position:0%
the middle value greater than or equal
to<00:09:22.800><c> the</c><00:09:22.959><c> leftmost</c><00:09:23.440><c> value</c><00:09:23.839><c> it's</c><00:09:24.160><c> not</c><00:09:24.480><c> so</c><00:09:24.640><c> we</c>

00:09:24.870 --> 00:09:24.880 align:start position:0%
to the leftmost value it's not so we
 

00:09:24.880 --> 00:09:27.509 align:start position:0%
to the leftmost value it's not so we
execute<00:09:25.360><c> the</c><00:09:25.519><c> else</c><00:09:25.920><c> case</c><00:09:26.640><c> which</c><00:09:27.120><c> basically</c>

00:09:27.509 --> 00:09:27.519 align:start position:0%
execute the else case which basically
 

00:09:27.519 --> 00:09:29.269 align:start position:0%
execute the else case which basically
means<00:09:27.760><c> we're</c><00:09:27.920><c> searching</c><00:09:28.480><c> left</c><00:09:28.959><c> right</c><00:09:29.120><c> so</c>

00:09:29.269 --> 00:09:29.279 align:start position:0%
means we're searching left right so
 

00:09:29.279 --> 00:09:31.030 align:start position:0%
means we're searching left right so
we're<00:09:29.440><c> going</c><00:09:29.519><c> to</c><00:09:29.600><c> take</c><00:09:30.240><c> uh</c><00:09:30.480><c> you</c><00:09:30.640><c> know</c><00:09:30.720><c> this</c><00:09:30.959><c> is</c>

00:09:31.030 --> 00:09:31.040 align:start position:0%
we're going to take uh you know this is
 

00:09:31.040 --> 00:09:32.389 align:start position:0%
we're going to take uh you know this is
not<00:09:31.200><c> going</c><00:09:31.279><c> to</c><00:09:31.360><c> be</c><00:09:31.519><c> considered</c><00:09:32.000><c> again</c><00:09:32.240><c> we're</c>

00:09:32.389 --> 00:09:32.399 align:start position:0%
not going to be considered again we're
 

00:09:32.399 --> 00:09:33.670 align:start position:0%
not going to be considered again we're
going<00:09:32.480><c> to</c><00:09:32.560><c> take</c><00:09:32.720><c> our</c><00:09:32.880><c> right</c><00:09:33.120><c> pointer</c><00:09:33.440><c> set</c><00:09:33.600><c> it</c>

00:09:33.670 --> 00:09:33.680 align:start position:0%
going to take our right pointer set it
 

00:09:33.680 --> 00:09:35.750 align:start position:0%
going to take our right pointer set it
to<00:09:33.920><c> mid</c><00:09:34.320><c> minus</c><00:09:34.720><c> 1.</c><00:09:34.880><c> so</c><00:09:35.040><c> our</c><00:09:35.200><c> right</c><00:09:35.440><c> pointer</c><00:09:35.680><c> is</c>

00:09:35.750 --> 00:09:35.760 align:start position:0%
to mid minus 1. so our right pointer is
 

00:09:35.760 --> 00:09:37.509 align:start position:0%
to mid minus 1. so our right pointer is
going<00:09:35.839><c> to</c><00:09:35.920><c> be</c><00:09:36.080><c> over</c><00:09:36.320><c> here</c><00:09:36.880><c> and</c><00:09:37.120><c> we're</c><00:09:37.279><c> going</c><00:09:37.440><c> to</c>

00:09:37.509 --> 00:09:37.519 align:start position:0%
going to be over here and we're going to
 

00:09:37.519 --> 00:09:39.030 align:start position:0%
going to be over here and we're going to
cross<00:09:37.839><c> out</c><00:09:38.000><c> 2</c><00:09:38.320><c> because</c><00:09:38.480><c> it's</c><00:09:38.640><c> never</c><00:09:38.880><c> going</c><00:09:38.959><c> to</c>

00:09:39.030 --> 00:09:39.040 align:start position:0%
cross out 2 because it's never going to
 

00:09:39.040 --> 00:09:41.030 align:start position:0%
cross out 2 because it's never going to
be<00:09:39.200><c> searched</c><00:09:39.600><c> right</c><00:09:39.839><c> because</c><00:09:40.080><c> we</c><00:09:40.560><c> shifted</c><00:09:40.959><c> our</c>

00:09:41.030 --> 00:09:41.040 align:start position:0%
be searched right because we shifted our
 

00:09:41.040 --> 00:09:42.790 align:start position:0%
be searched right because we shifted our
pointer<00:09:41.360><c> this</c><00:09:41.519><c> is</c><00:09:41.680><c> our</c><00:09:41.760><c> new</c><00:09:42.000><c> search</c><00:09:42.399><c> range</c>

00:09:42.790 --> 00:09:42.800 align:start position:0%
pointer this is our new search range
 

00:09:42.800 --> 00:09:45.350 align:start position:0%
pointer this is our new search range
once<00:09:43.120><c> again</c><00:09:43.440><c> you</c><00:09:43.519><c> can</c><00:09:43.760><c> see</c><00:09:44.399><c> that</c><00:09:44.640><c> this</c><00:09:44.959><c> range</c>

00:09:45.350 --> 00:09:45.360 align:start position:0%
once again you can see that this range
 

00:09:45.360 --> 00:09:47.350 align:start position:0%
once again you can see that this range
is<00:09:45.519><c> sorted</c><00:09:45.920><c> basically</c><00:09:46.399><c> the</c><00:09:46.560><c> left</c><00:09:46.800><c> value</c><00:09:47.279><c> is</c>

00:09:47.350 --> 00:09:47.360 align:start position:0%
is sorted basically the left value is
 

00:09:47.360 --> 00:09:49.910 align:start position:0%
is sorted basically the left value is
smaller<00:09:47.760><c> than</c><00:09:47.920><c> the</c><00:09:48.080><c> right</c><00:09:48.320><c> value</c><00:09:49.120><c> so</c><00:09:49.519><c> this</c><00:09:49.760><c> is</c>

00:09:49.910 --> 00:09:49.920 align:start position:0%
smaller than the right value so this is
 

00:09:49.920 --> 00:09:51.590 align:start position:0%
smaller than the right value so this is
already<00:09:50.160><c> sorted</c><00:09:50.560><c> we</c><00:09:50.640><c> can</c><00:09:50.800><c> take</c><00:09:50.959><c> the</c><00:09:51.120><c> leftmost</c>

00:09:51.590 --> 00:09:51.600 align:start position:0%
already sorted we can take the leftmost
 

00:09:51.600 --> 00:09:54.550 align:start position:0%
already sorted we can take the leftmost
value<00:09:51.920><c> over</c><00:09:52.160><c> here</c><00:09:52.399><c> c</c><00:09:53.120><c> is</c><00:09:53.440><c> this</c><00:09:54.000><c> smaller</c><00:09:54.399><c> than</c>

00:09:54.550 --> 00:09:54.560 align:start position:0%
value over here c is this smaller than
 

00:09:54.560 --> 00:09:56.630 align:start position:0%
value over here c is this smaller than
our<00:09:54.720><c> current</c><00:09:54.959><c> result</c><00:09:55.440><c> it's</c><00:09:55.680><c> not</c><00:09:56.080><c> so</c><00:09:56.480><c> our</c>

00:09:56.630 --> 00:09:56.640 align:start position:0%
our current result it's not so our
 

00:09:56.640 --> 00:09:58.630 align:start position:0%
our current result it's not so our
result<00:09:56.959><c> stays</c><00:09:57.360><c> the</c><00:09:57.519><c> same</c><00:09:58.000><c> and</c><00:09:58.160><c> we</c><00:09:58.320><c> don't</c><00:09:58.560><c> have</c>

00:09:58.630 --> 00:09:58.640 align:start position:0%
result stays the same and we don't have
 

00:09:58.640 --> 00:10:00.230 align:start position:0%
result stays the same and we don't have
to<00:09:58.800><c> search</c><00:09:59.120><c> this</c><00:09:59.279><c> entire</c><00:09:59.600><c> portion</c><00:10:00.000><c> because</c>

00:10:00.230 --> 00:10:00.240 align:start position:0%
to search this entire portion because
 

00:10:00.240 --> 00:10:02.870 align:start position:0%
to search this entire portion because
it's<00:10:00.480><c> already</c><00:10:00.959><c> sorted</c><00:10:01.680><c> so</c><00:10:01.839><c> that's</c><00:10:02.240><c> kind</c><00:10:02.480><c> of</c>

00:10:02.870 --> 00:10:02.880 align:start position:0%
it's already sorted so that's kind of
 

00:10:02.880 --> 00:10:04.710 align:start position:0%
it's already sorted so that's kind of
the<00:10:03.120><c> general</c><00:10:03.519><c> idea</c><00:10:03.920><c> of</c><00:10:04.000><c> how</c><00:10:04.160><c> this</c><00:10:04.320><c> algorithm</c>

00:10:04.710 --> 00:10:04.720 align:start position:0%
the general idea of how this algorithm
 

00:10:04.720 --> 00:10:06.230 align:start position:0%
the general idea of how this algorithm
is<00:10:04.880><c> going</c><00:10:04.959><c> to</c><00:10:05.040><c> work</c><00:10:05.279><c> it's</c><00:10:05.519><c> pretty</c><00:10:05.760><c> easy</c><00:10:06.000><c> once</c>

00:10:06.230 --> 00:10:06.240 align:start position:0%
is going to work it's pretty easy once
 

00:10:06.240 --> 00:10:07.509 align:start position:0%
is going to work it's pretty easy once
you<00:10:06.320><c> kind</c><00:10:06.480><c> of</c><00:10:06.560><c> figure</c><00:10:06.800><c> out</c><00:10:06.959><c> these</c><00:10:07.279><c> two</c>

00:10:07.509 --> 00:10:07.519 align:start position:0%
you kind of figure out these two
 

00:10:07.519 --> 00:10:09.350 align:start position:0%
you kind of figure out these two
conditions<00:10:08.320><c> with</c><00:10:08.480><c> that</c><00:10:08.720><c> being</c><00:10:08.880><c> said</c><00:10:09.120><c> we</c><00:10:09.279><c> can</c>

00:10:09.350 --> 00:10:09.360 align:start position:0%
conditions with that being said we can
 

00:10:09.360 --> 00:10:11.110 align:start position:0%
conditions with that being said we can
jump<00:10:09.600><c> into</c><00:10:09.760><c> the</c><00:10:09.839><c> code</c><00:10:10.160><c> okay</c><00:10:10.399><c> so</c><00:10:10.560><c> now</c><00:10:10.720><c> let's</c><00:10:10.880><c> get</c>

00:10:11.110 --> 00:10:11.120 align:start position:0%
jump into the code okay so now let's get
 

00:10:11.120 --> 00:10:13.030 align:start position:0%
jump into the code okay so now let's get
into<00:10:11.279><c> the</c><00:10:11.440><c> code</c><00:10:12.000><c> as</c><00:10:12.320><c> i</c><00:10:12.399><c> mentioned</c><00:10:12.800><c> we</c><00:10:12.880><c> are</c>

00:10:13.030 --> 00:10:13.040 align:start position:0%
into the code as i mentioned we are
 

00:10:13.040 --> 00:10:15.030 align:start position:0%
into the code as i mentioned we are
going<00:10:13.120><c> to</c><00:10:13.440><c> be</c><00:10:13.600><c> maintaining</c><00:10:14.160><c> a</c><00:10:14.240><c> result</c><00:10:14.720><c> now</c><00:10:14.880><c> we</c>

00:10:15.030 --> 00:10:15.040 align:start position:0%
going to be maintaining a result now we
 

00:10:15.040 --> 00:10:17.190 align:start position:0%
going to be maintaining a result now we
can<00:10:15.200><c> set</c><00:10:15.440><c> this</c><00:10:15.680><c> to</c><00:10:15.920><c> some</c><00:10:16.160><c> arbitrary</c><00:10:16.800><c> default</c>

00:10:17.190 --> 00:10:17.200 align:start position:0%
can set this to some arbitrary default
 

00:10:17.200 --> 00:10:18.790 align:start position:0%
can set this to some arbitrary default
value<00:10:17.600><c> i'm</c><00:10:17.680><c> just</c><00:10:17.839><c> going</c><00:10:17.920><c> to</c><00:10:18.000><c> set</c><00:10:18.160><c> it</c><00:10:18.240><c> to</c><00:10:18.480><c> nums</c>

00:10:18.790 --> 00:10:18.800 align:start position:0%
value i'm just going to set it to nums
 

00:10:18.800 --> 00:10:20.790 align:start position:0%
value i'm just going to set it to nums
of<00:10:18.959><c> 0.</c><00:10:19.279><c> we</c><00:10:19.360><c> could</c><00:10:19.519><c> just</c><00:10:19.680><c> pick</c><00:10:19.920><c> any</c><00:10:20.160><c> value</c><00:10:20.640><c> in</c>

00:10:20.790 --> 00:10:20.800 align:start position:0%
of 0. we could just pick any value in
 

00:10:20.800 --> 00:10:22.790 align:start position:0%
of 0. we could just pick any value in
the<00:10:21.040><c> input</c><00:10:21.360><c> array</c><00:10:21.680><c> nums</c><00:10:22.240><c> but</c><00:10:22.480><c> i'm</c><00:10:22.560><c> just</c><00:10:22.720><c> going</c>

00:10:22.790 --> 00:10:22.800 align:start position:0%
the input array nums but i'm just going
 

00:10:22.800 --> 00:10:24.710 align:start position:0%
the input array nums but i'm just going
to<00:10:22.880><c> choose</c><00:10:23.200><c> the</c><00:10:23.440><c> leftmost</c>

00:10:24.710 --> 00:10:24.720 align:start position:0%
to choose the leftmost
 

00:10:24.720 --> 00:10:25.990 align:start position:0%
to choose the leftmost
just<00:10:24.959><c> because</c>

00:10:25.990 --> 00:10:26.000 align:start position:0%
just because
 

00:10:26.000 --> 00:10:27.030 align:start position:0%
just because
we're<00:10:26.160><c> also</c><00:10:26.399><c> going</c><00:10:26.480><c> to</c><00:10:26.560><c> have</c><00:10:26.720><c> our</c><00:10:26.800><c> two</c>

00:10:27.030 --> 00:10:27.040 align:start position:0%
we're also going to have our two
 

00:10:27.040 --> 00:10:29.110 align:start position:0%
we're also going to have our two
pointers<00:10:27.440><c> initially</c><00:10:27.920><c> left</c><00:10:28.480><c> is</c><00:10:28.640><c> going</c><00:10:28.800><c> to</c><00:10:28.880><c> be</c>

00:10:29.110 --> 00:10:29.120 align:start position:0%
pointers initially left is going to be
 

00:10:29.120 --> 00:10:32.150 align:start position:0%
pointers initially left is going to be
all<00:10:29.200><c> the</c><00:10:29.360><c> way</c><00:10:29.760><c> at</c><00:10:30.000><c> the</c><00:10:30.399><c> left</c><00:10:31.200><c> index</c><00:10:31.519><c> zero</c><00:10:31.920><c> right</c>

00:10:32.150 --> 00:10:32.160 align:start position:0%
all the way at the left index zero right
 

00:10:32.160 --> 00:10:34.230 align:start position:0%
all the way at the left index zero right
is<00:10:32.320><c> going</c><00:10:32.399><c> to</c><00:10:32.480><c> be</c><00:10:32.640><c> at</c><00:10:32.800><c> the</c><00:10:33.200><c> rightmost</c><00:10:33.760><c> index</c>

00:10:34.230 --> 00:10:34.240 align:start position:0%
is going to be at the rightmost index
 

00:10:34.240 --> 00:10:36.550 align:start position:0%
is going to be at the rightmost index
length<00:10:34.560><c> of</c><00:10:34.720><c> nums</c><00:10:35.120><c> minus</c><00:10:35.600><c> one</c><00:10:36.160><c> and</c><00:10:36.320><c> we're</c><00:10:36.480><c> going</c>

00:10:36.550 --> 00:10:36.560 align:start position:0%
length of nums minus one and we're going
 

00:10:36.560 --> 00:10:39.190 align:start position:0%
length of nums minus one and we're going
to<00:10:36.640><c> keep</c><00:10:36.959><c> running</c><00:10:37.360><c> our</c><00:10:37.600><c> binary</c><00:10:38.000><c> search</c><00:10:38.800><c> while</c>

00:10:39.190 --> 00:10:39.200 align:start position:0%
to keep running our binary search while
 

00:10:39.200 --> 00:10:41.590 align:start position:0%
to keep running our binary search while
our<00:10:39.519><c> pointers</c><00:10:40.000><c> are</c><00:10:40.240><c> in</c><00:10:40.399><c> a</c><00:10:40.560><c> valid</c>

00:10:41.590 --> 00:10:41.600 align:start position:0%
our pointers are in a valid
 

00:10:41.600 --> 00:10:43.190 align:start position:0%
our pointers are in a valid
position<00:10:42.079><c> while</c><00:10:42.399><c> left</c><00:10:42.640><c> is</c><00:10:42.800><c> less</c><00:10:42.959><c> than</c><00:10:43.120><c> or</c>

00:10:43.190 --> 00:10:43.200 align:start position:0%
position while left is less than or
 

00:10:43.200 --> 00:10:45.430 align:start position:0%
position while left is less than or
equal<00:10:43.440><c> to</c><00:10:43.680><c> right</c><00:10:44.160><c> and</c><00:10:44.399><c> like</c><00:10:44.640><c> i</c><00:10:44.800><c> mentioned</c><00:10:45.279><c> if</c>

00:10:45.430 --> 00:10:45.440 align:start position:0%
equal to right and like i mentioned if
 

00:10:45.440 --> 00:10:48.389 align:start position:0%
equal to right and like i mentioned if
we<00:10:45.680><c> ever</c><00:10:46.000><c> get</c><00:10:46.320><c> to</c><00:10:46.640><c> a</c><00:10:47.040><c> subarray</c><00:10:47.600><c> that's</c><00:10:47.920><c> already</c>

00:10:48.389 --> 00:10:48.399 align:start position:0%
we ever get to a subarray that's already
 

00:10:48.399 --> 00:10:49.990 align:start position:0%
we ever get to a subarray that's already
sorted<00:10:48.800><c> basically</c><00:10:49.200><c> if</c><00:10:49.279><c> the</c><00:10:49.440><c> value</c><00:10:49.760><c> at</c><00:10:49.839><c> the</c>

00:10:49.990 --> 00:10:50.000 align:start position:0%
sorted basically if the value at the
 

00:10:50.000 --> 00:10:51.509 align:start position:0%
sorted basically if the value at the
left<00:10:50.720><c> is</c>

00:10:51.509 --> 00:10:51.519 align:start position:0%
left is
 

00:10:51.519 --> 00:10:54.870 align:start position:0%
left is
uh<00:10:51.760><c> less</c><00:10:52.079><c> than</c><00:10:52.320><c> the</c><00:10:52.480><c> value</c><00:10:52.959><c> at</c><00:10:53.200><c> the</c><00:10:53.600><c> right</c><00:10:54.320><c> then</c>

00:10:54.870 --> 00:10:54.880 align:start position:0%
uh less than the value at the right then
 

00:10:54.880 --> 00:10:57.350 align:start position:0%
uh less than the value at the right then
we<00:10:55.200><c> can</c><00:10:55.680><c> update</c><00:10:56.160><c> our</c><00:10:56.320><c> result</c><00:10:56.720><c> potentially</c>

00:10:57.350 --> 00:10:57.360 align:start position:0%
we can update our result potentially
 

00:10:57.360 --> 00:10:58.870 align:start position:0%
we can update our result potentially
setting<00:10:57.680><c> the</c><00:10:57.760><c> result</c><00:10:58.079><c> to</c><00:10:58.160><c> the</c><00:10:58.240><c> minimum</c><00:10:58.720><c> of</c>

00:10:58.870 --> 00:10:58.880 align:start position:0%
setting the result to the minimum of
 

00:10:58.880 --> 00:11:01.910 align:start position:0%
setting the result to the minimum of
itself<00:10:59.600><c> and</c><00:11:00.160><c> the</c><00:11:00.480><c> leftmost</c><00:11:01.120><c> value</c><00:11:01.519><c> of</c><00:11:01.680><c> this</c>

00:11:01.910 --> 00:11:01.920 align:start position:0%
itself and the leftmost value of this
 

00:11:01.920 --> 00:11:04.310 align:start position:0%
itself and the leftmost value of this
sorted<00:11:02.320><c> portion</c><00:11:02.720><c> and</c><00:11:02.800><c> then</c><00:11:02.959><c> we</c><00:11:03.040><c> can</c><00:11:03.360><c> break</c><00:11:04.079><c> out</c>

00:11:04.310 --> 00:11:04.320 align:start position:0%
sorted portion and then we can break out
 

00:11:04.320 --> 00:11:06.150 align:start position:0%
sorted portion and then we can break out
of<00:11:04.480><c> this</c><00:11:05.040><c> while</c><00:11:05.360><c> loop</c>

00:11:06.150 --> 00:11:06.160 align:start position:0%
of this while loop
 

00:11:06.160 --> 00:11:08.150 align:start position:0%
of this while loop
if<00:11:06.320><c> the</c><00:11:06.480><c> array</c><00:11:06.880><c> is</c><00:11:07.120><c> not</c><00:11:07.440><c> sorted</c><00:11:07.760><c> that's</c><00:11:08.000><c> when</c>

00:11:08.150 --> 00:11:08.160 align:start position:0%
if the array is not sorted that's when
 

00:11:08.160 --> 00:11:09.269 align:start position:0%
if the array is not sorted that's when
we're<00:11:08.320><c> actually</c><00:11:08.560><c> going</c><00:11:08.640><c> to</c><00:11:08.800><c> be</c><00:11:08.880><c> doing</c><00:11:09.120><c> our</c>

00:11:09.269 --> 00:11:09.279 align:start position:0%
we're actually going to be doing our
 

00:11:09.279 --> 00:11:11.269 align:start position:0%
we're actually going to be doing our
binary<00:11:09.680><c> search</c><00:11:10.079><c> portion</c><00:11:10.320><c> so</c><00:11:10.560><c> we</c><00:11:10.640><c> can</c><00:11:10.800><c> compute</c>

00:11:11.269 --> 00:11:11.279 align:start position:0%
binary search portion so we can compute
 

00:11:11.279 --> 00:11:14.150 align:start position:0%
binary search portion so we can compute
the<00:11:11.519><c> mid</c><00:11:12.240><c> uh</c><00:11:12.399><c> the</c><00:11:12.560><c> midpointer</c><00:11:13.360><c> basically</c><00:11:13.839><c> left</c>

00:11:14.150 --> 00:11:14.160 align:start position:0%
the mid uh the midpointer basically left
 

00:11:14.160 --> 00:11:17.350 align:start position:0%
the mid uh the midpointer basically left
plus<00:11:14.480><c> right</c><00:11:14.959><c> integer</c><00:11:15.360><c> division</c><00:11:16.160><c> by</c><00:11:16.560><c> two</c>

00:11:17.350 --> 00:11:17.360 align:start position:0%
plus right integer division by two
 

00:11:17.360 --> 00:11:18.949 align:start position:0%
plus right integer division by two
and<00:11:17.600><c> with</c><00:11:17.839><c> this</c><00:11:18.079><c> mid</c><00:11:18.320><c> value</c><00:11:18.640><c> we're</c><00:11:18.800><c> going</c><00:11:18.880><c> to</c>

00:11:18.949 --> 00:11:18.959 align:start position:0%
and with this mid value we're going to
 

00:11:18.959 --> 00:11:20.630 align:start position:0%
and with this mid value we're going to
potentially<00:11:19.600><c> update</c><00:11:19.920><c> our</c><00:11:20.079><c> results</c><00:11:20.399><c> setting</c>

00:11:20.630 --> 00:11:20.640 align:start position:0%
potentially update our results setting
 

00:11:20.640 --> 00:11:22.150 align:start position:0%
potentially update our results setting
the<00:11:20.720><c> result</c><00:11:21.120><c> equal</c><00:11:21.360><c> to</c><00:11:21.440><c> the</c><00:11:21.519><c> minimum</c><00:11:22.000><c> of</c>

00:11:22.150 --> 00:11:22.160 align:start position:0%
the result equal to the minimum of
 

00:11:22.160 --> 00:11:25.430 align:start position:0%
the result equal to the minimum of
itself<00:11:22.959><c> and</c><00:11:23.200><c> the</c><00:11:23.360><c> value</c><00:11:23.839><c> at</c><00:11:23.920><c> the</c><00:11:24.160><c> mid</c><00:11:24.800><c> pointer</c>

00:11:25.430 --> 00:11:25.440 align:start position:0%
itself and the value at the mid pointer
 

00:11:25.440 --> 00:11:27.110 align:start position:0%
itself and the value at the mid pointer
and<00:11:25.920><c> once</c><00:11:26.160><c> we're</c><00:11:26.320><c> done</c><00:11:26.560><c> with</c><00:11:26.640><c> that</c><00:11:26.800><c> now</c><00:11:27.040><c> we</c>

00:11:27.110 --> 00:11:27.120 align:start position:0%
and once we're done with that now we
 

00:11:27.120 --> 00:11:28.550 align:start position:0%
and once we're done with that now we
want<00:11:27.279><c> to</c><00:11:27.440><c> know</c><00:11:27.680><c> are</c><00:11:27.760><c> we</c><00:11:27.920><c> going</c><00:11:28.000><c> to</c><00:11:28.160><c> search</c><00:11:28.399><c> to</c>

00:11:28.550 --> 00:11:28.560 align:start position:0%
want to know are we going to search to
 

00:11:28.560 --> 00:11:30.150 align:start position:0%
want to know are we going to search to
the<00:11:28.800><c> left</c><00:11:29.120><c> or</c><00:11:29.279><c> are</c><00:11:29.440><c> we</c><00:11:29.519><c> going</c><00:11:29.600><c> to</c><00:11:29.760><c> search</c><00:11:30.000><c> to</c>

00:11:30.150 --> 00:11:30.160 align:start position:0%
the left or are we going to search to
 

00:11:30.160 --> 00:11:31.750 align:start position:0%
the left or are we going to search to
the<00:11:30.320><c> right</c><00:11:30.480><c> so</c><00:11:30.640><c> how</c><00:11:30.800><c> can</c><00:11:30.959><c> we</c><00:11:31.040><c> determine</c><00:11:31.519><c> that</c>

00:11:31.750 --> 00:11:31.760 align:start position:0%
the right so how can we determine that
 

00:11:31.760 --> 00:11:33.829 align:start position:0%
the right so how can we determine that
as<00:11:32.399><c> i</c><00:11:32.560><c> mentioned</c><00:11:32.880><c> the</c><00:11:33.040><c> condition</c><00:11:33.440><c> we</c><00:11:33.600><c> want</c><00:11:33.760><c> to</c>

00:11:33.829 --> 00:11:33.839 align:start position:0%
as i mentioned the condition we want to
 

00:11:33.839 --> 00:11:35.750 align:start position:0%
as i mentioned the condition we want to
know<00:11:34.079><c> is</c><00:11:34.240><c> this</c><00:11:34.480><c> mid</c><00:11:34.720><c> value</c><00:11:35.120><c> a</c><00:11:35.200><c> part</c><00:11:35.519><c> of</c><00:11:35.600><c> the</c>

00:11:35.750 --> 00:11:35.760 align:start position:0%
know is this mid value a part of the
 

00:11:35.760 --> 00:11:38.150 align:start position:0%
know is this mid value a part of the
left<00:11:36.079><c> sorted</c><00:11:36.480><c> portion</c><00:11:37.120><c> it</c><00:11:37.360><c> is</c><00:11:37.600><c> a</c><00:11:37.760><c> part</c><00:11:37.920><c> of</c><00:11:38.079><c> the</c>

00:11:38.150 --> 00:11:38.160 align:start position:0%
left sorted portion it is a part of the
 

00:11:38.160 --> 00:11:40.310 align:start position:0%
left sorted portion it is a part of the
left<00:11:38.399><c> sorted</c><00:11:38.720><c> portion</c><00:11:39.200><c> if</c><00:11:39.440><c> the</c><00:11:39.760><c> value</c><00:11:40.160><c> at</c><00:11:40.240><c> the</c>

00:11:40.310 --> 00:11:40.320 align:start position:0%
left sorted portion if the value at the
 

00:11:40.320 --> 00:11:42.069 align:start position:0%
left sorted portion if the value at the
middle<00:11:40.640><c> index</c><00:11:40.959><c> is</c><00:11:41.120><c> greater</c><00:11:41.440><c> than</c><00:11:41.519><c> or</c><00:11:41.680><c> equal</c><00:11:41.920><c> to</c>

00:11:42.069 --> 00:11:42.079 align:start position:0%
middle index is greater than or equal to
 

00:11:42.079 --> 00:11:44.150 align:start position:0%
middle index is greater than or equal to
the<00:11:42.160><c> value</c><00:11:42.640><c> all</c><00:11:42.800><c> the</c><00:11:42.959><c> way</c><00:11:43.200><c> at</c><00:11:43.279><c> the</c><00:11:43.519><c> left</c><00:11:43.920><c> that</c>

00:11:44.150 --> 00:11:44.160 align:start position:0%
the value all the way at the left that
 

00:11:44.160 --> 00:11:46.310 align:start position:0%
the value all the way at the left that
means<00:11:44.399><c> it</c><00:11:44.640><c> is</c><00:11:44.880><c> a</c><00:11:44.959><c> part</c><00:11:45.200><c> of</c><00:11:45.360><c> the</c><00:11:45.519><c> left</c><00:11:45.920><c> sorted</c>

00:11:46.310 --> 00:11:46.320 align:start position:0%
means it is a part of the left sorted
 

00:11:46.320 --> 00:11:48.389 align:start position:0%
means it is a part of the left sorted
portion<00:11:46.959><c> in</c><00:11:47.040><c> which</c><00:11:47.279><c> case</c><00:11:47.519><c> we</c><00:11:47.680><c> want</c><00:11:47.839><c> to</c><00:11:48.000><c> search</c>

00:11:48.389 --> 00:11:48.399 align:start position:0%
portion in which case we want to search
 

00:11:48.399 --> 00:11:50.230 align:start position:0%
portion in which case we want to search
the<00:11:48.720><c> right</c><00:11:48.959><c> sorted</c><00:11:49.360><c> portion</c><00:11:49.680><c> so</c><00:11:49.839><c> we</c><00:11:49.920><c> can</c><00:11:50.079><c> take</c>

00:11:50.230 --> 00:11:50.240 align:start position:0%
the right sorted portion so we can take
 

00:11:50.240 --> 00:11:52.470 align:start position:0%
the right sorted portion so we can take
our<00:11:50.399><c> midpointer</c><00:11:51.120><c> set</c><00:11:51.360><c> it</c><00:11:51.760><c> take</c><00:11:52.000><c> our</c><00:11:52.160><c> left</c>

00:11:52.470 --> 00:11:52.480 align:start position:0%
our midpointer set it take our left
 

00:11:52.480 --> 00:11:54.949 align:start position:0%
our midpointer set it take our left
pointer<00:11:52.800><c> set</c><00:11:52.959><c> it</c><00:11:53.040><c> to</c><00:11:53.200><c> mid</c><00:11:53.600><c> plus</c><00:11:54.000><c> one</c><00:11:54.560><c> now</c><00:11:54.800><c> the</c>

00:11:54.949 --> 00:11:54.959 align:start position:0%
pointer set it to mid plus one now the
 

00:11:54.959 --> 00:11:56.710 align:start position:0%
pointer set it to mid plus one now the
else<00:11:55.200><c> case</c><00:11:55.519><c> is</c><00:11:55.680><c> if</c><00:11:55.839><c> we're</c><00:11:56.079><c> in</c><00:11:56.240><c> the</c><00:11:56.480><c> right</c>

00:11:56.710 --> 00:11:56.720 align:start position:0%
else case is if we're in the right
 

00:11:56.720 --> 00:11:58.629 align:start position:0%
else case is if we're in the right
sorted<00:11:57.120><c> portion</c><00:11:57.680><c> in</c><00:11:57.839><c> which</c><00:11:58.000><c> case</c><00:11:58.240><c> we</c><00:11:58.399><c> want</c><00:11:58.560><c> to</c>

00:11:58.629 --> 00:11:58.639 align:start position:0%
sorted portion in which case we want to
 

00:11:58.639 --> 00:12:00.629 align:start position:0%
sorted portion in which case we want to
search<00:11:58.959><c> to</c><00:11:59.120><c> the</c><00:11:59.360><c> left</c><00:11:59.760><c> so</c><00:11:59.920><c> we</c><00:12:00.079><c> set</c><00:12:00.320><c> the</c><00:12:00.399><c> right</c>

00:12:00.629 --> 00:12:00.639 align:start position:0%
search to the left so we set the right
 

00:12:00.639 --> 00:12:03.190 align:start position:0%
search to the left so we set the right
pointer<00:12:00.959><c> equal</c><00:12:01.120><c> to</c><00:12:01.360><c> mid</c><00:12:01.839><c> minus</c><00:12:02.399><c> one</c><00:12:02.880><c> and</c><00:12:03.040><c> we're</c>

00:12:03.190 --> 00:12:03.200 align:start position:0%
pointer equal to mid minus one and we're
 

00:12:03.200 --> 00:12:04.870 align:start position:0%
pointer equal to mid minus one and we're
going<00:12:03.279><c> to</c><00:12:03.360><c> keep</c><00:12:03.600><c> doing</c><00:12:03.839><c> that</c><00:12:04.000><c> until</c><00:12:04.320><c> we</c><00:12:04.560><c> find</c>

00:12:04.870 --> 00:12:04.880 align:start position:0%
going to keep doing that until we find
 

00:12:04.880 --> 00:12:06.870 align:start position:0%
going to keep doing that until we find
the<00:12:05.040><c> solution</c><00:12:05.519><c> or</c><00:12:05.760><c> until</c><00:12:06.079><c> our</c><00:12:06.240><c> binary</c><00:12:06.560><c> search</c>

00:12:06.870 --> 00:12:06.880 align:start position:0%
the solution or until our binary search
 

00:12:06.880 --> 00:12:09.350 align:start position:0%
the solution or until our binary search
has<00:12:07.120><c> basically</c><00:12:07.600><c> searched</c><00:12:08.000><c> the</c><00:12:08.240><c> entire</c><00:12:08.880><c> array</c>

00:12:09.350 --> 00:12:09.360 align:start position:0%
has basically searched the entire array
 

00:12:09.360 --> 00:12:10.790 align:start position:0%
has basically searched the entire array
and<00:12:09.440><c> then</c><00:12:09.680><c> after</c><00:12:09.920><c> that</c><00:12:10.079><c> we</c><00:12:10.160><c> can</c><00:12:10.320><c> go</c><00:12:10.480><c> ahead</c><00:12:10.639><c> and</c>

00:12:10.790 --> 00:12:10.800 align:start position:0%
and then after that we can go ahead and
 

00:12:10.800 --> 00:12:13.350 align:start position:0%
and then after that we can go ahead and
return<00:12:11.200><c> the</c><00:12:11.360><c> result</c><00:12:11.839><c> value</c><00:12:12.639><c> as</c><00:12:12.880><c> you</c><00:12:12.959><c> can</c><00:12:13.120><c> see</c>

00:12:13.350 --> 00:12:13.360 align:start position:0%
return the result value as you can see
 

00:12:13.360 --> 00:12:16.710 align:start position:0%
return the result value as you can see
this<00:12:13.519><c> solution</c><00:12:14.240><c> does</c><00:12:14.639><c> run</c><00:12:15.040><c> it's</c><00:12:15.360><c> pretty</c><00:12:15.760><c> uh</c>

00:12:16.710 --> 00:12:16.720 align:start position:0%
this solution does run it's pretty uh
 

00:12:16.720 --> 00:12:18.150 align:start position:0%
this solution does run it's pretty uh
short<00:12:17.040><c> and</c><00:12:17.120><c> concise</c><00:12:17.680><c> i'm</c><00:12:17.760><c> sure</c><00:12:17.920><c> there</c><00:12:18.079><c> are</c>

00:12:18.150 --> 00:12:18.160 align:start position:0%
short and concise i'm sure there are
 

00:12:18.160 --> 00:12:20.310 align:start position:0%
short and concise i'm sure there are
ways<00:12:18.399><c> you</c><00:12:18.560><c> can</c><00:12:18.639><c> make</c><00:12:18.800><c> it</c><00:12:18.959><c> even</c><00:12:19.279><c> shorter</c><00:12:19.920><c> but</c><00:12:20.160><c> it</c>

00:12:20.310 --> 00:12:20.320 align:start position:0%
ways you can make it even shorter but it
 

00:12:20.320 --> 00:12:21.910 align:start position:0%
ways you can make it even shorter but it
runs<00:12:20.639><c> pretty</c><00:12:20.880><c> efficiently</c><00:12:21.360><c> so</c><00:12:21.519><c> i</c><00:12:21.600><c> hope</c><00:12:21.760><c> that</c>

00:12:21.910 --> 00:12:21.920 align:start position:0%
runs pretty efficiently so i hope that
 

00:12:21.920 --> 00:12:24.230 align:start position:0%
runs pretty efficiently so i hope that
this<00:12:22.079><c> was</c><00:12:22.320><c> helpful</c><00:12:22.800><c> if</c><00:12:22.959><c> it</c><00:12:23.120><c> was</c><00:12:23.680><c> please</c><00:12:24.000><c> like</c>

00:12:24.230 --> 00:12:24.240 align:start position:0%
this was helpful if it was please like
 

00:12:24.240 --> 00:12:26.230 align:start position:0%
this was helpful if it was please like
and<00:12:24.320><c> subscribe</c><00:12:24.880><c> it</c><00:12:25.040><c> supports</c><00:12:25.440><c> the</c><00:12:25.600><c> channel</c><00:12:26.000><c> a</c>

00:12:26.230 --> 00:12:26.240 align:start position:0%
and subscribe it supports the channel a
 

00:12:26.240 --> 00:12:28.230 align:start position:0%
and subscribe it supports the channel a
lot<00:12:26.639><c> and</c><00:12:26.800><c> i'll</c><00:12:27.040><c> hopefully</c><00:12:27.680><c> see</c><00:12:27.839><c> you</c><00:12:28.000><c> pretty</c>

00:12:28.230 --> 00:12:28.240 align:start position:0%
lot and i'll hopefully see you pretty
 

00:12:28.240 --> 00:12:31.839 align:start position:0%
lot and i'll hopefully see you pretty
soon<00:12:28.720><c> thanks</c><00:12:28.959><c> for</c><00:12:29.120><c> watching</c>

