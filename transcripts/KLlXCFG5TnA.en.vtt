WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.720 align:start position:0%
 
let's<00:00:00.480><c> all</c><00:00:00.690><c> leak</c><00:00:00.989><c> code</c><00:00:01.260><c> one</c><00:00:01.560><c> to</c><00:00:01.979><c> some</c><00:00:02.280><c> the</c><00:00:02.490><c> most</c>

00:00:02.720 --> 00:00:02.730 align:start position:0%
let's all leak code one to some the most
 

00:00:02.730 --> 00:00:04.970 align:start position:0%
let's all leak code one to some the most
popular<00:00:03.389><c> leak</c><00:00:03.629><c> code</c><00:00:03.870><c> question</c><00:00:04.380><c> so</c><00:00:04.830><c> we're</c>

00:00:04.970 --> 00:00:04.980 align:start position:0%
popular leak code question so we're
 

00:00:04.980 --> 00:00:07.490 align:start position:0%
popular leak code question so we're
given<00:00:05.339><c> an</c><00:00:05.430><c> input</c><00:00:05.910><c> array</c><00:00:06.029><c> and</c><00:00:06.420><c> some</c><00:00:06.870><c> target</c><00:00:07.350><c> in</c>

00:00:07.490 --> 00:00:07.500 align:start position:0%
given an input array and some target in
 

00:00:07.500 --> 00:00:10.100 align:start position:0%
given an input array and some target in
this<00:00:07.649><c> case</c><00:00:07.710><c> 9</c><00:00:08.189><c> and</c><00:00:08.519><c> we</c><00:00:09.120><c> want</c><00:00:09.330><c> to</c><00:00:09.420><c> find</c><00:00:09.660><c> the</c><00:00:09.780><c> two</c>

00:00:10.100 --> 00:00:10.110 align:start position:0%
this case 9 and we want to find the two
 

00:00:10.110 --> 00:00:12.589 align:start position:0%
this case 9 and we want to find the two
values<00:00:10.679><c> in</c><00:00:10.889><c> this</c><00:00:11.070><c> input</c><00:00:11.280><c> array</c><00:00:11.490><c> that</c><00:00:11.790><c> sum</c><00:00:12.210><c> to</c><00:00:12.240><c> 9</c>

00:00:12.589 --> 00:00:12.599 align:start position:0%
values in this input array that sum to 9
 

00:00:12.599 --> 00:00:15.499 align:start position:0%
values in this input array that sum to 9
so<00:00:13.080><c> in</c><00:00:13.230><c> this</c><00:00:13.349><c> case</c><00:00:13.590><c> it's</c><00:00:13.830><c> 2</c><00:00:14.130><c> &amp;</c><00:00:14.370><c> 7</c><00:00:14.580><c> now</c><00:00:15.150><c> we</c><00:00:15.210><c> want</c>

00:00:15.499 --> 00:00:15.509 align:start position:0%
so in this case it's 2 &amp; 7 now we want
 

00:00:15.509 --> 00:00:17.180 align:start position:0%
so in this case it's 2 &amp; 7 now we want
to<00:00:15.570><c> return</c><00:00:15.839><c> the</c><00:00:15.900><c> indices</c><00:00:16.590><c> of</c><00:00:16.650><c> these</c><00:00:16.920><c> two</c>

00:00:17.180 --> 00:00:17.190 align:start position:0%
to return the indices of these two
 

00:00:17.190 --> 00:00:20.090 align:start position:0%
to return the indices of these two
values<00:00:17.640><c> so</c><00:00:17.820><c> the</c><00:00:18.150><c> index</c><00:00:18.630><c> of</c><00:00:18.869><c> zero</c><00:00:19.140><c> of</c><00:00:19.500><c> the</c><00:00:19.830><c> index</c>

00:00:20.090 --> 00:00:20.100 align:start position:0%
values so the index of zero of the index
 

00:00:20.100 --> 00:00:22.910 align:start position:0%
values so the index of zero of the index
of<00:00:20.220><c> two</c><00:00:20.400><c> is</c><00:00:20.580><c> zero</c><00:00:20.820><c> the</c><00:00:21.029><c> index</c><00:00:21.330><c> of</c><00:00:21.480><c> 7</c><00:00:21.869><c> is</c><00:00:22.020><c> 1</c><00:00:22.260><c> so</c><00:00:22.800><c> we</c>

00:00:22.910 --> 00:00:22.920 align:start position:0%
of two is zero the index of 7 is 1 so we
 

00:00:22.920 --> 00:00:24.050 align:start position:0%
of two is zero the index of 7 is 1 so we
return<00:00:23.189><c> 0</c><00:00:23.460><c> &amp;</c><00:00:23.670><c> 1</c>

00:00:24.050 --> 00:00:24.060 align:start position:0%
return 0 &amp; 1
 

00:00:24.060 --> 00:00:26.029 align:start position:0%
return 0 &amp; 1
we're<00:00:24.600><c> guaranteed</c><00:00:25.230><c> that</c><00:00:25.439><c> there's</c><00:00:25.590><c> exactly</c>

00:00:26.029 --> 00:00:26.039 align:start position:0%
we're guaranteed that there's exactly
 

00:00:26.039 --> 00:00:27.890 align:start position:0%
we're guaranteed that there's exactly
one<00:00:26.460><c> solution</c><00:00:26.670><c> so</c><00:00:27.180><c> we</c><00:00:27.300><c> don't</c><00:00:27.510><c> have</c><00:00:27.630><c> to</c><00:00:27.720><c> worry</c>

00:00:27.890 --> 00:00:27.900 align:start position:0%
one solution so we don't have to worry
 

00:00:27.900 --> 00:00:30.140 align:start position:0%
one solution so we don't have to worry
about<00:00:28.080><c> not</c><00:00:29.010><c> finding</c><00:00:29.429><c> a</c><00:00:29.519><c> solution</c><00:00:29.699><c> and</c><00:00:30.119><c> we</c>

00:00:30.140 --> 00:00:30.150 align:start position:0%
about not finding a solution and we
 

00:00:30.150 --> 00:00:31.250 align:start position:0%
about not finding a solution and we
don't<00:00:30.330><c> have</c><00:00:30.420><c> to</c><00:00:30.539><c> worry</c><00:00:30.720><c> about</c><00:00:30.840><c> multiple</c>

00:00:31.250 --> 00:00:31.260 align:start position:0%
don't have to worry about multiple
 

00:00:31.260 --> 00:00:33.920 align:start position:0%
don't have to worry about multiple
solutions<00:00:32.130><c> now</c><00:00:32.610><c> the</c><00:00:32.669><c> most</c><00:00:33.000><c> intuitive</c><00:00:33.540><c> way</c><00:00:33.899><c> to</c>

00:00:33.920 --> 00:00:33.930 align:start position:0%
solutions now the most intuitive way to
 

00:00:33.930 --> 00:00:35.900 align:start position:0%
solutions now the most intuitive way to
solve<00:00:34.350><c> this</c><00:00:34.559><c> problem</c><00:00:34.620><c> is</c><00:00:35.070><c> basically</c><00:00:35.610><c> just</c>

00:00:35.900 --> 00:00:35.910 align:start position:0%
solve this problem is basically just
 

00:00:35.910 --> 00:00:38.000 align:start position:0%
solve this problem is basically just
check<00:00:36.149><c> every</c><00:00:36.660><c> combination</c><00:00:37.140><c> of</c><00:00:37.530><c> two</c><00:00:37.770><c> values</c>

00:00:38.000 --> 00:00:38.010 align:start position:0%
check every combination of two values
 

00:00:38.010 --> 00:00:40.090 align:start position:0%
check every combination of two values
and<00:00:38.430><c> see</c><00:00:38.670><c> if</c><00:00:38.790><c> they</c><00:00:38.940><c> can</c><00:00:39.090><c> sum</c><00:00:39.360><c> up</c><00:00:39.390><c> to</c><00:00:39.629><c> our</c><00:00:39.750><c> target</c>

00:00:40.090 --> 00:00:40.100 align:start position:0%
and see if they can sum up to our target
 

00:00:40.100 --> 00:00:43.639 align:start position:0%
and see if they can sum up to our target
so<00:00:41.100><c> we</c><00:00:41.700><c> start</c><00:00:42.059><c> at</c><00:00:42.149><c> 2</c><00:00:42.480><c> we</c><00:00:42.809><c> check</c><00:00:43.110><c> every</c>

00:00:43.639 --> 00:00:43.649 align:start position:0%
so we start at 2 we check every
 

00:00:43.649 --> 00:00:45.709 align:start position:0%
so we start at 2 we check every
combination<00:00:44.370><c> we</c><00:00:44.520><c> can</c><00:00:44.550><c> make</c><00:00:44.879><c> that</c><00:00:45.030><c> includes</c><00:00:45.450><c> 2</c>

00:00:45.709 --> 00:00:45.719 align:start position:0%
combination we can make that includes 2
 

00:00:45.719 --> 00:00:48.049 align:start position:0%
combination we can make that includes 2
so<00:00:46.170><c> we</c><00:00:46.320><c> scan</c><00:00:46.680><c> through</c><00:00:46.710><c> the</c><00:00:47.100><c> remainder</c><00:00:47.760><c> of</c><00:00:47.789><c> the</c>

00:00:48.049 --> 00:00:48.059 align:start position:0%
so we scan through the remainder of the
 

00:00:48.059 --> 00:00:51.380 align:start position:0%
so we scan through the remainder of the
array<00:00:48.360><c> 1</c><00:00:48.840><c> 5</c><00:00:49.469><c> 3</c><00:00:50.010><c> and</c><00:00:50.250><c> check</c><00:00:50.670><c> if</c><00:00:50.789><c> any</c><00:00:51.059><c> of</c><00:00:51.270><c> those</c>

00:00:51.380 --> 00:00:51.390 align:start position:0%
array 1 5 3 and check if any of those
 

00:00:51.390 --> 00:00:54.350 align:start position:0%
array 1 5 3 and check if any of those
numbers<00:00:51.870><c> added</c><00:00:52.379><c> to</c><00:00:52.530><c> 2</c><00:00:52.710><c> some</c><00:00:53.370><c> store</c><00:00:53.670><c> target</c><00:00:54.059><c> for</c>

00:00:54.350 --> 00:00:54.360 align:start position:0%
numbers added to 2 some store target for
 

00:00:54.360 --> 00:01:00.290 align:start position:0%
numbers added to 2 some store target for
in<00:00:54.570><c> this</c><00:00:55.050><c> case</c><00:00:55.289><c> none</c><00:00:55.920><c> of</c><00:00:56.039><c> them</c><00:00:56.219><c> do</c><00:00:58.640><c> so</c><00:00:59.640><c> next</c><00:01:00.000><c> we</c>

00:01:00.290 --> 00:01:00.300 align:start position:0%
in this case none of them do so next we
 

00:01:00.300 --> 00:01:01.490 align:start position:0%
in this case none of them do so next we
can<00:01:00.449><c> repeat</c><00:01:00.780><c> the</c><00:01:00.960><c> process</c>

00:01:01.490 --> 00:01:01.500 align:start position:0%
can repeat the process
 

00:01:01.500 --> 00:01:04.100 align:start position:0%
can repeat the process
let's<00:01:01.859><c> check</c><00:01:02.100><c> every</c><00:01:02.609><c> combination</c><00:01:03.110><c> including</c>

00:01:04.100 --> 00:01:04.110 align:start position:0%
let's check every combination including
 

00:01:04.110 --> 00:01:06.740 align:start position:0%
let's check every combination including
one<00:01:04.470><c> that</c><00:01:04.979><c> sums</c><00:01:05.280><c> up</c><00:01:05.430><c> the</c><00:01:05.610><c> target</c><00:01:05.939><c> for</c><00:01:06.240><c> so</c><00:01:06.600><c> we</c>

00:01:06.740 --> 00:01:06.750 align:start position:0%
one that sums up the target for so we
 

00:01:06.750 --> 00:01:08.390 align:start position:0%
one that sums up the target for so we
scan<00:01:07.020><c> through</c><00:01:07.260><c> every</c><00:01:07.619><c> element</c><00:01:08.010><c> that</c><00:01:08.100><c> comes</c>

00:01:08.390 --> 00:01:08.400 align:start position:0%
scan through every element that comes
 

00:01:08.400 --> 00:01:12.170 align:start position:0%
scan through every element that comes
after<00:01:08.850><c> at</c><00:01:08.970><c> 5</c><00:01:09.299><c> &amp;</c><00:01:09.540><c> 3</c><00:01:09.600><c> and</c><00:01:10.020><c> we</c><00:01:10.380><c> find</c><00:01:10.770><c> that</c><00:01:11.010><c> one</c>

00:01:12.170 --> 00:01:12.180 align:start position:0%
after at 5 &amp; 3 and we find that one
 

00:01:12.180 --> 00:01:15.580 align:start position:0%
after at 5 &amp; 3 and we find that one
added<00:01:12.689><c> with</c><00:01:12.720><c> 3</c><00:01:13.320><c> sums</c><00:01:13.920><c> up</c><00:01:14.100><c> to</c><00:01:14.250><c> our</c><00:01:14.340><c> target</c><00:01:14.520><c> 4</c>

00:01:15.580 --> 00:01:15.590 align:start position:0%
added with 3 sums up to our target 4
 

00:01:15.590 --> 00:01:18.140 align:start position:0%
added with 3 sums up to our target 4
notice<00:01:16.590><c> that</c><00:01:16.920><c> we</c><00:01:17.040><c> didn't</c><00:01:17.400><c> have</c><00:01:17.490><c> to</c><00:01:17.640><c> check</c><00:01:17.909><c> the</c>

00:01:18.140 --> 00:01:18.150 align:start position:0%
notice that we didn't have to check the
 

00:01:18.150 --> 00:01:20.240 align:start position:0%
notice that we didn't have to check the
values<00:01:18.570><c> that</c><00:01:18.750><c> came</c><00:01:18.960><c> before</c><00:01:19.200><c> 1</c><00:01:19.770><c> because</c><00:01:20.130><c> we</c>

00:01:20.240 --> 00:01:20.250 align:start position:0%
values that came before 1 because we
 

00:01:20.250 --> 00:01:22.730 align:start position:0%
values that came before 1 because we
already<00:01:20.520><c> checked</c><00:01:21.030><c> the</c><00:01:21.270><c> combination</c><00:01:21.930><c> 2</c><00:01:22.259><c> &amp;</c><00:01:22.500><c> 1</c>

00:01:22.730 --> 00:01:22.740 align:start position:0%
already checked the combination 2 &amp; 1
 

00:01:22.740 --> 00:01:24.859 align:start position:0%
already checked the combination 2 &amp; 1
when<00:01:23.189><c> we</c><00:01:23.340><c> were</c><00:01:23.430><c> up</c><00:01:23.640><c> over</c><00:01:23.970><c> here</c><00:01:24.240><c> remember</c><00:01:24.420><c> when</c>

00:01:24.859 --> 00:01:24.869 align:start position:0%
when we were up over here remember when
 

00:01:24.869 --> 00:01:27.440 align:start position:0%
when we were up over here remember when
we<00:01:24.990><c> checked</c><00:01:25.259><c> every</c><00:01:25.619><c> combination</c><00:01:25.979><c> with</c><00:01:26.460><c> 2</c><00:01:26.759><c> so</c>

00:01:27.440 --> 00:01:27.450 align:start position:0%
we checked every combination with 2 so
 

00:01:27.450 --> 00:01:29.120 align:start position:0%
we checked every combination with 2 so
we<00:01:27.570><c> didn't</c><00:01:27.840><c> have</c><00:01:27.869><c> to</c><00:01:28.049><c> repeat</c><00:01:28.439><c> that</c><00:01:28.680><c> work</c><00:01:28.890><c> down</c>

00:01:29.120 --> 00:01:29.130 align:start position:0%
we didn't have to repeat that work down
 

00:01:29.130 --> 00:01:30.770 align:start position:0%
we didn't have to repeat that work down
here<00:01:29.400><c> we</c><00:01:29.520><c> only</c><00:01:29.729><c> had</c><00:01:30.000><c> to</c><00:01:30.090><c> check</c><00:01:30.270><c> the</c><00:01:30.329><c> numbers</c>

00:01:30.770 --> 00:01:30.780 align:start position:0%
here we only had to check the numbers
 

00:01:30.780 --> 00:01:32.270 align:start position:0%
here we only had to check the numbers
that<00:01:30.900><c> came</c><00:01:31.079><c> after</c><00:01:31.740><c> 1</c>

00:01:32.270 --> 00:01:32.280 align:start position:0%
that came after 1
 

00:01:32.280 --> 00:01:34.490 align:start position:0%
that came after 1
so<00:01:32.640><c> the</c><00:01:32.759><c> runtime</c><00:01:33.299><c> of</c><00:01:33.329><c> this</c><00:01:33.689><c> algorithm</c><00:01:34.079><c> isn't</c>

00:01:34.490 --> 00:01:34.500 align:start position:0%
so the runtime of this algorithm isn't
 

00:01:34.500 --> 00:01:36.770 align:start position:0%
so the runtime of this algorithm isn't
super<00:01:35.009><c> efficient</c><00:01:35.579><c> this</c><00:01:35.880><c> is</c><00:01:36.000><c> basically</c><00:01:36.390><c> brute</c>

00:01:36.770 --> 00:01:36.780 align:start position:0%
super efficient this is basically brute
 

00:01:36.780 --> 00:01:38.330 align:start position:0%
super efficient this is basically brute
force<00:01:37.079><c> we're</c><00:01:37.320><c> going</c><00:01:37.590><c> through</c><00:01:37.799><c> the</c><00:01:37.890><c> entire</c>

00:01:38.330 --> 00:01:38.340 align:start position:0%
force we're going through the entire
 

00:01:38.340 --> 00:01:40.399 align:start position:0%
force we're going through the entire
array<00:01:38.759><c> of</c><00:01:38.909><c> length</c><00:01:39.150><c> and</c><00:01:39.450><c> and</c><00:01:39.810><c> we're</c><00:01:40.140><c> gonna</c><00:01:40.229><c> do</c>

00:01:40.399 --> 00:01:40.409 align:start position:0%
array of length and and we're gonna do
 

00:01:40.409 --> 00:01:43.429 align:start position:0%
array of length and and we're gonna do
that<00:01:40.439><c> worst</c><00:01:41.040><c> case</c><00:01:41.220><c> n</c><00:01:41.640><c> times</c><00:01:42.299><c> for</c><00:01:42.930><c> each</c><00:01:43.110><c> number</c>

00:01:43.429 --> 00:01:43.439 align:start position:0%
that worst case n times for each number
 

00:01:43.439 --> 00:01:46.069 align:start position:0%
that worst case n times for each number
this<00:01:44.100><c> means</c><00:01:44.340><c> that</c><00:01:44.579><c> over</c><00:01:44.909><c> all</c><00:01:45.180><c> worst</c><00:01:45.479><c> case</c><00:01:45.780><c> time</c>

00:01:46.069 --> 00:01:46.079 align:start position:0%
this means that over all worst case time
 

00:01:46.079 --> 00:01:49.160 align:start position:0%
this means that over all worst case time
complexity<00:01:46.619><c> will</c><00:01:46.770><c> be</c><00:01:47.009><c> O</c><00:01:47.159><c> of</c><00:01:47.220><c> N</c><00:01:47.670><c> squared</c><00:01:48.030><c> so</c><00:01:48.869><c> can</c>

00:01:49.160 --> 00:01:49.170 align:start position:0%
complexity will be O of N squared so can
 

00:01:49.170 --> 00:01:51.950 align:start position:0%
complexity will be O of N squared so can
we<00:01:49.350><c> do</c><00:01:49.530><c> better</c><00:01:49.770><c> now</c><00:01:50.729><c> the</c><00:01:50.790><c> thing</c><00:01:51.210><c> to</c><00:01:51.360><c> notice</c><00:01:51.600><c> is</c>

00:01:51.950 --> 00:01:51.960 align:start position:0%
we do better now the thing to notice is
 

00:01:51.960 --> 00:01:55.999 align:start position:0%
we do better now the thing to notice is
that<00:01:52.020><c> for</c><00:01:52.470><c> each</c><00:01:52.710><c> number</c><00:01:53.040><c> for</c><00:01:53.460><c> example</c><00:01:53.909><c> 1</c><00:01:55.009><c> the</c>

00:01:55.999 --> 00:01:56.009 align:start position:0%
that for each number for example 1 the
 

00:01:56.009 --> 00:01:58.160 align:start position:0%
that for each number for example 1 the
value<00:01:56.729><c> we're</c><00:01:57.119><c> looking</c><00:01:57.149><c> for</c><00:01:57.780><c> is</c><00:01:57.960><c> the</c>

00:01:58.160 --> 00:01:58.170 align:start position:0%
value we're looking for is the
 

00:01:58.170 --> 00:02:00.709 align:start position:0%
value we're looking for is the
difference<00:01:58.770><c> between</c><00:01:59.009><c> the</c><00:01:59.340><c> target</c><00:01:59.670><c> and</c><00:02:00.090><c> this</c>

00:02:00.709 --> 00:02:00.719 align:start position:0%
difference between the target and this
 

00:02:00.719 --> 00:02:03.859 align:start position:0%
difference between the target and this
value<00:02:01.110><c> 1</c><00:02:01.350><c> so</c><00:02:01.590><c> we're</c><00:02:01.799><c> looking</c><00:02:02.219><c> for</c><00:02:02.430><c> 4</c><00:02:02.909><c> minus</c><00:02:03.540><c> 1</c>

00:02:03.859 --> 00:02:03.869 align:start position:0%
value 1 so we're looking for 4 minus 1
 

00:02:03.869 --> 00:02:06.620 align:start position:0%
value 1 so we're looking for 4 minus 1
which<00:02:04.320><c> is</c><00:02:04.350><c> equal</c><00:02:04.740><c> to</c><00:02:04.770><c> 3</c><00:02:05.189><c> so</c><00:02:05.670><c> that</c><00:02:05.820><c> means</c><00:02:05.880><c> this</c>

00:02:06.620 --> 00:02:06.630 align:start position:0%
which is equal to 3 so that means this
 

00:02:06.630 --> 00:02:09.109 align:start position:0%
which is equal to 3 so that means this
is<00:02:06.840><c> the</c><00:02:06.990><c> only</c><00:02:07.259><c> value</c><00:02:07.860><c> we</c><00:02:08.160><c> can</c><00:02:08.310><c> add</c><00:02:08.520><c> to</c><00:02:08.879><c> one</c>

00:02:09.109 --> 00:02:09.119 align:start position:0%
is the only value we can add to one
 

00:02:09.119 --> 00:02:11.210 align:start position:0%
is the only value we can add to one
that'll<00:02:09.479><c> equal</c><00:02:09.899><c> the</c><00:02:10.050><c> target</c><00:02:10.560><c> so</c><00:02:10.860><c> we</c><00:02:10.979><c> don't</c>

00:02:11.210 --> 00:02:11.220 align:start position:0%
that'll equal the target so we don't
 

00:02:11.220 --> 00:02:12.860 align:start position:0%
that'll equal the target so we don't
have<00:02:11.310><c> to</c><00:02:11.430><c> check</c><00:02:11.670><c> every</c><00:02:12.060><c> number</c><00:02:12.360><c> we</c><00:02:12.480><c> just</c><00:02:12.510><c> want</c>

00:02:12.860 --> 00:02:12.870 align:start position:0%
have to check every number we just want
 

00:02:12.870 --> 00:02:13.589 align:start position:0%
have to check every number we just want
to<00:02:12.930><c> know</c><00:02:13.140><c> if</c>

00:02:13.589 --> 00:02:13.599 align:start position:0%
to know if
 

00:02:13.599 --> 00:02:15.989 align:start position:0%
to know if
resist<00:02:14.200><c> s--</c><00:02:14.379><c> now</c><00:02:14.709><c> the</c><00:02:14.769><c> easiest</c><00:02:15.280><c> way</c><00:02:15.400><c> we</c><00:02:15.670><c> can</c><00:02:15.819><c> do</c>

00:02:15.989 --> 00:02:15.999 align:start position:0%
resist s-- now the easiest way we can do
 

00:02:15.999 --> 00:02:17.940 align:start position:0%
resist s-- now the easiest way we can do
this<00:02:16.180><c> the</c><00:02:16.450><c> most</c><00:02:16.659><c> efficient</c><00:02:17.200><c> is</c><00:02:17.319><c> by</c><00:02:17.499><c> making</c><00:02:17.859><c> a</c>

00:02:17.940 --> 00:02:17.950 align:start position:0%
this the most efficient is by making a
 

00:02:17.950 --> 00:02:20.520 align:start position:0%
this the most efficient is by making a
hash<00:02:18.159><c> map</c><00:02:18.430><c> of</c><00:02:18.670><c> every</c><00:02:19.090><c> value</c><00:02:19.540><c> in</c><00:02:19.689><c> our</c><00:02:20.109><c> input</c>

00:02:20.520 --> 00:02:20.530 align:start position:0%
hash map of every value in our input
 

00:02:20.530 --> 00:02:22.349 align:start position:0%
hash map of every value in our input
array<00:02:20.739><c> so</c><00:02:20.950><c> we</c><00:02:20.980><c> can</c><00:02:21.189><c> instantly</c><00:02:21.760><c> check</c><00:02:22.060><c> if</c><00:02:22.209><c> the</c>

00:02:22.349 --> 00:02:22.359 align:start position:0%
array so we can instantly check if the
 

00:02:22.359 --> 00:02:27.660 align:start position:0%
array so we can instantly check if the
value<00:02:22.480><c> 3</c><00:02:22.989><c> exists</c><00:02:25.739><c> now</c><00:02:26.739><c> let's</c><00:02:26.980><c> try</c><00:02:27.219><c> the</c><00:02:27.280><c> same</c>

00:02:27.660 --> 00:02:27.670 align:start position:0%
value 3 exists now let's try the same
 

00:02:27.670 --> 00:02:29.970 align:start position:0%
value 3 exists now let's try the same
problem<00:02:28.269><c> except</c><00:02:28.689><c> let's</c><00:02:28.989><c> use</c><00:02:29.139><c> a</c><00:02:29.170><c> hash</c><00:02:29.439><c> map</c><00:02:29.739><c> this</c>

00:02:29.970 --> 00:02:29.980 align:start position:0%
problem except let's use a hash map this
 

00:02:29.980 --> 00:02:36.809 align:start position:0%
problem except let's use a hash map this
time<00:02:33.959><c> now</c><00:02:34.959><c> in</c><00:02:35.260><c> our</c><00:02:35.469><c> hash</c><00:02:35.739><c> map</c><00:02:36.040><c> we're</c><00:02:36.639><c> going</c><00:02:36.760><c> to</c>

00:02:36.809 --> 00:02:36.819 align:start position:0%
time now in our hash map we're going to
 

00:02:36.819 --> 00:02:39.449 align:start position:0%
time now in our hash map we're going to
be<00:02:36.939><c> mapping</c><00:02:37.450><c> each</c><00:02:37.599><c> value</c><00:02:38.170><c> to</c><00:02:38.500><c> the</c><00:02:38.620><c> index</c><00:02:39.189><c> of</c>

00:02:39.449 --> 00:02:39.459 align:start position:0%
be mapping each value to the index of
 

00:02:39.459 --> 00:02:42.509 align:start position:0%
be mapping each value to the index of
each<00:02:39.849><c> value</c><00:02:40.090><c> so</c><00:02:40.659><c> the</c><00:02:40.780><c> index</c><00:02:41.079><c> of</c><00:02:41.260><c> 2</c><00:02:41.469><c> is</c><00:02:41.650><c> 0</c><00:02:41.950><c> the</c>

00:02:42.509 --> 00:02:42.519 align:start position:0%
each value so the index of 2 is 0 the
 

00:02:42.519 --> 00:02:44.970 align:start position:0%
each value so the index of 2 is 0 the
index<00:02:42.790><c> of</c><00:02:42.939><c> 1</c><00:02:43.120><c> is</c><00:02:43.269><c> 1</c><00:02:43.299><c> the</c><00:02:43.689><c> index</c><00:02:43.959><c> of</c><00:02:44.109><c> 5</c><00:02:44.319><c> is</c><00:02:44.530><c> 2</c><00:02:44.799><c> the</c>

00:02:44.970 --> 00:02:44.980 align:start position:0%
index of 1 is 1 the index of 5 is 2 the
 

00:02:44.980 --> 00:02:47.610 align:start position:0%
index of 1 is 1 the index of 5 is 2 the
index<00:02:45.249><c> of</c><00:02:45.400><c> 3</c><00:02:45.639><c> is</c><00:02:45.909><c> 3</c><00:02:45.939><c> so</c><00:02:46.569><c> let's</c><00:02:46.780><c> so</c><00:02:47.019><c> in</c><00:02:47.290><c> our</c><00:02:47.409><c> hash</c>

00:02:47.610 --> 00:02:47.620 align:start position:0%
index of 3 is 3 so let's so in our hash
 

00:02:47.620 --> 00:02:49.619 align:start position:0%
index of 3 is 3 so let's so in our hash
map<00:02:47.889><c> we're</c><00:02:48.099><c> going</c><00:02:48.250><c> to</c><00:02:48.310><c> be</c><00:02:48.400><c> mapping</c><00:02:48.909><c> the</c><00:02:49.120><c> value</c>

00:02:49.619 --> 00:02:49.629 align:start position:0%
map we're going to be mapping the value
 

00:02:49.629 --> 00:02:55.280 align:start position:0%
map we're going to be mapping the value
to<00:02:50.379><c> the</c><00:02:50.620><c> index</c>

00:02:55.280 --> 00:02:55.290 align:start position:0%
 
 

00:02:55.290 --> 00:02:59.399 align:start position:0%
 
now<00:02:56.290><c> we</c><00:02:56.349><c> could</c><00:02:56.919><c> add</c><00:02:57.159><c> every</c><00:02:57.939><c> value</c><00:02:58.480><c> in</c><00:02:58.750><c> this</c>

00:02:59.399 --> 00:02:59.409 align:start position:0%
now we could add every value in this
 

00:02:59.409 --> 00:03:02.280 align:start position:0%
now we could add every value in this
array<00:02:59.730><c> into</c><00:03:00.730><c> the</c><00:03:00.819><c> hash</c><00:03:01.000><c> map</c><00:03:01.269><c> before</c><00:03:01.510><c> we</c><00:03:01.989><c> start</c>

00:03:02.280 --> 00:03:02.290 align:start position:0%
array into the hash map before we start
 

00:03:02.290 --> 00:03:03.809 align:start position:0%
array into the hash map before we start
iterating<00:03:02.530><c> through</c><00:03:02.919><c> it</c><00:03:03.310><c> but</c><00:03:03.609><c> there's</c>

00:03:03.809 --> 00:03:03.819 align:start position:0%
iterating through it but there's
 

00:03:03.819 --> 00:03:06.059 align:start position:0%
iterating through it but there's
actually<00:03:04.030><c> an</c><00:03:04.389><c> easier</c><00:03:04.659><c> way</c><00:03:04.989><c> to</c><00:03:05.019><c> do</c><00:03:05.260><c> it</c><00:03:05.409><c> if</c><00:03:05.560><c> we</c>

00:03:06.059 --> 00:03:06.069 align:start position:0%
actually an easier way to do it if we
 

00:03:06.069 --> 00:03:08.280 align:start position:0%
actually an easier way to do it if we
added<00:03:06.310><c> the</c><00:03:06.639><c> entire</c><00:03:07.000><c> array</c><00:03:07.329><c> into</c><00:03:07.780><c> the</c><00:03:07.870><c> hash</c><00:03:08.049><c> map</c>

00:03:08.280 --> 00:03:08.290 align:start position:0%
added the entire array into the hash map
 

00:03:08.290 --> 00:03:10.080 align:start position:0%
added the entire array into the hash map
initially<00:03:08.949><c> then</c><00:03:09.189><c> we</c><00:03:09.340><c> would</c><00:03:09.489><c> get</c><00:03:09.609><c> to</c><00:03:09.790><c> the</c><00:03:09.879><c> value</c>

00:03:10.080 --> 00:03:10.090 align:start position:0%
initially then we would get to the value
 

00:03:10.090 --> 00:03:12.420 align:start position:0%
initially then we would get to the value
2<00:03:10.269><c> first</c><00:03:10.930><c> right</c><00:03:11.260><c> we</c><00:03:11.680><c> would</c><00:03:11.829><c> want</c><00:03:12.069><c> to</c><00:03:12.099><c> checked</c>

00:03:12.420 --> 00:03:12.430 align:start position:0%
2 first right we would want to checked
 

00:03:12.430 --> 00:03:15.479 align:start position:0%
2 first right we would want to checked
as<00:03:12.639><c> the</c><00:03:12.790><c> difference</c><00:03:13.299><c> between</c><00:03:13.689><c> target</c><00:03:14.349><c> 4</c><00:03:14.680><c> minus</c>

00:03:15.479 --> 00:03:15.489 align:start position:0%
as the difference between target 4 minus
 

00:03:15.489 --> 00:03:18.809 align:start position:0%
as the difference between target 4 minus
this<00:03:15.790><c> value</c><00:03:16.000><c> 2</c><00:03:16.540><c> which</c><00:03:17.290><c> is</c><00:03:17.409><c> equal</c><00:03:17.709><c> to</c><00:03:17.739><c> 2</c><00:03:18.040><c> exists</c>

00:03:18.809 --> 00:03:18.819 align:start position:0%
this value 2 which is equal to 2 exists
 

00:03:18.819 --> 00:03:20.999 align:start position:0%
this value 2 which is equal to 2 exists
in<00:03:18.970><c> our</c><00:03:19.150><c> hash</c><00:03:19.419><c> map</c><00:03:19.689><c> and</c><00:03:19.900><c> we</c><00:03:20.109><c> would</c><00:03:20.259><c> find</c><00:03:20.530><c> that</c><00:03:20.650><c> 2</c>

00:03:20.999 --> 00:03:21.009 align:start position:0%
in our hash map and we would find that 2
 

00:03:21.009 --> 00:03:23.219 align:start position:0%
in our hash map and we would find that 2
does<00:03:21.430><c> exist</c><00:03:21.849><c> in</c><00:03:21.970><c> our</c><00:03:22.060><c> hash</c><00:03:22.239><c> map</c><00:03:22.509><c> but</c><00:03:22.900><c> we're</c><00:03:23.019><c> not</c>

00:03:23.219 --> 00:03:23.229 align:start position:0%
does exist in our hash map but we're not
 

00:03:23.229 --> 00:03:26.189 align:start position:0%
does exist in our hash map but we're not
allowed<00:03:23.620><c> to</c><00:03:23.650><c> reuse</c><00:03:24.489><c> the</c><00:03:24.759><c> same</c><00:03:25.120><c> one</c><00:03:25.569><c> right</c>

00:03:26.189 --> 00:03:26.199 align:start position:0%
allowed to reuse the same one right
 

00:03:26.199 --> 00:03:28.349 align:start position:0%
allowed to reuse the same one right
because<00:03:26.859><c> they're</c><00:03:27.040><c> both</c><00:03:27.250><c> at</c><00:03:27.459><c> the</c><00:03:27.579><c> same</c><00:03:27.849><c> index</c>

00:03:28.349 --> 00:03:28.359 align:start position:0%
because they're both at the same index
 

00:03:28.359 --> 00:03:30.929 align:start position:0%
because they're both at the same index
we<00:03:28.509><c> can't</c><00:03:28.810><c> use</c><00:03:29.049><c> the</c><00:03:29.229><c> same</c><00:03:29.500><c> value</c><00:03:29.979><c> twice</c><00:03:30.280><c> so</c><00:03:30.759><c> we</c>

00:03:30.929 --> 00:03:30.939 align:start position:0%
we can't use the same value twice so we
 

00:03:30.939 --> 00:03:32.789 align:start position:0%
we can't use the same value twice so we
would<00:03:31.120><c> have</c><00:03:31.180><c> to</c><00:03:31.329><c> compare</c><00:03:31.720><c> the</c><00:03:31.840><c> index</c><00:03:32.290><c> of</c><00:03:32.470><c> our</c>

00:03:32.789 --> 00:03:32.799 align:start position:0%
would have to compare the index of our
 

00:03:32.799 --> 00:03:35.729 align:start position:0%
would have to compare the index of our
current<00:03:33.189><c> 2</c><00:03:33.430><c> with</c><00:03:34.239><c> the</c><00:03:34.419><c> index</c><00:03:34.840><c> of</c><00:03:34.989><c> the</c><00:03:35.319><c> 2</c><00:03:35.500><c> that's</c>

00:03:35.729 --> 00:03:35.739 align:start position:0%
current 2 with the index of the 2 that's
 

00:03:35.739 --> 00:03:38.189 align:start position:0%
current 2 with the index of the 2 that's
in<00:03:35.919><c> our</c><00:03:36.009><c> hash</c><00:03:36.220><c> map</c><00:03:36.540><c> there's</c><00:03:37.540><c> actually</c><00:03:38.109><c> an</c>

00:03:38.189 --> 00:03:38.199 align:start position:0%
in our hash map there's actually an
 

00:03:38.199 --> 00:03:39.899 align:start position:0%
in our hash map there's actually an
easier<00:03:38.530><c> way</c><00:03:38.829><c> to</c><00:03:38.859><c> do</c><00:03:39.129><c> this</c><00:03:39.159><c> though</c><00:03:39.519><c> and</c><00:03:39.729><c> it's</c><00:03:39.819><c> a</c>

00:03:39.899 --> 00:03:39.909 align:start position:0%
easier way to do this though and it's a
 

00:03:39.909 --> 00:03:41.490 align:start position:0%
easier way to do this though and it's a
little<00:03:40.180><c> clever</c><00:03:40.540><c> and</c><00:03:40.810><c> let</c><00:03:40.930><c> me</c><00:03:41.019><c> show</c><00:03:41.199><c> you</c><00:03:41.259><c> how</c><00:03:41.439><c> to</c>

00:03:41.490 --> 00:03:41.500 align:start position:0%
little clever and let me show you how to
 

00:03:41.500 --> 00:03:43.860 align:start position:0%
little clever and let me show you how to
do<00:03:41.680><c> it</c><00:03:41.769><c> that</c><00:03:41.979><c> way</c><00:03:42.159><c> so</c><00:03:42.430><c> doing</c><00:03:43.150><c> it</c><00:03:43.239><c> this</c><00:03:43.419><c> clever</c>

00:03:43.860 --> 00:03:43.870 align:start position:0%
do it that way so doing it this clever
 

00:03:43.870 --> 00:03:45.990 align:start position:0%
do it that way so doing it this clever
way<00:03:44.139><c> initially</c><00:03:44.500><c> we</c><00:03:44.949><c> say</c><00:03:45.189><c> our</c><00:03:45.340><c> hash</c><00:03:45.519><c> map</c><00:03:45.790><c> is</c>

00:03:45.990 --> 00:03:46.000 align:start position:0%
way initially we say our hash map is
 

00:03:46.000 --> 00:03:48.509 align:start position:0%
way initially we say our hash map is
empty<00:03:46.449><c> so</c><00:03:46.840><c> we</c><00:03:46.870><c> get</c><00:03:47.139><c> to</c><00:03:47.259><c> the</c><00:03:47.379><c> value</c><00:03:47.560><c> 2</c><00:03:47.739><c> first</c><00:03:48.310><c> of</c>

00:03:48.509 --> 00:03:48.519 align:start position:0%
empty so we get to the value 2 first of
 

00:03:48.519 --> 00:03:50.580 align:start position:0%
empty so we get to the value 2 first of
all<00:03:48.669><c> right</c><00:03:48.909><c> and</c><00:03:49.180><c> we</c><00:03:49.569><c> want</c><00:03:49.750><c> to</c><00:03:49.870><c> look</c><00:03:50.139><c> for</c><00:03:50.500><c> the</c>

00:03:50.580 --> 00:03:50.590 align:start position:0%
all right and we want to look for the
 

00:03:50.590 --> 00:03:54.330 align:start position:0%
all right and we want to look for the
difference<00:03:51.099><c> 4</c><00:03:51.549><c> minus</c><00:03:52.120><c> 2</c><00:03:52.449><c> in</c><00:03:52.720><c> our</c><00:03:53.259><c> hash</c><00:03:53.859><c> map</c><00:03:54.159><c> our</c>

00:03:54.330 --> 00:03:54.340 align:start position:0%
difference 4 minus 2 in our hash map our
 

00:03:54.340 --> 00:03:57.629 align:start position:0%
difference 4 minus 2 in our hash map our
hash<00:03:54.909><c> map</c><00:03:55.150><c> is</c><00:03:55.299><c> empty</c><00:03:55.810><c> so</c><00:03:56.049><c> we</c><00:03:56.079><c> don't</c><00:03:56.379><c> find</c><00:03:56.650><c> 2</c><00:03:56.979><c> so</c>

00:03:57.629 --> 00:03:57.639 align:start position:0%
hash map is empty so we don't find 2 so
 

00:03:57.639 --> 00:04:00.659 align:start position:0%
hash map is empty so we don't find 2 so
then<00:03:58.030><c> after</c><00:03:58.719><c> we</c><00:03:58.750><c> visited</c><00:03:59.199><c> this</c><00:03:59.650><c> element</c><00:04:00.129><c> then</c>

00:04:00.659 --> 00:04:00.669 align:start position:0%
then after we visited this element then
 

00:04:00.669 --> 00:04:02.939 align:start position:0%
then after we visited this element then
we<00:04:00.909><c> can</c><00:04:01.090><c> add</c><00:04:01.269><c> it</c><00:04:01.540><c> to</c><00:04:01.569><c> our</c><00:04:01.719><c> hash</c><00:04:02.019><c> map</c><00:04:02.290><c> so</c><00:04:02.560><c> now</c>

00:04:02.939 --> 00:04:02.949 align:start position:0%
we can add it to our hash map so now
 

00:04:02.949 --> 00:04:04.949 align:start position:0%
we can add it to our hash map so now
that<00:04:03.009><c> I'm</c><00:04:03.250><c> done</c><00:04:03.489><c> visiting</c><00:04:03.759><c> it</c><00:04:04.180><c> I'm</c><00:04:04.329><c> gonna</c><00:04:04.689><c> move</c>

00:04:04.949 --> 00:04:04.959 align:start position:0%
that I'm done visiting it I'm gonna move
 

00:04:04.959 --> 00:04:07.319 align:start position:0%
that I'm done visiting it I'm gonna move
to<00:04:05.379><c> the</c><00:04:05.409><c> second</c><00:04:05.859><c> element</c><00:04:05.949><c> 1</c><00:04:06.459><c> and</c><00:04:06.639><c> before</c><00:04:07.209><c> I</c><00:04:07.239><c> do</c>

00:04:07.319 --> 00:04:07.329 align:start position:0%
to the second element 1 and before I do
 

00:04:07.329 --> 00:04:09.539 align:start position:0%
to the second element 1 and before I do
that<00:04:07.479><c> I'm</c><00:04:07.780><c> gonna</c><00:04:07.900><c> add</c><00:04:08.109><c> this</c><00:04:08.379><c> value</c><00:04:08.620><c> 2</c><00:04:09.219><c> to</c><00:04:09.519><c> our</c>

00:04:09.539 --> 00:04:09.549 align:start position:0%
that I'm gonna add this value 2 to our
 

00:04:09.549 --> 00:04:11.999 align:start position:0%
that I'm gonna add this value 2 to our
hash<00:04:09.819><c> map</c><00:04:10.090><c> and</c><00:04:10.329><c> the</c><00:04:10.569><c> index</c><00:04:11.019><c> of</c><00:04:11.199><c> this</c><00:04:11.349><c> value</c><00:04:11.799><c> is</c>

00:04:11.999 --> 00:04:12.009 align:start position:0%
hash map and the index of this value is
 

00:04:12.009 --> 00:04:15.539 align:start position:0%
hash map and the index of this value is
gonna<00:04:12.370><c> be</c><00:04:12.579><c> 0</c><00:04:12.969><c> now</c><00:04:13.870><c> I'm</c><00:04:14.169><c> at</c><00:04:14.349><c> 1</c><00:04:14.650><c> I'm</c><00:04:14.889><c> looking</c><00:04:15.310><c> for</c>

00:04:15.539 --> 00:04:15.549 align:start position:0%
gonna be 0 now I'm at 1 I'm looking for
 

00:04:15.549 --> 00:04:18.209 align:start position:0%
gonna be 0 now I'm at 1 I'm looking for
4<00:04:15.909><c> minus</c><00:04:16.690><c> 1</c><00:04:17.139><c> which</c><00:04:17.620><c> is</c><00:04:17.799><c> 3</c>

00:04:18.209 --> 00:04:18.219 align:start position:0%
4 minus 1 which is 3
 

00:04:18.219 --> 00:04:20.999 align:start position:0%
4 minus 1 which is 3
I<00:04:18.430><c> see</c><00:04:18.940><c> 3</c><00:04:19.389><c> isn't</c><00:04:19.930><c> in</c><00:04:20.079><c> our</c><00:04:20.199><c> hash</c><00:04:20.440><c> map</c><00:04:20.709><c> but</c><00:04:20.889><c> it</c>

00:04:20.999 --> 00:04:21.009 align:start position:0%
I see 3 isn't in our hash map but it
 

00:04:21.009 --> 00:04:23.430 align:start position:0%
I see 3 isn't in our hash map but it
actually<00:04:21.190><c> is</c><00:04:21.579><c> in</c><00:04:22.029><c> our</c><00:04:22.180><c> array</c><00:04:22.599><c> so</c><00:04:23.020><c> what's</c><00:04:23.289><c> the</c>

00:04:23.430 --> 00:04:23.440 align:start position:0%
actually is in our array so what's the
 

00:04:23.440 --> 00:04:25.769 align:start position:0%
actually is in our array so what's the
problem<00:04:23.740><c> well</c><00:04:24.400><c> for</c><00:04:25.029><c> now</c><00:04:25.210><c> we're</c><00:04:25.389><c> going</c><00:04:25.510><c> to</c><00:04:25.599><c> say</c>

00:04:25.769 --> 00:04:25.779 align:start position:0%
problem well for now we're going to say
 

00:04:25.779 --> 00:04:27.300 align:start position:0%
problem well for now we're going to say
we<00:04:25.960><c> don't</c><00:04:25.990><c> find</c><00:04:26.500><c> our</c><00:04:26.680><c> find</c>

00:04:27.300 --> 00:04:27.310 align:start position:0%
we don't find our find
 

00:04:27.310 --> 00:04:29.940 align:start position:0%
we don't find our find
three<00:04:27.550><c> so</c><00:04:27.970><c> we</c><00:04:28.120><c> add</c><00:04:28.300><c> one</c><00:04:28.720><c> to</c><00:04:28.960><c> our</c><00:04:28.990><c> hash</c><00:04:29.260><c> map</c><00:04:29.560><c> the</c>

00:04:29.940 --> 00:04:29.950 align:start position:0%
three so we add one to our hash map the
 

00:04:29.950 --> 00:04:33.180 align:start position:0%
three so we add one to our hash map the
index<00:04:30.430><c> of</c><00:04:30.610><c> this</c><00:04:30.760><c> one</c><00:04:31.000><c> is</c><00:04:31.240><c> one</c><00:04:31.660><c> and</c><00:04:31.870><c> now</c><00:04:32.860><c> we</c><00:04:32.919><c> move</c>

00:04:33.180 --> 00:04:33.190 align:start position:0%
index of this one is one and now we move
 

00:04:33.190 --> 00:04:36.030 align:start position:0%
index of this one is one and now we move
to<00:04:33.250><c> the</c><00:04:33.460><c> next</c><00:04:33.700><c> element</c><00:04:33.940><c> five</c><00:04:34.480><c> we</c><00:04:35.440><c> check</c><00:04:35.770><c> does</c>

00:04:36.030 --> 00:04:36.040 align:start position:0%
to the next element five we check does
 

00:04:36.040 --> 00:04:39.960 align:start position:0%
to the next element five we check does
four<00:04:36.460><c> minus</c><00:04:37.120><c> five</c><00:04:38.160><c> it's</c><00:04:39.160><c> four</c><00:04:39.520><c> minus</c><00:04:39.790><c> five</c>

00:04:39.960 --> 00:04:39.970 align:start position:0%
four minus five it's four minus five
 

00:04:39.970 --> 00:04:42.120 align:start position:0%
four minus five it's four minus five
exists<00:04:40.750><c> in</c><00:04:40.870><c> our</c><00:04:40.990><c> hash</c><00:04:41.169><c> map</c><00:04:41.440><c> that's</c><00:04:41.650><c> negative</c>

00:04:42.120 --> 00:04:42.130 align:start position:0%
exists in our hash map that's negative
 

00:04:42.130 --> 00:04:44.820 align:start position:0%
exists in our hash map that's negative
one<00:04:42.340><c> so</c><00:04:42.580><c> no</c><00:04:42.850><c> it</c><00:04:43.000><c> does</c><00:04:43.180><c> not</c><00:04:43.419><c> then</c><00:04:44.080><c> we</c><00:04:44.320><c> add</c><00:04:44.530><c> this</c>

00:04:44.820 --> 00:04:44.830 align:start position:0%
one so no it does not then we add this
 

00:04:44.830 --> 00:04:47.820 align:start position:0%
one so no it does not then we add this
five<00:04:45.070><c> to</c><00:04:45.280><c> our</c><00:04:45.400><c> hash</c><00:04:45.580><c> map</c><00:04:45.880><c> and</c><00:04:46.380><c> it's</c><00:04:47.380><c> index</c>

00:04:47.820 --> 00:04:47.830 align:start position:0%
five to our hash map and it's index
 

00:04:47.830 --> 00:04:51.090 align:start position:0%
five to our hash map and it's index
which<00:04:48.010><c> is</c><00:04:48.040><c> two</c><00:04:48.400><c> and</c><00:04:49.380><c> we</c><00:04:50.380><c> move</c><00:04:50.590><c> to</c><00:04:50.740><c> the</c><00:04:50.860><c> last</c>

00:04:51.090 --> 00:04:51.100 align:start position:0%
which is two and we move to the last
 

00:04:51.100 --> 00:04:54.450 align:start position:0%
which is two and we move to the last
value<00:04:51.730><c> in</c><00:04:51.970><c> the</c><00:04:52.630><c> array</c><00:04:52.660><c> three</c><00:04:53.560><c> we</c><00:04:53.980><c> checked</c><00:04:54.310><c> this</c>

00:04:54.450 --> 00:04:54.460 align:start position:0%
value in the array three we checked this
 

00:04:54.460 --> 00:04:56.879 align:start position:0%
value in the array three we checked this
four<00:04:54.850><c> minus</c><00:04:55.540><c> three</c><00:04:55.570><c> e</c>

00:04:56.879 --> 00:04:56.889 align:start position:0%
four minus three e
 

00:04:56.889 --> 00:04:59.760 align:start position:0%
four minus three e
exists<00:04:57.880><c> in</c><00:04:58.000><c> our</c><00:04:58.120><c> hash</c><00:04:58.300><c> map</c><00:04:58.690><c> now</c><00:04:58.750><c> that's</c><00:04:58.960><c> one</c><00:04:59.320><c> so</c>

00:04:59.760 --> 00:04:59.770 align:start position:0%
exists in our hash map now that's one so
 

00:04:59.770 --> 00:05:03.030 align:start position:0%
exists in our hash map now that's one so
we<00:04:59.919><c> see</c><00:05:00.190><c> it</c><00:05:00.580><c> does</c><00:05:01.090><c> exist</c><00:05:01.660><c> right</c><00:05:02.050><c> right</c><00:05:02.800><c> over</c>

00:05:03.030 --> 00:05:03.040 align:start position:0%
we see it does exist right right over
 

00:05:03.040 --> 00:05:06.000 align:start position:0%
we see it does exist right right over
here<00:05:03.550><c> it</c><00:05:03.910><c> exists</c><00:05:04.360><c> the</c><00:05:04.810><c> value</c><00:05:05.169><c> exists</c><00:05:05.740><c> and</c><00:05:05.889><c> it's</c>

00:05:06.000 --> 00:05:06.010 align:start position:0%
here it exists the value exists and it's
 

00:05:06.010 --> 00:05:10.020 align:start position:0%
here it exists the value exists and it's
index<00:05:06.490><c> is</c><00:05:06.669><c> one</c><00:05:06.940><c> so</c><00:05:07.419><c> now</c><00:05:07.630><c> we</c><00:05:07.690><c> found</c><00:05:08.169><c> our</c><00:05:09.030><c> two</c>

00:05:10.020 --> 00:05:10.030 align:start position:0%
index is one so now we found our two
 

00:05:10.030 --> 00:05:12.390 align:start position:0%
index is one so now we found our two
values<00:05:10.300><c> that</c><00:05:10.780><c> sum</c><00:05:11.020><c> to</c><00:05:11.050><c> the</c><00:05:11.229><c> target</c><00:05:11.770><c> and</c><00:05:11.919><c> we</c>

00:05:12.390 --> 00:05:12.400 align:start position:0%
values that sum to the target and we
 

00:05:12.400 --> 00:05:14.190 align:start position:0%
values that sum to the target and we
want<00:05:12.580><c> to</c><00:05:12.639><c> return</c><00:05:12.910><c> their</c><00:05:13.090><c> indexes</c><00:05:13.840><c> their</c>

00:05:14.190 --> 00:05:14.200 align:start position:0%
want to return their indexes their
 

00:05:14.200 --> 00:05:16.590 align:start position:0%
want to return their indexes their
indices<00:05:14.740><c> which</c><00:05:15.190><c> are</c><00:05:15.400><c> going</c><00:05:15.550><c> to</c><00:05:15.639><c> be</c><00:05:15.790><c> one</c><00:05:16.270><c> and</c>

00:05:16.590 --> 00:05:16.600 align:start position:0%
indices which are going to be one and
 

00:05:16.600 --> 00:05:21.360 align:start position:0%
indices which are going to be one and
three<00:05:18.750><c> so</c><00:05:19.750><c> with</c><00:05:19.960><c> this</c><00:05:20.229><c> algorithm</c><00:05:20.680><c> we</c><00:05:20.979><c> don't</c>

00:05:21.360 --> 00:05:21.370 align:start position:0%
three so with this algorithm we don't
 

00:05:21.370 --> 00:05:23.460 align:start position:0%
three so with this algorithm we don't
have<00:05:21.669><c> to</c><00:05:21.850><c> initialize</c><00:05:22.630><c> our</c><00:05:22.840><c> hash</c><00:05:23.020><c> map</c><00:05:23.290><c> it</c><00:05:23.440><c> can</c>

00:05:23.460 --> 00:05:23.470 align:start position:0%
have to initialize our hash map it can
 

00:05:23.470 --> 00:05:25.770 align:start position:0%
have to initialize our hash map it can
be<00:05:23.710><c> initially</c><00:05:24.010><c> empty</c><00:05:24.790><c> and</c><00:05:24.970><c> then</c><00:05:25.300><c> we</c><00:05:25.479><c> can</c><00:05:25.630><c> just</c>

00:05:25.770 --> 00:05:25.780 align:start position:0%
be initially empty and then we can just
 

00:05:25.780 --> 00:05:28.290 align:start position:0%
be initially empty and then we can just
iterate<00:05:26.050><c> through</c><00:05:26.410><c> this</c><00:05:26.800><c> array</c><00:05:27.310><c> in</c><00:05:27.550><c> one</c><00:05:27.970><c> pass</c>

00:05:28.290 --> 00:05:28.300 align:start position:0%
iterate through this array in one pass
 

00:05:28.300 --> 00:05:30.870 align:start position:0%
iterate through this array in one pass
now<00:05:28.990><c> the</c><00:05:29.080><c> reason</c><00:05:29.560><c> the</c><00:05:29.710><c> algorithm</c><00:05:30.220><c> can</c><00:05:30.340><c> work</c><00:05:30.669><c> in</c>

00:05:30.870 --> 00:05:30.880 align:start position:0%
now the reason the algorithm can work in
 

00:05:30.880 --> 00:05:34.529 align:start position:0%
now the reason the algorithm can work in
that<00:05:31.060><c> way</c><00:05:31.300><c> with</c><00:05:31.600><c> just</c><00:05:31.930><c> one</c><00:05:32.289><c> pass</c><00:05:32.620><c> is</c><00:05:33.120><c> this</c><00:05:34.120><c> so</c>

00:05:34.529 --> 00:05:34.539 align:start position:0%
that way with just one pass is this so
 

00:05:34.539 --> 00:05:37.710 align:start position:0%
that way with just one pass is this so
let's<00:05:35.140><c> say</c><00:05:35.260><c> we</c><00:05:35.500><c> had</c><00:05:35.680><c> a</c><00:05:35.919><c> giant</c><00:05:36.280><c> array</c><00:05:36.760><c> right</c><00:05:37.060><c> we</c>

00:05:37.710 --> 00:05:37.720 align:start position:0%
let's say we had a giant array right we
 

00:05:37.720 --> 00:05:40.140 align:start position:0%
let's say we had a giant array right we
know<00:05:38.110><c> for</c><00:05:38.530><c> sure</c><00:05:38.560><c> that</c><00:05:39.039><c> there</c><00:05:39.220><c> are</c><00:05:39.430><c> two</c>

00:05:40.140 --> 00:05:40.150 align:start position:0%
know for sure that there are two
 

00:05:40.150 --> 00:05:43.650 align:start position:0%
know for sure that there are two
elements<00:05:40.479><c> in</c><00:05:40.990><c> this</c><00:05:41.350><c> array</c><00:05:41.410><c> that</c><00:05:42.310><c> sum</c><00:05:42.760><c> to</c><00:05:43.390><c> our</c>

00:05:43.650 --> 00:05:43.660 align:start position:0%
elements in this array that sum to our
 

00:05:43.660 --> 00:05:45.510 align:start position:0%
elements in this array that sum to our
target<00:05:44.530><c> right</c><00:05:44.770><c> we</c><00:05:44.890><c> don't</c><00:05:45.070><c> know</c><00:05:45.160><c> where</c><00:05:45.370><c> they</c>

00:05:45.510 --> 00:05:45.520 align:start position:0%
target right we don't know where they
 

00:05:45.520 --> 00:05:47.490 align:start position:0%
target right we don't know where they
are<00:05:45.550><c> they're</c><00:05:45.880><c> at</c><00:05:46.030><c> some</c><00:05:46.330><c> arbitrary</c><00:05:46.570><c> location</c>

00:05:47.490 --> 00:05:47.500 align:start position:0%
are they're at some arbitrary location
 

00:05:47.500 --> 00:05:49.710 align:start position:0%
are they're at some arbitrary location
when<00:05:47.950><c> we</c><00:05:48.100><c> visit</c><00:05:48.520><c> the</c><00:05:48.700><c> first</c><00:05:49.090><c> one</c><00:05:49.450><c> of</c><00:05:49.570><c> those</c>

00:05:49.710 --> 00:05:49.720 align:start position:0%
when we visit the first one of those
 

00:05:49.720 --> 00:05:52.590 align:start position:0%
when we visit the first one of those
elements<00:05:50.140><c> our</c><00:05:50.500><c> hash</c><00:05:51.220><c> map</c><00:05:51.550><c> is</c><00:05:51.760><c> only</c><00:05:52.030><c> going</c><00:05:52.510><c> to</c>

00:05:52.590 --> 00:05:52.600 align:start position:0%
elements our hash map is only going to
 

00:05:52.600 --> 00:05:55.110 align:start position:0%
elements our hash map is only going to
be<00:05:52.720><c> this</c><00:05:53.050><c> portion</c><00:05:53.650><c> of</c><00:05:53.770><c> the</c><00:05:53.919><c> array</c><00:05:54.250><c> it's</c><00:05:54.760><c> only</c>

00:05:55.110 --> 00:05:55.120 align:start position:0%
be this portion of the array it's only
 

00:05:55.120 --> 00:05:57.000 align:start position:0%
be this portion of the array it's only
going<00:05:55.390><c> to</c><00:05:55.479><c> have</c><00:05:55.660><c> the</c><00:05:56.200><c> values</c><00:05:56.590><c> that</c><00:05:56.740><c> came</c>

00:05:57.000 --> 00:05:57.010 align:start position:0%
going to have the values that came
 

00:05:57.010 --> 00:05:59.640 align:start position:0%
going to have the values that came
before<00:05:57.310><c> the</c><00:05:58.150><c> first</c><00:05:58.479><c> value</c><00:05:58.810><c> so</c><00:05:59.350><c> we're</c><00:05:59.560><c> gonna</c>

00:05:59.640 --> 00:05:59.650 align:start position:0%
before the first value so we're gonna
 

00:05:59.650 --> 00:06:02.070 align:start position:0%
before the first value so we're gonna
we're<00:06:00.190><c> gonna</c><00:06:00.250><c> notice</c><00:06:00.820><c> that</c><00:06:00.850><c> the</c><00:06:01.450><c> second</c><00:06:01.870><c> value</c>

00:06:02.070 --> 00:06:02.080 align:start position:0%
we're gonna notice that the second value
 

00:06:02.080 --> 00:06:05.610 align:start position:0%
we're gonna notice that the second value
that<00:06:02.710><c> can</c><00:06:03.130><c> sum</c><00:06:03.580><c> to</c><00:06:03.789><c> the</c><00:06:03.880><c> target</c><00:06:04.300><c> is</c><00:06:04.419><c> no</c><00:06:04.780><c> is</c><00:06:05.020><c> not</c>

00:06:05.610 --> 00:06:05.620 align:start position:0%
that can sum to the target is no is not
 

00:06:05.620 --> 00:06:08.670 align:start position:0%
that can sum to the target is no is not
going<00:06:05.889><c> to</c><00:06:05.950><c> be</c><00:06:06.039><c> in</c><00:06:06.250><c> our</c><00:06:06.639><c> hash</c><00:06:06.880><c> map</c><00:06:07.180><c> yet</c><00:06:07.780><c> but</c><00:06:08.410><c> once</c>

00:06:08.670 --> 00:06:08.680 align:start position:0%
going to be in our hash map yet but once
 

00:06:08.680 --> 00:06:11.460 align:start position:0%
going to be in our hash map yet but once
we<00:06:08.889><c> get</c><00:06:09.070><c> to</c><00:06:09.280><c> the</c><00:06:09.400><c> second</c><00:06:10.030><c> value</c><00:06:10.270><c> our</c><00:06:10.720><c> hash</c><00:06:11.169><c> map</c>

00:06:11.460 --> 00:06:11.470 align:start position:0%
we get to the second value our hash map
 

00:06:11.470 --> 00:06:14.760 align:start position:0%
we get to the second value our hash map
is<00:06:11.650><c> going</c><00:06:11.800><c> to</c><00:06:11.889><c> be</c><00:06:12.010><c> this</c><00:06:12.460><c> portion</c><00:06:13.260><c> so</c><00:06:14.260><c> every</c>

00:06:14.760 --> 00:06:14.770 align:start position:0%
is going to be this portion so every
 

00:06:14.770 --> 00:06:17.400 align:start position:0%
is going to be this portion so every
value<00:06:15.100><c> that</c><00:06:15.130><c> comes</c><00:06:15.520><c> before</c><00:06:15.760><c> this</c><00:06:16.330><c> right</c><00:06:16.840><c> so</c>

00:06:17.400 --> 00:06:17.410 align:start position:0%
value that comes before this right so
 

00:06:17.410 --> 00:06:20.279 align:start position:0%
value that comes before this right so
we're<00:06:17.620><c> gonna</c><00:06:17.740><c> be</c><00:06:18.060><c> guaranteed</c><00:06:19.060><c> that</c><00:06:19.479><c> once</c><00:06:20.050><c> we</c>

00:06:20.279 --> 00:06:20.289 align:start position:0%
we're gonna be guaranteed that once we
 

00:06:20.289 --> 00:06:22.740 align:start position:0%
we're gonna be guaranteed that once we
visit<00:06:20.680><c> the</c><00:06:20.830><c> second</c><00:06:21.430><c> element</c><00:06:21.639><c> that</c><00:06:22.060><c> sums</c><00:06:22.419><c> up</c><00:06:22.690><c> to</c>

00:06:22.740 --> 00:06:22.750 align:start position:0%
visit the second element that sums up to
 

00:06:22.750 --> 00:06:24.719 align:start position:0%
visit the second element that sums up to
the<00:06:23.050><c> target</c><00:06:23.530><c> we're</c><00:06:23.919><c> gonna</c><00:06:24.010><c> be</c><00:06:24.220><c> guaranteed</c>

00:06:24.719 --> 00:06:24.729 align:start position:0%
the target we're gonna be guaranteed
 

00:06:24.729 --> 00:06:26.700 align:start position:0%
the target we're gonna be guaranteed
that<00:06:24.880><c> the</c><00:06:25.030><c> first</c><00:06:25.330><c> one</c><00:06:25.630><c> is</c><00:06:25.810><c> already</c><00:06:26.380><c> in</c><00:06:26.590><c> our</c>

00:06:26.700 --> 00:06:26.710 align:start position:0%
that the first one is already in our
 

00:06:26.710 --> 00:06:29.219 align:start position:0%
that the first one is already in our
hash<00:06:26.950><c> map</c><00:06:27.250><c> so</c><00:06:27.580><c> we're</c><00:06:27.760><c> guaranteed</c><00:06:28.510><c> to</c><00:06:28.780><c> find</c><00:06:29.050><c> the</c>

00:06:29.219 --> 00:06:29.229 align:start position:0%
hash map so we're guaranteed to find the
 

00:06:29.229 --> 00:06:31.500 align:start position:0%
hash map so we're guaranteed to find the
solution<00:06:29.889><c> now</c><00:06:30.220><c> since</c><00:06:30.520><c> we</c><00:06:30.700><c> only</c><00:06:30.970><c> have</c><00:06:31.360><c> to</c>

00:06:31.500 --> 00:06:31.510 align:start position:0%
solution now since we only have to
 

00:06:31.510 --> 00:06:34.200 align:start position:0%
solution now since we only have to
iterate<00:06:31.690><c> through</c><00:06:32.169><c> the</c><00:06:32.229><c> array</c><00:06:32.350><c> once</c><00:06:33.130><c> and</c><00:06:33.520><c> we're</c>

00:06:34.200 --> 00:06:34.210 align:start position:0%
iterate through the array once and we're
 

00:06:34.210 --> 00:06:36.270 align:start position:0%
iterate through the array once and we're
adding<00:06:34.450><c> each</c><00:06:34.870><c> value</c><00:06:35.169><c> to</c><00:06:35.500><c> our</c><00:06:35.650><c> hash</c><00:06:35.800><c> map</c><00:06:36.070><c> which</c>

00:06:36.270 --> 00:06:36.280 align:start position:0%
adding each value to our hash map which
 

00:06:36.280 --> 00:06:38.580 align:start position:0%
adding each value to our hash map which
is<00:06:36.310><c> a</c><00:06:36.610><c> constant</c><00:06:37.300><c> time</c><00:06:37.510><c> operation</c><00:06:37.539><c> and</c><00:06:38.349><c> we're</c>

00:06:38.580 --> 00:06:38.590 align:start position:0%
is a constant time operation and we're
 

00:06:38.590 --> 00:06:40.890 align:start position:0%
is a constant time operation and we're
checking<00:06:38.950><c> if</c><00:06:39.310><c> a</c><00:06:39.430><c> value</c><00:06:39.640><c> exists</c><00:06:40.330><c> in</c><00:06:40.419><c> our</c><00:06:40.510><c> hash</c>

00:06:40.890 --> 00:06:40.900 align:start position:0%
checking if a value exists in our hash
 

00:06:40.900 --> 00:06:43.020 align:start position:0%
checking if a value exists in our hash
which<00:06:41.110><c> is</c><00:06:41.259><c> also</c><00:06:41.470><c> a</c><00:06:41.650><c> constant</c><00:06:41.979><c> time</c><00:06:42.460><c> operation</c>

00:06:43.020 --> 00:06:43.030 align:start position:0%
which is also a constant time operation
 

00:06:43.030 --> 00:06:45.120 align:start position:0%
which is also a constant time operation
the<00:06:43.389><c> time</c><00:06:43.660><c> complexity</c><00:06:44.199><c> is</c><00:06:44.290><c> going</c><00:06:44.530><c> to</c><00:06:44.590><c> be</c><00:06:44.710><c> Big</c><00:06:44.979><c> O</c>

00:06:45.120 --> 00:06:45.130 align:start position:0%
the time complexity is going to be Big O
 

00:06:45.130 --> 00:06:47.760 align:start position:0%
the time complexity is going to be Big O
of<00:06:45.160><c> n</c><00:06:45.430><c> we</c><00:06:46.120><c> are</c><00:06:46.150><c> using</c><00:06:46.780><c> extra</c><00:06:47.169><c> memory</c><00:06:47.410><c> right</c>

00:06:47.760 --> 00:06:47.770 align:start position:0%
of n we are using extra memory right
 

00:06:47.770 --> 00:06:50.100 align:start position:0%
of n we are using extra memory right
that<00:06:48.070><c> hash</c><00:06:48.280><c> map</c><00:06:48.520><c> isn't</c><00:06:48.759><c> free</c><00:06:49.300><c> so</c><00:06:49.600><c> the</c><00:06:49.750><c> memory</c>

00:06:50.100 --> 00:06:50.110 align:start position:0%
that hash map isn't free so the memory
 

00:06:50.110 --> 00:06:52.020 align:start position:0%
that hash map isn't free so the memory
complexity<00:06:50.680><c> is</c><00:06:50.800><c> also</c><00:06:51.190><c> going</c><00:06:51.340><c> to</c><00:06:51.400><c> be</c><00:06:51.520><c> O</c><00:06:51.699><c> of</c><00:06:51.729><c> n</c>

00:06:52.020 --> 00:06:52.030 align:start position:0%
complexity is also going to be O of n
 

00:06:52.030 --> 00:06:54.090 align:start position:0%
complexity is also going to be O of n
because<00:06:52.360><c> we</c><00:06:52.389><c> could</c><00:06:52.630><c> potentially</c><00:06:53.020><c> add</c><00:06:53.530><c> every</c>

00:06:54.090 --> 00:06:54.100 align:start position:0%
because we could potentially add every
 

00:06:54.100 --> 00:06:55.409 align:start position:0%
because we could potentially add every
value<00:06:54.520><c> to</c><00:06:54.639><c> the</c><00:06:54.759><c> hash</c><00:06:54.910><c> map</c>

00:06:55.409 --> 00:06:55.419 align:start position:0%
value to the hash map
 

00:06:55.419 --> 00:06:57.150 align:start position:0%
value to the hash map
so<00:06:55.570><c> now</c><00:06:55.750><c> let's</c><00:06:55.960><c> code</c><00:06:56.229><c> the</c><00:06:56.440><c> solution</c><00:06:56.919><c> so</c>

00:06:57.150 --> 00:06:57.160 align:start position:0%
so now let's code the solution so
 

00:06:57.160 --> 00:06:58.980 align:start position:0%
so now let's code the solution so
remember<00:06:57.610><c> we</c><00:06:57.759><c> need</c><00:06:57.940><c> a</c><00:06:57.970><c> hash</c><00:06:58.240><c> map</c><00:06:58.570><c> right</c><00:06:58.840><c> I'm</c>

00:06:58.980 --> 00:06:58.990 align:start position:0%
remember we need a hash map right I'm
 

00:06:58.990 --> 00:07:00.689 align:start position:0%
remember we need a hash map right I'm
going<00:06:59.110><c> to</c><00:06:59.139><c> call</c><00:06:59.320><c> this</c><00:06:59.470><c> previous</c><00:07:00.100><c> map</c><00:07:00.340><c> because</c>

00:07:00.689 --> 00:07:00.699 align:start position:0%
going to call this previous map because
 

00:07:00.699 --> 00:07:02.670 align:start position:0%
going to call this previous map because
it's<00:07:00.850><c> basically</c><00:07:01.300><c> every</c><00:07:01.840><c> element</c><00:07:02.259><c> that</c><00:07:02.350><c> comes</c>

00:07:02.670 --> 00:07:02.680 align:start position:0%
it's basically every element that comes
 

00:07:02.680 --> 00:07:04.230 align:start position:0%
it's basically every element that comes
before<00:07:02.889><c> the</c><00:07:03.160><c> current</c><00:07:03.639><c> home</c><00:07:03.820><c> that</c><00:07:04.000><c> every</c>

00:07:04.230 --> 00:07:04.240 align:start position:0%
before the current home that every
 

00:07:04.240 --> 00:07:05.939 align:start position:0%
before the current home that every
previous<00:07:04.840><c> element</c><00:07:05.289><c> is</c><00:07:05.350><c> going</c><00:07:05.500><c> to</c><00:07:05.560><c> be</c><00:07:05.650><c> stored</c>

00:07:05.939 --> 00:07:05.949 align:start position:0%
previous element is going to be stored
 

00:07:05.949 --> 00:07:07.650 align:start position:0%
previous element is going to be stored
in<00:07:06.009><c> this</c><00:07:06.160><c> map</c><00:07:06.370><c> where</c><00:07:06.850><c> it</c><00:07:06.910><c> can</c><00:07:07.030><c> be</c><00:07:07.120><c> mapping</c><00:07:07.389><c> the</c>

00:07:07.650 --> 00:07:07.660 align:start position:0%
in this map where it can be mapping the
 

00:07:07.660 --> 00:07:09.990 align:start position:0%
in this map where it can be mapping the
value<00:07:08.139><c> to</c><00:07:08.320><c> the</c><00:07:08.440><c> index</c><00:07:08.949><c> of</c><00:07:09.160><c> that</c><00:07:09.280><c> value</c>

00:07:09.990 --> 00:07:10.000 align:start position:0%
value to the index of that value
 

00:07:10.000 --> 00:07:12.990 align:start position:0%
value to the index of that value
so<00:07:10.750><c> now</c><00:07:10.960><c> let's</c><00:07:11.229><c> iterate</c><00:07:11.500><c> through</c><00:07:12.009><c> every</c><00:07:12.550><c> value</c>

00:07:12.990 --> 00:07:13.000 align:start position:0%
so now let's iterate through every value
 

00:07:13.000 --> 00:07:15.510 align:start position:0%
so now let's iterate through every value
in<00:07:13.240><c> this</c><00:07:13.570><c> array</c><00:07:13.840><c> we</c><00:07:14.199><c> need</c><00:07:14.380><c> the</c><00:07:14.500><c> index</c><00:07:15.010><c> as</c><00:07:15.190><c> well</c>

00:07:15.510 --> 00:07:15.520 align:start position:0%
in this array we need the index as well
 

00:07:15.520 --> 00:07:18.330 align:start position:0%
in this array we need the index as well
as<00:07:15.699><c> the</c><00:07:15.850><c> actual</c><00:07:16.080><c> number</c><00:07:17.080><c> so</c><00:07:17.650><c> let's</c><00:07:17.919><c> do</c><00:07:18.100><c> it</c><00:07:18.130><c> like</c>

00:07:18.330 --> 00:07:18.340 align:start position:0%
as the actual number so let's do it like
 

00:07:18.340 --> 00:07:24.600 align:start position:0%
as the actual number so let's do it like
this<00:07:18.610><c> and</c><00:07:18.669><c> Python</c><00:07:22.740><c> before</c><00:07:23.740><c> we</c><00:07:23.889><c> add</c><00:07:24.070><c> this</c><00:07:24.370><c> to</c>

00:07:24.600 --> 00:07:24.610 align:start position:0%
this and Python before we add this to
 

00:07:24.610 --> 00:07:26.430 align:start position:0%
this and Python before we add this to
our<00:07:24.699><c> map</c><00:07:24.910><c> let's</c><00:07:25.270><c> check</c><00:07:25.539><c> if</c><00:07:25.660><c> the</c><00:07:25.810><c> difference</c>

00:07:26.430 --> 00:07:26.440 align:start position:0%
our map let's check if the difference
 

00:07:26.440 --> 00:07:30.689 align:start position:0%
our map let's check if the difference
which<00:07:26.830><c> is</c><00:07:26.979><c> equal</c><00:07:27.430><c> to</c><00:07:27.460><c> target</c><00:07:28.440><c> minus</c><00:07:29.440><c> n</c><00:07:29.699><c> now</c>

00:07:30.689 --> 00:07:30.699 align:start position:0%
which is equal to target minus n now
 

00:07:30.699 --> 00:07:32.339 align:start position:0%
which is equal to target minus n now
let's<00:07:30.910><c> check</c><00:07:31.150><c> if</c><00:07:31.389><c> this</c><00:07:31.630><c> difference</c><00:07:31.960><c> is</c>

00:07:32.339 --> 00:07:32.349 align:start position:0%
let's check if this difference is
 

00:07:32.349 --> 00:07:40.589 align:start position:0%
let's check if this difference is
already<00:07:32.889><c> in</c><00:07:33.130><c> the</c><00:07:33.370><c> hash</c><00:07:33.550><c> map</c><00:07:37.860><c> if</c><00:07:38.860><c> it</c><00:07:39.789><c> is</c><00:07:39.970><c> then</c><00:07:40.419><c> we</c>

00:07:40.589 --> 00:07:40.599 align:start position:0%
already in the hash map if it is then we
 

00:07:40.599 --> 00:07:42.510 align:start position:0%
already in the hash map if it is then we
can<00:07:40.780><c> return</c><00:07:41.080><c> the</c><00:07:41.289><c> solution</c><00:07:41.830><c> which</c><00:07:42.220><c> is</c><00:07:42.370><c> going</c>

00:07:42.510 --> 00:07:42.520 align:start position:0%
can return the solution which is going
 

00:07:42.520 --> 00:07:49.320 align:start position:0%
can return the solution which is going
to<00:07:42.580><c> be</c><00:07:42.880><c> a</c><00:07:43.560><c> pair</c><00:07:44.560><c> of</c><00:07:45.900><c> the</c><00:07:46.900><c> indices</c><00:07:47.940><c> so</c><00:07:48.940><c> I</c><00:07:49.000><c> can</c><00:07:49.180><c> get</c>

00:07:49.320 --> 00:07:49.330 align:start position:0%
to be a pair of the indices so I can get
 

00:07:49.330 --> 00:07:52.020 align:start position:0%
to be a pair of the indices so I can get
the<00:07:49.449><c> first</c><00:07:49.660><c> index</c><00:07:50.260><c> like</c><00:07:50.470><c> this</c><00:07:50.830><c> and</c><00:07:51.130><c> the</c><00:07:51.669><c> second</c>

00:07:52.020 --> 00:07:52.030 align:start position:0%
the first index like this and the second
 

00:07:52.030 --> 00:07:54.960 align:start position:0%
the first index like this and the second
index<00:07:52.150><c> is</c><00:07:52.479><c> just</c><00:07:52.750><c> AI</c><00:07:53.190><c> now</c><00:07:54.190><c> if</c><00:07:54.340><c> we</c><00:07:54.460><c> don't</c><00:07:54.729><c> find</c>

00:07:54.960 --> 00:07:54.970 align:start position:0%
index is just AI now if we don't find
 

00:07:54.970 --> 00:07:56.460 align:start position:0%
index is just AI now if we don't find
the<00:07:55.120><c> solution</c><00:07:55.570><c> then</c><00:07:55.690><c> we</c><00:07:55.810><c> have</c><00:07:55.930><c> to</c><00:07:56.020><c> update</c><00:07:56.440><c> our</c>

00:07:56.460 --> 00:07:56.470 align:start position:0%
the solution then we have to update our
 

00:07:56.470 --> 00:08:00.719 align:start position:0%
the solution then we have to update our
hash<00:07:56.770><c> map</c><00:07:57.039><c> so</c><00:07:57.909><c> for</c><00:07:58.750><c> this</c><00:07:59.020><c> value</c><00:07:59.440><c> n</c><00:07:59.979><c> I'm</c><00:08:00.430><c> gonna</c>

00:08:00.719 --> 00:08:00.729 align:start position:0%
hash map so for this value n I'm gonna
 

00:08:00.729 --> 00:08:03.210 align:start position:0%
hash map so for this value n I'm gonna
say<00:08:00.970><c> the</c><00:08:01.120><c> index</c><00:08:01.599><c> is</c><00:08:01.840><c> I</c><00:08:02.199><c> and</c><00:08:02.530><c> then</c><00:08:02.919><c> we're</c><00:08:03.099><c> going</c>

00:08:03.210 --> 00:08:03.220 align:start position:0%
say the index is I and then we're going
 

00:08:03.220 --> 00:08:05.700 align:start position:0%
say the index is I and then we're going
to<00:08:03.250><c> continue</c><00:08:03.460><c> since</c><00:08:03.940><c> we're</c><00:08:04.120><c> guaranteed</c><00:08:05.050><c> that</c>

00:08:05.700 --> 00:08:05.710 align:start position:0%
to continue since we're guaranteed that
 

00:08:05.710 --> 00:08:07.409 align:start position:0%
to continue since we're guaranteed that
a<00:08:05.770><c> solution</c><00:08:06.250><c> exists</c><00:08:06.820><c> we</c><00:08:07.060><c> don't</c><00:08:07.240><c> have</c><00:08:07.330><c> to</c>

00:08:07.409 --> 00:08:07.419 align:start position:0%
a solution exists we don't have to
 

00:08:07.419 --> 00:08:09.120 align:start position:0%
a solution exists we don't have to
return<00:08:07.720><c> anything</c><00:08:08.169><c> out</c><00:08:08.320><c> here</c><00:08:08.620><c> right</c><00:08:08.860><c> but</c><00:08:09.010><c> I'll</c>

00:08:09.120 --> 00:08:09.130 align:start position:0%
return anything out here right but I'll
 

00:08:09.130 --> 00:08:11.010 align:start position:0%
return anything out here right but I'll
just<00:08:09.159><c> put</c><00:08:09.430><c> a</c><00:08:09.490><c> return</c><00:08:09.669><c> for</c><00:08:10.060><c> no</c><00:08:10.150><c> reason</c><00:08:10.570><c> now</c>

00:08:11.010 --> 00:08:11.020 align:start position:0%
just put a return for no reason now
 

00:08:11.020 --> 00:08:14.040 align:start position:0%
just put a return for no reason now
let's<00:08:11.169><c> see</c><00:08:11.320><c> if</c><00:08:11.409><c> it</c><00:08:11.500><c> works</c><00:08:12.720><c> and</c><00:08:13.720><c> it</c><00:08:13.870><c> works</c>

00:08:14.040 --> 00:08:14.050 align:start position:0%
let's see if it works and it works
 

00:08:14.050 --> 00:08:16.290 align:start position:0%
let's see if it works and it works
perfectly<00:08:14.680><c> so</c><00:08:14.979><c> with</c><00:08:15.550><c> this</c><00:08:15.699><c> kind</c><00:08:15.909><c> of</c><00:08:16.000><c> neat</c>

00:08:16.290 --> 00:08:16.300 align:start position:0%
perfectly so with this kind of neat
 

00:08:16.300 --> 00:08:18.180 align:start position:0%
perfectly so with this kind of neat
little<00:08:16.510><c> trick</c><00:08:16.870><c> but</c><00:08:17.199><c> just</c><00:08:17.470><c> doing</c><00:08:17.620><c> it</c><00:08:17.830><c> in</c><00:08:17.919><c> one</c>

00:08:18.180 --> 00:08:18.190 align:start position:0%
little trick but just doing it in one
 

00:08:18.190 --> 00:08:20.159 align:start position:0%
little trick but just doing it in one
pass<00:08:18.490><c> you</c><00:08:18.520><c> can</c><00:08:18.909><c> reduce</c><00:08:19.300><c> the</c><00:08:19.570><c> amount</c><00:08:19.599><c> of</c><00:08:19.900><c> code</c>

00:08:20.159 --> 00:08:20.169 align:start position:0%
pass you can reduce the amount of code
 

00:08:20.169 --> 00:08:21.899 align:start position:0%
pass you can reduce the amount of code
you<00:08:20.349><c> have</c><00:08:20.380><c> to</c><00:08:20.530><c> write</c><00:08:20.650><c> and</c><00:08:21.010><c> not</c><00:08:21.430><c> have</c><00:08:21.580><c> to</c><00:08:21.699><c> worry</c>

00:08:21.899 --> 00:08:21.909 align:start position:0%
you have to write and not have to worry
 

00:08:21.909 --> 00:08:24.029 align:start position:0%
you have to write and not have to worry
about<00:08:22.060><c> like</c><00:08:22.449><c> edge</c><00:08:22.690><c> cases</c><00:08:23.020><c> and</c><00:08:23.409><c> comparisons</c>

00:08:24.029 --> 00:08:24.039 align:start position:0%
about like edge cases and comparisons
 

00:08:24.039 --> 00:08:26.880 align:start position:0%
about like edge cases and comparisons
and<00:08:24.280><c> things</c><00:08:24.639><c> like</c><00:08:24.820><c> that</c>

