WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.910 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.799><c> welcome</c><00:00:01.280><c> back</c><00:00:01.599><c> and</c><00:00:01.680><c> let's</c>

00:00:01.910 --> 00:00:01.920 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.920 --> 00:00:03.909 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.159><c> some</c><00:00:02.320><c> more</c><00:00:02.560><c> neat</c><00:00:02.800><c> code</c><00:00:03.120><c> today</c><00:00:03.360><c> so</c><00:00:03.600><c> today</c>

00:00:03.909 --> 00:00:03.919 align:start position:0%
write some more neat code today so today
 

00:00:03.919 --> 00:00:06.950 align:start position:0%
write some more neat code today so today
let's<00:00:04.160><c> solve</c><00:00:04.480><c> the</c><00:00:04.640><c> problem</c><00:00:05.279><c> k</c><00:00:05.759><c> closest</c><00:00:06.480><c> points</c>

00:00:06.950 --> 00:00:06.960 align:start position:0%
let's solve the problem k closest points
 

00:00:06.960 --> 00:00:09.430 align:start position:0%
let's solve the problem k closest points
to<00:00:07.200><c> the</c><00:00:07.440><c> origin</c><00:00:08.320><c> so</c><00:00:08.639><c> let's</c><00:00:08.880><c> take</c><00:00:09.040><c> a</c><00:00:09.120><c> look</c><00:00:09.280><c> at</c>

00:00:09.430 --> 00:00:09.440 align:start position:0%
to the origin so let's take a look at
 

00:00:09.440 --> 00:00:10.950 align:start position:0%
to the origin so let's take a look at
this<00:00:09.599><c> example</c><00:00:10.160><c> and</c><00:00:10.240><c> you</c><00:00:10.320><c> can't</c><00:00:10.480><c> really</c><00:00:10.719><c> see</c><00:00:10.880><c> it</c>

00:00:10.950 --> 00:00:10.960 align:start position:0%
this example and you can't really see it
 

00:00:10.960 --> 00:00:12.470 align:start position:0%
this example and you can't really see it
well<00:00:11.120><c> but</c><00:00:11.280><c> they</c><00:00:11.440><c> have</c><00:00:11.599><c> a</c><00:00:11.679><c> couple</c><00:00:12.000><c> points</c><00:00:12.320><c> so</c>

00:00:12.470 --> 00:00:12.480 align:start position:0%
well but they have a couple points so
 

00:00:12.480 --> 00:00:14.230 align:start position:0%
well but they have a couple points so
there's<00:00:12.719><c> one</c><00:00:12.960><c> point</c><00:00:13.200><c> over</c><00:00:13.519><c> here</c><00:00:13.920><c> and</c><00:00:14.000><c> there's</c>

00:00:14.230 --> 00:00:14.240 align:start position:0%
there's one point over here and there's
 

00:00:14.240 --> 00:00:15.910 align:start position:0%
there's one point over here and there's
one<00:00:14.480><c> point</c><00:00:14.719><c> over</c><00:00:14.880><c> here</c><00:00:15.040><c> so</c><00:00:15.200><c> we</c><00:00:15.360><c> have</c><00:00:15.440><c> a</c><00:00:15.599><c> list</c><00:00:15.839><c> of</c>

00:00:15.910 --> 00:00:15.920 align:start position:0%
one point over here so we have a list of
 

00:00:15.920 --> 00:00:17.430 align:start position:0%
one point over here so we have a list of
points<00:00:16.240><c> right</c><00:00:16.400><c> we</c><00:00:16.480><c> could</c><00:00:16.640><c> have</c><00:00:16.720><c> a</c><00:00:16.800><c> bunch</c><00:00:17.119><c> more</c>

00:00:17.430 --> 00:00:17.440 align:start position:0%
points right we could have a bunch more
 

00:00:17.440 --> 00:00:18.870 align:start position:0%
points right we could have a bunch more
points<00:00:17.760><c> right</c><00:00:18.000><c> anywhere</c><00:00:18.480><c> on</c><00:00:18.640><c> this</c>

00:00:18.870 --> 00:00:18.880 align:start position:0%
points right anywhere on this
 

00:00:18.880 --> 00:00:21.590 align:start position:0%
points right anywhere on this
two-dimensional<00:00:19.760><c> grid</c><00:00:20.320><c> we</c><00:00:20.480><c> have</c><00:00:20.640><c> an</c><00:00:20.800><c> x-axis</c>

00:00:21.590 --> 00:00:21.600 align:start position:0%
two-dimensional grid we have an x-axis
 

00:00:21.600 --> 00:00:23.990 align:start position:0%
two-dimensional grid we have an x-axis
and<00:00:21.760><c> a</c><00:00:21.920><c> y-axis</c><00:00:22.560><c> so</c><00:00:22.800><c> each</c><00:00:23.199><c> point</c><00:00:23.760><c> is</c>

00:00:23.990 --> 00:00:24.000 align:start position:0%
and a y-axis so each point is
 

00:00:24.000 --> 00:00:25.990 align:start position:0%
and a y-axis so each point is
represented<00:00:24.560><c> by</c><00:00:24.720><c> a</c><00:00:24.880><c> pair</c><00:00:25.119><c> of</c><00:00:25.279><c> values</c><00:00:25.760><c> this</c>

00:00:25.990 --> 00:00:26.000 align:start position:0%
represented by a pair of values this
 

00:00:26.000 --> 00:00:27.910 align:start position:0%
represented by a pair of values this
point<00:00:26.400><c> is</c><00:00:27.119><c> 1</c>

00:00:27.910 --> 00:00:27.920 align:start position:0%
point is 1
 

00:00:27.920 --> 00:00:31.589 align:start position:0%
point is 1
3<00:00:28.480><c> this</c><00:00:28.800><c> point</c><00:00:29.279><c> is</c><00:00:30.000><c> negative</c><00:00:30.640><c> 2</c>

00:00:31.589 --> 00:00:31.599 align:start position:0%
3 this point is negative 2
 

00:00:31.599 --> 00:00:32.389 align:start position:0%
3 this point is negative 2
2

00:00:32.389 --> 00:00:32.399 align:start position:0%
2
 

00:00:32.399 --> 00:00:33.910 align:start position:0%
2
right<00:00:32.640><c> and</c><00:00:32.800><c> so</c><00:00:32.960><c> we</c><00:00:33.040><c> can</c><00:00:33.200><c> have</c><00:00:33.280><c> a</c><00:00:33.360><c> bunch</c><00:00:33.600><c> more</c>

00:00:33.910 --> 00:00:33.920 align:start position:0%
right and so we can have a bunch more
 

00:00:33.920 --> 00:00:37.510 align:start position:0%
right and so we can have a bunch more
points<00:00:34.559><c> and</c><00:00:35.040><c> we</c><00:00:35.440><c> want</c><00:00:35.680><c> to</c><00:00:36.000><c> return</c><00:00:36.960><c> from</c><00:00:37.280><c> the</c>

00:00:37.510 --> 00:00:37.520 align:start position:0%
points and we want to return from the
 

00:00:37.520 --> 00:00:39.430 align:start position:0%
points and we want to return from the
entire<00:00:37.920><c> list</c><00:00:38.239><c> of</c><00:00:38.320><c> points</c><00:00:38.640><c> we</c><00:00:38.800><c> want</c><00:00:38.960><c> to</c><00:00:39.040><c> return</c>

00:00:39.430 --> 00:00:39.440 align:start position:0%
entire list of points we want to return
 

00:00:39.440 --> 00:00:42.790 align:start position:0%
entire list of points we want to return
the<00:00:39.680><c> k</c><00:00:40.160><c> closest</c><00:00:40.960><c> points</c><00:00:41.600><c> to</c><00:00:41.840><c> the</c><00:00:42.160><c> origin</c><00:00:42.640><c> now</c>

00:00:42.790 --> 00:00:42.800 align:start position:0%
the k closest points to the origin now
 

00:00:42.800 --> 00:00:44.709 align:start position:0%
the k closest points to the origin now
the<00:00:42.960><c> origin</c><00:00:43.520><c> is</c><00:00:43.680><c> the</c>

00:00:44.709 --> 00:00:44.719 align:start position:0%
the origin is the
 

00:00:44.719 --> 00:00:47.830 align:start position:0%
the origin is the
center<00:00:45.120><c> which</c><00:00:45.360><c> is</c><00:00:45.840><c> zero</c><00:00:46.320><c> zero</c><00:00:46.800><c> right</c><00:00:47.039><c> so</c><00:00:47.600><c> which</c>

00:00:47.830 --> 00:00:47.840 align:start position:0%
center which is zero zero right so which
 

00:00:47.840 --> 00:00:50.229 align:start position:0%
center which is zero zero right so which
of<00:00:48.000><c> these</c><00:00:48.239><c> points</c><00:00:48.640><c> is</c><00:00:48.719><c> the</c><00:00:48.960><c> closest</c><00:00:49.840><c> to</c><00:00:50.000><c> the</c>

00:00:50.229 --> 00:00:50.239 align:start position:0%
of these points is the closest to the
 

00:00:50.239 --> 00:00:52.709 align:start position:0%
of these points is the closest to the
origin<00:00:50.800><c> and</c><00:00:51.039><c> in</c><00:00:51.120><c> this</c><00:00:51.280><c> case</c><00:00:51.600><c> we</c><00:00:51.760><c> have</c><00:00:52.000><c> k</c><00:00:52.320><c> equals</c>

00:00:52.709 --> 00:00:52.719 align:start position:0%
origin and in this case we have k equals
 

00:00:52.719 --> 00:00:54.549 align:start position:0%
origin and in this case we have k equals
one<00:00:52.960><c> so</c><00:00:53.120><c> from</c><00:00:53.360><c> these</c><00:00:53.680><c> two</c><00:00:54.000><c> points</c><00:00:54.320><c> we</c><00:00:54.399><c> just</c>

00:00:54.549 --> 00:00:54.559 align:start position:0%
one so from these two points we just
 

00:00:54.559 --> 00:00:56.709 align:start position:0%
one so from these two points we just
want<00:00:54.800><c> to</c><00:00:54.960><c> return</c><00:00:55.520><c> the</c><00:00:55.760><c> single</c><00:00:56.160><c> point</c><00:00:56.399><c> that</c><00:00:56.640><c> is</c>

00:00:56.709 --> 00:00:56.719 align:start position:0%
want to return the single point that is
 

00:00:56.719 --> 00:00:58.950 align:start position:0%
want to return the single point that is
the<00:00:56.879><c> closest</c><00:00:57.440><c> to</c><00:00:57.600><c> the</c><00:00:57.840><c> origin</c><00:00:58.559><c> and</c><00:00:58.719><c> we're</c>

00:00:58.950 --> 00:00:58.960 align:start position:0%
the closest to the origin and we're
 

00:00:58.960 --> 00:01:00.389 align:start position:0%
the closest to the origin and we're
guaranteed<00:00:59.520><c> that</c><00:00:59.680><c> the</c><00:00:59.760><c> solution</c><00:01:00.160><c> is</c><00:01:00.239><c> going</c><00:01:00.320><c> to</c>

00:01:00.389 --> 00:01:00.399 align:start position:0%
guaranteed that the solution is going to
 

00:01:00.399 --> 00:01:01.990 align:start position:0%
guaranteed that the solution is going to
be<00:01:00.559><c> unique</c><00:01:00.879><c> so</c><00:01:01.039><c> there's</c><00:01:01.280><c> never</c><00:01:01.440><c> going</c><00:01:01.600><c> to</c><00:01:01.680><c> be</c><00:01:01.840><c> a</c>

00:01:01.990 --> 00:01:02.000 align:start position:0%
be unique so there's never going to be a
 

00:01:02.000 --> 00:01:03.910 align:start position:0%
be unique so there's never going to be a
tie<00:01:02.399><c> or</c><00:01:02.559><c> anything</c><00:01:02.879><c> like</c><00:01:03.039><c> that</c><00:01:03.359><c> but</c><00:01:03.600><c> it</c><00:01:03.680><c> could</c>

00:01:03.910 --> 00:01:03.920 align:start position:0%
tie or anything like that but it could
 

00:01:03.920 --> 00:01:05.189 align:start position:0%
tie or anything like that but it could
be<00:01:04.159><c> you</c><00:01:04.239><c> know</c>

00:01:05.189 --> 00:01:05.199 align:start position:0%
be you know
 

00:01:05.199 --> 00:01:07.030 align:start position:0%
be you know
in<00:01:05.280><c> this</c><00:01:05.439><c> case</c><00:01:05.600><c> we</c><00:01:05.760><c> have</c><00:01:05.840><c> k</c><00:01:06.080><c> is</c><00:01:06.320><c> 1</c><00:01:06.560><c> it</c><00:01:06.640><c> could</c><00:01:06.799><c> be</c>

00:01:07.030 --> 00:01:07.040 align:start position:0%
in this case we have k is 1 it could be
 

00:01:07.040 --> 00:01:09.510 align:start position:0%
in this case we have k is 1 it could be
k<00:01:07.200><c> is</c><00:01:07.439><c> 2</c><00:01:07.760><c> k</c><00:01:08.000><c> is</c><00:01:08.400><c> 3</c><00:01:08.720><c> or</c><00:01:08.799><c> something</c><00:01:09.040><c> if</c><00:01:09.200><c> we</c><00:01:09.280><c> had</c><00:01:09.439><c> a</c>

00:01:09.510 --> 00:01:09.520 align:start position:0%
k is 2 k is 3 or something if we had a
 

00:01:09.520 --> 00:01:11.670 align:start position:0%
k is 2 k is 3 or something if we had a
bunch<00:01:09.840><c> more</c><00:01:10.080><c> points</c><00:01:10.880><c> so</c><00:01:11.040><c> we</c><00:01:11.200><c> just</c><00:01:11.360><c> want</c><00:01:11.520><c> to</c>

00:01:11.670 --> 00:01:11.680 align:start position:0%
bunch more points so we just want to
 

00:01:11.680 --> 00:01:13.750 align:start position:0%
bunch more points so we just want to
figure<00:01:12.000><c> out</c><00:01:12.240><c> efficiently</c><00:01:13.040><c> what</c><00:01:13.280><c> are</c><00:01:13.360><c> the</c><00:01:13.520><c> k</c>

00:01:13.750 --> 00:01:13.760 align:start position:0%
figure out efficiently what are the k
 

00:01:13.760 --> 00:01:15.510 align:start position:0%
figure out efficiently what are the k
closest<00:01:14.159><c> points</c><00:01:14.479><c> to</c><00:01:14.560><c> the</c><00:01:14.720><c> origin</c><00:01:15.200><c> now</c><00:01:15.360><c> the</c>

00:01:15.510 --> 00:01:15.520 align:start position:0%
closest points to the origin now the
 

00:01:15.520 --> 00:01:17.510 align:start position:0%
closest points to the origin now the
first<00:01:15.840><c> thing</c><00:01:16.000><c> is</c><00:01:16.159><c> how</c><00:01:16.320><c> do</c><00:01:16.479><c> we</c><00:01:16.560><c> know</c><00:01:16.799><c> how</c><00:01:17.040><c> far</c>

00:01:17.510 --> 00:01:17.520 align:start position:0%
first thing is how do we know how far
 

00:01:17.520 --> 00:01:19.910 align:start position:0%
first thing is how do we know how far
any<00:01:17.759><c> given</c><00:01:18.080><c> point</c><00:01:18.400><c> actually</c><00:01:18.880><c> is</c><00:01:19.439><c> from</c><00:01:19.680><c> the</c>

00:01:19.910 --> 00:01:19.920 align:start position:0%
any given point actually is from the
 

00:01:19.920 --> 00:01:21.749 align:start position:0%
any given point actually is from the
origin<00:01:20.479><c> you</c><00:01:20.640><c> know</c><00:01:20.880><c> you</c><00:01:21.040><c> might</c><00:01:21.280><c> remember</c><00:01:21.600><c> from</c>

00:01:21.749 --> 00:01:21.759 align:start position:0%
origin you know you might remember from
 

00:01:21.759 --> 00:01:23.590 align:start position:0%
origin you know you might remember from
your<00:01:22.159><c> you</c><00:01:22.240><c> know</c><00:01:22.400><c> high</c><00:01:22.560><c> school</c><00:01:22.799><c> math</c><00:01:23.040><c> class</c><00:01:23.360><c> or</c>

00:01:23.590 --> 00:01:23.600 align:start position:0%
your you know high school math class or
 

00:01:23.600 --> 00:01:25.109 align:start position:0%
your you know high school math class or
in<00:01:23.680><c> this</c><00:01:23.759><c> case</c><00:01:24.000><c> they</c><00:01:24.159><c> actually</c><00:01:24.479><c> tell</c><00:01:24.720><c> us</c><00:01:24.880><c> the</c>

00:01:25.109 --> 00:01:25.119 align:start position:0%
in this case they actually tell us the
 

00:01:25.119 --> 00:01:27.350 align:start position:0%
in this case they actually tell us the
actual<00:01:25.600><c> formula</c><00:01:26.159><c> which</c><00:01:26.720><c> does</c><00:01:26.960><c> make</c><00:01:27.119><c> things</c><00:01:27.360><c> a</c>

00:01:27.350 --> 00:01:27.360 align:start position:0%
actual formula which does make things a
 

00:01:27.360 --> 00:01:29.030 align:start position:0%
actual formula which does make things a
little<00:01:27.520><c> bit</c><00:01:27.680><c> easy</c><00:01:28.000><c> so</c><00:01:28.080><c> it's</c><00:01:28.240><c> basically</c><00:01:28.720><c> taking</c>

00:01:29.030 --> 00:01:29.040 align:start position:0%
little bit easy so it's basically taking
 

00:01:29.040 --> 00:01:31.910 align:start position:0%
little bit easy so it's basically taking
the<00:01:29.360><c> x</c><00:01:29.600><c> difference</c><00:01:30.159><c> right</c><00:01:30.720><c> so</c><00:01:31.040><c> in</c><00:01:31.200><c> this</c><00:01:31.439><c> case</c>

00:01:31.910 --> 00:01:31.920 align:start position:0%
the x difference right so in this case
 

00:01:31.920 --> 00:01:33.749 align:start position:0%
the x difference right so in this case
for<00:01:32.079><c> this</c><00:01:32.320><c> point</c><00:01:32.560><c> the</c><00:01:32.799><c> x</c><00:01:33.040><c> difference</c><00:01:33.520><c> is</c><00:01:33.600><c> going</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
for this point the x difference is going
 

00:01:33.759 --> 00:01:37.510 align:start position:0%
for this point the x difference is going
to<00:01:33.840><c> be</c><00:01:34.320><c> 1</c><00:01:34.640><c> minus</c><00:01:35.040><c> 0</c><00:01:35.840><c> plus</c><00:01:36.400><c> the</c><00:01:36.720><c> y</c><00:01:37.040><c> difference</c><00:01:37.439><c> in</c>

00:01:37.510 --> 00:01:37.520 align:start position:0%
to be 1 minus 0 plus the y difference in
 

00:01:37.520 --> 00:01:39.190 align:start position:0%
to be 1 minus 0 plus the y difference in
this<00:01:37.680><c> case</c><00:01:38.079><c> the</c><00:01:38.320><c> y</c><00:01:38.560><c> difference</c><00:01:38.960><c> is</c><00:01:39.040><c> going</c><00:01:39.119><c> to</c>

00:01:39.190 --> 00:01:39.200 align:start position:0%
this case the y difference is going to
 

00:01:39.200 --> 00:01:41.749 align:start position:0%
this case the y difference is going to
be<00:01:39.360><c> three</c><00:01:39.600><c> minus</c><00:01:40.079><c> zero</c><00:01:40.799><c> and</c><00:01:41.040><c> each</c><00:01:41.280><c> of</c><00:01:41.360><c> these</c><00:01:41.600><c> is</c>

00:01:41.749 --> 00:01:41.759 align:start position:0%
be three minus zero and each of these is
 

00:01:41.759 --> 00:01:43.270 align:start position:0%
be three minus zero and each of these is
going<00:01:41.840><c> to</c><00:01:41.920><c> be</c><00:01:42.079><c> squared</c><00:01:42.560><c> because</c><00:01:43.040><c> you</c><00:01:43.119><c> know</c>

00:01:43.270 --> 00:01:43.280 align:start position:0%
going to be squared because you know
 

00:01:43.280 --> 00:01:45.109 align:start position:0%
going to be squared because you know
that's<00:01:43.439><c> kind</c><00:01:43.520><c> of</c><00:01:43.600><c> how</c><00:01:43.840><c> it</c><00:01:43.920><c> works</c><00:01:44.320><c> a</c><00:01:44.560><c> squared</c>

00:01:45.109 --> 00:01:45.119 align:start position:0%
that's kind of how it works a squared
 

00:01:45.119 --> 00:01:47.990 align:start position:0%
that's kind of how it works a squared
plus<00:01:45.520><c> b</c><00:01:45.759><c> squared</c><00:01:46.479><c> equals</c><00:01:47.119><c> c</c><00:01:47.280><c> squared</c><00:01:47.680><c> this</c><00:01:47.840><c> is</c>

00:01:47.990 --> 00:01:48.000 align:start position:0%
plus b squared equals c squared this is
 

00:01:48.000 --> 00:01:49.510 align:start position:0%
plus b squared equals c squared this is
the<00:01:48.079><c> formula</c><00:01:48.479><c> we're</c><00:01:48.720><c> using</c><00:01:48.960><c> so</c><00:01:49.040><c> if</c><00:01:49.200><c> we</c><00:01:49.280><c> want</c><00:01:49.439><c> to</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
the formula we're using so if we want to
 

00:01:49.520 --> 00:01:51.510 align:start position:0%
the formula we're using so if we want to
find<00:01:49.920><c> c</c><00:01:50.240><c> which</c><00:01:50.479><c> is</c><00:01:50.560><c> going</c><00:01:50.640><c> to</c><00:01:50.720><c> be</c><00:01:50.880><c> the</c><00:01:51.119><c> actual</c>

00:01:51.510 --> 00:01:51.520 align:start position:0%
find c which is going to be the actual
 

00:01:51.520 --> 00:01:53.670 align:start position:0%
find c which is going to be the actual
distance<00:01:52.479><c> we'll</c><00:01:52.640><c> take</c><00:01:52.799><c> a</c><00:01:53.040><c> squared</c><00:01:53.280><c> plus</c><00:01:53.520><c> b</c>

00:01:53.670 --> 00:01:53.680 align:start position:0%
distance we'll take a squared plus b
 

00:01:53.680 --> 00:01:56.149 align:start position:0%
distance we'll take a squared plus b
squared<00:01:54.000><c> and</c><00:01:54.159><c> then</c><00:01:54.720><c> take</c><00:01:55.119><c> the</c><00:01:55.439><c> square</c><00:01:55.840><c> root</c><00:01:56.079><c> of</c>

00:01:56.149 --> 00:01:56.159 align:start position:0%
squared and then take the square root of
 

00:01:56.159 --> 00:01:59.190 align:start position:0%
squared and then take the square root of
the<00:01:56.320><c> entire</c><00:01:56.640><c> thing</c><00:01:56.880><c> to</c><00:01:57.119><c> actually</c><00:01:57.520><c> find</c><00:01:58.000><c> c</c><00:01:58.399><c> so</c>

00:01:59.190 --> 00:01:59.200 align:start position:0%
the entire thing to actually find c so
 

00:01:59.200 --> 00:02:01.510 align:start position:0%
the entire thing to actually find c so
you<00:01:59.360><c> know</c><00:01:59.920><c> finding</c><00:02:00.240><c> the</c><00:02:00.399><c> distance</c><00:02:01.040><c> we</c><00:02:01.200><c> can</c><00:02:01.360><c> do</c>

00:02:01.510 --> 00:02:01.520 align:start position:0%
you know finding the distance we can do
 

00:02:01.520 --> 00:02:03.429 align:start position:0%
you know finding the distance we can do
that<00:02:02.000><c> a</c><00:02:02.240><c> squared</c><00:02:02.479><c> plus</c><00:02:02.640><c> b</c><00:02:02.799><c> squared</c><00:02:03.040><c> taking</c><00:02:03.280><c> the</c>

00:02:03.429 --> 00:02:03.439 align:start position:0%
that a squared plus b squared taking the
 

00:02:03.439 --> 00:02:05.670 align:start position:0%
that a squared plus b squared taking the
square<00:02:03.759><c> root</c><00:02:04.159><c> but</c><00:02:04.399><c> in</c><00:02:04.479><c> this</c><00:02:04.640><c> case</c><00:02:04.960><c> we</c><00:02:05.200><c> actually</c>

00:02:05.670 --> 00:02:05.680 align:start position:0%
square root but in this case we actually
 

00:02:05.680 --> 00:02:08.229 align:start position:0%
square root but in this case we actually
aren't<00:02:06.079><c> required</c><00:02:06.799><c> to</c><00:02:07.119><c> find</c><00:02:07.360><c> the</c><00:02:07.439><c> square</c><00:02:07.759><c> root</c>

00:02:08.229 --> 00:02:08.239 align:start position:0%
aren't required to find the square root
 

00:02:08.239 --> 00:02:10.229 align:start position:0%
aren't required to find the square root
because<00:02:08.800><c> we're</c><00:02:09.039><c> not</c><00:02:09.280><c> actually</c><00:02:09.759><c> trying</c><00:02:10.080><c> to</c>

00:02:10.229 --> 00:02:10.239 align:start position:0%
because we're not actually trying to
 

00:02:10.239 --> 00:02:12.229 align:start position:0%
because we're not actually trying to
return<00:02:10.640><c> the</c><00:02:10.879><c> distance</c><00:02:11.520><c> we're</c><00:02:11.680><c> just</c><00:02:11.920><c> trying</c><00:02:12.160><c> to</c>

00:02:12.229 --> 00:02:12.239 align:start position:0%
return the distance we're just trying to
 

00:02:12.239 --> 00:02:15.030 align:start position:0%
return the distance we're just trying to
determine<00:02:12.800><c> which</c><00:02:13.280><c> point</c><00:02:13.599><c> is</c><00:02:13.760><c> the</c><00:02:13.920><c> closest</c><00:02:14.480><c> so</c>

00:02:15.030 --> 00:02:15.040 align:start position:0%
determine which point is the closest so
 

00:02:15.040 --> 00:02:16.710 align:start position:0%
determine which point is the closest so
you<00:02:15.200><c> know</c><00:02:15.360><c> for</c><00:02:15.520><c> example</c><00:02:15.840><c> let's</c><00:02:16.000><c> say</c><00:02:16.160><c> we</c><00:02:16.319><c> had</c>

00:02:16.710 --> 00:02:16.720 align:start position:0%
you know for example let's say we had
 

00:02:16.720 --> 00:02:18.390 align:start position:0%
you know for example let's say we had
something<00:02:16.959><c> like</c><00:02:17.120><c> this</c><00:02:17.280><c> that</c><00:02:17.520><c> totaled</c><00:02:17.920><c> up</c><00:02:18.080><c> to</c>

00:02:18.390 --> 00:02:18.400 align:start position:0%
something like this that totaled up to
 

00:02:18.400 --> 00:02:21.030 align:start position:0%
something like this that totaled up to
five<00:02:18.800><c> right</c><00:02:19.440><c> and</c><00:02:20.080><c> we</c><00:02:20.239><c> had</c><00:02:20.400><c> another</c><00:02:20.720><c> one</c><00:02:20.879><c> that</c>

00:02:21.030 --> 00:02:21.040 align:start position:0%
five right and we had another one that
 

00:02:21.040 --> 00:02:22.790 align:start position:0%
five right and we had another one that
totaled<00:02:21.360><c> up</c><00:02:21.440><c> to</c><00:02:21.680><c> 4.</c><00:02:22.000><c> if</c><00:02:22.080><c> we</c><00:02:22.160><c> take</c><00:02:22.400><c> the</c><00:02:22.480><c> square</c>

00:02:22.790 --> 00:02:22.800 align:start position:0%
totaled up to 4. if we take the square
 

00:02:22.800 --> 00:02:25.589 align:start position:0%
totaled up to 4. if we take the square
root<00:02:23.120><c> of</c><00:02:23.520><c> 2</c><00:02:24.239><c> or</c><00:02:24.640><c> 4</c><00:02:24.879><c> that's</c><00:02:25.040><c> going</c><00:02:25.120><c> to</c><00:02:25.200><c> give</c><00:02:25.280><c> us</c><00:02:25.440><c> 2</c>

00:02:25.589 --> 00:02:25.599 align:start position:0%
root of 2 or 4 that's going to give us 2
 

00:02:25.599 --> 00:02:26.949 align:start position:0%
root of 2 or 4 that's going to give us 2
if<00:02:25.760><c> we</c><00:02:25.840><c> take</c><00:02:26.000><c> the</c><00:02:26.080><c> square</c><00:02:26.319><c> root</c><00:02:26.480><c> of</c><00:02:26.560><c> 5</c><00:02:26.800><c> is</c><00:02:26.879><c> going</c>

00:02:26.949 --> 00:02:26.959 align:start position:0%
if we take the square root of 5 is going
 

00:02:26.959 --> 00:02:28.869 align:start position:0%
if we take the square root of 5 is going
to<00:02:27.040><c> give</c><00:02:27.200><c> us</c><00:02:27.360><c> 2</c><00:02:27.680><c> point</c><00:02:28.160><c> you</c><00:02:28.239><c> know</c><00:02:28.480><c> something</c>

00:02:28.869 --> 00:02:28.879 align:start position:0%
to give us 2 point you know something
 

00:02:28.879 --> 00:02:31.030 align:start position:0%
to give us 2 point you know something
something<00:02:29.440><c> so</c><00:02:29.599><c> we're</c><00:02:30.000><c> not</c><00:02:30.239><c> required</c><00:02:30.720><c> to</c><00:02:30.879><c> take</c>

00:02:31.030 --> 00:02:31.040 align:start position:0%
something so we're not required to take
 

00:02:31.040 --> 00:02:32.790 align:start position:0%
something so we're not required to take
the<00:02:31.120><c> square</c><00:02:31.360><c> root</c><00:02:31.680><c> because</c><00:02:32.239><c> we</c><00:02:32.400><c> just</c><00:02:32.560><c> want</c><00:02:32.720><c> to</c>

00:02:32.790 --> 00:02:32.800 align:start position:0%
the square root because we just want to
 

00:02:32.800 --> 00:02:35.030 align:start position:0%
the square root because we just want to
be<00:02:32.959><c> able</c><00:02:33.120><c> to</c><00:02:33.280><c> compare</c><00:02:33.840><c> which</c><00:02:34.160><c> one</c><00:02:34.400><c> is</c><00:02:34.640><c> greater</c>

00:02:35.030 --> 00:02:35.040 align:start position:0%
be able to compare which one is greater
 

00:02:35.040 --> 00:02:37.910 align:start position:0%
be able to compare which one is greater
right<00:02:35.360><c> obviously</c><00:02:35.920><c> if</c><00:02:36.160><c> 5</c><00:02:36.560><c> is</c><00:02:36.800><c> greater</c><00:02:37.120><c> than</c><00:02:37.440><c> 4</c>

00:02:37.910 --> 00:02:37.920 align:start position:0%
right obviously if 5 is greater than 4
 

00:02:37.920 --> 00:02:40.309 align:start position:0%
right obviously if 5 is greater than 4
we<00:02:38.080><c> know</c><00:02:38.239><c> that</c><00:02:38.800><c> that</c><00:02:39.040><c> the</c><00:02:39.200><c> square</c><00:02:39.519><c> root</c><00:02:39.840><c> of</c><00:02:40.000><c> 5</c>

00:02:40.309 --> 00:02:40.319 align:start position:0%
we know that that the square root of 5
 

00:02:40.319 --> 00:02:42.070 align:start position:0%
we know that that the square root of 5
is<00:02:40.480><c> also</c><00:02:40.720><c> going</c><00:02:40.800><c> to</c><00:02:40.879><c> be</c><00:02:41.040><c> greater</c><00:02:41.360><c> than</c><00:02:41.599><c> 4</c><00:02:41.920><c> so</c>

00:02:42.070 --> 00:02:42.080 align:start position:0%
is also going to be greater than 4 so
 

00:02:42.080 --> 00:02:43.670 align:start position:0%
is also going to be greater than 4 so
we're<00:02:42.239><c> not</c><00:02:42.560><c> technically</c><00:02:43.040><c> required</c><00:02:43.599><c> to</c>

00:02:43.670 --> 00:02:43.680 align:start position:0%
we're not technically required to
 

00:02:43.680 --> 00:02:45.670 align:start position:0%
we're not technically required to
actually<00:02:44.080><c> take</c><00:02:44.319><c> that</c><00:02:44.560><c> square</c><00:02:44.959><c> root</c><00:02:45.440><c> and</c><00:02:45.519><c> i</c>

00:02:45.670 --> 00:02:45.680 align:start position:0%
actually take that square root and i
 

00:02:45.680 --> 00:02:46.869 align:start position:0%
actually take that square root and i
don't<00:02:45.760><c> know</c><00:02:45.920><c> why</c><00:02:46.080><c> i'm</c><00:02:46.160><c> making</c><00:02:46.400><c> this</c><00:02:46.560><c> such</c><00:02:46.800><c> a</c>

00:02:46.869 --> 00:02:46.879 align:start position:0%
don't know why i'm making this such a
 

00:02:46.879 --> 00:02:48.150 align:start position:0%
don't know why i'm making this such a
big<00:02:47.040><c> point</c><00:02:47.280><c> it's</c><00:02:47.360><c> just</c><00:02:47.519><c> that</c><00:02:47.680><c> it's</c><00:02:47.840><c> kind</c><00:02:48.000><c> of</c>

00:02:48.150 --> 00:02:48.160 align:start position:0%
big point it's just that it's kind of
 

00:02:48.160 --> 00:02:50.150 align:start position:0%
big point it's just that it's kind of
easier<00:02:48.400><c> to</c><00:02:48.560><c> code</c><00:02:48.800><c> it</c><00:02:48.959><c> up</c><00:02:49.440><c> then</c><00:02:49.680><c> if</c><00:02:49.840><c> we</c><00:02:49.920><c> don't</c>

00:02:50.150 --> 00:02:50.160 align:start position:0%
easier to code it up then if we don't
 

00:02:50.160 --> 00:02:51.509 align:start position:0%
easier to code it up then if we don't
actually<00:02:50.400><c> have</c><00:02:50.560><c> to</c><00:02:50.640><c> take</c><00:02:50.879><c> the</c><00:02:50.959><c> square</c><00:02:51.200><c> root</c><00:02:51.360><c> we</c>

00:02:51.509 --> 00:02:51.519 align:start position:0%
actually have to take the square root we
 

00:02:51.519 --> 00:02:53.910 align:start position:0%
actually have to take the square root we
just<00:02:51.680><c> take</c><00:02:52.160><c> the</c><00:02:52.400><c> absolute</c><00:02:52.959><c> difference</c>

00:02:53.910 --> 00:02:53.920 align:start position:0%
just take the absolute difference
 

00:02:53.920 --> 00:02:55.190 align:start position:0%
just take the absolute difference
between<00:02:54.239><c> the</c><00:02:54.480><c> x</c>

00:02:55.190 --> 00:02:55.200 align:start position:0%
between the x
 

00:02:55.200 --> 00:02:57.270 align:start position:0%
between the x
square<00:02:55.519><c> it</c><00:02:55.920><c> the</c><00:02:56.080><c> difference</c><00:02:56.400><c> between</c><00:02:56.720><c> the</c><00:02:56.879><c> y</c>

00:02:57.270 --> 00:02:57.280 align:start position:0%
square it the difference between the y
 

00:02:57.280 --> 00:02:59.030 align:start position:0%
square it the difference between the y
square<00:02:57.599><c> it</c><00:02:57.840><c> and</c><00:02:57.920><c> then</c><00:02:58.159><c> add</c><00:02:58.400><c> them</c><00:02:58.560><c> together</c>

00:02:59.030 --> 00:02:59.040 align:start position:0%
square it and then add them together
 

00:02:59.040 --> 00:03:01.350 align:start position:0%
square it and then add them together
that<00:02:59.280><c> will</c><00:02:59.680><c> be</c><00:02:59.920><c> enough</c><00:03:00.319><c> for</c><00:03:00.560><c> us</c><00:03:00.720><c> to</c><00:03:00.800><c> compare</c>

00:03:01.350 --> 00:03:01.360 align:start position:0%
that will be enough for us to compare
 

00:03:01.360 --> 00:03:03.110 align:start position:0%
that will be enough for us to compare
two<00:03:01.680><c> points</c><00:03:02.159><c> and</c><00:03:02.239><c> to</c><00:03:02.400><c> figure</c><00:03:02.640><c> out</c><00:03:02.800><c> which</c><00:03:02.959><c> one</c>

00:03:03.110 --> 00:03:03.120 align:start position:0%
two points and to figure out which one
 

00:03:03.120 --> 00:03:05.910 align:start position:0%
two points and to figure out which one
of<00:03:03.200><c> them</c><00:03:03.360><c> is</c><00:03:03.519><c> actually</c><00:03:03.920><c> closer</c><00:03:04.640><c> to</c><00:03:04.879><c> the</c><00:03:05.040><c> origin</c>

00:03:05.910 --> 00:03:05.920 align:start position:0%
of them is actually closer to the origin
 

00:03:05.920 --> 00:03:08.390 align:start position:0%
of them is actually closer to the origin
so<00:03:06.159><c> once</c><00:03:06.400><c> you</c><00:03:06.560><c> have</c><00:03:06.720><c> that</c><00:03:07.040><c> down</c><00:03:07.760><c> how</c><00:03:08.080><c> can</c><00:03:08.239><c> we</c>

00:03:08.390 --> 00:03:08.400 align:start position:0%
so once you have that down how can we
 

00:03:08.400 --> 00:03:10.710 align:start position:0%
so once you have that down how can we
actually<00:03:08.879><c> find</c><00:03:09.200><c> the</c><00:03:09.519><c> k</c><00:03:09.840><c> closest</c><00:03:10.319><c> points</c><00:03:10.560><c> we're</c>

00:03:10.710 --> 00:03:10.720 align:start position:0%
actually find the k closest points we're
 

00:03:10.720 --> 00:03:12.630 align:start position:0%
actually find the k closest points we're
not<00:03:10.879><c> just</c><00:03:11.040><c> finding</c><00:03:11.360><c> the</c><00:03:11.599><c> single</c><00:03:12.080><c> closest</c>

00:03:12.630 --> 00:03:12.640 align:start position:0%
not just finding the single closest
 

00:03:12.640 --> 00:03:13.990 align:start position:0%
not just finding the single closest
point<00:03:12.959><c> that</c><00:03:13.120><c> would</c><00:03:13.280><c> be</c><00:03:13.440><c> easy</c><00:03:13.680><c> but</c><00:03:13.840><c> we're</c>

00:03:13.990 --> 00:03:14.000 align:start position:0%
point that would be easy but we're
 

00:03:14.000 --> 00:03:16.550 align:start position:0%
point that would be easy but we're
trying<00:03:14.239><c> to</c><00:03:14.319><c> find</c><00:03:14.640><c> k</c><00:03:15.200><c> of</c><00:03:15.360><c> the</c><00:03:15.440><c> closest</c><00:03:15.920><c> points</c>

00:03:16.550 --> 00:03:16.560 align:start position:0%
trying to find k of the closest points
 

00:03:16.560 --> 00:03:19.589 align:start position:0%
trying to find k of the closest points
well<00:03:17.200><c> the</c><00:03:17.200><c> the</c><00:03:18.080><c> easiest</c><00:03:18.560><c> and</c><00:03:18.720><c> simplest</c><00:03:19.280><c> idea</c>

00:03:19.589 --> 00:03:19.599 align:start position:0%
well the the easiest and simplest idea
 

00:03:19.599 --> 00:03:21.190 align:start position:0%
well the the easiest and simplest idea
that<00:03:19.760><c> you</c><00:03:19.840><c> might</c><00:03:20.000><c> think</c><00:03:20.159><c> of</c><00:03:20.319><c> is</c><00:03:20.400><c> just</c><00:03:20.720><c> sorting</c>

00:03:21.190 --> 00:03:21.200 align:start position:0%
that you might think of is just sorting
 

00:03:21.200 --> 00:03:23.910 align:start position:0%
that you might think of is just sorting
right<00:03:21.440><c> so</c><00:03:21.680><c> if</c><00:03:21.840><c> we</c><00:03:22.000><c> have</c><00:03:22.159><c> a</c><00:03:22.239><c> list</c><00:03:22.560><c> of</c><00:03:22.720><c> size</c><00:03:23.200><c> n</c><00:03:23.760><c> and</c>

00:03:23.910 --> 00:03:23.920 align:start position:0%
right so if we have a list of size n and
 

00:03:23.920 --> 00:03:25.670 align:start position:0%
right so if we have a list of size n and
for<00:03:24.080><c> each</c><00:03:24.319><c> one</c><00:03:24.480><c> of</c><00:03:24.560><c> these</c><00:03:24.799><c> points</c><00:03:25.120><c> we</c><00:03:25.360><c> you</c><00:03:25.519><c> know</c>

00:03:25.670 --> 00:03:25.680 align:start position:0%
for each one of these points we you know
 

00:03:25.680 --> 00:03:27.030 align:start position:0%
for each one of these points we you know
compute<00:03:26.239><c> this</c>

00:03:27.030 --> 00:03:27.040 align:start position:0%
compute this
 

00:03:27.040 --> 00:03:28.789 align:start position:0%
compute this
take<00:03:27.280><c> the</c><00:03:27.519><c> x</c><00:03:27.760><c> difference</c><00:03:28.159><c> y</c><00:03:28.400><c> difference</c>

00:03:28.789 --> 00:03:28.799 align:start position:0%
take the x difference y difference
 

00:03:28.799 --> 00:03:31.110 align:start position:0%
take the x difference y difference
square<00:03:29.120><c> it</c><00:03:29.280><c> right</c><00:03:29.519><c> and</c><00:03:29.599><c> use</c><00:03:29.920><c> that</c><00:03:30.239><c> value</c><00:03:30.879><c> to</c>

00:03:31.110 --> 00:03:31.120 align:start position:0%
square it right and use that value to
 

00:03:31.120 --> 00:03:33.910 align:start position:0%
square it right and use that value to
sort<00:03:31.440><c> the</c><00:03:31.599><c> entire</c><00:03:32.239><c> list</c><00:03:32.720><c> of</c><00:03:32.879><c> points</c><00:03:33.519><c> the</c><00:03:33.680><c> time</c>

00:03:33.910 --> 00:03:33.920 align:start position:0%
sort the entire list of points the time
 

00:03:33.920 --> 00:03:36.710 align:start position:0%
sort the entire list of points the time
complexity<00:03:34.480><c> of</c><00:03:34.560><c> that</c><00:03:34.799><c> is</c><00:03:34.959><c> going</c><00:03:35.200><c> to</c><00:03:35.360><c> be</c><00:03:35.920><c> n</c>

00:03:36.710 --> 00:03:36.720 align:start position:0%
complexity of that is going to be n
 

00:03:36.720 --> 00:03:39.589 align:start position:0%
complexity of that is going to be n
log<00:03:37.519><c> n</c><00:03:37.760><c> because</c><00:03:38.000><c> we're</c><00:03:38.239><c> sorting</c><00:03:38.560><c> the</c><00:03:38.799><c> entire</c>

00:03:39.589 --> 00:03:39.599 align:start position:0%
log n because we're sorting the entire
 

00:03:39.599 --> 00:03:41.350 align:start position:0%
log n because we're sorting the entire
list<00:03:39.920><c> and</c><00:03:40.000><c> then</c><00:03:40.159><c> once</c><00:03:40.480><c> we</c><00:03:40.640><c> have</c><00:03:40.879><c> that</c><00:03:41.120><c> right</c>

00:03:41.350 --> 00:03:41.360 align:start position:0%
list and then once we have that right
 

00:03:41.360 --> 00:03:43.509 align:start position:0%
list and then once we have that right
like<00:03:41.519><c> let's</c><00:03:41.760><c> say</c><00:03:42.319><c> we</c><00:03:42.480><c> had</c>

00:03:43.509 --> 00:03:43.519 align:start position:0%
like let's say we had
 

00:03:43.519 --> 00:03:45.350 align:start position:0%
like let's say we had
what<00:03:43.920><c> you</c><00:03:44.080><c> know</c><00:03:44.319><c> three</c><00:03:44.560><c> values</c><00:03:44.959><c> or</c><00:03:45.040><c> something</c>

00:03:45.350 --> 00:03:45.360 align:start position:0%
what you know three values or something
 

00:03:45.360 --> 00:03:47.589 align:start position:0%
what you know three values or something
we<00:03:45.440><c> just</c><00:03:45.519><c> wanted</c><00:03:45.840><c> the</c><00:03:45.920><c> first</c><00:03:46.319><c> two</c><00:03:46.560><c> which</c><00:03:46.799><c> is</c><00:03:46.959><c> k</c>

00:03:47.589 --> 00:03:47.599 align:start position:0%
we just wanted the first two which is k
 

00:03:47.599 --> 00:03:49.030 align:start position:0%
we just wanted the first two which is k
and<00:03:47.760><c> then</c><00:03:47.920><c> we</c><00:03:48.080><c> can</c><00:03:48.159><c> just</c><00:03:48.400><c> iterate</c><00:03:48.720><c> through</c><00:03:48.959><c> the</c>

00:03:49.030 --> 00:03:49.040 align:start position:0%
and then we can just iterate through the
 

00:03:49.040 --> 00:03:51.030 align:start position:0%
and then we can just iterate through the
list<00:03:49.280><c> and</c><00:03:49.440><c> find</c><00:03:49.760><c> k</c><00:03:50.000><c> so</c><00:03:50.239><c> the</c><00:03:50.400><c> k</c><00:03:50.640><c> is</c><00:03:50.720><c> not</c><00:03:50.879><c> really</c>

00:03:51.030 --> 00:03:51.040 align:start position:0%
list and find k so the k is not really
 

00:03:51.040 --> 00:03:52.710 align:start position:0%
list and find k so the k is not really
going<00:03:51.200><c> to</c><00:03:51.360><c> change</c><00:03:51.680><c> the</c><00:03:51.760><c> time</c><00:03:51.920><c> complexity</c><00:03:52.480><c> the</c>

00:03:52.710 --> 00:03:52.720 align:start position:0%
going to change the time complexity the
 

00:03:52.720 --> 00:03:54.229 align:start position:0%
going to change the time complexity the
time<00:03:52.959><c> complexity</c><00:03:53.439><c> is</c><00:03:53.519><c> going</c><00:03:53.599><c> to</c><00:03:53.680><c> depend</c><00:03:54.159><c> on</c>

00:03:54.229 --> 00:03:54.239 align:start position:0%
time complexity is going to depend on
 

00:03:54.239 --> 00:03:57.429 align:start position:0%
time complexity is going to depend on
the<00:03:54.480><c> n</c><00:03:54.720><c> log</c><00:03:55.040><c> n</c><00:03:55.439><c> sorting</c><00:03:56.159><c> but</c><00:03:56.640><c> since</c><00:03:56.959><c> we're</c><00:03:57.200><c> only</c>

00:03:57.429 --> 00:03:57.439 align:start position:0%
the n log n sorting but since we're only
 

00:03:57.439 --> 00:03:59.589 align:start position:0%
the n log n sorting but since we're only
looking<00:03:57.760><c> for</c><00:03:58.080><c> k</c><00:03:58.480><c> points</c><00:03:58.879><c> right</c><00:03:59.200><c> we</c><00:03:59.360><c> don't</c>

00:03:59.589 --> 00:03:59.599 align:start position:0%
looking for k points right we don't
 

00:03:59.599 --> 00:04:01.110 align:start position:0%
looking for k points right we don't
actually<00:03:59.920><c> need</c><00:04:00.080><c> to</c><00:04:00.239><c> sort</c><00:04:00.480><c> the</c><00:04:00.640><c> entire</c><00:04:00.959><c> thing</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
actually need to sort the entire thing
 

00:04:01.120 --> 00:04:03.270 align:start position:0%
actually need to sort the entire thing
we<00:04:01.200><c> just</c><00:04:01.360><c> need</c><00:04:01.519><c> the</c><00:04:01.760><c> k</c><00:04:02.000><c> closest</c><00:04:02.560><c> points</c><00:04:02.959><c> so</c>

00:04:03.270 --> 00:04:03.280 align:start position:0%
we just need the k closest points so
 

00:04:03.280 --> 00:04:05.429 align:start position:0%
we just need the k closest points so
actually<00:04:03.920><c> this</c><00:04:04.159><c> problem</c><00:04:04.560><c> can</c><00:04:04.720><c> be</c>

00:04:05.429 --> 00:04:05.439 align:start position:0%
actually this problem can be
 

00:04:05.439 --> 00:04:08.149 align:start position:0%
actually this problem can be
reduced<00:04:05.920><c> or</c><00:04:06.159><c> slightly</c><00:04:06.720><c> simplified</c><00:04:07.680><c> if</c><00:04:07.920><c> you</c>

00:04:08.149 --> 00:04:08.159 align:start position:0%
reduced or slightly simplified if you
 

00:04:08.159 --> 00:04:09.990 align:start position:0%
reduced or slightly simplified if you
use<00:04:08.480><c> a</c><00:04:08.799><c> min</c><00:04:09.120><c> heap</c><00:04:09.439><c> and</c><00:04:09.519><c> that's</c><00:04:09.760><c> going</c><00:04:09.840><c> to</c><00:04:09.920><c> be</c>

00:04:09.990 --> 00:04:10.000 align:start position:0%
use a min heap and that's going to be
 

00:04:10.000 --> 00:04:12.390 align:start position:0%
use a min heap and that's going to be
the<00:04:10.159><c> solution</c><00:04:10.560><c> i'm</c><00:04:10.799><c> showing</c><00:04:11.040><c> you</c><00:04:11.439><c> if</c><00:04:11.680><c> you</c>

00:04:12.390 --> 00:04:12.400 align:start position:0%
the solution i'm showing you if you
 

00:04:12.400 --> 00:04:13.910 align:start position:0%
the solution i'm showing you if you
you<00:04:12.560><c> know</c><00:04:12.640><c> if</c><00:04:12.720><c> you</c><00:04:12.879><c> already</c><00:04:13.120><c> know</c><00:04:13.280><c> how</c><00:04:13.439><c> to</c><00:04:13.680><c> use</c>

00:04:13.910 --> 00:04:13.920 align:start position:0%
you know if you already know how to use
 

00:04:13.920 --> 00:04:15.429 align:start position:0%
you know if you already know how to use
a<00:04:14.080><c> min</c><00:04:14.319><c> heap</c><00:04:14.560><c> you</c><00:04:14.640><c> can</c><00:04:14.720><c> probably</c><00:04:14.959><c> skip</c><00:04:15.200><c> to</c><00:04:15.360><c> the</c>

00:04:15.429 --> 00:04:15.439 align:start position:0%
a min heap you can probably skip to the
 

00:04:15.439 --> 00:04:17.349 align:start position:0%
a min heap you can probably skip to the
coding<00:04:15.840><c> portion</c><00:04:16.320><c> or</c><00:04:16.639><c> you</c><00:04:16.720><c> know</c><00:04:16.959><c> solve</c><00:04:17.199><c> this</c>

00:04:17.349 --> 00:04:17.359 align:start position:0%
coding portion or you know solve this
 

00:04:17.359 --> 00:04:19.189 align:start position:0%
coding portion or you know solve this
problem<00:04:17.600><c> yourself</c><00:04:18.160><c> a</c><00:04:18.320><c> min</c><00:04:18.560><c> heap</c><00:04:18.880><c> is</c><00:04:18.959><c> a</c><00:04:19.040><c> good</c>

00:04:19.189 --> 00:04:19.199 align:start position:0%
problem yourself a min heap is a good
 

00:04:19.199 --> 00:04:20.710 align:start position:0%
problem yourself a min heap is a good
way<00:04:19.359><c> to</c><00:04:19.519><c> solve</c><00:04:19.759><c> this</c><00:04:19.919><c> problem</c><00:04:20.320><c> but</c><00:04:20.479><c> i'm</c><00:04:20.639><c> going</c>

00:04:20.710 --> 00:04:20.720 align:start position:0%
way to solve this problem but i'm going
 

00:04:20.720 --> 00:04:23.189 align:start position:0%
way to solve this problem but i'm going
to<00:04:20.799><c> analyze</c><00:04:21.280><c> it</c><00:04:21.440><c> for</c><00:04:21.600><c> you</c><00:04:21.840><c> right</c><00:04:22.079><c> now</c><00:04:22.720><c> so</c><00:04:22.960><c> let's</c>

00:04:23.189 --> 00:04:23.199 align:start position:0%
to analyze it for you right now so let's
 

00:04:23.199 --> 00:04:24.950 align:start position:0%
to analyze it for you right now so let's
still<00:04:23.440><c> take</c><00:04:23.680><c> the</c><00:04:23.840><c> simplified</c><00:04:24.400><c> example</c><00:04:24.800><c> so</c>

00:04:24.950 --> 00:04:24.960 align:start position:0%
still take the simplified example so
 

00:04:24.960 --> 00:04:26.230 align:start position:0%
still take the simplified example so
like<00:04:25.199><c> i</c><00:04:25.280><c> said</c><00:04:25.440><c> the</c><00:04:25.600><c> first</c><00:04:25.840><c> thing</c><00:04:26.000><c> we're</c><00:04:26.160><c> going</c>

00:04:26.230 --> 00:04:26.240 align:start position:0%
like i said the first thing we're going
 

00:04:26.240 --> 00:04:28.070 align:start position:0%
like i said the first thing we're going
to<00:04:26.320><c> do</c><00:04:26.479><c> for</c><00:04:26.639><c> every</c><00:04:26.880><c> point</c><00:04:27.120><c> so</c><00:04:27.280><c> we</c><00:04:27.440><c> have</c><00:04:27.759><c> the</c>

00:04:28.070 --> 00:04:28.080 align:start position:0%
to do for every point so we have the
 

00:04:28.080 --> 00:04:29.430 align:start position:0%
to do for every point so we have the
point<00:04:28.560><c> 1</c>

00:04:29.430 --> 00:04:29.440 align:start position:0%
point 1
 

00:04:29.440 --> 00:04:31.909 align:start position:0%
point 1
3<00:04:30.160><c> and</c><00:04:30.320><c> we</c><00:04:30.479><c> want</c><00:04:30.639><c> to</c><00:04:30.800><c> know</c><00:04:30.960><c> the</c><00:04:31.120><c> distance</c>

00:04:31.909 --> 00:04:31.919 align:start position:0%
3 and we want to know the distance
 

00:04:31.919 --> 00:04:33.990 align:start position:0%
3 and we want to know the distance
between<00:04:32.320><c> it</c><00:04:32.400><c> so</c><00:04:32.560><c> we</c><00:04:32.720><c> can</c><00:04:32.800><c> say</c><00:04:33.120><c> okay</c><00:04:33.360><c> 1</c><00:04:33.600><c> squared</c>

00:04:33.990 --> 00:04:34.000 align:start position:0%
between it so we can say okay 1 squared
 

00:04:34.000 --> 00:04:36.710 align:start position:0%
between it so we can say okay 1 squared
plus<00:04:34.720><c> 3</c><00:04:35.040><c> squared</c><00:04:35.600><c> which</c><00:04:35.840><c> is</c><00:04:35.919><c> going</c><00:04:36.000><c> to</c><00:04:36.080><c> give</c><00:04:36.320><c> us</c>

00:04:36.710 --> 00:04:36.720 align:start position:0%
plus 3 squared which is going to give us
 

00:04:36.720 --> 00:04:39.189 align:start position:0%
plus 3 squared which is going to give us
10<00:04:37.120><c> so</c><00:04:37.280><c> this</c><00:04:37.600><c> is</c><00:04:38.160><c> you</c><00:04:38.240><c> know</c><00:04:38.560><c> the</c><00:04:38.720><c> distance</c>

00:04:39.189 --> 00:04:39.199 align:start position:0%
10 so this is you know the distance
 

00:04:39.199 --> 00:04:40.550 align:start position:0%
10 so this is you know the distance
actually<00:04:39.520><c> isn't</c><00:04:39.759><c> 10</c><00:04:40.000><c> but</c><00:04:40.080><c> that's</c><00:04:40.320><c> going</c><00:04:40.400><c> to</c><00:04:40.479><c> be</c>

00:04:40.550 --> 00:04:40.560 align:start position:0%
actually isn't 10 but that's going to be
 

00:04:40.560 --> 00:04:42.150 align:start position:0%
actually isn't 10 but that's going to be
the<00:04:40.720><c> value</c><00:04:41.040><c> we</c><00:04:41.199><c> use</c><00:04:41.440><c> to</c><00:04:41.520><c> compare</c><00:04:41.840><c> we're</c><00:04:42.000><c> not</c>

00:04:42.150 --> 00:04:42.160 align:start position:0%
the value we use to compare we're not
 

00:04:42.160 --> 00:04:43.430 align:start position:0%
the value we use to compare we're not
going<00:04:42.240><c> to</c><00:04:42.320><c> take</c><00:04:42.479><c> the</c><00:04:42.639><c> square</c><00:04:42.880><c> root</c><00:04:43.120><c> because</c><00:04:43.360><c> we</c>

00:04:43.430 --> 00:04:43.440 align:start position:0%
going to take the square root because we
 

00:04:43.440 --> 00:04:45.749 align:start position:0%
going to take the square root because we
actually<00:04:43.759><c> don't</c><00:04:44.000><c> need</c><00:04:44.160><c> to</c><00:04:44.560><c> the</c><00:04:44.800><c> other</c><00:04:44.960><c> one</c>

00:04:45.749 --> 00:04:45.759 align:start position:0%
actually don't need to the other one
 

00:04:45.759 --> 00:04:47.030 align:start position:0%
actually don't need to the other one
negative<00:04:46.240><c> 2</c>

00:04:47.030 --> 00:04:47.040 align:start position:0%
negative 2
 

00:04:47.040 --> 00:04:49.749 align:start position:0%
negative 2
positive<00:04:47.600><c> 2</c><00:04:47.919><c> is</c><00:04:48.080><c> going</c><00:04:48.160><c> to</c><00:04:48.240><c> be</c><00:04:48.400><c> 2</c><00:04:48.639><c> squared</c><00:04:49.280><c> plus</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
positive 2 is going to be 2 squared plus
 

00:04:49.759 --> 00:04:51.990 align:start position:0%
positive 2 is going to be 2 squared plus
2<00:04:50.320><c> plus</c><00:04:50.560><c> negative</c><00:04:50.880><c> 2</c><00:04:51.040><c> squared</c><00:04:51.360><c> which</c><00:04:51.600><c> is</c><00:04:51.840><c> you</c>

00:04:51.990 --> 00:04:52.000 align:start position:0%
2 plus negative 2 squared which is you
 

00:04:52.000 --> 00:04:53.909 align:start position:0%
2 plus negative 2 squared which is you
know<00:04:52.240><c> just</c><00:04:52.400><c> going</c><00:04:52.560><c> to</c><00:04:52.720><c> be</c><00:04:52.960><c> 2</c><00:04:53.199><c> squared</c><00:04:53.600><c> as</c><00:04:53.680><c> well</c>

00:04:53.909 --> 00:04:53.919 align:start position:0%
know just going to be 2 squared as well
 

00:04:53.919 --> 00:04:54.629 align:start position:0%
know just going to be 2 squared as well
so

00:04:54.629 --> 00:04:54.639 align:start position:0%
so
 

00:04:54.639 --> 00:04:56.150 align:start position:0%
so
taking<00:04:54.960><c> both</c><00:04:55.199><c> of</c><00:04:55.280><c> these</c><00:04:55.520><c> together</c><00:04:55.919><c> is</c><00:04:56.080><c> going</c>

00:04:56.150 --> 00:04:56.160 align:start position:0%
taking both of these together is going
 

00:04:56.160 --> 00:04:56.950 align:start position:0%
taking both of these together is going
to<00:04:56.240><c> be</c>

00:04:56.950 --> 00:04:56.960 align:start position:0%
to be
 

00:04:56.960 --> 00:04:59.189 align:start position:0%
to be
a<00:04:57.199><c> distance</c><00:04:57.680><c> of</c><00:04:57.919><c> 8</c><00:04:58.400><c> so</c>

00:04:59.189 --> 00:04:59.199 align:start position:0%
a distance of 8 so
 

00:04:59.199 --> 00:05:01.590 align:start position:0%
a distance of 8 so
the<00:04:59.440><c> next</c><00:04:59.680><c> thing</c><00:04:59.919><c> we're</c><00:05:00.080><c> going</c><00:05:00.240><c> to</c><00:05:00.320><c> do</c><00:05:00.720><c> is</c>

00:05:01.590 --> 00:05:01.600 align:start position:0%
the next thing we're going to do is
 

00:05:01.600 --> 00:05:03.670 align:start position:0%
the next thing we're going to do is
take<00:05:01.919><c> these</c><00:05:02.400><c> right</c><00:05:02.639><c> notice</c><00:05:02.880><c> how</c><00:05:03.120><c> we</c><00:05:03.280><c> put</c><00:05:03.440><c> the</c>

00:05:03.670 --> 00:05:03.680 align:start position:0%
take these right notice how we put the
 

00:05:03.680 --> 00:05:06.150 align:start position:0%
take these right notice how we put the
distance<00:05:04.160><c> as</c><00:05:04.320><c> the</c><00:05:04.560><c> first</c><00:05:04.880><c> value</c><00:05:05.520><c> because</c><00:05:06.000><c> when</c>

00:05:06.150 --> 00:05:06.160 align:start position:0%
distance as the first value because when
 

00:05:06.160 --> 00:05:08.469 align:start position:0%
distance as the first value because when
we<00:05:06.320><c> put</c><00:05:06.479><c> this</c><00:05:06.720><c> in</c><00:05:06.880><c> a</c><00:05:07.039><c> min</c><00:05:07.360><c> heap</c><00:05:07.600><c> we</c><00:05:07.840><c> want</c><00:05:08.160><c> this</c>

00:05:08.469 --> 00:05:08.479 align:start position:0%
we put this in a min heap we want this
 

00:05:08.479 --> 00:05:11.510 align:start position:0%
we put this in a min heap we want this
to<00:05:08.639><c> be</c><00:05:08.800><c> the</c><00:05:09.039><c> value</c><00:05:09.759><c> that</c><00:05:10.080><c> we</c><00:05:10.400><c> order</c><00:05:10.800><c> it</c><00:05:10.880><c> by</c><00:05:11.120><c> so</c>

00:05:11.510 --> 00:05:11.520 align:start position:0%
to be the value that we order it by so
 

00:05:11.520 --> 00:05:12.870 align:start position:0%
to be the value that we order it by so
we're<00:05:11.680><c> going</c><00:05:11.759><c> to</c><00:05:11.919><c> take</c><00:05:12.240><c> this</c><00:05:12.479><c> and</c><00:05:12.639><c> we're</c><00:05:12.800><c> going</c>

00:05:12.870 --> 00:05:12.880 align:start position:0%
we're going to take this and we're going
 

00:05:12.880 --> 00:05:16.710 align:start position:0%
we're going to take this and we're going
to<00:05:13.039><c> run</c><00:05:13.440><c> the</c><00:05:13.759><c> function</c><00:05:14.320><c> heapify</c><00:05:15.360><c> which</c><00:05:15.840><c> is</c><00:05:16.160><c> not</c>

00:05:16.710 --> 00:05:16.720 align:start position:0%
to run the function heapify which is not
 

00:05:16.720 --> 00:05:20.710 align:start position:0%
to run the function heapify which is not
n<00:05:17.039><c> log</c><00:05:17.360><c> n</c><00:05:18.000><c> heapify</c><00:05:18.639><c> is</c><00:05:18.800><c> actually</c><00:05:19.360><c> a</c><00:05:19.919><c> linear</c>

00:05:20.710 --> 00:05:20.720 align:start position:0%
n log n heapify is actually a linear
 

00:05:20.720 --> 00:05:23.350 align:start position:0%
n log n heapify is actually a linear
time<00:05:21.120><c> algorithm</c><00:05:21.919><c> so</c><00:05:22.160><c> it'll</c><00:05:22.400><c> basically</c><00:05:23.039><c> take</c>

00:05:23.350 --> 00:05:23.360 align:start position:0%
time algorithm so it'll basically take
 

00:05:23.360 --> 00:05:25.430 align:start position:0%
time algorithm so it'll basically take
all<00:05:23.520><c> of</c><00:05:23.600><c> these</c><00:05:24.080><c> put</c><00:05:24.240><c> them</c><00:05:24.479><c> into</c><00:05:24.720><c> a</c><00:05:24.800><c> heap</c><00:05:25.120><c> in</c><00:05:25.280><c> o</c>

00:05:25.430 --> 00:05:25.440 align:start position:0%
all of these put them into a heap in o
 

00:05:25.440 --> 00:05:27.350 align:start position:0%
all of these put them into a heap in o
of<00:05:25.680><c> end</c><00:05:25.919><c> time</c><00:05:26.240><c> so</c><00:05:26.479><c> now</c>

00:05:27.350 --> 00:05:27.360 align:start position:0%
of end time so now
 

00:05:27.360 --> 00:05:28.870 align:start position:0%
of end time so now
you<00:05:27.520><c> know</c><00:05:27.600><c> let's</c><00:05:27.759><c> say</c><00:05:27.919><c> that</c><00:05:28.160><c> all</c><00:05:28.320><c> of</c><00:05:28.400><c> these</c><00:05:28.639><c> are</c>

00:05:28.870 --> 00:05:28.880 align:start position:0%
you know let's say that all of these are
 

00:05:28.880 --> 00:05:32.070 align:start position:0%
you know let's say that all of these are
in<00:05:29.280><c> our</c><00:05:29.919><c> min</c><00:05:30.240><c> heap</c><00:05:30.880><c> what</c><00:05:31.120><c> are</c><00:05:31.199><c> we</c><00:05:31.360><c> going</c><00:05:31.440><c> to</c><00:05:31.600><c> do</c>

00:05:32.070 --> 00:05:32.080 align:start position:0%
in our min heap what are we going to do
 

00:05:32.080 --> 00:05:35.029 align:start position:0%
in our min heap what are we going to do
we<00:05:32.240><c> want</c><00:05:32.400><c> to</c><00:05:32.639><c> pop</c><00:05:33.120><c> from</c><00:05:33.360><c> this</c><00:05:33.680><c> heap</c><00:05:34.240><c> k</c><00:05:34.639><c> times</c>

00:05:35.029 --> 00:05:35.039 align:start position:0%
we want to pop from this heap k times
 

00:05:35.039 --> 00:05:36.629 align:start position:0%
we want to pop from this heap k times
because<00:05:35.280><c> we</c><00:05:35.520><c> want</c><00:05:35.759><c> every</c><00:05:35.919><c> time</c><00:05:36.080><c> we</c><00:05:36.240><c> pop</c><00:05:36.479><c> we</c>

00:05:36.629 --> 00:05:36.639 align:start position:0%
because we want every time we pop we
 

00:05:36.639 --> 00:05:38.550 align:start position:0%
because we want every time we pop we
want<00:05:36.800><c> to</c><00:05:36.880><c> pop</c><00:05:37.039><c> the</c><00:05:37.199><c> closest</c><00:05:37.680><c> one</c><00:05:37.919><c> which</c><00:05:38.160><c> is</c><00:05:38.479><c> in</c>

00:05:38.550 --> 00:05:38.560 align:start position:0%
want to pop the closest one which is in
 

00:05:38.560 --> 00:05:40.310 align:start position:0%
want to pop the closest one which is in
this<00:05:38.720><c> case</c><00:05:38.960><c> going</c><00:05:39.120><c> to</c><00:05:39.199><c> be</c><00:05:39.360><c> this</c><00:05:39.600><c> point</c><00:05:39.919><c> right</c>

00:05:40.310 --> 00:05:40.320 align:start position:0%
this case going to be this point right
 

00:05:40.320 --> 00:05:42.469 align:start position:0%
this case going to be this point right
and<00:05:40.479><c> of</c><00:05:40.560><c> course</c><00:05:40.960><c> k</c><00:05:41.360><c> in</c><00:05:41.520><c> our</c><00:05:41.680><c> example</c><00:05:42.080><c> is</c><00:05:42.160><c> only</c>

00:05:42.469 --> 00:05:42.479 align:start position:0%
and of course k in our example is only
 

00:05:42.479 --> 00:05:44.390 align:start position:0%
and of course k in our example is only
one<00:05:42.720><c> but</c><00:05:42.960><c> obviously</c><00:05:43.360><c> this</c><00:05:43.600><c> solution</c><00:05:44.000><c> could</c><00:05:44.240><c> be</c>

00:05:44.390 --> 00:05:44.400 align:start position:0%
one but obviously this solution could be
 

00:05:44.400 --> 00:05:47.350 align:start position:0%
one but obviously this solution could be
generalized<00:05:45.280><c> to</c><00:05:45.520><c> if</c><00:05:45.680><c> k</c><00:05:45.919><c> was</c><00:05:46.160><c> two</c><00:05:46.720><c> three</c><00:05:47.120><c> or</c>

00:05:47.350 --> 00:05:47.360 align:start position:0%
generalized to if k was two three or
 

00:05:47.360 --> 00:05:49.590 align:start position:0%
generalized to if k was two three or
bigger<00:05:47.759><c> right</c><00:05:48.240><c> so</c><00:05:48.639><c> in</c><00:05:48.800><c> this</c><00:05:48.960><c> case</c><00:05:49.199><c> how</c><00:05:49.440><c> many</c>

00:05:49.590 --> 00:05:49.600 align:start position:0%
bigger right so in this case how many
 

00:05:49.600 --> 00:05:51.590 align:start position:0%
bigger right so in this case how many
times<00:05:49.919><c> are</c><00:05:50.000><c> we</c><00:05:50.080><c> gonna</c><00:05:50.400><c> pop</c><00:05:50.720><c> from</c><00:05:50.880><c> the</c><00:05:51.039><c> min</c><00:05:51.280><c> heap</c>

00:05:51.590 --> 00:05:51.600 align:start position:0%
times are we gonna pop from the min heap
 

00:05:51.600 --> 00:05:53.350 align:start position:0%
times are we gonna pop from the min heap
obviously<00:05:52.080><c> k</c><00:05:52.320><c> times</c><00:05:52.560><c> we</c><00:05:52.720><c> only</c><00:05:52.960><c> need</c><00:05:53.039><c> to</c><00:05:53.199><c> find</c>

00:05:53.350 --> 00:05:53.360 align:start position:0%
obviously k times we only need to find
 

00:05:53.360 --> 00:05:56.070 align:start position:0%
obviously k times we only need to find
the<00:05:53.520><c> k</c><00:05:53.919><c> closest</c><00:05:54.400><c> points</c><00:05:54.960><c> and</c><00:05:55.600><c> what's</c><00:05:55.919><c> the</c>

00:05:56.070 --> 00:05:56.080 align:start position:0%
the k closest points and what's the
 

00:05:56.080 --> 00:05:58.230 align:start position:0%
the k closest points and what's the
operation<00:05:56.800><c> for</c><00:05:57.120><c> for</c><00:05:57.360><c> popping</c><00:05:57.680><c> from</c><00:05:57.919><c> a</c><00:05:58.000><c> heap</c>

00:05:58.230 --> 00:05:58.240 align:start position:0%
operation for for popping from a heap
 

00:05:58.240 --> 00:06:00.309 align:start position:0%
operation for for popping from a heap
it's<00:05:58.400><c> going</c><00:05:58.479><c> to</c><00:05:58.560><c> be</c><00:05:59.199><c> log</c><00:05:59.520><c> the</c><00:05:59.759><c> size</c><00:06:00.080><c> of</c><00:06:00.240><c> the</c>

00:06:00.309 --> 00:06:00.319 align:start position:0%
it's going to be log the size of the
 

00:06:00.319 --> 00:06:02.550 align:start position:0%
it's going to be log the size of the
heap<00:06:00.639><c> which</c><00:06:00.800><c> is</c><00:06:01.039><c> worst</c><00:06:01.360><c> case</c><00:06:01.600><c> going</c><00:06:01.680><c> to</c><00:06:01.759><c> be</c><00:06:02.080><c> n</c>

00:06:02.550 --> 00:06:02.560 align:start position:0%
heap which is worst case going to be n
 

00:06:02.560 --> 00:06:04.469 align:start position:0%
heap which is worst case going to be n
so<00:06:03.039><c> this</c><00:06:03.280><c> time</c><00:06:03.520><c> complexity</c><00:06:04.080><c> is</c><00:06:04.240><c> actually</c>

00:06:04.469 --> 00:06:04.479 align:start position:0%
so this time complexity is actually
 

00:06:04.479 --> 00:06:05.670 align:start position:0%
so this time complexity is actually
going<00:06:04.639><c> to</c><00:06:04.720><c> be</c><00:06:04.800><c> a</c><00:06:04.880><c> little</c><00:06:05.039><c> bit</c><00:06:05.280><c> better</c><00:06:05.520><c> it's</c>

00:06:05.670 --> 00:06:05.680 align:start position:0%
going to be a little bit better it's
 

00:06:05.680 --> 00:06:08.070 align:start position:0%
going to be a little bit better it's
going<00:06:05.759><c> to</c><00:06:05.840><c> be</c><00:06:06.160><c> k</c><00:06:06.560><c> log</c><00:06:06.960><c> n</c><00:06:07.199><c> that's</c><00:06:07.440><c> why</c><00:06:07.680><c> a</c><00:06:07.840><c> min</c>

00:06:08.070 --> 00:06:08.080 align:start position:0%
going to be k log n that's why a min
 

00:06:08.080 --> 00:06:10.390 align:start position:0%
going to be k log n that's why a min
heap<00:06:08.400><c> solution</c><00:06:08.800><c> is</c><00:06:08.960><c> slightly</c><00:06:09.440><c> more</c><00:06:09.680><c> efficient</c>

00:06:10.390 --> 00:06:10.400 align:start position:0%
heap solution is slightly more efficient
 

00:06:10.400 --> 00:06:12.710 align:start position:0%
heap solution is slightly more efficient
because<00:06:10.639><c> if</c><00:06:10.800><c> k</c><00:06:11.199><c> is</c><00:06:11.360><c> relatively</c><00:06:12.000><c> small</c><00:06:12.560><c> it's</c>

00:06:12.710 --> 00:06:12.720 align:start position:0%
because if k is relatively small it's
 

00:06:12.720 --> 00:06:14.309 align:start position:0%
because if k is relatively small it's
going<00:06:12.800><c> to</c><00:06:12.880><c> be</c><00:06:13.039><c> a</c><00:06:13.120><c> lot</c><00:06:13.360><c> better</c><00:06:13.680><c> than</c><00:06:13.919><c> something</c>

00:06:14.309 --> 00:06:14.319 align:start position:0%
going to be a lot better than something
 

00:06:14.319 --> 00:06:18.070 align:start position:0%
going to be a lot better than something
like<00:06:14.880><c> n</c><00:06:15.440><c> log</c><00:06:15.919><c> n</c><00:06:16.240><c> right</c><00:06:16.880><c> this</c><00:06:17.120><c> is</c><00:06:17.360><c> much</c><00:06:17.680><c> smaller</c>

00:06:18.070 --> 00:06:18.080 align:start position:0%
like n log n right this is much smaller
 

00:06:18.080 --> 00:06:20.230 align:start position:0%
like n log n right this is much smaller
this<00:06:18.319><c> is</c><00:06:18.400><c> much</c><00:06:18.639><c> faster</c><00:06:19.199><c> so</c><00:06:19.759><c> that's</c><00:06:20.000><c> kind</c><00:06:20.160><c> of</c>

00:06:20.230 --> 00:06:20.240 align:start position:0%
this is much faster so that's kind of
 

00:06:20.240 --> 00:06:21.749 align:start position:0%
this is much faster so that's kind of
the<00:06:20.400><c> idea</c><00:06:20.800><c> at</c><00:06:20.880><c> this</c><00:06:21.039><c> point</c><00:06:21.199><c> you</c><00:06:21.360><c> probably</c><00:06:21.600><c> know</c>

00:06:21.749 --> 00:06:21.759 align:start position:0%
the idea at this point you probably know
 

00:06:21.759 --> 00:06:23.590 align:start position:0%
the idea at this point you probably know
how<00:06:21.840><c> to</c><00:06:21.919><c> code</c><00:06:22.160><c> it</c><00:06:22.319><c> up</c><00:06:22.479><c> but</c><00:06:22.720><c> you</c><00:06:22.800><c> know</c><00:06:23.039><c> just</c><00:06:23.199><c> to</c>

00:06:23.590 --> 00:06:23.600 align:start position:0%
how to code it up but you know just to
 

00:06:23.600 --> 00:06:26.230 align:start position:0%
how to code it up but you know just to
finish<00:06:23.919><c> the</c><00:06:24.000><c> example</c><00:06:24.639><c> k</c><00:06:24.960><c> is</c><00:06:25.120><c> one</c><00:06:25.520><c> we</c><00:06:25.759><c> pop</c><00:06:26.080><c> from</c>

00:06:26.230 --> 00:06:26.240 align:start position:0%
finish the example k is one we pop from
 

00:06:26.240 --> 00:06:28.390 align:start position:0%
finish the example k is one we pop from
this<00:06:26.479><c> one</c><00:06:26.720><c> time</c><00:06:27.199><c> are</c><00:06:27.280><c> we</c><00:06:27.440><c> gonna</c><00:06:27.600><c> pop</c><00:06:27.840><c> this</c><00:06:28.000><c> one</c>

00:06:28.390 --> 00:06:28.400 align:start position:0%
this one time are we gonna pop this one
 

00:06:28.400 --> 00:06:29.909 align:start position:0%
this one time are we gonna pop this one
or<00:06:28.639><c> this</c><00:06:28.800><c> one</c><00:06:29.039><c> obviously</c><00:06:29.360><c> this</c><00:06:29.520><c> one</c><00:06:29.680><c> has</c><00:06:29.840><c> a</c>

00:06:29.909 --> 00:06:29.919 align:start position:0%
or this one obviously this one has a
 

00:06:29.919 --> 00:06:32.469 align:start position:0%
or this one obviously this one has a
smaller<00:06:30.319><c> distance</c><00:06:30.960><c> so</c><00:06:31.120><c> we</c><00:06:31.360><c> pop</c><00:06:31.919><c> this</c><00:06:32.160><c> one</c><00:06:32.400><c> and</c>

00:06:32.469 --> 00:06:32.479 align:start position:0%
smaller distance so we pop this one and
 

00:06:32.479 --> 00:06:36.230 align:start position:0%
smaller distance so we pop this one and
then<00:06:32.960><c> we</c><00:06:33.120><c> take</c><00:06:33.360><c> it</c><00:06:33.759><c> append</c><00:06:34.319><c> it</c><00:06:34.479><c> to</c><00:06:34.720><c> our</c><00:06:35.360><c> result</c>

00:06:36.230 --> 00:06:36.240 align:start position:0%
then we take it append it to our result
 

00:06:36.240 --> 00:06:38.230 align:start position:0%
then we take it append it to our result
and<00:06:36.560><c> we</c><00:06:36.800><c> we</c><00:06:36.960><c> only</c><00:06:37.199><c> append</c><00:06:37.520><c> the</c><00:06:37.680><c> coordinates</c>

00:06:38.230 --> 00:06:38.240 align:start position:0%
and we we only append the coordinates
 

00:06:38.240 --> 00:06:39.909 align:start position:0%
and we we only append the coordinates
the<00:06:38.319><c> coordinates</c><00:06:38.800><c> were</c><00:06:38.960><c> negative</c><00:06:39.360><c> two</c>

00:06:39.909 --> 00:06:39.919 align:start position:0%
the coordinates were negative two
 

00:06:39.919 --> 00:06:41.590 align:start position:0%
the coordinates were negative two
positive<00:06:40.400><c> two</c><00:06:40.880><c> right</c><00:06:41.039><c> we</c><00:06:41.199><c> don't</c><00:06:41.360><c> actually</c>

00:06:41.590 --> 00:06:41.600 align:start position:0%
positive two right we don't actually
 

00:06:41.600 --> 00:06:43.110 align:start position:0%
positive two right we don't actually
have<00:06:41.680><c> to</c><00:06:41.759><c> append</c><00:06:42.080><c> the</c><00:06:42.160><c> distance</c><00:06:42.560><c> or</c><00:06:42.720><c> anything</c>

00:06:43.110 --> 00:06:43.120 align:start position:0%
have to append the distance or anything
 

00:06:43.120 --> 00:06:45.430 align:start position:0%
have to append the distance or anything
so<00:06:43.520><c> this</c><00:06:43.840><c> will</c><00:06:44.240><c> be</c><00:06:44.479><c> added</c><00:06:44.720><c> to</c><00:06:44.880><c> our</c><00:06:44.960><c> result</c><00:06:45.360><c> and</c>

00:06:45.430 --> 00:06:45.440 align:start position:0%
so this will be added to our result and
 

00:06:45.440 --> 00:06:47.189 align:start position:0%
so this will be added to our result and
then<00:06:45.520><c> we're</c><00:06:45.680><c> going</c><00:06:45.759><c> to</c><00:06:45.840><c> return</c><00:06:46.639><c> that</c><00:06:46.880><c> result</c>

00:06:47.189 --> 00:06:47.199 align:start position:0%
then we're going to return that result
 

00:06:47.199 --> 00:06:49.350 align:start position:0%
then we're going to return that result
right<00:06:47.360><c> we</c><00:06:47.440><c> only</c><00:06:47.600><c> need</c><00:06:47.759><c> to</c><00:06:47.919><c> pop</c><00:06:48.479><c> once</c>

00:06:49.350 --> 00:06:49.360 align:start position:0%
right we only need to pop once
 

00:06:49.360 --> 00:06:50.950 align:start position:0%
right we only need to pop once
and<00:06:49.520><c> we</c><00:06:49.680><c> can</c><00:06:49.759><c> return</c><00:06:50.080><c> that</c><00:06:50.319><c> you</c><00:06:50.400><c> can</c><00:06:50.479><c> see</c><00:06:50.720><c> up</c><00:06:50.880><c> in</c>

00:06:50.950 --> 00:06:50.960 align:start position:0%
and we can return that you can see up in
 

00:06:50.960 --> 00:06:53.110 align:start position:0%
and we can return that you can see up in
the<00:06:51.039><c> result</c><00:06:51.440><c> over</c><00:06:51.680><c> here</c><00:06:52.080><c> at</c><00:06:52.160><c> the</c><00:06:52.319><c> top</c><00:06:52.880><c> that's</c>

00:06:53.110 --> 00:06:53.120 align:start position:0%
the result over here at the top that's
 

00:06:53.120 --> 00:06:54.870 align:start position:0%
the result over here at the top that's
exactly<00:06:53.440><c> what</c><00:06:53.599><c> they</c><00:06:53.840><c> did</c><00:06:54.000><c> they</c><00:06:54.240><c> just</c><00:06:54.400><c> returned</c>

00:06:54.870 --> 00:06:54.880 align:start position:0%
exactly what they did they just returned
 

00:06:54.880 --> 00:06:56.870 align:start position:0%
exactly what they did they just returned
a<00:06:55.039><c> list</c><00:06:55.440><c> of</c><00:06:55.680><c> one</c><00:06:56.000><c> point</c>

00:06:56.870 --> 00:06:56.880 align:start position:0%
a list of one point
 

00:06:56.880 --> 00:06:59.029 align:start position:0%
a list of one point
so<00:06:57.039><c> that</c><00:06:57.360><c> is</c><00:06:57.759><c> the</c><00:06:57.919><c> main</c><00:06:58.160><c> solution</c><00:06:58.639><c> now</c><00:06:58.800><c> we</c><00:06:58.880><c> can</c>

00:06:59.029 --> 00:06:59.039 align:start position:0%
so that is the main solution now we can
 

00:06:59.039 --> 00:07:00.550 align:start position:0%
so that is the main solution now we can
go<00:06:59.120><c> ahead</c><00:06:59.280><c> and</c><00:06:59.440><c> code</c><00:06:59.680><c> it</c><00:06:59.840><c> up</c><00:07:00.000><c> so</c><00:07:00.160><c> now</c><00:07:00.319><c> let's</c>

00:07:00.550 --> 00:07:00.560 align:start position:0%
go ahead and code it up so now let's
 

00:07:00.560 --> 00:07:02.390 align:start position:0%
go ahead and code it up so now let's
actually<00:07:00.880><c> code</c><00:07:01.120><c> it</c><00:07:01.280><c> up</c><00:07:01.520><c> and</c><00:07:01.840><c> like</c><00:07:02.080><c> i</c><00:07:02.160><c> said</c>

00:07:02.390 --> 00:07:02.400 align:start position:0%
actually code it up and like i said
 

00:07:02.400 --> 00:07:04.469 align:start position:0%
actually code it up and like i said
we're<00:07:02.560><c> going</c><00:07:02.639><c> to</c><00:07:02.720><c> be</c><00:07:02.800><c> using</c><00:07:03.120><c> a</c><00:07:03.280><c> min</c><00:07:03.599><c> heap</c><00:07:04.080><c> so</c>

00:07:04.469 --> 00:07:04.479 align:start position:0%
we're going to be using a min heap so
 

00:07:04.479 --> 00:07:06.629 align:start position:0%
we're going to be using a min heap so
initially<00:07:04.960><c> a</c><00:07:05.039><c> min</c><00:07:05.280><c> heap</c><00:07:05.520><c> is</c><00:07:05.599><c> just</c><00:07:05.840><c> an</c><00:07:06.000><c> array</c><00:07:06.479><c> or</c>

00:07:06.629 --> 00:07:06.639 align:start position:0%
initially a min heap is just an array or
 

00:07:06.639 --> 00:07:08.950 align:start position:0%
initially a min heap is just an array or
a<00:07:06.800><c> list</c><00:07:07.199><c> in</c><00:07:07.360><c> python</c><00:07:08.080><c> so</c><00:07:08.319><c> what</c><00:07:08.479><c> we</c><00:07:08.560><c> want</c><00:07:08.720><c> to</c><00:07:08.800><c> do</c>

00:07:08.950 --> 00:07:08.960 align:start position:0%
a list in python so what we want to do
 

00:07:08.960 --> 00:07:10.150 align:start position:0%
a list in python so what we want to do
is<00:07:09.039><c> we</c><00:07:09.199><c> actually</c><00:07:09.440><c> want</c><00:07:09.520><c> to</c><00:07:09.599><c> go</c><00:07:09.759><c> through</c><00:07:09.919><c> every</c>

00:07:10.150 --> 00:07:10.160 align:start position:0%
is we actually want to go through every
 

00:07:10.160 --> 00:07:12.550 align:start position:0%
is we actually want to go through every
pair<00:07:10.400><c> of</c><00:07:10.560><c> points</c><00:07:10.880><c> every</c><00:07:11.199><c> x</c><00:07:11.440><c> y</c><00:07:11.759><c> in</c><00:07:11.919><c> the</c><00:07:12.160><c> input</c>

00:07:12.550 --> 00:07:12.560 align:start position:0%
pair of points every x y in the input
 

00:07:12.560 --> 00:07:15.830 align:start position:0%
pair of points every x y in the input
list<00:07:13.280><c> points</c><00:07:14.000><c> and</c><00:07:14.400><c> we</c><00:07:14.639><c> want</c><00:07:14.880><c> to</c><00:07:15.120><c> go</c><00:07:15.280><c> ahead</c><00:07:15.599><c> and</c>

00:07:15.830 --> 00:07:15.840 align:start position:0%
list points and we want to go ahead and
 

00:07:15.840 --> 00:07:18.469 align:start position:0%
list points and we want to go ahead and
actually<00:07:16.160><c> compute</c><00:07:16.960><c> the</c><00:07:17.280><c> distance</c><00:07:18.000><c> so</c><00:07:18.160><c> how</c><00:07:18.319><c> can</c>

00:07:18.469 --> 00:07:18.479 align:start position:0%
actually compute the distance so how can
 

00:07:18.479 --> 00:07:20.230 align:start position:0%
actually compute the distance so how can
we<00:07:18.639><c> compute</c><00:07:18.960><c> the</c><00:07:19.199><c> distance</c><00:07:19.599><c> for</c><00:07:19.759><c> every</c><00:07:20.000><c> point</c>

00:07:20.230 --> 00:07:20.240 align:start position:0%
we compute the distance for every point
 

00:07:20.240 --> 00:07:21.830 align:start position:0%
we compute the distance for every point
well<00:07:20.400><c> it's</c><00:07:20.639><c> pretty</c><00:07:20.800><c> much</c><00:07:21.039><c> just</c><00:07:21.199><c> going</c><00:07:21.280><c> to</c><00:07:21.360><c> be</c><00:07:21.599><c> x</c>

00:07:21.830 --> 00:07:21.840 align:start position:0%
well it's pretty much just going to be x
 

00:07:21.840 --> 00:07:24.710 align:start position:0%
well it's pretty much just going to be x
squared<00:07:22.240><c> plus</c><00:07:22.560><c> y</c><00:07:22.800><c> squared</c><00:07:23.199><c> right</c><00:07:23.759><c> so</c><00:07:24.400><c> we</c><00:07:24.560><c> can</c>

00:07:24.710 --> 00:07:24.720 align:start position:0%
squared plus y squared right so we can
 

00:07:24.720 --> 00:07:27.510 align:start position:0%
squared plus y squared right so we can
take<00:07:25.280><c> x</c><00:07:26.000><c> in</c><00:07:26.160><c> python</c><00:07:26.560><c> you</c><00:07:26.720><c> can</c><00:07:26.800><c> take</c><00:07:27.120><c> x</c><00:07:27.280><c> to</c><00:07:27.440><c> the</c>

00:07:27.510 --> 00:07:27.520 align:start position:0%
take x in python you can take x to the
 

00:07:27.520 --> 00:07:31.589 align:start position:0%
take x in python you can take x to the
power<00:07:27.759><c> of</c><00:07:27.919><c> 2</c><00:07:28.160><c> like</c><00:07:28.400><c> this</c><00:07:29.039><c> plus</c><00:07:30.240><c> y</c><00:07:30.800><c> to</c><00:07:30.960><c> the</c><00:07:31.120><c> power</c>

00:07:31.589 --> 00:07:31.599 align:start position:0%
power of 2 like this plus y to the power
 

00:07:31.599 --> 00:07:34.150 align:start position:0%
power of 2 like this plus y to the power
of<00:07:31.840><c> 2</c><00:07:32.160><c> like</c><00:07:32.479><c> this</c><00:07:32.800><c> and</c><00:07:33.039><c> add</c><00:07:33.199><c> those</c><00:07:33.440><c> together</c><00:07:33.840><c> we</c>

00:07:34.150 --> 00:07:34.160 align:start position:0%
of 2 like this and add those together we
 

00:07:34.160 --> 00:07:35.830 align:start position:0%
of 2 like this and add those together we
just<00:07:34.319><c> won't</c><00:07:34.560><c> take</c><00:07:34.720><c> the</c><00:07:34.880><c> square</c><00:07:35.199><c> root</c><00:07:35.520><c> because</c>

00:07:35.830 --> 00:07:35.840 align:start position:0%
just won't take the square root because
 

00:07:35.840 --> 00:07:37.189 align:start position:0%
just won't take the square root because
we're<00:07:36.000><c> lazy</c><00:07:36.400><c> and</c><00:07:36.479><c> we</c><00:07:36.639><c> know</c><00:07:36.800><c> that</c><00:07:36.880><c> we</c><00:07:37.039><c> don't</c>

00:07:37.189 --> 00:07:37.199 align:start position:0%
we're lazy and we know that we don't
 

00:07:37.199 --> 00:07:39.029 align:start position:0%
we're lazy and we know that we don't
actually<00:07:37.520><c> need</c><00:07:37.680><c> to</c><00:07:37.840><c> take</c><00:07:38.000><c> the</c><00:07:38.160><c> square</c><00:07:38.479><c> root</c><00:07:38.880><c> so</c>

00:07:39.029 --> 00:07:39.039 align:start position:0%
actually need to take the square root so
 

00:07:39.039 --> 00:07:42.550 align:start position:0%
actually need to take the square root so
then<00:07:39.599><c> to</c><00:07:39.840><c> our</c><00:07:40.080><c> points</c><00:07:40.960><c> or</c><00:07:41.440><c> rather</c><00:07:41.759><c> to</c><00:07:42.000><c> our</c><00:07:42.240><c> min</c>

00:07:42.550 --> 00:07:42.560 align:start position:0%
then to our points or rather to our min
 

00:07:42.560 --> 00:07:45.990 align:start position:0%
then to our points or rather to our min
heap<00:07:43.039><c> we</c><00:07:43.199><c> can</c><00:07:43.599><c> append</c><00:07:44.400><c> to</c><00:07:44.639><c> it</c><00:07:44.960><c> this</c><00:07:45.440><c> uh</c><00:07:45.680><c> point</c>

00:07:45.990 --> 00:07:46.000 align:start position:0%
heap we can append to it this uh point
 

00:07:46.000 --> 00:07:48.150 align:start position:0%
heap we can append to it this uh point
that<00:07:46.160><c> we</c><00:07:46.319><c> just</c><00:07:46.639><c> calculated</c><00:07:47.280><c> right</c><00:07:47.520><c> so</c><00:07:47.919><c> we'll</c>

00:07:48.150 --> 00:07:48.160 align:start position:0%
that we just calculated right so we'll
 

00:07:48.160 --> 00:07:49.749 align:start position:0%
that we just calculated right so we'll
append<00:07:48.479><c> the</c><00:07:48.560><c> three</c><00:07:48.800><c> values</c><00:07:49.199><c> we</c><00:07:49.360><c> talked</c><00:07:49.520><c> about</c>

00:07:49.749 --> 00:07:49.759 align:start position:0%
append the three values we talked about
 

00:07:49.759 --> 00:07:51.350 align:start position:0%
append the three values we talked about
the<00:07:49.919><c> distance</c><00:07:50.319><c> is</c><00:07:50.400><c> gonna</c><00:07:50.639><c> go</c><00:07:50.800><c> first</c><00:07:51.120><c> because</c>

00:07:51.350 --> 00:07:51.360 align:start position:0%
the distance is gonna go first because
 

00:07:51.360 --> 00:07:53.670 align:start position:0%
the distance is gonna go first because
that's<00:07:51.680><c> the</c><00:07:51.919><c> key</c><00:07:52.160><c> value</c><00:07:52.560><c> for</c><00:07:52.800><c> our</c><00:07:52.960><c> min</c><00:07:53.280><c> heap</c>

00:07:53.670 --> 00:07:53.680 align:start position:0%
that's the key value for our min heap
 

00:07:53.680 --> 00:07:56.070 align:start position:0%
that's the key value for our min heap
python<00:07:54.160><c> will</c><00:07:54.319><c> use</c><00:07:54.560><c> that</c><00:07:55.039><c> the</c><00:07:55.199><c> first</c><00:07:55.520><c> value</c><00:07:55.919><c> by</c>

00:07:56.070 --> 00:07:56.080 align:start position:0%
python will use that the first value by
 

00:07:56.080 --> 00:07:57.830 align:start position:0%
python will use that the first value by
default<00:07:56.639><c> and</c><00:07:56.879><c> we're</c><00:07:57.039><c> going</c><00:07:57.120><c> to</c><00:07:57.199><c> also</c><00:07:57.520><c> append</c>

00:07:57.830 --> 00:07:57.840 align:start position:0%
default and we're going to also append
 

00:07:57.840 --> 00:08:00.469 align:start position:0%
default and we're going to also append
the<00:07:58.080><c> coordinates</c><00:07:58.960><c> of</c><00:07:59.199><c> this</c><00:07:59.520><c> point</c><00:07:59.840><c> as</c><00:08:00.000><c> well</c>

00:08:00.469 --> 00:08:00.479 align:start position:0%
the coordinates of this point as well
 

00:08:00.479 --> 00:08:02.790 align:start position:0%
the coordinates of this point as well
and<00:08:00.800><c> now</c><00:08:00.960><c> that</c><00:08:01.120><c> we</c><00:08:01.199><c> have</c><00:08:01.440><c> all</c><00:08:01.759><c> those</c><00:08:02.000><c> points</c><00:08:02.400><c> in</c>

00:08:02.790 --> 00:08:02.800 align:start position:0%
and now that we have all those points in
 

00:08:02.800 --> 00:08:05.189 align:start position:0%
and now that we have all those points in
a<00:08:03.039><c> list</c><00:08:03.440><c> obviously</c><00:08:03.919><c> that</c><00:08:04.240><c> this</c><00:08:04.560><c> operation</c><00:08:05.039><c> was</c>

00:08:05.189 --> 00:08:05.199 align:start position:0%
a list obviously that this operation was
 

00:08:05.199 --> 00:08:07.110 align:start position:0%
a list obviously that this operation was
a<00:08:05.280><c> linear</c><00:08:05.680><c> time</c><00:08:06.000><c> operation</c><00:08:06.400><c> now</c><00:08:06.560><c> we're</c><00:08:06.800><c> also</c>

00:08:07.110 --> 00:08:07.120 align:start position:0%
a linear time operation now we're also
 

00:08:07.120 --> 00:08:09.430 align:start position:0%
a linear time operation now we're also
going<00:08:07.199><c> to</c><00:08:07.360><c> do</c><00:08:07.520><c> a</c><00:08:07.680><c> linear</c><00:08:08.080><c> time</c><00:08:08.400><c> operation</c><00:08:09.280><c> in</c>

00:08:09.430 --> 00:08:09.440 align:start position:0%
going to do a linear time operation in
 

00:08:09.440 --> 00:08:11.990 align:start position:0%
going to do a linear time operation in
python<00:08:09.919><c> we</c><00:08:10.000><c> can</c><00:08:10.319><c> turn</c><00:08:10.560><c> that</c><00:08:10.879><c> list</c><00:08:11.199><c> into</c><00:08:11.440><c> a</c><00:08:11.520><c> heap</c>

00:08:11.990 --> 00:08:12.000 align:start position:0%
python we can turn that list into a heap
 

00:08:12.000 --> 00:08:12.990 align:start position:0%
python we can turn that list into a heap
like<00:08:12.319><c> this</c>

00:08:12.990 --> 00:08:13.000 align:start position:0%
like this
 

00:08:13.000 --> 00:08:16.790 align:start position:0%
like this
heapq.heapify<00:08:14.240><c> that</c><00:08:14.720><c> list</c><00:08:15.280><c> so</c><00:08:15.520><c> it'll</c><00:08:15.919><c> reorder</c>

00:08:16.790 --> 00:08:16.800 align:start position:0%
heapq.heapify that list so it'll reorder
 

00:08:16.800 --> 00:08:19.670 align:start position:0%
heapq.heapify that list so it'll reorder
the<00:08:17.280><c> list</c><00:08:17.599><c> to</c><00:08:17.759><c> make</c><00:08:18.000><c> sure</c><00:08:18.639><c> that</c><00:08:18.879><c> it</c><00:08:19.120><c> is</c><00:08:19.360><c> in</c><00:08:19.520><c> the</c>

00:08:19.670 --> 00:08:19.680 align:start position:0%
the list to make sure that it is in the
 

00:08:19.680 --> 00:08:22.150 align:start position:0%
the list to make sure that it is in the
structure<00:08:20.240><c> of</c><00:08:20.400><c> a</c><00:08:20.560><c> heap</c><00:08:21.120><c> and</c><00:08:21.360><c> we</c><00:08:21.520><c> also</c><00:08:21.840><c> want</c><00:08:22.000><c> to</c>

00:08:22.150 --> 00:08:22.160 align:start position:0%
structure of a heap and we also want to
 

00:08:22.160 --> 00:08:24.390 align:start position:0%
structure of a heap and we also want to
have<00:08:22.400><c> a</c><00:08:22.639><c> list</c><00:08:22.960><c> for</c><00:08:23.199><c> the</c><00:08:23.440><c> result</c><00:08:24.000><c> right</c><00:08:24.160><c> we're</c>

00:08:24.390 --> 00:08:24.400 align:start position:0%
have a list for the result right we're
 

00:08:24.400 --> 00:08:27.110 align:start position:0%
have a list for the result right we're
going<00:08:24.479><c> to</c><00:08:24.639><c> pop</c><00:08:24.879><c> k</c><00:08:25.199><c> times</c><00:08:25.759><c> so</c><00:08:26.160><c> while</c><00:08:26.560><c> k</c><00:08:26.879><c> is</c>

00:08:27.110 --> 00:08:27.120 align:start position:0%
going to pop k times so while k is
 

00:08:27.120 --> 00:08:28.869 align:start position:0%
going to pop k times so while k is
greater<00:08:27.440><c> than</c><00:08:27.680><c> zero</c><00:08:28.240><c> we're</c><00:08:28.479><c> going</c><00:08:28.560><c> to</c><00:08:28.639><c> keep</c>

00:08:28.869 --> 00:08:28.879 align:start position:0%
greater than zero we're going to keep
 

00:08:28.879 --> 00:08:30.309 align:start position:0%
greater than zero we're going to keep
popping<00:08:29.199><c> from</c><00:08:29.440><c> our</c><00:08:29.599><c> min</c><00:08:29.840><c> heap</c><00:08:30.000><c> we're</c><00:08:30.160><c> gonna</c>

00:08:30.309 --> 00:08:30.319 align:start position:0%
popping from our min heap we're gonna
 

00:08:30.319 --> 00:08:32.790 align:start position:0%
popping from our min heap we're gonna
say<00:08:30.479><c> heap</c><00:08:31.039><c> q</c><00:08:31.360><c> dot</c><00:08:32.000><c> heap</c>

00:08:32.790 --> 00:08:32.800 align:start position:0%
say heap q dot heap
 

00:08:32.800 --> 00:08:35.909 align:start position:0%
say heap q dot heap
pop<00:08:33.440><c> from</c><00:08:33.680><c> the</c><00:08:33.839><c> min</c><00:08:34.080><c> heap</c><00:08:34.719><c> and</c><00:08:34.959><c> whatever</c><00:08:35.440><c> value</c>

00:08:35.909 --> 00:08:35.919 align:start position:0%
pop from the min heap and whatever value
 

00:08:35.919 --> 00:08:38.149 align:start position:0%
pop from the min heap and whatever value
is<00:08:36.159><c> popped</c><00:08:36.640><c> we're</c><00:08:36.800><c> gonna</c><00:08:37.120><c> append</c><00:08:37.599><c> it</c><00:08:37.760><c> to</c><00:08:38.000><c> the</c>

00:08:38.149 --> 00:08:38.159 align:start position:0%
is popped we're gonna append it to the
 

00:08:38.159 --> 00:08:40.389 align:start position:0%
is popped we're gonna append it to the
result<00:08:38.719><c> just</c><00:08:38.959><c> like</c><00:08:39.279><c> this</c><00:08:39.760><c> but</c><00:08:39.919><c> actually</c><00:08:40.240><c> i</c>

00:08:40.389 --> 00:08:40.399 align:start position:0%
result just like this but actually i
 

00:08:40.399 --> 00:08:41.829 align:start position:0%
result just like this but actually i
just<00:08:40.560><c> realized</c><00:08:40.959><c> we're</c><00:08:41.120><c> actually</c><00:08:41.440><c> popping</c>

00:08:41.829 --> 00:08:41.839 align:start position:0%
just realized we're actually popping
 

00:08:41.839 --> 00:08:44.710 align:start position:0%
just realized we're actually popping
three<00:08:42.159><c> values</c><00:08:42.880><c> from</c><00:08:43.120><c> it</c><00:08:43.279><c> so</c><00:08:43.760><c> before</c><00:08:44.159><c> we</c><00:08:44.399><c> append</c>

00:08:44.710 --> 00:08:44.720 align:start position:0%
three values from it so before we append
 

00:08:44.720 --> 00:08:46.230 align:start position:0%
three values from it so before we append
it<00:08:44.880><c> let's</c><00:08:45.120><c> get</c><00:08:45.279><c> the</c><00:08:45.440><c> three</c><00:08:45.760><c> values</c><00:08:46.080><c> we're</c>

00:08:46.230 --> 00:08:46.240 align:start position:0%
it let's get the three values we're
 

00:08:46.240 --> 00:08:48.310 align:start position:0%
it let's get the three values we're
popping<00:08:46.640><c> the</c><00:08:46.800><c> distance</c><00:08:47.680><c> the</c><00:08:48.080><c> the</c>

00:08:48.310 --> 00:08:48.320 align:start position:0%
popping the distance the the
 

00:08:48.320 --> 00:08:50.870 align:start position:0%
popping the distance the the
x-coordinate<00:08:49.040><c> and</c><00:08:49.120><c> the</c><00:08:49.279><c> y-coordinate</c><00:08:50.399><c> from</c>

00:08:50.870 --> 00:08:50.880 align:start position:0%
x-coordinate and the y-coordinate from
 

00:08:50.880 --> 00:08:53.269 align:start position:0%
x-coordinate and the y-coordinate from
the<00:08:51.120><c> min</c><00:08:51.360><c> heap</c><00:08:51.760><c> and</c><00:08:52.160><c> once</c><00:08:52.399><c> we</c><00:08:52.560><c> pop</c><00:08:52.800><c> those</c><00:08:53.040><c> three</c>

00:08:53.269 --> 00:08:53.279 align:start position:0%
the min heap and once we pop those three
 

00:08:53.279 --> 00:08:55.670 align:start position:0%
the min heap and once we pop those three
values<00:08:53.839><c> to</c><00:08:54.080><c> our</c><00:08:54.240><c> result</c><00:08:54.720><c> itself</c><00:08:55.120><c> we're</c><00:08:55.360><c> only</c>

00:08:55.670 --> 00:08:55.680 align:start position:0%
values to our result itself we're only
 

00:08:55.680 --> 00:08:58.230 align:start position:0%
values to our result itself we're only
appending<00:08:56.240><c> two</c><00:08:56.560><c> values</c><00:08:57.279><c> the</c><00:08:57.600><c> coordinates</c><00:08:58.160><c> the</c>

00:08:58.230 --> 00:08:58.240 align:start position:0%
appending two values the coordinates the
 

00:08:58.240 --> 00:09:00.389 align:start position:0%
appending two values the coordinates the
x<00:08:58.480><c> and</c><00:08:58.640><c> y</c><00:08:58.880><c> coordinates</c><00:08:59.760><c> and</c><00:08:59.920><c> we're</c><00:09:00.080><c> gonna</c><00:09:00.240><c> do</c>

00:09:00.389 --> 00:09:00.399 align:start position:0%
x and y coordinates and we're gonna do
 

00:09:00.399 --> 00:09:01.990 align:start position:0%
x and y coordinates and we're gonna do
that<00:09:00.560><c> k</c><00:09:00.800><c> time</c><00:09:01.040><c> so</c><00:09:01.200><c> let's</c><00:09:01.440><c> make</c><00:09:01.600><c> sure</c><00:09:01.839><c> to</c>

00:09:01.990 --> 00:09:02.000 align:start position:0%
that k time so let's make sure to
 

00:09:02.000 --> 00:09:05.110 align:start position:0%
that k time so let's make sure to
decrement<00:09:02.560><c> our</c><00:09:02.720><c> k</c><00:09:02.959><c> value</c><00:09:03.760><c> and</c><00:09:04.000><c> so</c><00:09:04.240><c> once</c><00:09:04.560><c> we've</c>

00:09:05.110 --> 00:09:05.120 align:start position:0%
decrement our k value and so once we've
 

00:09:05.120 --> 00:09:07.590 align:start position:0%
decrement our k value and so once we've
popped<00:09:05.360><c> from</c><00:09:05.600><c> it</c><00:09:05.680><c> k</c><00:09:06.000><c> times</c><00:09:06.480><c> we</c><00:09:06.640><c> can</c><00:09:06.880><c> go</c><00:09:07.040><c> ahead</c>

00:09:07.590 --> 00:09:07.600 align:start position:0%
popped from it k times we can go ahead
 

00:09:07.600 --> 00:09:10.150 align:start position:0%
popped from it k times we can go ahead
and<00:09:07.920><c> return</c><00:09:08.720><c> the</c><00:09:08.880><c> result</c><00:09:09.279><c> that</c><00:09:09.440><c> we</c><00:09:09.600><c> just</c>

00:09:10.150 --> 00:09:10.160 align:start position:0%
and return the result that we just
 

00:09:10.160 --> 00:09:12.470 align:start position:0%
and return the result that we just
created<00:09:11.040><c> and</c><00:09:11.200><c> as</c><00:09:11.440><c> you</c><00:09:11.519><c> can</c><00:09:11.680><c> see</c><00:09:11.839><c> the</c><00:09:12.000><c> solution</c>

00:09:12.470 --> 00:09:12.480 align:start position:0%
created and as you can see the solution
 

00:09:12.480 --> 00:09:14.870 align:start position:0%
created and as you can see the solution
works<00:09:12.880><c> and</c><00:09:13.040><c> it</c><00:09:13.200><c> is</c><00:09:13.440><c> pretty</c><00:09:13.760><c> efficient</c><00:09:14.560><c> i</c><00:09:14.640><c> think</c>

00:09:14.870 --> 00:09:14.880 align:start position:0%
works and it is pretty efficient i think
 

00:09:14.880 --> 00:09:16.870 align:start position:0%
works and it is pretty efficient i think
a<00:09:15.040><c> sorting</c><00:09:15.440><c> approach</c><00:09:15.839><c> would</c><00:09:16.000><c> be</c><00:09:16.240><c> about</c><00:09:16.640><c> as</c>

00:09:16.870 --> 00:09:16.880 align:start position:0%
a sorting approach would be about as
 

00:09:16.880 --> 00:09:18.710 align:start position:0%
a sorting approach would be about as
efficient<00:09:17.200><c> but</c><00:09:17.360><c> this</c><00:09:17.600><c> is</c><00:09:17.760><c> slightly</c><00:09:18.240><c> better</c><00:09:18.640><c> in</c>

00:09:18.710 --> 00:09:18.720 align:start position:0%
efficient but this is slightly better in
 

00:09:18.720 --> 00:09:20.310 align:start position:0%
efficient but this is slightly better in
some<00:09:18.959><c> cases</c><00:09:19.360><c> so</c><00:09:19.519><c> i</c><00:09:19.600><c> hope</c><00:09:19.839><c> that</c><00:09:19.920><c> this</c><00:09:20.160><c> was</c>

00:09:20.310 --> 00:09:20.320 align:start position:0%
some cases so i hope that this was
 

00:09:20.320 --> 00:09:22.470 align:start position:0%
some cases so i hope that this was
helpful<00:09:20.880><c> if</c><00:09:21.120><c> it</c><00:09:21.279><c> was</c><00:09:21.760><c> please</c><00:09:22.080><c> like</c><00:09:22.320><c> and</c>

00:09:22.470 --> 00:09:22.480 align:start position:0%
helpful if it was please like and
 

00:09:22.480 --> 00:09:24.790 align:start position:0%
helpful if it was please like and
subscribe<00:09:23.040><c> it</c><00:09:23.200><c> supports</c><00:09:23.600><c> the</c><00:09:23.760><c> channel</c><00:09:24.240><c> a</c><00:09:24.399><c> lot</c>

00:09:24.790 --> 00:09:24.800 align:start position:0%
subscribe it supports the channel a lot
 

00:09:24.800 --> 00:09:26.949 align:start position:0%
subscribe it supports the channel a lot
and<00:09:24.959><c> i'll</c><00:09:25.120><c> hopefully</c><00:09:25.839><c> see</c><00:09:26.000><c> you</c><00:09:26.160><c> pretty</c><00:09:26.480><c> soon</c>

00:09:26.949 --> 00:09:26.959 align:start position:0%
and i'll hopefully see you pretty soon
 

00:09:26.959 --> 00:09:29.920 align:start position:0%
and i'll hopefully see you pretty soon
thanks<00:09:27.200><c> for</c><00:09:27.440><c> watching</c>

