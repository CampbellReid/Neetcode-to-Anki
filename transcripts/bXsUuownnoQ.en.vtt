WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.750 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.199><c> back</c><00:00:01.439><c> and</c><00:00:01.520><c> let's</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.760 --> 00:00:03.750 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.000><c> some</c><00:00:02.159><c> more</c><00:00:02.399><c> neat</c><00:00:02.720><c> code</c><00:00:02.960><c> today</c><00:00:03.280><c> so</c><00:00:03.439><c> today</c>

00:00:03.750 --> 00:00:03.760 align:start position:0%
write some more neat code today so today
 

00:00:03.760 --> 00:00:05.030 align:start position:0%
write some more neat code today so today
let's<00:00:04.000><c> solve</c><00:00:04.319><c> a</c><00:00:04.480><c> problem</c>

00:00:05.030 --> 00:00:05.040 align:start position:0%
let's solve a problem
 

00:00:05.040 --> 00:00:08.230 align:start position:0%
let's solve a problem
graph<00:00:05.680><c> valid</c><00:00:06.240><c> tree</c><00:00:06.799><c> so</c><00:00:07.040><c> this</c><00:00:07.359><c> is</c><00:00:07.520><c> another</c><00:00:08.000><c> leak</c>

00:00:08.230 --> 00:00:08.240 align:start position:0%
graph valid tree so this is another leak
 

00:00:08.240 --> 00:00:10.070 align:start position:0%
graph valid tree so this is another leak
code<00:00:08.559><c> premium</c><00:00:09.040><c> problem</c><00:00:09.440><c> so</c><00:00:09.599><c> we</c><00:00:09.760><c> are</c><00:00:09.920><c> going</c><00:00:10.000><c> to</c>

00:00:10.070 --> 00:00:10.080 align:start position:0%
code premium problem so we are going to
 

00:00:10.080 --> 00:00:10.950 align:start position:0%
code premium problem so we are going to
be<00:00:10.240><c> solving</c><00:00:10.639><c> it</c>

00:00:10.950 --> 00:00:10.960 align:start position:0%
be solving it
 

00:00:10.960 --> 00:00:13.749 align:start position:0%
be solving it
on<00:00:11.280><c> lint</c><00:00:11.759><c> code</c><00:00:12.320><c> because</c><00:00:12.719><c> it's</c><00:00:13.040><c> free</c><00:00:13.360><c> on</c><00:00:13.519><c> that</c>

00:00:13.749 --> 00:00:13.759 align:start position:0%
on lint code because it's free on that
 

00:00:13.759 --> 00:00:15.669 align:start position:0%
on lint code because it's free on that
website<00:00:14.320><c> so</c><00:00:14.480><c> we</c><00:00:14.639><c> are</c><00:00:14.719><c> going</c><00:00:14.880><c> to</c><00:00:14.960><c> be</c><00:00:15.120><c> leveraging</c>

00:00:15.669 --> 00:00:15.679 align:start position:0%
website so we are going to be leveraging
 

00:00:15.679 --> 00:00:16.070 align:start position:0%
website so we are going to be leveraging
that

00:00:16.070 --> 00:00:16.080 align:start position:0%
that
 

00:00:16.080 --> 00:00:18.390 align:start position:0%
that
and<00:00:16.320><c> also</c><00:00:16.800><c> this</c><00:00:17.119><c> is</c><00:00:17.279><c> another</c><00:00:17.760><c> problem</c><00:00:18.160><c> from</c>

00:00:18.390 --> 00:00:18.400 align:start position:0%
and also this is another problem from
 

00:00:18.400 --> 00:00:19.990 align:start position:0%
and also this is another problem from
the<00:00:18.560><c> blind</c><00:00:19.039><c> 75</c>

00:00:19.990 --> 00:00:20.000 align:start position:0%
the blind 75
 

00:00:20.000 --> 00:00:23.189 align:start position:0%
the blind 75
list<00:00:20.400><c> so</c><00:00:20.640><c> this</c><00:00:20.960><c> is</c><00:00:21.119><c> graph</c><00:00:21.600><c> valid</c><00:00:22.400><c> tree</c><00:00:22.800><c> so</c><00:00:23.039><c> we</c>

00:00:23.189 --> 00:00:23.199 align:start position:0%
list so this is graph valid tree so we
 

00:00:23.199 --> 00:00:24.630 align:start position:0%
list so this is graph valid tree so we
are<00:00:23.359><c> going</c><00:00:23.439><c> to</c><00:00:23.519><c> be</c><00:00:23.680><c> filling</c><00:00:24.000><c> in</c><00:00:24.160><c> one</c><00:00:24.400><c> more</c>

00:00:24.630 --> 00:00:24.640 align:start position:0%
are going to be filling in one more
 

00:00:24.640 --> 00:00:27.509 align:start position:0%
are going to be filling in one more
problem<00:00:25.039><c> from</c><00:00:25.279><c> that</c><00:00:25.439><c> blind</c><00:00:25.840><c> 75</c><00:00:26.400><c> list</c><00:00:26.720><c> today</c>

00:00:27.509 --> 00:00:27.519 align:start position:0%
problem from that blind 75 list today
 

00:00:27.519 --> 00:00:30.070 align:start position:0%
problem from that blind 75 list today
so<00:00:27.760><c> this</c><00:00:27.920><c> is</c><00:00:28.080><c> a</c><00:00:28.240><c> graph</c><00:00:28.720><c> problem</c><00:00:29.199><c> we</c><00:00:29.359><c> are</c><00:00:29.519><c> given</c>

00:00:30.070 --> 00:00:30.080 align:start position:0%
so this is a graph problem we are given
 

00:00:30.080 --> 00:00:30.550 align:start position:0%
so this is a graph problem we are given
n

00:00:30.550 --> 00:00:30.560 align:start position:0%
n
 

00:00:30.560 --> 00:00:33.750 align:start position:0%
n
input<00:00:31.119><c> nodes</c><00:00:31.679><c> labeled</c><00:00:32.160><c> from</c><00:00:32.559><c> zero</c><00:00:33.040><c> to</c><00:00:33.360><c> n</c>

00:00:33.750 --> 00:00:33.760 align:start position:0%
input nodes labeled from zero to n
 

00:00:33.760 --> 00:00:36.389 align:start position:0%
input nodes labeled from zero to n
minus<00:00:34.320><c> one</c><00:00:35.040><c> and</c><00:00:35.200><c> we're</c><00:00:35.360><c> given</c><00:00:35.680><c> a</c><00:00:35.760><c> list</c><00:00:36.079><c> of</c>

00:00:36.389 --> 00:00:36.399 align:start position:0%
minus one and we're given a list of
 

00:00:36.399 --> 00:00:39.030 align:start position:0%
minus one and we're given a list of
undirected<00:00:37.360><c> edges</c><00:00:37.840><c> the</c><00:00:38.079><c> undirected</c><00:00:38.719><c> means</c>

00:00:39.030 --> 00:00:39.040 align:start position:0%
undirected edges the undirected means
 

00:00:39.040 --> 00:00:40.869 align:start position:0%
undirected edges the undirected means
that<00:00:39.120><c> the</c><00:00:39.280><c> edges</c><00:00:39.600><c> will</c><00:00:39.760><c> go</c><00:00:40.000><c> both</c><00:00:40.320><c> ways</c><00:00:40.559><c> so</c><00:00:40.719><c> you</c>

00:00:40.869 --> 00:00:40.879 align:start position:0%
that the edges will go both ways so you
 

00:00:40.879 --> 00:00:41.430 align:start position:0%
that the edges will go both ways so you
know<00:00:40.960><c> we</c><00:00:41.120><c> have</c>

00:00:41.430 --> 00:00:41.440 align:start position:0%
know we have
 

00:00:41.440 --> 00:00:43.510 align:start position:0%
know we have
a<00:00:41.680><c> couple</c><00:00:42.000><c> nodes</c><00:00:42.239><c> like</c><00:00:42.480><c> this</c><00:00:42.879><c> so</c><00:00:43.040><c> the</c><00:00:43.200><c> edge</c>

00:00:43.510 --> 00:00:43.520 align:start position:0%
a couple nodes like this so the edge
 

00:00:43.520 --> 00:00:45.350 align:start position:0%
a couple nodes like this so the edge
could<00:00:43.840><c> go</c><00:00:44.079><c> in</c><00:00:44.239><c> either</c><00:00:44.559><c> direction</c>

00:00:45.350 --> 00:00:45.360 align:start position:0%
could go in either direction
 

00:00:45.360 --> 00:00:47.190 align:start position:0%
could go in either direction
and<00:00:45.600><c> we</c><00:00:45.760><c> just</c><00:00:45.920><c> want</c><00:00:46.079><c> to</c><00:00:46.239><c> write</c><00:00:46.480><c> a</c><00:00:46.640><c> function</c><00:00:46.960><c> to</c>

00:00:47.190 --> 00:00:47.200 align:start position:0%
and we just want to write a function to
 

00:00:47.200 --> 00:00:49.350 align:start position:0%
and we just want to write a function to
check<00:00:47.600><c> whether</c><00:00:48.000><c> these</c><00:00:48.320><c> edges</c><00:00:48.800><c> and</c><00:00:48.960><c> nodes</c>

00:00:49.350 --> 00:00:49.360 align:start position:0%
check whether these edges and nodes
 

00:00:49.360 --> 00:00:49.910 align:start position:0%
check whether these edges and nodes
create

00:00:49.910 --> 00:00:49.920 align:start position:0%
create
 

00:00:49.920 --> 00:00:52.229 align:start position:0%
create
a<00:00:50.160><c> valid</c><00:00:50.800><c> tree</c><00:00:51.199><c> or</c><00:00:51.360><c> not</c><00:00:51.600><c> so</c><00:00:51.760><c> we</c><00:00:51.920><c> know</c><00:00:52.079><c> it's</c>

00:00:52.229 --> 00:00:52.239 align:start position:0%
a valid tree or not so we know it's
 

00:00:52.239 --> 00:00:54.470 align:start position:0%
a valid tree or not so we know it's
going<00:00:52.320><c> to</c><00:00:52.399><c> be</c><00:00:52.719><c> some</c><00:00:53.039><c> kind</c><00:00:53.360><c> of</c><00:00:53.600><c> graph</c><00:00:54.079><c> right</c>

00:00:54.470 --> 00:00:54.480 align:start position:0%
going to be some kind of graph right
 

00:00:54.480 --> 00:00:56.150 align:start position:0%
going to be some kind of graph right
it<00:00:54.640><c> could</c><00:00:54.879><c> the</c><00:00:55.039><c> graph</c><00:00:55.360><c> could</c><00:00:55.520><c> look</c><00:00:55.760><c> something</c>

00:00:56.150 --> 00:00:56.160 align:start position:0%
it could the graph could look something
 

00:00:56.160 --> 00:00:58.229 align:start position:0%
it could the graph could look something
like<00:00:56.559><c> this</c><00:00:57.440><c> right</c><00:00:57.600><c> we</c><00:00:57.760><c> don't</c><00:00:57.920><c> care</c>

00:00:58.229 --> 00:00:58.239 align:start position:0%
like this right we don't care
 

00:00:58.239 --> 00:01:00.069 align:start position:0%
like this right we don't care
too<00:00:58.399><c> much</c><00:00:58.559><c> about</c><00:00:58.800><c> the</c><00:00:58.960><c> values</c><00:00:59.520><c> here</c><00:00:59.760><c> but</c><00:00:59.920><c> let's</c>

00:01:00.069 --> 00:01:00.079 align:start position:0%
too much about the values here but let's
 

00:01:00.079 --> 00:01:01.910 align:start position:0%
too much about the values here but let's
say<00:01:00.239><c> this</c><00:01:00.399><c> was</c><00:01:00.559><c> the</c><00:01:00.719><c> shape</c><00:01:00.960><c> of</c><00:01:01.120><c> a</c><00:01:01.199><c> graph</c>

00:01:01.910 --> 00:01:01.920 align:start position:0%
say this was the shape of a graph
 

00:01:01.920 --> 00:01:04.390 align:start position:0%
say this was the shape of a graph
does<00:01:02.239><c> this</c><00:01:02.559><c> count</c><00:01:02.960><c> as</c><00:01:03.120><c> a</c><00:01:03.280><c> tree</c><00:01:03.600><c> well</c><00:01:03.840><c> yeah</c><00:01:04.000><c> this</c>

00:01:04.390 --> 00:01:04.400 align:start position:0%
does this count as a tree well yeah this
 

00:01:04.400 --> 00:01:06.230 align:start position:0%
does this count as a tree well yeah this
is<00:01:04.640><c> a</c><00:01:04.720><c> pretty</c><00:01:04.960><c> familiar</c><00:01:05.519><c> looking</c><00:01:05.840><c> tree</c><00:01:06.080><c> right</c>

00:01:06.230 --> 00:01:06.240 align:start position:0%
is a pretty familiar looking tree right
 

00:01:06.240 --> 00:01:07.429 align:start position:0%
is a pretty familiar looking tree right
so<00:01:06.400><c> we</c><00:01:06.479><c> would</c><00:01:06.640><c> say</c><00:01:06.799><c> yes</c><00:01:07.119><c> this</c>

00:01:07.429 --> 00:01:07.439 align:start position:0%
so we would say yes this
 

00:01:07.439 --> 00:01:10.310 align:start position:0%
so we would say yes this
is<00:01:07.600><c> a</c><00:01:07.760><c> tree</c><00:01:08.320><c> but</c><00:01:08.479><c> if</c><00:01:08.640><c> i</c><00:01:08.799><c> add</c><00:01:09.200><c> one</c><00:01:09.520><c> more</c><00:01:09.840><c> edge</c>

00:01:10.310 --> 00:01:10.320 align:start position:0%
is a tree but if i add one more edge
 

00:01:10.320 --> 00:01:10.710 align:start position:0%
is a tree but if i add one more edge
like

00:01:10.710 --> 00:01:10.720 align:start position:0%
like
 

00:01:10.720 --> 00:01:13.830 align:start position:0%
like
this<00:01:11.119><c> one</c><00:01:11.600><c> is</c><00:01:12.000><c> this</c><00:01:12.400><c> a</c><00:01:12.640><c> tree</c><00:01:13.040><c> it's</c><00:01:13.520><c> not</c>

00:01:13.830 --> 00:01:13.840 align:start position:0%
this one is this a tree it's not
 

00:01:13.840 --> 00:01:16.469 align:start position:0%
this one is this a tree it's not
a<00:01:14.080><c> tree</c><00:01:14.479><c> and</c><00:01:14.640><c> the</c><00:01:14.960><c> reason</c><00:01:15.439><c> being</c><00:01:16.000><c> is</c><00:01:16.159><c> because</c>

00:01:16.469 --> 00:01:16.479 align:start position:0%
a tree and the reason being is because
 

00:01:16.479 --> 00:01:17.429 align:start position:0%
a tree and the reason being is because
we<00:01:16.720><c> have</c><00:01:17.040><c> a</c>

00:01:17.429 --> 00:01:17.439 align:start position:0%
we have a
 

00:01:17.439 --> 00:01:21.429 align:start position:0%
we have a
loop<00:01:18.080><c> inside</c><00:01:18.560><c> of</c><00:01:18.640><c> this</c><00:01:18.880><c> graph</c><00:01:20.159><c> trees</c><00:01:20.720><c> are</c><00:01:21.040><c> not</c>

00:01:21.429 --> 00:01:21.439 align:start position:0%
loop inside of this graph trees are not
 

00:01:21.439 --> 00:01:23.429 align:start position:0%
loop inside of this graph trees are not
allowed<00:01:21.920><c> to</c><00:01:22.080><c> have</c><00:01:22.479><c> loops</c><00:01:23.040><c> that's</c><00:01:23.280><c> just</c>

00:01:23.429 --> 00:01:23.439 align:start position:0%
allowed to have loops that's just
 

00:01:23.439 --> 00:01:24.710 align:start position:0%
allowed to have loops that's just
something<00:01:23.759><c> that</c><00:01:23.920><c> you</c><00:01:24.240><c> you</c><00:01:24.320><c> know</c><00:01:24.479><c> you</c><00:01:24.640><c> just</c>

00:01:24.710 --> 00:01:24.720 align:start position:0%
something that you you know you just
 

00:01:24.720 --> 00:01:26.390 align:start position:0%
something that you you know you just
have<00:01:24.880><c> to</c><00:01:25.040><c> kind</c><00:01:25.200><c> of</c><00:01:25.360><c> know</c><00:01:25.600><c> the</c><00:01:25.759><c> definition</c><00:01:26.240><c> of</c>

00:01:26.390 --> 00:01:26.400 align:start position:0%
have to kind of know the definition of
 

00:01:26.400 --> 00:01:27.830 align:start position:0%
have to kind of know the definition of
because<00:01:26.640><c> in</c><00:01:26.720><c> this</c><00:01:26.960><c> problem</c><00:01:27.280><c> they</c><00:01:27.439><c> don't</c><00:01:27.680><c> tell</c>

00:01:27.830 --> 00:01:27.840 align:start position:0%
because in this problem they don't tell
 

00:01:27.840 --> 00:01:29.990 align:start position:0%
because in this problem they don't tell
you<00:01:28.080><c> what</c><00:01:28.320><c> exactly</c><00:01:28.880><c> is</c><00:01:29.040><c> the</c><00:01:29.200><c> definition</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
you what exactly is the definition
 

00:01:30.000 --> 00:01:32.870 align:start position:0%
you what exactly is the definition
of<00:01:30.240><c> a</c><00:01:30.400><c> valid</c><00:01:30.799><c> tree</c><00:01:31.439><c> so</c><00:01:31.600><c> we</c><00:01:31.759><c> know</c><00:01:32.000><c> trees</c><00:01:32.560><c> can't</c>

00:01:32.870 --> 00:01:32.880 align:start position:0%
of a valid tree so we know trees can't
 

00:01:32.880 --> 00:01:33.190 align:start position:0%
of a valid tree so we know trees can't
have

00:01:33.190 --> 00:01:33.200 align:start position:0%
have
 

00:01:33.200 --> 00:01:35.510 align:start position:0%
have
loops<00:01:33.840><c> and</c><00:01:34.000><c> there's</c><00:01:34.240><c> one</c><00:01:34.479><c> more</c><00:01:34.720><c> condition</c><00:01:35.360><c> for</c>

00:01:35.510 --> 00:01:35.520 align:start position:0%
loops and there's one more condition for
 

00:01:35.520 --> 00:01:37.590 align:start position:0%
loops and there's one more condition for
it<00:01:35.680><c> to</c><00:01:36.000><c> be</c><00:01:36.240><c> a</c><00:01:36.400><c> tree</c><00:01:36.799><c> a</c><00:01:37.040><c> tree</c>

00:01:37.590 --> 00:01:37.600 align:start position:0%
it to be a tree a tree
 

00:01:37.600 --> 00:01:40.390 align:start position:0%
it to be a tree a tree
needs<00:01:37.920><c> to</c><00:01:38.079><c> be</c><00:01:38.479><c> connected</c><00:01:39.360><c> so</c><00:01:39.520><c> for</c><00:01:39.680><c> example</c><00:01:40.240><c> if</c>

00:01:40.390 --> 00:01:40.400 align:start position:0%
needs to be connected so for example if
 

00:01:40.400 --> 00:01:41.830 align:start position:0%
needs to be connected so for example if
i<00:01:40.479><c> had</c><00:01:40.640><c> a</c><00:01:40.720><c> graph</c><00:01:41.040><c> that</c><00:01:41.200><c> looks</c><00:01:41.439><c> like</c>

00:01:41.830 --> 00:01:41.840 align:start position:0%
i had a graph that looks like
 

00:01:41.840 --> 00:01:44.950 align:start position:0%
i had a graph that looks like
this<00:01:42.479><c> this</c><00:01:42.880><c> is</c><00:01:43.280><c> not</c><00:01:43.600><c> a</c><00:01:43.920><c> tree</c><00:01:44.479><c> because</c>

00:01:44.950 --> 00:01:44.960 align:start position:0%
this this is not a tree because
 

00:01:44.960 --> 00:01:47.749 align:start position:0%
this this is not a tree because
every<00:01:45.520><c> node</c><00:01:45.920><c> is</c><00:01:46.159><c> not</c><00:01:46.479><c> connected</c><00:01:47.280><c> right</c><00:01:47.520><c> like</c>

00:01:47.749 --> 00:01:47.759 align:start position:0%
every node is not connected right like
 

00:01:47.759 --> 00:01:49.590 align:start position:0%
every node is not connected right like
this<00:01:48.079><c> node</c><00:01:48.320><c> over</c><00:01:48.560><c> here</c><00:01:48.799><c> is</c><00:01:48.880><c> just</c><00:01:49.119><c> by</c><00:01:49.280><c> itself</c>

00:01:49.590 --> 00:01:49.600 align:start position:0%
this node over here is just by itself
 

00:01:49.600 --> 00:01:51.350 align:start position:0%
this node over here is just by itself
it's<00:01:49.759><c> not</c><00:01:50.000><c> connected</c><00:01:50.399><c> with</c><00:01:50.560><c> the</c><00:01:50.799><c> rest</c><00:01:51.040><c> of</c><00:01:51.200><c> the</c>

00:01:51.350 --> 00:01:51.360 align:start position:0%
it's not connected with the rest of the
 

00:01:51.360 --> 00:01:52.389 align:start position:0%
it's not connected with the rest of the
nodes

00:01:52.389 --> 00:01:52.399 align:start position:0%
nodes
 

00:01:52.399 --> 00:01:55.350 align:start position:0%
nodes
so<00:01:53.280><c> for</c><00:01:53.439><c> it</c><00:01:53.520><c> to</c><00:01:53.680><c> be</c><00:01:53.840><c> a</c><00:01:54.000><c> valid</c><00:01:54.399><c> tree</c><00:01:54.720><c> we</c><00:01:55.040><c> can't</c>

00:01:55.350 --> 00:01:55.360 align:start position:0%
so for it to be a valid tree we can't
 

00:01:55.360 --> 00:01:55.830 align:start position:0%
so for it to be a valid tree we can't
have

00:01:55.830 --> 00:01:55.840 align:start position:0%
have
 

00:01:55.840 --> 00:01:58.389 align:start position:0%
have
loops<00:01:56.560><c> and</c><00:01:57.040><c> every</c><00:01:57.439><c> node</c><00:01:57.759><c> needs</c><00:01:58.079><c> to</c><00:01:58.159><c> be</c>

00:01:58.389 --> 00:01:58.399 align:start position:0%
loops and every node needs to be
 

00:01:58.399 --> 00:01:59.350 align:start position:0%
loops and every node needs to be
connected

00:01:59.350 --> 00:01:59.360 align:start position:0%
connected
 

00:01:59.360 --> 00:02:02.310 align:start position:0%
connected
so<00:01:59.759><c> simply</c><00:02:00.240><c> we</c><00:02:00.399><c> can</c><00:02:00.719><c> take</c><00:02:01.040><c> our</c><00:02:01.280><c> input</c><00:02:01.680><c> nodes</c>

00:02:02.310 --> 00:02:02.320 align:start position:0%
so simply we can take our input nodes
 

00:02:02.320 --> 00:02:03.429 align:start position:0%
so simply we can take our input nodes
and<00:02:02.560><c> our</c><00:02:02.880><c> edges</c>

00:02:03.429 --> 00:02:03.439 align:start position:0%
and our edges
 

00:02:03.439 --> 00:02:06.310 align:start position:0%
and our edges
and<00:02:03.520><c> then</c><00:02:03.840><c> check</c><00:02:04.320><c> are</c><00:02:04.479><c> they</c><00:02:04.719><c> connected</c><00:02:05.600><c> and</c><00:02:06.159><c> do</c>

00:02:06.310 --> 00:02:06.320 align:start position:0%
and then check are they connected and do
 

00:02:06.320 --> 00:02:06.630 align:start position:0%
and then check are they connected and do
they

00:02:06.630 --> 00:02:06.640 align:start position:0%
they
 

00:02:06.640 --> 00:02:09.430 align:start position:0%
they
not<00:02:06.960><c> have</c><00:02:07.439><c> a</c><00:02:07.680><c> loop</c><00:02:08.479><c> and</c><00:02:08.640><c> to</c><00:02:08.800><c> be</c><00:02:08.959><c> able</c><00:02:09.119><c> to</c><00:02:09.200><c> do</c>

00:02:09.430 --> 00:02:09.440 align:start position:0%
not have a loop and to be able to do
 

00:02:09.440 --> 00:02:09.990 align:start position:0%
not have a loop and to be able to do
that<00:02:09.599><c> so</c>

00:02:09.990 --> 00:02:10.000 align:start position:0%
that so
 

00:02:10.000 --> 00:02:11.830 align:start position:0%
that so
you<00:02:10.160><c> can</c><00:02:10.239><c> see</c><00:02:10.399><c> the</c><00:02:10.720><c> format</c><00:02:11.200><c> that</c><00:02:11.360><c> we're</c><00:02:11.520><c> given</c>

00:02:11.830 --> 00:02:11.840 align:start position:0%
you can see the format that we're given
 

00:02:11.840 --> 00:02:13.270 align:start position:0%
you can see the format that we're given
our<00:02:12.000><c> edges</c><00:02:12.480><c> in</c><00:02:12.879><c> but</c>

00:02:13.270 --> 00:02:13.280 align:start position:0%
our edges in but
 

00:02:13.280 --> 00:02:15.830 align:start position:0%
our edges in but
we<00:02:13.520><c> want</c><00:02:13.760><c> to</c><00:02:14.000><c> use</c><00:02:14.319><c> these</c><00:02:14.959><c> using</c><00:02:15.200><c> these</c><00:02:15.440><c> edges</c>

00:02:15.830 --> 00:02:15.840 align:start position:0%
we want to use these using these edges
 

00:02:15.840 --> 00:02:18.390 align:start position:0%
we want to use these using these edges
create<00:02:16.319><c> an</c><00:02:16.480><c> adjacency</c><00:02:17.440><c> list</c><00:02:17.680><c> so</c><00:02:17.920><c> basically</c>

00:02:18.390 --> 00:02:18.400 align:start position:0%
create an adjacency list so basically
 

00:02:18.400 --> 00:02:20.309 align:start position:0%
create an adjacency list so basically
for<00:02:18.560><c> each</c><00:02:18.800><c> node</c><00:02:19.120><c> for</c><00:02:19.200><c> example</c><00:02:19.520><c> you</c><00:02:19.680><c> know</c><00:02:19.840><c> one</c>

00:02:20.309 --> 00:02:20.319 align:start position:0%
for each node for example you know one
 

00:02:20.319 --> 00:02:22.630 align:start position:0%
for each node for example you know one
we<00:02:20.480><c> want</c><00:02:20.640><c> to</c><00:02:20.720><c> know</c><00:02:21.040><c> what</c><00:02:21.520><c> neighbors</c><00:02:22.080><c> does</c><00:02:22.319><c> one</c>

00:02:22.630 --> 00:02:22.640 align:start position:0%
we want to know what neighbors does one
 

00:02:22.640 --> 00:02:24.150 align:start position:0%
we want to know what neighbors does one
have<00:02:23.040><c> in</c><00:02:23.120><c> this</c><00:02:23.360><c> example</c>

00:02:24.150 --> 00:02:24.160 align:start position:0%
have in this example
 

00:02:24.160 --> 00:02:26.390 align:start position:0%
have in this example
one<00:02:24.560><c> only</c><00:02:24.879><c> has</c><00:02:25.040><c> a</c><00:02:25.200><c> single</c><00:02:25.599><c> neighbor</c><00:02:26.080><c> right</c><00:02:26.319><c> and</c>

00:02:26.390 --> 00:02:26.400 align:start position:0%
one only has a single neighbor right and
 

00:02:26.400 --> 00:02:27.589 align:start position:0%
one only has a single neighbor right and
that's<00:02:26.959><c> zero</c>

00:02:27.589 --> 00:02:27.599 align:start position:0%
that's zero
 

00:02:27.599 --> 00:02:30.070 align:start position:0%
that's zero
what<00:02:27.840><c> neighbors</c><00:02:28.480><c> does</c><00:02:29.040><c> two</c><00:02:29.280><c> have</c><00:02:29.760><c> in</c><00:02:29.920><c> this</c>

00:02:30.070 --> 00:02:30.080 align:start position:0%
what neighbors does two have in this
 

00:02:30.080 --> 00:02:32.070 align:start position:0%
what neighbors does two have in this
case<00:02:30.480><c> two</c><00:02:30.720><c> has</c><00:02:30.959><c> a</c><00:02:31.040><c> single</c><00:02:31.360><c> neighbor</c><00:02:31.760><c> and</c><00:02:31.920><c> it's</c>

00:02:32.070 --> 00:02:32.080 align:start position:0%
case two has a single neighbor and it's
 

00:02:32.080 --> 00:02:33.750 align:start position:0%
case two has a single neighbor and it's
zero<00:02:32.400><c> that's</c><00:02:32.640><c> basically</c><00:02:32.959><c> what</c><00:02:33.200><c> we</c><00:02:33.280><c> wanna</c><00:02:33.519><c> do</c>

00:02:33.750 --> 00:02:33.760 align:start position:0%
zero that's basically what we wanna do
 

00:02:33.760 --> 00:02:35.270 align:start position:0%
zero that's basically what we wanna do
we<00:02:33.840><c> wanna</c><00:02:34.080><c> create</c><00:02:34.400><c> a</c><00:02:34.640><c> list</c>

00:02:35.270 --> 00:02:35.280 align:start position:0%
we wanna create a list
 

00:02:35.280 --> 00:02:38.150 align:start position:0%
we wanna create a list
of<00:02:35.519><c> neighbors</c><00:02:36.160><c> for</c><00:02:36.400><c> every</c><00:02:36.720><c> single</c><00:02:37.120><c> input</c><00:02:37.519><c> node</c>

00:02:38.150 --> 00:02:38.160 align:start position:0%
of neighbors for every single input node
 

00:02:38.160 --> 00:02:39.990 align:start position:0%
of neighbors for every single input node
and<00:02:38.319><c> once</c><00:02:38.560><c> we</c><00:02:38.720><c> get</c><00:02:38.879><c> that</c><00:02:39.120><c> it'll</c><00:02:39.360><c> be</c><00:02:39.519><c> easy</c><00:02:39.840><c> to</c>

00:02:39.990 --> 00:02:40.000 align:start position:0%
and once we get that it'll be easy to
 

00:02:40.000 --> 00:02:41.670 align:start position:0%
and once we get that it'll be easy to
traverse<00:02:40.640><c> the</c><00:02:40.800><c> graph</c><00:02:41.120><c> and</c><00:02:41.200><c> then</c><00:02:41.360><c> we</c><00:02:41.519><c> can</c>

00:02:41.670 --> 00:02:41.680 align:start position:0%
traverse the graph and then we can
 

00:02:41.680 --> 00:02:43.670 align:start position:0%
traverse the graph and then we can
perform<00:02:42.160><c> our</c><00:02:42.400><c> check</c><00:02:42.720><c> to</c><00:02:42.879><c> make</c><00:02:43.040><c> sure</c><00:02:43.280><c> that</c><00:02:43.440><c> it</c>

00:02:43.670 --> 00:02:43.680 align:start position:0%
perform our check to make sure that it
 

00:02:43.680 --> 00:02:44.949 align:start position:0%
perform our check to make sure that it
is<00:02:43.920><c> a</c><00:02:44.080><c> tree</c>

00:02:44.949 --> 00:02:44.959 align:start position:0%
is a tree
 

00:02:44.959 --> 00:02:46.949 align:start position:0%
is a tree
so<00:02:45.200><c> let's</c><00:02:45.440><c> say</c><00:02:45.599><c> we</c><00:02:45.760><c> were</c><00:02:45.920><c> given</c><00:02:46.239><c> a</c><00:02:46.319><c> graph</c><00:02:46.720><c> like</c>

00:02:46.949 --> 00:02:46.959 align:start position:0%
so let's say we were given a graph like
 

00:02:46.959 --> 00:02:49.190 align:start position:0%
so let's say we were given a graph like
this<00:02:47.280><c> is</c><00:02:47.440><c> this</c><00:02:47.680><c> a</c><00:02:47.760><c> valid</c><00:02:48.080><c> tree</c><00:02:48.400><c> well</c><00:02:48.640><c> just</c><00:02:48.959><c> by</c>

00:02:49.190 --> 00:02:49.200 align:start position:0%
this is this a valid tree well just by
 

00:02:49.200 --> 00:02:50.309 align:start position:0%
this is this a valid tree well just by
looking<00:02:49.440><c> at</c><00:02:49.599><c> it</c><00:02:49.680><c> we</c><00:02:49.840><c> can</c><00:02:50.000><c> tell</c>

00:02:50.309 --> 00:02:50.319 align:start position:0%
looking at it we can tell
 

00:02:50.319 --> 00:02:51.910 align:start position:0%
looking at it we can tell
yes<00:02:50.560><c> that</c><00:02:50.720><c> it</c><00:02:50.879><c> is</c><00:02:51.200><c> but</c><00:02:51.360><c> what</c><00:02:51.599><c> kind</c><00:02:51.760><c> of</c>

00:02:51.910 --> 00:02:51.920 align:start position:0%
yes that it is but what kind of
 

00:02:51.920 --> 00:02:54.070 align:start position:0%
yes that it is but what kind of
algorithm<00:02:52.400><c> can</c><00:02:52.560><c> we</c><00:02:52.720><c> do</c><00:02:52.959><c> to</c><00:02:53.120><c> determine</c><00:02:53.680><c> that</c>

00:02:54.070 --> 00:02:54.080 align:start position:0%
algorithm can we do to determine that
 

00:02:54.080 --> 00:02:56.470 align:start position:0%
algorithm can we do to determine that
well<00:02:54.239><c> let's</c><00:02:54.560><c> start</c><00:02:54.879><c> at</c><00:02:55.120><c> any</c><00:02:55.519><c> node</c><00:02:56.000><c> in</c><00:02:56.080><c> this</c>

00:02:56.470 --> 00:02:56.480 align:start position:0%
well let's start at any node in this
 

00:02:56.480 --> 00:02:58.470 align:start position:0%
well let's start at any node in this
graph<00:02:56.959><c> we're</c><00:02:57.280><c> always</c><00:02:57.599><c> just</c><00:02:57.760><c> going</c><00:02:57.840><c> to</c><00:02:58.080><c> choose</c>

00:02:58.470 --> 00:02:58.480 align:start position:0%
graph we're always just going to choose
 

00:02:58.480 --> 00:03:00.149 align:start position:0%
graph we're always just going to choose
node<00:02:58.879><c> 0</c><00:02:59.280><c> because</c><00:02:59.519><c> it's</c><00:02:59.760><c> you</c><00:02:59.920><c> know</c><00:03:00.000><c> the</c>

00:03:00.149 --> 00:03:00.159 align:start position:0%
node 0 because it's you know the
 

00:03:00.159 --> 00:03:01.910 align:start position:0%
node 0 because it's you know the
smallest<00:03:00.640><c> value</c><00:03:01.040><c> every</c><00:03:01.200><c> single</c><00:03:01.519><c> graph</c><00:03:01.840><c> is</c>

00:03:01.910 --> 00:03:01.920 align:start position:0%
smallest value every single graph is
 

00:03:01.920 --> 00:03:03.990 align:start position:0%
smallest value every single graph is
going<00:03:02.000><c> to</c><00:03:02.080><c> have</c><00:03:02.239><c> at</c><00:03:02.400><c> least</c><00:03:02.640><c> a</c><00:03:02.720><c> node</c><00:03:03.040><c> 0</c><00:03:03.440><c> if</c><00:03:03.760><c> we</c>

00:03:03.990 --> 00:03:04.000 align:start position:0%
going to have at least a node 0 if we
 

00:03:04.000 --> 00:03:06.149 align:start position:0%
going to have at least a node 0 if we
don't<00:03:04.239><c> even</c><00:03:04.560><c> have</c><00:03:04.720><c> node</c><00:03:05.040><c> 0</c><00:03:05.440><c> like</c><00:03:05.599><c> if</c><00:03:05.760><c> we</c><00:03:05.920><c> if</c><00:03:06.080><c> the</c>

00:03:06.149 --> 00:03:06.159 align:start position:0%
don't even have node 0 like if we if the
 

00:03:06.159 --> 00:03:07.030 align:start position:0%
don't even have node 0 like if we if the
number<00:03:06.400><c> of</c><00:03:06.480><c> nodes</c>

00:03:07.030 --> 00:03:07.040 align:start position:0%
number of nodes
 

00:03:07.040 --> 00:03:08.949 align:start position:0%
number of nodes
if<00:03:07.200><c> we</c><00:03:07.280><c> don't</c><00:03:07.519><c> have</c><00:03:07.680><c> any</c><00:03:07.920><c> nodes</c><00:03:08.239><c> at</c><00:03:08.400><c> all</c><00:03:08.720><c> then</c>

00:03:08.949 --> 00:03:08.959 align:start position:0%
if we don't have any nodes at all then
 

00:03:08.959 --> 00:03:10.710 align:start position:0%
if we don't have any nodes at all then
we<00:03:09.120><c> can</c><00:03:09.200><c> return</c><00:03:09.599><c> true</c><00:03:09.920><c> basically</c><00:03:10.400><c> an</c>

00:03:10.710 --> 00:03:10.720 align:start position:0%
we can return true basically an
 

00:03:10.720 --> 00:03:13.990 align:start position:0%
we can return true basically an
empty<00:03:11.120><c> graph</c><00:03:11.840><c> does</c><00:03:12.239><c> count</c><00:03:12.640><c> as</c><00:03:13.040><c> a</c><00:03:13.680><c> tree</c>

00:03:13.990 --> 00:03:14.000 align:start position:0%
empty graph does count as a tree
 

00:03:14.000 --> 00:03:15.030 align:start position:0%
empty graph does count as a tree
technically

00:03:15.030 --> 00:03:15.040 align:start position:0%
technically
 

00:03:15.040 --> 00:03:16.630 align:start position:0%
technically
but<00:03:15.200><c> so</c><00:03:15.440><c> in</c><00:03:15.519><c> this</c><00:03:15.760><c> case</c><00:03:16.000><c> we</c><00:03:16.159><c> don't</c><00:03:16.400><c> have</c><00:03:16.480><c> an</c>

00:03:16.630 --> 00:03:16.640 align:start position:0%
but so in this case we don't have an
 

00:03:16.640 --> 00:03:18.070 align:start position:0%
but so in this case we don't have an
empty<00:03:16.879><c> graph</c><00:03:17.120><c> so</c><00:03:17.280><c> we're</c><00:03:17.360><c> going</c><00:03:17.440><c> to</c><00:03:17.599><c> start</c><00:03:17.920><c> at</c>

00:03:18.070 --> 00:03:18.080 align:start position:0%
empty graph so we're going to start at
 

00:03:18.080 --> 00:03:18.470 align:start position:0%
empty graph so we're going to start at
node

00:03:18.470 --> 00:03:18.480 align:start position:0%
node
 

00:03:18.480 --> 00:03:21.430 align:start position:0%
node
0.<00:03:19.280><c> what</c><00:03:19.519><c> are</c><00:03:19.680><c> we</c><00:03:19.840><c> going</c><00:03:19.920><c> to</c><00:03:20.239><c> check</c><00:03:20.879><c> basically</c>

00:03:21.430 --> 00:03:21.440 align:start position:0%
0. what are we going to check basically
 

00:03:21.440 --> 00:03:22.790 align:start position:0%
0. what are we going to check basically
we're<00:03:21.599><c> going</c><00:03:21.680><c> to</c><00:03:21.760><c> do</c><00:03:21.920><c> a</c><00:03:22.159><c> standard</c>

00:03:22.790 --> 00:03:22.800 align:start position:0%
we're going to do a standard
 

00:03:22.800 --> 00:03:24.630 align:start position:0%
we're going to do a standard
graph<00:03:23.200><c> traversal</c><00:03:23.840><c> you</c><00:03:23.920><c> could</c><00:03:24.080><c> do</c><00:03:24.319><c> breadth</c>

00:03:24.630 --> 00:03:24.640 align:start position:0%
graph traversal you could do breadth
 

00:03:24.640 --> 00:03:25.910 align:start position:0%
graph traversal you could do breadth
first<00:03:24.879><c> search</c><00:03:25.200><c> but</c><00:03:25.360><c> i'm</c><00:03:25.440><c> going</c><00:03:25.519><c> to</c><00:03:25.599><c> do</c>

00:03:25.910 --> 00:03:25.920 align:start position:0%
first search but i'm going to do
 

00:03:25.920 --> 00:03:28.149 align:start position:0%
first search but i'm going to do
depth<00:03:26.239><c> first</c><00:03:26.480><c> search</c><00:03:27.200><c> and</c><00:03:27.360><c> so</c><00:03:27.599><c> for</c><00:03:27.840><c> every</c>

00:03:28.149 --> 00:03:28.159 align:start position:0%
depth first search and so for every
 

00:03:28.159 --> 00:03:30.070 align:start position:0%
depth first search and so for every
single<00:03:28.560><c> node</c><00:03:28.879><c> we're</c><00:03:29.040><c> basically</c><00:03:29.519><c> going</c><00:03:29.599><c> to</c><00:03:29.760><c> go</c>

00:03:30.070 --> 00:03:30.080 align:start position:0%
single node we're basically going to go
 

00:03:30.080 --> 00:03:32.309 align:start position:0%
single node we're basically going to go
on<00:03:30.319><c> and</c><00:03:30.560><c> visit</c><00:03:30.879><c> its</c><00:03:31.120><c> neighbors</c><00:03:31.519><c> recursively</c>

00:03:32.309 --> 00:03:32.319 align:start position:0%
on and visit its neighbors recursively
 

00:03:32.319 --> 00:03:32.869 align:start position:0%
on and visit its neighbors recursively
and<00:03:32.480><c> then</c>

00:03:32.869 --> 00:03:32.879 align:start position:0%
and then
 

00:03:32.879 --> 00:03:34.869 align:start position:0%
and then
continue<00:03:33.360><c> to</c><00:03:33.440><c> do</c><00:03:33.599><c> that</c><00:03:33.840><c> until</c><00:03:34.159><c> we</c><00:03:34.319><c> visited</c>

00:03:34.869 --> 00:03:34.879 align:start position:0%
continue to do that until we visited
 

00:03:34.879 --> 00:03:37.110 align:start position:0%
continue to do that until we visited
every<00:03:35.120><c> single</c><00:03:35.519><c> node</c><00:03:35.760><c> that's</c><00:03:36.080><c> connected</c>

00:03:37.110 --> 00:03:37.120 align:start position:0%
every single node that's connected
 

00:03:37.120 --> 00:03:39.990 align:start position:0%
every single node that's connected
to<00:03:37.440><c> the</c><00:03:37.760><c> zero</c><00:03:38.159><c> node</c><00:03:38.799><c> at</c><00:03:38.959><c> the</c><00:03:39.280><c> end</c><00:03:39.680><c> what</c><00:03:39.840><c> we're</c>

00:03:39.990 --> 00:03:40.000 align:start position:0%
to the zero node at the end what we're
 

00:03:40.000 --> 00:03:40.789 align:start position:0%
to the zero node at the end what we're
going<00:03:40.080><c> to</c><00:03:40.239><c> do</c><00:03:40.480><c> is</c>

00:03:40.789 --> 00:03:40.799 align:start position:0%
going to do is
 

00:03:40.799 --> 00:03:42.789 align:start position:0%
going to do is
take<00:03:41.360><c> the</c><00:03:41.519><c> number</c><00:03:41.840><c> of</c><00:03:42.000><c> input</c><00:03:42.319><c> nodes</c><00:03:42.560><c> that</c><00:03:42.640><c> we</c>

00:03:42.789 --> 00:03:42.799 align:start position:0%
take the number of input nodes that we
 

00:03:42.799 --> 00:03:44.550 align:start position:0%
take the number of input nodes that we
were<00:03:42.959><c> given</c><00:03:43.280><c> in</c><00:03:43.440><c> this</c><00:03:43.599><c> case</c><00:03:43.840><c> it's</c><00:03:44.080><c> 5</c>

00:03:44.550 --> 00:03:44.560 align:start position:0%
were given in this case it's 5
 

00:03:44.560 --> 00:03:45.830 align:start position:0%
were given in this case it's 5
and<00:03:44.640><c> then</c><00:03:44.799><c> we're</c><00:03:44.959><c> going</c><00:03:45.040><c> to</c><00:03:45.200><c> check</c><00:03:45.440><c> if</c><00:03:45.599><c> the</c>

00:03:45.830 --> 00:03:45.840 align:start position:0%
and then we're going to check if the
 

00:03:45.840 --> 00:03:48.149 align:start position:0%
and then we're going to check if the
number<00:03:46.239><c> of</c><00:03:46.560><c> visited</c><00:03:47.200><c> nodes</c>

00:03:48.149 --> 00:03:48.159 align:start position:0%
number of visited nodes
 

00:03:48.159 --> 00:03:51.190 align:start position:0%
number of visited nodes
matches<00:03:49.360><c> if</c><00:03:49.519><c> the</c><00:03:49.680><c> number</c><00:03:50.000><c> of</c><00:03:50.080><c> visited</c><00:03:50.560><c> nodes</c>

00:03:51.190 --> 00:03:51.200 align:start position:0%
matches if the number of visited nodes
 

00:03:51.200 --> 00:03:53.589 align:start position:0%
matches if the number of visited nodes
matches<00:03:51.599><c> the</c><00:03:51.920><c> input</c><00:03:52.239><c> value</c><00:03:52.640><c> for</c><00:03:52.879><c> nodes</c><00:03:53.280><c> that</c>

00:03:53.589 --> 00:03:53.599 align:start position:0%
matches the input value for nodes that
 

00:03:53.599 --> 00:03:54.470 align:start position:0%
matches the input value for nodes that
means<00:03:54.080><c> that</c>

00:03:54.470 --> 00:03:54.480 align:start position:0%
means that
 

00:03:54.480 --> 00:03:57.509 align:start position:0%
means that
every<00:03:55.280><c> every</c><00:03:55.760><c> node</c><00:03:56.159><c> inside</c><00:03:56.640><c> the</c><00:03:56.799><c> graph</c><00:03:57.280><c> is</c>

00:03:57.509 --> 00:03:57.519 align:start position:0%
every every node inside the graph is
 

00:03:57.519 --> 00:03:59.110 align:start position:0%
every every node inside the graph is
connected<00:03:58.080><c> right</c><00:03:58.239><c> that's</c><00:03:58.560><c> one</c><00:03:58.720><c> of</c><00:03:58.799><c> the</c><00:03:58.879><c> things</c>

00:03:59.110 --> 00:03:59.120 align:start position:0%
connected right that's one of the things
 

00:03:59.120 --> 00:04:00.149 align:start position:0%
connected right that's one of the things
we're<00:03:59.280><c> looking</c><00:03:59.599><c> for</c><00:03:59.760><c> is</c>

00:04:00.149 --> 00:04:00.159 align:start position:0%
we're looking for is
 

00:04:00.159 --> 00:04:03.030 align:start position:0%
we're looking for is
is<00:04:00.400><c> the</c><00:04:00.640><c> graph</c><00:04:01.120><c> connected</c><00:04:02.000><c> if</c><00:04:02.239><c> the</c><00:04:02.319><c> number</c><00:04:02.640><c> of</c>

00:04:03.030 --> 00:04:03.040 align:start position:0%
is the graph connected if the number of
 

00:04:03.040 --> 00:04:04.229 align:start position:0%
is the graph connected if the number of
nodes<00:04:03.360><c> we</c><00:04:03.599><c> visit</c>

00:04:04.229 --> 00:04:04.239 align:start position:0%
nodes we visit
 

00:04:04.239 --> 00:04:06.390 align:start position:0%
nodes we visit
matches<00:04:04.560><c> the</c><00:04:04.720><c> number</c><00:04:04.959><c> of</c><00:04:05.120><c> nodes</c><00:04:05.840><c> given</c><00:04:06.159><c> to</c><00:04:06.319><c> us</c>

00:04:06.390 --> 00:04:06.400 align:start position:0%
matches the number of nodes given to us
 

00:04:06.400 --> 00:04:08.309 align:start position:0%
matches the number of nodes given to us
we<00:04:06.560><c> can</c><00:04:06.799><c> guarantee</c><00:04:07.360><c> that</c><00:04:07.519><c> that</c><00:04:07.840><c> graph</c>

00:04:08.309 --> 00:04:08.319 align:start position:0%
we can guarantee that that graph
 

00:04:08.319 --> 00:04:10.309 align:start position:0%
we can guarantee that that graph
is<00:04:08.560><c> connected</c><00:04:09.360><c> the</c><00:04:09.599><c> other</c><00:04:09.920><c> thing</c><00:04:10.080><c> we're</c><00:04:10.239><c> going</c>

00:04:10.309 --> 00:04:10.319 align:start position:0%
is connected the other thing we're going
 

00:04:10.319 --> 00:04:12.470 align:start position:0%
is connected the other thing we're going
to<00:04:10.560><c> check</c><00:04:10.799><c> for</c><00:04:11.200><c> is</c><00:04:11.360><c> to</c><00:04:11.519><c> make</c><00:04:11.760><c> sure</c><00:04:12.000><c> that</c><00:04:12.239><c> this</c>

00:04:12.470 --> 00:04:12.480 align:start position:0%
to check for is to make sure that this
 

00:04:12.480 --> 00:04:13.030 align:start position:0%
to check for is to make sure that this
graph

00:04:13.030 --> 00:04:13.040 align:start position:0%
graph
 

00:04:13.040 --> 00:04:16.469 align:start position:0%
graph
does<00:04:13.200><c> not</c><00:04:13.439><c> contain</c><00:04:14.000><c> any</c><00:04:14.560><c> cycles</c><00:04:15.360><c> or</c><00:04:15.760><c> loops</c>

00:04:16.469 --> 00:04:16.479 align:start position:0%
does not contain any cycles or loops
 

00:04:16.479 --> 00:04:18.710 align:start position:0%
does not contain any cycles or loops
if<00:04:16.720><c> we</c><00:04:17.040><c> ever</c><00:04:17.359><c> encounter</c><00:04:17.919><c> a</c><00:04:18.079><c> cycle</c><00:04:18.400><c> like</c><00:04:18.560><c> for</c>

00:04:18.710 --> 00:04:18.720 align:start position:0%
if we ever encounter a cycle like for
 

00:04:18.720 --> 00:04:20.069 align:start position:0%
if we ever encounter a cycle like for
example<00:04:19.040><c> you</c><00:04:19.199><c> know</c><00:04:19.280><c> we</c><00:04:19.440><c> have</c><00:04:19.519><c> an</c><00:04:19.680><c> edge</c><00:04:19.919><c> like</c>

00:04:20.069 --> 00:04:20.079 align:start position:0%
example you know we have an edge like
 

00:04:20.079 --> 00:04:20.469 align:start position:0%
example you know we have an edge like
this

00:04:20.469 --> 00:04:20.479 align:start position:0%
this
 

00:04:20.479 --> 00:04:21.990 align:start position:0%
this
if<00:04:20.639><c> we</c><00:04:20.720><c> went</c><00:04:20.959><c> here</c><00:04:21.120><c> we</c><00:04:21.280><c> went</c><00:04:21.519><c> here</c><00:04:21.680><c> we</c><00:04:21.759><c> weren't</c>

00:04:21.990 --> 00:04:22.000 align:start position:0%
if we went here we went here we weren't
 

00:04:22.000 --> 00:04:24.550 align:start position:0%
if we went here we went here we weren't
here<00:04:22.400><c> and</c><00:04:22.479><c> then</c><00:04:22.639><c> we</c><00:04:22.800><c> got</c><00:04:23.280><c> back</c><00:04:23.600><c> to</c><00:04:23.840><c> zero</c>

00:04:24.550 --> 00:04:24.560 align:start position:0%
here and then we got back to zero
 

00:04:24.560 --> 00:04:26.390 align:start position:0%
here and then we got back to zero
that<00:04:24.800><c> counts</c><00:04:25.120><c> as</c><00:04:25.280><c> a</c><00:04:25.440><c> cycle</c><00:04:25.919><c> then</c><00:04:26.160><c> we</c><00:04:26.240><c> would</c>

00:04:26.390 --> 00:04:26.400 align:start position:0%
that counts as a cycle then we would
 

00:04:26.400 --> 00:04:28.469 align:start position:0%
that counts as a cycle then we would
have<00:04:26.479><c> to</c><00:04:26.639><c> return</c><00:04:27.040><c> false</c><00:04:27.520><c> immediately</c><00:04:28.240><c> but</c><00:04:28.400><c> if</c>

00:04:28.469 --> 00:04:28.479 align:start position:0%
have to return false immediately but if
 

00:04:28.479 --> 00:04:30.230 align:start position:0%
have to return false immediately but if
we<00:04:28.800><c> don't</c><00:04:29.120><c> reach</c><00:04:29.360><c> a</c><00:04:29.520><c> cycle</c>

00:04:30.230 --> 00:04:30.240 align:start position:0%
we don't reach a cycle
 

00:04:30.240 --> 00:04:32.550 align:start position:0%
we don't reach a cycle
and<00:04:30.639><c> this</c><00:04:30.880><c> condition</c><00:04:31.360><c> ends</c><00:04:31.520><c> up</c><00:04:31.680><c> being</c><00:04:32.000><c> true</c>

00:04:32.550 --> 00:04:32.560 align:start position:0%
and this condition ends up being true
 

00:04:32.560 --> 00:04:34.150 align:start position:0%
and this condition ends up being true
then<00:04:32.800><c> we're</c><00:04:32.960><c> going</c><00:04:33.040><c> to</c><00:04:33.120><c> return</c><00:04:33.600><c> true</c>

00:04:34.150 --> 00:04:34.160 align:start position:0%
then we're going to return true
 

00:04:34.160 --> 00:04:36.070 align:start position:0%
then we're going to return true
so<00:04:34.400><c> since</c><00:04:34.720><c> we</c><00:04:34.960><c> start</c><00:04:35.199><c> at</c><00:04:35.440><c> 0</c><00:04:35.759><c> what</c><00:04:35.840><c> we're</c><00:04:36.000><c> going</c>

00:04:36.070 --> 00:04:36.080 align:start position:0%
so since we start at 0 what we're going
 

00:04:36.080 --> 00:04:37.350 align:start position:0%
so since we start at 0 what we're going
to<00:04:36.240><c> do</c><00:04:36.720><c> is</c><00:04:37.040><c> to</c>

00:04:37.350 --> 00:04:37.360 align:start position:0%
to do is to
 

00:04:37.360 --> 00:04:39.350 align:start position:0%
to do is to
our<00:04:37.759><c> set</c><00:04:38.160><c> of</c><00:04:38.320><c> visited</c><00:04:38.800><c> nodes</c><00:04:39.120><c> it's</c><00:04:39.199><c> going</c><00:04:39.280><c> to</c>

00:04:39.350 --> 00:04:39.360 align:start position:0%
our set of visited nodes it's going to
 

00:04:39.360 --> 00:04:41.189 align:start position:0%
our set of visited nodes it's going to
be<00:04:39.520><c> a</c><00:04:39.680><c> hash</c><00:04:40.160><c> set</c><00:04:40.400><c> because</c><00:04:40.639><c> that's</c><00:04:40.880><c> the</c><00:04:40.960><c> most</c>

00:04:41.189 --> 00:04:41.199 align:start position:0%
be a hash set because that's the most
 

00:04:41.199 --> 00:04:41.990 align:start position:0%
be a hash set because that's the most
efficient<00:04:41.520><c> way</c><00:04:41.680><c> to</c><00:04:41.759><c> do</c>

00:04:41.990 --> 00:04:42.000 align:start position:0%
efficient way to do
 

00:04:42.000 --> 00:04:44.790 align:start position:0%
efficient way to do
it<00:04:42.320><c> so</c><00:04:42.479><c> we're</c><00:04:42.800><c> going</c><00:04:42.880><c> to</c><00:04:43.040><c> add</c><00:04:43.600><c> that</c><00:04:43.919><c> node</c><00:04:44.479><c> 0</c>

00:04:44.790 --> 00:04:44.800 align:start position:0%
it so we're going to add that node 0
 

00:04:44.800 --> 00:04:45.510 align:start position:0%
it so we're going to add that node 0
because<00:04:45.040><c> 0</c>

00:04:45.510 --> 00:04:45.520 align:start position:0%
because 0
 

00:04:45.520 --> 00:04:47.270 align:start position:0%
because 0
has<00:04:45.680><c> been</c><00:04:45.919><c> visited</c><00:04:46.560><c> so</c><00:04:46.720><c> then</c><00:04:46.960><c> we're</c><00:04:47.120><c> going</c><00:04:47.199><c> to</c>

00:04:47.270 --> 00:04:47.280 align:start position:0%
has been visited so then we're going to
 

00:04:47.280 --> 00:04:48.629 align:start position:0%
has been visited so then we're going to
recursively<00:04:47.919><c> go</c><00:04:48.240><c> to</c>

00:04:48.629 --> 00:04:48.639 align:start position:0%
recursively go to
 

00:04:48.639 --> 00:04:51.990 align:start position:0%
recursively go to
its<00:04:48.960><c> first</c><00:04:49.360><c> neighbor</c><00:04:50.320><c> 1</c><00:04:51.199><c> so</c><00:04:51.520><c> now</c><00:04:51.759><c> we're</c><00:04:51.919><c> going</c>

00:04:51.990 --> 00:04:52.000 align:start position:0%
its first neighbor 1 so now we're going
 

00:04:52.000 --> 00:04:53.990 align:start position:0%
its first neighbor 1 so now we're going
to<00:04:52.080><c> be</c><00:04:52.240><c> at</c><00:04:52.479><c> 1</c><00:04:52.880><c> right</c><00:04:53.199><c> and</c><00:04:53.440><c> from</c><00:04:53.759><c> from</c><00:04:53.919><c> the</c>

00:04:53.990 --> 00:04:54.000 align:start position:0%
to be at 1 right and from from the
 

00:04:54.000 --> 00:04:55.110 align:start position:0%
to be at 1 right and from from the
perspective<00:04:54.560><c> of</c><00:04:54.639><c> 0</c>

00:04:55.110 --> 00:04:55.120 align:start position:0%
perspective of 0
 

00:04:55.120 --> 00:04:56.710 align:start position:0%
perspective of 0
we're<00:04:55.280><c> gonna</c><00:04:55.440><c> visit</c><00:04:55.759><c> one</c><00:04:56.080><c> after</c><00:04:56.400><c> we're</c><00:04:56.560><c> done</c>

00:04:56.710 --> 00:04:56.720 align:start position:0%
we're gonna visit one after we're done
 

00:04:56.720 --> 00:04:57.830 align:start position:0%
we're gonna visit one after we're done
with<00:04:56.880><c> that</c><00:04:56.960><c> we're</c><00:04:57.120><c> gonna</c><00:04:57.280><c> visit</c><00:04:57.520><c> two</c><00:04:57.680><c> then</c>

00:04:57.830 --> 00:04:57.840 align:start position:0%
with that we're gonna visit two then
 

00:04:57.840 --> 00:04:59.110 align:start position:0%
with that we're gonna visit two then
we're<00:04:58.000><c> gonna</c><00:04:58.080><c> visit</c><00:04:58.400><c> three</c><00:04:58.560><c> bills</c><00:04:58.880><c> first</c>

00:04:59.110 --> 00:04:59.120 align:start position:0%
we're gonna visit three bills first
 

00:04:59.120 --> 00:05:00.950 align:start position:0%
we're gonna visit three bills first
we're<00:04:59.280><c> gonna</c><00:04:59.440><c> start</c><00:04:59.680><c> at</c><00:04:59.840><c> one</c><00:05:00.080><c> so</c><00:05:00.240><c> now</c><00:05:00.400><c> we're</c><00:05:00.639><c> at</c>

00:05:00.950 --> 00:05:00.960 align:start position:0%
we're gonna start at one so now we're at
 

00:05:00.960 --> 00:05:01.670 align:start position:0%
we're gonna start at one so now we're at
one<00:05:01.280><c> right</c>

00:05:01.670 --> 00:05:01.680 align:start position:0%
one right
 

00:05:01.680 --> 00:05:04.230 align:start position:0%
one right
we're<00:05:01.840><c> gonna</c><00:05:02.000><c> go</c><00:05:02.160><c> ahead</c><00:05:02.400><c> and</c><00:05:02.560><c> add</c><00:05:02.960><c> one</c><00:05:03.600><c> to</c><00:05:04.000><c> the</c>

00:05:04.230 --> 00:05:04.240 align:start position:0%
we're gonna go ahead and add one to the
 

00:05:04.240 --> 00:05:05.350 align:start position:0%
we're gonna go ahead and add one to the
visit<00:05:04.639><c> set</c>

00:05:05.350 --> 00:05:05.360 align:start position:0%
visit set
 

00:05:05.360 --> 00:05:08.310 align:start position:0%
visit set
and<00:05:05.759><c> we</c><00:05:06.000><c> notice</c><00:05:06.560><c> one</c><00:05:06.960><c> has</c><00:05:07.520><c> two</c><00:05:07.840><c> neighbors</c>

00:05:08.310 --> 00:05:08.320 align:start position:0%
and we notice one has two neighbors
 

00:05:08.320 --> 00:05:08.629 align:start position:0%
and we notice one has two neighbors
right

00:05:08.629 --> 00:05:08.639 align:start position:0%
right
 

00:05:08.639 --> 00:05:11.749 align:start position:0%
right
it<00:05:08.800><c> has</c><00:05:08.960><c> a</c><00:05:09.120><c> neighbor</c><00:05:09.840><c> 0</c><00:05:10.479><c> and</c><00:05:10.720><c> it</c><00:05:10.880><c> also</c><00:05:11.199><c> has</c><00:05:11.600><c> a</c>

00:05:11.749 --> 00:05:11.759 align:start position:0%
it has a neighbor 0 and it also has a
 

00:05:11.759 --> 00:05:12.469 align:start position:0%
it has a neighbor 0 and it also has a
neighbor

00:05:12.469 --> 00:05:12.479 align:start position:0%
neighbor
 

00:05:12.479 --> 00:05:15.749 align:start position:0%
neighbor
4.<00:05:13.120><c> now</c><00:05:13.919><c> one</c><00:05:14.320><c> problem</c><00:05:14.639><c> with</c><00:05:14.880><c> our</c><00:05:15.039><c> algorithm</c><00:05:15.520><c> is</c>

00:05:15.749 --> 00:05:15.759 align:start position:0%
4. now one problem with our algorithm is
 

00:05:15.759 --> 00:05:19.110 align:start position:0%
4. now one problem with our algorithm is
for<00:05:16.000><c> every</c><00:05:16.560><c> node</c><00:05:17.280><c> including</c><00:05:17.919><c> 1</c><00:05:18.400><c> we're</c><00:05:18.639><c> always</c>

00:05:19.110 --> 00:05:19.120 align:start position:0%
for every node including 1 we're always
 

00:05:19.120 --> 00:05:20.230 align:start position:0%
for every node including 1 we're always
going<00:05:19.199><c> to</c><00:05:19.360><c> want</c><00:05:19.600><c> to</c><00:05:19.759><c> visit</c>

00:05:20.230 --> 00:05:20.240 align:start position:0%
going to want to visit
 

00:05:20.240 --> 00:05:22.469 align:start position:0%
going to want to visit
every<00:05:20.720><c> single</c><00:05:21.199><c> neighbor</c><00:05:21.600><c> it</c><00:05:21.680><c> has</c><00:05:22.080><c> we</c><00:05:22.320><c> know</c>

00:05:22.469 --> 00:05:22.479 align:start position:0%
every single neighbor it has we know
 

00:05:22.479 --> 00:05:23.270 align:start position:0%
every single neighbor it has we know
that<00:05:22.639><c> the</c><00:05:22.800><c> neighbor</c>

00:05:23.270 --> 00:05:23.280 align:start position:0%
that the neighbor
 

00:05:23.280 --> 00:05:26.230 align:start position:0%
that the neighbor
zero<00:05:23.680><c> has</c><00:05:24.000><c> already</c><00:05:24.639><c> been</c><00:05:25.039><c> visited</c><00:05:25.759><c> right</c><00:05:26.000><c> so</c>

00:05:26.230 --> 00:05:26.240 align:start position:0%
zero has already been visited right so
 

00:05:26.240 --> 00:05:27.590 align:start position:0%
zero has already been visited right so
if<00:05:26.400><c> we</c><00:05:26.639><c> end</c><00:05:26.880><c> up</c><00:05:27.039><c> going</c>

00:05:27.590 --> 00:05:27.600 align:start position:0%
if we end up going
 

00:05:27.600 --> 00:05:29.510 align:start position:0%
if we end up going
back<00:05:28.000><c> here</c><00:05:28.479><c> we're</c><00:05:28.639><c> gonna</c><00:05:28.880><c> see</c><00:05:29.120><c> okay</c><00:05:29.360><c> we're</c>

00:05:29.510 --> 00:05:29.520 align:start position:0%
back here we're gonna see okay we're
 

00:05:29.520 --> 00:05:30.950 align:start position:0%
back here we're gonna see okay we're
visiting<00:05:29.919><c> zero</c><00:05:30.320><c> again</c>

00:05:30.950 --> 00:05:30.960 align:start position:0%
visiting zero again
 

00:05:30.960 --> 00:05:33.350 align:start position:0%
visiting zero again
zero<00:05:31.360><c> happens</c><00:05:31.680><c> to</c><00:05:31.840><c> be</c><00:05:32.080><c> in</c><00:05:32.240><c> our</c><00:05:32.400><c> visit</c><00:05:32.800><c> set</c><00:05:33.120><c> so</c>

00:05:33.350 --> 00:05:33.360 align:start position:0%
zero happens to be in our visit set so
 

00:05:33.360 --> 00:05:35.110 align:start position:0%
zero happens to be in our visit set so
that<00:05:33.520><c> means</c><00:05:33.759><c> we</c><00:05:33.919><c> detected</c><00:05:34.479><c> a</c><00:05:34.720><c> loop</c>

00:05:35.110 --> 00:05:35.120 align:start position:0%
that means we detected a loop
 

00:05:35.120 --> 00:05:37.749 align:start position:0%
that means we detected a loop
but<00:05:35.520><c> technically</c><00:05:36.160><c> this</c><00:05:36.479><c> graph</c><00:05:36.880><c> does</c><00:05:37.199><c> not</c><00:05:37.520><c> have</c>

00:05:37.749 --> 00:05:37.759 align:start position:0%
but technically this graph does not have
 

00:05:37.759 --> 00:05:38.230 align:start position:0%
but technically this graph does not have
a

00:05:38.230 --> 00:05:38.240 align:start position:0%
a
 

00:05:38.240 --> 00:05:41.110 align:start position:0%
a
loop<00:05:38.720><c> so</c><00:05:38.960><c> how</c><00:05:39.120><c> can</c><00:05:39.280><c> we</c><00:05:39.600><c> get</c><00:05:39.919><c> around</c><00:05:40.479><c> this</c><00:05:40.800><c> edge</c>

00:05:41.110 --> 00:05:41.120 align:start position:0%
loop so how can we get around this edge
 

00:05:41.120 --> 00:05:41.749 align:start position:0%
loop so how can we get around this edge
case<00:05:41.440><c> if</c>

00:05:41.749 --> 00:05:41.759 align:start position:0%
case if
 

00:05:41.759 --> 00:05:44.469 align:start position:0%
case if
every<00:05:42.080><c> time</c><00:05:42.400><c> we</c><00:05:42.639><c> visit</c><00:05:42.960><c> a</c><00:05:43.120><c> node</c><00:05:43.680><c> like</c><00:05:44.080><c> one</c>

00:05:44.469 --> 00:05:44.479 align:start position:0%
every time we visit a node like one
 

00:05:44.479 --> 00:05:45.670 align:start position:0%
every time we visit a node like one
we're<00:05:44.639><c> going</c><00:05:44.720><c> to</c><00:05:44.880><c> end</c><00:05:45.120><c> up</c><00:05:45.199><c> going</c>

00:05:45.670 --> 00:05:45.680 align:start position:0%
we're going to end up going
 

00:05:45.680 --> 00:05:48.070 align:start position:0%
we're going to end up going
back<00:05:45.919><c> to</c><00:05:46.160><c> where</c><00:05:46.400><c> we</c><00:05:46.720><c> came</c><00:05:47.120><c> from</c><00:05:47.600><c> and</c><00:05:47.759><c> that's</c>

00:05:48.070 --> 00:05:48.080 align:start position:0%
back to where we came from and that's
 

00:05:48.080 --> 00:05:49.990 align:start position:0%
back to where we came from and that's
always<00:05:48.479><c> going</c><00:05:48.639><c> to</c><00:05:48.800><c> give</c><00:05:48.960><c> us</c><00:05:49.199><c> a</c><00:05:49.440><c> false</c>

00:05:49.990 --> 00:05:50.000 align:start position:0%
always going to give us a false
 

00:05:50.000 --> 00:05:52.390 align:start position:0%
always going to give us a false
positive<00:05:50.800><c> of</c><00:05:50.960><c> detecting</c><00:05:51.600><c> a</c><00:05:51.680><c> loop</c><00:05:52.160><c> it's</c><00:05:52.320><c> going</c>

00:05:52.390 --> 00:05:52.400 align:start position:0%
positive of detecting a loop it's going
 

00:05:52.400 --> 00:05:54.629 align:start position:0%
positive of detecting a loop it's going
to<00:05:52.479><c> be</c><00:05:52.639><c> a</c><00:05:52.800><c> false</c><00:05:53.280><c> positive</c><00:05:53.759><c> for</c><00:05:54.000><c> a</c><00:05:54.160><c> loop</c>

00:05:54.629 --> 00:05:54.639 align:start position:0%
to be a false positive for a loop
 

00:05:54.639 --> 00:05:56.950 align:start position:0%
to be a false positive for a loop
how<00:05:54.880><c> can</c><00:05:55.039><c> we</c><00:05:55.199><c> get</c><00:05:55.360><c> rid</c><00:05:55.520><c> of</c><00:05:55.680><c> that</c><00:05:56.080><c> well</c><00:05:56.560><c> every</c>

00:05:56.950 --> 00:05:56.960 align:start position:0%
how can we get rid of that well every
 

00:05:56.960 --> 00:05:58.629 align:start position:0%
how can we get rid of that well every
time<00:05:57.280><c> we</c><00:05:57.520><c> visit</c><00:05:57.840><c> a</c><00:05:57.919><c> node</c><00:05:58.319><c> such</c>

00:05:58.629 --> 00:05:58.639 align:start position:0%
time we visit a node such
 

00:05:58.639 --> 00:06:01.110 align:start position:0%
time we visit a node such
as<00:05:58.880><c> 1</c><00:05:59.280><c> what</c><00:05:59.440><c> we're</c><00:05:59.600><c> going</c><00:05:59.759><c> to</c><00:06:00.000><c> give</c><00:06:00.240><c> it</c><00:06:00.560><c> is</c><00:06:00.800><c> one</c>

00:06:01.110 --> 00:06:01.120 align:start position:0%
as 1 what we're going to give it is one
 

00:06:01.120 --> 00:06:02.390 align:start position:0%
as 1 what we're going to give it is one
additional<00:06:01.759><c> value</c>

00:06:02.390 --> 00:06:02.400 align:start position:0%
additional value
 

00:06:02.400 --> 00:06:05.029 align:start position:0%
additional value
and<00:06:02.479><c> that's</c><00:06:02.720><c> going</c><00:06:02.880><c> to</c><00:06:02.960><c> be</c><00:06:03.520><c> previous</c><00:06:04.479><c> previous</c>

00:06:05.029 --> 00:06:05.039 align:start position:0%
and that's going to be previous previous
 

00:06:05.039 --> 00:06:06.070 align:start position:0%
and that's going to be previous previous
is<00:06:05.120><c> gonna</c><00:06:05.360><c> be</c><00:06:05.600><c> what</c><00:06:05.759><c> the</c>

00:06:06.070 --> 00:06:06.080 align:start position:0%
is gonna be what the
 

00:06:06.080 --> 00:06:09.110 align:start position:0%
is gonna be what the
previous<00:06:06.800><c> node</c><00:06:07.199><c> we</c><00:06:07.520><c> just</c><00:06:08.000><c> visited</c><00:06:08.639><c> was</c>

00:06:09.110 --> 00:06:09.120 align:start position:0%
previous node we just visited was
 

00:06:09.120 --> 00:06:11.510 align:start position:0%
previous node we just visited was
so<00:06:09.280><c> when</c><00:06:09.520><c> we</c><00:06:09.600><c> get</c><00:06:09.759><c> to</c><00:06:10.080><c> one</c><00:06:10.639><c> we're</c><00:06:10.800><c> gonna</c><00:06:11.039><c> say</c>

00:06:11.510 --> 00:06:11.520 align:start position:0%
so when we get to one we're gonna say
 

00:06:11.520 --> 00:06:13.029 align:start position:0%
so when we get to one we're gonna say
the<00:06:11.840><c> previous</c><00:06:12.319><c> node</c><00:06:12.560><c> that</c><00:06:12.720><c> we</c>

00:06:13.029 --> 00:06:13.039 align:start position:0%
the previous node that we
 

00:06:13.039 --> 00:06:15.749 align:start position:0%
the previous node that we
visited<00:06:13.600><c> was</c><00:06:13.919><c> zero</c><00:06:14.560><c> so</c><00:06:14.720><c> we're</c><00:06:14.960><c> not</c><00:06:15.199><c> gonna</c><00:06:15.440><c> go</c>

00:06:15.749 --> 00:06:15.759 align:start position:0%
visited was zero so we're not gonna go
 

00:06:15.759 --> 00:06:16.230 align:start position:0%
visited was zero so we're not gonna go
back

00:06:16.230 --> 00:06:16.240 align:start position:0%
back
 

00:06:16.240 --> 00:06:19.670 align:start position:0%
back
to<00:06:16.479><c> zero</c><00:06:17.680><c> from</c><00:06:18.400><c> this</c><00:06:18.800><c> position</c><00:06:19.360><c> if</c><00:06:19.520><c> there</c>

00:06:19.670 --> 00:06:19.680 align:start position:0%
to zero from this position if there
 

00:06:19.680 --> 00:06:19.990 align:start position:0%
to zero from this position if there
happened

00:06:19.990 --> 00:06:20.000 align:start position:0%
happened
 

00:06:20.000 --> 00:06:21.590 align:start position:0%
happened
to<00:06:20.080><c> be</c><00:06:20.240><c> another</c><00:06:20.639><c> way</c><00:06:20.800><c> back</c><00:06:21.039><c> to</c><00:06:21.199><c> zero</c><00:06:21.440><c> for</c>

00:06:21.590 --> 00:06:21.600 align:start position:0%
to be another way back to zero for
 

00:06:21.600 --> 00:06:23.029 align:start position:0%
to be another way back to zero for
example<00:06:21.840><c> let's</c><00:06:22.000><c> say</c><00:06:22.400><c> four</c>

00:06:23.029 --> 00:06:23.039 align:start position:0%
example let's say four
 

00:06:23.039 --> 00:06:25.270 align:start position:0%
example let's say four
ended<00:06:23.280><c> up</c><00:06:23.440><c> connecting</c><00:06:23.919><c> to</c><00:06:24.080><c> zero</c><00:06:24.720><c> then</c><00:06:25.039><c> we</c>

00:06:25.270 --> 00:06:25.280 align:start position:0%
ended up connecting to zero then we
 

00:06:25.280 --> 00:06:27.270 align:start position:0%
ended up connecting to zero then we
would<00:06:25.520><c> detect</c><00:06:25.919><c> a</c><00:06:26.080><c> loop</c><00:06:26.400><c> right</c>

00:06:27.270 --> 00:06:27.280 align:start position:0%
would detect a loop right
 

00:06:27.280 --> 00:06:29.430 align:start position:0%
would detect a loop right
but<00:06:27.759><c> one</c><00:06:28.080><c> if</c><00:06:28.160><c> we</c><00:06:28.319><c> ever</c><00:06:28.560><c> got</c><00:06:28.800><c> to</c><00:06:28.960><c> four</c><00:06:29.199><c> we</c><00:06:29.280><c> would</c>

00:06:29.430 --> 00:06:29.440 align:start position:0%
but one if we ever got to four we would
 

00:06:29.440 --> 00:06:31.189 align:start position:0%
but one if we ever got to four we would
say<00:06:29.600><c> okay</c><00:06:29.840><c> the</c><00:06:30.000><c> previous</c><00:06:30.400><c> value</c>

00:06:31.189 --> 00:06:31.199 align:start position:0%
say okay the previous value
 

00:06:31.199 --> 00:06:33.990 align:start position:0%
say okay the previous value
from<00:06:31.600><c> four</c><00:06:32.000><c> will</c><00:06:32.160><c> happen</c><00:06:32.400><c> to</c><00:06:32.479><c> be</c><00:06:32.720><c> one</c><00:06:33.039><c> right</c><00:06:33.280><c> so</c>

00:06:33.990 --> 00:06:34.000 align:start position:0%
from four will happen to be one right so
 

00:06:34.000 --> 00:06:34.790 align:start position:0%
from four will happen to be one right so
this<00:06:34.240><c> four</c>

00:06:34.790 --> 00:06:34.800 align:start position:0%
this four
 

00:06:34.800 --> 00:06:37.909 align:start position:0%
this four
came<00:06:35.199><c> from</c><00:06:35.919><c> one</c><00:06:36.479><c> so</c><00:06:36.880><c> so</c><00:06:37.120><c> we</c><00:06:37.280><c> won't</c><00:06:37.440><c> get</c><00:06:37.600><c> any</c>

00:06:37.909 --> 00:06:37.919 align:start position:0%
came from one so so we won't get any
 

00:06:37.919 --> 00:06:40.390 align:start position:0%
came from one so so we won't get any
false<00:06:38.240><c> positives</c><00:06:38.800><c> if</c><00:06:38.960><c> we</c><00:06:39.120><c> do</c><00:06:39.360><c> it</c><00:06:39.440><c> like</c><00:06:39.680><c> this</c>

00:06:40.390 --> 00:06:40.400 align:start position:0%
false positives if we do it like this
 

00:06:40.400 --> 00:06:42.390 align:start position:0%
false positives if we do it like this
so<00:06:40.639><c> from</c><00:06:41.039><c> one</c><00:06:41.280><c> the</c><00:06:41.520><c> only</c><00:06:41.840><c> node</c><00:06:42.080><c> we're</c><00:06:42.240><c> gonna</c>

00:06:42.390 --> 00:06:42.400 align:start position:0%
so from one the only node we're gonna
 

00:06:42.400 --> 00:06:43.510 align:start position:0%
so from one the only node we're gonna
visit<00:06:42.800><c> is</c><00:06:42.960><c> gonna</c><00:06:43.120><c> be</c>

00:06:43.510 --> 00:06:43.520 align:start position:0%
visit is gonna be
 

00:06:43.520 --> 00:06:45.830 align:start position:0%
visit is gonna be
the<00:06:43.680><c> neighbor</c><00:06:44.240><c> four</c><00:06:44.560><c> so</c><00:06:45.120><c> yes</c><00:06:45.360><c> we're</c><00:06:45.520><c> gonna</c><00:06:45.680><c> go</c>

00:06:45.830 --> 00:06:45.840 align:start position:0%
the neighbor four so yes we're gonna go
 

00:06:45.840 --> 00:06:47.670 align:start position:0%
the neighbor four so yes we're gonna go
to<00:06:46.000><c> four</c><00:06:46.240><c> now</c><00:06:46.479><c> and</c><00:06:46.560><c> we're</c><00:06:46.720><c> gonna</c><00:06:46.880><c> see</c><00:06:47.120><c> okay</c><00:06:47.440><c> is</c>

00:06:47.670 --> 00:06:47.680 align:start position:0%
to four now and we're gonna see okay is
 

00:06:47.680 --> 00:06:48.070 align:start position:0%
to four now and we're gonna see okay is
4

00:06:48.070 --> 00:06:48.080 align:start position:0%
4
 

00:06:48.080 --> 00:06:50.469 align:start position:0%
4
already<00:06:48.560><c> visited</c><00:06:49.039><c> it's</c><00:06:49.360><c> not</c><00:06:49.599><c> so</c><00:06:49.840><c> let's</c><00:06:50.080><c> add</c><00:06:50.319><c> it</c>

00:06:50.469 --> 00:06:50.479 align:start position:0%
already visited it's not so let's add it
 

00:06:50.479 --> 00:06:51.589 align:start position:0%
already visited it's not so let's add it
to<00:06:50.560><c> the</c><00:06:50.720><c> visit</c><00:06:51.039><c> set</c><00:06:51.280><c> so</c>

00:06:51.589 --> 00:06:51.599 align:start position:0%
to the visit set so
 

00:06:51.599 --> 00:06:53.589 align:start position:0%
to the visit set so
4<00:06:52.000><c> is</c><00:06:52.080><c> going</c><00:06:52.160><c> to</c><00:06:52.240><c> be</c><00:06:52.479><c> added</c><00:06:52.880><c> as</c><00:06:53.039><c> a</c><00:06:53.120><c> node</c><00:06:53.440><c> that's</c>

00:06:53.589 --> 00:06:53.599 align:start position:0%
4 is going to be added as a node that's
 

00:06:53.599 --> 00:06:54.629 align:start position:0%
4 is going to be added as a node that's
been<00:06:53.840><c> visited</c>

00:06:54.629 --> 00:06:54.639 align:start position:0%
been visited
 

00:06:54.639 --> 00:06:57.909 align:start position:0%
been visited
now<00:06:55.360><c> we</c><00:06:55.520><c> know</c><00:06:55.759><c> the</c><00:06:56.000><c> previous</c><00:06:56.639><c> node</c><00:06:57.120><c> from</c><00:06:57.520><c> 4</c>

00:06:57.909 --> 00:06:57.919 align:start position:0%
now we know the previous node from 4
 

00:06:57.919 --> 00:06:59.909 align:start position:0%
now we know the previous node from 4
happened<00:06:58.240><c> to</c><00:06:58.400><c> be</c><00:06:58.800><c> 1</c><00:06:59.120><c> right</c><00:06:59.280><c> so</c><00:06:59.440><c> we're</c><00:06:59.680><c> never</c>

00:06:59.909 --> 00:06:59.919 align:start position:0%
happened to be 1 right so we're never
 

00:06:59.919 --> 00:07:02.629 align:start position:0%
happened to be 1 right so we're never
going<00:07:00.000><c> to</c><00:07:00.080><c> go</c><00:07:00.400><c> back</c><00:07:00.800><c> directly</c><00:07:01.520><c> to</c><00:07:01.759><c> 1</c>

00:07:02.629 --> 00:07:02.639 align:start position:0%
going to go back directly to 1
 

00:07:02.639 --> 00:07:03.990 align:start position:0%
going to go back directly to 1
we're<00:07:02.800><c> going</c><00:07:02.880><c> to</c><00:07:03.039><c> skip</c><00:07:03.360><c> that</c><00:07:03.599><c> and</c><00:07:03.759><c> we're</c><00:07:03.919><c> going</c>

00:07:03.990 --> 00:07:04.000 align:start position:0%
we're going to skip that and we're going
 

00:07:04.000 --> 00:07:06.390 align:start position:0%
we're going to skip that and we're going
to<00:07:04.080><c> check</c><00:07:04.319><c> does</c><00:07:04.800><c> 4</c><00:07:05.120><c> have</c><00:07:05.360><c> any</c><00:07:05.680><c> other</c><00:07:06.000><c> neighbors</c>

00:07:06.390 --> 00:07:06.400 align:start position:0%
to check does 4 have any other neighbors
 

00:07:06.400 --> 00:07:07.270 align:start position:0%
to check does 4 have any other neighbors
it<00:07:06.560><c> does</c><00:07:06.880><c> not</c>

00:07:07.270 --> 00:07:07.280 align:start position:0%
it does not
 

00:07:07.280 --> 00:07:09.110 align:start position:0%
it does not
so<00:07:07.520><c> this</c><00:07:07.680><c> is</c><00:07:07.759><c> going</c><00:07:07.919><c> to</c><00:07:08.000><c> be</c><00:07:08.080><c> our</c><00:07:08.319><c> base</c><00:07:08.639><c> case</c><00:07:08.880><c> for</c>

00:07:09.110 --> 00:07:09.120 align:start position:0%
so this is going to be our base case for
 

00:07:09.120 --> 00:07:10.390 align:start position:0%
so this is going to be our base case for
our<00:07:09.199><c> debt</c><00:07:09.440><c> for</c><00:07:09.680><c> search</c><00:07:10.080><c> we're</c><00:07:10.240><c> going</c><00:07:10.319><c> to</c>

00:07:10.390 --> 00:07:10.400 align:start position:0%
our debt for search we're going to
 

00:07:10.400 --> 00:07:10.950 align:start position:0%
our debt for search we're going to
return

00:07:10.950 --> 00:07:10.960 align:start position:0%
return
 

00:07:10.960 --> 00:07:13.990 align:start position:0%
return
true<00:07:11.599><c> because</c><00:07:12.000><c> so</c><00:07:12.400><c> far</c><00:07:12.880><c> we</c><00:07:13.039><c> have</c><00:07:13.440><c> not</c>

00:07:13.990 --> 00:07:14.000 align:start position:0%
true because so far we have not
 

00:07:14.000 --> 00:07:16.790 align:start position:0%
true because so far we have not
encountered<00:07:14.800><c> a</c><00:07:15.120><c> loop</c><00:07:15.599><c> so</c><00:07:15.759><c> we</c><00:07:15.919><c> can</c><00:07:16.080><c> return</c><00:07:16.479><c> true</c>

00:07:16.790 --> 00:07:16.800 align:start position:0%
encountered a loop so we can return true
 

00:07:16.800 --> 00:07:18.550 align:start position:0%
encountered a loop so we can return true
if<00:07:16.960><c> we</c><00:07:17.120><c> did</c><00:07:17.360><c> encounter</c><00:07:17.840><c> a</c><00:07:17.919><c> loop</c><00:07:18.160><c> then</c><00:07:18.319><c> we</c><00:07:18.479><c> would</c>

00:07:18.550 --> 00:07:18.560 align:start position:0%
if we did encounter a loop then we would
 

00:07:18.560 --> 00:07:20.309 align:start position:0%
if we did encounter a loop then we would
have<00:07:18.720><c> to</c><00:07:18.800><c> return</c><00:07:19.280><c> false</c><00:07:19.599><c> but</c><00:07:19.759><c> so</c><00:07:19.919><c> far</c><00:07:20.160><c> we're</c>

00:07:20.309 --> 00:07:20.319 align:start position:0%
have to return false but so far we're
 

00:07:20.319 --> 00:07:21.430 align:start position:0%
have to return false but so far we're
good<00:07:20.479><c> we're</c><00:07:20.639><c> gonna</c><00:07:20.880><c> return</c>

00:07:21.430 --> 00:07:21.440 align:start position:0%
good we're gonna return
 

00:07:21.440 --> 00:07:23.189 align:start position:0%
good we're gonna return
and<00:07:21.599><c> then</c><00:07:21.680><c> we're</c><00:07:21.840><c> gonna</c><00:07:22.000><c> get</c><00:07:22.160><c> to</c><00:07:22.400><c> one</c><00:07:22.800><c> and</c><00:07:22.960><c> from</c>

00:07:23.189 --> 00:07:23.199 align:start position:0%
and then we're gonna get to one and from
 

00:07:23.199 --> 00:07:25.029 align:start position:0%
and then we're gonna get to one and from
one<00:07:23.520><c> we</c><00:07:23.680><c> have</c><00:07:23.759><c> no</c><00:07:23.919><c> more</c><00:07:24.319><c> neighbors</c><00:07:24.720><c> left</c><00:07:24.960><c> to</c>

00:07:25.029 --> 00:07:25.039 align:start position:0%
one we have no more neighbors left to
 

00:07:25.039 --> 00:07:26.629 align:start position:0%
one we have no more neighbors left to
visit<00:07:25.360><c> either</c><00:07:25.520><c> so</c><00:07:25.680><c> then</c><00:07:25.840><c> we're</c><00:07:26.000><c> gonna</c><00:07:26.160><c> return</c>

00:07:26.629 --> 00:07:26.639 align:start position:0%
visit either so then we're gonna return
 

00:07:26.639 --> 00:07:29.270 align:start position:0%
visit either so then we're gonna return
back<00:07:26.880><c> to</c><00:07:27.120><c> zero</c><00:07:27.759><c> and</c><00:07:27.919><c> by</c><00:07:28.160><c> the</c><00:07:28.319><c> way</c><00:07:28.560><c> what</c><00:07:28.800><c> kind</c><00:07:29.039><c> of</c>

00:07:29.270 --> 00:07:29.280 align:start position:0%
back to zero and by the way what kind of
 

00:07:29.280 --> 00:07:30.790 align:start position:0%
back to zero and by the way what kind of
previous<00:07:29.919><c> value</c><00:07:30.319><c> would</c><00:07:30.479><c> we</c>

00:07:30.790 --> 00:07:30.800 align:start position:0%
previous value would we
 

00:07:30.800 --> 00:07:32.550 align:start position:0%
previous value would we
feed<00:07:31.199><c> into</c><00:07:31.599><c> zero</c><00:07:31.919><c> because</c><00:07:32.160><c> it's</c><00:07:32.240><c> going</c><00:07:32.319><c> to</c><00:07:32.400><c> be</c>

00:07:32.550 --> 00:07:32.560 align:start position:0%
feed into zero because it's going to be
 

00:07:32.560 --> 00:07:34.309 align:start position:0%
feed into zero because it's going to be
the<00:07:32.800><c> first</c><00:07:33.199><c> value</c><00:07:33.520><c> we</c><00:07:33.680><c> end</c><00:07:33.840><c> up</c>

00:07:34.309 --> 00:07:34.319 align:start position:0%
the first value we end up
 

00:07:34.319 --> 00:07:35.909 align:start position:0%
the first value we end up
it's<00:07:34.479><c> going</c><00:07:34.560><c> to</c><00:07:34.639><c> be</c><00:07:34.800><c> the</c><00:07:34.960><c> first</c><00:07:35.360><c> node</c><00:07:35.680><c> that</c><00:07:35.759><c> we</c>

00:07:35.909 --> 00:07:35.919 align:start position:0%
it's going to be the first node that we
 

00:07:35.919 --> 00:07:37.510 align:start position:0%
it's going to be the first node that we
end<00:07:36.080><c> up</c><00:07:36.240><c> visiting</c><00:07:36.800><c> so</c><00:07:36.960><c> we</c><00:07:37.120><c> can</c><00:07:37.199><c> give</c><00:07:37.360><c> it</c><00:07:37.440><c> a</c>

00:07:37.510 --> 00:07:37.520 align:start position:0%
end up visiting so we can give it a
 

00:07:37.520 --> 00:07:40.309 align:start position:0%
end up visiting so we can give it a
default<00:07:38.240><c> previous</c><00:07:38.720><c> value</c><00:07:39.120><c> of</c><00:07:39.360><c> negative</c><00:07:39.840><c> one</c>

00:07:40.309 --> 00:07:40.319 align:start position:0%
default previous value of negative one
 

00:07:40.319 --> 00:07:42.790 align:start position:0%
default previous value of negative one
because<00:07:40.560><c> we</c><00:07:40.800><c> know</c><00:07:41.039><c> that</c><00:07:41.360><c> no</c><00:07:41.759><c> nodes</c><00:07:42.319><c> in</c><00:07:42.479><c> the</c>

00:07:42.790 --> 00:07:42.800 align:start position:0%
because we know that no nodes in the
 

00:07:42.800 --> 00:07:44.629 align:start position:0%
because we know that no nodes in the
graph<00:07:43.199><c> are</c><00:07:43.360><c> actually</c><00:07:43.599><c> going</c><00:07:43.759><c> to</c><00:07:43.840><c> have</c><00:07:44.080><c> a</c><00:07:44.240><c> value</c>

00:07:44.629 --> 00:07:44.639 align:start position:0%
graph are actually going to have a value
 

00:07:44.639 --> 00:07:46.469 align:start position:0%
graph are actually going to have a value
of<00:07:44.720><c> negative</c><00:07:45.120><c> one</c><00:07:45.360><c> because</c><00:07:45.599><c> they</c><00:07:45.840><c> start</c><00:07:46.240><c> at</c>

00:07:46.469 --> 00:07:46.479 align:start position:0%
of negative one because they start at
 

00:07:46.479 --> 00:07:47.270 align:start position:0%
of negative one because they start at
zero

00:07:47.270 --> 00:07:47.280 align:start position:0%
zero
 

00:07:47.280 --> 00:07:48.950 align:start position:0%
zero
so<00:07:47.440><c> now</c><00:07:47.680><c> let's</c><00:07:47.840><c> go</c><00:07:48.000><c> to</c><00:07:48.080><c> the</c><00:07:48.160><c> next</c><00:07:48.479><c> neighbor</c><00:07:48.800><c> of</c>

00:07:48.950 --> 00:07:48.960 align:start position:0%
so now let's go to the next neighbor of
 

00:07:48.960 --> 00:07:50.950 align:start position:0%
so now let's go to the next neighbor of
zero<00:07:49.280><c> we'll</c><00:07:49.440><c> go</c><00:07:49.680><c> down</c><00:07:49.919><c> to</c><00:07:50.160><c> two</c>

00:07:50.950 --> 00:07:50.960 align:start position:0%
zero we'll go down to two
 

00:07:50.960 --> 00:07:52.950 align:start position:0%
zero we'll go down to two
okay<00:07:51.280><c> check</c><00:07:51.520><c> has</c><00:07:51.840><c> two</c><00:07:52.000><c> been</c><00:07:52.240><c> visited</c><00:07:52.720><c> it</c>

00:07:52.950 --> 00:07:52.960 align:start position:0%
okay check has two been visited it
 

00:07:52.960 --> 00:07:54.869 align:start position:0%
okay check has two been visited it
hasn't<00:07:53.280><c> so</c><00:07:53.440><c> let's</c><00:07:53.680><c> add</c><00:07:53.919><c> it</c><00:07:54.000><c> to</c><00:07:54.160><c> our</c><00:07:54.319><c> visit</c><00:07:54.639><c> set</c>

00:07:54.869 --> 00:07:54.879 align:start position:0%
hasn't so let's add it to our visit set
 

00:07:54.879 --> 00:07:56.150 align:start position:0%
hasn't so let's add it to our visit set
two<00:07:55.199><c> is</c><00:07:55.280><c> being</c><00:07:55.520><c> added</c>

00:07:56.150 --> 00:07:56.160 align:start position:0%
two is being added
 

00:07:56.160 --> 00:07:57.749 align:start position:0%
two is being added
now<00:07:56.400><c> two</c><00:07:56.639><c> does</c><00:07:56.800><c> not</c><00:07:56.960><c> have</c><00:07:57.120><c> any</c><00:07:57.280><c> additional</c>

00:07:57.749 --> 00:07:57.759 align:start position:0%
now two does not have any additional
 

00:07:57.759 --> 00:07:59.430 align:start position:0%
now two does not have any additional
neighbors<00:07:58.160><c> it</c><00:07:58.319><c> only</c><00:07:58.560><c> has</c><00:07:58.720><c> that</c><00:07:58.960><c> neighbor</c><00:07:59.280><c> that</c>

00:07:59.430 --> 00:07:59.440 align:start position:0%
neighbors it only has that neighbor that
 

00:07:59.440 --> 00:08:00.469 align:start position:0%
neighbors it only has that neighbor that
it<00:07:59.520><c> came</c><00:07:59.840><c> from</c>

00:08:00.469 --> 00:08:00.479 align:start position:0%
it came from
 

00:08:00.479 --> 00:08:02.150 align:start position:0%
it came from
node<00:08:00.800><c> zero</c><00:08:01.199><c> so</c><00:08:01.360><c> we're</c><00:08:01.680><c> we're</c><00:08:01.840><c> not</c><00:08:02.000><c> going</c><00:08:02.080><c> to</c>

00:08:02.150 --> 00:08:02.160 align:start position:0%
node zero so we're we're not going to
 

00:08:02.160 --> 00:08:03.990 align:start position:0%
node zero so we're we're not going to
keep<00:08:02.400><c> going</c><00:08:03.039><c> and</c><00:08:03.120><c> then</c><00:08:03.360><c> we're</c><00:08:03.520><c> gonna</c><00:08:03.680><c> go</c><00:08:03.840><c> to</c>

00:08:03.990 --> 00:08:04.000 align:start position:0%
keep going and then we're gonna go to
 

00:08:04.000 --> 00:08:06.230 align:start position:0%
keep going and then we're gonna go to
the<00:08:04.319><c> last</c><00:08:04.720><c> neighbor</c><00:08:05.120><c> of</c><00:08:05.280><c> zero</c><00:08:05.599><c> we're</c><00:08:05.759><c> gonna</c><00:08:06.000><c> go</c>

00:08:06.230 --> 00:08:06.240 align:start position:0%
the last neighbor of zero we're gonna go
 

00:08:06.240 --> 00:08:06.869 align:start position:0%
the last neighbor of zero we're gonna go
down<00:08:06.560><c> to</c>

00:08:06.869 --> 00:08:06.879 align:start position:0%
down to
 

00:08:06.879 --> 00:08:08.710 align:start position:0%
down to
three<00:08:07.360><c> and</c><00:08:07.520><c> once</c><00:08:07.759><c> again</c><00:08:08.080><c> check</c><00:08:08.319><c> has</c><00:08:08.479><c> three</c>

00:08:08.710 --> 00:08:08.720 align:start position:0%
three and once again check has three
 

00:08:08.720 --> 00:08:10.070 align:start position:0%
three and once again check has three
been<00:08:08.879><c> visited</c><00:08:09.360><c> it</c><00:08:09.520><c> hasn't</c>

00:08:10.070 --> 00:08:10.080 align:start position:0%
been visited it hasn't
 

00:08:10.080 --> 00:08:11.589 align:start position:0%
been visited it hasn't
so<00:08:10.240><c> then</c><00:08:10.400><c> we're</c><00:08:10.560><c> gonna</c><00:08:10.800><c> add</c><00:08:11.039><c> three</c><00:08:11.360><c> to</c><00:08:11.520><c> the</c>

00:08:11.589 --> 00:08:11.599 align:start position:0%
so then we're gonna add three to the
 

00:08:11.599 --> 00:08:13.270 align:start position:0%
so then we're gonna add three to the
visit<00:08:11.919><c> set</c><00:08:12.160><c> then</c><00:08:12.319><c> we're</c><00:08:12.479><c> gonna</c><00:08:12.639><c> go</c><00:08:12.800><c> back</c><00:08:13.039><c> to</c>

00:08:13.270 --> 00:08:13.280 align:start position:0%
visit set then we're gonna go back to
 

00:08:13.280 --> 00:08:13.749 align:start position:0%
visit set then we're gonna go back to
zero

00:08:13.749 --> 00:08:13.759 align:start position:0%
zero
 

00:08:13.759 --> 00:08:15.189 align:start position:0%
zero
and<00:08:13.840><c> then</c><00:08:14.080><c> zero</c><00:08:14.400><c> does</c><00:08:14.560><c> not</c><00:08:14.639><c> have</c><00:08:14.960><c> any</c>

00:08:15.189 --> 00:08:15.199 align:start position:0%
and then zero does not have any
 

00:08:15.199 --> 00:08:17.270 align:start position:0%
and then zero does not have any
additional<00:08:15.599><c> neighbors</c><00:08:16.160><c> so</c><00:08:16.319><c> now</c><00:08:16.479><c> we're</c><00:08:16.800><c> done</c>

00:08:17.270 --> 00:08:17.280 align:start position:0%
additional neighbors so now we're done
 

00:08:17.280 --> 00:08:19.990 align:start position:0%
additional neighbors so now we're done
we<00:08:17.520><c> didn't</c><00:08:17.840><c> detect</c><00:08:18.319><c> a</c><00:08:18.560><c> loop</c><00:08:18.879><c> so</c><00:08:19.199><c> that's</c><00:08:19.599><c> good</c>

00:08:19.990 --> 00:08:20.000 align:start position:0%
we didn't detect a loop so that's good
 

00:08:20.000 --> 00:08:21.749 align:start position:0%
we didn't detect a loop so that's good
but<00:08:20.240><c> let's</c><00:08:20.479><c> make</c><00:08:20.720><c> sure</c><00:08:20.960><c> that</c><00:08:21.120><c> the</c><00:08:21.280><c> graph</c>

00:08:21.749 --> 00:08:21.759 align:start position:0%
but let's make sure that the graph
 

00:08:21.759 --> 00:08:24.390 align:start position:0%
but let's make sure that the graph
is<00:08:22.000><c> connected</c><00:08:22.879><c> it</c><00:08:22.960><c> does</c><00:08:23.280><c> the</c><00:08:23.840><c> so</c><00:08:24.000><c> the</c><00:08:24.160><c> number</c>

00:08:24.390 --> 00:08:24.400 align:start position:0%
is connected it does the so the number
 

00:08:24.400 --> 00:08:26.070 align:start position:0%
is connected it does the so the number
of<00:08:24.639><c> input</c><00:08:24.879><c> nodes</c><00:08:25.120><c> we</c><00:08:25.199><c> were</c><00:08:25.360><c> given</c><00:08:25.680><c> is</c><00:08:25.840><c> always</c>

00:08:26.070 --> 00:08:26.080 align:start position:0%
of input nodes we were given is always
 

00:08:26.080 --> 00:08:27.670 align:start position:0%
of input nodes we were given is always
going<00:08:26.160><c> to</c><00:08:26.240><c> be</c><00:08:26.319><c> given</c><00:08:26.560><c> as</c><00:08:26.720><c> a</c><00:08:26.800><c> parameter</c><00:08:27.360><c> it</c><00:08:27.440><c> was</c>

00:08:27.670 --> 00:08:27.680 align:start position:0%
going to be given as a parameter it was
 

00:08:27.680 --> 00:08:27.909 align:start position:0%
going to be given as a parameter it was
n

00:08:27.909 --> 00:08:27.919 align:start position:0%
n
 

00:08:27.919 --> 00:08:30.390 align:start position:0%
n
equals<00:08:28.319><c> five</c><00:08:28.960><c> now</c><00:08:29.280><c> let's</c><00:08:29.520><c> check</c><00:08:29.759><c> the</c><00:08:30.000><c> length</c>

00:08:30.390 --> 00:08:30.400 align:start position:0%
equals five now let's check the length
 

00:08:30.400 --> 00:08:31.670 align:start position:0%
equals five now let's check the length
of<00:08:30.560><c> this</c><00:08:30.879><c> visit</c><00:08:31.280><c> set</c>

00:08:31.670 --> 00:08:31.680 align:start position:0%
of this visit set
 

00:08:31.680 --> 00:08:33.509 align:start position:0%
of this visit set
because<00:08:32.000><c> that</c><00:08:32.159><c> tells</c><00:08:32.399><c> us</c><00:08:32.560><c> how</c><00:08:32.719><c> many</c><00:08:32.880><c> nodes</c><00:08:33.279><c> are</c>

00:08:33.509 --> 00:08:33.519 align:start position:0%
because that tells us how many nodes are
 

00:08:33.519 --> 00:08:35.589 align:start position:0%
because that tells us how many nodes are
connected<00:08:34.080><c> and</c><00:08:34.240><c> it</c><00:08:34.320><c> happens</c><00:08:34.640><c> to</c><00:08:34.880><c> exactly</c><00:08:35.279><c> be</c>

00:08:35.589 --> 00:08:35.599 align:start position:0%
connected and it happens to exactly be
 

00:08:35.599 --> 00:08:38.070 align:start position:0%
connected and it happens to exactly be
five<00:08:35.919><c> right</c><00:08:36.159><c> so</c><00:08:37.039><c> in</c><00:08:37.120><c> this</c><00:08:37.279><c> case</c><00:08:37.599><c> we</c><00:08:37.760><c> are</c><00:08:37.919><c> going</c>

00:08:38.070 --> 00:08:38.080 align:start position:0%
five right so in this case we are going
 

00:08:38.080 --> 00:08:39.670 align:start position:0%
five right so in this case we are going
to<00:08:38.240><c> end</c><00:08:38.399><c> up</c><00:08:38.479><c> returning</c><00:08:39.039><c> true</c>

00:08:39.670 --> 00:08:39.680 align:start position:0%
to end up returning true
 

00:08:39.680 --> 00:08:41.909 align:start position:0%
to end up returning true
now<00:08:39.919><c> if</c><00:08:40.080><c> i</c><00:08:40.320><c> change</c><00:08:40.719><c> the</c><00:08:40.880><c> graph</c><00:08:41.200><c> let's</c><00:08:41.440><c> say</c><00:08:41.680><c> this</c>

00:08:41.909 --> 00:08:41.919 align:start position:0%
now if i change the graph let's say this
 

00:08:41.919 --> 00:08:43.029 align:start position:0%
now if i change the graph let's say this
edge<00:08:42.159><c> did</c><00:08:42.320><c> not</c><00:08:42.560><c> exist</c>

00:08:43.029 --> 00:08:43.039 align:start position:0%
edge did not exist
 

00:08:43.039 --> 00:08:45.030 align:start position:0%
edge did not exist
of<00:08:43.200><c> course</c><00:08:43.440><c> then</c><00:08:43.680><c> we</c><00:08:43.839><c> would</c><00:08:44.080><c> not</c><00:08:44.320><c> have</c><00:08:44.560><c> visited</c>

00:08:45.030 --> 00:08:45.040 align:start position:0%
of course then we would not have visited
 

00:08:45.040 --> 00:08:46.310 align:start position:0%
of course then we would not have visited
this<00:08:45.360><c> three</c><00:08:45.680><c> node</c>

00:08:46.310 --> 00:08:46.320 align:start position:0%
this three node
 

00:08:46.320 --> 00:08:47.910 align:start position:0%
this three node
then<00:08:46.880><c> you</c><00:08:47.040><c> know</c><00:08:47.120><c> the</c><00:08:47.279><c> length</c><00:08:47.519><c> of</c><00:08:47.680><c> our</c><00:08:47.760><c> set</c>

00:08:47.910 --> 00:08:47.920 align:start position:0%
then you know the length of our set
 

00:08:47.920 --> 00:08:49.430 align:start position:0%
then you know the length of our set
would<00:08:48.080><c> have</c><00:08:48.240><c> been</c><00:08:48.480><c> four</c><00:08:48.880><c> but</c><00:08:49.040><c> the</c>

00:08:49.430 --> 00:08:49.440 align:start position:0%
would have been four but the
 

00:08:49.440 --> 00:08:52.389 align:start position:0%
would have been four but the
n<00:08:49.760><c> value</c><00:08:50.160><c> was</c><00:08:50.480><c> five</c><00:08:51.040><c> so</c><00:08:51.200><c> does</c><00:08:51.519><c> n</c><00:08:51.760><c> equal</c><00:08:52.080><c> four</c>

00:08:52.389 --> 00:08:52.399 align:start position:0%
n value was five so does n equal four
 

00:08:52.399 --> 00:08:54.230 align:start position:0%
n value was five so does n equal four
the<00:08:52.560><c> size</c><00:08:52.800><c> of</c><00:08:52.959><c> our</c><00:08:53.040><c> visit</c><00:08:53.360><c> set</c><00:08:53.680><c> no</c>

00:08:54.230 --> 00:08:54.240 align:start position:0%
the size of our visit set no
 

00:08:54.240 --> 00:08:56.470 align:start position:0%
the size of our visit set no
that<00:08:54.399><c> does</c><00:08:54.640><c> not</c><00:08:55.040><c> match</c><00:08:55.519><c> right</c><00:08:55.760><c> so</c><00:08:56.000><c> therefore</c>

00:08:56.470 --> 00:08:56.480 align:start position:0%
that does not match right so therefore
 

00:08:56.480 --> 00:08:57.910 align:start position:0%
that does not match right so therefore
in<00:08:56.560><c> this</c><00:08:56.720><c> case</c><00:08:56.880><c> we</c><00:08:57.040><c> would</c><00:08:57.120><c> have</c><00:08:57.279><c> to</c><00:08:57.360><c> return</c>

00:08:57.910 --> 00:08:57.920 align:start position:0%
in this case we would have to return
 

00:08:57.920 --> 00:09:00.949 align:start position:0%
in this case we would have to return
false<00:08:58.320><c> we</c><00:08:58.560><c> didn't</c><00:08:58.880><c> detect</c><00:08:59.279><c> a</c><00:08:59.440><c> loop</c><00:09:00.160><c> but</c>

00:09:00.949 --> 00:09:00.959 align:start position:0%
false we didn't detect a loop but
 

00:09:00.959 --> 00:09:03.110 align:start position:0%
false we didn't detect a loop but
the<00:09:01.120><c> graph</c><00:09:01.519><c> is</c><00:09:01.760><c> not</c><00:09:02.080><c> connected</c><00:09:02.560><c> so</c><00:09:02.720><c> we</c><00:09:02.880><c> have</c><00:09:02.959><c> to</c>

00:09:03.110 --> 00:09:03.120 align:start position:0%
the graph is not connected so we have to
 

00:09:03.120 --> 00:09:05.190 align:start position:0%
the graph is not connected so we have to
return<00:09:03.519><c> false</c><00:09:03.839><c> because</c><00:09:04.080><c> it's</c><00:09:04.320><c> not</c><00:09:04.560><c> a</c><00:09:04.720><c> valid</c>

00:09:05.190 --> 00:09:05.200 align:start position:0%
return false because it's not a valid
 

00:09:05.200 --> 00:09:05.990 align:start position:0%
return false because it's not a valid
tree

00:09:05.990 --> 00:09:06.000 align:start position:0%
tree
 

00:09:06.000 --> 00:09:07.910 align:start position:0%
tree
and<00:09:06.240><c> similarly</c><00:09:06.880><c> let's</c><00:09:07.040><c> say</c><00:09:07.200><c> we</c><00:09:07.440><c> had</c><00:09:07.760><c> an</c>

00:09:07.910 --> 00:09:07.920 align:start position:0%
and similarly let's say we had an
 

00:09:07.920 --> 00:09:09.190 align:start position:0%
and similarly let's say we had an
additional<00:09:08.480><c> node</c><00:09:08.800><c> from</c>

00:09:09.190 --> 00:09:09.200 align:start position:0%
additional node from
 

00:09:09.200 --> 00:09:11.590 align:start position:0%
additional node from
four<00:09:09.760><c> to</c><00:09:10.000><c> zero</c><00:09:10.399><c> then</c><00:09:10.640><c> in</c><00:09:10.800><c> our</c><00:09:10.959><c> debt</c><00:09:11.120><c> for</c><00:09:11.279><c> search</c>

00:09:11.590 --> 00:09:11.600 align:start position:0%
four to zero then in our debt for search
 

00:09:11.600 --> 00:09:12.630 align:start position:0%
four to zero then in our debt for search
what<00:09:11.760><c> we</c><00:09:11.920><c> would</c><00:09:12.080><c> have</c><00:09:12.320><c> done</c>

00:09:12.630 --> 00:09:12.640 align:start position:0%
what we would have done
 

00:09:12.640 --> 00:09:14.790 align:start position:0%
what we would have done
is<00:09:12.959><c> okay</c><00:09:13.200><c> we</c><00:09:13.440><c> have</c><00:09:13.600><c> gone</c><00:09:14.000><c> to</c><00:09:14.160><c> zero</c><00:09:14.560><c> and</c><00:09:14.640><c> then</c>

00:09:14.790 --> 00:09:14.800 align:start position:0%
is okay we have gone to zero and then
 

00:09:14.800 --> 00:09:16.470 align:start position:0%
is okay we have gone to zero and then
we're<00:09:15.040><c> visiting</c><00:09:15.440><c> zero</c><00:09:15.760><c> so</c><00:09:15.920><c> we</c><00:09:16.160><c> check</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
we're visiting zero so we check
 

00:09:16.480 --> 00:09:19.350 align:start position:0%
we're visiting zero so we check
is<00:09:16.720><c> zero</c><00:09:17.200><c> already</c><00:09:17.600><c> in</c><00:09:17.760><c> our</c><00:09:17.839><c> visit</c><00:09:18.240><c> set</c><00:09:18.800><c> yes</c><00:09:19.120><c> it</c>

00:09:19.350 --> 00:09:19.360 align:start position:0%
is zero already in our visit set yes it
 

00:09:19.360 --> 00:09:21.430 align:start position:0%
is zero already in our visit set yes it
is<00:09:19.680><c> zero</c><00:09:20.080><c> is</c><00:09:20.320><c> right</c><00:09:20.560><c> here</c><00:09:20.959><c> so</c><00:09:21.120><c> that</c><00:09:21.200><c> means</c>

00:09:21.430 --> 00:09:21.440 align:start position:0%
is zero is right here so that means
 

00:09:21.440 --> 00:09:21.990 align:start position:0%
is zero is right here so that means
we're<00:09:21.600><c> visiting</c>

00:09:21.990 --> 00:09:22.000 align:start position:0%
we're visiting
 

00:09:22.000 --> 00:09:23.829 align:start position:0%
we're visiting
it<00:09:22.080><c> twice</c><00:09:22.399><c> that</c><00:09:22.560><c> means</c><00:09:22.720><c> we</c><00:09:22.880><c> detected</c><00:09:23.360><c> a</c><00:09:23.519><c> loop</c>

00:09:23.829 --> 00:09:23.839 align:start position:0%
it twice that means we detected a loop
 

00:09:23.839 --> 00:09:25.269 align:start position:0%
it twice that means we detected a loop
that<00:09:24.000><c> means</c><00:09:24.240><c> we</c><00:09:24.399><c> return</c><00:09:24.800><c> false</c>

00:09:25.269 --> 00:09:25.279 align:start position:0%
that means we return false
 

00:09:25.279 --> 00:09:27.829 align:start position:0%
that means we return false
immediately<00:09:26.240><c> so</c><00:09:26.399><c> that's</c><00:09:26.720><c> the</c><00:09:26.959><c> main</c><00:09:27.360><c> idea</c><00:09:27.760><c> of</c>

00:09:27.829 --> 00:09:27.839 align:start position:0%
immediately so that's the main idea of
 

00:09:27.839 --> 00:09:28.870 align:start position:0%
immediately so that's the main idea of
this<00:09:28.160><c> algorithm</c>

00:09:28.870 --> 00:09:28.880 align:start position:0%
this algorithm
 

00:09:28.880 --> 00:09:31.269 align:start position:0%
this algorithm
now<00:09:29.120><c> the</c><00:09:29.279><c> time</c><00:09:29.519><c> complexity</c><00:09:30.080><c> since</c><00:09:30.320><c> we're</c><00:09:30.640><c> only</c>

00:09:31.269 --> 00:09:31.279 align:start position:0%
now the time complexity since we're only
 

00:09:31.279 --> 00:09:33.190 align:start position:0%
now the time complexity since we're only
you<00:09:31.440><c> know</c><00:09:31.600><c> having</c><00:09:31.839><c> to</c><00:09:32.000><c> traverse</c><00:09:32.480><c> each</c><00:09:32.720><c> node</c>

00:09:33.190 --> 00:09:33.200 align:start position:0%
you know having to traverse each node
 

00:09:33.200 --> 00:09:36.550 align:start position:0%
you know having to traverse each node
once<00:09:33.680><c> at</c><00:09:33.920><c> most</c><00:09:34.399><c> once</c><00:09:34.800><c> and</c><00:09:34.959><c> each</c><00:09:35.360><c> edge</c><00:09:35.920><c> at</c><00:09:36.160><c> most</c>

00:09:36.550 --> 00:09:36.560 align:start position:0%
once at most once and each edge at most
 

00:09:36.560 --> 00:09:37.110 align:start position:0%
once at most once and each edge at most
once

00:09:37.110 --> 00:09:37.120 align:start position:0%
once
 

00:09:37.120 --> 00:09:39.190 align:start position:0%
once
the<00:09:37.360><c> overall</c><00:09:37.680><c> time</c><00:09:37.920><c> complexity</c><00:09:38.720><c> is</c><00:09:38.880><c> going</c><00:09:39.040><c> to</c>

00:09:39.190 --> 00:09:39.200 align:start position:0%
the overall time complexity is going to
 

00:09:39.200 --> 00:09:40.630 align:start position:0%
the overall time complexity is going to
be<00:09:39.519><c> number</c><00:09:39.760><c> of</c><00:09:40.000><c> edges</c>

00:09:40.630 --> 00:09:40.640 align:start position:0%
be number of edges
 

00:09:40.640 --> 00:09:43.350 align:start position:0%
be number of edges
plus<00:09:40.959><c> the</c><00:09:41.120><c> number</c><00:09:41.440><c> of</c><00:09:41.760><c> vertices</c><00:09:42.480><c> or</c><00:09:42.720><c> nodes</c><00:09:43.120><c> so</c>

00:09:43.350 --> 00:09:43.360 align:start position:0%
plus the number of vertices or nodes so
 

00:09:43.360 --> 00:09:43.910 align:start position:0%
plus the number of vertices or nodes so
just<00:09:43.600><c> e</c>

00:09:43.910 --> 00:09:43.920 align:start position:0%
just e
 

00:09:43.920 --> 00:09:46.550 align:start position:0%
just e
plus<00:09:44.240><c> v</c><00:09:44.959><c> and</c><00:09:45.040><c> that's</c><00:09:45.440><c> also</c><00:09:45.839><c> going</c><00:09:46.080><c> to</c>

00:09:46.550 --> 00:09:46.560 align:start position:0%
plus v and that's also going to
 

00:09:46.560 --> 00:09:48.949 align:start position:0%
plus v and that's also going to
basically<00:09:47.120><c> be</c><00:09:47.360><c> the</c><00:09:47.680><c> memory</c><00:09:48.000><c> complexity</c><00:09:48.720><c> as</c>

00:09:48.949 --> 00:09:48.959 align:start position:0%
basically be the memory complexity as
 

00:09:48.959 --> 00:09:49.350 align:start position:0%
basically be the memory complexity as
well

00:09:49.350 --> 00:09:49.360 align:start position:0%
well
 

00:09:49.360 --> 00:09:51.190 align:start position:0%
well
because<00:09:50.160><c> this</c><00:09:50.399><c> is</c><00:09:50.560><c> we're</c><00:09:50.720><c> going</c><00:09:50.800><c> to</c><00:09:50.880><c> be</c><00:09:50.959><c> doing</c>

00:09:51.190 --> 00:09:51.200 align:start position:0%
because this is we're going to be doing
 

00:09:51.200 --> 00:09:52.710 align:start position:0%
because this is we're going to be doing
this<00:09:51.360><c> recursively</c>

00:09:52.710 --> 00:09:52.720 align:start position:0%
this recursively
 

00:09:52.720 --> 00:09:54.070 align:start position:0%
this recursively
and<00:09:52.880><c> we're</c><00:09:53.040><c> also</c><00:09:53.360><c> going</c><00:09:53.440><c> to</c><00:09:53.519><c> be</c><00:09:53.680><c> needing</c><00:09:53.920><c> to</c>

00:09:54.070 --> 00:09:54.080 align:start position:0%
and we're also going to be needing to
 

00:09:54.080 --> 00:09:56.150 align:start position:0%
and we're also going to be needing to
create<00:09:54.560><c> an</c><00:09:54.720><c> adjacency</c><00:09:55.519><c> list</c>

00:09:56.150 --> 00:09:56.160 align:start position:0%
create an adjacency list
 

00:09:56.160 --> 00:09:58.790 align:start position:0%
create an adjacency list
of<00:09:56.880><c> connecting</c><00:09:57.519><c> every</c><00:09:57.760><c> single</c><00:09:58.080><c> node</c><00:09:58.399><c> to</c><00:09:58.640><c> all</c>

00:09:58.790 --> 00:09:58.800 align:start position:0%
of connecting every single node to all
 

00:09:58.800 --> 00:09:59.750 align:start position:0%
of connecting every single node to all
of<00:09:58.880><c> its</c><00:09:59.120><c> neighbors</c>

00:09:59.750 --> 00:09:59.760 align:start position:0%
of its neighbors
 

00:09:59.760 --> 00:10:02.069 align:start position:0%
of its neighbors
and<00:09:59.920><c> i</c><00:10:00.080><c> think</c><00:10:00.240><c> it'll</c><00:10:00.480><c> be</c><00:10:01.279><c> if</c><00:10:01.440><c> it's</c><00:10:01.600><c> not</c><00:10:01.760><c> super</c>

00:10:02.069 --> 00:10:02.079 align:start position:0%
and i think it'll be if it's not super
 

00:10:02.079 --> 00:10:03.590 align:start position:0%
and i think it'll be if it's not super
clear<00:10:02.399><c> right</c><00:10:02.560><c> now</c><00:10:02.720><c> i</c><00:10:02.800><c> think</c><00:10:02.959><c> it'll</c><00:10:03.200><c> be</c><00:10:03.360><c> pretty</c>

00:10:03.590 --> 00:10:03.600 align:start position:0%
clear right now i think it'll be pretty
 

00:10:03.600 --> 00:10:05.350 align:start position:0%
clear right now i think it'll be pretty
clear<00:10:03.839><c> once</c><00:10:04.160><c> i</c><00:10:04.240><c> show</c><00:10:04.399><c> you</c><00:10:04.560><c> the</c><00:10:04.640><c> code</c><00:10:04.959><c> it's</c><00:10:05.120><c> not</c>

00:10:05.350 --> 00:10:05.360 align:start position:0%
clear once i show you the code it's not
 

00:10:05.360 --> 00:10:07.110 align:start position:0%
clear once i show you the code it's not
too<00:10:05.519><c> bad</c><00:10:05.760><c> let's</c><00:10:06.000><c> get</c><00:10:06.240><c> into</c><00:10:06.560><c> it</c>

00:10:07.110 --> 00:10:07.120 align:start position:0%
too bad let's get into it
 

00:10:07.120 --> 00:10:10.150 align:start position:0%
too bad let's get into it
so<00:10:07.360><c> one</c><00:10:07.680><c> base</c><00:10:08.000><c> case</c><00:10:08.480><c> is</c><00:10:08.720><c> if</c><00:10:09.120><c> we</c><00:10:09.360><c> aren't</c><00:10:09.680><c> given</c>

00:10:10.150 --> 00:10:10.160 align:start position:0%
so one base case is if we aren't given
 

00:10:10.160 --> 00:10:13.269 align:start position:0%
so one base case is if we aren't given
any<00:10:10.399><c> nodes</c><00:10:10.880><c> at</c><00:10:11.120><c> all</c><00:10:11.440><c> so</c><00:10:11.680><c> if</c><00:10:11.920><c> n</c><00:10:12.079><c> was</c><00:10:12.320><c> zero</c><00:10:12.720><c> so</c>

00:10:13.269 --> 00:10:13.279 align:start position:0%
any nodes at all so if n was zero so
 

00:10:13.279 --> 00:10:14.949 align:start position:0%
any nodes at all so if n was zero so
in<00:10:13.360><c> that</c><00:10:13.519><c> case</c><00:10:13.760><c> we</c><00:10:13.920><c> would</c><00:10:14.160><c> return</c><00:10:14.560><c> true</c>

00:10:14.949 --> 00:10:14.959 align:start position:0%
in that case we would return true
 

00:10:14.959 --> 00:10:17.030 align:start position:0%
in that case we would return true
there's<00:10:15.200><c> no</c><00:10:15.440><c> graph</c><00:10:15.839><c> to</c><00:10:16.000><c> traverse</c>

00:10:17.030 --> 00:10:17.040 align:start position:0%
there's no graph to traverse
 

00:10:17.040 --> 00:10:19.670 align:start position:0%
there's no graph to traverse
but<00:10:17.680><c> an</c><00:10:18.000><c> empty</c><00:10:18.320><c> graph</c><00:10:18.720><c> does</c><00:10:19.120><c> technically</c>

00:10:19.670 --> 00:10:19.680 align:start position:0%
but an empty graph does technically
 

00:10:19.680 --> 00:10:20.069 align:start position:0%
but an empty graph does technically
count

00:10:20.069 --> 00:10:20.079 align:start position:0%
count
 

00:10:20.079 --> 00:10:23.269 align:start position:0%
count
as<00:10:20.480><c> a</c><00:10:21.279><c> tree</c><00:10:22.160><c> and</c><00:10:22.880><c> if</c>

00:10:23.269 --> 00:10:23.279 align:start position:0%
as a tree and if
 

00:10:23.279 --> 00:10:24.790 align:start position:0%
as a tree and if
we<00:10:23.440><c> do</c><00:10:23.680><c> have</c><00:10:23.920><c> some</c><00:10:24.079><c> nodes</c><00:10:24.399><c> then</c><00:10:24.560><c> we're</c><00:10:24.720><c> going</c>

00:10:24.790 --> 00:10:24.800 align:start position:0%
we do have some nodes then we're going
 

00:10:24.800 --> 00:10:26.710 align:start position:0%
we do have some nodes then we're going
to<00:10:24.880><c> create</c><00:10:25.200><c> an</c><00:10:25.360><c> adjacency</c><00:10:26.000><c> list</c><00:10:26.240><c> so</c>

00:10:26.710 --> 00:10:26.720 align:start position:0%
to create an adjacency list so
 

00:10:26.720 --> 00:10:28.790 align:start position:0%
to create an adjacency list so
what<00:10:26.880><c> i'm</c><00:10:27.040><c> going</c><00:10:27.120><c> to</c><00:10:27.200><c> do</c><00:10:27.440><c> isn't</c><00:10:27.839><c> first</c><00:10:28.079><c> of</c><00:10:28.240><c> all</c>

00:10:28.790 --> 00:10:28.800 align:start position:0%
what i'm going to do isn't first of all
 

00:10:28.800 --> 00:10:30.710 align:start position:0%
what i'm going to do isn't first of all
for<00:10:28.959><c> every</c><00:10:29.200><c> single</c><00:10:29.680><c> node</c>

00:10:30.710 --> 00:10:30.720 align:start position:0%
for every single node
 

00:10:30.720 --> 00:10:33.030 align:start position:0%
for every single node
in<00:10:31.040><c> our</c><00:10:31.279><c> input</c><00:10:31.519><c> so</c><00:10:31.760><c> basically</c><00:10:32.320><c> n</c><00:10:32.720><c> is</c><00:10:32.880><c> the</c>

00:10:33.030 --> 00:10:33.040 align:start position:0%
in our input so basically n is the
 

00:10:33.040 --> 00:10:34.230 align:start position:0%
in our input so basically n is the
number<00:10:33.279><c> of</c><00:10:33.440><c> nodes</c>

00:10:34.230 --> 00:10:34.240 align:start position:0%
number of nodes
 

00:10:34.240 --> 00:10:37.990 align:start position:0%
number of nodes
so<00:10:34.480><c> for</c><00:10:34.720><c> i</c><00:10:35.120><c> in</c><00:10:35.519><c> range</c><00:10:36.320><c> n</c><00:10:36.959><c> i'm</c><00:10:37.200><c> going</c><00:10:37.360><c> to</c><00:10:37.600><c> create</c>

00:10:37.990 --> 00:10:38.000 align:start position:0%
so for i in range n i'm going to create
 

00:10:38.000 --> 00:10:38.710 align:start position:0%
so for i in range n i'm going to create
a<00:10:38.160><c> pair</c>

00:10:38.710 --> 00:10:38.720 align:start position:0%
a pair
 

00:10:38.720 --> 00:10:41.430 align:start position:0%
a pair
in<00:10:38.959><c> our</c><00:10:39.120><c> hash</c><00:10:39.440><c> map</c><00:10:40.079><c> and</c><00:10:40.640><c> each</c><00:10:40.880><c> pair</c><00:10:41.200><c> is</c><00:10:41.279><c> going</c>

00:10:41.430 --> 00:10:41.440 align:start position:0%
in our hash map and each pair is going
 

00:10:41.440 --> 00:10:41.910 align:start position:0%
in our hash map and each pair is going
to<00:10:41.600><c> be</c>

00:10:41.910 --> 00:10:41.920 align:start position:0%
to be
 

00:10:41.920 --> 00:10:44.630 align:start position:0%
to be
the<00:10:42.079><c> value</c><00:10:42.480><c> of</c><00:10:42.560><c> that</c><00:10:42.800><c> node</c><00:10:43.279><c> and</c><00:10:43.440><c> an</c><00:10:43.760><c> empty</c><00:10:44.240><c> list</c>

00:10:44.630 --> 00:10:44.640 align:start position:0%
the value of that node and an empty list
 

00:10:44.640 --> 00:10:45.590 align:start position:0%
the value of that node and an empty list
initially

00:10:45.590 --> 00:10:45.600 align:start position:0%
initially
 

00:10:45.600 --> 00:10:47.590 align:start position:0%
initially
and<00:10:45.680><c> then</c><00:10:45.920><c> i'm</c><00:10:46.079><c> going</c><00:10:46.160><c> to</c><00:10:46.320><c> go</c><00:10:46.640><c> through</c><00:10:47.120><c> every</c>

00:10:47.590 --> 00:10:47.600 align:start position:0%
and then i'm going to go through every
 

00:10:47.600 --> 00:10:48.870 align:start position:0%
and then i'm going to go through every
pair<00:10:48.079><c> of</c>

00:10:48.870 --> 00:10:48.880 align:start position:0%
pair of
 

00:10:48.880 --> 00:10:52.150 align:start position:0%
pair of
nodes<00:10:49.519><c> in</c><00:10:50.480><c> every</c><00:10:50.720><c> single</c><00:10:51.120><c> edge</c><00:10:51.600><c> so</c>

00:10:52.150 --> 00:10:52.160 align:start position:0%
nodes in every single edge so
 

00:10:52.160 --> 00:10:53.990 align:start position:0%
nodes in every single edge so
an<00:10:52.399><c> edge</c><00:10:52.720><c> is</c><00:10:52.800><c> basically</c><00:10:53.279><c> a</c><00:10:53.360><c> pair</c><00:10:53.519><c> of</c><00:10:53.680><c> nodes</c>

00:10:53.990 --> 00:10:54.000 align:start position:0%
an edge is basically a pair of nodes
 

00:10:54.000 --> 00:10:55.269 align:start position:0%
an edge is basically a pair of nodes
being<00:10:54.160><c> connected</c><00:10:54.640><c> right</c><00:10:54.800><c> so</c><00:10:54.959><c> what</c><00:10:55.040><c> i'm</c><00:10:55.200><c> going</c>

00:10:55.269 --> 00:10:55.279 align:start position:0%
being connected right so what i'm going
 

00:10:55.279 --> 00:10:55.750 align:start position:0%
being connected right so what i'm going
to<00:10:55.360><c> say</c>

00:10:55.750 --> 00:10:55.760 align:start position:0%
to say
 

00:10:55.760 --> 00:10:58.470 align:start position:0%
to say
is<00:10:56.160><c> and</c><00:10:56.320><c> remember</c><00:10:56.720><c> these</c><00:10:56.959><c> edges</c><00:10:57.440><c> are</c><00:10:58.160><c> not</c>

00:10:58.470 --> 00:10:58.480 align:start position:0%
is and remember these edges are not
 

00:10:58.480 --> 00:11:00.069 align:start position:0%
is and remember these edges are not
directed<00:10:59.120><c> so</c><00:10:59.279><c> they</c><00:10:59.519><c> go</c><00:10:59.680><c> both</c>

00:11:00.069 --> 00:11:00.079 align:start position:0%
directed so they go both
 

00:11:00.079 --> 00:11:03.670 align:start position:0%
directed so they go both
ways<00:11:00.560><c> so</c><00:11:01.120><c> for</c><00:11:01.519><c> the</c><00:11:01.760><c> adjacency</c><00:11:02.399><c> list</c><00:11:02.720><c> of</c><00:11:02.959><c> n1</c>

00:11:03.670 --> 00:11:03.680 align:start position:0%
ways so for the adjacency list of n1
 

00:11:03.680 --> 00:11:07.910 align:start position:0%
ways so for the adjacency list of n1
i'm<00:11:03.839><c> gonna</c><00:11:04.079><c> append</c><00:11:05.519><c> n2</c><00:11:06.640><c> to</c><00:11:06.880><c> that</c><00:11:07.200><c> list</c><00:11:07.600><c> and</c>

00:11:07.910 --> 00:11:07.920 align:start position:0%
i'm gonna append n2 to that list and
 

00:11:07.920 --> 00:11:11.350 align:start position:0%
i'm gonna append n2 to that list and
similarly<00:11:08.480><c> for</c><00:11:08.640><c> the</c><00:11:08.800><c> adjacency</c><00:11:09.440><c> list</c><00:11:09.920><c> of</c><00:11:10.320><c> n2</c>

00:11:11.350 --> 00:11:11.360 align:start position:0%
similarly for the adjacency list of n2
 

00:11:11.360 --> 00:11:14.550 align:start position:0%
similarly for the adjacency list of n2
i'm<00:11:11.519><c> gonna</c><00:11:11.839><c> append</c><00:11:12.839><c> n1</c><00:11:13.760><c> and</c><00:11:14.000><c> then</c><00:11:14.240><c> i'm</c><00:11:14.480><c> going</c>

00:11:14.550 --> 00:11:14.560 align:start position:0%
i'm gonna append n1 and then i'm going
 

00:11:14.560 --> 00:11:16.630 align:start position:0%
i'm gonna append n1 and then i'm going
to<00:11:14.720><c> start</c><00:11:14.959><c> defining</c><00:11:15.519><c> our</c><00:11:15.680><c> depth</c><00:11:15.920><c> first</c><00:11:16.160><c> search</c>

00:11:16.630 --> 00:11:16.640 align:start position:0%
to start defining our depth first search
 

00:11:16.640 --> 00:11:18.389 align:start position:0%
to start defining our depth first search
remember<00:11:17.120><c> we</c><00:11:17.279><c> are</c><00:11:17.360><c> going</c><00:11:17.519><c> to</c><00:11:17.680><c> pat</c><00:11:18.160><c> we</c><00:11:18.320><c> are</c>

00:11:18.389 --> 00:11:18.399 align:start position:0%
remember we are going to pat we are
 

00:11:18.399 --> 00:11:20.069 align:start position:0%
remember we are going to pat we are
going<00:11:18.560><c> to</c><00:11:18.800><c> know</c><00:11:19.040><c> which</c><00:11:19.279><c> node</c><00:11:19.519><c> we're</c><00:11:19.680><c> visiting</c>

00:11:20.069 --> 00:11:20.079 align:start position:0%
going to know which node we're visiting
 

00:11:20.079 --> 00:11:20.790 align:start position:0%
going to know which node we're visiting
so<00:11:20.240><c> i'm</c><00:11:20.320><c> going</c><00:11:20.399><c> to</c><00:11:20.480><c> use</c>

00:11:20.790 --> 00:11:20.800 align:start position:0%
so i'm going to use
 

00:11:20.800 --> 00:11:22.949 align:start position:0%
so i'm going to use
i<00:11:21.200><c> as</c><00:11:21.519><c> the</c><00:11:21.839><c> value</c><00:11:22.240><c> of</c><00:11:22.320><c> the</c><00:11:22.480><c> node</c><00:11:22.720><c> that</c><00:11:22.800><c> we're</c>

00:11:22.949 --> 00:11:22.959 align:start position:0%
i as the value of the node that we're
 

00:11:22.959 --> 00:11:24.550 align:start position:0%
i as the value of the node that we're
visiting<00:11:23.279><c> remember</c><00:11:23.680><c> we're</c><00:11:23.839><c> also</c><00:11:24.079><c> passing</c><00:11:24.399><c> in</c>

00:11:24.550 --> 00:11:24.560 align:start position:0%
visiting remember we're also passing in
 

00:11:24.560 --> 00:11:26.630 align:start position:0%
visiting remember we're also passing in
one<00:11:24.800><c> other</c><00:11:25.040><c> variable</c><00:11:25.440><c> the</c><00:11:25.680><c> previous</c><00:11:26.160><c> node</c>

00:11:26.630 --> 00:11:26.640 align:start position:0%
one other variable the previous node
 

00:11:26.640 --> 00:11:28.470 align:start position:0%
one other variable the previous node
that<00:11:26.800><c> we</c><00:11:27.040><c> came</c><00:11:27.279><c> from</c><00:11:27.519><c> so</c><00:11:27.839><c> that</c><00:11:28.000><c> we</c><00:11:28.160><c> don't</c><00:11:28.399><c> you</c>

00:11:28.470 --> 00:11:28.480 align:start position:0%
that we came from so that we don't you
 

00:11:28.480 --> 00:11:30.069 align:start position:0%
that we came from so that we don't you
know<00:11:28.640><c> get</c><00:11:28.880><c> false</c><00:11:29.279><c> positives</c>

00:11:30.069 --> 00:11:30.079 align:start position:0%
know get false positives
 

00:11:30.079 --> 00:11:32.389 align:start position:0%
know get false positives
for<00:11:30.399><c> loop</c><00:11:30.720><c> detection</c><00:11:31.600><c> and</c><00:11:31.760><c> so</c><00:11:32.000><c> you</c><00:11:32.160><c> can</c><00:11:32.240><c> see</c>

00:11:32.389 --> 00:11:32.399 align:start position:0%
for loop detection and so you can see
 

00:11:32.399 --> 00:11:34.230 align:start position:0%
for loop detection and so you can see
i'm<00:11:32.480><c> defining</c><00:11:32.880><c> this</c><00:11:33.120><c> function</c><00:11:33.519><c> inside</c><00:11:33.920><c> of</c><00:11:34.079><c> our</c>

00:11:34.230 --> 00:11:34.240 align:start position:0%
i'm defining this function inside of our
 

00:11:34.240 --> 00:11:35.670 align:start position:0%
i'm defining this function inside of our
outer<00:11:34.560><c> function</c><00:11:34.880><c> that</c><00:11:35.040><c> just</c><00:11:35.200><c> means</c><00:11:35.440><c> i</c><00:11:35.519><c> don't</c>

00:11:35.670 --> 00:11:35.680 align:start position:0%
outer function that just means i don't
 

00:11:35.680 --> 00:11:36.310 align:start position:0%
outer function that just means i don't
have<00:11:35.839><c> to</c><00:11:35.920><c> pass</c>

00:11:36.310 --> 00:11:36.320 align:start position:0%
have to pass
 

00:11:36.320 --> 00:11:38.550 align:start position:0%
have to pass
in<00:11:36.399><c> the</c><00:11:36.560><c> variables</c><00:11:37.120><c> like</c><00:11:37.440><c> adjacency</c><00:11:38.079><c> list</c>

00:11:38.550 --> 00:11:38.560 align:start position:0%
in the variables like adjacency list
 

00:11:38.560 --> 00:11:39.509 align:start position:0%
in the variables like adjacency list
into<00:11:38.959><c> this</c>

00:11:39.509 --> 00:11:39.519 align:start position:0%
into this
 

00:11:39.519 --> 00:11:41.910 align:start position:0%
into this
each<00:11:39.839><c> time</c><00:11:40.480><c> and</c><00:11:40.800><c> actually</c><00:11:41.200><c> i</c><00:11:41.360><c> need</c><00:11:41.519><c> to</c><00:11:41.600><c> define</c>

00:11:41.910 --> 00:11:41.920 align:start position:0%
each time and actually i need to define
 

00:11:41.920 --> 00:11:43.269 align:start position:0%
each time and actually i need to define
one<00:11:42.160><c> more</c><00:11:42.320><c> variable</c><00:11:42.720><c> that's</c><00:11:42.880><c> going</c><00:11:42.959><c> to</c><00:11:43.040><c> be</c>

00:11:43.269 --> 00:11:43.279 align:start position:0%
one more variable that's going to be
 

00:11:43.279 --> 00:11:44.630 align:start position:0%
one more variable that's going to be
visit<00:11:43.680><c> which</c><00:11:43.920><c> is</c><00:11:44.000><c> going</c><00:11:44.160><c> to</c><00:11:44.240><c> be</c><00:11:44.399><c> a</c>

00:11:44.630 --> 00:11:44.640 align:start position:0%
visit which is going to be a
 

00:11:44.640 --> 00:11:46.389 align:start position:0%
visit which is going to be a
set<00:11:45.200><c> which</c><00:11:45.440><c> is</c><00:11:45.519><c> going</c><00:11:45.600><c> to</c><00:11:45.680><c> keep</c><00:11:45.920><c> track</c><00:11:46.160><c> of</c><00:11:46.240><c> all</c>

00:11:46.389 --> 00:11:46.399 align:start position:0%
set which is going to keep track of all
 

00:11:46.399 --> 00:11:48.550 align:start position:0%
set which is going to keep track of all
the<00:11:46.480><c> nodes</c><00:11:46.800><c> we've</c><00:11:46.959><c> visited</c><00:11:47.360><c> so</c><00:11:47.600><c> one</c><00:11:47.839><c> base</c><00:11:48.160><c> case</c>

00:11:48.550 --> 00:11:48.560 align:start position:0%
the nodes we've visited so one base case
 

00:11:48.560 --> 00:11:51.269 align:start position:0%
the nodes we've visited so one base case
is<00:11:48.720><c> going</c><00:11:48.800><c> to</c><00:11:48.880><c> be</c><00:11:49.440><c> if</c><00:11:49.680><c> i</c><00:11:50.079><c> is</c><00:11:50.399><c> in</c><00:11:50.560><c> the</c><00:11:50.720><c> visit</c><00:11:51.120><c> set</c>

00:11:51.269 --> 00:11:51.279 align:start position:0%
is going to be if i is in the visit set
 

00:11:51.279 --> 00:11:51.990 align:start position:0%
is going to be if i is in the visit set
that<00:11:51.440><c> means</c>

00:11:51.990 --> 00:11:52.000 align:start position:0%
that means
 

00:11:52.000 --> 00:11:53.990 align:start position:0%
that means
it's<00:11:52.240><c> already</c><00:11:52.639><c> been</c><00:11:52.880><c> visited</c><00:11:53.440><c> that</c><00:11:53.680><c> means</c>

00:11:53.990 --> 00:11:54.000 align:start position:0%
it's already been visited that means
 

00:11:54.000 --> 00:11:55.910 align:start position:0%
it's already been visited that means
we've<00:11:54.240><c> detected</c><00:11:54.720><c> a</c><00:11:54.880><c> loop</c><00:11:55.200><c> that</c><00:11:55.360><c> means</c><00:11:55.600><c> we</c><00:11:55.760><c> can</c>

00:11:55.910 --> 00:11:55.920 align:start position:0%
we've detected a loop that means we can
 

00:11:55.920 --> 00:11:56.470 align:start position:0%
we've detected a loop that means we can
return

00:11:56.470 --> 00:11:56.480 align:start position:0%
return
 

00:11:56.480 --> 00:12:00.069 align:start position:0%
return
false<00:11:57.200><c> if</c><00:11:57.519><c> not</c><00:11:58.240><c> that</c><00:11:58.480><c> means</c><00:11:59.279><c> i</c><00:11:59.519><c> hasn't</c><00:11:59.839><c> been</c>

00:12:00.069 --> 00:12:00.079 align:start position:0%
false if not that means i hasn't been
 

00:12:00.079 --> 00:12:01.750 align:start position:0%
false if not that means i hasn't been
visited<00:12:00.399><c> so</c><00:12:00.560><c> then</c><00:12:00.720><c> we</c><00:12:00.880><c> can</c><00:12:00.959><c> go</c><00:12:01.120><c> ahead</c><00:12:01.360><c> and</c><00:12:01.519><c> add</c>

00:12:01.750 --> 00:12:01.760 align:start position:0%
visited so then we can go ahead and add
 

00:12:01.760 --> 00:12:03.110 align:start position:0%
visited so then we can go ahead and add
it<00:12:02.000><c> to</c><00:12:02.240><c> visit</c><00:12:02.639><c> so</c>

00:12:03.110 --> 00:12:03.120 align:start position:0%
it to visit so
 

00:12:03.120 --> 00:12:05.509 align:start position:0%
it to visit so
let's<00:12:03.440><c> add</c><00:12:03.760><c> i</c><00:12:04.079><c> and</c><00:12:04.160><c> then</c><00:12:04.320><c> let's</c><00:12:04.560><c> go</c><00:12:05.120><c> through</c>

00:12:05.509 --> 00:12:05.519 align:start position:0%
let's add i and then let's go through
 

00:12:05.519 --> 00:12:06.389 align:start position:0%
let's add i and then let's go through
every<00:12:05.839><c> single</c>

00:12:06.389 --> 00:12:06.399 align:start position:0%
every single
 

00:12:06.399 --> 00:12:09.269 align:start position:0%
every single
neighbor<00:12:06.880><c> of</c><00:12:07.200><c> i</c><00:12:07.519><c> so</c><00:12:07.760><c> every</c><00:12:08.079><c> single</c><00:12:08.800><c> node</c><00:12:09.120><c> let's</c>

00:12:09.269 --> 00:12:09.279 align:start position:0%
neighbor of i so every single node let's
 

00:12:09.279 --> 00:12:09.829 align:start position:0%
neighbor of i so every single node let's
call<00:12:09.519><c> it</c>

00:12:09.829 --> 00:12:09.839 align:start position:0%
call it
 

00:12:09.839 --> 00:12:12.790 align:start position:0%
call it
j<00:12:10.399><c> in</c><00:12:10.880><c> the</c><00:12:11.040><c> adjacency</c><00:12:11.760><c> list</c><00:12:12.000><c> so</c><00:12:12.160><c> the</c><00:12:12.320><c> list</c><00:12:12.560><c> of</c>

00:12:12.790 --> 00:12:12.800 align:start position:0%
j in the adjacency list so the list of
 

00:12:12.800 --> 00:12:13.430 align:start position:0%
j in the adjacency list so the list of
neighbors

00:12:13.430 --> 00:12:13.440 align:start position:0%
neighbors
 

00:12:13.440 --> 00:12:17.829 align:start position:0%
neighbors
of<00:12:14.240><c> i</c><00:12:14.959><c> and</c><00:12:15.200><c> if</c><00:12:15.680><c> j</c><00:12:16.160><c> happens</c><00:12:16.560><c> to</c><00:12:16.720><c> be</c><00:12:16.959><c> equal</c><00:12:17.279><c> to</c><00:12:17.519><c> the</c>

00:12:17.829 --> 00:12:17.839 align:start position:0%
of i and if j happens to be equal to the
 

00:12:17.839 --> 00:12:19.509 align:start position:0%
of i and if j happens to be equal to the
the<00:12:18.079><c> previous</c><00:12:18.399><c> node</c><00:12:18.800><c> the</c><00:12:18.880><c> node</c><00:12:19.040><c> that</c><00:12:19.200><c> we</c><00:12:19.279><c> came</c>

00:12:19.509 --> 00:12:19.519 align:start position:0%
the previous node the node that we came
 

00:12:19.519 --> 00:12:21.110 align:start position:0%
the previous node the node that we came
from<00:12:19.760><c> then</c><00:12:20.079><c> we're</c><00:12:20.240><c> going</c><00:12:20.320><c> to</c><00:12:20.560><c> skip</c>

00:12:21.110 --> 00:12:21.120 align:start position:0%
from then we're going to skip
 

00:12:21.120 --> 00:12:22.790 align:start position:0%
from then we're going to skip
this<00:12:21.440><c> iteration</c><00:12:21.920><c> of</c><00:12:22.000><c> the</c><00:12:22.160><c> loop</c><00:12:22.399><c> we</c><00:12:22.480><c> can</c><00:12:22.639><c> do</c>

00:12:22.790 --> 00:12:22.800 align:start position:0%
this iteration of the loop we can do
 

00:12:22.800 --> 00:12:24.790 align:start position:0%
this iteration of the loop we can do
that<00:12:22.959><c> with</c><00:12:23.120><c> the</c><00:12:23.279><c> continue</c><00:12:23.839><c> statement</c>

00:12:24.790 --> 00:12:24.800 align:start position:0%
that with the continue statement
 

00:12:24.800 --> 00:12:26.389 align:start position:0%
that with the continue statement
if<00:12:24.959><c> it's</c><00:12:25.120><c> not</c><00:12:25.360><c> the</c><00:12:25.519><c> previous</c><00:12:25.920><c> node</c><00:12:26.160><c> that</c><00:12:26.240><c> we</c>

00:12:26.389 --> 00:12:26.399 align:start position:0%
if it's not the previous node that we
 

00:12:26.399 --> 00:12:27.670 align:start position:0%
if it's not the previous node that we
came<00:12:26.560><c> from</c><00:12:26.800><c> then</c><00:12:26.959><c> we're</c><00:12:27.120><c> going</c><00:12:27.200><c> to</c><00:12:27.279><c> call</c><00:12:27.440><c> debt</c>

00:12:27.670 --> 00:12:27.680 align:start position:0%
came from then we're going to call debt
 

00:12:27.680 --> 00:12:29.590 align:start position:0%
came from then we're going to call debt
for<00:12:27.920><c> search</c><00:12:28.240><c> on</c><00:12:28.399><c> this</c><00:12:28.639><c> node</c><00:12:29.040><c> j</c>

00:12:29.590 --> 00:12:29.600 align:start position:0%
for search on this node j
 

00:12:29.600 --> 00:12:31.269 align:start position:0%
for search on this node j
and<00:12:29.839><c> as</c><00:12:30.000><c> the</c><00:12:30.079><c> previous</c><00:12:30.560><c> value</c><00:12:30.880><c> we're</c><00:12:31.120><c> going</c><00:12:31.200><c> to</c>

00:12:31.269 --> 00:12:31.279 align:start position:0%
and as the previous value we're going to
 

00:12:31.279 --> 00:12:33.350 align:start position:0%
and as the previous value we're going to
pass<00:12:31.680><c> in</c><00:12:32.079><c> i</c><00:12:32.480><c> because</c><00:12:32.720><c> that's</c><00:12:32.959><c> where</c><00:12:33.120><c> we're</c>

00:12:33.350 --> 00:12:33.360 align:start position:0%
pass in i because that's where we're
 

00:12:33.360 --> 00:12:36.069 align:start position:0%
pass in i because that's where we're
coming<00:12:33.680><c> from</c><00:12:33.920><c> when</c><00:12:34.079><c> we</c><00:12:34.240><c> arrive</c><00:12:34.800><c> at</c><00:12:35.040><c> node</c><00:12:35.440><c> j</c>

00:12:36.069 --> 00:12:36.079 align:start position:0%
coming from when we arrive at node j
 

00:12:36.079 --> 00:12:39.110 align:start position:0%
coming from when we arrive at node j
now<00:12:36.639><c> if</c><00:12:37.120><c> the</c><00:12:37.279><c> return</c><00:12:37.760><c> value</c><00:12:38.079><c> of</c><00:12:38.240><c> this</c><00:12:38.800><c> is</c>

00:12:39.110 --> 00:12:39.120 align:start position:0%
now if the return value of this is
 

00:12:39.120 --> 00:12:42.069 align:start position:0%
now if the return value of this is
equal<00:12:39.440><c> to</c><00:12:39.839><c> false</c><00:12:40.320><c> so</c><00:12:40.639><c> if</c><00:12:40.959><c> not</c><00:12:41.360><c> the</c><00:12:41.519><c> result</c><00:12:41.920><c> of</c>

00:12:42.069 --> 00:12:42.079 align:start position:0%
equal to false so if not the result of
 

00:12:42.079 --> 00:12:42.550 align:start position:0%
equal to false so if not the result of
this

00:12:42.550 --> 00:12:42.560 align:start position:0%
this
 

00:12:42.560 --> 00:12:44.069 align:start position:0%
this
then<00:12:42.800><c> we're</c><00:12:42.959><c> going</c><00:12:43.040><c> to</c><00:12:43.120><c> immediately</c><00:12:43.680><c> return</c>

00:12:44.069 --> 00:12:44.079 align:start position:0%
then we're going to immediately return
 

00:12:44.079 --> 00:12:45.990 align:start position:0%
then we're going to immediately return
false<00:12:44.480><c> because</c><00:12:44.720><c> that</c><00:12:44.880><c> means</c><00:12:45.120><c> we</c><00:12:45.279><c> detected</c><00:12:45.839><c> a</c>

00:12:45.990 --> 00:12:46.000 align:start position:0%
false because that means we detected a
 

00:12:46.000 --> 00:12:46.470 align:start position:0%
false because that means we detected a
loop

00:12:46.470 --> 00:12:46.480 align:start position:0%
loop
 

00:12:46.480 --> 00:12:48.790 align:start position:0%
loop
if<00:12:46.639><c> this</c><00:12:46.880><c> does</c><00:12:47.200><c> not</c><00:12:47.440><c> return</c><00:12:47.920><c> false</c><00:12:48.399><c> then</c><00:12:48.560><c> we're</c>

00:12:48.790 --> 00:12:48.800 align:start position:0%
if this does not return false then we're
 

00:12:48.800 --> 00:12:50.150 align:start position:0%
if this does not return false then we're
basically<00:12:49.200><c> going</c><00:12:49.279><c> to</c><00:12:49.360><c> continue</c><00:12:49.839><c> we're</c><00:12:50.079><c> going</c>

00:12:50.150 --> 00:12:50.160 align:start position:0%
basically going to continue we're going
 

00:12:50.160 --> 00:12:52.150 align:start position:0%
basically going to continue we're going
to<00:12:50.240><c> go</c><00:12:50.399><c> through</c><00:12:50.639><c> all</c><00:12:50.800><c> the</c><00:12:51.040><c> other</c><00:12:51.360><c> neighbors</c>

00:12:52.150 --> 00:12:52.160 align:start position:0%
to go through all the other neighbors
 

00:12:52.160 --> 00:12:55.190 align:start position:0%
to go through all the other neighbors
of<00:12:52.560><c> the</c><00:12:52.800><c> node</c><00:12:53.200><c> i</c><00:12:54.000><c> and</c><00:12:54.240><c> if</c><00:12:54.320><c> we</c><00:12:54.560><c> go</c><00:12:54.720><c> through</c><00:12:54.959><c> every</c>

00:12:55.190 --> 00:12:55.200 align:start position:0%
of the node i and if we go through every
 

00:12:55.200 --> 00:12:57.190 align:start position:0%
of the node i and if we go through every
single<00:12:55.519><c> neighbor</c><00:12:55.839><c> without</c><00:12:56.320><c> returning</c><00:12:56.800><c> false</c>

00:12:57.190 --> 00:12:57.200 align:start position:0%
single neighbor without returning false
 

00:12:57.200 --> 00:12:58.150 align:start position:0%
single neighbor without returning false
then<00:12:57.360><c> we</c><00:12:57.519><c> can</c><00:12:57.600><c> return</c>

00:12:58.150 --> 00:12:58.160 align:start position:0%
then we can return
 

00:12:58.160 --> 00:13:01.590 align:start position:0%
then we can return
true<00:12:58.560><c> meaning</c><00:12:58.800><c> we</c><00:12:58.959><c> did</c><00:12:59.279><c> not</c><00:12:59.600><c> detect</c><00:13:00.160><c> a</c><00:13:00.399><c> loop</c><00:13:01.120><c> so</c>

00:13:01.590 --> 00:13:01.600 align:start position:0%
true meaning we did not detect a loop so
 

00:13:01.600 --> 00:13:03.829 align:start position:0%
true meaning we did not detect a loop so
we<00:13:01.920><c> want</c><00:13:02.160><c> to</c><00:13:02.399><c> now</c><00:13:02.720><c> return</c><00:13:03.120><c> the</c><00:13:03.279><c> result</c><00:13:03.600><c> right</c>

00:13:03.829 --> 00:13:03.839 align:start position:0%
we want to now return the result right
 

00:13:03.839 --> 00:13:04.790 align:start position:0%
we want to now return the result right
and<00:13:04.000><c> of</c><00:13:04.079><c> course</c><00:13:04.320><c> we</c><00:13:04.399><c> know</c><00:13:04.560><c> we're</c><00:13:04.720><c> going</c><00:13:04.800><c> to</c>

00:13:04.790 --> 00:13:04.800 align:start position:0%
and of course we know we're going to
 

00:13:04.800 --> 00:13:06.069 align:start position:0%
and of course we know we're going to
have<00:13:04.880><c> to</c><00:13:05.040><c> call</c><00:13:05.279><c> our</c><00:13:05.360><c> debt</c><00:13:05.519><c> for</c><00:13:05.680><c> search</c>

00:13:06.069 --> 00:13:06.079 align:start position:0%
have to call our debt for search
 

00:13:06.079 --> 00:13:08.870 align:start position:0%
have to call our debt for search
function<00:13:06.480><c> we're</c><00:13:06.720><c> gonna</c><00:13:07.200><c> start</c><00:13:07.600><c> at</c><00:13:08.000><c> node</c><00:13:08.399><c> 0</c><00:13:08.800><c> and</c>

00:13:08.870 --> 00:13:08.880 align:start position:0%
function we're gonna start at node 0 and
 

00:13:08.880 --> 00:13:10.389 align:start position:0%
function we're gonna start at node 0 and
as<00:13:09.040><c> a</c><00:13:09.120><c> previous</c><00:13:09.519><c> value</c><00:13:09.839><c> we're</c><00:13:10.000><c> going</c><00:13:10.079><c> to</c><00:13:10.160><c> pass</c>

00:13:10.389 --> 00:13:10.399 align:start position:0%
as a previous value we're going to pass
 

00:13:10.399 --> 00:13:12.310 align:start position:0%
as a previous value we're going to pass
a<00:13:10.480><c> negative</c><00:13:10.880><c> 1</c><00:13:11.120><c> because</c><00:13:11.440><c> negative</c><00:13:11.760><c> 1</c><00:13:12.000><c> is</c><00:13:12.079><c> never</c>

00:13:12.310 --> 00:13:12.320 align:start position:0%
a negative 1 because negative 1 is never
 

00:13:12.320 --> 00:13:13.190 align:start position:0%
a negative 1 because negative 1 is never
going<00:13:12.399><c> to</c><00:13:12.560><c> exist</c>

00:13:13.190 --> 00:13:13.200 align:start position:0%
going to exist
 

00:13:13.200 --> 00:13:16.310 align:start position:0%
going to exist
in<00:13:13.519><c> our</c><00:13:13.920><c> graph</c><00:13:14.639><c> but</c><00:13:14.880><c> is</c><00:13:15.120><c> this</c><00:13:15.519><c> enough</c><00:13:16.000><c> remember</c>

00:13:16.310 --> 00:13:16.320 align:start position:0%
in our graph but is this enough remember
 

00:13:16.320 --> 00:13:18.470 align:start position:0%
in our graph but is this enough remember
our<00:13:16.560><c> dip</c><00:13:16.720><c> for</c><00:13:16.959><c> search</c><00:13:17.279><c> what</c><00:13:17.440><c> it's</c><00:13:17.600><c> returning</c>

00:13:18.470 --> 00:13:18.480 align:start position:0%
our dip for search what it's returning
 

00:13:18.480 --> 00:13:21.030 align:start position:0%
our dip for search what it's returning
as<00:13:18.800><c> the</c><00:13:19.040><c> true</c><00:13:19.279><c> and</c><00:13:19.440><c> false</c><00:13:19.760><c> is</c><00:13:20.000><c> only</c><00:13:20.399><c> detecting</c>

00:13:21.030 --> 00:13:21.040 align:start position:0%
as the true and false is only detecting
 

00:13:21.040 --> 00:13:24.310 align:start position:0%
as the true and false is only detecting
if<00:13:21.200><c> there's</c><00:13:21.440><c> a</c><00:13:21.680><c> loop</c><00:13:22.079><c> like</c><00:13:22.320><c> a</c><00:13:22.480><c> cycle</c><00:13:22.959><c> or</c><00:13:23.360><c> not</c>

00:13:24.310 --> 00:13:24.320 align:start position:0%
if there's a loop like a cycle or not
 

00:13:24.320 --> 00:13:26.389 align:start position:0%
if there's a loop like a cycle or not
but<00:13:24.560><c> it's</c><00:13:24.800><c> not</c><00:13:25.040><c> making</c><00:13:25.440><c> sure</c><00:13:25.680><c> that</c><00:13:25.839><c> the</c><00:13:26.000><c> entire</c>

00:13:26.389 --> 00:13:26.399 align:start position:0%
but it's not making sure that the entire
 

00:13:26.399 --> 00:13:27.750 align:start position:0%
but it's not making sure that the entire
graph<00:13:26.800><c> is</c><00:13:26.880><c> connected</c><00:13:27.440><c> so</c>

00:13:27.750 --> 00:13:27.760 align:start position:0%
graph is connected so
 

00:13:27.760 --> 00:13:30.389 align:start position:0%
graph is connected so
we're<00:13:28.079><c> only</c><00:13:28.240><c> going</c><00:13:28.399><c> to</c><00:13:28.480><c> return</c><00:13:29.040><c> true</c><00:13:29.440><c> if</c><00:13:29.760><c> this</c>

00:13:30.389 --> 00:13:30.399 align:start position:0%
we're only going to return true if this
 

00:13:30.399 --> 00:13:31.990 align:start position:0%
we're only going to return true if this
function<00:13:30.880><c> returns</c><00:13:31.360><c> true</c>

00:13:31.990 --> 00:13:32.000 align:start position:0%
function returns true
 

00:13:32.000 --> 00:13:35.509 align:start position:0%
function returns true
and<00:13:32.800><c> if</c><00:13:33.680><c> n</c><00:13:34.160><c> which</c><00:13:34.399><c> is</c><00:13:34.560><c> the</c><00:13:34.720><c> input</c>

00:13:35.509 --> 00:13:35.519 align:start position:0%
and if n which is the input
 

00:13:35.519 --> 00:13:37.990 align:start position:0%
and if n which is the input
of<00:13:35.680><c> the</c><00:13:35.839><c> number</c><00:13:36.079><c> of</c><00:13:36.240><c> nodes</c><00:13:36.800><c> exactly</c><00:13:37.440><c> matches</c>

00:13:37.990 --> 00:13:38.000 align:start position:0%
of the number of nodes exactly matches
 

00:13:38.000 --> 00:13:38.790 align:start position:0%
of the number of nodes exactly matches
the<00:13:38.240><c> length</c>

00:13:38.790 --> 00:13:38.800 align:start position:0%
the length
 

00:13:38.800 --> 00:13:41.030 align:start position:0%
the length
of<00:13:39.040><c> the</c><00:13:39.279><c> visit</c><00:13:39.680><c> set</c><00:13:40.000><c> basically</c><00:13:40.480><c> every</c><00:13:40.720><c> single</c>

00:13:41.030 --> 00:13:41.040 align:start position:0%
of the visit set basically every single
 

00:13:41.040 --> 00:13:42.949 align:start position:0%
of the visit set basically every single
node<00:13:41.440><c> happened</c><00:13:41.839><c> to</c><00:13:42.000><c> be</c><00:13:42.160><c> visited</c><00:13:42.560><c> that</c><00:13:42.639><c> means</c>

00:13:42.949 --> 00:13:42.959 align:start position:0%
node happened to be visited that means
 

00:13:42.959 --> 00:13:44.629 align:start position:0%
node happened to be visited that means
every<00:13:43.199><c> node</c><00:13:43.519><c> is</c><00:13:43.680><c> connected</c>

00:13:44.629 --> 00:13:44.639 align:start position:0%
every node is connected
 

00:13:44.639 --> 00:13:47.590 align:start position:0%
every node is connected
that<00:13:44.880><c> means</c><00:13:45.120><c> the</c><00:13:45.279><c> graph</c><00:13:45.760><c> is</c><00:13:45.839><c> a</c><00:13:46.079><c> tree</c><00:13:46.800><c> so</c><00:13:47.279><c> only</c>

00:13:47.590 --> 00:13:47.600 align:start position:0%
that means the graph is a tree so only
 

00:13:47.600 --> 00:13:49.590 align:start position:0%
that means the graph is a tree so only
if<00:13:47.839><c> both</c><00:13:48.079><c> of</c><00:13:48.240><c> these</c><00:13:48.480><c> are</c><00:13:48.639><c> true</c><00:13:49.040><c> are</c><00:13:49.199><c> we</c><00:13:49.440><c> going</c>

00:13:49.590 --> 00:13:49.600 align:start position:0%
if both of these are true are we going
 

00:13:49.600 --> 00:13:51.030 align:start position:0%
if both of these are true are we going
to<00:13:49.760><c> return</c><00:13:50.240><c> true</c>

00:13:51.030 --> 00:13:51.040 align:start position:0%
to return true
 

00:13:51.040 --> 00:13:53.350 align:start position:0%
to return true
so<00:13:51.279><c> this</c><00:13:51.600><c> is</c><00:13:51.760><c> the</c><00:13:51.920><c> entire</c><00:13:52.320><c> code</c><00:13:52.800><c> and</c><00:13:53.040><c> i</c><00:13:53.199><c> can</c>

00:13:53.350 --> 00:13:53.360 align:start position:0%
so this is the entire code and i can
 

00:13:53.360 --> 00:13:55.430 align:start position:0%
so this is the entire code and i can
show<00:13:53.600><c> you</c><00:13:53.920><c> if</c><00:13:54.079><c> i</c><00:13:54.240><c> slide</c><00:13:54.560><c> this</c><00:13:54.800><c> up</c><00:13:54.959><c> a</c><00:13:55.040><c> little</c><00:13:55.199><c> bit</c>

00:13:55.430 --> 00:13:55.440 align:start position:0%
show you if i slide this up a little bit
 

00:13:55.440 --> 00:13:56.470 align:start position:0%
show you if i slide this up a little bit
that<00:13:55.600><c> this</c><00:13:55.839><c> does</c><00:13:56.160><c> run</c>

00:13:56.470 --> 00:13:56.480 align:start position:0%
that this does run
 

00:13:56.480 --> 00:13:58.550 align:start position:0%
that this does run
and<00:13:56.560><c> it</c><00:13:56.720><c> does</c><00:13:56.880><c> run</c><00:13:57.120><c> pretty</c><00:13:57.360><c> efficiently</c><00:13:58.240><c> so</c><00:13:58.480><c> i</c>

00:13:58.550 --> 00:13:58.560 align:start position:0%
and it does run pretty efficiently so i
 

00:13:58.560 --> 00:13:59.829 align:start position:0%
and it does run pretty efficiently so i
hope<00:13:58.800><c> that</c><00:13:58.959><c> this</c><00:13:59.120><c> was</c><00:13:59.279><c> helpful</c><00:13:59.680><c> we're</c>

00:13:59.829 --> 00:13:59.839 align:start position:0%
hope that this was helpful we're
 

00:13:59.839 --> 00:14:01.670 align:start position:0%
hope that this was helpful we're
basically<00:14:00.240><c> just</c><00:14:00.399><c> doing</c><00:14:00.639><c> a</c><00:14:00.800><c> standard</c><00:14:01.199><c> debt</c><00:14:01.440><c> for</c>

00:14:01.670 --> 00:14:01.680 align:start position:0%
basically just doing a standard debt for
 

00:14:01.680 --> 00:14:02.230 align:start position:0%
basically just doing a standard debt for
search

00:14:02.230 --> 00:14:02.240 align:start position:0%
search
 

00:14:02.240 --> 00:14:04.470 align:start position:0%
search
on<00:14:02.480><c> this</c><00:14:02.800><c> graph</c><00:14:03.519><c> and</c><00:14:03.680><c> if</c><00:14:03.760><c> this</c><00:14:03.920><c> was</c><00:14:04.079><c> helpful</c>

00:14:04.470 --> 00:14:04.480 align:start position:0%
on this graph and if this was helpful
 

00:14:04.480 --> 00:14:06.230 align:start position:0%
on this graph and if this was helpful
please<00:14:04.800><c> like</c><00:14:05.040><c> and</c><00:14:05.120><c> subscribe</c><00:14:05.680><c> it</c><00:14:05.839><c> supports</c>

00:14:06.230 --> 00:14:06.240 align:start position:0%
please like and subscribe it supports
 

00:14:06.240 --> 00:14:08.550 align:start position:0%
please like and subscribe it supports
the<00:14:06.399><c> channel</c><00:14:06.800><c> a</c><00:14:07.040><c> lot</c><00:14:07.440><c> and</c><00:14:07.600><c> i'll</c><00:14:07.839><c> hopefully</c>

00:14:08.550 --> 00:14:08.560 align:start position:0%
the channel a lot and i'll hopefully
 

00:14:08.560 --> 00:14:12.560 align:start position:0%
the channel a lot and i'll hopefully
see<00:14:08.720><c> you</c><00:14:08.880><c> pretty</c><00:14:09.199><c> soon</c><00:14:09.600><c> thanks</c><00:14:09.839><c> for</c><00:14:10.000><c> watching</c>

