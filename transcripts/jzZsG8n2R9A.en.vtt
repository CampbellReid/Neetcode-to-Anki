WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.990 align:start position:0%
 
okay<00:00:00.420><c> let's</c><00:00:00.719><c> solve</c><00:00:00.960><c> leak</c><00:00:01.230><c> code</c><00:00:01.500><c> 15</c><00:00:02.159><c> threesome</c>

00:00:02.990 --> 00:00:03.000 align:start position:0%
okay let's solve leak code 15 threesome
 

00:00:03.000 --> 00:00:05.480 align:start position:0%
okay let's solve leak code 15 threesome
the<00:00:03.419><c> sequel</c><00:00:03.959><c> to</c><00:00:04.140><c> the</c><00:00:04.230><c> popular</c><00:00:04.710><c> question</c><00:00:05.160><c> to</c>

00:00:05.480 --> 00:00:05.490 align:start position:0%
the sequel to the popular question to
 

00:00:05.490 --> 00:00:07.190 align:start position:0%
the sequel to the popular question to
some<00:00:05.790><c> so</c><00:00:06.150><c> before</c><00:00:06.480><c> you</c><00:00:06.540><c> solve</c><00:00:06.779><c> this</c><00:00:06.960><c> question</c>

00:00:07.190 --> 00:00:07.200 align:start position:0%
some so before you solve this question
 

00:00:07.200 --> 00:00:08.690 align:start position:0%
some so before you solve this question
the<00:00:07.500><c> first</c><00:00:07.770><c> thing</c><00:00:07.980><c> you</c><00:00:08.069><c> should</c><00:00:08.099><c> do</c><00:00:08.370><c> is</c><00:00:08.490><c> make</c>

00:00:08.690 --> 00:00:08.700 align:start position:0%
the first thing you should do is make
 

00:00:08.700 --> 00:00:11.060 align:start position:0%
the first thing you should do is make
sure<00:00:08.730><c> that</c><00:00:08.970><c> you've</c><00:00:09.240><c> solved</c><00:00:09.719><c> twosome</c><00:00:10.500><c> which</c><00:00:10.800><c> is</c>

00:00:11.060 --> 00:00:11.070 align:start position:0%
sure that you've solved twosome which is
 

00:00:11.070 --> 00:00:13.520 align:start position:0%
sure that you've solved twosome which is
the<00:00:12.030><c> most</c><00:00:12.240><c> popular</c><00:00:12.660><c> question</c><00:00:13.019><c> on</c><00:00:13.110><c> leak</c><00:00:13.320><c> code</c>

00:00:13.520 --> 00:00:13.530 align:start position:0%
the most popular question on leak code
 

00:00:13.530 --> 00:00:15.020 align:start position:0%
the most popular question on leak code
so<00:00:13.650><c> you've</c><00:00:13.799><c> probably</c><00:00:14.040><c> solved</c><00:00:14.670><c> it</c><00:00:14.759><c> or</c><00:00:14.880><c> at</c><00:00:15.000><c> least</c>

00:00:15.020 --> 00:00:15.030 align:start position:0%
so you've probably solved it or at least
 

00:00:15.030 --> 00:00:16.279 align:start position:0%
so you've probably solved it or at least
seen<00:00:15.509><c> it</c><00:00:15.660><c> before</c>

00:00:16.279 --> 00:00:16.289 align:start position:0%
seen it before
 

00:00:16.289 --> 00:00:19.700 align:start position:0%
seen it before
I<00:00:16.320><c> also</c><00:00:16.859><c> recommend</c><00:00:17.340><c> solving</c><00:00:17.910><c> twosome</c><00:00:18.420><c> 2</c><00:00:18.869><c> which</c>

00:00:19.700 --> 00:00:19.710 align:start position:0%
I also recommend solving twosome 2 which
 

00:00:19.710 --> 00:00:22.040 align:start position:0%
I also recommend solving twosome 2 which
is<00:00:19.949><c> basically</c><00:00:20.520><c> to</c><00:00:20.880><c> some</c><00:00:21.180><c> except</c><00:00:21.510><c> the</c><00:00:21.630><c> input</c>

00:00:22.040 --> 00:00:22.050 align:start position:0%
is basically to some except the input
 

00:00:22.050 --> 00:00:24.080 align:start position:0%
is basically to some except the input
array<00:00:22.140><c> sorted</c><00:00:22.650><c> a</c><00:00:23.010><c> lot</c><00:00:23.250><c> of</c><00:00:23.340><c> people</c><00:00:23.580><c> skip</c><00:00:23.910><c> this</c>

00:00:24.080 --> 00:00:24.090 align:start position:0%
array sorted a lot of people skip this
 

00:00:24.090 --> 00:00:25.689 align:start position:0%
array sorted a lot of people skip this
question<00:00:24.539><c> I</c><00:00:24.660><c> think</c><00:00:24.720><c> that's</c><00:00:25.019><c> what</c><00:00:25.289><c> makes</c>

00:00:25.689 --> 00:00:25.699 align:start position:0%
question I think that's what makes
 

00:00:25.699 --> 00:00:28.220 align:start position:0%
question I think that's what makes
threesome<00:00:26.699><c> a</c><00:00:26.730><c> little</c><00:00:27.090><c> harder</c><00:00:27.630><c> because</c><00:00:27.840><c> they</c>

00:00:28.220 --> 00:00:28.230 align:start position:0%
threesome a little harder because they
 

00:00:28.230 --> 00:00:30.259 align:start position:0%
threesome a little harder because they
don't<00:00:28.410><c> solve</c><00:00:28.980><c> this</c><00:00:29.250><c> one</c><00:00:29.460><c> first</c><00:00:29.760><c> if</c><00:00:29.910><c> you</c><00:00:30.000><c> solve</c>

00:00:30.259 --> 00:00:30.269 align:start position:0%
don't solve this one first if you solve
 

00:00:30.269 --> 00:00:33.350 align:start position:0%
don't solve this one first if you solve
twosome<00:00:30.810><c> n</c><00:00:30.990><c> to</c><00:00:31.289><c> sum</c><00:00:31.529><c> to</c><00:00:31.790><c> this</c><00:00:32.790><c> question</c>

00:00:33.350 --> 00:00:33.360 align:start position:0%
twosome n to sum to this question
 

00:00:33.360 --> 00:00:35.540 align:start position:0%
twosome n to sum to this question
threesome<00:00:33.960><c> is</c><00:00:34.110><c> pretty</c><00:00:34.559><c> straightforward</c><00:00:35.430><c> in</c>

00:00:35.540 --> 00:00:35.550 align:start position:0%
threesome is pretty straightforward in
 

00:00:35.550 --> 00:00:37.729 align:start position:0%
threesome is pretty straightforward in
my<00:00:35.670><c> opinion</c><00:00:36.210><c> but</c><00:00:36.780><c> ok</c><00:00:37.050><c> let's</c><00:00:37.079><c> get</c><00:00:37.380><c> into</c><00:00:37.440><c> the</c>

00:00:37.729 --> 00:00:37.739 align:start position:0%
my opinion but ok let's get into the
 

00:00:37.739 --> 00:00:39.319 align:start position:0%
my opinion but ok let's get into the
question<00:00:38.100><c> so</c><00:00:38.340><c> we're</c><00:00:38.489><c> given</c><00:00:38.730><c> an</c><00:00:38.850><c> input</c><00:00:39.239><c> array</c>

00:00:39.319 --> 00:00:39.329 align:start position:0%
question so we're given an input array
 

00:00:39.329 --> 00:00:43.069 align:start position:0%
question so we're given an input array
of<00:00:39.780><c> n</c><00:00:39.930><c> integers</c><00:00:40.350><c> as</c><00:00:40.800><c> per</c><00:00:41.250><c> usual</c><00:00:41.660><c> this</c><00:00:42.660><c> array</c>

00:00:43.069 --> 00:00:43.079 align:start position:0%
of n integers as per usual this array
 

00:00:43.079 --> 00:00:45.619 align:start position:0%
of n integers as per usual this array
though<00:00:43.620><c> can</c><00:00:44.100><c> have</c><00:00:44.340><c> duplicates</c><00:00:44.940><c> as</c><00:00:45.120><c> we</c><00:00:45.300><c> can</c><00:00:45.450><c> see</c>

00:00:45.619 --> 00:00:45.629 align:start position:0%
though can have duplicates as we can see
 

00:00:45.629 --> 00:00:47.569 align:start position:0%
though can have duplicates as we can see
in<00:00:45.840><c> the</c><00:00:46.020><c> example</c><00:00:46.110><c> right</c><00:00:46.649><c> two</c><00:00:46.890><c> negative</c><00:00:47.340><c> ones</c>

00:00:47.569 --> 00:00:47.579 align:start position:0%
in the example right two negative ones
 

00:00:47.579 --> 00:00:49.729 align:start position:0%
in the example right two negative ones
in<00:00:47.789><c> this</c><00:00:47.940><c> case</c><00:00:48.149><c> now</c><00:00:48.870><c> what</c><00:00:49.079><c> we</c><00:00:49.200><c> want</c><00:00:49.440><c> to</c><00:00:49.500><c> do</c><00:00:49.620><c> is</c>

00:00:49.729 --> 00:00:49.739 align:start position:0%
in this case now what we want to do is
 

00:00:49.739 --> 00:00:54.200 align:start position:0%
in this case now what we want to do is
find<00:00:50.010><c> 3</c><00:00:50.520><c> numbers</c><00:00:51.059><c> of</c><00:00:51.239><c> this</c><00:00:51.539><c> array</c><00:00:51.930><c> so</c><00:00:52.469><c> a</c><00:00:52.879><c> B</c><00:00:53.879><c> and</c>

00:00:54.200 --> 00:00:54.210 align:start position:0%
find 3 numbers of this array so a B and
 

00:00:54.210 --> 00:00:57.830 align:start position:0%
find 3 numbers of this array so a B and
C<00:00:54.960><c> and</c><00:00:55.260><c> they</c><00:00:55.739><c> and</c><00:00:56.010><c> we</c><00:00:56.129><c> want</c><00:00:56.340><c> them</c><00:00:56.550><c> to</c><00:00:56.579><c> sum</c><00:00:57.000><c> to</c><00:00:57.270><c> 0</c>

00:00:57.830 --> 00:00:57.840 align:start position:0%
C and they and we want them to sum to 0
 

00:00:57.840 --> 00:01:00.260 align:start position:0%
C and they and we want them to sum to 0
so<00:00:58.590><c> in</c><00:00:58.800><c> the</c><00:00:59.129><c> example</c><00:00:59.699><c> there</c><00:00:59.879><c> were</c><00:00:59.969><c> two</c>

00:01:00.260 --> 00:01:00.270 align:start position:0%
so in the example there were two
 

00:01:00.270 --> 00:01:03.349 align:start position:0%
so in the example there were two
elements<00:01:00.989><c> or</c><00:01:01.199><c> two</c><00:01:01.530><c> triplets</c><00:01:02.489><c> that</c><00:01:02.609><c> summed</c><00:01:03.149><c> it</c>

00:01:03.349 --> 00:01:03.359 align:start position:0%
elements or two triplets that summed it
 

00:01:03.359 --> 00:01:07.340 align:start position:0%
elements or two triplets that summed it
to<00:01:03.600><c> the</c><00:01:04.350><c> total</c><00:01:04.680><c> 0</c><00:01:04.979><c> now</c><00:01:05.729><c> one</c><00:01:06.030><c> problem</c><00:01:06.689><c> is</c><00:01:07.020><c> that</c>

00:01:07.340 --> 00:01:07.350 align:start position:0%
to the total 0 now one problem is that
 

00:01:07.350 --> 00:01:10.760 align:start position:0%
to the total 0 now one problem is that
we<00:01:08.130><c> cannot</c><00:01:08.850><c> have</c><00:01:09.270><c> duplicates</c><00:01:10.229><c> in</c><00:01:10.470><c> our</c>

00:01:10.760 --> 00:01:10.770 align:start position:0%
we cannot have duplicates in our
 

00:01:10.770 --> 00:01:12.950 align:start position:0%
we cannot have duplicates in our
solution<00:01:11.130><c> so</c><00:01:11.970><c> we're</c><00:01:12.390><c> gonna</c><00:01:12.510><c> have</c><00:01:12.659><c> to</c><00:01:12.689><c> keep</c>

00:01:12.950 --> 00:01:12.960 align:start position:0%
solution so we're gonna have to keep
 

00:01:12.960 --> 00:01:14.929 align:start position:0%
solution so we're gonna have to keep
that<00:01:13.170><c> in</c><00:01:13.229><c> the</c><00:01:13.439><c> back</c><00:01:13.470><c> of</c><00:01:13.830><c> our</c><00:01:13.920><c> minds</c><00:01:14.369><c> so</c><00:01:14.670><c> let's</c>

00:01:14.929 --> 00:01:14.939 align:start position:0%
that in the back of our minds so let's
 

00:01:14.939 --> 00:01:17.510 align:start position:0%
that in the back of our minds so let's
just<00:01:15.180><c> start</c><00:01:15.540><c> the</c><00:01:15.810><c> most</c><00:01:16.020><c> brute</c><00:01:16.439><c> force</c><00:01:16.770><c> way</c><00:01:17.040><c> you</c>

00:01:17.510 --> 00:01:17.520 align:start position:0%
just start the most brute force way you
 

00:01:17.520 --> 00:01:19.460 align:start position:0%
just start the most brute force way you
we<00:01:17.700><c> see</c><00:01:17.909><c> that</c><00:01:18.060><c> we</c><00:01:18.180><c> need</c><00:01:18.390><c> three</c><00:01:18.750><c> numbers</c><00:01:18.990><c> so</c><00:01:19.320><c> why</c>

00:01:19.460 --> 00:01:19.470 align:start position:0%
we see that we need three numbers so why
 

00:01:19.470 --> 00:01:21.320 align:start position:0%
we see that we need three numbers so why
not<00:01:19.619><c> just</c><00:01:19.799><c> have</c><00:01:19.950><c> a</c><00:01:19.979><c> triple</c><00:01:20.490><c> loop</c><00:01:20.759><c> right</c><00:01:21.090><c> just</c>

00:01:21.320 --> 00:01:21.330 align:start position:0%
not just have a triple loop right just
 

00:01:21.330 --> 00:01:23.480 align:start position:0%
not just have a triple loop right just
get<00:01:21.479><c> every</c><00:01:21.930><c> single</c><00:01:22.170><c> combination</c><00:01:22.770><c> of</c><00:01:23.220><c> three</c>

00:01:23.480 --> 00:01:23.490 align:start position:0%
get every single combination of three
 

00:01:23.490 --> 00:01:25.550 align:start position:0%
get every single combination of three
numbers<00:01:23.909><c> that's</c><00:01:24.540><c> probably</c><00:01:24.960><c> the</c><00:01:25.110><c> first</c><00:01:25.140><c> thing</c>

00:01:25.550 --> 00:01:25.560 align:start position:0%
numbers that's probably the first thing
 

00:01:25.560 --> 00:01:27.050 align:start position:0%
numbers that's probably the first thing
you're<00:01:25.680><c> gonna</c><00:01:25.770><c> try</c><00:01:26.130><c> right</c><00:01:26.400><c> so</c><00:01:26.580><c> let's</c><00:01:26.790><c> say</c><00:01:26.939><c> our</c>

00:01:27.050 --> 00:01:27.060 align:start position:0%
you're gonna try right so let's say our
 

00:01:27.060 --> 00:01:29.200 align:start position:0%
you're gonna try right so let's say our
first<00:01:27.330><c> number</c><00:01:27.840><c> is</c><00:01:27.990><c> negative</c><00:01:28.229><c> three</c>

00:01:29.200 --> 00:01:29.210 align:start position:0%
first number is negative three
 

00:01:29.210 --> 00:01:33.170 align:start position:0%
first number is negative three
this<00:01:30.210><c> is</c><00:01:30.420><c> our</c><00:01:30.570><c> a</c><00:01:30.869><c> so</c><00:01:31.680><c> we're</c><00:01:31.860><c> gonna</c><00:01:31.979><c> try</c><00:01:32.250><c> each</c><00:01:32.880><c> of</c>

00:01:33.170 --> 00:01:33.180 align:start position:0%
this is our a so we're gonna try each of
 

00:01:33.180 --> 00:01:35.120 align:start position:0%
this is our a so we're gonna try each of
these<00:01:33.360><c> numbers</c><00:01:33.659><c> for</c><00:01:34.079><c> B</c><00:01:34.290><c> right</c><00:01:34.560><c> this</c><00:01:34.799><c> could</c><00:01:34.950><c> be</c>

00:01:35.120 --> 00:01:35.130 align:start position:0%
these numbers for B right this could be
 

00:01:35.130 --> 00:01:36.890 align:start position:0%
these numbers for B right this could be
a<00:01:35.159><c> B</c><00:01:35.369><c> this</c><00:01:35.579><c> could</c><00:01:35.790><c> be</c><00:01:35.939><c> a</c><00:01:35.970><c> B</c><00:01:36.150><c> this</c><00:01:36.329><c> could</c><00:01:36.509><c> be</c><00:01:36.659><c> a</c><00:01:36.689><c> B</c>

00:01:36.890 --> 00:01:36.900 align:start position:0%
a B this could be a B this could be a B
 

00:01:36.900 --> 00:01:39.260 align:start position:0%
a B this could be a B this could be a B
this<00:01:37.110><c> could</c><00:01:37.320><c> be</c><00:01:37.439><c> a</c><00:01:37.470><c> B</c><00:01:37.740><c> this</c><00:01:38.430><c> last</c><00:01:38.670><c> one</c><00:01:38.880><c> can't</c><00:01:39.119><c> be</c>

00:01:39.260 --> 00:01:39.270 align:start position:0%
this could be a B this last one can't be
 

00:01:39.270 --> 00:01:40.880 align:start position:0%
this could be a B this last one can't be
a<00:01:39.299><c> B</c><00:01:39.509><c> because</c><00:01:39.810><c> we</c><00:01:39.930><c> need</c><00:01:40.110><c> at</c><00:01:40.200><c> least</c><00:01:40.229><c> one</c><00:01:40.439><c> number</c>

00:01:40.880 --> 00:01:40.890 align:start position:0%
a B because we need at least one number
 

00:01:40.890 --> 00:01:43.460 align:start position:0%
a B because we need at least one number
to<00:01:41.040><c> come</c><00:01:41.159><c> after</c><00:01:41.670><c> it</c><00:01:41.790><c> so</c><00:01:41.970><c> that</c><00:01:42.150><c> it's</c><00:01:42.270><c> a</c><00:01:42.360><c> C</c><00:01:42.659><c> now</c><00:01:43.259><c> if</c>

00:01:43.460 --> 00:01:43.470 align:start position:0%
to come after it so that it's a C now if
 

00:01:43.470 --> 00:01:45.289 align:start position:0%
to come after it so that it's a C now if
we<00:01:43.649><c> did</c><00:01:43.920><c> that</c><00:01:44.159><c> if</c><00:01:44.490><c> we</c><00:01:44.820><c> did</c><00:01:45.000><c> that</c><00:01:45.119><c> with</c><00:01:45.270><c> our</c>

00:01:45.289 --> 00:01:45.299 align:start position:0%
we did that if we did that with our
 

00:01:45.299 --> 00:01:47.120 align:start position:0%
we did that if we did that with our
triple<00:01:45.780><c> loop</c><00:01:45.960><c> we</c><00:01:46.170><c> would</c><00:01:46.320><c> find</c><00:01:46.649><c> that</c><00:01:46.890><c> there</c><00:01:47.100><c> is</c>

00:01:47.120 --> 00:01:47.130 align:start position:0%
triple loop we would find that there is
 

00:01:47.130 --> 00:01:50.030 align:start position:0%
triple loop we would find that there is
one<00:01:47.640><c> such</c><00:01:48.540><c> combination</c><00:01:49.320><c> starting</c><00:01:49.920><c> with</c>

00:01:50.030 --> 00:01:50.040 align:start position:0%
one such combination starting with
 

00:01:50.040 --> 00:01:52.490 align:start position:0%
one such combination starting with
negative<00:01:50.280><c> three</c><00:01:50.850><c> that</c><00:01:51.390><c> will</c><00:01:51.570><c> sum</c><00:01:51.899><c> to</c><00:01:52.110><c> zero</c><00:01:52.350><c> if</c>

00:01:52.490 --> 00:01:52.500 align:start position:0%
negative three that will sum to zero if
 

00:01:52.500 --> 00:01:55.340 align:start position:0%
negative three that will sum to zero if
we<00:01:52.680><c> take</c><00:01:53.009><c> one</c><00:01:53.369><c> as</c><00:01:53.579><c> our</c><00:01:53.759><c> B</c><00:01:54.000><c> and</c><00:01:54.180><c> we</c><00:01:54.570><c> take</c><00:01:54.810><c> two</c><00:01:55.079><c> as</c>

00:01:55.340 --> 00:01:55.350 align:start position:0%
we take one as our B and we take two as
 

00:01:55.350 --> 00:01:57.260 align:start position:0%
we take one as our B and we take two as
our<00:01:55.530><c> C</c><00:01:55.770><c> value</c><00:01:55.799><c> because</c><00:01:56.790><c> then</c><00:01:56.969><c> we'll</c><00:01:57.149><c> have</c>

00:01:57.260 --> 00:01:57.270 align:start position:0%
our C value because then we'll have
 

00:01:57.270 --> 00:02:00.139 align:start position:0%
our C value because then we'll have
negative<00:01:57.719><c> three</c><00:01:58.049><c> plus</c><00:01:58.619><c> one</c><00:01:59.070><c> plus</c><00:01:59.520><c> two</c><00:01:59.790><c> that's</c>

00:02:00.139 --> 00:02:00.149 align:start position:0%
negative three plus one plus two that's
 

00:02:00.149 --> 00:02:03.170 align:start position:0%
negative three plus one plus two that's
obviously<00:02:00.960><c> zero</c><00:02:01.320><c> so</c><00:02:02.070><c> to</c><00:02:02.130><c> our</c><00:02:02.340><c> solution</c><00:02:02.820><c> set</c><00:02:03.000><c> we</c>

00:02:03.170 --> 00:02:03.180 align:start position:0%
obviously zero so to our solution set we
 

00:02:03.180 --> 00:02:05.480 align:start position:0%
obviously zero so to our solution set we
can<00:02:03.360><c> say</c><00:02:03.570><c> okay</c><00:02:04.020><c> there's</c><00:02:04.500><c> a</c><00:02:04.619><c> negative</c><00:02:04.770><c> three</c><00:02:05.310><c> a</c>

00:02:05.480 --> 00:02:05.490 align:start position:0%
can say okay there's a negative three a
 

00:02:05.490 --> 00:02:07.429 align:start position:0%
can say okay there's a negative three a
one<00:02:06.180><c> and</c><00:02:06.479><c> A</c><00:02:06.930><c> two</c>

00:02:07.429 --> 00:02:07.439 align:start position:0%
one and A two
 

00:02:07.439 --> 00:02:11.210 align:start position:0%
one and A two
so<00:02:08.220><c> now</c><00:02:08.520><c> when</c><00:02:08.759><c> we</c><00:02:08.940><c> move</c><00:02:09.379><c> we</c><00:02:10.379><c> can</c><00:02:10.590><c> consider</c><00:02:10.979><c> this</c>

00:02:11.210 --> 00:02:11.220 align:start position:0%
so now when we move we can consider this
 

00:02:11.220 --> 00:02:13.430 align:start position:0%
so now when we move we can consider this
as<00:02:11.459><c> our</c><00:02:11.580><c> first</c><00:02:11.879><c> element</c><00:02:12.360><c> right</c><00:02:12.569><c> but</c>

00:02:13.430 --> 00:02:13.440 align:start position:0%
as our first element right but
 

00:02:13.440 --> 00:02:14.900 align:start position:0%
as our first element right but
eventually<00:02:13.890><c> we'll</c><00:02:14.070><c> see</c><00:02:14.280><c> that</c><00:02:14.430><c> we</c><00:02:14.550><c> go</c><00:02:14.700><c> through</c>

00:02:14.900 --> 00:02:14.910 align:start position:0%
eventually we'll see that we go through
 

00:02:14.910 --> 00:02:16.310 align:start position:0%
eventually we'll see that we go through
the<00:02:15.030><c> entire</c><00:02:15.300><c> thing</c><00:02:15.360><c> and</c><00:02:15.780><c> we</c><00:02:15.870><c> don't</c><00:02:15.990><c> find</c>

00:02:16.310 --> 00:02:16.320 align:start position:0%
the entire thing and we don't find
 

00:02:16.320 --> 00:02:18.410 align:start position:0%
the entire thing and we don't find
anything<00:02:16.620><c> that</c><00:02:17.280><c> cannot</c><00:02:17.550><c> be</c><00:02:17.730><c> added</c><00:02:18.000><c> to</c><00:02:18.120><c> three</c>

00:02:18.410 --> 00:02:18.420 align:start position:0%
anything that cannot be added to three
 

00:02:18.420 --> 00:02:20.300 align:start position:0%
anything that cannot be added to three
that'll<00:02:18.720><c> give</c><00:02:18.900><c> us</c><00:02:18.930><c> a</c><00:02:19.170><c> sum</c><00:02:19.500><c> of</c><00:02:19.530><c> zero</c><00:02:19.830><c> we</c><00:02:20.070><c> all</c><00:02:20.160><c> do</c>

00:02:20.300 --> 00:02:20.310 align:start position:0%
that'll give us a sum of zero we all do
 

00:02:20.310 --> 00:02:22.040 align:start position:0%
that'll give us a sum of zero we all do
the<00:02:20.460><c> same</c><00:02:20.730><c> for</c><00:02:20.970><c> this</c><00:02:21.120><c> one</c><00:02:21.180><c> and</c><00:02:21.600><c> there</c><00:02:21.720><c> isn't</c>

00:02:22.040 --> 00:02:22.050 align:start position:0%
the same for this one and there isn't
 

00:02:22.050 --> 00:02:24.380 align:start position:0%
the same for this one and there isn't
anything<00:02:22.260><c> now</c><00:02:23.010><c> we</c><00:02:23.070><c> get</c><00:02:23.370><c> to</c><00:02:23.550><c> with</c><00:02:23.700><c> negative</c>

00:02:24.380 --> 00:02:24.390 align:start position:0%
anything now we get to with negative
 

00:02:24.390 --> 00:02:26.360 align:start position:0%
anything now we get to with negative
three<00:02:24.630><c> again</c><00:02:25.200><c> though</c><00:02:25.470><c> because</c><00:02:26.100><c> remember</c>

00:02:26.360 --> 00:02:26.370 align:start position:0%
three again though because remember
 

00:02:26.370 --> 00:02:28.730 align:start position:0%
three again though because remember
there<00:02:26.670><c> are</c><00:02:26.700><c> duplicates</c><00:02:27.450><c> in</c><00:02:27.570><c> this</c><00:02:27.840><c> array</c><00:02:28.170><c> so</c>

00:02:28.730 --> 00:02:28.740 align:start position:0%
there are duplicates in this array so
 

00:02:28.740 --> 00:02:30.560 align:start position:0%
there are duplicates in this array so
now<00:02:28.950><c> we're</c><00:02:29.160><c> saying</c><00:02:29.430><c> again</c><00:02:29.970><c> that</c><00:02:30.300><c> we're</c><00:02:30.450><c> gonna</c>

00:02:30.560 --> 00:02:30.570 align:start position:0%
now we're saying again that we're gonna
 

00:02:30.570 --> 00:02:33.170 align:start position:0%
now we're saying again that we're gonna
put<00:02:30.840><c> negative</c><00:02:31.470><c> three</c><00:02:31.800><c> in</c><00:02:32.010><c> this</c><00:02:32.370><c> first</c><00:02:32.760><c> spot</c>

00:02:33.170 --> 00:02:33.180 align:start position:0%
put negative three in this first spot
 

00:02:33.180 --> 00:02:35.270 align:start position:0%
put negative three in this first spot
now<00:02:33.540><c> this</c><00:02:33.840><c> is</c><00:02:33.990><c> a</c><00:02:34.020><c> recipe</c><00:02:34.620><c> for</c><00:02:34.800><c> finding</c>

00:02:35.270 --> 00:02:35.280 align:start position:0%
now this is a recipe for finding
 

00:02:35.280 --> 00:02:38.150 align:start position:0%
now this is a recipe for finding
duplicates<00:02:35.790><c> this</c><00:02:36.600><c> is</c><00:02:36.810><c> not</c><00:02:36.990><c> good</c><00:02:37.440><c> and</c><00:02:37.710><c> we'll</c>

00:02:38.150 --> 00:02:38.160 align:start position:0%
duplicates this is not good and we'll
 

00:02:38.160 --> 00:02:39.650 align:start position:0%
duplicates this is not good and we'll
see<00:02:38.370><c> in</c><00:02:38.460><c> this</c><00:02:38.580><c> example</c><00:02:38.910><c> that's</c><00:02:39.150><c> exactly</c>

00:02:39.650 --> 00:02:39.660 align:start position:0%
see in this example that's exactly
 

00:02:39.660 --> 00:02:41.210 align:start position:0%
see in this example that's exactly
what's<00:02:39.810><c> gonna</c><00:02:39.870><c> happen</c><00:02:39.990><c> does</c><00:02:40.410><c> another</c><00:02:40.710><c> we'll</c>

00:02:41.210 --> 00:02:41.220 align:start position:0%
what's gonna happen does another we'll
 

00:02:41.220 --> 00:02:42.920 align:start position:0%
what's gonna happen does another we'll
take<00:02:41.430><c> this</c><00:02:41.610><c> as</c><00:02:41.820><c> our</c><00:02:41.940><c> B</c><00:02:42.180><c> we'll</c><00:02:42.420><c> take</c><00:02:42.600><c> this</c><00:02:42.750><c> as</c>

00:02:42.920 --> 00:02:42.930 align:start position:0%
take this as our B we'll take this as
 

00:02:42.930 --> 00:02:45.890 align:start position:0%
take this as our B we'll take this as
our<00:02:43.050><c> C</c><00:02:43.260><c> again</c><00:02:43.830><c> we</c><00:02:44.070><c> find</c><00:02:44.370><c> negative</c><00:02:45.000><c> three</c><00:02:45.480><c> plus</c>

00:02:45.890 --> 00:02:45.900 align:start position:0%
our C again we find negative three plus
 

00:02:45.900 --> 00:02:48.710 align:start position:0%
our C again we find negative three plus
one<00:02:46.110><c> plus</c><00:02:46.620><c> two</c><00:02:46.770><c> sums</c><00:02:47.700><c> to</c><00:02:47.910><c> zero</c><00:02:48.120><c> so</c><00:02:48.420><c> then</c><00:02:48.600><c> we're</c>

00:02:48.710 --> 00:02:48.720 align:start position:0%
one plus two sums to zero so then we're
 

00:02:48.720 --> 00:02:50.750 align:start position:0%
one plus two sums to zero so then we're
gonna<00:02:48.840><c> add</c><00:02:49.050><c> that</c><00:02:49.260><c> again</c><00:02:49.410><c> to</c><00:02:50.070><c> our</c><00:02:50.100><c> result</c><00:02:50.670><c> set</c>

00:02:50.750 --> 00:02:50.760 align:start position:0%
gonna add that again to our result set
 

00:02:50.760 --> 00:02:55.790 align:start position:0%
gonna add that again to our result set
right<00:02:53.270><c> but</c><00:02:54.270><c> that's</c><00:02:54.420><c> not</c><00:02:54.780><c> what</c><00:02:55.050><c> we</c><00:02:55.200><c> want</c><00:02:55.530><c> we</c>

00:02:55.790 --> 00:02:55.800 align:start position:0%
right but that's not what we want we
 

00:02:55.800 --> 00:02:57.920 align:start position:0%
right but that's not what we want we
want<00:02:55.830><c> to</c><00:02:56.160><c> eliminate</c><00:02:56.550><c> the</c><00:02:56.820><c> duplicates</c><00:02:57.090><c> so</c><00:02:57.660><c> the</c>

00:02:57.920 --> 00:02:57.930 align:start position:0%
want to eliminate the duplicates so the
 

00:02:57.930 --> 00:03:00.080 align:start position:0%
want to eliminate the duplicates so the
problem<00:02:58.470><c> was</c><00:02:58.710><c> we</c><00:02:58.920><c> took</c><00:02:59.100><c> negative</c><00:02:59.640><c> three</c><00:02:59.910><c> as</c>

00:03:00.080 --> 00:03:00.090 align:start position:0%
problem was we took negative three as
 

00:03:00.090 --> 00:03:03.170 align:start position:0%
problem was we took negative three as
our<00:03:00.300><c> a</c><00:03:00.570><c> value</c><00:03:00.860><c> right</c><00:03:01.860><c> and</c><00:03:02.100><c> then</c><00:03:02.520><c> we</c><00:03:02.670><c> search</c><00:03:02.940><c> the</c>

00:03:03.170 --> 00:03:03.180 align:start position:0%
our a value right and then we search the
 

00:03:03.180 --> 00:03:05.000 align:start position:0%
our a value right and then we search the
rest<00:03:03.420><c> of</c><00:03:03.630><c> the</c><00:03:03.720><c> array</c><00:03:03.960><c> for</c><00:03:04.200><c> two</c><00:03:04.350><c> numbers</c><00:03:04.740><c> one</c>

00:03:05.000 --> 00:03:05.010 align:start position:0%
rest of the array for two numbers one
 

00:03:05.010 --> 00:03:08.030 align:start position:0%
rest of the array for two numbers one
and<00:03:05.190><c> two</c><00:03:05.430><c> that</c><00:03:05.940><c> add</c><00:03:06.180><c> to</c><00:03:06.570><c> zero</c><00:03:06.810><c> but</c><00:03:07.440><c> then</c><00:03:07.770><c> we</c>

00:03:08.030 --> 00:03:08.040 align:start position:0%
and two that add to zero but then we
 

00:03:08.040 --> 00:03:10.400 align:start position:0%
and two that add to zero but then we
went<00:03:08.280><c> back</c><00:03:08.430><c> here</c><00:03:09.150><c> right</c><00:03:09.390><c> and</c><00:03:09.660><c> we</c><00:03:09.960><c> found</c><00:03:10.170><c> the</c>

00:03:10.400 --> 00:03:10.410 align:start position:0%
went back here right and we found the
 

00:03:10.410 --> 00:03:11.930 align:start position:0%
went back here right and we found the
negative<00:03:10.770><c> three</c><00:03:10.980><c> again</c><00:03:11.250><c> and</c><00:03:11.430><c> we</c><00:03:11.580><c> did</c><00:03:11.790><c> the</c>

00:03:11.930 --> 00:03:11.940 align:start position:0%
negative three again and we did the
 

00:03:11.940 --> 00:03:15.290 align:start position:0%
negative three again and we did the
exact<00:03:12.420><c> same</c><00:03:12.570><c> thing</c><00:03:13.040><c> the</c><00:03:14.040><c> problem</c><00:03:14.610><c> is</c><00:03:14.760><c> we</c><00:03:15.060><c> don't</c>

00:03:15.290 --> 00:03:15.300 align:start position:0%
exact same thing the problem is we don't
 

00:03:15.300 --> 00:03:17.390 align:start position:0%
exact same thing the problem is we don't
want<00:03:15.450><c> to</c><00:03:15.600><c> have</c><00:03:15.720><c> the</c><00:03:15.870><c> same</c><00:03:16.290><c> number</c><00:03:16.830><c> in</c><00:03:16.860><c> this</c>

00:03:17.390 --> 00:03:17.400 align:start position:0%
want to have the same number in this
 

00:03:17.400 --> 00:03:20.270 align:start position:0%
want to have the same number in this
position<00:03:18.030><c> in</c><00:03:18.150><c> the</c><00:03:18.270><c> a</c><00:03:18.300><c> position</c><00:03:18.989><c> twice</c><00:03:19.650><c> because</c>

00:03:20.270 --> 00:03:20.280 align:start position:0%
position in the a position twice because
 

00:03:20.280 --> 00:03:22.310 align:start position:0%
position in the a position twice because
then<00:03:20.459><c> if</c><00:03:20.730><c> there</c><00:03:20.970><c> are</c><00:03:21.000><c> the</c><00:03:21.600><c> numbers</c><00:03:21.989><c> that</c><00:03:22.140><c> come</c>

00:03:22.310 --> 00:03:22.320 align:start position:0%
then if there are the numbers that come
 

00:03:22.320 --> 00:03:24.320 align:start position:0%
then if there are the numbers that come
after<00:03:22.830><c> it</c><00:03:22.860><c> we</c><00:03:23.459><c> could</c><00:03:23.610><c> potentially</c><00:03:23.880><c> find</c>

00:03:24.320 --> 00:03:24.330 align:start position:0%
after it we could potentially find
 

00:03:24.330 --> 00:03:26.510 align:start position:0%
after it we could potentially find
duplicates<00:03:25.050><c> the</c><00:03:25.470><c> solution</c><00:03:26.040><c> to</c><00:03:26.190><c> this</c><00:03:26.310><c> problem</c>

00:03:26.510 --> 00:03:26.520 align:start position:0%
duplicates the solution to this problem
 

00:03:26.520 --> 00:03:28.880 align:start position:0%
duplicates the solution to this problem
is<00:03:26.940><c> to</c><00:03:27.239><c> sort</c><00:03:27.600><c> the</c><00:03:27.750><c> input</c><00:03:28.170><c> array</c><00:03:28.230><c> let</c><00:03:28.590><c> me</c><00:03:28.709><c> show</c>

00:03:28.880 --> 00:03:28.890 align:start position:0%
is to sort the input array let me show
 

00:03:28.890 --> 00:03:31.370 align:start position:0%
is to sort the input array let me show
you<00:03:28.950><c> what</c><00:03:29.160><c> I</c><00:03:29.190><c> mean</c><00:03:29.459><c> so</c><00:03:30.360><c> here</c><00:03:30.630><c> you</c><00:03:30.780><c> can</c><00:03:30.959><c> see</c><00:03:31.200><c> that</c>

00:03:31.370 --> 00:03:31.380 align:start position:0%
you what I mean so here you can see that
 

00:03:31.380 --> 00:03:34.100 align:start position:0%
you what I mean so here you can see that
the<00:03:31.560><c> array</c><00:03:31.830><c> is</c><00:03:32.070><c> now</c><00:03:32.250><c> sorted</c><00:03:32.940><c> let's</c><00:03:33.480><c> cross</c><00:03:33.870><c> out</c>

00:03:34.100 --> 00:03:34.110 align:start position:0%
the array is now sorted let's cross out
 

00:03:34.110 --> 00:03:36.350 align:start position:0%
the array is now sorted let's cross out
our<00:03:34.140><c> top</c><00:03:34.560><c> right</c><00:03:34.860><c> which</c><00:03:35.130><c> was</c><00:03:35.370><c> unsorted</c><00:03:35.940><c> so</c><00:03:36.180><c> now</c>

00:03:36.350 --> 00:03:36.360 align:start position:0%
our top right which was unsorted so now
 

00:03:36.360 --> 00:03:38.780 align:start position:0%
our top right which was unsorted so now
we<00:03:36.420><c> are</c><00:03:36.690><c> going</c><00:03:36.870><c> to</c><00:03:36.930><c> sort</c><00:03:37.260><c> the</c><00:03:37.770><c> input</c><00:03:38.100><c> array</c><00:03:38.190><c> so</c>

00:03:38.780 --> 00:03:38.790 align:start position:0%
we are going to sort the input array so
 

00:03:38.790 --> 00:03:40.130 align:start position:0%
we are going to sort the input array so
now<00:03:39.030><c> when</c><00:03:39.239><c> we're</c><00:03:39.450><c> looking</c><00:03:39.780><c> for</c><00:03:39.959><c> all</c>

00:03:40.130 --> 00:03:40.140 align:start position:0%
now when we're looking for all
 

00:03:40.140 --> 00:03:42.800 align:start position:0%
now when we're looking for all
combinations<00:03:40.620><c> if</c><00:03:41.130><c> we</c><00:03:41.580><c> find</c><00:03:41.940><c> negative</c><00:03:42.239><c> three</c>

00:03:42.800 --> 00:03:42.810 align:start position:0%
combinations if we find negative three
 

00:03:42.810 --> 00:03:45.710 align:start position:0%
combinations if we find negative three
first<00:03:43.800><c> then</c><00:03:44.550><c> that's</c><00:03:44.730><c> good</c><00:03:45.030><c> okay</c><00:03:45.330><c> we'll</c><00:03:45.510><c> say</c>

00:03:45.710 --> 00:03:45.720 align:start position:0%
first then that's good okay we'll say
 

00:03:45.720 --> 00:03:47.270 align:start position:0%
first then that's good okay we'll say
negative<00:03:46.140><c> three</c><00:03:46.410><c> then</c><00:03:46.650><c> we</c><00:03:46.680><c> find</c><00:03:47.040><c> these</c><00:03:47.220><c> two</c>

00:03:47.270 --> 00:03:47.280 align:start position:0%
negative three then we find these two
 

00:03:47.280 --> 00:03:50.300 align:start position:0%
negative three then we find these two
numbers<00:03:47.910><c> 1</c><00:03:48.630><c> plus</c><00:03:48.930><c> 2</c><00:03:49.200><c> and</c><00:03:49.470><c> then</c><00:03:49.890><c> we</c><00:03:50.010><c> find</c><00:03:50.220><c> our</c>

00:03:50.300 --> 00:03:50.310 align:start position:0%
numbers 1 plus 2 and then we find our
 

00:03:50.310 --> 00:03:53.630 align:start position:0%
numbers 1 plus 2 and then we find our
solution<00:03:50.670><c> great</c><00:03:51.739><c> now</c><00:03:52.739><c> if</c><00:03:52.860><c> we</c><00:03:53.010><c> get</c><00:03:53.130><c> to</c><00:03:53.280><c> negative</c>

00:03:53.630 --> 00:03:53.640 align:start position:0%
solution great now if we get to negative
 

00:03:53.640 --> 00:03:56.570 align:start position:0%
solution great now if we get to negative
3<00:03:53.850><c> again</c><00:03:54.209><c> we'll</c><00:03:54.420><c> say</c><00:03:54.660><c> hey</c><00:03:54.870><c> wait</c><00:03:55.290><c> a</c><00:03:55.350><c> minute</c><00:03:55.709><c> this</c>

00:03:56.570 --> 00:03:56.580 align:start position:0%
3 again we'll say hey wait a minute this
 

00:03:56.580 --> 00:03:59.000 align:start position:0%
3 again we'll say hey wait a minute this
number<00:03:57.090><c> was</c><00:03:57.269><c> already</c><00:03:57.900><c> in</c><00:03:58.140><c> this</c><00:03:58.380><c> position</c>

00:03:59.000 --> 00:03:59.010 align:start position:0%
number was already in this position
 

00:03:59.010 --> 00:04:01.040 align:start position:0%
number was already in this position
right<00:03:59.220><c> and</c><00:03:59.400><c> we</c><00:03:59.730><c> know</c><00:03:59.970><c> that</c><00:04:00.209><c> because</c><00:04:00.390><c> it's</c><00:04:00.630><c> its</c>

00:04:01.040 --> 00:04:01.050 align:start position:0%
right and we know that because it's its
 

00:04:01.050 --> 00:04:03.440 align:start position:0%
right and we know that because it's its
neighbor<00:04:01.500><c> it's</c><00:04:01.860><c> left</c><00:04:02.190><c> neighbor</c><00:04:02.489><c> is</c><00:04:02.760><c> the</c><00:04:03.120><c> same</c>

00:04:03.440 --> 00:04:03.450 align:start position:0%
neighbor it's left neighbor is the same
 

00:04:03.450 --> 00:04:06.050 align:start position:0%
neighbor it's left neighbor is the same
value<00:04:03.690><c> we</c><00:04:04.110><c> don't</c><00:04:04.380><c> want</c><00:04:04.560><c> to</c><00:04:04.620><c> put</c><00:04:04.800><c> it</c><00:04:04.920><c> twice</c><00:04:05.580><c> here</c>

00:04:06.050 --> 00:04:06.060 align:start position:0%
value we don't want to put it twice here
 

00:04:06.060 --> 00:04:07.640 align:start position:0%
value we don't want to put it twice here
because<00:04:06.450><c> if</c><00:04:06.510><c> we</c><00:04:06.630><c> do</c><00:04:06.810><c> we'll</c><00:04:07.019><c> get</c><00:04:07.200><c> the</c><00:04:07.320><c> same</c>

00:04:07.640 --> 00:04:07.650 align:start position:0%
because if we do we'll get the same
 

00:04:07.650 --> 00:04:09.949 align:start position:0%
because if we do we'll get the same
duplicate<00:04:08.519><c> so</c><00:04:09.120><c> we're</c><00:04:09.300><c> gonna</c><00:04:09.420><c> tell</c><00:04:09.750><c> ourselves</c>

00:04:09.949 --> 00:04:09.959 align:start position:0%
duplicate so we're gonna tell ourselves
 

00:04:09.959 --> 00:04:11.960 align:start position:0%
duplicate so we're gonna tell ourselves
that<00:04:10.320><c> we</c><00:04:10.470><c> already</c><00:04:10.739><c> computed</c><00:04:11.640><c> all</c>

00:04:11.960 --> 00:04:11.970 align:start position:0%
that we already computed all
 

00:04:11.970 --> 00:04:14.390 align:start position:0%
that we already computed all
combinations<00:04:12.720><c> that</c><00:04:13.200><c> start</c><00:04:13.769><c> with</c><00:04:13.830><c> a</c><00:04:13.950><c> negative</c>

00:04:14.390 --> 00:04:14.400 align:start position:0%
combinations that start with a negative
 

00:04:14.400 --> 00:04:16.460 align:start position:0%
combinations that start with a negative
3<00:04:14.700><c> so</c><00:04:15.030><c> we</c><00:04:15.150><c> don't</c><00:04:15.450><c> need</c><00:04:15.570><c> to</c><00:04:15.690><c> do</c><00:04:15.840><c> that</c><00:04:16.019><c> anymore</c>

00:04:16.460 --> 00:04:16.470 align:start position:0%
3 so we don't need to do that anymore
 

00:04:16.470 --> 00:04:18.349 align:start position:0%
3 so we don't need to do that anymore
we<00:04:16.980><c> already</c><00:04:17.190><c> visited</c><00:04:17.489><c> this</c><00:04:17.910><c> one</c><00:04:18.120><c> we're</c><00:04:18.269><c> gonna</c>

00:04:18.349 --> 00:04:18.359 align:start position:0%
we already visited this one we're gonna
 

00:04:18.359 --> 00:04:20.599 align:start position:0%
we already visited this one we're gonna
skip<00:04:18.900><c> this</c><00:04:19.230><c> one</c><00:04:19.290><c> and</c><00:04:19.680><c> then</c><00:04:20.100><c> we're</c><00:04:20.280><c> gonna</c><00:04:20.400><c> go</c>

00:04:20.599 --> 00:04:20.609 align:start position:0%
skip this one and then we're gonna go
 

00:04:20.609 --> 00:04:24.050 align:start position:0%
skip this one and then we're gonna go
here<00:04:21.060><c> so</c><00:04:21.840><c> that</c><00:04:22.080><c> means</c><00:04:22.380><c> in</c><00:04:22.650><c> this</c><00:04:23.039><c> case</c><00:04:23.100><c> we're</c>

00:04:24.050 --> 00:04:24.060 align:start position:0%
here so that means in this case we're
 

00:04:24.060 --> 00:04:25.939 align:start position:0%
here so that means in this case we're
not<00:04:24.240><c> going</c><00:04:24.390><c> to</c><00:04:24.419><c> find</c><00:04:24.690><c> any</c><00:04:24.960><c> more</c>

00:04:25.939 --> 00:04:25.949 align:start position:0%
not going to find any more
 

00:04:25.949 --> 00:04:28.309 align:start position:0%
not going to find any more
results<00:04:26.939><c> in</c><00:04:27.120><c> the</c><00:04:27.300><c> remaining</c><00:04:27.719><c> portion</c><00:04:27.990><c> of</c><00:04:28.259><c> the</c>

00:04:28.309 --> 00:04:28.319 align:start position:0%
results in the remaining portion of the
 

00:04:28.319 --> 00:04:29.390 align:start position:0%
results in the remaining portion of the
area<00:04:28.590><c> because</c><00:04:28.800><c> they're</c><00:04:28.949><c> all</c><00:04:29.129><c> positive</c>

00:04:29.390 --> 00:04:29.400 align:start position:0%
area because they're all positive
 

00:04:29.400 --> 00:04:31.879 align:start position:0%
area because they're all positive
they're<00:04:29.879><c> never</c><00:04:30.060><c> going</c><00:04:30.270><c> to</c><00:04:30.330><c> sum</c><00:04:30.569><c> to</c><00:04:30.599><c> zero</c><00:04:30.990><c> so</c>

00:04:31.879 --> 00:04:31.889 align:start position:0%
they're never going to sum to zero so
 

00:04:31.889 --> 00:04:34.369 align:start position:0%
they're never going to sum to zero so
then<00:04:32.129><c> in</c><00:04:32.430><c> our</c><00:04:32.819><c> result</c><00:04:33.270><c> we're</c><00:04:33.509><c> only</c><00:04:33.750><c> gonna</c><00:04:34.139><c> have</c>

00:04:34.369 --> 00:04:34.379 align:start position:0%
then in our result we're only gonna have
 

00:04:34.379 --> 00:04:37.339 align:start position:0%
then in our result we're only gonna have
the<00:04:34.979><c> one</c><00:04:35.250><c> triplet</c><00:04:35.849><c> negative</c><00:04:36.539><c> three</c><00:04:36.810><c> one</c><00:04:37.319><c> and</c>

00:04:37.339 --> 00:04:37.349 align:start position:0%
the one triplet negative three one and
 

00:04:37.349 --> 00:04:39.499 align:start position:0%
the one triplet negative three one and
two<00:04:37.680><c> we</c><00:04:37.860><c> eliminated</c><00:04:38.550><c> duplicates</c><00:04:39.060><c> by</c><00:04:39.210><c> not</c>

00:04:39.499 --> 00:04:39.509 align:start position:0%
two we eliminated duplicates by not
 

00:04:39.509 --> 00:04:42.770 align:start position:0%
two we eliminated duplicates by not
reusing<00:04:40.469><c> the</c><00:04:40.590><c> same</c><00:04:40.620><c> element</c><00:04:41.550><c> twice</c><00:04:41.849><c> I</c><00:04:42.210><c> think</c>

00:04:42.770 --> 00:04:42.780 align:start position:0%
reusing the same element twice I think
 

00:04:42.780 --> 00:04:44.600 align:start position:0%
reusing the same element twice I think
it<00:04:42.870><c> helps</c><00:04:43.229><c> to</c><00:04:43.439><c> understand</c><00:04:44.159><c> a</c><00:04:44.250><c> little</c><00:04:44.430><c> bit</c>

00:04:44.600 --> 00:04:44.610 align:start position:0%
it helps to understand a little bit
 

00:04:44.610 --> 00:04:46.189 align:start position:0%
it helps to understand a little bit
about<00:04:44.969><c> the</c><00:04:45.150><c> statistics</c><00:04:45.780><c> of</c><00:04:45.990><c> like</c>

00:04:46.189 --> 00:04:46.199 align:start position:0%
about the statistics of like
 

00:04:46.199 --> 00:04:48.260 align:start position:0%
about the statistics of like
combinations<00:04:46.889><c> and</c><00:04:47.069><c> permutations</c><00:04:47.250><c> to</c><00:04:48.030><c> like</c>

00:04:48.260 --> 00:04:48.270 align:start position:0%
combinations and permutations to like
 

00:04:48.270 --> 00:04:50.570 align:start position:0%
combinations and permutations to like
understand<00:04:49.169><c> exactly</c><00:04:49.319><c> why</c><00:04:49.770><c> this</c><00:04:50.009><c> eliminates</c>

00:04:50.570 --> 00:04:50.580 align:start position:0%
understand exactly why this eliminates
 

00:04:50.580 --> 00:04:52.939 align:start position:0%
understand exactly why this eliminates
duplicates<00:04:50.759><c> but</c><00:04:51.719><c> I</c><00:04:51.780><c> hope</c><00:04:51.960><c> this</c><00:04:52.169><c> explanation</c>

00:04:52.939 --> 00:04:52.949 align:start position:0%
duplicates but I hope this explanation
 

00:04:52.949 --> 00:04:55.429 align:start position:0%
duplicates but I hope this explanation
at<00:04:53.460><c> least</c><00:04:53.669><c> helped</c><00:04:54.030><c> a</c><00:04:54.150><c> little</c><00:04:54.419><c> bit</c><00:04:54.599><c> so</c><00:04:55.199><c> now</c><00:04:55.229><c> that</c>

00:04:55.429 --> 00:04:55.439 align:start position:0%
at least helped a little bit so now that
 

00:04:55.439 --> 00:04:58.700 align:start position:0%
at least helped a little bit so now that
we<00:04:55.680><c> know</c><00:04:55.710><c> to</c><00:04:55.949><c> sort</c><00:04:56.550><c> the</c><00:04:56.699><c> input</c><00:04:57.120><c> array</c><00:04:57.210><c> and</c><00:04:57.710><c> we</c>

00:04:58.700 --> 00:04:58.710 align:start position:0%
we know to sort the input array and we
 

00:04:58.710 --> 00:05:01.279 align:start position:0%
we know to sort the input array and we
know<00:04:58.860><c> how</c><00:04:59.009><c> to</c><00:04:59.069><c> eliminate</c><00:04:59.340><c> duplicates</c><00:05:00.150><c> once</c><00:05:01.080><c> we</c>

00:05:01.279 --> 00:05:01.289 align:start position:0%
know how to eliminate duplicates once we
 

00:05:01.289 --> 00:05:03.140 align:start position:0%
know how to eliminate duplicates once we
find<00:05:01.590><c> our</c><00:05:01.740><c> first</c><00:05:02.009><c> number</c><00:05:02.250><c> notice</c><00:05:02.789><c> right</c><00:05:02.939><c> so</c>

00:05:03.140 --> 00:05:03.150 align:start position:0%
find our first number notice right so
 

00:05:03.150 --> 00:05:04.909 align:start position:0%
find our first number notice right so
let's<00:05:03.330><c> say</c><00:05:03.419><c> we</c><00:05:03.539><c> have</c><00:05:03.629><c> a</c><00:05:03.659><c> negative</c><00:05:03.870><c> 3</c><00:05:04.259><c> so</c><00:05:04.740><c> then</c>

00:05:04.909 --> 00:05:04.919 align:start position:0%
let's say we have a negative 3 so then
 

00:05:04.919 --> 00:05:07.339 align:start position:0%
let's say we have a negative 3 so then
the<00:05:05.250><c> remaining</c><00:05:05.729><c> part</c><00:05:06.689><c> of</c><00:05:06.779><c> the</c><00:05:06.900><c> problem</c>

00:05:07.339 --> 00:05:07.349 align:start position:0%
the remaining part of the problem
 

00:05:07.349 --> 00:05:09.499 align:start position:0%
the remaining part of the problem
there's<00:05:07.560><c> only</c><00:05:07.770><c> two</c><00:05:08.159><c> elements</c><00:05:08.430><c> right</c><00:05:09.060><c> so</c><00:05:09.389><c> it</c>

00:05:09.499 --> 00:05:09.509 align:start position:0%
there's only two elements right so it
 

00:05:09.509 --> 00:05:12.050 align:start position:0%
there's only two elements right so it
basically<00:05:09.990><c> reduces</c><00:05:10.259><c> to</c><00:05:11.129><c> twosome</c><00:05:11.669><c> and</c><00:05:11.849><c> you</c>

00:05:12.050 --> 00:05:12.060 align:start position:0%
basically reduces to twosome and you
 

00:05:12.060 --> 00:05:13.760 align:start position:0%
basically reduces to twosome and you
probably<00:05:12.330><c> know</c><00:05:12.599><c> how</c><00:05:12.750><c> to</c><00:05:12.810><c> solve</c><00:05:13.020><c> twosome</c><00:05:13.560><c> right</c>

00:05:13.760 --> 00:05:13.770 align:start position:0%
probably know how to solve twosome right
 

00:05:13.770 --> 00:05:16.610 align:start position:0%
probably know how to solve twosome right
obviously<00:05:14.610><c> we</c><00:05:14.759><c> can</c><00:05:14.909><c> put</c><00:05:15.090><c> the</c><00:05:15.240><c> numbers</c><00:05:15.659><c> let's</c>

00:05:16.610 --> 00:05:16.620 align:start position:0%
obviously we can put the numbers let's
 

00:05:16.620 --> 00:05:18.559 align:start position:0%
obviously we can put the numbers let's
say<00:05:16.680><c> that</c><00:05:16.919><c> this</c><00:05:17.069><c> is</c><00:05:17.189><c> our</c><00:05:17.310><c> first</c><00:05:17.490><c> a</c><00:05:17.729><c> right</c><00:05:18.150><c> so</c>

00:05:18.559 --> 00:05:18.569 align:start position:0%
say that this is our first a right so
 

00:05:18.569 --> 00:05:19.909 align:start position:0%
say that this is our first a right so
then<00:05:18.779><c> for</c><00:05:19.020><c> the</c><00:05:19.110><c> remaining</c><00:05:19.379><c> portion</c><00:05:19.800><c> we're</c>

00:05:19.909 --> 00:05:19.919 align:start position:0%
then for the remaining portion we're
 

00:05:19.919 --> 00:05:22.550 align:start position:0%
then for the remaining portion we're
basically<00:05:20.219><c> going</c><00:05:20.430><c> to</c><00:05:20.490><c> do</c><00:05:20.639><c> to</c><00:05:20.849><c> sum</c><00:05:21.120><c> and</c><00:05:21.389><c> you</c><00:05:22.349><c> can</c>

00:05:22.550 --> 00:05:22.560 align:start position:0%
basically going to do to sum and you can
 

00:05:22.560 --> 00:05:24.499 align:start position:0%
basically going to do to sum and you can
do<00:05:22.710><c> that</c><00:05:22.889><c> with</c><00:05:23.099><c> a</c><00:05:23.129><c> hash</c><00:05:23.460><c> map</c><00:05:23.699><c> or</c><00:05:23.969><c> a</c><00:05:24.000><c> hash</c><00:05:24.180><c> set</c>

00:05:24.499 --> 00:05:24.509 align:start position:0%
do that with a hash map or a hash set
 

00:05:24.509 --> 00:05:27.170 align:start position:0%
do that with a hash map or a hash set
but<00:05:25.319><c> if</c><00:05:25.590><c> you've</c><00:05:25.770><c> solved</c><00:05:26.310><c> the</c><00:05:26.370><c> problem</c><00:05:26.909><c> to</c><00:05:27.150><c> some</c>

00:05:27.170 --> 00:05:27.180 align:start position:0%
but if you've solved the problem to some
 

00:05:27.180 --> 00:05:30.529 align:start position:0%
but if you've solved the problem to some
two<00:05:27.840><c> you</c><00:05:28.379><c> know</c><00:05:28.680><c> that</c><00:05:29.490><c> we</c><00:05:29.639><c> don't</c><00:05:29.909><c> need</c><00:05:30.150><c> to</c><00:05:30.360><c> use</c><00:05:30.509><c> a</c>

00:05:30.529 --> 00:05:30.539 align:start position:0%
two you know that we don't need to use a
 

00:05:30.539 --> 00:05:32.300 align:start position:0%
two you know that we don't need to use a
hash<00:05:30.810><c> map</c><00:05:31.020><c> we</c><00:05:31.289><c> can</c><00:05:31.319><c> use</c><00:05:31.560><c> a</c><00:05:31.589><c> left</c><00:05:32.009><c> and</c><00:05:32.219><c> right</c>

00:05:32.300 --> 00:05:32.310 align:start position:0%
hash map we can use a left and right
 

00:05:32.310 --> 00:05:36.860 align:start position:0%
hash map we can use a left and right
pointer<00:05:33.800><c> so</c><00:05:34.800><c> this</c><00:05:34.979><c> is</c><00:05:35.129><c> our</c><00:05:35.250><c> left</c><00:05:35.550><c> and</c><00:05:35.940><c> this</c><00:05:36.690><c> is</c>

00:05:36.860 --> 00:05:36.870 align:start position:0%
pointer so this is our left and this is
 

00:05:36.870 --> 00:05:40.339 align:start position:0%
pointer so this is our left and this is
our<00:05:37.020><c> right</c><00:05:37.229><c> and</c><00:05:37.500><c> if</c><00:05:38.400><c> we</c><00:05:38.430><c> find</c><00:05:39.000><c> numbers</c><00:05:39.629><c> such</c>

00:05:40.339 --> 00:05:40.349 align:start position:0%
our right and if we find numbers such
 

00:05:40.349 --> 00:05:42.529 align:start position:0%
our right and if we find numbers such
that<00:05:40.379><c> left</c><00:05:41.039><c> and</c><00:05:41.310><c> right</c><00:05:41.550><c> added</c><00:05:42.120><c> to</c><00:05:42.330><c> our</c>

00:05:42.529 --> 00:05:42.539 align:start position:0%
that left and right added to our
 

00:05:42.539 --> 00:05:44.209 align:start position:0%
that left and right added to our
negative<00:05:43.080><c> three</c><00:05:43.289><c> sum</c><00:05:43.529><c> to</c><00:05:43.680><c> zero</c><00:05:43.919><c> then</c><00:05:44.099><c> we're</c>

00:05:44.209 --> 00:05:44.219 align:start position:0%
negative three sum to zero then we're
 

00:05:44.219 --> 00:05:46.219 align:start position:0%
negative three sum to zero then we're
gonna<00:05:44.339><c> add</c><00:05:44.550><c> them</c><00:05:44.819><c> to</c><00:05:45.000><c> the</c><00:05:45.120><c> solution</c><00:05:45.509><c> set</c><00:05:45.750><c> if</c>

00:05:46.219 --> 00:05:46.229 align:start position:0%
gonna add them to the solution set if
 

00:05:46.229 --> 00:05:49.909 align:start position:0%
gonna add them to the solution set if
the<00:05:46.560><c> sum</c><00:05:47.279><c> though</c><00:05:47.580><c> is</c><00:05:47.849><c> too</c><00:05:48.509><c> big</c><00:05:48.960><c> for</c><00:05:49.319><c> example</c><00:05:49.860><c> if</c>

00:05:49.909 --> 00:05:49.919 align:start position:0%
the sum though is too big for example if
 

00:05:49.919 --> 00:05:54.439 align:start position:0%
the sum though is too big for example if
our<00:05:50.039><c> sum</c><00:05:50.310><c> was</c><00:05:50.550><c> greater</c><00:05:50.969><c> than</c><00:05:51.240><c> zero</c><00:05:52.580><c> we</c><00:05:53.580><c> want</c><00:05:53.940><c> to</c>

00:05:54.439 --> 00:05:54.449 align:start position:0%
our sum was greater than zero we want to
 

00:05:54.449 --> 00:05:57.379 align:start position:0%
our sum was greater than zero we want to
decrease<00:05:54.810><c> our</c><00:05:55.409><c> sum</c><00:05:55.710><c> now</c><00:05:56.069><c> we</c><00:05:56.129><c> can</c><00:05:56.460><c> do</c><00:05:56.699><c> that</c><00:05:56.969><c> by</c>

00:05:57.379 --> 00:05:57.389 align:start position:0%
decrease our sum now we can do that by
 

00:05:57.389 --> 00:05:59.839 align:start position:0%
decrease our sum now we can do that by
taking<00:05:57.629><c> our</c><00:05:57.960><c> right</c><00:05:58.229><c> pointer</c><00:05:58.740><c> and</c><00:05:58.919><c> shifting</c><00:05:59.669><c> it</c>

00:05:59.839 --> 00:05:59.849 align:start position:0%
taking our right pointer and shifting it
 

00:05:59.849 --> 00:06:02.329 align:start position:0%
taking our right pointer and shifting it
so<00:06:00.389><c> our</c><00:06:00.509><c> right</c><00:06:00.719><c> pointer</c><00:06:01.050><c> would</c><00:06:01.229><c> be</c><00:06:01.469><c> shifted</c>

00:06:02.329 --> 00:06:02.339 align:start position:0%
so our right pointer would be shifted
 

00:06:02.339 --> 00:06:04.670 align:start position:0%
so our right pointer would be shifted
here<00:06:02.639><c> notice</c><00:06:02.939><c> how</c><00:06:03.089><c> that</c><00:06:03.240><c> decreases</c><00:06:04.020><c> the</c><00:06:04.229><c> sum</c>

00:06:04.670 --> 00:06:04.680 align:start position:0%
here notice how that decreases the sum
 

00:06:04.680 --> 00:06:07.760 align:start position:0%
here notice how that decreases the sum
because<00:06:05.490><c> the</c><00:06:06.120><c> numbers</c><00:06:06.449><c> are</c><00:06:06.599><c> sorted</c><00:06:06.990><c> so</c><00:06:07.650><c> if</c>

00:06:07.760 --> 00:06:07.770 align:start position:0%
because the numbers are sorted so if
 

00:06:07.770 --> 00:06:09.800 align:start position:0%
because the numbers are sorted so if
you've<00:06:07.919><c> sold</c><00:06:08.189><c> to</c><00:06:08.460><c> some</c><00:06:08.729><c> two</c><00:06:09.060><c> before</c><00:06:09.479><c> you</c><00:06:09.629><c> know</c>

00:06:09.800 --> 00:06:09.810 align:start position:0%
you've sold to some two before you know
 

00:06:09.810 --> 00:06:13.100 align:start position:0%
you've sold to some two before you know
exactly<00:06:10.319><c> why</c><00:06:11.189><c> this</c><00:06:11.250><c> works</c><00:06:11.789><c> and</c><00:06:12.060><c> I</c><00:06:12.270><c> encourage</c>

00:06:13.100 --> 00:06:13.110 align:start position:0%
exactly why this works and I encourage
 

00:06:13.110 --> 00:06:14.869 align:start position:0%
exactly why this works and I encourage
you<00:06:13.139><c> to</c><00:06:13.289><c> watch</c><00:06:13.560><c> that</c><00:06:13.589><c> video</c><00:06:14.039><c> if</c><00:06:14.250><c> you</c><00:06:14.639><c> want</c><00:06:14.819><c> a</c>

00:06:14.869 --> 00:06:14.879 align:start position:0%
you to watch that video if you want a
 

00:06:14.879 --> 00:06:16.969 align:start position:0%
you to watch that video if you want a
deeper<00:06:15.210><c> explanation</c><00:06:15.599><c> now</c><00:06:16.469><c> on</c><00:06:16.650><c> the</c><00:06:16.770><c> other</c><00:06:16.860><c> hand</c>

00:06:16.969 --> 00:06:16.979 align:start position:0%
deeper explanation now on the other hand
 

00:06:16.979 --> 00:06:19.159 align:start position:0%
deeper explanation now on the other hand
maybe<00:06:17.339><c> our</c><00:06:17.550><c> sum</c><00:06:17.789><c> is</c><00:06:17.819><c> too</c><00:06:18.150><c> small</c><00:06:18.539><c> our</c><00:06:18.569><c> sum</c><00:06:19.020><c> is</c>

00:06:19.159 --> 00:06:19.169 align:start position:0%
maybe our sum is too small our sum is
 

00:06:19.169 --> 00:06:21.110 align:start position:0%
maybe our sum is too small our sum is
smaller<00:06:19.560><c> than</c><00:06:19.770><c> zero</c><00:06:19.830><c> in</c><00:06:20.370><c> that</c><00:06:20.580><c> case</c><00:06:20.819><c> we</c><00:06:21.000><c> would</c>

00:06:21.110 --> 00:06:21.120 align:start position:0%
smaller than zero in that case we would
 

00:06:21.120 --> 00:06:24.140 align:start position:0%
smaller than zero in that case we would
shift<00:06:21.360><c> our</c><00:06:21.539><c> left</c><00:06:21.779><c> pointer</c><00:06:22.580><c> because</c><00:06:23.580><c> the</c><00:06:23.759><c> input</c>

00:06:24.140 --> 00:06:24.150 align:start position:0%
shift our left pointer because the input
 

00:06:24.150 --> 00:06:25.820 align:start position:0%
shift our left pointer because the input
array<00:06:24.270><c> is</c><00:06:24.419><c> sorted</c><00:06:24.719><c> if</c><00:06:25.080><c> we</c><00:06:25.199><c> shift</c><00:06:25.379><c> our</c><00:06:25.560><c> left</c>

00:06:25.820 --> 00:06:25.830 align:start position:0%
array is sorted if we shift our left
 

00:06:25.830 --> 00:06:27.950 align:start position:0%
array is sorted if we shift our left
pointer<00:06:26.219><c> we're</c><00:06:26.370><c> increasing</c><00:06:27.089><c> the</c><00:06:27.210><c> sum</c><00:06:27.449><c> now</c>

00:06:27.950 --> 00:06:27.960 align:start position:0%
pointer we're increasing the sum now
 

00:06:27.960 --> 00:06:30.379 align:start position:0%
pointer we're increasing the sum now
there<00:06:28.409><c> could</c><00:06:28.680><c> be</c><00:06:28.740><c> duplicates</c><00:06:29.550><c> among</c><00:06:30.150><c> these</c>

00:06:30.379 --> 00:06:30.389 align:start position:0%
there could be duplicates among these
 

00:06:30.389 --> 00:06:32.420 align:start position:0%
there could be duplicates among these
left<00:06:30.750><c> and</c><00:06:30.930><c> right</c><00:06:31.139><c> values</c><00:06:31.560><c> too</c><00:06:31.770><c> for</c><00:06:31.979><c> example</c><00:06:32.339><c> if</c>

00:06:32.420 --> 00:06:32.430 align:start position:0%
left and right values too for example if
 

00:06:32.430 --> 00:06:35.180 align:start position:0%
left and right values too for example if
this<00:06:32.610><c> this</c><00:06:33.509><c> one</c><00:06:33.930><c> was</c><00:06:34.440><c> a</c><00:06:34.469><c> negative</c><00:06:34.860><c> three</c>

00:06:35.180 --> 00:06:35.190 align:start position:0%
this this one was a negative three
 

00:06:35.190 --> 00:06:37.579 align:start position:0%
this this one was a negative three
instead<00:06:35.610><c> right</c><00:06:35.909><c> in</c><00:06:36.149><c> that</c><00:06:36.930><c> case</c><00:06:37.110><c> we</c><00:06:37.289><c> don't</c><00:06:37.469><c> want</c>

00:06:37.579 --> 00:06:37.589 align:start position:0%
instead right in that case we don't want
 

00:06:37.589 --> 00:06:39.980 align:start position:0%
instead right in that case we don't want
to<00:06:37.740><c> reuse</c><00:06:38.069><c> the</c><00:06:38.279><c> same</c><00:06:38.520><c> element</c><00:06:39.000><c> twice</c><00:06:39.300><c> even</c>

00:06:39.980 --> 00:06:39.990 align:start position:0%
to reuse the same element twice even
 

00:06:39.990 --> 00:06:42.320 align:start position:0%
to reuse the same element twice even
our<00:06:40.350><c> left</c><00:06:40.590><c> and</c><00:06:40.770><c> right</c><00:06:40.980><c> values</c><00:06:41.460><c> so</c><00:06:41.910><c> we</c><00:06:42.120><c> would</c>

00:06:42.320 --> 00:06:42.330 align:start position:0%
our left and right values so we would
 

00:06:42.330 --> 00:06:44.630 align:start position:0%
our left and right values so we would
not<00:06:42.690><c> use</c><00:06:42.750><c> the</c><00:06:43.230><c> same</c><00:06:43.470><c> we</c><00:06:43.800><c> would</c><00:06:43.950><c> shift</c><00:06:44.460><c> our</c>

00:06:44.630 --> 00:06:44.640 align:start position:0%
not use the same we would shift our
 

00:06:44.640 --> 00:06:46.610 align:start position:0%
not use the same we would shift our
pointer<00:06:44.940><c> once</c><00:06:45.150><c> more</c><00:06:45.570><c> over</c><00:06:45.810><c> here</c><00:06:46.290><c> we</c><00:06:46.530><c> don't</c>

00:06:46.610 --> 00:06:46.620 align:start position:0%
pointer once more over here we don't
 

00:06:46.620 --> 00:06:48.320 align:start position:0%
pointer once more over here we don't
want<00:06:46.800><c> to</c><00:06:46.860><c> reuse</c><00:06:47.130><c> the</c><00:06:47.310><c> same</c><00:06:47.490><c> value</c><00:06:47.910><c> for</c><00:06:47.940><c> left</c>

00:06:48.320 --> 00:06:48.330 align:start position:0%
want to reuse the same value for left
 

00:06:48.330 --> 00:06:49.880 align:start position:0%
want to reuse the same value for left
and<00:06:48.450><c> right</c><00:06:48.540><c> either</c><00:06:48.870><c> so</c><00:06:49.380><c> we</c><00:06:49.500><c> don't</c><00:06:49.710><c> get</c><00:06:49.830><c> any</c>

00:06:49.880 --> 00:06:49.890 align:start position:0%
and right either so we don't get any
 

00:06:49.890 --> 00:06:52.250 align:start position:0%
and right either so we don't get any
duplicates<00:06:50.640><c> now</c><00:06:51.120><c> in</c><00:06:51.300><c> terms</c><00:06:51.510><c> of</c><00:06:51.690><c> time</c>

00:06:52.250 --> 00:06:52.260 align:start position:0%
duplicates now in terms of time
 

00:06:52.260 --> 00:06:55.460 align:start position:0%
duplicates now in terms of time
complexity<00:06:53.510><c> remember</c><00:06:54.510><c> we</c><00:06:54.630><c> are</c><00:06:54.660><c> sorting</c><00:06:55.320><c> the</c>

00:06:55.460 --> 00:06:55.470 align:start position:0%
complexity remember we are sorting the
 

00:06:55.470 --> 00:07:01.640 align:start position:0%
complexity remember we are sorting the
array<00:06:55.500><c> which</c><00:06:55.950><c> is</c><00:06:55.980><c> Big</c><00:06:56.610><c> O</c><00:06:56.760><c> of</c><00:06:57.030><c> n</c><00:06:57.300><c> log</c><00:06:57.360><c> N</c><00:06:57.990><c> and</c><00:07:00.650><c> then</c>

00:07:01.640 --> 00:07:01.650 align:start position:0%
array which is Big O of n log N and then
 

00:07:01.650 --> 00:07:04.070 align:start position:0%
array which is Big O of n log N and then
we<00:07:02.040><c> are</c><00:07:02.160><c> not</c><00:07:02.310><c> doing</c><00:07:02.610><c> the</c><00:07:02.730><c> brute</c><00:07:03.030><c> force</c><00:07:03.080><c> with</c>

00:07:04.070 --> 00:07:04.080 align:start position:0%
we are not doing the brute force with
 

00:07:04.080 --> 00:07:06.680 align:start position:0%
we are not doing the brute force with
triple<00:07:04.530><c> loops</c><00:07:04.800><c> that</c><00:07:05.070><c> would</c><00:07:05.190><c> be</c><00:07:05.340><c> n</c><00:07:05.520><c> cubed</c><00:07:06.090><c> we</c>

00:07:06.680 --> 00:07:06.690 align:start position:0%
triple loops that would be n cubed we
 

00:07:06.690 --> 00:07:08.570 align:start position:0%
triple loops that would be n cubed we
are<00:07:06.780><c> using</c><00:07:06.990><c> the</c><00:07:07.650><c> fact</c><00:07:07.860><c> that</c><00:07:08.010><c> this</c><00:07:08.190><c> input</c><00:07:08.400><c> array</c>

00:07:08.570 --> 00:07:08.580 align:start position:0%
are using the fact that this input array
 

00:07:08.580 --> 00:07:10.280 align:start position:0%
are using the fact that this input array
is<00:07:08.820><c> sorted</c><00:07:09.120><c> to</c><00:07:09.450><c> our</c><00:07:09.570><c> advantage</c>

00:07:10.280 --> 00:07:10.290 align:start position:0%
is sorted to our advantage
 

00:07:10.290 --> 00:07:12.830 align:start position:0%
is sorted to our advantage
we're<00:07:10.830><c> using</c><00:07:11.010><c> one</c><00:07:11.400><c> loop</c><00:07:11.700><c> to</c><00:07:12.000><c> get</c><00:07:12.240><c> to</c><00:07:12.480><c> tell</c><00:07:12.660><c> us</c>

00:07:12.830 --> 00:07:12.840 align:start position:0%
we're using one loop to get to tell us
 

00:07:12.840 --> 00:07:15.020 align:start position:0%
we're using one loop to get to tell us
the<00:07:13.410><c> first</c><00:07:13.650><c> value</c><00:07:14.190><c> and</c><00:07:14.430><c> we're</c><00:07:14.580><c> using</c><00:07:14.760><c> the</c>

00:07:15.020 --> 00:07:15.030 align:start position:0%
the first value and we're using the
 

00:07:15.030 --> 00:07:18.800 align:start position:0%
the first value and we're using the
second<00:07:15.480><c> loop</c><00:07:15.830><c> to</c><00:07:16.910><c> basically</c><00:07:17.910><c> solve</c><00:07:18.180><c> two</c><00:07:18.480><c> sums</c>

00:07:18.800 --> 00:07:18.810 align:start position:0%
second loop to basically solve two sums
 

00:07:18.810 --> 00:07:20.480 align:start position:0%
second loop to basically solve two sums
so<00:07:18.960><c> we're</c><00:07:19.050><c> gonna</c><00:07:19.140><c> have</c><00:07:19.320><c> two</c><00:07:19.560><c> nested</c><00:07:20.010><c> loops</c><00:07:20.280><c> and</c>

00:07:20.480 --> 00:07:20.490 align:start position:0%
so we're gonna have two nested loops and
 

00:07:20.490 --> 00:07:24.230 align:start position:0%
so we're gonna have two nested loops and
that's<00:07:20.730><c> going</c><00:07:20.850><c> to</c><00:07:20.910><c> give</c><00:07:21.120><c> us</c><00:07:21.150><c> o</c><00:07:21.480><c> N</c><00:07:22.310><c> squared</c><00:07:23.310><c> so</c>

00:07:24.230 --> 00:07:24.240 align:start position:0%
that's going to give us o N squared so
 

00:07:24.240 --> 00:07:26.260 align:start position:0%
that's going to give us o N squared so
that<00:07:24.420><c> means</c><00:07:24.660><c> obviously</c><00:07:24.900><c> the</c><00:07:25.560><c> time</c><00:07:25.770><c> complexity</c>

00:07:26.260 --> 00:07:26.270 align:start position:0%
that means obviously the time complexity
 

00:07:26.270 --> 00:07:30.860 align:start position:0%
that means obviously the time complexity
reduces<00:07:27.270><c> to</c><00:07:27.810><c> just</c><00:07:28.230><c> of</c><00:07:28.470><c> N</c><00:07:29.160><c> squared</c><00:07:29.810><c> now</c><00:07:30.810><c> the</c>

00:07:30.860 --> 00:07:30.870 align:start position:0%
reduces to just of N squared now the
 

00:07:30.870 --> 00:07:34.490 align:start position:0%
reduces to just of N squared now the
space<00:07:31.350><c> complexity</c><00:07:32.100><c> will</c><00:07:32.850><c> depend</c><00:07:33.450><c> so</c><00:07:34.170><c> for</c><00:07:34.410><c> the</c>

00:07:34.490 --> 00:07:34.500 align:start position:0%
space complexity will depend so for the
 

00:07:34.500 --> 00:07:36.680 align:start position:0%
space complexity will depend so for the
implementation<00:07:34.800><c> I'm</c><00:07:35.430><c> showing</c><00:07:35.910><c> it</c><00:07:36.090><c> could</c><00:07:36.510><c> be</c>

00:07:36.680 --> 00:07:36.690 align:start position:0%
implementation I'm showing it could be
 

00:07:36.690 --> 00:07:40.240 align:start position:0%
implementation I'm showing it could be
Big<00:07:37.020><c> O</c><00:07:37.170><c> of</c><00:07:37.200><c> 1</c><00:07:37.680><c> or</c><00:07:37.980><c> it</c><00:07:38.520><c> could</c><00:07:38.670><c> be</c><00:07:38.820><c> Big</c><00:07:39.060><c> O</c><00:07:39.180><c> of</c><00:07:39.210><c> n</c>

00:07:40.240 --> 00:07:40.250 align:start position:0%
Big O of 1 or it could be Big O of n
 

00:07:40.250 --> 00:07:44.300 align:start position:0%
Big O of 1 or it could be Big O of n
because<00:07:41.250><c> sorting</c><00:07:42.210><c> actually</c><00:07:43.080><c> does</c><00:07:43.410><c> take</c><00:07:43.830><c> extra</c>

00:07:44.300 --> 00:07:44.310 align:start position:0%
because sorting actually does take extra
 

00:07:44.310 --> 00:07:46.940 align:start position:0%
because sorting actually does take extra
memory<00:07:44.550><c> in</c><00:07:44.910><c> some</c><00:07:45.210><c> libraries</c><00:07:45.840><c> so</c><00:07:46.470><c> it</c><00:07:46.590><c> depends</c>

00:07:46.940 --> 00:07:46.950 align:start position:0%
memory in some libraries so it depends
 

00:07:46.950 --> 00:07:48.680 align:start position:0%
memory in some libraries so it depends
on<00:07:47.010><c> your</c><00:07:47.160><c> implementation</c><00:07:47.820><c> of</c><00:07:47.940><c> sorting</c><00:07:48.450><c> it</c>

00:07:48.680 --> 00:07:48.690 align:start position:0%
on your implementation of sorting it
 

00:07:48.690 --> 00:07:51.500 align:start position:0%
on your implementation of sorting it
could<00:07:49.260><c> be</c><00:07:49.440><c> O</c><00:07:49.470><c> of</c><00:07:49.680><c> n</c><00:07:50.010><c> ok</c><00:07:50.850><c> now</c><00:07:50.970><c> let's</c><00:07:51.210><c> get</c><00:07:51.360><c> to</c><00:07:51.420><c> the</c>

00:07:51.500 --> 00:07:51.510 align:start position:0%
could be O of n ok now let's get to the
 

00:07:51.510 --> 00:07:55.580 align:start position:0%
could be O of n ok now let's get to the
code<00:07:52.160><c> so</c><00:07:53.160><c> we</c><00:07:53.340><c> remember</c><00:07:53.610><c> we</c><00:07:54.120><c> have</c><00:07:54.270><c> to</c><00:07:54.590><c> return</c>

00:07:55.580 --> 00:07:55.590 align:start position:0%
code so we remember we have to return
 

00:07:55.590 --> 00:07:57.880 align:start position:0%
code so we remember we have to return
this<00:07:55.770><c> result</c><00:07:56.220><c> as</c><00:07:56.370><c> a</c><00:07:56.430><c> list</c><00:07:56.910><c> of</c><00:07:57.090><c> lists</c><00:07:57.720><c> and</c>

00:07:57.880 --> 00:07:57.890 align:start position:0%
this result as a list of lists and
 

00:07:57.890 --> 00:07:59.780 align:start position:0%
this result as a list of lists and
remember<00:07:58.890><c> the</c><00:07:59.010><c> first</c><00:07:59.160><c> thing</c><00:07:59.370><c> you</c><00:07:59.460><c> want</c><00:07:59.610><c> to</c><00:07:59.640><c> do</c>

00:07:59.780 --> 00:07:59.790 align:start position:0%
remember the first thing you want to do
 

00:07:59.790 --> 00:08:04.100 align:start position:0%
remember the first thing you want to do
is<00:08:00.030><c> sort</c><00:08:00.390><c> the</c><00:08:00.570><c> input</c><00:08:00.990><c> array</c><00:08:02.720><c> next</c><00:08:03.720><c> we</c><00:08:03.870><c> want</c><00:08:04.050><c> to</c>

00:08:04.100 --> 00:08:04.110 align:start position:0%
is sort the input array next we want to
 

00:08:04.110 --> 00:08:06.440 align:start position:0%
is sort the input array next we want to
use<00:08:04.290><c> each</c><00:08:04.530><c> number</c><00:08:05.070><c> in</c><00:08:05.250><c> the</c><00:08:05.400><c> input</c><00:08:05.760><c> array</c><00:08:05.820><c> as</c><00:08:06.180><c> a</c>

00:08:06.440 --> 00:08:06.450 align:start position:0%
use each number in the input array as a
 

00:08:06.450 --> 00:08:10.040 align:start position:0%
use each number in the input array as a
possible<00:08:06.990><c> first</c><00:08:07.320><c> value</c><00:08:08.330><c> so</c><00:08:09.330><c> I</c><00:08:09.360><c> will</c><00:08:09.690><c> iterate</c>

00:08:10.040 --> 00:08:10.050 align:start position:0%
possible first value so I will iterate
 

00:08:10.050 --> 00:08:15.730 align:start position:0%
possible first value so I will iterate
through<00:08:10.230><c> the</c><00:08:10.320><c> index</c><00:08:10.860><c> and</c><00:08:11.130><c> the</c><00:08:11.550><c> value</c><00:08:13.850><c> and</c>

00:08:15.730 --> 00:08:15.740 align:start position:0%
through the index and the value and
 

00:08:15.740 --> 00:08:18.530 align:start position:0%
through the index and the value and
remember<00:08:16.740><c> we</c><00:08:16.890><c> don't</c><00:08:17.160><c> want</c><00:08:17.430><c> to</c><00:08:17.520><c> reuse</c><00:08:18.030><c> the</c><00:08:18.270><c> same</c>

00:08:18.530 --> 00:08:18.540 align:start position:0%
remember we don't want to reuse the same
 

00:08:18.540 --> 00:08:22.880 align:start position:0%
remember we don't want to reuse the same
value<00:08:19.170><c> in</c><00:08:19.440><c> the</c><00:08:20.160><c> same</c><00:08:20.370><c> position</c><00:08:20.880><c> twice</c><00:08:21.300><c> so</c><00:08:21.990><c> if</c><00:08:22.320><c> I</c>

00:08:22.880 --> 00:08:22.890 align:start position:0%
value in the same position twice so if I
 

00:08:22.890 --> 00:08:25.280 align:start position:0%
value in the same position twice so if I
is<00:08:23.370><c> greater</c><00:08:23.910><c> than</c><00:08:24.000><c> zero</c><00:08:24.420><c> meaning</c><00:08:24.720><c> this</c><00:08:24.930><c> isn't</c>

00:08:25.280 --> 00:08:25.290 align:start position:0%
is greater than zero meaning this isn't
 

00:08:25.290 --> 00:08:27.550 align:start position:0%
is greater than zero meaning this isn't
the<00:08:25.380><c> first</c><00:08:25.620><c> value</c><00:08:25.920><c> in</c><00:08:26.220><c> the</c><00:08:26.340><c> input</c><00:08:26.640><c> array</c><00:08:26.670><c> and</c>

00:08:27.550 --> 00:08:27.560 align:start position:0%
the first value in the input array and
 

00:08:27.560 --> 00:08:32.030 align:start position:0%
the first value in the input array and
this<00:08:28.560><c> value</c><00:08:29.040><c> a</c><00:08:29.220><c> is</c><00:08:29.700><c> equal</c><00:08:30.480><c> to</c><00:08:31.410><c> nums</c>

00:08:32.030 --> 00:08:32.040 align:start position:0%
this value a is equal to nums
 

00:08:32.040 --> 00:08:35.390 align:start position:0%
this value a is equal to nums
of<00:08:32.130><c> I</c><00:08:32.700><c> minus</c><00:08:33.480><c> 1</c><00:08:33.870><c> that</c><00:08:34.560><c> means</c><00:08:34.800><c> it's</c><00:08:35.010><c> the</c><00:08:35.070><c> same</c>

00:08:35.390 --> 00:08:35.400 align:start position:0%
of I minus 1 that means it's the same
 

00:08:35.400 --> 00:08:37.160 align:start position:0%
of I minus 1 that means it's the same
value<00:08:35.610><c> as</c><00:08:35.820><c> before</c><00:08:36.030><c> that</c><00:08:36.420><c> means</c><00:08:36.630><c> we</c><00:08:36.840><c> want</c><00:08:37.080><c> to</c>

00:08:37.160 --> 00:08:37.170 align:start position:0%
value as before that means we want to
 

00:08:37.170 --> 00:08:39.380 align:start position:0%
value as before that means we want to
continue<00:08:37.500><c> we</c><00:08:37.800><c> don't</c><00:08:38.130><c> want</c><00:08:38.430><c> to</c><00:08:38.490><c> reuse</c><00:08:38.970><c> the</c><00:08:39.210><c> same</c>

00:08:39.380 --> 00:08:39.390 align:start position:0%
continue we don't want to reuse the same
 

00:08:39.390 --> 00:08:41.030 align:start position:0%
continue we don't want to reuse the same
value<00:08:39.840><c> twice</c><00:08:40.110><c> so</c><00:08:40.290><c> we're</c><00:08:40.410><c> going</c><00:08:40.500><c> to</c><00:08:40.590><c> continue</c>

00:08:41.030 --> 00:08:41.040 align:start position:0%
value twice so we're going to continue
 

00:08:41.040 --> 00:08:43.640 align:start position:0%
value twice so we're going to continue
to<00:08:41.160><c> the</c><00:08:41.250><c> next</c><00:08:41.460><c> iteration</c><00:08:42.180><c> of</c><00:08:42.270><c> the</c><00:08:42.420><c> loop</c><00:08:42.650><c> next</c>

00:08:43.640 --> 00:08:43.650 align:start position:0%
to the next iteration of the loop next
 

00:08:43.650 --> 00:08:45.020 align:start position:0%
to the next iteration of the loop next
we're<00:08:43.800><c> going</c><00:08:43.890><c> to</c><00:08:43.950><c> use</c><00:08:44.130><c> our</c><00:08:44.280><c> two</c><00:08:44.580><c> pointer</c>

00:08:45.020 --> 00:08:45.030 align:start position:0%
we're going to use our two pointer
 

00:08:45.030 --> 00:08:46.910 align:start position:0%
we're going to use our two pointer
solution<00:08:45.540><c> for</c><00:08:45.750><c> the</c><00:08:45.840><c> remaining</c><00:08:46.380><c> portion</c><00:08:46.860><c> of</c>

00:08:46.910 --> 00:08:46.920 align:start position:0%
solution for the remaining portion of
 

00:08:46.920 --> 00:08:49.520 align:start position:0%
solution for the remaining portion of
the<00:08:46.980><c> array</c><00:08:47.310><c> to</c><00:08:47.370><c> basically</c><00:08:47.880><c> solve</c><00:08:48.210><c> to</c><00:08:48.540><c> sum</c><00:08:48.810><c> so</c>

00:08:49.520 --> 00:08:49.530 align:start position:0%
the array to basically solve to sum so
 

00:08:49.530 --> 00:08:51.980 align:start position:0%
the array to basically solve to sum so
we'll<00:08:49.710><c> have</c><00:08:49.830><c> left</c><00:08:50.160><c> and</c><00:08:50.370><c> right</c><00:08:50.550><c> pointers</c><00:08:50.990><c> left</c>

00:08:51.980 --> 00:08:51.990 align:start position:0%
we'll have left and right pointers left
 

00:08:51.990 --> 00:08:53.570 align:start position:0%
we'll have left and right pointers left
will<00:08:52.200><c> initially</c><00:08:52.470><c> be</c><00:08:52.710><c> I've</c>

00:08:53.570 --> 00:08:53.580 align:start position:0%
will initially be I've
 

00:08:53.580 --> 00:08:57.290 align:start position:0%
will initially be I've
plus<00:08:53.700><c> one</c><00:08:55.190><c> right</c><00:08:56.190><c> will</c><00:08:56.520><c> be</c><00:08:56.550><c> the</c><00:08:56.790><c> end</c><00:08:56.970><c> of</c><00:08:57.120><c> the</c>

00:08:57.290 --> 00:08:57.300 align:start position:0%
plus one right will be the end of the
 

00:08:57.300 --> 00:09:01.760 align:start position:0%
plus one right will be the end of the
list<00:08:57.510><c> length</c><00:08:58.260><c> minus</c><00:08:58.950><c> one</c><00:09:00.410><c> left</c><00:09:01.410><c> and</c><00:09:01.620><c> right</c>

00:09:01.760 --> 00:09:01.770 align:start position:0%
list length minus one left and right
 

00:09:01.770 --> 00:09:03.980 align:start position:0%
list length minus one left and right
can't<00:09:02.160><c> be</c><00:09:02.370><c> equal</c><00:09:02.910><c> so</c><00:09:02.940><c> we're</c><00:09:03.300><c> gonna</c><00:09:03.390><c> say</c><00:09:03.690><c> left</c>

00:09:03.980 --> 00:09:03.990 align:start position:0%
can't be equal so we're gonna say left
 

00:09:03.990 --> 00:09:06.080 align:start position:0%
can't be equal so we're gonna say left
is<00:09:04.200><c> less</c><00:09:04.440><c> than</c><00:09:04.650><c> right</c><00:09:04.950><c> now</c><00:09:05.760><c> we're</c><00:09:05.940><c> going</c><00:09:06.030><c> to</c>

00:09:06.080 --> 00:09:06.090 align:start position:0%
is less than right now we're going to
 

00:09:06.090 --> 00:09:08.180 align:start position:0%
is less than right now we're going to
actually<00:09:06.210><c> compute</c><00:09:06.810><c> the</c><00:09:06.930><c> sums</c><00:09:07.200><c> so</c><00:09:07.620><c> we'll</c><00:09:07.950><c> say</c>

00:09:08.180 --> 00:09:08.190 align:start position:0%
actually compute the sums so we'll say
 

00:09:08.190 --> 00:09:13.100 align:start position:0%
actually compute the sums so we'll say
our<00:09:08.370><c> three</c><00:09:08.700><c> sum</c><00:09:08.970><c> is</c><00:09:10.220><c> a</c><00:09:11.220><c> plus</c><00:09:11.820><c> numbers</c><00:09:12.570><c> of</c><00:09:12.780><c> left</c>

00:09:13.100 --> 00:09:13.110 align:start position:0%
our three sum is a plus numbers of left
 

00:09:13.110 --> 00:09:19.490 align:start position:0%
our three sum is a plus numbers of left
plus<00:09:14.040><c> numbers</c><00:09:14.460><c> of</c><00:09:14.580><c> right</c><00:09:17.360><c> so</c><00:09:18.360><c> if</c><00:09:18.660><c> the</c><00:09:18.930><c> sum</c><00:09:19.290><c> is</c>

00:09:19.490 --> 00:09:19.500 align:start position:0%
plus numbers of right so if the sum is
 

00:09:19.500 --> 00:09:24.440 align:start position:0%
plus numbers of right so if the sum is
too<00:09:19.920><c> great</c><00:09:20.310><c> remember</c><00:09:22.880><c> if</c><00:09:23.880><c> it's</c><00:09:24.090><c> greater</c><00:09:24.330><c> than</c>

00:09:24.440 --> 00:09:24.450 align:start position:0%
too great remember if it's greater than
 

00:09:24.450 --> 00:09:26.060 align:start position:0%
too great remember if it's greater than
zero<00:09:24.840><c> which</c><00:09:25.020><c> is</c><00:09:25.200><c> what</c><00:09:25.350><c> we're</c><00:09:25.470><c> looking</c><00:09:25.500><c> for</c>

00:09:26.060 --> 00:09:26.070 align:start position:0%
zero which is what we're looking for
 

00:09:26.070 --> 00:09:28.190 align:start position:0%
zero which is what we're looking for
then<00:09:26.400><c> we</c><00:09:26.550><c> need</c><00:09:26.730><c> to</c><00:09:26.850><c> decrease</c><00:09:27.120><c> it</c><00:09:27.720><c> in</c><00:09:27.900><c> which</c>

00:09:28.190 --> 00:09:28.200 align:start position:0%
then we need to decrease it in which
 

00:09:28.200 --> 00:09:29.990 align:start position:0%
then we need to decrease it in which
case<00:09:28.230><c> we</c><00:09:28.680><c> would</c><00:09:28.830><c> say</c><00:09:29.130><c> our</c><00:09:29.340><c> right</c><00:09:29.610><c> pointer</c>

00:09:29.990 --> 00:09:30.000 align:start position:0%
case we would say our right pointer
 

00:09:30.000 --> 00:09:33.620 align:start position:0%
case we would say our right pointer
needs<00:09:30.240><c> to</c><00:09:30.420><c> be</c><00:09:30.540><c> decremented</c><00:09:31.490><c> on</c><00:09:32.510><c> the</c><00:09:33.510><c> other</c>

00:09:33.620 --> 00:09:33.630 align:start position:0%
needs to be decremented on the other
 

00:09:33.630 --> 00:09:36.590 align:start position:0%
needs to be decremented on the other
hand<00:09:33.870><c> if</c><00:09:33.990><c> it's</c><00:09:34.140><c> too</c><00:09:34.410><c> small</c><00:09:35.240><c> we</c><00:09:36.240><c> need</c><00:09:36.360><c> to</c><00:09:36.450><c> make</c>

00:09:36.590 --> 00:09:36.600 align:start position:0%
hand if it's too small we need to make
 

00:09:36.600 --> 00:09:37.700 align:start position:0%
hand if it's too small we need to make
the<00:09:36.750><c> sum</c><00:09:37.020><c> bigger</c>

00:09:37.700 --> 00:09:37.710 align:start position:0%
the sum bigger
 

00:09:37.710 --> 00:09:43.280 align:start position:0%
the sum bigger
if<00:09:38.430><c> only</c><00:09:38.640><c> I</c><00:09:38.790><c> could</c><00:09:38.880><c> type</c><00:09:39.300><c> today</c><00:09:41.990><c> if</c><00:09:42.990><c> it's</c><00:09:43.140><c> too</c>

00:09:43.280 --> 00:09:43.290 align:start position:0%
if only I could type today if it's too
 

00:09:43.290 --> 00:09:45.110 align:start position:0%
if only I could type today if it's too
small<00:09:43.470><c> we</c><00:09:43.770><c> need</c><00:09:43.920><c> to</c><00:09:44.010><c> make</c><00:09:44.130><c> it</c><00:09:44.280><c> bigger</c><00:09:44.490><c> so</c><00:09:44.850><c> shift</c>

00:09:45.110 --> 00:09:45.120 align:start position:0%
small we need to make it bigger so shift
 

00:09:45.120 --> 00:09:48.770 align:start position:0%
small we need to make it bigger so shift
our<00:09:45.270><c> left</c><00:09:45.570><c> pointer</c><00:09:46.020><c> to</c><00:09:46.980><c> the</c><00:09:47.070><c> right</c><00:09:47.540><c> the</c><00:09:48.540><c> last</c>

00:09:48.770 --> 00:09:48.780 align:start position:0%
our left pointer to the right the last
 

00:09:48.780 --> 00:09:51.920 align:start position:0%
our left pointer to the right the last
case<00:09:49.110><c> is</c><00:09:49.350><c> if</c><00:09:49.680><c> this</c><00:09:50.130><c> is</c><00:09:50.400><c> equal</c><00:09:50.910><c> to</c><00:09:51.180><c> zero</c><00:09:51.420><c> so</c><00:09:51.720><c> of</c>

00:09:51.920 --> 00:09:51.930 align:start position:0%
case is if this is equal to zero so of
 

00:09:51.930 --> 00:09:53.570 align:start position:0%
case is if this is equal to zero so of
course<00:09:52.200><c> we</c><00:09:52.410><c> have</c><00:09:52.500><c> to</c><00:09:52.590><c> add</c><00:09:52.740><c> it</c><00:09:52.950><c> to</c><00:09:52.980><c> our</c><00:09:53.100><c> result</c>

00:09:53.570 --> 00:09:53.580 align:start position:0%
course we have to add it to our result
 

00:09:53.580 --> 00:09:55.190 align:start position:0%
course we have to add it to our result
so<00:09:53.880><c> to</c><00:09:53.940><c> our</c><00:09:54.210><c> result</c><00:09:54.540><c> we're</c><00:09:54.660><c> going</c><00:09:54.720><c> to</c><00:09:54.810><c> append</c>

00:09:55.190 --> 00:09:55.200 align:start position:0%
so to our result we're going to append
 

00:09:55.200 --> 00:09:57.680 align:start position:0%
so to our result we're going to append
all<00:09:55.470><c> three</c><00:09:55.950><c> numbers</c><00:09:56.160><c> so</c><00:09:56.790><c> the</c><00:09:56.940><c> numbers</c><00:09:57.240><c> are</c><00:09:57.360><c> a</c>

00:09:57.680 --> 00:09:57.690 align:start position:0%
all three numbers so the numbers are a
 

00:09:57.690 --> 00:10:03.170 align:start position:0%
all three numbers so the numbers are a
number<00:09:58.290><c> of</c><00:09:58.620><c> left</c><00:09:59.190><c> and</c><00:09:59.720><c> nums</c><00:10:00.720><c> of</c><00:10:00.960><c> right</c><00:10:02.000><c> now</c><00:10:03.000><c> of</c>

00:10:03.170 --> 00:10:03.180 align:start position:0%
number of left and nums of right now of
 

00:10:03.180 --> 00:10:04.790 align:start position:0%
number of left and nums of right now of
course<00:10:03.420><c> we</c><00:10:03.630><c> got</c><00:10:03.750><c> to</c><00:10:03.780><c> update</c><00:10:04.200><c> our</c><00:10:04.230><c> pointers</c>

00:10:04.790 --> 00:10:04.800 align:start position:0%
course we got to update our pointers
 

00:10:04.800 --> 00:10:06.800 align:start position:0%
course we got to update our pointers
about<00:10:04.980><c> how</c><00:10:05.220><c> do</c><00:10:05.280><c> we</c><00:10:05.430><c> update</c><00:10:05.940><c> it</c><00:10:05.970><c> there's</c><00:10:06.450><c> a</c><00:10:06.510><c> lot</c>

00:10:06.800 --> 00:10:06.810 align:start position:0%
about how do we update it there's a lot
 

00:10:06.810 --> 00:10:08.240 align:start position:0%
about how do we update it there's a lot
of<00:10:06.960><c> ways</c><00:10:07.170><c> you</c><00:10:07.200><c> can</c><00:10:07.500><c> do</c><00:10:07.680><c> it</c><00:10:07.800><c> but</c><00:10:07.950><c> I'm</c><00:10:08.070><c> going</c><00:10:08.220><c> to</c>

00:10:08.240 --> 00:10:08.250 align:start position:0%
of ways you can do it but I'm going to
 

00:10:08.250 --> 00:10:10.100 align:start position:0%
of ways you can do it but I'm going to
show<00:10:08.520><c> you</c><00:10:08.580><c> the</c><00:10:08.820><c> way</c><00:10:08.970><c> that</c><00:10:09.240><c> you</c><00:10:09.330><c> can</c><00:10:09.480><c> do</c><00:10:09.720><c> it</c><00:10:09.900><c> with</c>

00:10:10.100 --> 00:10:10.110 align:start position:0%
show you the way that you can do it with
 

00:10:10.110 --> 00:10:12.500 align:start position:0%
show you the way that you can do it with
writing<00:10:10.500><c> the</c><00:10:10.530><c> minimal</c><00:10:11.100><c> amount</c><00:10:11.280><c> of</c><00:10:11.610><c> code</c><00:10:11.940><c> so</c>

00:10:12.500 --> 00:10:12.510 align:start position:0%
writing the minimal amount of code so
 

00:10:12.510 --> 00:10:14.270 align:start position:0%
writing the minimal amount of code so
let<00:10:12.750><c> me</c><00:10:12.840><c> just</c><00:10:12.990><c> write</c><00:10:13.320><c> a</c><00:10:13.350><c> comment</c><00:10:13.710><c> to</c><00:10:13.950><c> show</c><00:10:14.220><c> you</c>

00:10:14.270 --> 00:10:14.280 align:start position:0%
let me just write a comment to show you
 

00:10:14.280 --> 00:10:16.820 align:start position:0%
let me just write a comment to show you
a<00:10:14.430><c> little</c><00:10:14.670><c> bit</c><00:10:14.850><c> what</c><00:10:15.000><c> if</c><00:10:15.150><c> we</c><00:10:15.300><c> had</c><00:10:15.510><c> the</c><00:10:16.260><c> to</c><00:10:16.500><c> sum</c>

00:10:16.820 --> 00:10:16.830 align:start position:0%
a little bit what if we had the to sum
 

00:10:16.830 --> 00:10:18.950 align:start position:0%
a little bit what if we had the to sum
basically<00:10:17.820><c> for</c><00:10:18.030><c> these</c><00:10:18.120><c> left</c><00:10:18.390><c> and</c><00:10:18.570><c> right</c><00:10:18.750><c> and</c>

00:10:18.950 --> 00:10:18.960 align:start position:0%
basically for these left and right and
 

00:10:18.960 --> 00:10:22.520 align:start position:0%
basically for these left and right and
we<00:10:19.140><c> were</c><00:10:19.320><c> at</c><00:10:19.560><c> negative</c><00:10:20.220><c> 2</c><00:10:20.430><c> negative</c><00:10:20.790><c> 2</c><00:10:21.530><c> so</c>

00:10:22.520 --> 00:10:22.530 align:start position:0%
we were at negative 2 negative 2 so
 

00:10:22.530 --> 00:10:28.400 align:start position:0%
we were at negative 2 negative 2 so
negative<00:10:22.890><c> 2</c><00:10:23.040><c> 0</c><00:10:23.490><c> 0</c><00:10:24.620><c> 2</c><00:10:25.620><c> &amp;</c><00:10:26.040><c> 2</c><00:10:26.810><c> what</c><00:10:27.810><c> if</c><00:10:27.900><c> our</c><00:10:28.050><c> left</c>

00:10:28.400 --> 00:10:28.410 align:start position:0%
negative 2 0 0 2 &amp; 2 what if our left
 

00:10:28.410 --> 00:10:30.320 align:start position:0%
negative 2 0 0 2 &amp; 2 what if our left
pointer<00:10:28.860><c> was</c><00:10:29.010><c> here</c><00:10:29.460><c> and</c><00:10:29.640><c> our</c><00:10:29.730><c> right</c><00:10:29.970><c> pointer</c>

00:10:30.320 --> 00:10:30.330 align:start position:0%
pointer was here and our right pointer
 

00:10:30.330 --> 00:10:32.180 align:start position:0%
pointer was here and our right pointer
was<00:10:30.480><c> here</c><00:10:30.720><c> in</c><00:10:30.840><c> that</c><00:10:30.990><c> case</c><00:10:31.230><c> we</c><00:10:31.650><c> might</c><00:10:31.890><c> have</c><00:10:32.010><c> we</c>

00:10:32.180 --> 00:10:32.190 align:start position:0%
was here in that case we might have we
 

00:10:32.190 --> 00:10:34.070 align:start position:0%
was here in that case we might have we
found<00:10:32.430><c> a</c><00:10:32.550><c> solution</c><00:10:32.670><c> let's</c><00:10:33.090><c> say</c><00:10:33.240><c> right</c><00:10:33.510><c> then</c>

00:10:34.070 --> 00:10:34.080 align:start position:0%
found a solution let's say right then
 

00:10:34.080 --> 00:10:36.050 align:start position:0%
found a solution let's say right then
we'd<00:10:34.290><c> want</c><00:10:34.590><c> to</c><00:10:34.680><c> update</c><00:10:35.250><c> our</c><00:10:35.280><c> left</c><00:10:35.670><c> pointer</c>

00:10:36.050 --> 00:10:36.060 align:start position:0%
we'd want to update our left pointer
 

00:10:36.060 --> 00:10:37.520 align:start position:0%
we'd want to update our left pointer
right<00:10:36.210><c> so</c><00:10:36.420><c> then</c><00:10:36.600><c> our</c><00:10:36.690><c> left</c><00:10:36.930><c> pointer</c><00:10:37.200><c> gets</c><00:10:37.320><c> to</c>

00:10:37.520 --> 00:10:37.530 align:start position:0%
right so then our left pointer gets to
 

00:10:37.530 --> 00:10:39.950 align:start position:0%
right so then our left pointer gets to
negative<00:10:37.860><c> 2</c><00:10:38.010><c> again</c><00:10:38.310><c> but</c><00:10:38.880><c> that's</c><00:10:39.060><c> the</c><00:10:39.300><c> same</c><00:10:39.630><c> one</c>

00:10:39.950 --> 00:10:39.960 align:start position:0%
negative 2 again but that's the same one
 

00:10:39.960 --> 00:10:41.870 align:start position:0%
negative 2 again but that's the same one
as<00:10:40.140><c> before</c><00:10:40.170><c> so</c><00:10:40.890><c> in</c><00:10:41.010><c> that</c><00:10:41.130><c> case</c><00:10:41.400><c> we</c><00:10:41.610><c> want</c><00:10:41.820><c> to</c>

00:10:41.870 --> 00:10:41.880 align:start position:0%
as before so in that case we want to
 

00:10:41.880 --> 00:10:43.850 align:start position:0%
as before so in that case we want to
update<00:10:42.090><c> it</c><00:10:42.300><c> one</c><00:10:42.660><c> more</c><00:10:42.930><c> time</c><00:10:43.200><c> to</c><00:10:43.470><c> get</c><00:10:43.590><c> it</c><00:10:43.650><c> over</c>

00:10:43.850 --> 00:10:43.860 align:start position:0%
update it one more time to get it over
 

00:10:43.860 --> 00:10:46.550 align:start position:0%
update it one more time to get it over
here<00:10:44.010><c> right</c><00:10:44.580><c> now</c><00:10:45.150><c> in</c><00:10:45.300><c> that</c><00:10:45.450><c> case</c><00:10:45.720><c> now</c><00:10:46.140><c> our</c><00:10:46.350><c> sum</c>

00:10:46.550 --> 00:10:46.560 align:start position:0%
here right now in that case now our sum
 

00:10:46.560 --> 00:10:47.720 align:start position:0%
here right now in that case now our sum
is<00:10:46.590><c> going</c><00:10:46.800><c> to</c><00:10:46.860><c> be</c><00:10:46.980><c> too</c><00:10:47.160><c> big</c><00:10:47.400><c> because</c><00:10:47.580><c> we're</c>

00:10:47.720 --> 00:10:47.730 align:start position:0%
is going to be too big because we're
 

00:10:47.730 --> 00:10:49.940 align:start position:0%
is going to be too big because we're
going<00:10:47.820><c> to</c><00:10:47.880><c> be</c><00:10:48.030><c> at</c><00:10:48.120><c> 0</c><00:10:48.510><c> plus</c><00:10:48.990><c> 2</c><00:10:49.470><c> so</c><00:10:49.770><c> that's</c>

00:10:49.940 --> 00:10:49.950 align:start position:0%
going to be at 0 plus 2 so that's
 

00:10:49.950 --> 00:10:53.180 align:start position:0%
going to be at 0 plus 2 so that's
greater<00:10:50.220><c> than</c><00:10:50.340><c> 0</c><00:10:50.700><c> so</c><00:10:51.420><c> then</c><00:10:51.780><c> our</c><00:10:52.080><c> loop</c><00:10:52.620><c> is</c><00:10:52.860><c> gonna</c>

00:10:53.180 --> 00:10:53.190 align:start position:0%
greater than 0 so then our loop is gonna
 

00:10:53.190 --> 00:10:55.580 align:start position:0%
greater than 0 so then our loop is gonna
execute<00:10:53.820><c> saying</c><00:10:54.630><c> that</c><00:10:54.780><c> this</c><00:10:54.900><c> is</c><00:10:55.050><c> too</c><00:10:55.230><c> big</c><00:10:55.440><c> and</c>

00:10:55.580 --> 00:10:55.590 align:start position:0%
execute saying that this is too big and
 

00:10:55.590 --> 00:10:56.960 align:start position:0%
execute saying that this is too big and
we're<00:10:55.680><c> gonna</c><00:10:55.770><c> shift</c><00:10:56.070><c> the</c><00:10:56.220><c> right</c><00:10:56.400><c> pointer</c><00:10:56.820><c> to</c>

00:10:56.960 --> 00:10:56.970 align:start position:0%
we're gonna shift the right pointer to
 

00:10:56.970 --> 00:10:59.270 align:start position:0%
we're gonna shift the right pointer to
the<00:10:57.090><c> left</c><00:10:57.360><c> but</c><00:10:57.690><c> notice</c><00:10:58.110><c> how</c><00:10:58.230><c> that</c><00:10:58.440><c> right</c><00:10:58.770><c> value</c>

00:10:59.270 --> 00:10:59.280 align:start position:0%
the left but notice how that right value
 

00:10:59.280 --> 00:11:01.340 align:start position:0%
the left but notice how that right value
is<00:10:59.400><c> now</c><00:10:59.550><c> the</c><00:10:59.610><c> same</c><00:10:59.940><c> as</c><00:11:00.000><c> it</c><00:11:00.300><c> previously</c><00:11:00.720><c> was</c><00:11:00.960><c> to</c>

00:11:01.340 --> 00:11:01.350 align:start position:0%
is now the same as it previously was to
 

00:11:01.350 --> 00:11:02.630 align:start position:0%
is now the same as it previously was to
but<00:11:01.560><c> that's</c><00:11:01.740><c> ok</c>

00:11:02.630 --> 00:11:02.640 align:start position:0%
but that's ok
 

00:11:02.640 --> 00:11:05.840 align:start position:0%
but that's ok
because<00:11:03.120><c> our</c><00:11:03.270><c> sum</c><00:11:03.690><c> is</c><00:11:03.930><c> gonna</c><00:11:04.520><c> our</c><00:11:05.520><c> sum</c><00:11:05.820><c> is</c>

00:11:05.840 --> 00:11:05.850 align:start position:0%
because our sum is gonna our sum is
 

00:11:05.850 --> 00:11:07.430 align:start position:0%
because our sum is gonna our sum is
going<00:11:06.060><c> to</c><00:11:06.120><c> evaluate</c><00:11:06.360><c> as</c><00:11:06.810><c> too</c><00:11:07.080><c> big</c>

00:11:07.430 --> 00:11:07.440 align:start position:0%
going to evaluate as too big
 

00:11:07.440 --> 00:11:08.510 align:start position:0%
going to evaluate as too big
to<00:11:07.500><c> our</c><00:11:07.590><c> right</c><00:11:07.740><c> corner</c><00:11:08.070><c> is</c><00:11:08.190><c> going</c><00:11:08.340><c> to</c><00:11:08.400><c> be</c>

00:11:08.510 --> 00:11:08.520 align:start position:0%
to our right corner is going to be
 

00:11:08.520 --> 00:11:11.180 align:start position:0%
to our right corner is going to be
shifted<00:11:08.910><c> again</c><00:11:09.060><c> notice</c><00:11:09.990><c> how</c><00:11:10.140><c> each</c><00:11:10.410><c> value</c><00:11:10.830><c> is</c>

00:11:11.180 --> 00:11:11.190 align:start position:0%
shifted again notice how each value is
 

00:11:11.190 --> 00:11:13.430 align:start position:0%
shifted again notice how each value is
only<00:11:11.640><c> going</c><00:11:11.760><c> to</c><00:11:11.820><c> have</c><00:11:12.060><c> one</c><00:11:12.440><c> corresponding</c>

00:11:13.430 --> 00:11:13.440 align:start position:0%
only going to have one corresponding
 

00:11:13.440 --> 00:11:16.100 align:start position:0%
only going to have one corresponding
value<00:11:14.070><c> that</c><00:11:14.250><c> it</c><00:11:14.400><c> can</c><00:11:14.430><c> sum</c><00:11:14.850><c> equal</c><00:11:15.780><c> to</c><00:11:15.960><c> the</c>

00:11:16.100 --> 00:11:16.110 align:start position:0%
value that it can sum equal to the
 

00:11:16.110 --> 00:11:18.410 align:start position:0%
value that it can sum equal to the
target<00:11:16.530><c> which</c><00:11:16.650><c> is</c><00:11:16.680><c> zero</c><00:11:17.070><c> so</c><00:11:17.580><c> we</c><00:11:17.730><c> only</c><00:11:17.940><c> have</c><00:11:18.270><c> to</c>

00:11:18.410 --> 00:11:18.420 align:start position:0%
target which is zero so we only have to
 

00:11:18.420 --> 00:11:21.170 align:start position:0%
target which is zero so we only have to
update<00:11:18.600><c> one</c><00:11:19.200><c> pointer</c><00:11:19.890><c> and</c><00:11:20.070><c> there</c><00:11:20.550><c> are</c><00:11:20.820><c> two</c>

00:11:21.170 --> 00:11:21.180 align:start position:0%
update one pointer and there are two
 

00:11:21.180 --> 00:11:23.210 align:start position:0%
update one pointer and there are two
conditions<00:11:21.510><c> up</c><00:11:21.930><c> here</c><00:11:22.380><c> we'll</c><00:11:22.560><c> update</c><00:11:22.830><c> the</c>

00:11:23.210 --> 00:11:23.220 align:start position:0%
conditions up here we'll update the
 

00:11:23.220 --> 00:11:25.280 align:start position:0%
conditions up here we'll update the
other<00:11:23.430><c> pointer</c><00:11:24.000><c> by</c><00:11:24.390><c> itself</c><00:11:24.840><c> we</c><00:11:25.020><c> don't</c><00:11:25.170><c> even</c>

00:11:25.280 --> 00:11:25.290 align:start position:0%
other pointer by itself we don't even
 

00:11:25.290 --> 00:11:26.450 align:start position:0%
other pointer by itself we don't even
have<00:11:25.410><c> to</c><00:11:25.560><c> worry</c><00:11:25.770><c> about</c><00:11:25.950><c> it</c>

00:11:26.450 --> 00:11:26.460 align:start position:0%
have to worry about it
 

00:11:26.460 --> 00:11:28.310 align:start position:0%
have to worry about it
so<00:11:26.850><c> in</c><00:11:27.000><c> this</c><00:11:27.150><c> case</c><00:11:27.420><c> we're</c><00:11:27.780><c> only</c><00:11:27.810><c> going</c><00:11:28.260><c> to</c>

00:11:28.310 --> 00:11:28.320 align:start position:0%
so in this case we're only going to
 

00:11:28.320 --> 00:11:30.560 align:start position:0%
so in this case we're only going to
shift<00:11:28.590><c> our</c><00:11:28.710><c> left</c><00:11:29.010><c> pointer</c><00:11:29.460><c> because</c><00:11:30.150><c> we</c><00:11:30.300><c> don't</c>

00:11:30.560 --> 00:11:30.570 align:start position:0%
shift our left pointer because we don't
 

00:11:30.570 --> 00:11:32.240 align:start position:0%
shift our left pointer because we don't
want<00:11:30.720><c> to</c><00:11:30.750><c> have</c><00:11:30.900><c> the</c><00:11:31.050><c> same</c><00:11:31.260><c> sum</c><00:11:31.650><c> we're</c><00:11:32.160><c> gonna</c>

00:11:32.240 --> 00:11:32.250 align:start position:0%
want to have the same sum we're gonna
 

00:11:32.250 --> 00:11:35.000 align:start position:0%
want to have the same sum we're gonna
have<00:11:32.430><c> to</c><00:11:32.520><c> use</c><00:11:32.640><c> a</c><00:11:32.670><c> loop</c><00:11:33.000><c> so</c><00:11:33.660><c> in</c><00:11:34.020><c> this</c><00:11:34.230><c> case</c><00:11:34.560><c> if</c>

00:11:35.000 --> 00:11:35.010 align:start position:0%
have to use a loop so in this case if
 

00:11:35.010 --> 00:11:38.840 align:start position:0%
have to use a loop so in this case if
nums<00:11:35.520><c> of</c><00:11:35.790><c> left</c><00:11:36.120><c> is</c><00:11:36.530><c> equal</c><00:11:37.530><c> to</c><00:11:38.040><c> num</c><00:11:38.310><c> of</c><00:11:38.340><c> left</c>

00:11:38.840 --> 00:11:38.850 align:start position:0%
nums of left is equal to num of left
 

00:11:38.850 --> 00:11:42.410 align:start position:0%
nums of left is equal to num of left
minus<00:11:39.240><c> one</c><00:11:40.250><c> that</c><00:11:41.250><c> means</c><00:11:41.460><c> it's</c><00:11:41.670><c> the</c><00:11:41.760><c> same</c><00:11:41.970><c> value</c>

00:11:42.410 --> 00:11:42.420 align:start position:0%
minus one that means it's the same value
 

00:11:42.420 --> 00:11:45.040 align:start position:0%
minus one that means it's the same value
so<00:11:42.690><c> we</c><00:11:42.840><c> have</c><00:11:42.990><c> to</c><00:11:43.110><c> keep</c><00:11:43.380><c> shifting</c><00:11:43.710><c> our</c><00:11:44.010><c> pointer</c>

00:11:45.040 --> 00:11:45.050 align:start position:0%
so we have to keep shifting our pointer
 

00:11:45.050 --> 00:11:47.510 align:start position:0%
so we have to keep shifting our pointer
but<00:11:46.050><c> remember</c><00:11:46.500><c> we</c><00:11:46.620><c> don't</c><00:11:46.950><c> want</c><00:11:47.160><c> our</c><00:11:47.220><c> left</c>

00:11:47.510 --> 00:11:47.520 align:start position:0%
but remember we don't want our left
 

00:11:47.520 --> 00:11:49.400 align:start position:0%
but remember we don't want our left
pointer<00:11:47.880><c> to</c><00:11:48.030><c> ever</c><00:11:48.180><c> pass</c><00:11:48.540><c> the</c><00:11:48.840><c> right</c><00:11:49.050><c> pointer</c>

00:11:49.400 --> 00:11:49.410 align:start position:0%
pointer to ever pass the right pointer
 

00:11:49.410 --> 00:11:51.400 align:start position:0%
pointer to ever pass the right pointer
so<00:11:49.560><c> we're</c><00:11:49.650><c> gonna</c><00:11:49.770><c> add</c><00:11:49.980><c> that</c><00:11:50.190><c> to</c><00:11:50.250><c> the</c><00:11:50.490><c> condition</c>

00:11:51.400 --> 00:11:51.410 align:start position:0%
so we're gonna add that to the condition
 

00:11:51.410 --> 00:11:54.260 align:start position:0%
so we're gonna add that to the condition
so<00:11:52.410><c> this</c><00:11:52.620><c> is</c><00:11:52.770><c> all</c><00:11:53.010><c> we</c><00:11:53.250><c> need</c><00:11:53.460><c> to</c><00:11:53.670><c> do</c><00:11:53.820><c> now</c><00:11:54.240><c> I</c>

00:11:54.260 --> 00:11:54.270 align:start position:0%
so this is all we need to do now I
 

00:11:54.270 --> 00:11:56.510 align:start position:0%
so this is all we need to do now I
believe<00:11:54.780><c> unless</c><00:11:54.990><c> I've</c><00:11:55.290><c> made</c><00:11:55.590><c> another</c><00:11:55.890><c> stupid</c>

00:11:56.510 --> 00:11:56.520 align:start position:0%
believe unless I've made another stupid
 

00:11:56.520 --> 00:11:59.300 align:start position:0%
believe unless I've made another stupid
bug<00:11:56.730><c> we</c><00:11:57.690><c> should</c><00:11:58.020><c> be</c><00:11:58.200><c> able</c><00:11:58.290><c> to</c><00:11:58.440><c> just</c><00:11:58.710><c> return</c><00:11:58.860><c> our</c>

00:11:59.300 --> 00:11:59.310 align:start position:0%
bug we should be able to just return our
 

00:11:59.310 --> 00:12:02.060 align:start position:0%
bug we should be able to just return our
result<00:11:59.700><c> and</c><00:12:00.110><c> pass</c><00:12:01.110><c> the</c><00:12:01.320><c> problem</c><00:12:01.710><c> with</c><00:12:01.980><c> the</c>

00:12:02.060 --> 00:12:02.070 align:start position:0%
result and pass the problem with the
 

00:12:02.070 --> 00:12:04.610 align:start position:0%
result and pass the problem with the
most<00:12:02.400><c> optimized</c><00:12:03.000><c> solution</c><00:12:03.600><c> okay</c><00:12:04.140><c> I'm</c><00:12:04.230><c> praying</c>

00:12:04.610 --> 00:12:04.620 align:start position:0%
most optimized solution okay I'm praying
 

00:12:04.620 --> 00:12:06.080 align:start position:0%
most optimized solution okay I'm praying
that<00:12:04.710><c> this</c><00:12:04.830><c> works</c><00:12:05.130><c> on</c><00:12:05.310><c> the</c><00:12:05.400><c> first</c><00:12:05.610><c> try</c><00:12:05.850><c> let's</c>

00:12:06.080 --> 00:12:06.090 align:start position:0%
that this works on the first try let's
 

00:12:06.090 --> 00:12:08.630 align:start position:0%
that this works on the first try let's
see<00:12:06.230><c> we</c><00:12:07.230><c> passed</c><00:12:07.470><c> the</c><00:12:07.650><c> test</c><00:12:07.830><c> case</c><00:12:08.160><c> the</c><00:12:08.400><c> first</c>

00:12:08.630 --> 00:12:08.640 align:start position:0%
see we passed the test case the first
 

00:12:08.640 --> 00:12:14.150 align:start position:0%
see we passed the test case the first
test<00:12:08.880><c> case</c><00:12:12.350><c> they</c><00:12:13.350><c> really</c><00:12:13.710><c> want</c><00:12:13.860><c> you</c><00:12:13.980><c> to</c><00:12:14.010><c> buy</c>

00:12:14.150 --> 00:12:14.160 align:start position:0%
test case they really want you to buy
 

00:12:14.160 --> 00:12:16.460 align:start position:0%
test case they really want you to buy
leak<00:12:14.400><c> code</c><00:12:14.640><c> premium</c><00:12:15.180><c> this</c><00:12:15.540><c> is</c><00:12:15.690><c> taking</c><00:12:15.960><c> okay</c><00:12:16.410><c> so</c>

00:12:16.460 --> 00:12:16.470 align:start position:0%
leak code premium this is taking okay so
 

00:12:16.470 --> 00:12:18.980 align:start position:0%
leak code premium this is taking okay so
it<00:12:16.800><c> did</c><00:12:16.950><c> pass</c><00:12:17.300><c> usually</c><00:12:18.300><c> have</c><00:12:18.450><c> some</c><00:12:18.660><c> stupid</c>

00:12:18.980 --> 00:12:18.990 align:start position:0%
it did pass usually have some stupid
 

00:12:18.990 --> 00:12:20.510 align:start position:0%
it did pass usually have some stupid
bugs<00:12:19.200><c> where</c><00:12:19.440><c> I</c><00:12:19.470><c> mess</c><00:12:19.680><c> up</c><00:12:19.800><c> a</c><00:12:19.890><c> condition</c><00:12:20.340><c> but</c>

00:12:20.510 --> 00:12:20.520 align:start position:0%
bugs where I mess up a condition but
 

00:12:20.520 --> 00:12:23.090 align:start position:0%
bugs where I mess up a condition but
okay<00:12:20.850><c> so</c><00:12:20.910><c> we</c><00:12:21.150><c> passed</c><00:12:21.960><c> it</c><00:12:22.230><c> this</c><00:12:22.650><c> is</c><00:12:22.830><c> pretty</c>

00:12:23.090 --> 00:12:23.100 align:start position:0%
okay so we passed it this is pretty
 

00:12:23.100 --> 00:12:24.920 align:start position:0%
okay so we passed it this is pretty
complicated<00:12:23.670><c> I'm</c><00:12:24.060><c> not</c><00:12:24.240><c> gonna</c><00:12:24.360><c> lie</c><00:12:24.570><c> this</c><00:12:24.780><c> is</c><00:12:24.870><c> a</c>

00:12:24.920 --> 00:12:24.930 align:start position:0%
complicated I'm not gonna lie this is a
 

00:12:24.930 --> 00:12:26.750 align:start position:0%
complicated I'm not gonna lie this is a
pretty<00:12:25.260><c> hard</c><00:12:25.560><c> problem</c><00:12:25.650><c> to</c><00:12:26.100><c> solve</c><00:12:26.400><c> if</c><00:12:26.640><c> you've</c>

00:12:26.750 --> 00:12:26.760 align:start position:0%
pretty hard problem to solve if you've
 

00:12:26.760 --> 00:12:29.060 align:start position:0%
pretty hard problem to solve if you've
only<00:12:27.090><c> just</c><00:12:27.300><c> solved</c><00:12:27.930><c> to</c><00:12:28.230><c> some</c><00:12:28.500><c> so</c><00:12:28.650><c> I</c><00:12:28.680><c> really</c>

00:12:29.060 --> 00:12:29.070 align:start position:0%
only just solved to some so I really
 

00:12:29.070 --> 00:12:31.310 align:start position:0%
only just solved to some so I really
recommend<00:12:29.190><c> solving</c><00:12:29.940><c> to</c><00:12:30.120><c> some</c><00:12:30.420><c> two</c><00:12:30.750><c> as</c><00:12:31.020><c> well</c>

00:12:31.310 --> 00:12:31.320 align:start position:0%
recommend solving to some two as well
 

00:12:31.320 --> 00:12:33.830 align:start position:0%
recommend solving to some two as well
before<00:12:31.860><c> solving</c><00:12:32.310><c> this</c><00:12:32.520><c> problem</c><00:12:32.940><c> I</c><00:12:33.150><c> might</c><00:12:33.690><c> have</c>

00:12:33.830 --> 00:12:33.840 align:start position:0%
before solving this problem I might have
 

00:12:33.840 --> 00:12:35.210 align:start position:0%
before solving this problem I might have
made<00:12:33.990><c> it</c><00:12:34.140><c> look</c><00:12:34.290><c> easy</c><00:12:34.560><c> with</c><00:12:34.860><c> the</c><00:12:34.920><c> amount</c><00:12:35.160><c> of</c>

00:12:35.210 --> 00:12:35.220 align:start position:0%
made it look easy with the amount of
 

00:12:35.220 --> 00:12:37.220 align:start position:0%
made it look easy with the amount of
code<00:12:35.430><c> I</c><00:12:35.580><c> wrote</c><00:12:35.610><c> but</c><00:12:36.270><c> don't</c><00:12:36.600><c> let</c><00:12:36.750><c> it</c><00:12:36.840><c> fool</c><00:12:36.870><c> you</c><00:12:37.080><c> I</c>

00:12:37.220 --> 00:12:37.230 align:start position:0%
code I wrote but don't let it fool you I
 

00:12:37.230 --> 00:12:38.720 align:start position:0%
code I wrote but don't let it fool you I
really<00:12:37.620><c> struggled</c><00:12:38.070><c> with</c><00:12:38.190><c> this</c><00:12:38.280><c> problem</c><00:12:38.640><c> the</c>

00:12:38.720 --> 00:12:38.730 align:start position:0%
really struggled with this problem the
 

00:12:38.730 --> 00:12:41.450 align:start position:0%
really struggled with this problem the
first<00:12:38.910><c> time</c><00:12:39.150><c> I</c><00:12:39.180><c> was</c><00:12:39.420><c> doing</c><00:12:39.570><c> it</c><00:12:39.810><c> and</c><00:12:40.310><c> you</c><00:12:41.310><c> can</c>

00:12:41.450 --> 00:12:41.460 align:start position:0%
first time I was doing it and you can
 

00:12:41.460 --> 00:12:43.190 align:start position:0%
first time I was doing it and you can
see<00:12:41.700><c> here</c><00:12:41.970><c> and</c><00:12:42.210><c> by</c><00:12:42.480><c> looking</c><00:12:42.720><c> at</c><00:12:42.810><c> the</c><00:12:42.930><c> evidence</c>

00:12:43.190 --> 00:12:43.200 align:start position:0%
see here and by looking at the evidence
 

00:12:43.200 --> 00:12:45.290 align:start position:0%
see here and by looking at the evidence
a<00:12:43.410><c> long</c><00:12:43.560><c> time</c><00:12:43.770><c> ago</c><00:12:44.040><c> well</c><00:12:44.580><c> ten</c><00:12:44.820><c> months</c><00:12:45.090><c> ago</c><00:12:45.270><c> I</c>

00:12:45.290 --> 00:12:45.300 align:start position:0%
a long time ago well ten months ago I
 

00:12:45.300 --> 00:12:47.000 align:start position:0%
a long time ago well ten months ago I
was<00:12:45.510><c> pretty</c><00:12:45.720><c> bad</c><00:12:45.900><c> at</c><00:12:46.050><c> this</c><00:12:46.140><c> as</c><00:12:46.290><c> well</c><00:12:46.440><c> so</c><00:12:46.860><c> don't</c>

00:12:47.000 --> 00:12:47.010 align:start position:0%
was pretty bad at this as well so don't
 

00:12:47.010 --> 00:12:48.770 align:start position:0%
was pretty bad at this as well so don't
get<00:12:47.160><c> discouraged</c><00:12:47.310><c> if</c><00:12:47.940><c> this</c><00:12:48.450><c> was</c><00:12:48.600><c> helpful</c>

00:12:48.770 --> 00:12:48.780 align:start position:0%
get discouraged if this was helpful
 

00:12:48.780 --> 00:12:50.630 align:start position:0%
get discouraged if this was helpful
though<00:12:49.200><c> please</c><00:12:49.620><c> leave</c><00:12:49.830><c> a</c><00:12:49.860><c> like</c><00:12:50.100><c> and</c><00:12:50.220><c> subscribe</c>

00:12:50.630 --> 00:12:50.640 align:start position:0%
though please leave a like and subscribe
 

00:12:50.640 --> 00:12:53.960 align:start position:0%
though please leave a like and subscribe
and<00:12:50.880><c> thank</c><00:12:51.300><c> you</c><00:12:51.420><c> for</c><00:12:51.570><c> watching</c>

