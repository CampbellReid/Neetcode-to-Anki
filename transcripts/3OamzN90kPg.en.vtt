WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.589 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c>

00:00:01.589 --> 00:00:01.599 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.599 --> 00:00:03.429 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.839><c> some</c><00:00:02.000><c> more</c><00:00:02.240><c> neat</c><00:00:02.480><c> code</c><00:00:02.720><c> today</c><00:00:02.960><c> so</c><00:00:03.120><c> today</c>

00:00:03.429 --> 00:00:03.439 align:start position:0%
write some more neat code today so today
 

00:00:03.439 --> 00:00:05.990 align:start position:0%
write some more neat code today so today
let's<00:00:03.679><c> solve</c><00:00:04.000><c> contains</c><00:00:04.799><c> duplicate</c><00:00:05.680><c> this</c><00:00:05.920><c> is</c>

00:00:05.990 --> 00:00:06.000 align:start position:0%
let's solve contains duplicate this is
 

00:00:06.000 --> 00:00:08.790 align:start position:0%
let's solve contains duplicate this is
another<00:00:06.480><c> problem</c><00:00:06.960><c> from</c><00:00:07.279><c> the</c><00:00:07.680><c> blind</c><00:00:08.000><c> 75</c><00:00:08.559><c> list</c>

00:00:08.790 --> 00:00:08.800 align:start position:0%
another problem from the blind 75 list
 

00:00:08.800 --> 00:00:10.629 align:start position:0%
another problem from the blind 75 list
of<00:00:08.960><c> questions</c><00:00:09.360><c> we've</c><00:00:09.519><c> been</c><00:00:09.760><c> working</c><00:00:10.080><c> on</c><00:00:10.400><c> so</c><00:00:10.559><c> i</c>

00:00:10.629 --> 00:00:10.639 align:start position:0%
of questions we've been working on so i
 

00:00:10.639 --> 00:00:12.549 align:start position:0%
of questions we've been working on so i
like<00:00:10.880><c> this</c><00:00:11.120><c> problem</c><00:00:11.599><c> because</c><00:00:12.080><c> it's</c><00:00:12.240><c> a</c><00:00:12.320><c> good</c>

00:00:12.549 --> 00:00:12.559 align:start position:0%
like this problem because it's a good
 

00:00:12.559 --> 00:00:14.549 align:start position:0%
like this problem because it's a good
problem<00:00:12.880><c> for</c><00:00:13.120><c> beginners</c><00:00:13.759><c> but</c><00:00:13.920><c> there's</c><00:00:14.160><c> also</c>

00:00:14.549 --> 00:00:14.559 align:start position:0%
problem for beginners but there's also
 

00:00:14.559 --> 00:00:16.230 align:start position:0%
problem for beginners but there's also
multiple<00:00:15.040><c> solutions</c><00:00:15.599><c> to</c><00:00:15.759><c> it</c><00:00:15.839><c> that</c><00:00:15.920><c> i'd</c><00:00:16.080><c> like</c>

00:00:16.230 --> 00:00:16.240 align:start position:0%
multiple solutions to it that i'd like
 

00:00:16.240 --> 00:00:18.390 align:start position:0%
multiple solutions to it that i'd like
to<00:00:16.400><c> go</c><00:00:16.640><c> over</c><00:00:16.960><c> in</c><00:00:17.119><c> this</c><00:00:17.359><c> video</c><00:00:17.680><c> so</c><00:00:17.840><c> we're</c><00:00:18.000><c> given</c>

00:00:18.390 --> 00:00:18.400 align:start position:0%
to go over in this video so we're given
 

00:00:18.400 --> 00:00:20.870 align:start position:0%
to go over in this video so we're given
an<00:00:18.560><c> array</c><00:00:18.960><c> of</c><00:00:19.279><c> numbers</c><00:00:20.000><c> we</c><00:00:20.160><c> want</c><00:00:20.320><c> to</c><00:00:20.400><c> return</c>

00:00:20.870 --> 00:00:20.880 align:start position:0%
an array of numbers we want to return
 

00:00:20.880 --> 00:00:23.189 align:start position:0%
an array of numbers we want to return
true<00:00:21.199><c> if</c><00:00:21.279><c> there's</c><00:00:21.680><c> any</c><00:00:22.080><c> value</c><00:00:22.640><c> in</c><00:00:22.720><c> that</c><00:00:22.960><c> list</c>

00:00:23.189 --> 00:00:23.199 align:start position:0%
true if there's any value in that list
 

00:00:23.199 --> 00:00:26.070 align:start position:0%
true if there's any value in that list
of<00:00:23.359><c> numbers</c><00:00:23.840><c> that</c><00:00:24.000><c> appears</c><00:00:24.720><c> at</c><00:00:25.039><c> least</c><00:00:25.680><c> twice</c>

00:00:26.070 --> 00:00:26.080 align:start position:0%
of numbers that appears at least twice
 

00:00:26.080 --> 00:00:27.910 align:start position:0%
of numbers that appears at least twice
but<00:00:26.320><c> maybe</c><00:00:26.560><c> it</c><00:00:26.640><c> could</c><00:00:26.800><c> appear</c><00:00:27.199><c> three</c><00:00:27.439><c> times</c><00:00:27.760><c> or</c>

00:00:27.910 --> 00:00:27.920 align:start position:0%
but maybe it could appear three times or
 

00:00:27.920 --> 00:00:30.870 align:start position:0%
but maybe it could appear three times or
four<00:00:28.240><c> times</c><00:00:28.720><c> write</c><00:00:28.960><c> just</c><00:00:29.199><c> at</c><00:00:29.359><c> least</c><00:00:29.840><c> twice</c><00:00:30.560><c> and</c>

00:00:30.870 --> 00:00:30.880 align:start position:0%
four times write just at least twice and
 

00:00:30.880 --> 00:00:33.270 align:start position:0%
four times write just at least twice and
we<00:00:31.039><c> want</c><00:00:31.199><c> to</c><00:00:31.279><c> return</c><00:00:31.679><c> false</c><00:00:32.239><c> if</c><00:00:32.640><c> there</c><00:00:32.960><c> aren't</c>

00:00:33.270 --> 00:00:33.280 align:start position:0%
we want to return false if there aren't
 

00:00:33.280 --> 00:00:35.590 align:start position:0%
we want to return false if there aren't
any<00:00:33.520><c> values</c><00:00:33.920><c> that</c><00:00:34.160><c> appear</c><00:00:34.719><c> at</c><00:00:34.880><c> least</c><00:00:35.200><c> twice</c>

00:00:35.590 --> 00:00:35.600 align:start position:0%
any values that appear at least twice
 

00:00:35.600 --> 00:00:37.350 align:start position:0%
any values that appear at least twice
basically<00:00:36.079><c> what</c><00:00:36.239><c> that</c><00:00:36.399><c> means</c><00:00:36.719><c> is</c><00:00:36.800><c> that</c><00:00:37.040><c> every</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
basically what that means is that every
 

00:00:37.360 --> 00:00:40.470 align:start position:0%
basically what that means is that every
value<00:00:37.840><c> in</c><00:00:38.160><c> the</c><00:00:38.320><c> array</c><00:00:38.800><c> is</c><00:00:39.040><c> distinct</c><00:00:40.160><c> so</c><00:00:40.320><c> let's</c>

00:00:40.470 --> 00:00:40.480 align:start position:0%
value in the array is distinct so let's
 

00:00:40.480 --> 00:00:42.069 align:start position:0%
value in the array is distinct so let's
take<00:00:40.640><c> a</c><00:00:40.719><c> look</c><00:00:40.879><c> at</c><00:00:41.040><c> an</c><00:00:41.120><c> example</c><00:00:41.520><c> we</c><00:00:41.680><c> have</c><00:00:41.840><c> one</c>

00:00:42.069 --> 00:00:42.079 align:start position:0%
take a look at an example we have one
 

00:00:42.079 --> 00:00:45.590 align:start position:0%
take a look at an example we have one
two<00:00:42.399><c> three</c><00:00:43.040><c> and</c><00:00:43.200><c> then</c><00:00:43.440><c> we</c><00:00:43.600><c> have</c><00:00:44.000><c> 1</c><00:00:44.480><c> again</c><00:00:45.280><c> so</c><00:00:45.440><c> of</c>

00:00:45.590 --> 00:00:45.600 align:start position:0%
two three and then we have 1 again so of
 

00:00:45.600 --> 00:00:47.990 align:start position:0%
two three and then we have 1 again so of
course<00:00:46.000><c> this</c><00:00:46.239><c> has</c><00:00:46.480><c> duplicates</c><00:00:47.039><c> right</c><00:00:47.280><c> so</c><00:00:47.760><c> we</c>

00:00:47.990 --> 00:00:48.000 align:start position:0%
course this has duplicates right so we
 

00:00:48.000 --> 00:00:50.869 align:start position:0%
course this has duplicates right so we
return<00:00:48.559><c> true</c><00:00:49.360><c> and</c><00:00:49.760><c> the</c><00:00:49.920><c> easiest</c><00:00:50.399><c> way</c><00:00:50.559><c> we</c><00:00:50.719><c> would</c>

00:00:50.869 --> 00:00:50.879 align:start position:0%
return true and the easiest way we would
 

00:00:50.879 --> 00:00:53.830 align:start position:0%
return true and the easiest way we would
be<00:00:51.039><c> able</c><00:00:51.280><c> to</c><00:00:51.520><c> detect</c><00:00:52.079><c> that</c><00:00:52.719><c> is</c><00:00:53.120><c> by</c><00:00:53.520><c> brute</c>

00:00:53.830 --> 00:00:53.840 align:start position:0%
be able to detect that is by brute
 

00:00:53.840 --> 00:00:57.270 align:start position:0%
be able to detect that is by brute
forcing<00:00:54.239><c> this</c><00:00:54.559><c> so</c><00:00:55.039><c> given</c><00:00:55.600><c> these</c><00:00:56.160><c> numbers</c><00:00:57.120><c> the</c>

00:00:57.270 --> 00:00:57.280 align:start position:0%
forcing this so given these numbers the
 

00:00:57.280 --> 00:00:59.349 align:start position:0%
forcing this so given these numbers the
first<00:00:57.520><c> thing</c><00:00:57.680><c> we</c><00:00:57.840><c> do</c><00:00:58.079><c> is</c><00:00:58.320><c> look</c><00:00:58.480><c> at</c><00:00:58.640><c> the</c><00:00:58.800><c> first</c>

00:00:59.349 --> 00:00:59.359 align:start position:0%
first thing we do is look at the first
 

00:00:59.359 --> 00:01:01.750 align:start position:0%
first thing we do is look at the first
number<00:00:59.840><c> it's</c><00:01:00.239><c> 1.</c><00:01:00.640><c> how</c><00:01:00.800><c> do</c><00:01:00.960><c> we</c><00:01:01.120><c> know</c><00:01:01.280><c> if</c><00:01:01.440><c> this</c><00:01:01.680><c> is</c>

00:01:01.750 --> 00:01:01.760 align:start position:0%
number it's 1. how do we know if this is
 

00:01:01.760 --> 00:01:03.910 align:start position:0%
number it's 1. how do we know if this is
a<00:01:01.920><c> duplicate</c><00:01:02.480><c> or</c><00:01:02.800><c> not</c><00:01:03.199><c> well</c><00:01:03.440><c> we'd</c><00:01:03.680><c> have</c><00:01:03.840><c> to</c>

00:01:03.910 --> 00:01:03.920 align:start position:0%
a duplicate or not well we'd have to
 

00:01:03.920 --> 00:01:07.510 align:start position:0%
a duplicate or not well we'd have to
compare<00:01:04.400><c> it</c><00:01:04.479><c> to</c><00:01:04.799><c> every</c><00:01:05.360><c> single</c><00:01:05.920><c> number</c><00:01:06.640><c> in</c><00:01:07.200><c> the</c>

00:01:07.510 --> 00:01:07.520 align:start position:0%
compare it to every single number in the
 

00:01:07.520 --> 00:01:10.630 align:start position:0%
compare it to every single number in the
rest<00:01:07.920><c> of</c><00:01:08.159><c> the</c><00:01:08.320><c> array</c><00:01:08.799><c> so</c><00:01:09.040><c> that</c><00:01:09.280><c> would</c><00:01:09.520><c> be</c><00:01:10.159><c> a</c><00:01:10.400><c> big</c>

00:01:10.630 --> 00:01:10.640 align:start position:0%
rest of the array so that would be a big
 

00:01:10.640 --> 00:01:13.429 align:start position:0%
rest of the array so that would be a big
o<00:01:10.960><c> of</c><00:01:11.280><c> n</c><00:01:11.680><c> time</c><00:01:12.000><c> operation</c><00:01:12.640><c> just</c><00:01:12.880><c> to</c><00:01:13.040><c> check</c><00:01:13.280><c> if</c>

00:01:13.429 --> 00:01:13.439 align:start position:0%
o of n time operation just to check if
 

00:01:13.439 --> 00:01:16.070 align:start position:0%
o of n time operation just to check if
the<00:01:13.760><c> first</c><00:01:14.159><c> number</c><00:01:14.560><c> is</c><00:01:14.720><c> a</c><00:01:14.799><c> duplicate</c><00:01:15.439><c> or</c><00:01:15.680><c> not</c>

00:01:16.070 --> 00:01:16.080 align:start position:0%
the first number is a duplicate or not
 

00:01:16.080 --> 00:01:17.910 align:start position:0%
the first number is a duplicate or not
and<00:01:16.240><c> then</c><00:01:16.479><c> we'd</c><00:01:16.720><c> have</c><00:01:16.799><c> to</c><00:01:16.960><c> do</c><00:01:17.119><c> that</c><00:01:17.280><c> for</c><00:01:17.600><c> every</c>

00:01:17.910 --> 00:01:17.920 align:start position:0%
and then we'd have to do that for every
 

00:01:17.920 --> 00:01:19.670 align:start position:0%
and then we'd have to do that for every
number<00:01:18.400><c> then</c><00:01:18.560><c> we</c><00:01:18.720><c> have</c><00:01:18.799><c> to</c><00:01:18.960><c> check</c><00:01:19.360><c> is</c><00:01:19.520><c> the</c>

00:01:19.670 --> 00:01:19.680 align:start position:0%
number then we have to check is the
 

00:01:19.680 --> 00:01:21.429 align:start position:0%
number then we have to check is the
second<00:01:20.000><c> number</c><00:01:20.240><c> a</c><00:01:20.320><c> duplicate</c><00:01:20.880><c> how</c><00:01:21.040><c> do</c><00:01:21.119><c> we</c><00:01:21.280><c> know</c>

00:01:21.429 --> 00:01:21.439 align:start position:0%
second number a duplicate how do we know
 

00:01:21.439 --> 00:01:23.429 align:start position:0%
second number a duplicate how do we know
we<00:01:21.600><c> have</c><00:01:21.680><c> to</c><00:01:21.840><c> compare</c><00:01:22.240><c> it</c><00:01:22.560><c> to</c><00:01:22.799><c> every</c><00:01:23.119><c> other</c>

00:01:23.429 --> 00:01:23.439 align:start position:0%
we have to compare it to every other
 

00:01:23.439 --> 00:01:25.429 align:start position:0%
we have to compare it to every other
number<00:01:24.240><c> we</c><00:01:24.400><c> do</c><00:01:24.640><c> the</c><00:01:24.720><c> same</c><00:01:24.960><c> thing</c><00:01:25.119><c> with</c><00:01:25.280><c> the</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
number we do the same thing with the
 

00:01:25.439 --> 00:01:28.789 align:start position:0%
number we do the same thing with the
third<00:01:25.680><c> one</c><00:01:26.159><c> and</c><00:01:26.560><c> the</c><00:01:26.799><c> last</c><00:01:27.119><c> one</c><00:01:27.840><c> and</c><00:01:28.400><c> so</c><00:01:28.560><c> since</c>

00:01:28.789 --> 00:01:28.799 align:start position:0%
third one and the last one and so since
 

00:01:28.799 --> 00:01:30.390 align:start position:0%
third one and the last one and so since
we're<00:01:28.960><c> doing</c><00:01:29.200><c> it</c><00:01:29.280><c> for</c><00:01:29.520><c> every</c><00:01:29.759><c> number</c><00:01:30.079><c> in</c><00:01:30.240><c> the</c>

00:01:30.390 --> 00:01:30.400 align:start position:0%
we're doing it for every number in the
 

00:01:30.400 --> 00:01:31.990 align:start position:0%
we're doing it for every number in the
array<00:01:30.640><c> the</c><00:01:30.799><c> overall</c><00:01:31.119><c> time</c><00:01:31.360><c> complexity</c><00:01:31.920><c> is</c>

00:01:31.990 --> 00:01:32.000 align:start position:0%
array the overall time complexity is
 

00:01:32.000 --> 00:01:34.550 align:start position:0%
array the overall time complexity is
going<00:01:32.159><c> to</c><00:01:32.240><c> become</c><00:01:32.799><c> n</c><00:01:33.200><c> squared</c><00:01:33.840><c> and</c><00:01:34.079><c> by</c><00:01:34.240><c> the</c><00:01:34.320><c> way</c>

00:01:34.550 --> 00:01:34.560 align:start position:0%
going to become n squared and by the way
 

00:01:34.560 --> 00:01:37.830 align:start position:0%
going to become n squared and by the way
in<00:01:34.640><c> this</c><00:01:34.880><c> case</c><00:01:35.280><c> n</c><00:01:35.680><c> is</c><00:01:35.920><c> just</c><00:01:36.240><c> the</c><00:01:36.560><c> size</c><00:01:37.119><c> of</c><00:01:37.520><c> the</c>

00:01:37.830 --> 00:01:37.840 align:start position:0%
in this case n is just the size of the
 

00:01:37.840 --> 00:01:40.469 align:start position:0%
in this case n is just the size of the
input<00:01:38.320><c> array</c><00:01:39.119><c> so</c><00:01:39.280><c> the</c><00:01:39.360><c> brute</c><00:01:39.680><c> force</c><00:01:39.920><c> solution</c>

00:01:40.469 --> 00:01:40.479 align:start position:0%
input array so the brute force solution
 

00:01:40.479 --> 00:01:43.350 align:start position:0%
input array so the brute force solution
is<00:01:40.640><c> big</c><00:01:40.880><c> o</c><00:01:41.200><c> n</c><00:01:41.520><c> squared</c><00:01:42.079><c> time</c><00:01:42.320><c> complexity</c><00:01:43.119><c> but</c>

00:01:43.350 --> 00:01:43.360 align:start position:0%
is big o n squared time complexity but
 

00:01:43.360 --> 00:01:44.789 align:start position:0%
is big o n squared time complexity but
the<00:01:43.520><c> good</c><00:01:43.680><c> thing</c><00:01:43.840><c> is</c><00:01:44.000><c> we</c><00:01:44.159><c> don't</c><00:01:44.240><c> need</c><00:01:44.560><c> any</c>

00:01:44.789 --> 00:01:44.799 align:start position:0%
the good thing is we don't need any
 

00:01:44.799 --> 00:01:47.350 align:start position:0%
the good thing is we don't need any
extra<00:01:45.280><c> memory</c><00:01:45.680><c> so</c><00:01:45.920><c> the</c><00:01:46.079><c> memory</c><00:01:46.320><c> complexity</c><00:01:47.040><c> is</c>

00:01:47.350 --> 00:01:47.360 align:start position:0%
extra memory so the memory complexity is
 

00:01:47.360 --> 00:01:50.149 align:start position:0%
extra memory so the memory complexity is
big<00:01:47.600><c> of</c><00:01:47.920><c> one</c><00:01:48.560><c> it's</c><00:01:48.799><c> definitely</c><00:01:49.439><c> not</c><00:01:49.680><c> a</c><00:01:49.840><c> bad</c>

00:01:50.149 --> 00:01:50.159 align:start position:0%
big of one it's definitely not a bad
 

00:01:50.159 --> 00:01:52.550 align:start position:0%
big of one it's definitely not a bad
solution<00:01:50.640><c> but</c><00:01:50.799><c> the</c><00:01:50.960><c> question</c><00:01:51.360><c> is</c><00:01:51.759><c> can</c><00:01:52.159><c> we</c><00:01:52.320><c> do</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
solution but the question is can we do
 

00:01:52.560 --> 00:01:54.630 align:start position:0%
solution but the question is can we do
better<00:01:52.880><c> than</c><00:01:53.040><c> that</c><00:01:53.439><c> and</c><00:01:53.600><c> yes</c><00:01:53.920><c> we</c><00:01:54.079><c> definitely</c>

00:01:54.630 --> 00:01:54.640 align:start position:0%
better than that and yes we definitely
 

00:01:54.640 --> 00:01:57.510 align:start position:0%
better than that and yes we definitely
can<00:01:55.280><c> a</c><00:01:55.520><c> second</c><00:01:55.920><c> approach</c><00:01:56.640><c> that</c><00:01:56.799><c> will</c><00:01:56.960><c> help</c><00:01:57.280><c> us</c>

00:01:57.510 --> 00:01:57.520 align:start position:0%
can a second approach that will help us
 

00:01:57.520 --> 00:02:00.230 align:start position:0%
can a second approach that will help us
is<00:01:58.079><c> sorting</c><00:01:58.799><c> what</c><00:01:59.040><c> happens</c><00:01:59.439><c> if</c><00:01:59.520><c> we</c><00:01:59.680><c> took</c><00:01:59.920><c> this</c>

00:02:00.230 --> 00:02:00.240 align:start position:0%
is sorting what happens if we took this
 

00:02:00.240 --> 00:02:02.389 align:start position:0%
is sorting what happens if we took this
array<00:02:00.640><c> and</c><00:02:00.719><c> we</c><00:02:00.960><c> sorted</c><00:02:01.439><c> it</c><00:02:01.680><c> it</c><00:02:01.840><c> would</c><00:02:02.000><c> look</c><00:02:02.320><c> a</c>

00:02:02.389 --> 00:02:02.399 align:start position:0%
array and we sorted it it would look a
 

00:02:02.399 --> 00:02:04.230 align:start position:0%
array and we sorted it it would look a
little<00:02:02.640><c> bit</c><00:02:02.799><c> different</c><00:02:03.200><c> it</c><00:02:03.280><c> would</c><00:02:03.520><c> look</c><00:02:03.759><c> like</c>

00:02:04.230 --> 00:02:04.240 align:start position:0%
little bit different it would look like
 

00:02:04.240 --> 00:02:07.670 align:start position:0%
little bit different it would look like
this<00:02:05.040><c> okay</c><00:02:05.600><c> but</c><00:02:05.840><c> how</c><00:02:06.079><c> does</c><00:02:06.320><c> sorting</c><00:02:06.960><c> help</c><00:02:07.280><c> us</c>

00:02:07.670 --> 00:02:07.680 align:start position:0%
this okay but how does sorting help us
 

00:02:07.680 --> 00:02:10.630 align:start position:0%
this okay but how does sorting help us
well<00:02:08.000><c> let's</c><00:02:08.239><c> think</c><00:02:08.479><c> about</c><00:02:08.800><c> it</c><00:02:09.280><c> if</c><00:02:09.520><c> we</c><00:02:09.759><c> sort</c><00:02:10.399><c> the</c>

00:02:10.630 --> 00:02:10.640 align:start position:0%
well let's think about it if we sort the
 

00:02:10.640 --> 00:02:13.750 align:start position:0%
well let's think about it if we sort the
input<00:02:11.280><c> then</c><00:02:11.680><c> any</c><00:02:12.000><c> duplicates</c><00:02:12.640><c> that</c><00:02:12.959><c> do</c><00:02:13.280><c> exist</c>

00:02:13.750 --> 00:02:13.760 align:start position:0%
input then any duplicates that do exist
 

00:02:13.760 --> 00:02:15.910 align:start position:0%
input then any duplicates that do exist
in<00:02:13.840><c> the</c><00:02:14.000><c> array</c><00:02:14.480><c> and</c><00:02:14.720><c> clearly</c><00:02:15.040><c> we</c><00:02:15.280><c> see</c><00:02:15.440><c> that</c><00:02:15.680><c> two</c>

00:02:15.910 --> 00:02:15.920 align:start position:0%
in the array and clearly we see that two
 

00:02:15.920 --> 00:02:17.589 align:start position:0%
in the array and clearly we see that two
duplicates<00:02:16.480><c> exist</c><00:02:16.879><c> at</c><00:02:16.959><c> the</c><00:02:17.040><c> beginning</c><00:02:17.360><c> of</c><00:02:17.520><c> the</c>

00:02:17.589 --> 00:02:17.599 align:start position:0%
duplicates exist at the beginning of the
 

00:02:17.599 --> 00:02:19.990 align:start position:0%
duplicates exist at the beginning of the
array<00:02:18.080><c> they're</c><00:02:18.319><c> going</c><00:02:18.480><c> to</c><00:02:18.560><c> be</c><00:02:18.879><c> adjacent</c><00:02:19.840><c> so</c>

00:02:19.990 --> 00:02:20.000 align:start position:0%
array they're going to be adjacent so
 

00:02:20.000 --> 00:02:21.030 align:start position:0%
array they're going to be adjacent so
when<00:02:20.239><c> we're</c>

00:02:21.030 --> 00:02:21.040 align:start position:0%
when we're
 

00:02:21.040 --> 00:02:23.270 align:start position:0%
when we're
trying<00:02:21.280><c> to</c><00:02:21.440><c> detect</c><00:02:22.080><c> any</c><00:02:22.319><c> duplicates</c><00:02:22.959><c> in</c><00:02:23.040><c> here</c>

00:02:23.270 --> 00:02:23.280 align:start position:0%
trying to detect any duplicates in here
 

00:02:23.280 --> 00:02:24.949 align:start position:0%
trying to detect any duplicates in here
we<00:02:23.520><c> only</c><00:02:23.760><c> have</c><00:02:23.920><c> to</c><00:02:24.080><c> iterate</c><00:02:24.560><c> through</c><00:02:24.720><c> the</c>

00:02:24.949 --> 00:02:24.959 align:start position:0%
we only have to iterate through the
 

00:02:24.959 --> 00:02:27.510 align:start position:0%
we only have to iterate through the
array<00:02:25.520><c> once</c><00:02:26.160><c> and</c><00:02:26.560><c> as</c><00:02:26.720><c> we</c><00:02:26.879><c> do</c><00:02:27.040><c> that</c><00:02:27.200><c> we're</c><00:02:27.360><c> just</c>

00:02:27.510 --> 00:02:27.520 align:start position:0%
array once and as we do that we're just
 

00:02:27.520 --> 00:02:30.790 align:start position:0%
array once and as we do that we're just
going<00:02:27.599><c> to</c><00:02:27.680><c> be</c><00:02:27.840><c> comparing</c><00:02:28.879><c> two</c><00:02:29.520><c> neighbors</c><00:02:30.400><c> in</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
going to be comparing two neighbors in
 

00:02:30.800 --> 00:02:33.350 align:start position:0%
going to be comparing two neighbors in
the<00:02:31.360><c> array</c><00:02:31.920><c> checking</c><00:02:32.319><c> if</c><00:02:32.400><c> they're</c><00:02:32.560><c> duplicates</c>

00:02:33.350 --> 00:02:33.360 align:start position:0%
the array checking if they're duplicates
 

00:02:33.360 --> 00:02:35.270 align:start position:0%
the array checking if they're duplicates
next<00:02:33.840><c> we're</c><00:02:34.000><c> going</c><00:02:34.080><c> to</c><00:02:34.239><c> shift</c><00:02:34.560><c> our</c><00:02:34.720><c> pointers</c>

00:02:35.270 --> 00:02:35.280 align:start position:0%
next we're going to shift our pointers
 

00:02:35.280 --> 00:02:37.589 align:start position:0%
next we're going to shift our pointers
to<00:02:35.440><c> the</c><00:02:35.519><c> next</c><00:02:35.760><c> spot</c><00:02:36.239><c> are</c><00:02:36.480><c> these</c><00:02:36.720><c> duplicates</c>

00:02:37.589 --> 00:02:37.599 align:start position:0%
to the next spot are these duplicates
 

00:02:37.599 --> 00:02:39.990 align:start position:0%
to the next spot are these duplicates
are<00:02:37.760><c> these</c><00:02:38.080><c> duplicates</c><00:02:38.720><c> etc</c><00:02:39.200><c> etc</c><00:02:39.599><c> until</c><00:02:39.840><c> we</c>

00:02:39.990 --> 00:02:40.000 align:start position:0%
are these duplicates etc etc until we
 

00:02:40.000 --> 00:02:41.830 align:start position:0%
are these duplicates etc etc until we
finish<00:02:40.239><c> the</c><00:02:40.400><c> entire</c><00:02:40.800><c> array</c><00:02:41.120><c> in</c><00:02:41.200><c> this</c><00:02:41.360><c> case</c><00:02:41.680><c> we</c>

00:02:41.830 --> 00:02:41.840 align:start position:0%
finish the entire array in this case we
 

00:02:41.840 --> 00:02:43.910 align:start position:0%
finish the entire array in this case we
see<00:02:42.000><c> that</c><00:02:42.239><c> these</c><00:02:42.480><c> two</c><00:02:42.720><c> adjacent</c><00:02:43.200><c> values</c><00:02:43.760><c> are</c>

00:02:43.910 --> 00:02:43.920 align:start position:0%
see that these two adjacent values are
 

00:02:43.920 --> 00:02:46.949 align:start position:0%
see that these two adjacent values are
duplicates<00:02:44.879><c> so</c><00:02:45.440><c> we</c><00:02:45.599><c> can</c><00:02:45.760><c> return</c><00:02:46.239><c> true</c><00:02:46.800><c> and</c>

00:02:46.949 --> 00:02:46.959 align:start position:0%
duplicates so we can return true and
 

00:02:46.959 --> 00:02:48.869 align:start position:0%
duplicates so we can return true and
what's<00:02:47.200><c> the</c><00:02:47.280><c> time</c><00:02:47.519><c> complexity</c><00:02:48.080><c> of</c><00:02:48.160><c> this</c><00:02:48.480><c> well</c>

00:02:48.869 --> 00:02:48.879 align:start position:0%
what's the time complexity of this well
 

00:02:48.879 --> 00:02:50.869 align:start position:0%
what's the time complexity of this well
the<00:02:49.120><c> one</c><00:02:49.440><c> pass</c><00:02:49.840><c> is</c><00:02:49.920><c> just</c><00:02:50.160><c> going</c><00:02:50.239><c> to</c><00:02:50.319><c> be</c><00:02:50.480><c> big</c><00:02:50.720><c> o</c>

00:02:50.869 --> 00:02:50.879 align:start position:0%
the one pass is just going to be big o
 

00:02:50.879 --> 00:02:53.190 align:start position:0%
the one pass is just going to be big o
of<00:02:51.040><c> n</c><00:02:51.280><c> but</c><00:02:51.519><c> we</c><00:02:51.680><c> know</c><00:02:51.840><c> that</c><00:02:52.080><c> sorting</c><00:02:52.640><c> does</c><00:02:52.959><c> take</c>

00:02:53.190 --> 00:02:53.200 align:start position:0%
of n but we know that sorting does take
 

00:02:53.200 --> 00:02:55.509 align:start position:0%
of n but we know that sorting does take
extra<00:02:53.599><c> memory</c><00:02:54.160><c> or</c><00:02:54.319><c> not</c><00:02:54.560><c> extra</c><00:02:54.800><c> memory</c><00:02:55.120><c> it</c><00:02:55.200><c> does</c>

00:02:55.509 --> 00:02:55.519 align:start position:0%
extra memory or not extra memory it does
 

00:02:55.519 --> 00:02:57.509 align:start position:0%
extra memory or not extra memory it does
take<00:02:56.000><c> uh</c><00:02:56.239><c> extra</c><00:02:56.560><c> time</c><00:02:56.800><c> complexity</c><00:02:57.280><c> and</c><00:02:57.360><c> that</c>

00:02:57.509 --> 00:02:57.519 align:start position:0%
take uh extra time complexity and that
 

00:02:57.519 --> 00:03:00.470 align:start position:0%
take uh extra time complexity and that
time<00:02:57.680><c> complexity</c><00:02:58.239><c> is</c><00:02:58.480><c> n</c><00:02:59.120><c> log</c><00:02:59.680><c> n</c><00:02:59.920><c> so</c><00:03:00.080><c> that's</c><00:03:00.319><c> the</c>

00:03:00.470 --> 00:03:00.480 align:start position:0%
time complexity is n log n so that's the
 

00:03:00.480 --> 00:03:03.190 align:start position:0%
time complexity is n log n so that's the
bottleneck<00:03:01.120><c> in</c><00:03:01.280><c> this</c><00:03:01.440><c> solution</c><00:03:02.159><c> but</c><00:03:02.480><c> again</c><00:03:02.879><c> we</c>

00:03:03.190 --> 00:03:03.200 align:start position:0%
bottleneck in this solution but again we
 

00:03:03.200 --> 00:03:05.430 align:start position:0%
bottleneck in this solution but again we
don't<00:03:03.519><c> need</c><00:03:03.920><c> extra</c><00:03:04.400><c> space</c><00:03:04.879><c> if</c><00:03:05.040><c> you</c><00:03:05.200><c> don't</c>

00:03:05.430 --> 00:03:05.440 align:start position:0%
don't need extra space if you don't
 

00:03:05.440 --> 00:03:07.589 align:start position:0%
don't need extra space if you don't
count<00:03:05.920><c> the</c><00:03:06.080><c> space</c><00:03:06.480><c> that's</c><00:03:06.800><c> used</c><00:03:07.200><c> by</c><00:03:07.360><c> the</c>

00:03:07.589 --> 00:03:07.599 align:start position:0%
count the space that's used by the
 

00:03:07.599 --> 00:03:10.869 align:start position:0%
count the space that's used by the
sorting<00:03:08.000><c> algorithm</c><00:03:08.879><c> so</c><00:03:09.519><c> in</c><00:03:09.680><c> this</c><00:03:09.920><c> case</c><00:03:10.400><c> we</c><00:03:10.640><c> do</c>

00:03:10.869 --> 00:03:10.879 align:start position:0%
sorting algorithm so in this case we do
 

00:03:10.879 --> 00:03:13.110 align:start position:0%
sorting algorithm so in this case we do
have<00:03:11.120><c> a</c><00:03:11.280><c> slightly</c><00:03:11.760><c> better</c><00:03:12.080><c> solution</c><00:03:12.800><c> than</c>

00:03:13.110 --> 00:03:13.120 align:start position:0%
have a slightly better solution than
 

00:03:13.120 --> 00:03:16.470 align:start position:0%
have a slightly better solution than
brute<00:03:13.599><c> force</c><00:03:14.080><c> but</c><00:03:14.319><c> actually</c><00:03:15.040><c> if</c><00:03:15.599><c> we</c><00:03:16.000><c> use</c><00:03:16.319><c> a</c>

00:03:16.470 --> 00:03:16.480 align:start position:0%
brute force but actually if we use a
 

00:03:16.480 --> 00:03:18.470 align:start position:0%
brute force but actually if we use a
little<00:03:16.720><c> bit</c><00:03:16.959><c> extra</c><00:03:17.280><c> memory</c><00:03:17.760><c> and</c><00:03:18.000><c> it's</c><00:03:18.239><c> really</c>

00:03:18.470 --> 00:03:18.480 align:start position:0%
little bit extra memory and it's really
 

00:03:18.480 --> 00:03:21.190 align:start position:0%
little bit extra memory and it's really
a<00:03:18.640><c> trade-off</c><00:03:19.519><c> if</c><00:03:19.680><c> we</c><00:03:20.159><c> sacrifice</c><00:03:20.879><c> space</c>

00:03:21.190 --> 00:03:21.200 align:start position:0%
a trade-off if we sacrifice space
 

00:03:21.200 --> 00:03:23.589 align:start position:0%
a trade-off if we sacrifice space
complexity<00:03:22.000><c> we</c><00:03:22.159><c> can</c><00:03:22.480><c> actually</c><00:03:22.959><c> achieve</c>

00:03:23.589 --> 00:03:23.599 align:start position:0%
complexity we can actually achieve
 

00:03:23.599 --> 00:03:25.589 align:start position:0%
complexity we can actually achieve
better<00:03:24.000><c> memory</c><00:03:24.319><c> complexity</c><00:03:24.879><c> and</c><00:03:25.040><c> let</c><00:03:25.200><c> me</c><00:03:25.440><c> show</c>

00:03:25.589 --> 00:03:25.599 align:start position:0%
better memory complexity and let me show
 

00:03:25.599 --> 00:03:28.309 align:start position:0%
better memory complexity and let me show
you<00:03:25.840><c> how</c><00:03:26.480><c> so</c><00:03:26.720><c> suppose</c><00:03:27.120><c> we</c><00:03:27.440><c> don't</c><00:03:27.760><c> sort</c><00:03:28.080><c> our</c>

00:03:28.309 --> 00:03:28.319 align:start position:0%
you how so suppose we don't sort our
 

00:03:28.319 --> 00:03:30.949 align:start position:0%
you how so suppose we don't sort our
input<00:03:28.640><c> we're</c><00:03:28.799><c> given</c><00:03:29.040><c> the</c><00:03:29.200><c> default</c><00:03:29.760><c> input</c><00:03:30.720><c> but</c>

00:03:30.949 --> 00:03:30.959 align:start position:0%
input we're given the default input but
 

00:03:30.959 --> 00:03:34.710 align:start position:0%
input we're given the default input but
we<00:03:31.280><c> use</c><00:03:31.680><c> extra</c><00:03:32.239><c> memory</c><00:03:32.879><c> we</c><00:03:33.200><c> use</c><00:03:33.519><c> a</c><00:03:33.760><c> hash</c><00:03:34.159><c> set</c>

00:03:34.710 --> 00:03:34.720 align:start position:0%
we use extra memory we use a hash set
 

00:03:34.720 --> 00:03:37.270 align:start position:0%
we use extra memory we use a hash set
but<00:03:34.959><c> what</c><00:03:35.200><c> exactly</c><00:03:35.760><c> is</c><00:03:35.920><c> a</c><00:03:36.000><c> hash</c><00:03:36.400><c> set</c><00:03:36.640><c> gonna</c><00:03:37.040><c> do</c>

00:03:37.270 --> 00:03:37.280 align:start position:0%
but what exactly is a hash set gonna do
 

00:03:37.280 --> 00:03:40.149 align:start position:0%
but what exactly is a hash set gonna do
for<00:03:37.519><c> us</c><00:03:37.840><c> it's</c><00:03:38.080><c> gonna</c><00:03:38.319><c> allow</c><00:03:38.720><c> us</c><00:03:39.040><c> to</c><00:03:39.440><c> insert</c>

00:03:40.149 --> 00:03:40.159 align:start position:0%
for us it's gonna allow us to insert
 

00:03:40.159 --> 00:03:42.789 align:start position:0%
for us it's gonna allow us to insert
elements<00:03:40.799><c> into</c><00:03:41.040><c> the</c><00:03:41.200><c> hash</c><00:03:41.519><c> set</c><00:03:41.760><c> in</c><00:03:42.000><c> big</c><00:03:42.319><c> o</c><00:03:42.560><c> of</c>

00:03:42.789 --> 00:03:42.799 align:start position:0%
elements into the hash set in big o of
 

00:03:42.799 --> 00:03:45.670 align:start position:0%
elements into the hash set in big o of
one<00:03:43.120><c> time</c><00:03:43.519><c> but</c><00:03:43.680><c> it's</c><00:03:44.000><c> also</c><00:03:44.319><c> gonna</c><00:03:44.640><c> allow</c><00:03:45.040><c> us</c><00:03:45.440><c> to</c>

00:03:45.670 --> 00:03:45.680 align:start position:0%
one time but it's also gonna allow us to
 

00:03:45.680 --> 00:03:48.949 align:start position:0%
one time but it's also gonna allow us to
check<00:03:46.239><c> we</c><00:03:46.319><c> can</c><00:03:46.640><c> ask</c><00:03:47.040><c> our</c><00:03:47.200><c> hashmap</c><00:03:48.080><c> does</c><00:03:48.640><c> a</c>

00:03:48.949 --> 00:03:48.959 align:start position:0%
check we can ask our hashmap does a
 

00:03:48.959 --> 00:03:51.830 align:start position:0%
check we can ask our hashmap does a
certain<00:03:49.360><c> value</c><00:03:49.840><c> exist</c><00:03:50.400><c> we</c><00:03:50.560><c> want</c><00:03:50.799><c> to</c><00:03:50.959><c> know</c><00:03:51.519><c> does</c>

00:03:51.830 --> 00:03:51.840 align:start position:0%
certain value exist we want to know does
 

00:03:51.840 --> 00:03:54.309 align:start position:0%
certain value exist we want to know does
this<00:03:52.159><c> 1</c><00:03:52.640><c> exist</c><00:03:53.120><c> in</c><00:03:53.200><c> the</c><00:03:53.360><c> hashmap</c><00:03:53.840><c> well</c><00:03:54.000><c> if</c><00:03:54.159><c> we</c>

00:03:54.309 --> 00:03:54.319 align:start position:0%
this 1 exist in the hashmap well if we
 

00:03:54.319 --> 00:03:56.149 align:start position:0%
this 1 exist in the hashmap well if we
start<00:03:54.640><c> at</c><00:03:54.720><c> the</c><00:03:54.879><c> beginning</c><00:03:55.200><c> of</c><00:03:55.280><c> the</c><00:03:55.439><c> array</c><00:03:55.840><c> so</c>

00:03:56.149 --> 00:03:56.159 align:start position:0%
start at the beginning of the array so
 

00:03:56.159 --> 00:03:58.789 align:start position:0%
start at the beginning of the array so
far<00:03:56.720><c> nothing</c><00:03:57.120><c> is</c><00:03:57.200><c> in</c><00:03:57.360><c> our</c><00:03:57.519><c> hashmap</c><00:03:58.080><c> so</c><00:03:58.319><c> a</c><00:03:58.480><c> 1</c>

00:03:58.789 --> 00:03:58.799 align:start position:0%
far nothing is in our hashmap so a 1
 

00:03:58.799 --> 00:04:00.789 align:start position:0%
far nothing is in our hashmap so a 1
does<00:03:59.040><c> not</c><00:03:59.280><c> exist</c><00:03:59.599><c> in</c><00:03:59.680><c> our</c><00:03:59.840><c> hashmap</c><00:04:00.400><c> that</c><00:04:00.560><c> means</c>

00:04:00.789 --> 00:04:00.799 align:start position:0%
does not exist in our hashmap that means
 

00:04:00.799 --> 00:04:03.509 align:start position:0%
does not exist in our hashmap that means
this<00:04:01.120><c> 1</c><00:04:01.439><c> is</c><00:04:01.680><c> not</c><00:04:01.920><c> a</c><00:04:02.080><c> duplicate</c><00:04:03.040><c> you</c><00:04:03.200><c> can</c><00:04:03.360><c> see</c>

00:04:03.509 --> 00:04:03.519 align:start position:0%
this 1 is not a duplicate you can see
 

00:04:03.519 --> 00:04:05.990 align:start position:0%
this 1 is not a duplicate you can see
that<00:04:03.760><c> this</c><00:04:03.920><c> is</c><00:04:04.080><c> an</c><00:04:04.239><c> improvement</c><00:04:04.959><c> over</c><00:04:05.599><c> the</c>

00:04:05.990 --> 00:04:06.000 align:start position:0%
that this is an improvement over the
 

00:04:06.000 --> 00:04:08.710 align:start position:0%
that this is an improvement over the
brute<00:04:06.400><c> force</c><00:04:06.959><c> previously</c><00:04:08.000><c> to</c><00:04:08.159><c> determine</c><00:04:08.640><c> if</c>

00:04:08.710 --> 00:04:08.720 align:start position:0%
brute force previously to determine if
 

00:04:08.720 --> 00:04:10.390 align:start position:0%
brute force previously to determine if
this<00:04:08.879><c> was</c><00:04:09.040><c> a</c><00:04:09.120><c> duplicate</c><00:04:09.599><c> we</c><00:04:09.760><c> had</c><00:04:09.920><c> to</c><00:04:10.080><c> check</c>

00:04:10.390 --> 00:04:10.400 align:start position:0%
this was a duplicate we had to check
 

00:04:10.400 --> 00:04:12.789 align:start position:0%
this was a duplicate we had to check
every<00:04:10.799><c> other</c><00:04:11.040><c> value</c><00:04:11.519><c> in</c><00:04:11.680><c> the</c><00:04:11.840><c> array</c><00:04:12.319><c> this</c><00:04:12.560><c> time</c>

00:04:12.789 --> 00:04:12.799 align:start position:0%
every other value in the array this time
 

00:04:12.799 --> 00:04:14.949 align:start position:0%
every other value in the array this time
we<00:04:13.040><c> don't</c><00:04:13.519><c> but</c><00:04:13.760><c> after</c><00:04:14.080><c> we</c><00:04:14.319><c> have</c><00:04:14.480><c> checked</c><00:04:14.799><c> if</c>

00:04:14.949 --> 00:04:14.959 align:start position:0%
we don't but after we have checked if
 

00:04:14.959 --> 00:04:17.189 align:start position:0%
we don't but after we have checked if
this<00:04:15.120><c> is</c><00:04:15.200><c> a</c><00:04:15.280><c> duplicate</c><00:04:15.840><c> we</c><00:04:16.079><c> do</c><00:04:16.320><c> have</c><00:04:16.560><c> to</c><00:04:16.799><c> add</c><00:04:17.040><c> it</c>

00:04:17.189 --> 00:04:17.199 align:start position:0%
this is a duplicate we do have to add it
 

00:04:17.199 --> 00:04:19.749 align:start position:0%
this is a duplicate we do have to add it
to<00:04:17.359><c> our</c><00:04:17.519><c> hash</c><00:04:17.840><c> set</c><00:04:18.079><c> because</c><00:04:18.639><c> later</c><00:04:19.040><c> on</c><00:04:19.440><c> if</c><00:04:19.600><c> we</c>

00:04:19.749 --> 00:04:19.759 align:start position:0%
to our hash set because later on if we
 

00:04:19.759 --> 00:04:22.230 align:start position:0%
to our hash set because later on if we
encounter<00:04:20.320><c> a</c><00:04:20.479><c> one</c><00:04:20.880><c> like</c><00:04:21.120><c> over</c><00:04:21.440><c> here</c><00:04:21.919><c> then</c><00:04:22.079><c> we</c>

00:04:22.230 --> 00:04:22.240 align:start position:0%
encounter a one like over here then we
 

00:04:22.240 --> 00:04:24.310 align:start position:0%
encounter a one like over here then we
determine<00:04:22.720><c> that</c><00:04:22.880><c> this</c><00:04:23.120><c> is</c><00:04:23.360><c> a</c><00:04:23.440><c> duplicate</c>

00:04:24.310 --> 00:04:24.320 align:start position:0%
determine that this is a duplicate
 

00:04:24.320 --> 00:04:26.150 align:start position:0%
determine that this is a duplicate
because<00:04:24.720><c> we</c><00:04:24.880><c> know</c><00:04:25.040><c> that</c><00:04:25.199><c> there's</c><00:04:25.520><c> already</c><00:04:26.000><c> a</c>

00:04:26.150 --> 00:04:26.160 align:start position:0%
because we know that there's already a
 

00:04:26.160 --> 00:04:28.790 align:start position:0%
because we know that there's already a
one<00:04:26.560><c> in</c><00:04:26.720><c> our</c><00:04:26.880><c> hash</c><00:04:27.280><c> set</c><00:04:27.840><c> so</c><00:04:28.080><c> next</c><00:04:28.320><c> we're</c><00:04:28.479><c> gonna</c>

00:04:28.790 --> 00:04:28.800 align:start position:0%
one in our hash set so next we're gonna
 

00:04:28.800 --> 00:04:30.790 align:start position:0%
one in our hash set so next we're gonna
check<00:04:29.120><c> two</c><00:04:29.520><c> two</c><00:04:29.759><c> is</c><00:04:29.840><c> not</c><00:04:30.000><c> a</c><00:04:30.080><c> duplicate</c><00:04:30.560><c> added</c>

00:04:30.790 --> 00:04:30.800 align:start position:0%
check two two is not a duplicate added
 

00:04:30.800 --> 00:04:32.550 align:start position:0%
check two two is not a duplicate added
here<00:04:31.040><c> is</c><00:04:31.120><c> three</c><00:04:31.360><c> a</c><00:04:31.440><c> duplicate</c><00:04:31.919><c> nope</c><00:04:32.240><c> add</c><00:04:32.479><c> it</c>

00:04:32.550 --> 00:04:32.560 align:start position:0%
here is three a duplicate nope add it
 

00:04:32.560 --> 00:04:35.110 align:start position:0%
here is three a duplicate nope add it
here<00:04:33.120><c> one</c><00:04:33.680><c> is</c><00:04:33.840><c> this</c><00:04:34.000><c> a</c><00:04:34.080><c> duplicate</c><00:04:34.720><c> yep</c><00:04:34.960><c> there's</c>

00:04:35.110 --> 00:04:35.120 align:start position:0%
here one is this a duplicate yep there's
 

00:04:35.120 --> 00:04:38.390 align:start position:0%
here one is this a duplicate yep there's
a<00:04:35.199><c> one</c><00:04:35.440><c> over</c><00:04:35.680><c> here</c><00:04:36.240><c> so</c><00:04:36.800><c> we</c><00:04:37.040><c> return</c><00:04:37.440><c> true</c><00:04:38.080><c> this</c>

00:04:38.390 --> 00:04:38.400 align:start position:0%
a one over here so we return true this
 

00:04:38.400 --> 00:04:41.430 align:start position:0%
a one over here so we return true this
does<00:04:38.720><c> contain</c><00:04:39.199><c> duplicates</c><00:04:40.240><c> and</c><00:04:40.479><c> by</c><00:04:40.639><c> the</c><00:04:40.800><c> way</c>

00:04:41.430 --> 00:04:41.440 align:start position:0%
does contain duplicates and by the way
 

00:04:41.440 --> 00:04:43.990 align:start position:0%
does contain duplicates and by the way
since<00:04:42.000><c> each</c><00:04:42.320><c> operation</c><00:04:42.880><c> was</c><00:04:43.199><c> just</c><00:04:43.440><c> big</c><00:04:43.680><c> o</c><00:04:43.840><c> of</c>

00:04:43.990 --> 00:04:44.000 align:start position:0%
since each operation was just big o of
 

00:04:44.000 --> 00:04:46.070 align:start position:0%
since each operation was just big o of
one<00:04:44.320><c> we</c><00:04:44.479><c> had</c><00:04:44.560><c> to</c><00:04:44.720><c> do</c><00:04:44.880><c> that</c><00:04:44.960><c> for</c><00:04:45.199><c> every</c><00:04:45.520><c> value</c><00:04:45.919><c> in</c>

00:04:46.070 --> 00:04:46.080 align:start position:0%
one we had to do that for every value in
 

00:04:46.080 --> 00:04:48.150 align:start position:0%
one we had to do that for every value in
the<00:04:46.320><c> input</c><00:04:46.720><c> array</c><00:04:46.960><c> and</c><00:04:47.120><c> we</c><00:04:47.280><c> only</c><00:04:47.520><c> had</c><00:04:47.680><c> to</c><00:04:47.759><c> scan</c>

00:04:48.150 --> 00:04:48.160 align:start position:0%
the input array and we only had to scan
 

00:04:48.160 --> 00:04:50.469 align:start position:0%
the input array and we only had to scan
through<00:04:48.400><c> the</c><00:04:48.560><c> list</c><00:04:48.800><c> of</c><00:04:48.960><c> inputs</c><00:04:49.520><c> once</c><00:04:50.080><c> the</c><00:04:50.240><c> time</c>

00:04:50.469 --> 00:04:50.479 align:start position:0%
through the list of inputs once the time
 

00:04:50.479 --> 00:04:53.430 align:start position:0%
through the list of inputs once the time
complexity<00:04:51.360><c> is</c><00:04:51.520><c> going</c><00:04:51.600><c> to</c><00:04:51.680><c> be</c><00:04:52.000><c> big</c><00:04:52.320><c> o</c><00:04:52.560><c> of</c><00:04:52.880><c> n</c><00:04:53.280><c> but</c>

00:04:53.430 --> 00:04:53.440 align:start position:0%
complexity is going to be big o of n but
 

00:04:53.440 --> 00:04:55.189 align:start position:0%
complexity is going to be big o of n but
the<00:04:53.520><c> space</c><00:04:53.840><c> complexity</c><00:04:54.560><c> we</c><00:04:54.720><c> did</c><00:04:54.880><c> have</c><00:04:55.040><c> to</c>

00:04:55.189 --> 00:04:55.199 align:start position:0%
the space complexity we did have to
 

00:04:55.199 --> 00:04:57.270 align:start position:0%
the space complexity we did have to
sacrifice<00:04:55.680><c> a</c><00:04:55.759><c> little</c><00:04:56.080><c> bit</c><00:04:56.400><c> we</c><00:04:56.639><c> have</c><00:04:56.800><c> to</c><00:04:56.960><c> create</c>

00:04:57.270 --> 00:04:57.280 align:start position:0%
sacrifice a little bit we have to create
 

00:04:57.280 --> 00:04:59.670 align:start position:0%
sacrifice a little bit we have to create
a<00:04:57.360><c> hash</c><00:04:57.680><c> set</c><00:04:58.080><c> and</c><00:04:58.240><c> the</c><00:04:58.639><c> memory</c><00:04:59.040><c> that</c><00:04:59.199><c> that</c><00:04:59.360><c> hash</c>

00:04:59.670 --> 00:04:59.680 align:start position:0%
a hash set and the memory that that hash
 

00:04:59.680 --> 00:05:02.629 align:start position:0%
a hash set and the memory that that hash
set<00:04:59.840><c> will</c><00:05:00.080><c> use</c><00:05:00.560><c> could</c><00:05:00.800><c> be</c><00:05:01.120><c> up</c><00:05:01.280><c> to</c><00:05:01.759><c> the</c><00:05:02.000><c> size</c><00:05:02.479><c> of</c>

00:05:02.629 --> 00:05:02.639 align:start position:0%
set will use could be up to the size of
 

00:05:02.639 --> 00:05:05.590 align:start position:0%
set will use could be up to the size of
the<00:05:02.960><c> input</c><00:05:03.280><c> array</c><00:05:03.600><c> which</c><00:05:03.759><c> is</c><00:05:04.000><c> n</c><00:05:04.479><c> so</c><00:05:04.720><c> we</c><00:05:04.960><c> do</c><00:05:05.440><c> end</c>

00:05:05.590 --> 00:05:05.600 align:start position:0%
the input array which is n so we do end
 

00:05:05.600 --> 00:05:07.990 align:start position:0%
the input array which is n so we do end
up<00:05:05.759><c> using</c><00:05:06.160><c> extra</c><00:05:06.479><c> memory</c><00:05:07.199><c> but</c><00:05:07.360><c> that's</c><00:05:07.600><c> not</c><00:05:07.840><c> too</c>

00:05:07.990 --> 00:05:08.000 align:start position:0%
up using extra memory but that's not too
 

00:05:08.000 --> 00:05:09.909 align:start position:0%
up using extra memory but that's not too
bad<00:05:08.240><c> this</c><00:05:08.479><c> is</c><00:05:08.560><c> about</c><00:05:08.880><c> as</c><00:05:09.039><c> efficient</c><00:05:09.440><c> as</c><00:05:09.520><c> we</c><00:05:09.680><c> can</c>

00:05:09.909 --> 00:05:09.919 align:start position:0%
bad this is about as efficient as we can
 

00:05:09.919 --> 00:05:12.150 align:start position:0%
bad this is about as efficient as we can
get<00:05:10.160><c> in</c><00:05:10.240><c> terms</c><00:05:10.560><c> of</c><00:05:10.639><c> time</c><00:05:10.880><c> complexity</c><00:05:11.680><c> so</c><00:05:11.919><c> let's</c>

00:05:12.150 --> 00:05:12.160 align:start position:0%
get in terms of time complexity so let's
 

00:05:12.160 --> 00:05:14.550 align:start position:0%
get in terms of time complexity so let's
get<00:05:12.400><c> into</c><00:05:12.639><c> the</c><00:05:12.720><c> code</c><00:05:13.120><c> now</c><00:05:13.759><c> okay</c><00:05:14.000><c> so</c><00:05:14.160><c> now</c><00:05:14.320><c> let's</c>

00:05:14.550 --> 00:05:14.560 align:start position:0%
get into the code now okay so now let's
 

00:05:14.560 --> 00:05:16.070 align:start position:0%
get into the code now okay so now let's
get<00:05:14.720><c> into</c><00:05:14.960><c> the</c><00:05:15.039><c> code</c><00:05:15.360><c> so</c><00:05:15.520><c> the</c><00:05:15.600><c> first</c><00:05:15.840><c> thing</c><00:05:16.000><c> i'm</c>

00:05:16.070 --> 00:05:16.080 align:start position:0%
get into the code so the first thing i'm
 

00:05:16.080 --> 00:05:18.629 align:start position:0%
get into the code so the first thing i'm
going<00:05:16.160><c> to</c><00:05:16.240><c> do</c><00:05:16.560><c> is</c><00:05:16.800><c> create</c><00:05:17.280><c> that</c><00:05:17.600><c> hash</c><00:05:17.919><c> set</c><00:05:18.400><c> in</c>

00:05:18.629 --> 00:05:18.639 align:start position:0%
going to do is create that hash set in
 

00:05:18.639 --> 00:05:21.270 align:start position:0%
going to do is create that hash set in
python<00:05:19.199><c> you</c><00:05:19.360><c> can</c><00:05:19.520><c> do</c><00:05:19.759><c> that</c><00:05:20.240><c> just</c><00:05:20.560><c> like</c><00:05:20.800><c> this</c>

00:05:21.270 --> 00:05:21.280 align:start position:0%
python you can do that just like this
 

00:05:21.280 --> 00:05:24.230 align:start position:0%
python you can do that just like this
it's<00:05:21.440><c> just</c><00:05:21.680><c> called</c><00:05:22.000><c> a</c><00:05:22.160><c> set</c><00:05:22.800><c> and</c><00:05:23.280><c> then</c><00:05:23.919><c> the</c>

00:05:24.230 --> 00:05:24.240 align:start position:0%
it's just called a set and then the
 

00:05:24.240 --> 00:05:26.710 align:start position:0%
it's just called a set and then the
simple<00:05:24.560><c> thing</c><00:05:24.800><c> is</c><00:05:25.120><c> just</c><00:05:25.520><c> going</c><00:05:25.840><c> through</c><00:05:26.320><c> every</c>

00:05:26.710 --> 00:05:26.720 align:start position:0%
simple thing is just going through every
 

00:05:26.720 --> 00:05:30.310 align:start position:0%
simple thing is just going through every
value<00:05:27.280><c> in</c><00:05:27.520><c> the</c><00:05:27.759><c> input</c><00:05:28.240><c> array</c><00:05:28.720><c> nums</c><00:05:29.520><c> and</c>

00:05:30.310 --> 00:05:30.320 align:start position:0%
value in the input array nums and
 

00:05:30.320 --> 00:05:32.629 align:start position:0%
value in the input array nums and
before<00:05:30.720><c> we</c><00:05:31.039><c> end</c><00:05:31.280><c> up</c><00:05:31.520><c> adding</c><00:05:31.840><c> it</c><00:05:32.000><c> to</c><00:05:32.160><c> our</c><00:05:32.320><c> hash</c>

00:05:32.629 --> 00:05:32.639 align:start position:0%
before we end up adding it to our hash
 

00:05:32.639 --> 00:05:34.710 align:start position:0%
before we end up adding it to our hash
set<00:05:32.800><c> because</c><00:05:33.199><c> remember</c><00:05:33.520><c> we</c><00:05:33.759><c> want</c><00:05:34.000><c> to</c><00:05:34.240><c> add</c>

00:05:34.710 --> 00:05:34.720 align:start position:0%
set because remember we want to add
 

00:05:34.720 --> 00:05:36.550 align:start position:0%
set because remember we want to add
every<00:05:34.960><c> one</c><00:05:35.120><c> of</c><00:05:35.280><c> these</c><00:05:35.520><c> values</c><00:05:36.000><c> to</c><00:05:36.160><c> our</c><00:05:36.240><c> hash</c>

00:05:36.550 --> 00:05:36.560 align:start position:0%
every one of these values to our hash
 

00:05:36.560 --> 00:05:39.110 align:start position:0%
every one of these values to our hash
set<00:05:36.880><c> just</c><00:05:37.120><c> like</c><00:05:37.360><c> this</c><00:05:37.680><c> but</c><00:05:37.919><c> before</c><00:05:38.320><c> we</c><00:05:38.560><c> even</c><00:05:38.880><c> do</c>

00:05:39.110 --> 00:05:39.120 align:start position:0%
set just like this but before we even do
 

00:05:39.120 --> 00:05:42.550 align:start position:0%
set just like this but before we even do
that<00:05:39.360><c> we</c><00:05:39.520><c> want</c><00:05:39.680><c> to</c><00:05:39.919><c> know</c><00:05:40.560><c> is</c><00:05:41.120><c> n</c><00:05:41.520><c> a</c><00:05:41.680><c> duplicate</c>

00:05:42.550 --> 00:05:42.560 align:start position:0%
that we want to know is n a duplicate
 

00:05:42.560 --> 00:05:45.270 align:start position:0%
that we want to know is n a duplicate
does<00:05:42.800><c> this</c><00:05:43.039><c> value</c><00:05:43.600><c> already</c><00:05:44.400><c> exist</c><00:05:45.039><c> in</c><00:05:45.120><c> our</c>

00:05:45.270 --> 00:05:45.280 align:start position:0%
does this value already exist in our
 

00:05:45.280 --> 00:05:48.870 align:start position:0%
does this value already exist in our
hash<00:05:45.600><c> set</c><00:05:46.000><c> and</c><00:05:46.160><c> if</c><00:05:46.320><c> it</c><00:05:46.479><c> does</c><00:05:47.120><c> we</c><00:05:47.360><c> know</c><00:05:47.680><c> that</c><00:05:48.240><c> our</c>

00:05:48.870 --> 00:05:48.880 align:start position:0%
hash set and if it does we know that our
 

00:05:48.880 --> 00:05:51.270 align:start position:0%
hash set and if it does we know that our
array<00:05:49.280><c> contains</c><00:05:49.919><c> duplicates</c><00:05:50.639><c> so</c><00:05:50.800><c> we</c><00:05:51.039><c> don't</c>

00:05:51.270 --> 00:05:51.280 align:start position:0%
array contains duplicates so we don't
 

00:05:51.280 --> 00:05:52.710 align:start position:0%
array contains duplicates so we don't
even<00:05:51.440><c> have</c><00:05:51.600><c> to</c><00:05:51.680><c> continue</c><00:05:52.160><c> through</c><00:05:52.400><c> the</c><00:05:52.479><c> rest</c>

00:05:52.710 --> 00:05:52.720 align:start position:0%
even have to continue through the rest
 

00:05:52.720 --> 00:05:54.870 align:start position:0%
even have to continue through the rest
of<00:05:52.800><c> the</c><00:05:52.960><c> array</c><00:05:53.360><c> we</c><00:05:53.520><c> can</c><00:05:53.759><c> immediately</c><00:05:54.479><c> return</c>

00:05:54.870 --> 00:05:54.880 align:start position:0%
of the array we can immediately return
 

00:05:54.880 --> 00:05:57.430 align:start position:0%
of the array we can immediately return
true<00:05:55.280><c> because</c><00:05:55.520><c> we</c><00:05:55.759><c> found</c><00:05:56.160><c> a</c><00:05:56.400><c> duplicate</c><00:05:57.120><c> but</c><00:05:57.280><c> if</c>

00:05:57.430 --> 00:05:57.440 align:start position:0%
true because we found a duplicate but if
 

00:05:57.440 --> 00:05:59.189 align:start position:0%
true because we found a duplicate but if
it<00:05:57.600><c> doesn't</c><00:05:57.919><c> contain</c><00:05:58.319><c> a</c><00:05:58.400><c> duplicate</c><00:05:59.039><c> we're</c>

00:05:59.189 --> 00:05:59.199 align:start position:0%
it doesn't contain a duplicate we're
 

00:05:59.199 --> 00:06:01.270 align:start position:0%
it doesn't contain a duplicate we're
going<00:05:59.360><c> to</c><00:05:59.520><c> add</c><00:05:59.680><c> that</c><00:05:59.919><c> value</c><00:06:00.560><c> then</c><00:06:00.880><c> iterate</c>

00:06:01.270 --> 00:06:01.280 align:start position:0%
going to add that value then iterate
 

00:06:01.280 --> 00:06:03.749 align:start position:0%
going to add that value then iterate
through<00:06:01.440><c> the</c><00:06:01.680><c> rest</c><00:06:01.919><c> of</c><00:06:02.080><c> the</c><00:06:02.160><c> array</c><00:06:02.960><c> of</c><00:06:03.199><c> nums</c>

00:06:03.749 --> 00:06:03.759 align:start position:0%
through the rest of the array of nums
 

00:06:03.759 --> 00:06:06.150 align:start position:0%
through the rest of the array of nums
and<00:06:03.919><c> then</c><00:06:04.319><c> the</c><00:06:04.560><c> loop</c><00:06:04.880><c> will</c><00:06:05.199><c> exit</c><00:06:05.680><c> and</c><00:06:05.840><c> then</c><00:06:06.000><c> we</c>

00:06:06.150 --> 00:06:06.160 align:start position:0%
and then the loop will exit and then we
 

00:06:06.160 --> 00:06:08.629 align:start position:0%
and then the loop will exit and then we
can<00:06:06.319><c> return</c><00:06:06.800><c> false</c><00:06:07.280><c> to</c><00:06:07.520><c> indicate</c><00:06:08.000><c> that</c><00:06:08.160><c> we</c><00:06:08.400><c> did</c>

00:06:08.629 --> 00:06:08.639 align:start position:0%
can return false to indicate that we did
 

00:06:08.639 --> 00:06:11.749 align:start position:0%
can return false to indicate that we did
not<00:06:09.120><c> find</c><00:06:09.680><c> any</c><00:06:10.000><c> duplicates</c><00:06:10.720><c> in</c><00:06:10.800><c> the</c><00:06:11.039><c> array</c><00:06:11.600><c> now</c>

00:06:11.749 --> 00:06:11.759 align:start position:0%
not find any duplicates in the array now
 

00:06:11.759 --> 00:06:13.510 align:start position:0%
not find any duplicates in the array now
let's<00:06:12.080><c> run</c><00:06:12.240><c> the</c><00:06:12.400><c> code</c><00:06:12.720><c> to</c><00:06:12.800><c> make</c><00:06:13.039><c> sure</c><00:06:13.199><c> that</c><00:06:13.360><c> it</c>

00:06:13.510 --> 00:06:13.520 align:start position:0%
let's run the code to make sure that it
 

00:06:13.520 --> 00:06:15.749 align:start position:0%
let's run the code to make sure that it
works<00:06:14.160><c> and</c><00:06:14.479><c> on</c><00:06:14.639><c> the</c><00:06:14.800><c> left</c><00:06:15.120><c> you</c><00:06:15.199><c> can</c><00:06:15.360><c> see</c><00:06:15.520><c> that</c>

00:06:15.749 --> 00:06:15.759 align:start position:0%
works and on the left you can see that
 

00:06:15.759 --> 00:06:17.670 align:start position:0%
works and on the left you can see that
yes<00:06:16.000><c> it</c><00:06:16.160><c> does</c><00:06:16.400><c> work</c><00:06:16.639><c> and</c><00:06:16.800><c> it</c><00:06:17.039><c> is</c><00:06:17.199><c> about</c><00:06:17.520><c> as</c>

00:06:17.670 --> 00:06:17.680 align:start position:0%
yes it does work and it is about as
 

00:06:17.680 --> 00:06:19.590 align:start position:0%
yes it does work and it is about as
efficient<00:06:18.080><c> as</c><00:06:18.240><c> we</c><00:06:18.400><c> can</c><00:06:18.560><c> get</c><00:06:18.800><c> so</c><00:06:18.960><c> i</c><00:06:19.199><c> really</c><00:06:19.440><c> hope</c>

00:06:19.590 --> 00:06:19.600 align:start position:0%
efficient as we can get so i really hope
 

00:06:19.600 --> 00:06:21.990 align:start position:0%
efficient as we can get so i really hope
that<00:06:19.840><c> this</c><00:06:20.000><c> was</c><00:06:20.160><c> helpful</c><00:06:20.800><c> if</c><00:06:20.960><c> it</c><00:06:21.120><c> was</c><00:06:21.680><c> please</c>

00:06:21.990 --> 00:06:22.000 align:start position:0%
that this was helpful if it was please
 

00:06:22.000 --> 00:06:23.670 align:start position:0%
that this was helpful if it was please
like<00:06:22.240><c> and</c><00:06:22.400><c> subscribe</c><00:06:22.960><c> it</c><00:06:23.120><c> supports</c><00:06:23.600><c> the</c>

00:06:23.670 --> 00:06:23.680 align:start position:0%
like and subscribe it supports the
 

00:06:23.680 --> 00:06:25.430 align:start position:0%
like and subscribe it supports the
channel<00:06:24.080><c> a</c><00:06:24.240><c> lot</c><00:06:24.479><c> consider</c><00:06:24.880><c> checking</c><00:06:25.199><c> out</c><00:06:25.280><c> my</c>

00:06:25.430 --> 00:06:25.440 align:start position:0%
channel a lot consider checking out my
 

00:06:25.440 --> 00:06:26.870 align:start position:0%
channel a lot consider checking out my
patreon<00:06:25.840><c> where</c><00:06:26.080><c> you</c><00:06:26.160><c> can</c><00:06:26.240><c> further</c><00:06:26.560><c> support</c>

00:06:26.870 --> 00:06:26.880 align:start position:0%
patreon where you can further support
 

00:06:26.880 --> 00:06:28.790 align:start position:0%
patreon where you can further support
the<00:06:27.039><c> channel</c><00:06:27.440><c> and</c><00:06:27.600><c> hopefully</c><00:06:28.240><c> i'll</c><00:06:28.479><c> see</c><00:06:28.639><c> you</c>

00:06:28.790 --> 00:06:28.800 align:start position:0%
the channel and hopefully i'll see you
 

00:06:28.800 --> 00:06:32.560 align:start position:0%
the channel and hopefully i'll see you
pretty<00:06:29.039><c> soon</c><00:06:29.520><c> thanks</c><00:06:29.759><c> for</c><00:06:29.919><c> watching</c>

