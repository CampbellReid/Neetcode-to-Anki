WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.120><c> back</c><00:00:01.360><c> and</c><00:00:01.439><c> let's</c>

00:00:01.670 --> 00:00:01.680 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.680 --> 00:00:03.510 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.839><c> some</c><00:00:02.000><c> more</c><00:00:02.240><c> neat</c><00:00:02.480><c> code</c><00:00:02.800><c> today</c><00:00:03.040><c> so</c><00:00:03.199><c> today</c>

00:00:03.510 --> 00:00:03.520 align:start position:0%
write some more neat code today so today
 

00:00:03.520 --> 00:00:06.309 align:start position:0%
write some more neat code today so today
let's<00:00:03.760><c> solve</c><00:00:04.000><c> the</c><00:00:04.240><c> problem</c><00:00:04.720><c> evaluate</c><00:00:05.600><c> reverse</c>

00:00:06.309 --> 00:00:06.319 align:start position:0%
let's solve the problem evaluate reverse
 

00:00:06.319 --> 00:00:09.270 align:start position:0%
let's solve the problem evaluate reverse
polish<00:00:07.040><c> notation</c><00:00:07.839><c> quite</c><00:00:08.080><c> a</c><00:00:08.160><c> mouthful</c><00:00:08.800><c> but</c>

00:00:09.270 --> 00:00:09.280 align:start position:0%
polish notation quite a mouthful but
 

00:00:09.280 --> 00:00:11.350 align:start position:0%
polish notation quite a mouthful but
basically<00:00:09.760><c> this</c><00:00:09.920><c> problem</c><00:00:10.320><c> is</c><00:00:10.480><c> about</c><00:00:10.880><c> what</c><00:00:11.200><c> the</c>

00:00:11.350 --> 00:00:11.360 align:start position:0%
basically this problem is about what the
 

00:00:11.360 --> 00:00:13.589 align:start position:0%
basically this problem is about what the
meaning<00:00:11.679><c> of</c><00:00:11.759><c> that</c><00:00:12.000><c> term</c><00:00:12.400><c> even</c><00:00:12.719><c> means</c><00:00:13.200><c> and</c><00:00:13.360><c> it's</c>

00:00:13.589 --> 00:00:13.599 align:start position:0%
meaning of that term even means and it's
 

00:00:13.599 --> 00:00:15.669 align:start position:0%
meaning of that term even means and it's
just<00:00:13.840><c> kind</c><00:00:14.000><c> of</c><00:00:14.160><c> a</c><00:00:14.240><c> way</c><00:00:14.480><c> to</c><00:00:14.639><c> compute</c>

00:00:15.669 --> 00:00:15.679 align:start position:0%
just kind of a way to compute
 

00:00:15.679 --> 00:00:18.150 align:start position:0%
just kind of a way to compute
arithmetic<00:00:16.400><c> expressions</c><00:00:17.440><c> and</c><00:00:17.680><c> the</c><00:00:17.840><c> only</c>

00:00:18.150 --> 00:00:18.160 align:start position:0%
arithmetic expressions and the only
 

00:00:18.160 --> 00:00:19.590 align:start position:0%
arithmetic expressions and the only
operations<00:00:18.960><c> we're</c><00:00:19.119><c> really</c><00:00:19.279><c> going</c><00:00:19.439><c> to</c><00:00:19.520><c> be</c>

00:00:19.590 --> 00:00:19.600 align:start position:0%
operations we're really going to be
 

00:00:19.600 --> 00:00:20.710 align:start position:0%
operations we're really going to be
doing<00:00:19.760><c> in</c><00:00:19.920><c> this</c><00:00:20.000><c> case</c><00:00:20.240><c> are</c><00:00:20.320><c> going</c><00:00:20.400><c> to</c><00:00:20.480><c> be</c><00:00:20.560><c> the</c>

00:00:20.710 --> 00:00:20.720 align:start position:0%
doing in this case are going to be the
 

00:00:20.720 --> 00:00:23.830 align:start position:0%
doing in this case are going to be the
simple<00:00:21.039><c> ones</c><00:00:21.760><c> add</c><00:00:22.160><c> subtract</c><00:00:22.960><c> multiply</c><00:00:23.680><c> and</c>

00:00:23.830 --> 00:00:23.840 align:start position:0%
simple ones add subtract multiply and
 

00:00:23.840 --> 00:00:25.910 align:start position:0%
simple ones add subtract multiply and
divide<00:00:24.640><c> a</c><00:00:24.880><c> one</c><00:00:25.119><c> note</c><00:00:25.359><c> that</c><00:00:25.439><c> they</c><00:00:25.599><c> tell</c><00:00:25.760><c> us</c>

00:00:25.910 --> 00:00:25.920 align:start position:0%
divide a one note that they tell us
 

00:00:25.920 --> 00:00:27.990 align:start position:0%
divide a one note that they tell us
though<00:00:26.160><c> is</c><00:00:26.320><c> division</c><00:00:26.800><c> between</c><00:00:27.199><c> two</c><00:00:27.439><c> integers</c>

00:00:27.990 --> 00:00:28.000 align:start position:0%
though is division between two integers
 

00:00:28.000 --> 00:00:30.950 align:start position:0%
though is division between two integers
should<00:00:28.240><c> basically</c><00:00:28.800><c> round</c><00:00:29.439><c> towards</c><00:00:30.000><c> zero</c>

00:00:30.950 --> 00:00:30.960 align:start position:0%
should basically round towards zero
 

00:00:30.960 --> 00:00:31.990 align:start position:0%
should basically round towards zero
since<00:00:31.199><c> i'm</c><00:00:31.359><c> going</c><00:00:31.359><c> to</c><00:00:31.439><c> be</c><00:00:31.599><c> doing</c><00:00:31.760><c> this</c><00:00:31.920><c> in</c>

00:00:31.990 --> 00:00:32.000 align:start position:0%
since i'm going to be doing this in
 

00:00:32.000 --> 00:00:34.389 align:start position:0%
since i'm going to be doing this in
python<00:00:32.480><c> though</c><00:00:32.800><c> if</c><00:00:33.040><c> you</c><00:00:33.280><c> you</c><00:00:33.440><c> know</c><00:00:33.600><c> take</c><00:00:34.079><c> uh</c>

00:00:34.389 --> 00:00:34.399 align:start position:0%
python though if you you know take uh
 

00:00:34.399 --> 00:00:36.470 align:start position:0%
python though if you you know take uh
some<00:00:34.800><c> values</c><00:00:35.360><c> and</c><00:00:35.520><c> do</c><00:00:35.680><c> integer</c><00:00:36.079><c> division</c>

00:00:36.470 --> 00:00:36.480 align:start position:0%
some values and do integer division
 

00:00:36.480 --> 00:00:39.510 align:start position:0%
some values and do integer division
between<00:00:36.800><c> them</c><00:00:37.360><c> they</c><00:00:37.600><c> always</c><00:00:38.000><c> round</c><00:00:38.719><c> down</c>

00:00:39.510 --> 00:00:39.520 align:start position:0%
between them they always round down
 

00:00:39.520 --> 00:00:41.190 align:start position:0%
between them they always round down
which<00:00:39.760><c> is</c><00:00:39.920><c> not</c><00:00:40.160><c> rounding</c><00:00:40.559><c> towards</c><00:00:40.879><c> zero</c>

00:00:41.190 --> 00:00:41.200 align:start position:0%
which is not rounding towards zero
 

00:00:41.200 --> 00:00:42.549 align:start position:0%
which is not rounding towards zero
necessarily<00:00:41.680><c> because</c><00:00:41.920><c> imagine</c><00:00:42.239><c> if</c><00:00:42.320><c> we</c><00:00:42.480><c> had</c>

00:00:42.549 --> 00:00:42.559 align:start position:0%
necessarily because imagine if we had
 

00:00:42.559 --> 00:00:45.190 align:start position:0%
necessarily because imagine if we had
negative<00:00:42.960><c> 3</c><00:00:43.360><c> divided</c><00:00:43.760><c> by</c><00:00:44.000><c> 2</c><00:00:44.480><c> that's</c><00:00:44.879><c> negative</c>

00:00:45.190 --> 00:00:45.200 align:start position:0%
negative 3 divided by 2 that's negative
 

00:00:45.200 --> 00:00:48.790 align:start position:0%
negative 3 divided by 2 that's negative
1.5<00:00:46.320><c> it</c><00:00:46.559><c> rounds</c><00:00:47.120><c> down</c><00:00:47.600><c> to</c><00:00:47.840><c> negative</c><00:00:48.320><c> 2</c><00:00:48.559><c> in</c>

00:00:48.790 --> 00:00:48.800 align:start position:0%
1.5 it rounds down to negative 2 in
 

00:00:48.800 --> 00:00:50.630 align:start position:0%
1.5 it rounds down to negative 2 in
python<00:00:49.280><c> but</c><00:00:49.360><c> that's</c><00:00:49.520><c> not</c><00:00:49.680><c> what</c><00:00:49.840><c> we</c><00:00:50.000><c> want</c><00:00:50.160><c> to</c><00:00:50.239><c> do</c>

00:00:50.630 --> 00:00:50.640 align:start position:0%
python but that's not what we want to do
 

00:00:50.640 --> 00:00:52.470 align:start position:0%
python but that's not what we want to do
but<00:00:51.120><c> there's</c><00:00:51.360><c> a</c><00:00:51.440><c> trick</c><00:00:51.760><c> in</c><00:00:51.840><c> python</c><00:00:52.320><c> that</c><00:00:52.399><c> you</c>

00:00:52.470 --> 00:00:52.480 align:start position:0%
but there's a trick in python that you
 

00:00:52.480 --> 00:00:55.350 align:start position:0%
but there's a trick in python that you
can<00:00:52.640><c> do</c><00:00:52.960><c> to</c><00:00:53.199><c> make</c><00:00:53.360><c> it</c><00:00:53.520><c> round</c><00:00:53.760><c> towards</c><00:00:54.079><c> zero</c><00:00:54.399><c> so</c>

00:00:55.350 --> 00:00:55.360 align:start position:0%
can do to make it round towards zero so
 

00:00:55.360 --> 00:00:56.950 align:start position:0%
can do to make it round towards zero so
we<00:00:55.600><c> can</c><00:00:55.840><c> take</c><00:00:56.079><c> care</c><00:00:56.239><c> of</c><00:00:56.320><c> that</c><00:00:56.480><c> if</c><00:00:56.559><c> you're</c><00:00:56.640><c> using</c>

00:00:56.950 --> 00:00:56.960 align:start position:0%
we can take care of that if you're using
 

00:00:56.960 --> 00:00:58.470 align:start position:0%
we can take care of that if you're using
java<00:00:57.280><c> though</c><00:00:57.440><c> i</c><00:00:57.520><c> think</c><00:00:57.680><c> it</c><00:00:57.840><c> automatically</c>

00:00:58.470 --> 00:00:58.480 align:start position:0%
java though i think it automatically
 

00:00:58.480 --> 00:01:00.310 align:start position:0%
java though i think it automatically
rounds<00:00:58.879><c> towards</c><00:00:59.199><c> zero</c><00:00:59.520><c> same</c><00:00:59.760><c> with</c><00:00:59.920><c> like</c><00:01:00.079><c> c</c>

00:01:00.310 --> 00:01:00.320 align:start position:0%
rounds towards zero same with like c
 

00:01:00.320 --> 00:01:02.709 align:start position:0%
rounds towards zero same with like c
plus<00:01:00.559><c> plus</c><00:01:00.800><c> in</c><00:01:00.960><c> most</c><00:01:01.280><c> languages</c><00:01:02.160><c> uh</c><00:01:02.399><c> one</c><00:01:02.559><c> thing</c>

00:01:02.709 --> 00:01:02.719 align:start position:0%
plus plus in most languages uh one thing
 

00:01:02.719 --> 00:01:06.310 align:start position:0%
plus plus in most languages uh one thing
we're<00:01:02.879><c> told</c><00:01:03.120><c> though</c><00:01:03.600><c> in</c><00:01:03.760><c> terms</c><00:01:04.000><c> of</c><00:01:04.080><c> the</c><00:01:04.239><c> rn</c><00:01:04.879><c> rpn</c>

00:01:06.310 --> 00:01:06.320 align:start position:0%
we're told though in terms of the rn rpn
 

00:01:06.320 --> 00:01:08.550 align:start position:0%
we're told though in terms of the rn rpn
rpn<00:01:06.960><c> expression</c><00:01:07.680><c> is</c><00:01:07.840><c> that</c><00:01:08.000><c> it's</c><00:01:08.159><c> always</c><00:01:08.479><c> going</c>

00:01:08.550 --> 00:01:08.560 align:start position:0%
rpn expression is that it's always going
 

00:01:08.560 --> 00:01:10.070 align:start position:0%
rpn expression is that it's always going
to<00:01:08.640><c> be</c><00:01:08.799><c> valid</c><00:01:09.119><c> which</c><00:01:09.360><c> is</c><00:01:09.439><c> good</c><00:01:09.680><c> so</c><00:01:09.840><c> we</c><00:01:09.920><c> don't</c>

00:01:10.070 --> 00:01:10.080 align:start position:0%
to be valid which is good so we don't
 

00:01:10.080 --> 00:01:11.510 align:start position:0%
to be valid which is good so we don't
really<00:01:10.240><c> have</c><00:01:10.320><c> to</c><00:01:10.400><c> worry</c><00:01:10.640><c> about</c><00:01:10.799><c> too</c><00:01:10.960><c> many</c><00:01:11.280><c> edge</c>

00:01:11.510 --> 00:01:11.520 align:start position:0%
really have to worry about too many edge
 

00:01:11.520 --> 00:01:13.429 align:start position:0%
really have to worry about too many edge
cases<00:01:12.000><c> there's</c><00:01:12.159><c> never</c><00:01:12.400><c> going</c><00:01:12.479><c> to</c><00:01:12.560><c> be</c><00:01:12.799><c> some</c>

00:01:13.429 --> 00:01:13.439 align:start position:0%
cases there's never going to be some
 

00:01:13.439 --> 00:01:15.830 align:start position:0%
cases there's never going to be some
divide<00:01:13.840><c> by</c><00:01:14.000><c> zero</c><00:01:14.560><c> or</c><00:01:14.799><c> anything</c><00:01:15.119><c> crazy</c><00:01:15.600><c> like</c>

00:01:15.830 --> 00:01:15.840 align:start position:0%
divide by zero or anything crazy like
 

00:01:15.840 --> 00:01:18.630 align:start position:0%
divide by zero or anything crazy like
that<00:01:16.080><c> so</c><00:01:16.240><c> now</c><00:01:16.400><c> what</c><00:01:16.560><c> does</c><00:01:16.960><c> rpn</c><00:01:17.600><c> even</c><00:01:17.920><c> mean</c><00:01:18.400><c> well</c>

00:01:18.630 --> 00:01:18.640 align:start position:0%
that so now what does rpn even mean well
 

00:01:18.640 --> 00:01:20.149 align:start position:0%
that so now what does rpn even mean well
let's<00:01:18.880><c> take</c><00:01:19.040><c> a</c><00:01:19.119><c> look</c><00:01:19.280><c> at</c><00:01:19.439><c> this</c><00:01:19.600><c> example</c><00:01:20.000><c> so</c>

00:01:20.149 --> 00:01:20.159 align:start position:0%
let's take a look at this example so
 

00:01:20.159 --> 00:01:22.390 align:start position:0%
let's take a look at this example so
we're<00:01:20.320><c> given</c><00:01:20.640><c> a</c><00:01:20.880><c> 2</c><00:01:21.360><c> a</c><00:01:21.600><c> 1</c>

00:01:22.390 --> 00:01:22.400 align:start position:0%
we're given a 2 a 1
 

00:01:22.400 --> 00:01:26.390 align:start position:0%
we're given a 2 a 1
then<00:01:22.640><c> a</c><00:01:22.799><c> plus</c><00:01:23.119><c> operator</c><00:01:24.159><c> then</c><00:01:24.400><c> a</c><00:01:24.560><c> 3</c><00:01:25.119><c> and</c><00:01:25.280><c> then</c><00:01:25.680><c> a</c>

00:01:26.390 --> 00:01:26.400 align:start position:0%
then a plus operator then a 3 and then a
 

00:01:26.400 --> 00:01:29.270 align:start position:0%
then a plus operator then a 3 and then a
multiply<00:01:27.119><c> operator</c><00:01:27.920><c> now</c><00:01:28.080><c> the</c><00:01:28.240><c> way</c><00:01:28.640><c> uh</c><00:01:28.880><c> this</c><00:01:29.119><c> is</c>

00:01:29.270 --> 00:01:29.280 align:start position:0%
multiply operator now the way uh this is
 

00:01:29.280 --> 00:01:30.789 align:start position:0%
multiply operator now the way uh this is
gonna<00:01:29.439><c> work</c><00:01:29.680><c> is</c><00:01:29.840><c> we're</c><00:01:30.000><c> gonna</c><00:01:30.159><c> be</c><00:01:30.400><c> reading</c>

00:01:30.789 --> 00:01:30.799 align:start position:0%
gonna work is we're gonna be reading
 

00:01:30.799 --> 00:01:32.230 align:start position:0%
gonna work is we're gonna be reading
from<00:01:31.119><c> left</c><00:01:31.360><c> to</c><00:01:31.600><c> right</c><00:01:31.759><c> we're</c><00:01:31.920><c> gonna</c><00:01:32.079><c> be</c>

00:01:32.230 --> 00:01:32.240 align:start position:0%
from left to right we're gonna be
 

00:01:32.240 --> 00:01:35.030 align:start position:0%
from left to right we're gonna be
reading<00:01:32.560><c> the</c><00:01:32.799><c> inputs</c><00:01:33.520><c> uh</c><00:01:33.920><c> so</c><00:01:34.240><c> first</c><00:01:34.479><c> one</c><00:01:34.720><c> was</c><00:01:34.880><c> a</c>

00:01:35.030 --> 00:01:35.040 align:start position:0%
reading the inputs uh so first one was a
 

00:01:35.040 --> 00:01:37.590 align:start position:0%
reading the inputs uh so first one was a
two<00:01:35.600><c> next</c><00:01:35.840><c> one</c><00:01:36.079><c> is</c><00:01:36.240><c> a</c><00:01:36.320><c> one</c><00:01:36.720><c> when</c><00:01:36.960><c> we</c><00:01:37.119><c> reach</c><00:01:37.360><c> an</c>

00:01:37.590 --> 00:01:37.600 align:start position:0%
two next one is a one when we reach an
 

00:01:37.600 --> 00:01:39.190 align:start position:0%
two next one is a one when we reach an
operator<00:01:38.159><c> though</c><00:01:38.400><c> what</c><00:01:38.560><c> exactly</c><00:01:38.960><c> are</c><00:01:39.040><c> we</c>

00:01:39.190 --> 00:01:39.200 align:start position:0%
operator though what exactly are we
 

00:01:39.200 --> 00:01:41.510 align:start position:0%
operator though what exactly are we
supposed<00:01:39.520><c> to</c><00:01:39.680><c> do</c><00:01:39.920><c> well</c><00:01:40.400><c> any</c><00:01:40.720><c> operator</c><00:01:41.280><c> in</c><00:01:41.360><c> this</c>

00:01:41.510 --> 00:01:41.520 align:start position:0%
supposed to do well any operator in this
 

00:01:41.520 --> 00:01:43.510 align:start position:0%
supposed to do well any operator in this
case<00:01:41.759><c> is</c><00:01:41.920><c> going</c><00:01:42.000><c> to</c><00:01:42.079><c> be</c><00:01:42.240><c> applied</c><00:01:42.960><c> to</c><00:01:43.200><c> the</c>

00:01:43.510 --> 00:01:43.520 align:start position:0%
case is going to be applied to the
 

00:01:43.520 --> 00:01:46.389 align:start position:0%
case is going to be applied to the
previous<00:01:44.399><c> two</c><00:01:45.119><c> values</c><00:01:45.840><c> and</c><00:01:46.000><c> like</c><00:01:46.159><c> i</c><00:01:46.240><c> said</c>

00:01:46.389 --> 00:01:46.399 align:start position:0%
previous two values and like i said
 

00:01:46.399 --> 00:01:47.749 align:start position:0%
previous two values and like i said
there's<00:01:46.640><c> not</c><00:01:46.720><c> going</c><00:01:46.799><c> to</c><00:01:46.880><c> be</c><00:01:47.040><c> edge</c><00:01:47.280><c> cases</c><00:01:47.600><c> so</c>

00:01:47.749 --> 00:01:47.759 align:start position:0%
there's not going to be edge cases so
 

00:01:47.759 --> 00:01:49.190 align:start position:0%
there's not going to be edge cases so
we're<00:01:47.920><c> guaranteed</c><00:01:48.399><c> that</c><00:01:48.560><c> there</c><00:01:48.799><c> are</c><00:01:48.960><c> going</c><00:01:49.119><c> to</c>

00:01:49.190 --> 00:01:49.200 align:start position:0%
we're guaranteed that there are going to
 

00:01:49.200 --> 00:01:51.590 align:start position:0%
we're guaranteed that there are going to
be<00:01:49.360><c> two</c><00:01:49.680><c> previous</c><00:01:50.079><c> values</c><00:01:50.560><c> so</c><00:01:50.799><c> in</c><00:01:50.880><c> this</c><00:01:51.119><c> case</c>

00:01:51.590 --> 00:01:51.600 align:start position:0%
be two previous values so in this case
 

00:01:51.600 --> 00:01:55.190 align:start position:0%
be two previous values so in this case
what<00:01:51.759><c> we</c><00:01:51.920><c> would</c><00:01:52.079><c> do</c><00:01:52.720><c> is</c><00:01:53.119><c> replace</c><00:01:54.079><c> these</c><00:01:54.880><c> this</c>

00:01:55.190 --> 00:01:55.200 align:start position:0%
what we would do is replace these this
 

00:01:55.200 --> 00:01:56.870 align:start position:0%
what we would do is replace these this
two<00:01:55.520><c> and</c><00:01:55.600><c> this</c><00:01:55.920><c> one</c>

00:01:56.870 --> 00:01:56.880 align:start position:0%
two and this one
 

00:01:56.880 --> 00:01:58.870 align:start position:0%
two and this one
by<00:01:57.200><c> adding</c><00:01:57.520><c> them</c><00:01:57.680><c> together</c><00:01:58.159><c> so</c><00:01:58.560><c> where</c><00:01:58.799><c> it's</c>

00:01:58.870 --> 00:01:58.880 align:start position:0%
by adding them together so where it's
 

00:01:58.880 --> 00:02:00.950 align:start position:0%
by adding them together so where it's
going<00:01:58.960><c> to</c><00:01:59.040><c> be</c><00:01:59.200><c> replaced</c><00:01:59.759><c> with</c><00:02:00.159><c> a</c>

00:02:00.950 --> 00:02:00.960 align:start position:0%
going to be replaced with a
 

00:02:00.960 --> 00:02:03.510 align:start position:0%
going to be replaced with a
three<00:02:01.680><c> right</c><00:02:01.920><c> so</c><00:02:02.159><c> we</c><00:02:02.320><c> can</c><00:02:02.560><c> kind</c><00:02:02.719><c> of</c><00:02:03.119><c> forget</c>

00:02:03.510 --> 00:02:03.520 align:start position:0%
three right so we can kind of forget
 

00:02:03.520 --> 00:02:05.830 align:start position:0%
three right so we can kind of forget
these<00:02:04.000><c> and</c><00:02:04.320><c> we</c><00:02:04.560><c> already</c><00:02:04.960><c> used</c><00:02:05.280><c> this</c><00:02:05.520><c> plus</c>

00:02:05.830 --> 00:02:05.840 align:start position:0%
these and we already used this plus
 

00:02:05.840 --> 00:02:07.590 align:start position:0%
these and we already used this plus
operator<00:02:06.240><c> so</c><00:02:06.479><c> we</c><00:02:06.560><c> can</c><00:02:06.719><c> kind</c><00:02:06.880><c> of</c><00:02:06.960><c> cross</c><00:02:07.280><c> it</c><00:02:07.360><c> out</c>

00:02:07.590 --> 00:02:07.600 align:start position:0%
operator so we can kind of cross it out
 

00:02:07.600 --> 00:02:10.469 align:start position:0%
operator so we can kind of cross it out
as<00:02:07.680><c> well</c><00:02:08.160><c> now</c><00:02:08.319><c> we</c><00:02:08.479><c> have</c><00:02:08.720><c> a</c><00:02:08.879><c> 3</c><00:02:09.360><c> again</c>

00:02:10.469 --> 00:02:10.479 align:start position:0%
as well now we have a 3 again
 

00:02:10.479 --> 00:02:12.390 align:start position:0%
as well now we have a 3 again
so<00:02:10.800><c> i'm</c><00:02:10.959><c> going</c><00:02:11.039><c> to</c><00:02:11.120><c> be</c><00:02:11.280><c> kind</c><00:02:11.440><c> of</c><00:02:12.000><c> writing</c><00:02:12.239><c> it</c>

00:02:12.390 --> 00:02:12.400 align:start position:0%
so i'm going to be kind of writing it
 

00:02:12.400 --> 00:02:14.869 align:start position:0%
so i'm going to be kind of writing it
down<00:02:12.560><c> here</c><00:02:12.879><c> just</c><00:02:13.040><c> to</c><00:02:13.200><c> kind</c><00:02:13.360><c> of</c><00:02:13.760><c> you</c><00:02:13.840><c> know</c>

00:02:14.869 --> 00:02:14.879 align:start position:0%
down here just to kind of you know
 

00:02:14.879 --> 00:02:16.790 align:start position:0%
down here just to kind of you know
basically<00:02:15.280><c> say</c><00:02:15.440><c> that</c><00:02:15.599><c> we've</c><00:02:16.160><c> seen</c><00:02:16.319><c> that</c><00:02:16.560><c> 3</c>

00:02:16.790 --> 00:02:16.800 align:start position:0%
basically say that we've seen that 3
 

00:02:16.800 --> 00:02:19.750 align:start position:0%
basically say that we've seen that 3
before<00:02:17.120><c> now</c><00:02:17.520><c> we</c><00:02:17.680><c> have</c><00:02:17.840><c> the</c><00:02:18.000><c> multiply</c><00:02:18.720><c> operator</c>

00:02:19.750 --> 00:02:19.760 align:start position:0%
before now we have the multiply operator
 

00:02:19.760 --> 00:02:21.190 align:start position:0%
before now we have the multiply operator
it's<00:02:19.920><c> going</c><00:02:20.000><c> to</c><00:02:20.080><c> be</c><00:02:20.160><c> applied</c><00:02:20.560><c> to</c><00:02:20.720><c> the</c><00:02:20.879><c> two</c>

00:02:21.190 --> 00:02:21.200 align:start position:0%
it's going to be applied to the two
 

00:02:21.200 --> 00:02:24.229 align:start position:0%
it's going to be applied to the two
previous<00:02:21.920><c> values</c><00:02:22.400><c> now</c><00:02:22.800><c> in</c><00:02:23.120><c> the</c><00:02:23.280><c> actual</c><00:02:23.760><c> input</c>

00:02:24.229 --> 00:02:24.239 align:start position:0%
previous values now in the actual input
 

00:02:24.239 --> 00:02:26.070 align:start position:0%
previous values now in the actual input
itself<00:02:24.640><c> you</c><00:02:24.800><c> can</c><00:02:24.879><c> see</c><00:02:25.040><c> that</c><00:02:25.200><c> the</c><00:02:25.520><c> the</c><00:02:25.680><c> previous</c>

00:02:26.070 --> 00:02:26.080 align:start position:0%
itself you can see that the the previous
 

00:02:26.080 --> 00:02:28.309 align:start position:0%
itself you can see that the the previous
value<00:02:26.400><c> was</c><00:02:26.560><c> a</c><00:02:26.720><c> 3</c><00:02:27.200><c> and</c><00:02:27.280><c> the</c><00:02:27.440><c> value</c><00:02:27.840><c> before</c><00:02:28.160><c> that</c>

00:02:28.309 --> 00:02:28.319 align:start position:0%
value was a 3 and the value before that
 

00:02:28.319 --> 00:02:30.390 align:start position:0%
value was a 3 and the value before that
was<00:02:28.480><c> a</c><00:02:28.720><c> plus</c><00:02:29.120><c> operator</c><00:02:29.760><c> when</c><00:02:29.920><c> we</c><00:02:30.080><c> say</c><00:02:30.239><c> it's</c>

00:02:30.390 --> 00:02:30.400 align:start position:0%
was a plus operator when we say it's
 

00:02:30.400 --> 00:02:31.750 align:start position:0%
was a plus operator when we say it's
going<00:02:30.480><c> to</c><00:02:30.560><c> be</c><00:02:30.640><c> applied</c><00:02:31.040><c> to</c><00:02:31.120><c> the</c><00:02:31.200><c> two</c><00:02:31.440><c> previous</c>

00:02:31.750 --> 00:02:31.760 align:start position:0%
going to be applied to the two previous
 

00:02:31.760 --> 00:02:33.910 align:start position:0%
going to be applied to the two previous
values<00:02:32.319><c> that's</c><00:02:32.560><c> not</c><00:02:32.800><c> what</c><00:02:32.959><c> we</c><00:02:33.200><c> mean</c><00:02:33.519><c> we</c><00:02:33.680><c> don't</c>

00:02:33.910 --> 00:02:33.920 align:start position:0%
values that's not what we mean we don't
 

00:02:33.920 --> 00:02:36.390 align:start position:0%
values that's not what we mean we don't
want<00:02:34.080><c> to</c><00:02:34.160><c> apply</c><00:02:34.560><c> it</c><00:02:34.879><c> to</c><00:02:35.200><c> another</c><00:02:35.840><c> operator</c>

00:02:36.390 --> 00:02:36.400 align:start position:0%
want to apply it to another operator
 

00:02:36.400 --> 00:02:39.509 align:start position:0%
want to apply it to another operator
right<00:02:36.879><c> we</c><00:02:37.120><c> mean</c><00:02:37.599><c> the</c><00:02:37.840><c> two</c><00:02:38.160><c> previous</c><00:02:38.800><c> values</c>

00:02:39.509 --> 00:02:39.519 align:start position:0%
right we mean the two previous values
 

00:02:39.519 --> 00:02:42.229 align:start position:0%
right we mean the two previous values
that<00:02:39.840><c> came</c><00:02:40.400><c> so</c><00:02:40.959><c> you</c><00:02:41.120><c> can</c><00:02:41.200><c> see</c><00:02:41.360><c> that</c><00:02:41.599><c> we</c><00:02:41.760><c> had</c><00:02:42.000><c> a</c>

00:02:42.229 --> 00:02:42.239 align:start position:0%
that came so you can see that we had a
 

00:02:42.239 --> 00:02:44.229 align:start position:0%
that came so you can see that we had a
three<00:02:42.720><c> and</c><00:02:42.879><c> then</c><00:02:43.200><c> the</c><00:02:43.360><c> one</c><00:02:43.599><c> before</c><00:02:43.840><c> that</c><00:02:44.000><c> was</c><00:02:44.160><c> a</c>

00:02:44.229 --> 00:02:44.239 align:start position:0%
three and then the one before that was a
 

00:02:44.239 --> 00:02:46.470 align:start position:0%
three and then the one before that was a
one<00:02:44.480><c> but</c><00:02:44.720><c> remember</c><00:02:45.120><c> this</c><00:02:45.360><c> two</c><00:02:45.680><c> and</c><00:02:45.760><c> this</c><00:02:46.000><c> one</c>

00:02:46.470 --> 00:02:46.480 align:start position:0%
one but remember this two and this one
 

00:02:46.480 --> 00:02:48.470 align:start position:0%
one but remember this two and this one
they<00:02:46.640><c> were</c><00:02:46.800><c> replaced</c><00:02:47.519><c> by</c><00:02:47.680><c> this</c><00:02:48.000><c> three</c><00:02:48.400><c> and</c>

00:02:48.470 --> 00:02:48.480 align:start position:0%
they were replaced by this three and
 

00:02:48.480 --> 00:02:51.030 align:start position:0%
they were replaced by this three and
then<00:02:48.640><c> we</c><00:02:48.800><c> had</c><00:02:49.120><c> a</c><00:02:49.360><c> second</c><00:02:49.680><c> 3</c><00:02:50.400><c> which</c><00:02:50.640><c> we</c><00:02:50.800><c> wrote</c>

00:02:51.030 --> 00:02:51.040 align:start position:0%
then we had a second 3 which we wrote
 

00:02:51.040 --> 00:02:52.710 align:start position:0%
then we had a second 3 which we wrote
down<00:02:51.280><c> here</c><00:02:51.440><c> so</c><00:02:51.599><c> this</c><00:02:51.840><c> multiply</c><00:02:52.400><c> is</c><00:02:52.480><c> going</c><00:02:52.640><c> to</c>

00:02:52.710 --> 00:02:52.720 align:start position:0%
down here so this multiply is going to
 

00:02:52.720 --> 00:02:56.470 align:start position:0%
down here so this multiply is going to
be<00:02:52.800><c> applied</c><00:02:53.519><c> to</c><00:02:53.760><c> these</c><00:02:54.480><c> two</c><00:02:55.040><c> values</c><00:02:55.840><c> so</c><00:02:56.080><c> we</c><00:02:56.239><c> can</c>

00:02:56.470 --> 00:02:56.480 align:start position:0%
be applied to these two values so we can
 

00:02:56.480 --> 00:02:58.790 align:start position:0%
be applied to these two values so we can
multiply<00:02:57.040><c> both</c><00:02:57.280><c> of</c><00:02:57.360><c> them</c><00:02:57.599><c> and</c><00:02:57.760><c> then</c><00:02:58.400><c> replace</c>

00:02:58.790 --> 00:02:58.800 align:start position:0%
multiply both of them and then replace
 

00:02:58.800 --> 00:03:00.309 align:start position:0%
multiply both of them and then replace
them<00:02:58.959><c> with</c><00:02:59.200><c> the</c><00:02:59.280><c> result</c><00:02:59.599><c> which</c><00:02:59.840><c> in</c><00:02:59.920><c> this</c><00:03:00.080><c> case</c>

00:03:00.309 --> 00:03:00.319 align:start position:0%
them with the result which in this case
 

00:03:00.319 --> 00:03:02.229 align:start position:0%
them with the result which in this case
is<00:03:00.480><c> going</c><00:03:00.560><c> to</c><00:03:00.640><c> be</c><00:03:00.800><c> a</c><00:03:01.040><c> 9.</c><00:03:01.440><c> so</c><00:03:01.599><c> you</c><00:03:01.680><c> can</c><00:03:01.840><c> see</c><00:03:02.000><c> that</c>

00:03:02.229 --> 00:03:02.239 align:start position:0%
is going to be a 9. so you can see that
 

00:03:02.239 --> 00:03:04.710 align:start position:0%
is going to be a 9. so you can see that
that<00:03:02.640><c> is</c><00:03:02.959><c> our</c><00:03:03.200><c> result</c><00:03:03.599><c> and</c><00:03:03.760><c> you</c><00:03:03.840><c> can</c><00:03:04.080><c> see</c><00:03:04.319><c> that</c>

00:03:04.710 --> 00:03:04.720 align:start position:0%
that is our result and you can see that
 

00:03:04.720 --> 00:03:07.509 align:start position:0%
that is our result and you can see that
it<00:03:04.879><c> is</c><00:03:05.120><c> correct</c><00:03:06.000><c> if</c><00:03:06.159><c> you</c><00:03:06.480><c> know</c><00:03:06.959><c> the</c><00:03:07.280><c> data</c>

00:03:07.509 --> 00:03:07.519 align:start position:0%
it is correct if you know the data
 

00:03:07.519 --> 00:03:09.030 align:start position:0%
it is correct if you know the data
structure<00:03:08.000><c> or</c><00:03:08.159><c> you're</c><00:03:08.319><c> familiar</c><00:03:08.800><c> with</c><00:03:08.959><c> the</c>

00:03:09.030 --> 00:03:09.040 align:start position:0%
structure or you're familiar with the
 

00:03:09.040 --> 00:03:11.350 align:start position:0%
structure or you're familiar with the
data<00:03:09.280><c> structure</c><00:03:09.840><c> a</c><00:03:10.159><c> stack</c><00:03:10.640><c> and</c><00:03:10.720><c> you've</c><00:03:11.040><c> used</c>

00:03:11.350 --> 00:03:11.360 align:start position:0%
data structure a stack and you've used
 

00:03:11.360 --> 00:03:13.509 align:start position:0%
data structure a stack and you've used
that<00:03:11.599><c> in</c><00:03:12.000><c> other</c><00:03:12.239><c> problems</c><00:03:12.800><c> before</c><00:03:13.200><c> i</c><00:03:13.280><c> think</c>

00:03:13.509 --> 00:03:13.519 align:start position:0%
that in other problems before i think
 

00:03:13.519 --> 00:03:16.470 align:start position:0%
that in other problems before i think
this<00:03:13.760><c> problem</c><00:03:14.159><c> is</c><00:03:14.400><c> pretty</c><00:03:14.800><c> simple</c><00:03:15.599><c> to</c><00:03:16.159><c> figure</c>

00:03:16.470 --> 00:03:16.480 align:start position:0%
this problem is pretty simple to figure
 

00:03:16.480 --> 00:03:18.390 align:start position:0%
this problem is pretty simple to figure
out<00:03:16.560><c> that</c><00:03:16.800><c> a</c><00:03:16.959><c> stack</c><00:03:17.360><c> will</c><00:03:17.519><c> be</c><00:03:17.680><c> useful</c><00:03:18.159><c> here</c>

00:03:18.390 --> 00:03:18.400 align:start position:0%
out that a stack will be useful here
 

00:03:18.400 --> 00:03:20.470 align:start position:0%
out that a stack will be useful here
because<00:03:18.879><c> basically</c><00:03:19.440><c> each</c><00:03:19.840><c> operator</c><00:03:20.319><c> is</c><00:03:20.400><c> going</c>

00:03:20.470 --> 00:03:20.480 align:start position:0%
because basically each operator is going
 

00:03:20.480 --> 00:03:22.470 align:start position:0%
because basically each operator is going
to<00:03:20.560><c> be</c><00:03:20.720><c> applied</c><00:03:21.200><c> to</c><00:03:21.360><c> the</c><00:03:21.519><c> previous</c><00:03:22.000><c> values</c>

00:03:22.470 --> 00:03:22.480 align:start position:0%
to be applied to the previous values
 

00:03:22.480 --> 00:03:25.350 align:start position:0%
to be applied to the previous values
right<00:03:22.959><c> but</c><00:03:23.440><c> in</c><00:03:23.599><c> the</c><00:03:23.680><c> case</c><00:03:24.080><c> of</c><00:03:24.239><c> this</c><00:03:24.560><c> 2</c><00:03:25.120><c> the</c>

00:03:25.350 --> 00:03:25.360 align:start position:0%
right but in the case of this 2 the
 

00:03:25.360 --> 00:03:27.990 align:start position:0%
right but in the case of this 2 the
previous<00:03:25.760><c> values</c><00:03:26.400><c> are</c><00:03:26.640><c> going</c><00:03:26.720><c> to</c><00:03:26.879><c> be</c><00:03:27.360><c> removed</c>

00:03:27.990 --> 00:03:28.000 align:start position:0%
previous values are going to be removed
 

00:03:28.000 --> 00:03:29.910 align:start position:0%
previous values are going to be removed
from<00:03:28.159><c> the</c><00:03:28.319><c> stack</c><00:03:28.640><c> right</c><00:03:28.799><c> and</c><00:03:28.879><c> then</c><00:03:29.120><c> replaced</c>

00:03:29.910 --> 00:03:29.920 align:start position:0%
from the stack right and then replaced
 

00:03:29.920 --> 00:03:33.190 align:start position:0%
from the stack right and then replaced
with<00:03:30.480><c> the</c><00:03:30.720><c> new</c><00:03:31.040><c> value</c><00:03:31.360><c> which</c><00:03:31.519><c> is</c><00:03:31.680><c> a</c><00:03:31.840><c> three</c><00:03:32.239><c> so</c>

00:03:33.190 --> 00:03:33.200 align:start position:0%
with the new value which is a three so
 

00:03:33.200 --> 00:03:35.270 align:start position:0%
with the new value which is a three so
you<00:03:33.360><c> know</c><00:03:33.519><c> as</c><00:03:33.680><c> we</c><00:03:33.920><c> read</c><00:03:34.319><c> through</c><00:03:34.560><c> the</c><00:03:34.799><c> input</c>

00:03:35.270 --> 00:03:35.280 align:start position:0%
you know as we read through the input
 

00:03:35.280 --> 00:03:37.509 align:start position:0%
you know as we read through the input
each<00:03:35.519><c> value</c><00:03:36.000><c> here</c><00:03:36.239><c> is</c><00:03:36.319><c> going</c><00:03:36.400><c> to</c><00:03:36.480><c> be</c><00:03:36.799><c> added</c><00:03:37.360><c> to</c>

00:03:37.509 --> 00:03:37.519 align:start position:0%
each value here is going to be added to
 

00:03:37.519 --> 00:03:40.550 align:start position:0%
each value here is going to be added to
the<00:03:37.680><c> stack</c><00:03:38.319><c> anytime</c><00:03:39.040><c> we</c><00:03:39.200><c> reach</c><00:03:39.519><c> an</c><00:03:39.840><c> operator</c>

00:03:40.550 --> 00:03:40.560 align:start position:0%
the stack anytime we reach an operator
 

00:03:40.560 --> 00:03:42.710 align:start position:0%
the stack anytime we reach an operator
the<00:03:40.879><c> previous</c><00:03:41.440><c> two</c><00:03:41.680><c> values</c><00:03:42.239><c> are</c><00:03:42.400><c> going</c><00:03:42.480><c> to</c><00:03:42.560><c> be</c>

00:03:42.710 --> 00:03:42.720 align:start position:0%
the previous two values are going to be
 

00:03:42.720 --> 00:03:45.110 align:start position:0%
the previous two values are going to be
removed<00:03:43.519><c> from</c><00:03:43.680><c> the</c><00:03:43.840><c> stack</c><00:03:44.480><c> and</c><00:03:44.640><c> then</c><00:03:44.959><c> we're</c>

00:03:45.110 --> 00:03:45.120 align:start position:0%
removed from the stack and then we're
 

00:03:45.120 --> 00:03:46.949 align:start position:0%
removed from the stack and then we're
gonna<00:03:45.519><c> do</c><00:03:45.680><c> the</c><00:03:45.840><c> operation</c><00:03:46.400><c> on</c><00:03:46.560><c> them</c><00:03:46.720><c> so</c><00:03:46.879><c> in</c>

00:03:46.949 --> 00:03:46.959 align:start position:0%
gonna do the operation on them so in
 

00:03:46.959 --> 00:03:48.550 align:start position:0%
gonna do the operation on them so in
this<00:03:47.120><c> case</c><00:03:47.360><c> two</c><00:03:47.599><c> plus</c><00:03:47.840><c> one</c><00:03:48.239><c> and</c><00:03:48.319><c> then</c><00:03:48.480><c> we're</c>

00:03:48.550 --> 00:03:48.560 align:start position:0%
this case two plus one and then we're
 

00:03:48.560 --> 00:03:50.070 align:start position:0%
this case two plus one and then we're
gonna<00:03:48.720><c> take</c><00:03:48.959><c> the</c><00:03:49.040><c> result</c><00:03:49.440><c> of</c><00:03:49.519><c> that</c><00:03:49.680><c> which</c><00:03:49.920><c> is</c>

00:03:50.070 --> 00:03:50.080 align:start position:0%
gonna take the result of that which is
 

00:03:50.080 --> 00:03:53.190 align:start position:0%
gonna take the result of that which is
three<00:03:50.560><c> and</c><00:03:50.720><c> then</c><00:03:51.040><c> push</c><00:03:51.360><c> it</c><00:03:51.920><c> back</c><00:03:52.560><c> onto</c><00:03:53.040><c> the</c>

00:03:53.190 --> 00:03:53.200 align:start position:0%
three and then push it back onto the
 

00:03:53.200 --> 00:03:55.270 align:start position:0%
three and then push it back onto the
stack<00:03:53.840><c> and</c><00:03:53.920><c> that's</c><00:03:54.159><c> kind</c><00:03:54.400><c> of</c><00:03:54.480><c> what</c><00:03:54.640><c> i</c><00:03:54.799><c> was</c>

00:03:55.270 --> 00:03:55.280 align:start position:0%
stack and that's kind of what i was
 

00:03:55.280 --> 00:03:56.789 align:start position:0%
stack and that's kind of what i was
getting<00:03:55.599><c> at</c><00:03:55.680><c> when</c><00:03:55.840><c> i</c><00:03:55.920><c> was</c><00:03:56.080><c> doing</c><00:03:56.239><c> the</c><00:03:56.400><c> drawing</c>

00:03:56.789 --> 00:03:56.799 align:start position:0%
getting at when i was doing the drawing
 

00:03:56.799 --> 00:03:58.789 align:start position:0%
getting at when i was doing the drawing
explanation<00:03:57.760><c> so</c><00:03:58.000><c> really</c><00:03:58.239><c> quickly</c><00:03:58.560><c> let's</c>

00:03:58.789 --> 00:03:58.799 align:start position:0%
explanation so really quickly let's
 

00:03:58.799 --> 00:04:00.229 align:start position:0%
explanation so really quickly let's
actually<00:03:59.040><c> run</c><00:03:59.280><c> through</c><00:03:59.439><c> an</c><00:03:59.599><c> example</c><00:03:59.920><c> with</c><00:04:00.159><c> a</c>

00:04:00.229 --> 00:04:00.239 align:start position:0%
actually run through an example with a
 

00:04:00.239 --> 00:04:01.750 align:start position:0%
actually run through an example with a
stack<00:04:00.560><c> and</c><00:04:00.879><c> just</c><00:04:01.040><c> to</c><00:04:01.120><c> make</c><00:04:01.280><c> this</c><00:04:01.439><c> problem</c><00:04:01.680><c> a</c>

00:04:01.750 --> 00:04:01.760 align:start position:0%
stack and just to make this problem a
 

00:04:01.760 --> 00:04:03.670 align:start position:0%
stack and just to make this problem a
bit<00:04:01.920><c> more</c><00:04:02.159><c> interesting</c><00:04:02.560><c> let's</c><00:04:02.799><c> replace</c><00:04:03.280><c> this</c>

00:04:03.670 --> 00:04:03.680 align:start position:0%
bit more interesting let's replace this
 

00:04:03.680 --> 00:04:04.550 align:start position:0%
bit more interesting let's replace this
uh

00:04:04.550 --> 00:04:04.560 align:start position:0%
uh
 

00:04:04.560 --> 00:04:06.949 align:start position:0%
uh
plus<00:04:04.879><c> operator</c><00:04:05.360><c> with</c><00:04:05.599><c> actually</c><00:04:05.920><c> a</c><00:04:06.080><c> subtract</c>

00:04:06.949 --> 00:04:06.959 align:start position:0%
plus operator with actually a subtract
 

00:04:06.959 --> 00:04:09.990 align:start position:0%
plus operator with actually a subtract
and<00:04:07.120><c> this</c><00:04:07.439><c> multiply</c><00:04:08.400><c> with</c><00:04:08.720><c> a</c><00:04:09.040><c> divide</c><00:04:09.599><c> because</c>

00:04:09.990 --> 00:04:10.000 align:start position:0%
and this multiply with a divide because
 

00:04:10.000 --> 00:04:11.110 align:start position:0%
and this multiply with a divide because
uh<00:04:10.159><c> it's</c><00:04:10.480><c> going</c><00:04:10.560><c> to</c><00:04:10.640><c> be</c><00:04:10.799><c> a</c><00:04:10.799><c> little</c><00:04:10.959><c> bit</c>

00:04:11.110 --> 00:04:11.120 align:start position:0%
uh it's going to be a little bit
 

00:04:11.120 --> 00:04:12.630 align:start position:0%
uh it's going to be a little bit
different<00:04:11.439><c> with</c><00:04:11.599><c> these</c><00:04:11.840><c> two</c><00:04:12.080><c> operations</c>

00:04:12.630 --> 00:04:12.640 align:start position:0%
different with these two operations
 

00:04:12.640 --> 00:04:14.630 align:start position:0%
different with these two operations
because<00:04:12.879><c> with</c><00:04:13.200><c> plus</c><00:04:13.840><c> these</c><00:04:14.159><c> two</c><00:04:14.400><c> are</c><00:04:14.480><c> going</c><00:04:14.560><c> to</c>

00:04:14.630 --> 00:04:14.640 align:start position:0%
because with plus these two are going to
 

00:04:14.640 --> 00:04:16.390 align:start position:0%
because with plus these two are going to
be<00:04:14.720><c> added</c><00:04:15.040><c> right</c><00:04:15.200><c> two</c><00:04:15.439><c> plus</c><00:04:15.680><c> one</c><00:04:15.920><c> but</c><00:04:16.079><c> when</c><00:04:16.239><c> you</c>

00:04:16.390 --> 00:04:16.400 align:start position:0%
be added right two plus one but when you
 

00:04:16.400 --> 00:04:19.030 align:start position:0%
be added right two plus one but when you
have<00:04:16.880><c> subtract</c><00:04:17.919><c> which</c><00:04:18.320><c> order</c><00:04:18.720><c> are</c><00:04:18.799><c> they</c><00:04:18.959><c> going</c>

00:04:19.030 --> 00:04:19.040 align:start position:0%
have subtract which order are they going
 

00:04:19.040 --> 00:04:21.349 align:start position:0%
have subtract which order are they going
to<00:04:19.120><c> be</c><00:04:19.280><c> subtracted</c><00:04:20.000><c> well</c><00:04:20.400><c> the</c><00:04:20.560><c> intuitive</c><00:04:21.120><c> one</c>

00:04:21.349 --> 00:04:21.359 align:start position:0%
to be subtracted well the intuitive one
 

00:04:21.359 --> 00:04:23.830 align:start position:0%
to be subtracted well the intuitive one
would<00:04:21.519><c> be</c><00:04:22.000><c> two</c><00:04:22.639><c> minus</c><00:04:23.120><c> one</c><00:04:23.360><c> because</c><00:04:23.600><c> that's</c>

00:04:23.830 --> 00:04:23.840 align:start position:0%
would be two minus one because that's
 

00:04:23.840 --> 00:04:26.150 align:start position:0%
would be two minus one because that's
the<00:04:24.000><c> order</c><00:04:24.320><c> that</c><00:04:24.400><c> they</c><00:04:24.560><c> appear</c><00:04:25.040><c> in</c><00:04:25.440><c> but</c><00:04:25.919><c> one</c>

00:04:26.150 --> 00:04:26.160 align:start position:0%
the order that they appear in but one
 

00:04:26.160 --> 00:04:28.629 align:start position:0%
the order that they appear in but one
minus<00:04:26.560><c> two</c><00:04:27.040><c> could</c><00:04:27.280><c> be</c><00:04:27.440><c> possible</c><00:04:27.919><c> right</c><00:04:28.160><c> well</c>

00:04:28.629 --> 00:04:28.639 align:start position:0%
minus two could be possible right well
 

00:04:28.639 --> 00:04:30.790 align:start position:0%
minus two could be possible right well
in<00:04:28.800><c> this</c><00:04:29.199><c> case</c><00:04:29.440><c> if</c><00:04:29.600><c> you</c><00:04:29.840><c> looked</c><00:04:30.080><c> at</c><00:04:30.240><c> the</c><00:04:30.400><c> second</c>

00:04:30.790 --> 00:04:30.800 align:start position:0%
in this case if you looked at the second
 

00:04:30.800 --> 00:04:32.629 align:start position:0%
in this case if you looked at the second
example<00:04:31.120><c> i</c><00:04:31.199><c> think</c><00:04:31.360><c> they</c><00:04:31.520><c> clarify</c><00:04:32.160><c> that</c><00:04:32.400><c> yes</c>

00:04:32.629 --> 00:04:32.639 align:start position:0%
example i think they clarify that yes
 

00:04:32.639 --> 00:04:34.469 align:start position:0%
example i think they clarify that yes
it's<00:04:32.800><c> going</c><00:04:32.880><c> to</c><00:04:32.960><c> be</c><00:04:33.199><c> this</c><00:04:33.440><c> way</c><00:04:33.680><c> right</c><00:04:33.840><c> 2</c><00:04:34.160><c> minus</c>

00:04:34.469 --> 00:04:34.479 align:start position:0%
it's going to be this way right 2 minus
 

00:04:34.479 --> 00:04:36.550 align:start position:0%
it's going to be this way right 2 minus
1.<00:04:35.040><c> let's</c><00:04:35.280><c> run</c><00:04:35.440><c> through</c><00:04:35.680><c> this</c><00:04:35.840><c> with</c><00:04:36.080><c> a</c><00:04:36.160><c> stack</c>

00:04:36.550 --> 00:04:36.560 align:start position:0%
1. let's run through this with a stack
 

00:04:36.560 --> 00:04:38.310 align:start position:0%
1. let's run through this with a stack
very<00:04:36.800><c> quickly</c><00:04:37.040><c> so</c><00:04:37.280><c> we</c><00:04:37.440><c> read</c><00:04:37.600><c> the</c><00:04:37.680><c> first</c><00:04:38.000><c> value</c>

00:04:38.310 --> 00:04:38.320 align:start position:0%
very quickly so we read the first value
 

00:04:38.320 --> 00:04:41.990 align:start position:0%
very quickly so we read the first value
it's<00:04:38.479><c> a</c><00:04:38.639><c> 2</c><00:04:39.040><c> we</c><00:04:39.280><c> add</c><00:04:39.520><c> it</c><00:04:39.840><c> to</c><00:04:40.560><c> our</c><00:04:41.040><c> stack</c><00:04:41.759><c> second</c>

00:04:41.990 --> 00:04:42.000 align:start position:0%
it's a 2 we add it to our stack second
 

00:04:42.000 --> 00:04:44.230 align:start position:0%
it's a 2 we add it to our stack second
value<00:04:42.320><c> is</c><00:04:42.479><c> a</c><00:04:42.560><c> one</c><00:04:42.960><c> we</c><00:04:43.120><c> add</c><00:04:43.280><c> it</c><00:04:43.360><c> to</c><00:04:43.520><c> our</c><00:04:43.600><c> stack</c>

00:04:44.230 --> 00:04:44.240 align:start position:0%
value is a one we add it to our stack
 

00:04:44.240 --> 00:04:46.469 align:start position:0%
value is a one we add it to our stack
next<00:04:44.560><c> we</c><00:04:44.720><c> get</c><00:04:44.960><c> the</c><00:04:45.199><c> subtract</c><00:04:45.840><c> operator</c><00:04:46.320><c> what</c>

00:04:46.469 --> 00:04:46.479 align:start position:0%
next we get the subtract operator what
 

00:04:46.479 --> 00:04:48.550 align:start position:0%
next we get the subtract operator what
does<00:04:46.639><c> that</c><00:04:46.800><c> mean</c><00:04:46.960><c> that</c><00:04:47.120><c> means</c><00:04:47.360><c> we</c><00:04:47.600><c> pop</c><00:04:48.240><c> these</c>

00:04:48.550 --> 00:04:48.560 align:start position:0%
does that mean that means we pop these
 

00:04:48.560 --> 00:04:50.469 align:start position:0%
does that mean that means we pop these
values<00:04:49.120><c> from</c><00:04:49.360><c> our</c><00:04:49.440><c> stack</c><00:04:49.840><c> and</c><00:04:49.919><c> then</c><00:04:50.080><c> do</c><00:04:50.240><c> the</c>

00:04:50.469 --> 00:04:50.479 align:start position:0%
values from our stack and then do the
 

00:04:50.479 --> 00:04:52.550 align:start position:0%
values from our stack and then do the
operation<00:04:50.960><c> so</c><00:04:51.120><c> in</c><00:04:51.199><c> this</c><00:04:51.360><c> case</c><00:04:51.600><c> it</c><00:04:51.680><c> was</c><00:04:52.160><c> two</c>

00:04:52.550 --> 00:04:52.560 align:start position:0%
operation so in this case it was two
 

00:04:52.560 --> 00:04:55.670 align:start position:0%
operation so in this case it was two
minus<00:04:52.960><c> one</c><00:04:53.680><c> that's</c><00:04:54.000><c> going</c><00:04:54.080><c> to</c><00:04:54.160><c> be</c><00:04:54.400><c> a</c><00:04:54.800><c> one</c><00:04:55.360><c> over</c>

00:04:55.670 --> 00:04:55.680 align:start position:0%
minus one that's going to be a one over
 

00:04:55.680 --> 00:04:58.469 align:start position:0%
minus one that's going to be a one over
here<00:04:56.240><c> next</c><00:04:56.560><c> value</c><00:04:56.880><c> is</c><00:04:57.040><c> a</c><00:04:57.199><c> 3</c><00:04:57.759><c> we</c><00:04:57.919><c> add</c><00:04:58.160><c> it</c><00:04:58.240><c> to</c><00:04:58.320><c> the</c>

00:04:58.469 --> 00:04:58.479 align:start position:0%
here next value is a 3 we add it to the
 

00:04:58.479 --> 00:05:01.670 align:start position:0%
here next value is a 3 we add it to the
stack<00:04:59.120><c> next</c><00:04:59.440><c> we</c><00:04:59.600><c> have</c><00:04:59.759><c> a</c><00:04:59.919><c> divide</c><00:05:00.560><c> operator</c><00:05:01.360><c> so</c>

00:05:01.670 --> 00:05:01.680 align:start position:0%
stack next we have a divide operator so
 

00:05:01.680 --> 00:05:03.909 align:start position:0%
stack next we have a divide operator so
in<00:05:01.840><c> this</c><00:05:02.400><c> case</c><00:05:02.720><c> it's</c><00:05:02.960><c> going</c><00:05:03.039><c> to</c><00:05:03.199><c> be</c><00:05:03.440><c> the</c><00:05:03.680><c> same</c>

00:05:03.909 --> 00:05:03.919 align:start position:0%
in this case it's going to be the same
 

00:05:03.919 --> 00:05:06.310 align:start position:0%
in this case it's going to be the same
order<00:05:04.240><c> that</c><00:05:04.400><c> the</c><00:05:04.479><c> values</c><00:05:04.960><c> appear</c><00:05:05.360><c> in</c><00:05:05.520><c> so</c><00:05:05.840><c> 1</c>

00:05:06.310 --> 00:05:06.320 align:start position:0%
order that the values appear in so 1
 

00:05:06.320 --> 00:05:08.230 align:start position:0%
order that the values appear in so 1
divided<00:05:06.800><c> by</c><00:05:07.039><c> 3</c><00:05:07.440><c> we're</c><00:05:07.600><c> going</c><00:05:07.680><c> to</c><00:05:07.840><c> round</c>

00:05:08.230 --> 00:05:08.240 align:start position:0%
divided by 3 we're going to round
 

00:05:08.240 --> 00:05:09.990 align:start position:0%
divided by 3 we're going to round
towards<00:05:08.560><c> 0.</c><00:05:08.880><c> so</c><00:05:09.039><c> in</c><00:05:09.199><c> this</c><00:05:09.280><c> case</c><00:05:09.520><c> it's</c><00:05:09.680><c> actually</c>

00:05:09.990 --> 00:05:10.000 align:start position:0%
towards 0. so in this case it's actually
 

00:05:10.000 --> 00:05:12.629 align:start position:0%
towards 0. so in this case it's actually
gonna<00:05:10.240><c> be</c><00:05:10.479><c> zero</c><00:05:10.800><c> right</c><00:05:11.039><c> so</c><00:05:11.199><c> we</c><00:05:11.440><c> pop</c><00:05:11.680><c> this</c><00:05:12.320><c> pop</c>

00:05:12.629 --> 00:05:12.639 align:start position:0%
gonna be zero right so we pop this pop
 

00:05:12.639 --> 00:05:15.510 align:start position:0%
gonna be zero right so we pop this pop
this<00:05:13.280><c> uh</c><00:05:13.680><c> and</c><00:05:13.759><c> then</c><00:05:14.000><c> replace</c><00:05:14.479><c> it</c><00:05:14.560><c> with</c><00:05:14.720><c> a</c><00:05:14.880><c> zero</c>

00:05:15.510 --> 00:05:15.520 align:start position:0%
this uh and then replace it with a zero
 

00:05:15.520 --> 00:05:17.590 align:start position:0%
this uh and then replace it with a zero
and<00:05:15.919><c> we're</c><00:05:16.160><c> guaranteed</c><00:05:16.880><c> since</c><00:05:17.199><c> this</c><00:05:17.440><c> is</c>

00:05:17.590 --> 00:05:17.600 align:start position:0%
and we're guaranteed since this is
 

00:05:17.600 --> 00:05:19.189 align:start position:0%
and we're guaranteed since this is
always<00:05:17.840><c> going</c><00:05:18.000><c> to</c><00:05:18.080><c> be</c><00:05:18.240><c> valid</c><00:05:18.560><c> that</c><00:05:18.720><c> we're</c><00:05:18.960><c> only</c>

00:05:19.189 --> 00:05:19.199 align:start position:0%
always going to be valid that we're only
 

00:05:19.199 --> 00:05:21.270 align:start position:0%
always going to be valid that we're only
gonna<00:05:19.280><c> be</c><00:05:19.520><c> left</c><00:05:19.759><c> with</c><00:05:19.919><c> a</c><00:05:20.080><c> single</c><00:05:20.479><c> value</c><00:05:20.960><c> in</c><00:05:21.120><c> our</c>

00:05:21.270 --> 00:05:21.280 align:start position:0%
gonna be left with a single value in our
 

00:05:21.280 --> 00:05:22.790 align:start position:0%
gonna be left with a single value in our
stack<00:05:21.600><c> so</c><00:05:21.759><c> that's</c><00:05:22.000><c> the</c><00:05:22.160><c> value</c><00:05:22.479><c> we're</c><00:05:22.639><c> gonna</c>

00:05:22.790 --> 00:05:22.800 align:start position:0%
stack so that's the value we're gonna
 

00:05:22.800 --> 00:05:25.749 align:start position:0%
stack so that's the value we're gonna
return<00:05:23.199><c> so</c><00:05:23.360><c> in</c><00:05:23.440><c> this</c><00:05:23.600><c> case</c><00:05:23.919><c> the</c><00:05:24.080><c> answer</c><00:05:24.639><c> is</c><00:05:25.120><c> 0.</c>

00:05:25.749 --> 00:05:25.759 align:start position:0%
return so in this case the answer is 0.
 

00:05:25.759 --> 00:05:27.270 align:start position:0%
return so in this case the answer is 0.
so<00:05:26.080><c> that's</c><00:05:26.400><c> pretty</c><00:05:26.560><c> much</c><00:05:26.720><c> the</c><00:05:26.880><c> entire</c>

00:05:27.270 --> 00:05:27.280 align:start position:0%
so that's pretty much the entire
 

00:05:27.280 --> 00:05:28.390 align:start position:0%
so that's pretty much the entire
solution

00:05:28.390 --> 00:05:28.400 align:start position:0%
solution
 

00:05:28.400 --> 00:05:29.990 align:start position:0%
solution
now<00:05:28.639><c> we</c><00:05:28.800><c> can</c><00:05:28.960><c> code</c><00:05:29.199><c> it</c><00:05:29.280><c> up</c><00:05:29.440><c> but</c><00:05:29.520><c> i</c><00:05:29.600><c> just</c><00:05:29.759><c> want</c><00:05:29.919><c> to</c>

00:05:29.990 --> 00:05:30.000 align:start position:0%
now we can code it up but i just want to
 

00:05:30.000 --> 00:05:31.590 align:start position:0%
now we can code it up but i just want to
mention<00:05:30.240><c> that</c><00:05:30.400><c> the</c><00:05:30.560><c> overall</c><00:05:30.880><c> time</c><00:05:31.120><c> complexity</c>

00:05:31.590 --> 00:05:31.600 align:start position:0%
mention that the overall time complexity
 

00:05:31.600 --> 00:05:33.430 align:start position:0%
mention that the overall time complexity
is<00:05:31.680><c> going</c><00:05:31.840><c> to</c><00:05:31.840><c> be</c><00:05:32.000><c> big</c><00:05:32.240><c> o</c><00:05:32.479><c> of</c><00:05:32.720><c> n</c><00:05:33.039><c> because</c><00:05:33.280><c> we're</c>

00:05:33.430 --> 00:05:33.440 align:start position:0%
is going to be big o of n because we're
 

00:05:33.440 --> 00:05:35.270 align:start position:0%
is going to be big o of n because we're
just<00:05:33.680><c> reading</c><00:05:34.000><c> through</c><00:05:34.240><c> the</c><00:05:34.400><c> input</c><00:05:34.720><c> string</c>

00:05:35.270 --> 00:05:35.280 align:start position:0%
just reading through the input string
 

00:05:35.280 --> 00:05:37.510 align:start position:0%
just reading through the input string
adding<00:05:35.680><c> each</c><00:05:35.919><c> value</c><00:05:36.479><c> to</c><00:05:36.639><c> the</c><00:05:36.720><c> stack</c><00:05:37.280><c> and</c>

00:05:37.510 --> 00:05:37.520 align:start position:0%
adding each value to the stack and
 

00:05:37.520 --> 00:05:40.230 align:start position:0%
adding each value to the stack and
removing<00:05:38.080><c> it</c><00:05:38.320><c> at</c><00:05:38.479><c> most</c><00:05:38.960><c> once</c><00:05:39.360><c> each</c><00:05:39.840><c> so</c><00:05:40.160><c> you</c>

00:05:40.230 --> 00:05:40.240 align:start position:0%
removing it at most once each so you
 

00:05:40.240 --> 00:05:42.310 align:start position:0%
removing it at most once each so you
know<00:05:40.400><c> the</c><00:05:40.479><c> time</c><00:05:40.720><c> complexity</c><00:05:41.199><c> is</c><00:05:41.280><c> two</c><00:05:41.520><c> times</c><00:05:41.919><c> n</c>

00:05:42.310 --> 00:05:42.320 align:start position:0%
know the time complexity is two times n
 

00:05:42.320 --> 00:05:44.870 align:start position:0%
know the time complexity is two times n
in<00:05:42.560><c> other</c><00:05:42.720><c> words</c><00:05:43.120><c> it's</c><00:05:43.360><c> big</c><00:05:43.600><c> o</c><00:05:43.919><c> of</c><00:05:44.080><c> n</c><00:05:44.560><c> uh</c><00:05:44.720><c> the</c>

00:05:44.870 --> 00:05:44.880 align:start position:0%
in other words it's big o of n uh the
 

00:05:44.880 --> 00:05:46.629 align:start position:0%
in other words it's big o of n uh the
memory<00:05:45.199><c> complexity</c><00:05:45.759><c> since</c><00:05:46.000><c> we</c><00:05:46.160><c> do</c><00:05:46.320><c> have</c><00:05:46.479><c> the</c>

00:05:46.629 --> 00:05:46.639 align:start position:0%
memory complexity since we do have the
 

00:05:46.639 --> 00:05:49.670 align:start position:0%
memory complexity since we do have the
stack<00:05:47.199><c> is</c><00:05:47.440><c> also</c><00:05:47.759><c> going</c><00:05:47.840><c> to</c><00:05:47.919><c> be</c><00:05:48.160><c> big</c><00:05:48.479><c> o</c><00:05:48.720><c> of</c><00:05:49.039><c> n</c><00:05:49.440><c> so</c>

00:05:49.670 --> 00:05:49.680 align:start position:0%
stack is also going to be big o of n so
 

00:05:49.680 --> 00:05:51.670 align:start position:0%
stack is also going to be big o of n so
now<00:05:50.000><c> let's</c><00:05:50.240><c> code</c><00:05:50.560><c> it</c><00:05:50.720><c> up</c><00:05:50.880><c> let's</c><00:05:51.120><c> code</c><00:05:51.360><c> it</c><00:05:51.520><c> up</c>

00:05:51.670 --> 00:05:51.680 align:start position:0%
now let's code it up let's code it up
 

00:05:51.680 --> 00:05:52.950 align:start position:0%
now let's code it up let's code it up
like<00:05:51.919><c> i</c><00:05:52.000><c> said</c><00:05:52.160><c> we're</c><00:05:52.320><c> going</c><00:05:52.320><c> to</c><00:05:52.400><c> need</c><00:05:52.639><c> a</c><00:05:52.720><c> single</c>

00:05:52.950 --> 00:05:52.960 align:start position:0%
like i said we're going to need a single
 

00:05:52.960 --> 00:05:54.710 align:start position:0%
like i said we're going to need a single
data<00:05:53.199><c> structure</c><00:05:53.680><c> in</c><00:05:53.759><c> this</c><00:05:53.919><c> problem</c><00:05:54.320><c> which</c><00:05:54.560><c> is</c>

00:05:54.710 --> 00:05:54.720 align:start position:0%
data structure in this problem which is
 

00:05:54.720 --> 00:05:56.309 align:start position:0%
data structure in this problem which is
going<00:05:54.800><c> to</c><00:05:54.880><c> be</c><00:05:55.039><c> our</c><00:05:55.199><c> stack</c><00:05:55.600><c> in</c><00:05:55.680><c> python</c><00:05:56.080><c> you</c><00:05:56.240><c> can</c>

00:05:56.309 --> 00:05:56.319 align:start position:0%
going to be our stack in python you can
 

00:05:56.319 --> 00:05:58.070 align:start position:0%
going to be our stack in python you can
just<00:05:56.479><c> use</c><00:05:56.720><c> a</c><00:05:56.880><c> list</c>

00:05:58.070 --> 00:05:58.080 align:start position:0%
just use a list
 

00:05:58.080 --> 00:05:59.749 align:start position:0%
just use a list
and<00:05:58.160><c> then</c><00:05:58.639><c> most</c><00:05:58.880><c> of</c><00:05:58.960><c> this</c><00:05:59.199><c> problem</c><00:05:59.520><c> is</c><00:05:59.600><c> just</c>

00:05:59.749 --> 00:05:59.759 align:start position:0%
and then most of this problem is just
 

00:05:59.759 --> 00:06:01.510 align:start position:0%
and then most of this problem is just
going<00:05:59.840><c> to</c><00:05:59.919><c> be</c><00:06:00.080><c> boilerplate</c><00:06:00.800><c> once</c><00:06:01.039><c> you</c><00:06:01.199><c> realize</c>

00:06:01.510 --> 00:06:01.520 align:start position:0%
going to be boilerplate once you realize
 

00:06:01.520 --> 00:06:03.590 align:start position:0%
going to be boilerplate once you realize
that<00:06:01.680><c> a</c><00:06:01.840><c> stack</c><00:06:02.160><c> works</c><00:06:02.479><c> for</c><00:06:02.639><c> this</c><00:06:02.880><c> problem</c><00:06:03.360><c> then</c>

00:06:03.590 --> 00:06:03.600 align:start position:0%
that a stack works for this problem then
 

00:06:03.600 --> 00:06:05.270 align:start position:0%
that a stack works for this problem then
it's<00:06:03.680><c> just</c><00:06:03.840><c> about</c><00:06:04.160><c> coding</c><00:06:04.479><c> it</c><00:06:04.639><c> up</c><00:06:04.800><c> so</c><00:06:05.120><c> what</c>

00:06:05.270 --> 00:06:05.280 align:start position:0%
it's just about coding it up so what
 

00:06:05.280 --> 00:06:06.309 align:start position:0%
it's just about coding it up so what
we're<00:06:05.360><c> going</c><00:06:05.440><c> to</c><00:06:05.520><c> do</c><00:06:05.680><c> is</c><00:06:05.759><c> just</c><00:06:06.000><c> iterate</c>

00:06:06.309 --> 00:06:06.319 align:start position:0%
we're going to do is just iterate
 

00:06:06.319 --> 00:06:08.390 align:start position:0%
we're going to do is just iterate
through<00:06:06.560><c> every</c><00:06:06.880><c> character</c><00:06:07.360><c> in</c><00:06:07.520><c> our</c><00:06:07.759><c> tokens</c>

00:06:08.390 --> 00:06:08.400 align:start position:0%
through every character in our tokens
 

00:06:08.400 --> 00:06:11.110 align:start position:0%
through every character in our tokens
input<00:06:09.039><c> and</c><00:06:09.199><c> then</c><00:06:09.680><c> just</c><00:06:09.919><c> have</c><00:06:10.240><c> a</c><00:06:10.479><c> bunch</c><00:06:10.880><c> of</c>

00:06:11.110 --> 00:06:11.120 align:start position:0%
input and then just have a bunch of
 

00:06:11.120 --> 00:06:13.510 align:start position:0%
input and then just have a bunch of
conditional<00:06:11.680><c> statements</c><00:06:12.319><c> the</c><00:06:12.479><c> first</c><00:06:12.800><c> one</c><00:06:13.039><c> is</c>

00:06:13.510 --> 00:06:13.520 align:start position:0%
conditional statements the first one is
 

00:06:13.520 --> 00:06:15.110 align:start position:0%
conditional statements the first one is
if<00:06:13.680><c> the</c><00:06:13.919><c> character</c>

00:06:15.110 --> 00:06:15.120 align:start position:0%
if the character
 

00:06:15.120 --> 00:06:17.270 align:start position:0%
if the character
well<00:06:15.520><c> there's</c><00:06:15.840><c> five</c><00:06:16.080><c> cases</c><00:06:16.560><c> remember</c><00:06:17.120><c> it</c>

00:06:17.270 --> 00:06:17.280 align:start position:0%
well there's five cases remember it
 

00:06:17.280 --> 00:06:19.909 align:start position:0%
well there's five cases remember it
could<00:06:17.440><c> be</c><00:06:17.680><c> one</c><00:06:17.840><c> of</c><00:06:17.919><c> the</c><00:06:18.160><c> four</c><00:06:18.560><c> operators</c><00:06:19.440><c> or</c><00:06:19.759><c> it</c>

00:06:19.909 --> 00:06:19.919 align:start position:0%
could be one of the four operators or it
 

00:06:19.919 --> 00:06:21.990 align:start position:0%
could be one of the four operators or it
could<00:06:20.080><c> be</c><00:06:20.560><c> any</c><00:06:20.880><c> other</c><00:06:21.120><c> character</c><00:06:21.600><c> and</c><00:06:21.759><c> any</c>

00:06:21.990 --> 00:06:22.000 align:start position:0%
could be any other character and any
 

00:06:22.000 --> 00:06:23.430 align:start position:0%
could be any other character and any
other<00:06:22.240><c> character</c><00:06:22.560><c> basically</c><00:06:23.039><c> means</c><00:06:23.280><c> that</c>

00:06:23.430 --> 00:06:23.440 align:start position:0%
other character basically means that
 

00:06:23.440 --> 00:06:26.150 align:start position:0%
other character basically means that
it's<00:06:23.600><c> a</c><00:06:23.759><c> digit</c><00:06:24.160><c> or</c><00:06:24.400><c> some</c><00:06:24.720><c> number</c><00:06:25.199><c> right</c><00:06:25.840><c> so</c>

00:06:26.150 --> 00:06:26.160 align:start position:0%
it's a digit or some number right so
 

00:06:26.160 --> 00:06:28.710 align:start position:0%
it's a digit or some number right so
let's<00:06:26.560><c> basically</c><00:06:26.960><c> make</c><00:06:27.199><c> those</c><00:06:27.440><c> conditions</c><00:06:28.240><c> so</c>

00:06:28.710 --> 00:06:28.720 align:start position:0%
let's basically make those conditions so
 

00:06:28.720 --> 00:06:31.189 align:start position:0%
let's basically make those conditions so
first<00:06:29.280><c> is</c><00:06:30.000><c> that</c><00:06:30.319><c> it's</c>

00:06:31.189 --> 00:06:31.199 align:start position:0%
first is that it's
 

00:06:31.199 --> 00:06:34.150 align:start position:0%
first is that it's
plus<00:06:31.919><c> and</c><00:06:32.160><c> let</c><00:06:32.319><c> me</c><00:06:32.479><c> just</c><00:06:32.800><c> kind</c><00:06:32.960><c> of</c><00:06:33.280><c> you</c><00:06:33.440><c> know</c>

00:06:34.150 --> 00:06:34.160 align:start position:0%
plus and let me just kind of you know
 

00:06:34.160 --> 00:06:36.710 align:start position:0%
plus and let me just kind of you know
copy<00:06:34.479><c> and</c><00:06:34.639><c> paste</c><00:06:34.880><c> this</c><00:06:35.120><c> stuff</c><00:06:35.520><c> and</c><00:06:35.600><c> then</c><00:06:35.919><c> get</c>

00:06:36.710 --> 00:06:36.720 align:start position:0%
copy and paste this stuff and then get
 

00:06:36.720 --> 00:06:37.590 align:start position:0%
copy and paste this stuff and then get
uh

00:06:37.590 --> 00:06:37.600 align:start position:0%
uh
 

00:06:37.600 --> 00:06:39.350 align:start position:0%
uh
it<00:06:37.919><c> updated</c><00:06:38.560><c> so</c>

00:06:39.350 --> 00:06:39.360 align:start position:0%
it updated so
 

00:06:39.360 --> 00:06:43.590 align:start position:0%
it updated so
the<00:06:39.600><c> cases</c><00:06:40.080><c> are</c><00:06:40.319><c> plus</c><00:06:41.120><c> minus</c><00:06:42.080><c> multiply</c><00:06:43.120><c> and</c>

00:06:43.590 --> 00:06:43.600 align:start position:0%
the cases are plus minus multiply and
 

00:06:43.600 --> 00:06:46.550 align:start position:0%
the cases are plus minus multiply and
divide<00:06:44.400><c> and</c><00:06:44.639><c> then</c><00:06:44.880><c> the</c><00:06:45.039><c> last</c><00:06:45.440><c> fifth</c><00:06:45.759><c> case</c><00:06:46.160><c> is</c>

00:06:46.550 --> 00:06:46.560 align:start position:0%
divide and then the last fifth case is
 

00:06:46.560 --> 00:06:48.150 align:start position:0%
divide and then the last fifth case is
where<00:06:46.720><c> it's</c><00:06:46.880><c> something</c><00:06:47.360><c> else</c><00:06:47.759><c> and</c><00:06:47.919><c> if</c><00:06:48.080><c> it's</c>

00:06:48.150 --> 00:06:48.160 align:start position:0%
where it's something else and if it's
 

00:06:48.160 --> 00:06:49.749 align:start position:0%
where it's something else and if it's
something<00:06:48.479><c> else</c><00:06:48.720><c> that</c><00:06:48.880><c> means</c><00:06:49.120><c> it's</c><00:06:49.280><c> a</c><00:06:49.360><c> number</c>

00:06:49.749 --> 00:06:49.759 align:start position:0%
something else that means it's a number
 

00:06:49.759 --> 00:06:51.589 align:start position:0%
something else that means it's a number
and<00:06:50.080><c> that's</c><00:06:50.400><c> the</c><00:06:50.479><c> simplest</c><00:06:51.039><c> case</c><00:06:51.280><c> of</c><00:06:51.440><c> all</c>

00:06:51.589 --> 00:06:51.599 align:start position:0%
and that's the simplest case of all
 

00:06:51.599 --> 00:06:53.110 align:start position:0%
and that's the simplest case of all
because<00:06:51.840><c> that</c><00:06:52.000><c> means</c><00:06:52.240><c> we</c><00:06:52.319><c> can</c><00:06:52.479><c> just</c><00:06:52.639><c> take</c><00:06:52.880><c> that</c>

00:06:53.110 --> 00:06:53.120 align:start position:0%
because that means we can just take that
 

00:06:53.120 --> 00:06:54.710 align:start position:0%
because that means we can just take that
character<00:06:53.599><c> and</c><00:06:53.680><c> then</c><00:06:53.919><c> append</c><00:06:54.319><c> it</c><00:06:54.400><c> to</c><00:06:54.560><c> our</c>

00:06:54.710 --> 00:06:54.720 align:start position:0%
character and then append it to our
 

00:06:54.720 --> 00:06:57.430 align:start position:0%
character and then append it to our
stack<00:06:55.280><c> but</c><00:06:55.520><c> it's</c><00:06:55.759><c> a</c><00:06:55.919><c> character</c><00:06:56.479><c> remember</c><00:06:57.120><c> but</c>

00:06:57.430 --> 00:06:57.440 align:start position:0%
stack but it's a character remember but
 

00:06:57.440 --> 00:06:59.270 align:start position:0%
stack but it's a character remember but
we<00:06:57.599><c> should</c><00:06:57.840><c> probably</c><00:06:58.160><c> convert</c><00:06:58.639><c> it</c><00:06:58.800><c> into</c><00:06:59.039><c> a</c>

00:06:59.270 --> 00:06:59.280 align:start position:0%
we should probably convert it into a
 

00:06:59.280 --> 00:07:01.029 align:start position:0%
we should probably convert it into a
number<00:06:59.599><c> before</c><00:06:59.919><c> we</c><00:07:00.080><c> actually</c><00:07:00.400><c> add</c><00:07:00.639><c> it</c><00:07:00.720><c> to</c><00:07:00.880><c> our</c>

00:07:01.029 --> 00:07:01.039 align:start position:0%
number before we actually add it to our
 

00:07:01.039 --> 00:07:02.629 align:start position:0%
number before we actually add it to our
stack<00:07:01.520><c> because</c><00:07:01.759><c> remember</c><00:07:02.160><c> what</c><00:07:02.240><c> we</c><00:07:02.400><c> want</c><00:07:02.560><c> to</c>

00:07:02.629 --> 00:07:02.639 align:start position:0%
stack because remember what we want to
 

00:07:02.639 --> 00:07:05.830 align:start position:0%
stack because remember what we want to
return<00:07:03.360><c> is</c><00:07:03.520><c> a</c><00:07:03.840><c> number</c><00:07:04.400><c> not</c><00:07:04.720><c> a</c><00:07:05.039><c> character</c><00:07:05.599><c> okay</c>

00:07:05.830 --> 00:07:05.840 align:start position:0%
return is a number not a character okay
 

00:07:05.840 --> 00:07:07.909 align:start position:0%
return is a number not a character okay
so<00:07:06.080><c> now</c><00:07:06.240><c> let's</c><00:07:06.479><c> start</c><00:07:06.800><c> with</c><00:07:07.199><c> the</c><00:07:07.599><c> plus</c>

00:07:07.909 --> 00:07:07.919 align:start position:0%
so now let's start with the plus
 

00:07:07.919 --> 00:07:09.909 align:start position:0%
so now let's start with the plus
condition<00:07:08.720><c> well</c><00:07:08.960><c> remember</c><00:07:09.280><c> what</c><00:07:09.440><c> i</c><00:07:09.599><c> said</c><00:07:09.840><c> we</c>

00:07:09.909 --> 00:07:09.919 align:start position:0%
condition well remember what i said we
 

00:07:09.919 --> 00:07:12.230 align:start position:0%
condition well remember what i said we
can<00:07:10.080><c> just</c><00:07:10.319><c> pop</c><00:07:10.639><c> from</c><00:07:10.880><c> our</c><00:07:11.039><c> stack</c><00:07:11.599><c> twice</c><00:07:12.160><c> and</c>

00:07:12.230 --> 00:07:12.240 align:start position:0%
can just pop from our stack twice and
 

00:07:12.240 --> 00:07:15.029 align:start position:0%
can just pop from our stack twice and
then<00:07:12.560><c> add</c><00:07:12.800><c> those</c><00:07:13.120><c> values</c><00:07:13.919><c> together</c><00:07:14.639><c> and</c><00:07:14.720><c> then</c>

00:07:15.029 --> 00:07:15.039 align:start position:0%
then add those values together and then
 

00:07:15.039 --> 00:07:17.189 align:start position:0%
then add those values together and then
append<00:07:15.440><c> that</c><00:07:15.680><c> to</c><00:07:15.840><c> the</c><00:07:16.000><c> stack</c><00:07:16.400><c> so</c><00:07:16.800><c> for</c><00:07:16.960><c> this</c>

00:07:17.189 --> 00:07:17.199 align:start position:0%
append that to the stack so for this
 

00:07:17.199 --> 00:07:18.870 align:start position:0%
append that to the stack so for this
it's<00:07:17.360><c> actually</c><00:07:17.759><c> pretty</c><00:07:18.000><c> simple</c><00:07:18.319><c> as</c><00:07:18.400><c> well</c><00:07:18.639><c> we</c>

00:07:18.870 --> 00:07:18.880 align:start position:0%
it's actually pretty simple as well we
 

00:07:18.880 --> 00:07:21.189 align:start position:0%
it's actually pretty simple as well we
pop<00:07:19.120><c> from</c><00:07:19.280><c> the</c><00:07:19.440><c> stack</c><00:07:19.759><c> twice</c><00:07:20.319><c> take</c><00:07:20.560><c> the</c><00:07:20.720><c> return</c>

00:07:21.189 --> 00:07:21.199 align:start position:0%
pop from the stack twice take the return
 

00:07:21.199 --> 00:07:23.909 align:start position:0%
pop from the stack twice take the return
values<00:07:21.919><c> add</c><00:07:22.160><c> them</c><00:07:22.400><c> together</c><00:07:23.039><c> and</c><00:07:23.120><c> then</c><00:07:23.360><c> append</c>

00:07:23.909 --> 00:07:23.919 align:start position:0%
values add them together and then append
 

00:07:23.919 --> 00:07:26.870 align:start position:0%
values add them together and then append
that<00:07:24.479><c> to</c><00:07:24.720><c> the</c><00:07:24.880><c> stack</c><00:07:25.599><c> so</c><00:07:25.840><c> that</c><00:07:26.000><c> the</c><00:07:26.240><c> result</c><00:07:26.720><c> is</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
that to the stack so that the result is
 

00:07:26.880 --> 00:07:30.150 align:start position:0%
that to the stack so that the result is
added<00:07:27.199><c> to</c><00:07:27.360><c> the</c><00:07:27.440><c> sac</c><00:07:28.160><c> pretty</c><00:07:28.479><c> simple</c><00:07:29.280><c> and</c><00:07:29.919><c> for</c>

00:07:30.150 --> 00:07:30.160 align:start position:0%
added to the sac pretty simple and for
 

00:07:30.160 --> 00:07:32.790 align:start position:0%
added to the sac pretty simple and for
multiply<00:07:30.960><c> that's</c><00:07:31.360><c> also</c><00:07:31.759><c> going</c><00:07:31.840><c> to</c><00:07:32.000><c> be</c><00:07:32.479><c> almost</c>

00:07:32.790 --> 00:07:32.800 align:start position:0%
multiply that's also going to be almost
 

00:07:32.800 --> 00:07:34.309 align:start position:0%
multiply that's also going to be almost
the<00:07:32.960><c> exact</c><00:07:33.440><c> the</c><00:07:33.520><c> same</c><00:07:33.680><c> thing</c><00:07:33.919><c> right</c><00:07:34.080><c> instead</c>

00:07:34.309 --> 00:07:34.319 align:start position:0%
the exact the same thing right instead
 

00:07:34.319 --> 00:07:36.070 align:start position:0%
the exact the same thing right instead
of<00:07:34.560><c> plus</c><00:07:34.960><c> we're</c><00:07:35.120><c> going</c><00:07:35.199><c> to</c><00:07:35.280><c> be</c><00:07:35.440><c> doing</c>

00:07:36.070 --> 00:07:36.080 align:start position:0%
of plus we're going to be doing
 

00:07:36.080 --> 00:07:38.309 align:start position:0%
of plus we're going to be doing
multiplication<00:07:37.120><c> so</c><00:07:37.520><c> let's</c><00:07:37.840><c> you</c><00:07:37.919><c> know</c><00:07:38.080><c> just</c>

00:07:38.309 --> 00:07:38.319 align:start position:0%
multiplication so let's you know just
 

00:07:38.319 --> 00:07:40.790 align:start position:0%
multiplication so let's you know just
copy<00:07:38.720><c> paste</c><00:07:39.199><c> and</c><00:07:39.360><c> then</c><00:07:39.680><c> update</c><00:07:40.080><c> that</c><00:07:40.319><c> as</c><00:07:40.400><c> well</c>

00:07:40.790 --> 00:07:40.800 align:start position:0%
copy paste and then update that as well
 

00:07:40.800 --> 00:07:41.830 align:start position:0%
copy paste and then update that as well
it's<00:07:40.960><c> going</c><00:07:41.039><c> to</c><00:07:41.120><c> be</c><00:07:41.199><c> a</c><00:07:41.280><c> little</c><00:07:41.440><c> bit</c><00:07:41.599><c> more</c>

00:07:41.830 --> 00:07:41.840 align:start position:0%
it's going to be a little bit more
 

00:07:41.840 --> 00:07:44.390 align:start position:0%
it's going to be a little bit more
tricky<00:07:42.240><c> though</c><00:07:42.479><c> for</c><00:07:42.720><c> subtract</c><00:07:43.520><c> and</c><00:07:43.840><c> divide</c>

00:07:44.390 --> 00:07:44.400 align:start position:0%
tricky though for subtract and divide
 

00:07:44.400 --> 00:07:46.790 align:start position:0%
tricky though for subtract and divide
because<00:07:44.639><c> the</c><00:07:44.879><c> order</c><00:07:45.680><c> that</c><00:07:45.919><c> we're</c><00:07:46.240><c> popping</c><00:07:46.639><c> it</c>

00:07:46.790 --> 00:07:46.800 align:start position:0%
because the order that we're popping it
 

00:07:46.800 --> 00:07:48.469 align:start position:0%
because the order that we're popping it
in<00:07:46.960><c> is</c><00:07:47.120><c> not</c><00:07:47.280><c> the</c><00:07:47.520><c> order</c><00:07:47.840><c> that</c><00:07:48.000><c> we</c><00:07:48.160><c> want</c><00:07:48.319><c> to</c>

00:07:48.469 --> 00:07:48.479 align:start position:0%
in is not the order that we want to
 

00:07:48.479 --> 00:07:51.189 align:start position:0%
in is not the order that we want to
apply<00:07:48.960><c> that</c><00:07:49.440><c> subtract</c><00:07:50.160><c> and</c><00:07:50.720><c> divide</c>

00:07:51.189 --> 00:07:51.199 align:start position:0%
apply that subtract and divide
 

00:07:51.199 --> 00:07:52.790 align:start position:0%
apply that subtract and divide
operations<00:07:51.919><c> so</c>

00:07:52.790 --> 00:07:52.800 align:start position:0%
operations so
 

00:07:52.800 --> 00:07:55.430 align:start position:0%
operations so
for<00:07:53.199><c> subtract</c><00:07:54.080><c> well</c><00:07:54.400><c> again</c><00:07:54.800><c> we</c><00:07:54.960><c> are</c><00:07:55.120><c> going</c><00:07:55.280><c> to</c>

00:07:55.430 --> 00:07:55.440 align:start position:0%
for subtract well again we are going to
 

00:07:55.440 --> 00:07:57.510 align:start position:0%
for subtract well again we are going to
pop<00:07:55.840><c> twice</c><00:07:56.319><c> because</c><00:07:56.639><c> we</c><00:07:56.800><c> want</c><00:07:57.039><c> to</c><00:07:57.120><c> get</c><00:07:57.280><c> those</c>

00:07:57.510 --> 00:07:57.520 align:start position:0%
pop twice because we want to get those
 

00:07:57.520 --> 00:07:59.990 align:start position:0%
pop twice because we want to get those
two<00:07:57.759><c> values</c><00:07:58.240><c> that</c><00:07:58.319><c> were</c><00:07:58.560><c> popped</c><00:07:59.199><c> so</c><00:07:59.520><c> let's</c><00:07:59.840><c> do</c>

00:07:59.990 --> 00:08:00.000 align:start position:0%
two values that were popped so let's do
 

00:08:00.000 --> 00:08:01.990 align:start position:0%
two values that were popped so let's do
that<00:08:00.639><c> this</c><00:08:01.199><c> is</c>

00:08:01.990 --> 00:08:02.000 align:start position:0%
that this is
 

00:08:02.000 --> 00:08:04.230 align:start position:0%
that this is
let's<00:08:02.240><c> call</c><00:08:02.400><c> them</c><00:08:02.639><c> just</c><00:08:02.800><c> a</c><00:08:03.039><c> and</c><00:08:03.120><c> b</c><00:08:03.360><c> arbitrarily</c>

00:08:04.230 --> 00:08:04.240 align:start position:0%
let's call them just a and b arbitrarily
 

00:08:04.240 --> 00:08:05.510 align:start position:0%
let's call them just a and b arbitrarily
you<00:08:04.400><c> could</c><00:08:04.560><c> call</c><00:08:04.720><c> them</c><00:08:04.879><c> anything</c><00:08:05.199><c> that</c><00:08:05.360><c> you</c>

00:08:05.510 --> 00:08:05.520 align:start position:0%
you could call them anything that you
 

00:08:05.520 --> 00:08:07.430 align:start position:0%
you could call them anything that you
want<00:08:06.319><c> but</c><00:08:06.479><c> when</c><00:08:06.639><c> we</c>

00:08:07.430 --> 00:08:07.440 align:start position:0%
want but when we
 

00:08:07.440 --> 00:08:10.150 align:start position:0%
want but when we
subtract<00:08:07.919><c> them</c><00:08:08.400><c> we</c><00:08:08.639><c> want</c><00:08:08.879><c> to</c><00:08:09.039><c> subtract</c><00:08:10.000><c> we</c>

00:08:10.150 --> 00:08:10.160 align:start position:0%
subtract them we want to subtract we
 

00:08:10.160 --> 00:08:11.830 align:start position:0%
subtract them we want to subtract we
want<00:08:10.319><c> to</c><00:08:10.479><c> take</c><00:08:10.639><c> the</c><00:08:10.720><c> one</c><00:08:10.960><c> that</c><00:08:11.039><c> was</c><00:08:11.280><c> popped</c>

00:08:11.830 --> 00:08:11.840 align:start position:0%
want to take the one that was popped
 

00:08:11.840 --> 00:08:13.990 align:start position:0%
want to take the one that was popped
second<00:08:12.479><c> and</c><00:08:12.800><c> subtract</c><00:08:13.360><c> it</c><00:08:13.440><c> from</c><00:08:13.599><c> the</c><00:08:13.680><c> one</c><00:08:13.840><c> that</c>

00:08:13.990 --> 00:08:14.000 align:start position:0%
second and subtract it from the one that
 

00:08:14.000 --> 00:08:17.670 align:start position:0%
second and subtract it from the one that
was<00:08:14.160><c> popped</c><00:08:14.479><c> first</c><00:08:14.800><c> so</c><00:08:15.120><c> b</c><00:08:15.599><c> minus</c><00:08:16.160><c> a</c><00:08:16.800><c> and</c><00:08:17.039><c> then</c>

00:08:17.670 --> 00:08:17.680 align:start position:0%
was popped first so b minus a and then
 

00:08:17.680 --> 00:08:20.710 align:start position:0%
was popped first so b minus a and then
take<00:08:17.919><c> that</c><00:08:18.319><c> and</c><00:08:18.400><c> then</c><00:08:18.800><c> append</c><00:08:19.360><c> it</c><00:08:19.680><c> to</c><00:08:20.080><c> our</c>

00:08:20.710 --> 00:08:20.720 align:start position:0%
take that and then append it to our
 

00:08:20.720 --> 00:08:23.110 align:start position:0%
take that and then append it to our
stack<00:08:21.440><c> so</c><00:08:21.840><c> this</c><00:08:22.160><c> though</c><00:08:22.479><c> is</c><00:08:22.560><c> going</c><00:08:22.639><c> to</c><00:08:22.720><c> be</c><00:08:22.879><c> very</c>

00:08:23.110 --> 00:08:23.120 align:start position:0%
stack so this though is going to be very
 

00:08:23.120 --> 00:08:25.029 align:start position:0%
stack so this though is going to be very
similar<00:08:23.599><c> to</c><00:08:23.759><c> what</c><00:08:23.840><c> we</c><00:08:24.000><c> do</c><00:08:24.240><c> in</c><00:08:24.319><c> our</c><00:08:24.479><c> divide</c>

00:08:25.029 --> 00:08:25.039 align:start position:0%
similar to what we do in our divide
 

00:08:25.039 --> 00:08:27.270 align:start position:0%
similar to what we do in our divide
operation<00:08:25.599><c> down</c><00:08:25.919><c> here</c><00:08:26.639><c> we're</c><00:08:26.800><c> going</c><00:08:26.879><c> to</c><00:08:27.039><c> pop</c>

00:08:27.270 --> 00:08:27.280 align:start position:0%
operation down here we're going to pop
 

00:08:27.280 --> 00:08:30.309 align:start position:0%
operation down here we're going to pop
two<00:08:27.440><c> values</c><00:08:28.080><c> and</c><00:08:28.160><c> then</c><00:08:28.479><c> in</c><00:08:28.639><c> that</c><00:08:28.879><c> same</c><00:08:29.199><c> order</c><00:08:29.599><c> b</c>

00:08:30.309 --> 00:08:30.319 align:start position:0%
two values and then in that same order b
 

00:08:30.319 --> 00:08:32.469 align:start position:0%
two values and then in that same order b
and<00:08:30.479><c> then</c><00:08:30.720><c> a</c><00:08:31.039><c> we're</c><00:08:31.199><c> going</c><00:08:31.280><c> to</c><00:08:31.440><c> divide</c><00:08:32.080><c> them</c>

00:08:32.469 --> 00:08:32.479 align:start position:0%
and then a we're going to divide them
 

00:08:32.479 --> 00:08:35.110 align:start position:0%
and then a we're going to divide them
rather<00:08:32.800><c> than</c><00:08:33.039><c> subtract</c><00:08:33.519><c> them</c><00:08:34.000><c> but</c><00:08:34.479><c> in</c><00:08:34.640><c> python</c>

00:08:35.110 --> 00:08:35.120 align:start position:0%
rather than subtract them but in python
 

00:08:35.120 --> 00:08:36.630 align:start position:0%
rather than subtract them but in python
when<00:08:35.279><c> you</c><00:08:35.360><c> do</c><00:08:35.519><c> this</c><00:08:35.919><c> this</c><00:08:36.080><c> is</c><00:08:36.240><c> actually</c>

00:08:36.630 --> 00:08:36.640 align:start position:0%
when you do this this is actually
 

00:08:36.640 --> 00:08:38.630 align:start position:0%
when you do this this is actually
decimal<00:08:37.120><c> division</c><00:08:37.519><c> but</c><00:08:37.680><c> we</c><00:08:37.839><c> want</c><00:08:38.000><c> to</c><00:08:38.159><c> round</c><00:08:38.479><c> it</c>

00:08:38.630 --> 00:08:38.640 align:start position:0%
decimal division but we want to round it
 

00:08:38.640 --> 00:08:41.110 align:start position:0%
decimal division but we want to round it
towards<00:08:39.120><c> zero</c><00:08:39.760><c> so</c><00:08:40.320><c> to</c><00:08:40.479><c> do</c><00:08:40.640><c> that</c><00:08:40.800><c> we</c><00:08:40.959><c> can</c>

00:08:41.110 --> 00:08:41.120 align:start position:0%
towards zero so to do that we can
 

00:08:41.120 --> 00:08:43.110 align:start position:0%
towards zero so to do that we can
actually<00:08:41.440><c> just</c><00:08:41.760><c> call</c><00:08:42.080><c> the</c><00:08:42.399><c> int</c><00:08:42.719><c> function</c>

00:08:43.110 --> 00:08:43.120 align:start position:0%
actually just call the int function
 

00:08:43.120 --> 00:08:45.350 align:start position:0%
actually just call the int function
which<00:08:43.279><c> will</c><00:08:43.519><c> convert</c><00:08:43.919><c> it</c><00:08:44.000><c> to</c><00:08:44.159><c> an</c><00:08:44.320><c> integer</c><00:08:44.880><c> and</c>

00:08:45.350 --> 00:08:45.360 align:start position:0%
which will convert it to an integer and
 

00:08:45.360 --> 00:08:47.910 align:start position:0%
which will convert it to an integer and
also<00:08:45.839><c> round</c><00:08:46.240><c> it</c><00:08:46.399><c> towards</c><00:08:46.800><c> zero</c><00:08:47.279><c> at</c><00:08:47.360><c> the</c><00:08:47.519><c> same</c>

00:08:47.910 --> 00:08:47.920 align:start position:0%
also round it towards zero at the same
 

00:08:47.920 --> 00:08:50.150 align:start position:0%
also round it towards zero at the same
time<00:08:48.480><c> so</c><00:08:48.640><c> that's</c><00:08:48.959><c> pretty</c><00:08:49.200><c> much</c><00:08:49.440><c> the</c><00:08:49.680><c> entire</c>

00:08:50.150 --> 00:08:50.160 align:start position:0%
time so that's pretty much the entire
 

00:08:50.160 --> 00:08:51.430 align:start position:0%
time so that's pretty much the entire
code<00:08:50.399><c> you</c><00:08:50.480><c> can</c><00:08:50.560><c> see</c><00:08:50.720><c> it's</c><00:08:50.880><c> mostly</c><00:08:51.200><c> just</c><00:08:51.360><c> a</c>

00:08:51.430 --> 00:08:51.440 align:start position:0%
code you can see it's mostly just a
 

00:08:51.440 --> 00:08:54.070 align:start position:0%
code you can see it's mostly just a
bunch<00:08:51.680><c> of</c><00:08:51.839><c> boilerplate</c><00:08:53.040><c> but</c><00:08:53.279><c> once</c><00:08:53.519><c> all</c><00:08:53.680><c> that's</c>

00:08:54.070 --> 00:08:54.080 align:start position:0%
bunch of boilerplate but once all that's
 

00:08:54.080 --> 00:08:56.790 align:start position:0%
bunch of boilerplate but once all that's
done<00:08:54.399><c> let's</c><00:08:54.720><c> go</c><00:08:54.880><c> ahead</c><00:08:55.360><c> and</c><00:08:55.680><c> return</c><00:08:56.480><c> the</c>

00:08:56.790 --> 00:08:56.800 align:start position:0%
done let's go ahead and return the
 

00:08:56.800 --> 00:08:59.190 align:start position:0%
done let's go ahead and return the
single<00:08:57.279><c> value</c><00:08:57.680><c> that</c><00:08:57.920><c> is</c><00:08:58.080><c> guaranteed</c><00:08:58.720><c> to</c><00:08:58.880><c> be</c><00:08:59.120><c> in</c>

00:08:59.190 --> 00:08:59.200 align:start position:0%
single value that is guaranteed to be in
 

00:08:59.200 --> 00:09:01.750 align:start position:0%
single value that is guaranteed to be in
the<00:08:59.360><c> stack</c><00:08:59.760><c> stack</c><00:09:00.160><c> at</c><00:09:00.320><c> index</c><00:09:00.720><c> zero</c><00:09:01.279><c> and</c><00:09:01.440><c> then</c>

00:09:01.750 --> 00:09:01.760 align:start position:0%
the stack stack at index zero and then
 

00:09:01.760 --> 00:09:03.750 align:start position:0%
the stack stack at index zero and then
make<00:09:01.920><c> sure</c><00:09:02.160><c> that</c><00:09:02.320><c> our</c><00:09:02.480><c> code</c><00:09:02.800><c> works</c><00:09:03.120><c> by</c><00:09:03.360><c> running</c>

00:09:03.750 --> 00:09:03.760 align:start position:0%
make sure that our code works by running
 

00:09:03.760 --> 00:09:06.070 align:start position:0%
make sure that our code works by running
it<00:09:04.160><c> and</c><00:09:04.320><c> as</c><00:09:04.480><c> you</c><00:09:04.560><c> can</c><00:09:04.640><c> see</c><00:09:04.800><c> on</c><00:09:04.959><c> the</c><00:09:05.120><c> left</c><00:09:05.680><c> yes</c><00:09:05.920><c> it</c>

00:09:06.070 --> 00:09:06.080 align:start position:0%
it and as you can see on the left yes it
 

00:09:06.080 --> 00:09:07.910 align:start position:0%
it and as you can see on the left yes it
does<00:09:06.320><c> and</c><00:09:06.480><c> it's</c><00:09:06.640><c> very</c><00:09:06.959><c> efficient</c><00:09:07.360><c> so</c><00:09:07.519><c> i</c><00:09:07.680><c> really</c>

00:09:07.910 --> 00:09:07.920 align:start position:0%
does and it's very efficient so i really
 

00:09:07.920 --> 00:09:10.070 align:start position:0%
does and it's very efficient so i really
hope<00:09:08.160><c> that</c><00:09:08.320><c> this</c><00:09:08.480><c> was</c><00:09:08.640><c> helpful</c><00:09:09.200><c> if</c><00:09:09.440><c> it</c><00:09:09.600><c> was</c>

00:09:10.070 --> 00:09:10.080 align:start position:0%
hope that this was helpful if it was
 

00:09:10.080 --> 00:09:11.590 align:start position:0%
hope that this was helpful if it was
please<00:09:10.399><c> like</c><00:09:10.640><c> and</c><00:09:10.720><c> subscribe</c><00:09:11.200><c> it</c><00:09:11.360><c> really</c>

00:09:11.590 --> 00:09:11.600 align:start position:0%
please like and subscribe it really
 

00:09:11.600 --> 00:09:13.269 align:start position:0%
please like and subscribe it really
supports<00:09:12.000><c> the</c><00:09:12.160><c> channel</c><00:09:12.480><c> a</c><00:09:12.640><c> lot</c><00:09:12.880><c> consider</c>

00:09:13.269 --> 00:09:13.279 align:start position:0%
supports the channel a lot consider
 

00:09:13.279 --> 00:09:14.710 align:start position:0%
supports the channel a lot consider
checking<00:09:13.600><c> out</c><00:09:13.680><c> my</c><00:09:13.920><c> patreon</c><00:09:14.320><c> where</c><00:09:14.480><c> you</c><00:09:14.560><c> can</c>

00:09:14.710 --> 00:09:14.720 align:start position:0%
checking out my patreon where you can
 

00:09:14.720 --> 00:09:16.070 align:start position:0%
checking out my patreon where you can
further<00:09:15.040><c> support</c><00:09:15.360><c> the</c><00:09:15.519><c> channel</c><00:09:15.839><c> and</c>

00:09:16.070 --> 00:09:16.080 align:start position:0%
further support the channel and
 

00:09:16.080 --> 00:09:17.910 align:start position:0%
further support the channel and
hopefully<00:09:16.560><c> i'll</c><00:09:16.800><c> see</c><00:09:16.959><c> you</c><00:09:17.120><c> pretty</c><00:09:17.360><c> soon</c>

00:09:17.910 --> 00:09:17.920 align:start position:0%
hopefully i'll see you pretty soon
 

00:09:17.920 --> 00:09:20.959 align:start position:0%
hopefully i'll see you pretty soon
thanks<00:09:18.160><c> for</c><00:09:18.320><c> watching</c>

