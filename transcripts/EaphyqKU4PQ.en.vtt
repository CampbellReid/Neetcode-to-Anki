WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.589 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.560><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c>

00:00:01.589 --> 00:00:01.599 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.599 --> 00:00:03.429 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.760><c> some</c><00:00:01.920><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.720><c> today</c><00:00:02.960><c> so</c><00:00:03.120><c> today</c>

00:00:03.429 --> 00:00:03.439 align:start position:0%
write some more neat code today so today
 

00:00:03.439 --> 00:00:04.230 align:start position:0%
write some more neat code today so today
let's<00:00:03.760><c> solve</c>

00:00:04.230 --> 00:00:04.240 align:start position:0%
let's solve
 

00:00:04.240 --> 00:00:06.230 align:start position:0%
let's solve
network<00:00:04.880><c> delay</c><00:00:05.359><c> time</c><00:00:05.680><c> the</c><00:00:05.839><c> reason</c><00:00:06.160><c> i'm</c>

00:00:06.230 --> 00:00:06.240 align:start position:0%
network delay time the reason i'm
 

00:00:06.240 --> 00:00:07.909 align:start position:0%
network delay time the reason i'm
solving<00:00:06.640><c> this</c><00:00:06.799><c> problem</c><00:00:07.200><c> is</c><00:00:07.359><c> because</c><00:00:07.600><c> it's</c><00:00:07.839><c> a</c>

00:00:07.909 --> 00:00:07.919 align:start position:0%
solving this problem is because it's a
 

00:00:07.919 --> 00:00:09.589 align:start position:0%
solving this problem is because it's a
rare<00:00:08.240><c> problem</c><00:00:08.639><c> that</c><00:00:08.720><c> you</c><00:00:08.960><c> actually</c><00:00:09.280><c> have</c><00:00:09.440><c> to</c>

00:00:09.589 --> 00:00:09.599 align:start position:0%
rare problem that you actually have to
 

00:00:09.599 --> 00:00:10.150 align:start position:0%
rare problem that you actually have to
use

00:00:10.150 --> 00:00:10.160 align:start position:0%
use
 

00:00:10.160 --> 00:00:12.789 align:start position:0%
use
ajixtra's<00:00:11.599><c> however</c><00:00:11.920><c> you</c><00:00:12.080><c> pronounce</c><00:00:12.480><c> that</c>

00:00:12.789 --> 00:00:12.799 align:start position:0%
ajixtra's however you pronounce that
 

00:00:12.799 --> 00:00:13.270 align:start position:0%
ajixtra's however you pronounce that
name

00:00:13.270 --> 00:00:13.280 align:start position:0%
name
 

00:00:13.280 --> 00:00:15.829 align:start position:0%
name
this<00:00:13.519><c> algorithm</c><00:00:14.160><c> it's</c><00:00:14.480><c> the</c><00:00:14.799><c> shortest</c><00:00:15.280><c> path</c>

00:00:15.829 --> 00:00:15.839 align:start position:0%
this algorithm it's the shortest path
 

00:00:15.839 --> 00:00:16.550 align:start position:0%
this algorithm it's the shortest path
algorithm

00:00:16.550 --> 00:00:16.560 align:start position:0%
algorithm
 

00:00:16.560 --> 00:00:19.510 align:start position:0%
algorithm
it's<00:00:17.119><c> not</c><00:00:17.520><c> super</c><00:00:17.840><c> common</c><00:00:18.240><c> on</c><00:00:18.400><c> leak</c><00:00:18.640><c> code</c><00:00:18.960><c> but</c><00:00:19.359><c> i</c>

00:00:19.510 --> 00:00:19.520 align:start position:0%
it's not super common on leak code but i
 

00:00:19.520 --> 00:00:20.710 align:start position:0%
it's not super common on leak code but i
think<00:00:19.680><c> it's</c><00:00:19.760><c> a</c><00:00:19.840><c> really</c><00:00:20.080><c> cool</c>

00:00:20.710 --> 00:00:20.720 align:start position:0%
think it's a really cool
 

00:00:20.720 --> 00:00:22.790 align:start position:0%
think it's a really cool
problem<00:00:21.199><c> to</c><00:00:21.359><c> solve</c><00:00:21.760><c> a</c><00:00:21.840><c> cool</c><00:00:22.160><c> algorithm</c><00:00:22.640><c> to</c>

00:00:22.790 --> 00:00:22.800 align:start position:0%
problem to solve a cool algorithm to
 

00:00:22.800 --> 00:00:24.950 align:start position:0%
problem to solve a cool algorithm to
implement<00:00:23.279><c> so</c><00:00:23.600><c> obviously</c><00:00:24.080><c> this</c><00:00:24.320><c> is</c><00:00:24.480><c> a</c><00:00:24.560><c> graph</c>

00:00:24.950 --> 00:00:24.960 align:start position:0%
implement so obviously this is a graph
 

00:00:24.960 --> 00:00:26.070 align:start position:0%
implement so obviously this is a graph
problem<00:00:25.279><c> we're</c><00:00:25.519><c> given</c>

00:00:26.070 --> 00:00:26.080 align:start position:0%
problem we're given
 

00:00:26.080 --> 00:00:29.269 align:start position:0%
problem we're given
a<00:00:26.320><c> network</c><00:00:26.800><c> of</c><00:00:27.119><c> n</c><00:00:27.680><c> nodes</c><00:00:28.240><c> labeled</c><00:00:28.720><c> from</c>

00:00:29.269 --> 00:00:29.279 align:start position:0%
a network of n nodes labeled from
 

00:00:29.279 --> 00:00:32.870 align:start position:0%
a network of n nodes labeled from
1<00:00:29.679><c> to</c><00:00:30.080><c> n</c><00:00:30.720><c> and</c><00:00:30.880><c> we're</c><00:00:31.039><c> also</c><00:00:31.439><c> given</c><00:00:31.760><c> a</c><00:00:32.000><c> list</c><00:00:32.480><c> of</c>

00:00:32.870 --> 00:00:32.880 align:start position:0%
1 to n and we're also given a list of
 

00:00:32.880 --> 00:00:35.190 align:start position:0%
1 to n and we're also given a list of
times<00:00:33.520><c> the</c><00:00:33.760><c> times</c><00:00:34.239><c> are</c><00:00:34.320><c> going</c><00:00:34.480><c> to</c><00:00:34.559><c> be</c><00:00:34.800><c> our</c>

00:00:35.190 --> 00:00:35.200 align:start position:0%
times the times are going to be our
 

00:00:35.200 --> 00:00:35.990 align:start position:0%
times the times are going to be our
edges<00:00:35.680><c> so</c>

00:00:35.990 --> 00:00:36.000 align:start position:0%
edges so
 

00:00:36.000 --> 00:00:38.549 align:start position:0%
edges so
it's<00:00:36.160><c> going</c><00:00:36.239><c> to</c><00:00:36.320><c> be</c><00:00:36.559><c> directed</c><00:00:37.280><c> edges</c><00:00:37.680><c> so</c><00:00:38.320><c> a</c>

00:00:38.549 --> 00:00:38.559 align:start position:0%
it's going to be directed edges so a
 

00:00:38.559 --> 00:00:39.190 align:start position:0%
it's going to be directed edges so a
time

00:00:39.190 --> 00:00:39.200 align:start position:0%
time
 

00:00:39.200 --> 00:00:42.310 align:start position:0%
time
is<00:00:39.520><c> a</c><00:00:39.760><c> triple</c><00:00:40.320><c> value</c><00:00:41.120><c> the</c><00:00:41.360><c> first</c><00:00:41.760><c> value</c><00:00:42.239><c> in</c>

00:00:42.310 --> 00:00:42.320 align:start position:0%
is a triple value the first value in
 

00:00:42.320 --> 00:00:43.190 align:start position:0%
is a triple value the first value in
this<00:00:42.640><c> triple</c>

00:00:43.190 --> 00:00:43.200 align:start position:0%
this triple
 

00:00:43.200 --> 00:00:45.830 align:start position:0%
this triple
is<00:00:43.440><c> going</c><00:00:43.680><c> to</c><00:00:44.000><c> be</c><00:00:44.480><c> the</c><00:00:44.800><c> source</c><00:00:45.200><c> node</c><00:00:45.520><c> so</c><00:00:45.680><c> for</c>

00:00:45.830 --> 00:00:45.840 align:start position:0%
is going to be the source node so for
 

00:00:45.840 --> 00:00:47.350 align:start position:0%
is going to be the source node so for
example<00:00:46.239><c> this</c><00:00:46.480><c> node</c><00:00:46.800><c> 2</c>

00:00:47.350 --> 00:00:47.360 align:start position:0%
example this node 2
 

00:00:47.360 --> 00:00:49.430 align:start position:0%
example this node 2
the<00:00:47.600><c> second</c><00:00:47.920><c> node</c><00:00:48.239><c> the</c><00:00:48.399><c> second</c><00:00:48.719><c> value</c><00:00:49.280><c> is</c>

00:00:49.430 --> 00:00:49.440 align:start position:0%
the second node the second value is
 

00:00:49.440 --> 00:00:50.869 align:start position:0%
the second node the second value is
going<00:00:49.600><c> to</c><00:00:49.840><c> be</c><00:00:50.000><c> the</c><00:00:50.320><c> target</c>

00:00:50.869 --> 00:00:50.879 align:start position:0%
going to be the target
 

00:00:50.879 --> 00:00:54.069 align:start position:0%
going to be the target
node<00:00:51.600><c> for</c><00:00:51.760><c> example</c><00:00:52.399><c> 1</c><00:00:52.960><c> is</c><00:00:53.199><c> this</c><00:00:53.520><c> node</c>

00:00:54.069 --> 00:00:54.079 align:start position:0%
node for example 1 is this node
 

00:00:54.079 --> 00:00:55.910 align:start position:0%
node for example 1 is this node
and<00:00:54.480><c> the</c><00:00:54.640><c> reason</c><00:00:54.879><c> it's</c><00:00:55.039><c> a</c><00:00:55.120><c> target</c><00:00:55.520><c> is</c><00:00:55.600><c> we</c><00:00:55.760><c> can</c>

00:00:55.910 --> 00:00:55.920 align:start position:0%
and the reason it's a target is we can
 

00:00:55.920 --> 00:00:57.510 align:start position:0%
and the reason it's a target is we can
see<00:00:56.160><c> that</c><00:00:56.719><c> there</c><00:00:57.039><c> is</c><00:00:57.199><c> an</c>

00:00:57.510 --> 00:00:57.520 align:start position:0%
see that there is an
 

00:00:57.520 --> 00:01:01.029 align:start position:0%
see that there is an
outgoing<00:00:58.160><c> edge</c><00:00:58.640><c> going</c><00:00:59.199><c> from</c><00:00:59.760><c> two</c><00:01:00.480><c> to</c><00:01:00.640><c> the</c><00:01:00.800><c> one</c>

00:01:01.029 --> 00:01:01.039 align:start position:0%
outgoing edge going from two to the one
 

00:01:01.039 --> 00:01:02.950 align:start position:0%
outgoing edge going from two to the one
so<00:01:01.280><c> every</c><00:01:01.600><c> edge</c><00:01:01.920><c> is</c><00:01:02.079><c> going</c><00:01:02.160><c> to</c><00:01:02.239><c> be</c><00:01:02.480><c> directed</c>

00:01:02.950 --> 00:01:02.960 align:start position:0%
so every edge is going to be directed
 

00:01:02.960 --> 00:01:04.469 align:start position:0%
so every edge is going to be directed
right<00:01:03.199><c> we</c><00:01:03.280><c> can</c><00:01:03.440><c> see</c><00:01:03.600><c> there's</c><00:01:03.760><c> a</c><00:01:03.840><c> directed</c><00:01:04.320><c> edge</c>

00:01:04.469 --> 00:01:04.479 align:start position:0%
right we can see there's a directed edge
 

00:01:04.479 --> 00:01:05.910 align:start position:0%
right we can see there's a directed edge
there<00:01:04.720><c> a</c><00:01:04.799><c> directed</c><00:01:05.199><c> edge</c><00:01:05.439><c> here</c>

00:01:05.910 --> 00:01:05.920 align:start position:0%
there a directed edge here
 

00:01:05.920 --> 00:01:08.230 align:start position:0%
there a directed edge here
the<00:01:06.159><c> third</c><00:01:06.560><c> value</c><00:01:06.960><c> and</c><00:01:07.119><c> this</c><00:01:07.280><c> is</c><00:01:07.439><c> also</c><00:01:07.840><c> pretty</c>

00:01:08.230 --> 00:01:08.240 align:start position:0%
the third value and this is also pretty
 

00:01:08.240 --> 00:01:10.070 align:start position:0%
the third value and this is also pretty
important<00:01:08.880><c> for</c><00:01:09.040><c> this</c><00:01:09.280><c> algorithm</c>

00:01:10.070 --> 00:01:10.080 align:start position:0%
important for this algorithm
 

00:01:10.080 --> 00:01:13.190 align:start position:0%
important for this algorithm
is<00:01:10.479><c> the</c><00:01:10.880><c> weight</c><00:01:11.360><c> of</c><00:01:11.520><c> the</c><00:01:11.840><c> edge</c><00:01:12.400><c> in</c><00:01:12.560><c> the</c><00:01:12.640><c> context</c>

00:01:13.190 --> 00:01:13.200 align:start position:0%
is the weight of the edge in the context
 

00:01:13.200 --> 00:01:14.950 align:start position:0%
is the weight of the edge in the context
of<00:01:13.280><c> this</c><00:01:13.520><c> problem</c><00:01:13.840><c> the</c><00:01:14.000><c> one</c><00:01:14.320><c> basically</c><00:01:14.720><c> just</c>

00:01:14.950 --> 00:01:14.960 align:start position:0%
of this problem the one basically just
 

00:01:14.960 --> 00:01:16.149 align:start position:0%
of this problem the one basically just
means<00:01:15.280><c> the</c><00:01:15.360><c> amount</c><00:01:15.680><c> of</c><00:01:15.840><c> time</c>

00:01:16.149 --> 00:01:16.159 align:start position:0%
means the amount of time
 

00:01:16.159 --> 00:01:17.510 align:start position:0%
means the amount of time
it's<00:01:16.320><c> going</c><00:01:16.400><c> to</c><00:01:16.479><c> take</c><00:01:16.720><c> for</c><00:01:16.799><c> us</c><00:01:16.960><c> to</c><00:01:17.119><c> go</c><00:01:17.280><c> from</c>

00:01:17.510 --> 00:01:17.520 align:start position:0%
it's going to take for us to go from
 

00:01:17.520 --> 00:01:19.590 align:start position:0%
it's going to take for us to go from
here<00:01:18.159><c> to</c><00:01:18.400><c> this</c><00:01:18.720><c> node</c><00:01:19.040><c> right</c>

00:01:19.590 --> 00:01:19.600 align:start position:0%
here to this node right
 

00:01:19.600 --> 00:01:22.550 align:start position:0%
here to this node right
but<00:01:20.000><c> this</c><00:01:20.240><c> is</c><00:01:20.400><c> the</c><00:01:20.720><c> weight</c><00:01:21.200><c> of</c><00:01:21.439><c> the</c><00:01:21.759><c> edge</c><00:01:22.320><c> so</c>

00:01:22.550 --> 00:01:22.560 align:start position:0%
but this is the weight of the edge so
 

00:01:22.560 --> 00:01:23.350 align:start position:0%
but this is the weight of the edge so
we're<00:01:22.880><c> given</c>

00:01:23.350 --> 00:01:23.360 align:start position:0%
we're given
 

00:01:23.360 --> 00:01:26.950 align:start position:0%
we're given
a<00:01:23.680><c> original</c><00:01:24.479><c> node</c><00:01:25.119><c> k</c><00:01:25.920><c> so</c><00:01:26.320><c> this</c><00:01:26.560><c> is</c><00:01:26.720><c> our</c>

00:01:26.950 --> 00:01:26.960 align:start position:0%
a original node k so this is our
 

00:01:26.960 --> 00:01:28.950 align:start position:0%
a original node k so this is our
starting<00:01:27.520><c> point</c><00:01:27.840><c> the</c><00:01:28.000><c> node</c><00:01:28.320><c> k</c><00:01:28.560><c> is</c><00:01:28.640><c> going</c><00:01:28.720><c> to</c><00:01:28.799><c> be</c>

00:01:28.950 --> 00:01:28.960 align:start position:0%
starting point the node k is going to be
 

00:01:28.960 --> 00:01:30.149 align:start position:0%
starting point the node k is going to be
the<00:01:29.119><c> starting</c><00:01:29.600><c> point</c>

00:01:30.149 --> 00:01:30.159 align:start position:0%
the starting point
 

00:01:30.159 --> 00:01:32.390 align:start position:0%
the starting point
so<00:01:30.320><c> for</c><00:01:30.560><c> example</c><00:01:31.040><c> in</c><00:01:31.280><c> this</c><00:01:31.600><c> problem</c><00:01:32.079><c> in</c><00:01:32.159><c> this</c>

00:01:32.390 --> 00:01:32.400 align:start position:0%
so for example in this problem in this
 

00:01:32.400 --> 00:01:33.749 align:start position:0%
so for example in this problem in this
origin<00:01:32.880><c> in</c><00:01:33.040><c> this</c><00:01:33.200><c> graph</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
origin in this graph
 

00:01:33.759 --> 00:01:35.910 align:start position:0%
origin in this graph
we're<00:01:33.920><c> given</c><00:01:34.240><c> k</c><00:01:34.560><c> equals</c><00:01:34.960><c> 2.</c><00:01:35.200><c> that</c><00:01:35.280><c> means</c><00:01:35.600><c> this</c>

00:01:35.910 --> 00:01:35.920 align:start position:0%
we're given k equals 2. that means this
 

00:01:35.920 --> 00:01:37.749 align:start position:0%
we're given k equals 2. that means this
is<00:01:36.079><c> the</c><00:01:36.479><c> starting</c><00:01:37.119><c> point</c>

00:01:37.749 --> 00:01:37.759 align:start position:0%
is the starting point
 

00:01:37.759 --> 00:01:40.469 align:start position:0%
is the starting point
for<00:01:38.079><c> us</c><00:01:38.960><c> what</c><00:01:39.200><c> we</c><00:01:39.439><c> want</c><00:01:39.600><c> to</c><00:01:39.759><c> do</c><00:01:40.159><c> in</c><00:01:40.240><c> this</c>

00:01:40.469 --> 00:01:40.479 align:start position:0%
for us what we want to do in this
 

00:01:40.479 --> 00:01:41.030 align:start position:0%
for us what we want to do in this
problem

00:01:41.030 --> 00:01:41.040 align:start position:0%
problem
 

00:01:41.040 --> 00:01:44.069 align:start position:0%
problem
is<00:01:41.520><c> starting</c><00:01:42.240><c> at</c><00:01:42.640><c> two</c><00:01:43.520><c> how</c>

00:01:44.069 --> 00:01:44.079 align:start position:0%
is starting at two how
 

00:01:44.079 --> 00:01:47.190 align:start position:0%
is starting at two how
long<00:01:44.399><c> would</c><00:01:44.640><c> it</c><00:01:44.880><c> take</c><00:01:45.200><c> for</c><00:01:45.520><c> us</c><00:01:46.079><c> to</c><00:01:46.320><c> visit</c>

00:01:47.190 --> 00:01:47.200 align:start position:0%
long would it take for us to visit
 

00:01:47.200 --> 00:01:50.550 align:start position:0%
long would it take for us to visit
every<00:01:47.920><c> single</c><00:01:48.880><c> node</c><00:01:49.600><c> basically</c><00:01:50.000><c> if</c><00:01:50.159><c> we</c>

00:01:50.550 --> 00:01:50.560 align:start position:0%
every single node basically if we
 

00:01:50.560 --> 00:01:53.590 align:start position:0%
every single node basically if we
if<00:01:50.640><c> we</c><00:01:50.960><c> sent</c><00:01:51.439><c> a</c><00:01:51.759><c> signal</c><00:01:52.240><c> from</c><00:01:52.479><c> here</c><00:01:52.960><c> in</c><00:01:53.200><c> every</c>

00:01:53.590 --> 00:01:53.600 align:start position:0%
if we sent a signal from here in every
 

00:01:53.600 --> 00:01:55.190 align:start position:0%
if we sent a signal from here in every
direction<00:01:54.079><c> so</c><00:01:54.240><c> in</c><00:01:54.399><c> this</c><00:01:54.560><c> direction</c>

00:01:55.190 --> 00:01:55.200 align:start position:0%
direction so in this direction
 

00:01:55.200 --> 00:01:57.350 align:start position:0%
direction so in this direction
and<00:01:55.439><c> in</c><00:01:55.600><c> this</c><00:01:55.840><c> direction</c><00:01:56.479><c> how</c><00:01:56.799><c> long</c><00:01:56.960><c> would</c><00:01:57.200><c> it</c>

00:01:57.350 --> 00:01:57.360 align:start position:0%
and in this direction how long would it
 

00:01:57.360 --> 00:01:59.190 align:start position:0%
and in this direction how long would it
take<00:01:57.600><c> for</c><00:01:57.759><c> that</c><00:01:58.079><c> signal</c><00:01:58.479><c> to</c><00:01:58.719><c> reach</c>

00:01:59.190 --> 00:01:59.200 align:start position:0%
take for that signal to reach
 

00:01:59.200 --> 00:02:01.429 align:start position:0%
take for that signal to reach
every<00:01:59.600><c> single</c><00:02:00.079><c> node</c><00:02:00.479><c> now</c><00:02:00.719><c> if</c><00:02:00.880><c> it's</c><00:02:01.119><c> not</c>

00:02:01.429 --> 00:02:01.439 align:start position:0%
every single node now if it's not
 

00:02:01.439 --> 00:02:02.789 align:start position:0%
every single node now if it's not
possible<00:02:01.920><c> for</c><00:02:02.159><c> example</c>

00:02:02.789 --> 00:02:02.799 align:start position:0%
possible for example
 

00:02:02.799 --> 00:02:04.789 align:start position:0%
possible for example
in<00:02:02.960><c> this</c><00:02:03.200><c> case</c><00:02:03.520><c> it</c><00:02:03.759><c> is</c><00:02:04.000><c> possible</c><00:02:04.320><c> but</c><00:02:04.479><c> what</c><00:02:04.640><c> if</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
in this case it is possible but what if
 

00:02:04.799 --> 00:02:06.789 align:start position:0%
in this case it is possible but what if
we<00:02:04.880><c> had</c><00:02:05.119><c> a</c><00:02:05.360><c> fifth</c><00:02:05.759><c> node</c><00:02:06.079><c> over</c><00:02:06.399><c> here</c>

00:02:06.789 --> 00:02:06.799 align:start position:0%
we had a fifth node over here
 

00:02:06.799 --> 00:02:09.190 align:start position:0%
we had a fifth node over here
that's<00:02:07.040><c> just</c><00:02:07.280><c> not</c><00:02:07.520><c> connected</c><00:02:08.399><c> to</c><00:02:08.640><c> these</c><00:02:08.959><c> four</c>

00:02:09.190 --> 00:02:09.200 align:start position:0%
that's just not connected to these four
 

00:02:09.200 --> 00:02:10.469 align:start position:0%
that's just not connected to these four
nodes<00:02:09.520><c> over</c><00:02:09.679><c> here</c><00:02:09.920><c> then</c><00:02:10.080><c> it</c><00:02:10.160><c> would</c><00:02:10.319><c> be</c>

00:02:10.469 --> 00:02:10.479 align:start position:0%
nodes over here then it would be
 

00:02:10.479 --> 00:02:11.350 align:start position:0%
nodes over here then it would be
impossible

00:02:11.350 --> 00:02:11.360 align:start position:0%
impossible
 

00:02:11.360 --> 00:02:14.150 align:start position:0%
impossible
for<00:02:11.599><c> this</c><00:02:11.840><c> node</c><00:02:12.239><c> to</c><00:02:12.480><c> send</c><00:02:12.800><c> a</c><00:02:12.959><c> signal</c><00:02:13.440><c> here</c><00:02:14.000><c> in</c>

00:02:14.150 --> 00:02:14.160 align:start position:0%
for this node to send a signal here in
 

00:02:14.160 --> 00:02:14.869 align:start position:0%
for this node to send a signal here in
that<00:02:14.400><c> case</c>

00:02:14.869 --> 00:02:14.879 align:start position:0%
that case
 

00:02:14.879 --> 00:02:16.470 align:start position:0%
that case
we're<00:02:15.120><c> simply</c><00:02:15.440><c> going</c><00:02:15.599><c> to</c><00:02:15.680><c> return</c><00:02:16.080><c> negative</c>

00:02:16.470 --> 00:02:16.480 align:start position:0%
we're simply going to return negative
 

00:02:16.480 --> 00:02:18.070 align:start position:0%
we're simply going to return negative
one<00:02:16.720><c> because</c><00:02:17.040><c> it's</c><00:02:17.200><c> not</c><00:02:17.440><c> possible</c>

00:02:18.070 --> 00:02:18.080 align:start position:0%
one because it's not possible
 

00:02:18.080 --> 00:02:19.830 align:start position:0%
one because it's not possible
but<00:02:18.239><c> what</c><00:02:18.400><c> about</c><00:02:18.720><c> in</c><00:02:18.879><c> this</c><00:02:19.120><c> problem</c><00:02:19.520><c> because</c>

00:02:19.830 --> 00:02:19.840 align:start position:0%
but what about in this problem because
 

00:02:19.840 --> 00:02:21.110 align:start position:0%
but what about in this problem because
it<00:02:20.080><c> is</c><00:02:20.400><c> possible</c>

00:02:21.110 --> 00:02:21.120 align:start position:0%
it is possible
 

00:02:21.120 --> 00:02:23.110 align:start position:0%
it is possible
how<00:02:21.520><c> long</c><00:02:21.920><c> is</c><00:02:22.080><c> it</c><00:02:22.160><c> going</c><00:02:22.239><c> to</c><00:02:22.400><c> take</c><00:02:22.720><c> that's</c><00:02:22.959><c> the</c>

00:02:23.110 --> 00:02:23.120 align:start position:0%
how long is it going to take that's the
 

00:02:23.120 --> 00:02:25.110 align:start position:0%
how long is it going to take that's the
only<00:02:23.360><c> question</c><00:02:23.920><c> now</c><00:02:24.160><c> looking</c><00:02:24.480><c> at</c><00:02:24.560><c> the</c><00:02:24.720><c> picture</c>

00:02:25.110 --> 00:02:25.120 align:start position:0%
only question now looking at the picture
 

00:02:25.120 --> 00:02:26.550 align:start position:0%
only question now looking at the picture
it's<00:02:25.360><c> pretty</c><00:02:25.680><c> obvious</c>

00:02:26.550 --> 00:02:26.560 align:start position:0%
it's pretty obvious
 

00:02:26.560 --> 00:02:28.229 align:start position:0%
it's pretty obvious
starting<00:02:26.879><c> at</c><00:02:27.120><c> 2</c><00:02:27.520><c> how</c><00:02:27.680><c> long</c><00:02:27.840><c> is</c><00:02:27.920><c> it</c><00:02:28.000><c> going</c><00:02:28.160><c> to</c>

00:02:28.229 --> 00:02:28.239 align:start position:0%
starting at 2 how long is it going to
 

00:02:28.239 --> 00:02:29.990 align:start position:0%
starting at 2 how long is it going to
take<00:02:28.640><c> for</c><00:02:28.800><c> this</c><00:02:29.040><c> to</c><00:02:29.200><c> reach</c><00:02:29.440><c> a</c><00:02:29.520><c> signal</c>

00:02:29.990 --> 00:02:30.000 align:start position:0%
take for this to reach a signal
 

00:02:30.000 --> 00:02:31.990 align:start position:0%
take for this to reach a signal
it's<00:02:30.160><c> going</c><00:02:30.319><c> to</c><00:02:30.400><c> take</c><00:02:30.959><c> 1</c><00:02:31.280><c> right</c><00:02:31.519><c> because</c><00:02:31.760><c> the</c>

00:02:31.990 --> 00:02:32.000 align:start position:0%
it's going to take 1 right because the
 

00:02:32.000 --> 00:02:33.110 align:start position:0%
it's going to take 1 right because the
weight<00:02:32.319><c> of</c><00:02:32.480><c> the</c><00:02:32.640><c> edge</c>

00:02:33.110 --> 00:02:33.120 align:start position:0%
weight of the edge
 

00:02:33.120 --> 00:02:35.270 align:start position:0%
weight of the edge
is<00:02:33.280><c> 1.</c><00:02:33.840><c> how</c><00:02:34.080><c> long</c><00:02:34.319><c> is</c><00:02:34.480><c> it</c><00:02:34.560><c> going</c><00:02:34.640><c> to</c><00:02:34.720><c> take</c><00:02:35.120><c> for</c>

00:02:35.270 --> 00:02:35.280 align:start position:0%
is 1. how long is it going to take for
 

00:02:35.280 --> 00:02:36.390 align:start position:0%
is 1. how long is it going to take for
this<00:02:35.519><c> node</c><00:02:35.920><c> to</c>

00:02:36.390 --> 00:02:36.400 align:start position:0%
this node to
 

00:02:36.400 --> 00:02:39.910 align:start position:0%
this node to
to<00:02:37.120><c> get</c><00:02:37.280><c> the</c><00:02:37.440><c> signal</c><00:02:38.080><c> also</c><00:02:38.640><c> one</c><00:02:39.280><c> because</c>

00:02:39.910 --> 00:02:39.920 align:start position:0%
to get the signal also one because
 

00:02:39.920 --> 00:02:42.309 align:start position:0%
to get the signal also one because
the<00:02:40.319><c> the</c><00:02:40.480><c> weight</c><00:02:40.720><c> of</c><00:02:40.800><c> the</c><00:02:41.040><c> edge</c><00:02:41.360><c> is</c><00:02:41.519><c> one</c><00:02:41.920><c> so</c><00:02:42.160><c> now</c>

00:02:42.309 --> 00:02:42.319 align:start position:0%
the the weight of the edge is one so now
 

00:02:42.319 --> 00:02:43.670 align:start position:0%
the the weight of the edge is one so now
we're<00:02:42.640><c> over</c><00:02:42.959><c> here</c>

00:02:43.670 --> 00:02:43.680 align:start position:0%
we're over here
 

00:02:43.680 --> 00:02:45.270 align:start position:0%
we're over here
let<00:02:43.840><c> me</c><00:02:43.920><c> just</c><00:02:44.080><c> change</c><00:02:44.400><c> the</c><00:02:44.480><c> color</c><00:02:44.800><c> to</c><00:02:44.959><c> make</c><00:02:45.120><c> it</c>

00:02:45.270 --> 00:02:45.280 align:start position:0%
let me just change the color to make it
 

00:02:45.280 --> 00:02:46.869 align:start position:0%
let me just change the color to make it
a<00:02:45.360><c> little</c><00:02:45.519><c> bit</c><00:02:45.599><c> better</c><00:02:45.920><c> by</c><00:02:46.080><c> the</c><00:02:46.239><c> way</c><00:02:46.560><c> this</c><00:02:46.720><c> was</c>

00:02:46.869 --> 00:02:46.879 align:start position:0%
a little bit better by the way this was
 

00:02:46.879 --> 00:02:48.630 align:start position:0%
a little bit better by the way this was
the<00:02:47.040><c> original</c><00:02:47.519><c> node</c><00:02:47.760><c> how</c><00:02:47.920><c> long</c><00:02:48.160><c> did</c><00:02:48.319><c> it</c><00:02:48.400><c> take</c>

00:02:48.630 --> 00:02:48.640 align:start position:0%
the original node how long did it take
 

00:02:48.640 --> 00:02:50.229 align:start position:0%
the original node how long did it take
this<00:02:48.800><c> node</c><00:02:49.120><c> to</c><00:02:49.280><c> get</c><00:02:49.519><c> the</c><00:02:49.680><c> signal</c>

00:02:50.229 --> 00:02:50.239 align:start position:0%
this node to get the signal
 

00:02:50.239 --> 00:02:51.910 align:start position:0%
this node to get the signal
technically<00:02:50.879><c> zero</c><00:02:51.280><c> right</c><00:02:51.440><c> because</c><00:02:51.599><c> it's</c><00:02:51.840><c> the</c>

00:02:51.910 --> 00:02:51.920 align:start position:0%
technically zero right because it's the
 

00:02:51.920 --> 00:02:53.430 align:start position:0%
technically zero right because it's the
one<00:02:52.239><c> sending</c><00:02:52.720><c> the</c><00:02:52.959><c> signal</c>

00:02:53.430 --> 00:02:53.440 align:start position:0%
one sending the signal
 

00:02:53.440 --> 00:02:55.270 align:start position:0%
one sending the signal
how<00:02:53.599><c> long</c><00:02:53.840><c> did</c><00:02:54.000><c> it</c><00:02:54.080><c> take</c><00:02:54.319><c> this</c><00:02:54.560><c> three</c><00:02:54.879><c> to</c><00:02:55.040><c> reach</c>

00:02:55.270 --> 00:02:55.280 align:start position:0%
how long did it take this three to reach
 

00:02:55.280 --> 00:02:56.630 align:start position:0%
how long did it take this three to reach
the<00:02:55.440><c> signal</c><00:02:56.080><c> one</c>

00:02:56.630 --> 00:02:56.640 align:start position:0%
the signal one
 

00:02:56.640 --> 00:02:57.910 align:start position:0%
the signal one
how<00:02:56.800><c> long</c><00:02:56.959><c> did</c><00:02:57.040><c> it</c><00:02:57.120><c> take</c><00:02:57.280><c> this</c><00:02:57.519><c> to</c><00:02:57.599><c> reach</c><00:02:57.840><c> a</c>

00:02:57.910 --> 00:02:57.920 align:start position:0%
how long did it take this to reach a
 

00:02:57.920 --> 00:02:59.910 align:start position:0%
how long did it take this to reach a
signal<00:02:58.400><c> one</c><00:02:58.879><c> now</c><00:02:59.040><c> we're</c><00:02:59.200><c> going</c><00:02:59.280><c> to</c><00:02:59.360><c> continue</c>

00:02:59.910 --> 00:02:59.920 align:start position:0%
signal one now we're going to continue
 

00:02:59.920 --> 00:03:00.710 align:start position:0%
signal one now we're going to continue
going

00:03:00.710 --> 00:03:00.720 align:start position:0%
going
 

00:03:00.720 --> 00:03:03.430 align:start position:0%
going
from<00:03:00.959><c> this</c><00:03:01.519><c> three</c><00:03:02.239><c> we</c><00:03:02.400><c> know</c><00:03:02.640><c> that</c><00:03:02.720><c> this</c><00:03:03.040><c> one</c>

00:03:03.430 --> 00:03:03.440 align:start position:0%
from this three we know that this one
 

00:03:03.440 --> 00:03:04.949 align:start position:0%
from this three we know that this one
doesn't<00:03:03.680><c> have</c><00:03:03.840><c> any</c><00:03:04.000><c> more</c><00:03:04.239><c> nodes</c><00:03:04.560><c> that</c><00:03:04.720><c> it</c><00:03:04.800><c> can</c>

00:03:04.949 --> 00:03:04.959 align:start position:0%
doesn't have any more nodes that it can
 

00:03:04.959 --> 00:03:06.949 align:start position:0%
doesn't have any more nodes that it can
send<00:03:05.200><c> the</c><00:03:05.280><c> signal</c><00:03:05.599><c> to</c><00:03:05.760><c> but</c><00:03:05.920><c> this</c><00:03:06.239><c> three</c>

00:03:06.949 --> 00:03:06.959 align:start position:0%
send the signal to but this three
 

00:03:06.959 --> 00:03:10.229 align:start position:0%
send the signal to but this three
does<00:03:07.519><c> it</c><00:03:07.680><c> has</c><00:03:07.920><c> a</c><00:03:08.080><c> node</c><00:03:08.480><c> over</c><00:03:08.720><c> here</c><00:03:09.120><c> four</c><00:03:09.760><c> right</c>

00:03:10.229 --> 00:03:10.239 align:start position:0%
does it has a node over here four right
 

00:03:10.239 --> 00:03:12.070 align:start position:0%
does it has a node over here four right
now<00:03:10.480><c> how</c><00:03:10.640><c> long</c><00:03:10.800><c> is</c><00:03:10.879><c> it</c><00:03:10.959><c> going</c><00:03:11.120><c> to</c><00:03:11.200><c> take</c><00:03:11.519><c> this</c>

00:03:12.070 --> 00:03:12.080 align:start position:0%
now how long is it going to take this
 

00:03:12.080 --> 00:03:13.589 align:start position:0%
now how long is it going to take this
four<00:03:12.480><c> to</c><00:03:12.640><c> reach</c><00:03:12.959><c> the</c><00:03:13.120><c> signal</c>

00:03:13.589 --> 00:03:13.599 align:start position:0%
four to reach the signal
 

00:03:13.599 --> 00:03:16.070 align:start position:0%
four to reach the signal
well<00:03:13.840><c> the</c><00:03:14.080><c> weight</c><00:03:14.480><c> of</c><00:03:14.640><c> the</c><00:03:14.879><c> edge</c><00:03:15.360><c> is</c><00:03:15.599><c> one</c><00:03:15.920><c> so</c>

00:03:16.070 --> 00:03:16.080 align:start position:0%
well the weight of the edge is one so
 

00:03:16.080 --> 00:03:17.270 align:start position:0%
well the weight of the edge is one so
does<00:03:16.319><c> that</c><00:03:16.400><c> mean</c><00:03:16.560><c> it's</c><00:03:16.720><c> going</c><00:03:16.800><c> to</c><00:03:16.879><c> take</c>

00:03:17.270 --> 00:03:17.280 align:start position:0%
does that mean it's going to take
 

00:03:17.280 --> 00:03:20.070 align:start position:0%
does that mean it's going to take
the<00:03:17.519><c> for</c><00:03:18.239><c> one</c><00:03:18.800><c> second</c><00:03:19.200><c> or</c><00:03:19.280><c> whatever</c><00:03:19.680><c> our</c><00:03:19.840><c> time</c>

00:03:20.070 --> 00:03:20.080 align:start position:0%
the for one second or whatever our time
 

00:03:20.080 --> 00:03:21.589 align:start position:0%
the for one second or whatever our time
unit<00:03:20.400><c> is</c><00:03:20.560><c> to</c><00:03:20.720><c> reach</c><00:03:20.959><c> this</c>

00:03:21.589 --> 00:03:21.599 align:start position:0%
unit is to reach this
 

00:03:21.599 --> 00:03:24.630 align:start position:0%
unit is to reach this
no<00:03:22.000><c> because</c><00:03:22.319><c> we</c><00:03:22.560><c> have</c><00:03:22.720><c> to</c><00:03:23.040><c> add</c><00:03:23.680><c> the</c><00:03:23.920><c> one</c><00:03:24.400><c> from</c>

00:03:24.630 --> 00:03:24.640 align:start position:0%
no because we have to add the one from
 

00:03:24.640 --> 00:03:26.070 align:start position:0%
no because we have to add the one from
over<00:03:24.959><c> here</c><00:03:25.280><c> right</c>

00:03:26.070 --> 00:03:26.080 align:start position:0%
over here right
 

00:03:26.080 --> 00:03:29.110 align:start position:0%
over here right
remember<00:03:26.560><c> our</c><00:03:26.720><c> signal</c><00:03:27.200><c> first</c><00:03:28.000><c> started</c><00:03:28.640><c> over</c>

00:03:29.110 --> 00:03:29.120 align:start position:0%
remember our signal first started over
 

00:03:29.120 --> 00:03:29.750 align:start position:0%
remember our signal first started over
here

00:03:29.750 --> 00:03:29.760 align:start position:0%
here
 

00:03:29.760 --> 00:03:32.550 align:start position:0%
here
then<00:03:30.000><c> it</c><00:03:30.159><c> traveled</c><00:03:30.640><c> over</c><00:03:30.959><c> here</c><00:03:31.599><c> with</c><00:03:31.920><c> one</c><00:03:32.400><c> then</c>

00:03:32.550 --> 00:03:32.560 align:start position:0%
then it traveled over here with one then
 

00:03:32.560 --> 00:03:33.910 align:start position:0%
then it traveled over here with one then
it's<00:03:32.720><c> going</c><00:03:32.879><c> to</c><00:03:32.959><c> travel</c><00:03:33.360><c> again</c>

00:03:33.910 --> 00:03:33.920 align:start position:0%
it's going to travel again
 

00:03:33.920 --> 00:03:37.030 align:start position:0%
it's going to travel again
over<00:03:34.159><c> here</c><00:03:34.319><c> with</c><00:03:34.640><c> one</c><00:03:35.040><c> so</c><00:03:35.280><c> in</c><00:03:35.680><c> total</c><00:03:36.560><c> once</c><00:03:36.879><c> we</c>

00:03:37.030 --> 00:03:37.040 align:start position:0%
over here with one so in total once we
 

00:03:37.040 --> 00:03:38.309 align:start position:0%
over here with one so in total once we
have<00:03:37.280><c> visited</c><00:03:37.760><c> this</c>

00:03:38.309 --> 00:03:38.319 align:start position:0%
have visited this
 

00:03:38.319 --> 00:03:40.470 align:start position:0%
have visited this
node<00:03:38.799><c> it's</c><00:03:38.959><c> going</c><00:03:39.040><c> to</c><00:03:39.120><c> have</c><00:03:39.280><c> taken</c><00:03:39.680><c> two</c><00:03:40.080><c> units</c>

00:03:40.470 --> 00:03:40.480 align:start position:0%
node it's going to have taken two units
 

00:03:40.480 --> 00:03:41.910 align:start position:0%
node it's going to have taken two units
of<00:03:40.640><c> time</c><00:03:41.200><c> to</c><00:03:41.360><c> reach</c><00:03:41.680><c> it</c>

00:03:41.910 --> 00:03:41.920 align:start position:0%
of time to reach it
 

00:03:41.920 --> 00:03:45.110 align:start position:0%
of time to reach it
now<00:03:42.159><c> after</c><00:03:42.720><c> this</c><00:03:43.040><c> node</c><00:03:43.599><c> reaches</c><00:03:44.640><c> gets</c><00:03:44.879><c> the</c>

00:03:45.110 --> 00:03:45.120 align:start position:0%
now after this node reaches gets the
 

00:03:45.120 --> 00:03:45.670 align:start position:0%
now after this node reaches gets the
signal

00:03:45.670 --> 00:03:45.680 align:start position:0%
signal
 

00:03:45.680 --> 00:03:47.190 align:start position:0%
signal
that<00:03:45.920><c> means</c><00:03:46.239><c> everybody</c><00:03:46.640><c> has</c><00:03:46.799><c> gotten</c><00:03:47.040><c> the</c>

00:03:47.190 --> 00:03:47.200 align:start position:0%
that means everybody has gotten the
 

00:03:47.200 --> 00:03:49.190 align:start position:0%
that means everybody has gotten the
signal<00:03:47.599><c> how</c><00:03:47.840><c> long</c><00:03:48.080><c> did</c><00:03:48.319><c> it</c><00:03:48.400><c> take</c><00:03:48.720><c> what's</c><00:03:48.959><c> the</c>

00:03:49.190 --> 00:03:49.200 align:start position:0%
signal how long did it take what's the
 

00:03:49.200 --> 00:03:50.630 align:start position:0%
signal how long did it take what's the
largest<00:03:49.680><c> value</c><00:03:50.000><c> we</c><00:03:50.159><c> have</c>

00:03:50.630 --> 00:03:50.640 align:start position:0%
largest value we have
 

00:03:50.640 --> 00:03:53.110 align:start position:0%
largest value we have
it<00:03:50.799><c> took</c><00:03:51.040><c> this</c><00:03:51.360><c> one</c><00:03:51.680><c> right</c><00:03:52.080><c> this</c><00:03:52.319><c> one</c><00:03:52.560><c> took</c><00:03:52.879><c> two</c>

00:03:53.110 --> 00:03:53.120 align:start position:0%
it took this one right this one took two
 

00:03:53.120 --> 00:03:54.390 align:start position:0%
it took this one right this one took two
seconds<00:03:53.599><c> or</c><00:03:53.760><c> whatever</c>

00:03:54.390 --> 00:03:54.400 align:start position:0%
seconds or whatever
 

00:03:54.400 --> 00:03:56.309 align:start position:0%
seconds or whatever
so<00:03:54.799><c> therefore</c><00:03:55.200><c> we're</c><00:03:55.360><c> going</c><00:03:55.439><c> to</c><00:03:55.519><c> return</c><00:03:56.000><c> two</c>

00:03:56.309 --> 00:03:56.319 align:start position:0%
so therefore we're going to return two
 

00:03:56.319 --> 00:03:57.429 align:start position:0%
so therefore we're going to return two
because<00:03:56.640><c> after</c>

00:03:57.429 --> 00:03:57.439 align:start position:0%
because after
 

00:03:57.439 --> 00:04:00.229 align:start position:0%
because after
two<00:03:58.080><c> you</c><00:03:58.239><c> know</c><00:03:58.480><c> units</c><00:03:58.799><c> of</c><00:03:58.959><c> time</c><00:03:59.599><c> every</c><00:03:59.920><c> node</c>

00:04:00.229 --> 00:04:00.239 align:start position:0%
two you know units of time every node
 

00:04:00.239 --> 00:04:02.470 align:start position:0%
two you know units of time every node
has<00:04:00.400><c> received</c><00:04:00.959><c> the</c><00:04:01.120><c> signal</c><00:04:01.519><c> so</c><00:04:01.760><c> our</c><00:04:02.000><c> output</c>

00:04:02.470 --> 00:04:02.480 align:start position:0%
has received the signal so our output
 

00:04:02.480 --> 00:04:03.270 align:start position:0%
has received the signal so our output
value

00:04:03.270 --> 00:04:03.280 align:start position:0%
value
 

00:04:03.280 --> 00:04:05.750 align:start position:0%
value
in<00:04:03.439><c> this</c><00:04:03.599><c> case</c><00:04:03.920><c> is</c><00:04:04.080><c> going</c><00:04:04.239><c> to</c><00:04:04.319><c> be</c><00:04:04.640><c> 2.</c><00:04:05.280><c> now</c><00:04:05.519><c> from</c>

00:04:05.750 --> 00:04:05.760 align:start position:0%
in this case is going to be 2. now from
 

00:04:05.760 --> 00:04:07.589 align:start position:0%
in this case is going to be 2. now from
looking<00:04:06.159><c> at</c><00:04:06.400><c> this</c><00:04:06.640><c> example</c><00:04:07.040><c> that</c><00:04:07.200><c> we</c><00:04:07.360><c> ran</c>

00:04:07.589 --> 00:04:07.599 align:start position:0%
looking at this example that we ran
 

00:04:07.599 --> 00:04:09.190 align:start position:0%
looking at this example that we ran
through<00:04:07.840><c> you</c><00:04:08.000><c> might</c><00:04:08.159><c> be</c><00:04:08.319><c> able</c><00:04:08.480><c> to</c><00:04:08.640><c> tell</c><00:04:08.879><c> that</c>

00:04:09.190 --> 00:04:09.200 align:start position:0%
through you might be able to tell that
 

00:04:09.200 --> 00:04:11.830 align:start position:0%
through you might be able to tell that
jigstr's<00:04:09.840><c> algorithm</c><00:04:10.480><c> is</c><00:04:10.720><c> actually</c><00:04:11.120><c> a</c><00:04:11.439><c> breadth</c>

00:04:11.830 --> 00:04:11.840 align:start position:0%
jigstr's algorithm is actually a breadth
 

00:04:11.840 --> 00:04:13.190 align:start position:0%
jigstr's algorithm is actually a breadth
first<00:04:12.159><c> search</c><00:04:12.560><c> algorithm</c>

00:04:13.190 --> 00:04:13.200 align:start position:0%
first search algorithm
 

00:04:13.200 --> 00:04:15.270 align:start position:0%
first search algorithm
that<00:04:13.360><c> i'm</c><00:04:13.519><c> going</c><00:04:13.599><c> to</c><00:04:13.840><c> show</c><00:04:14.080><c> you</c><00:04:14.560><c> the</c><00:04:14.799><c> general</c>

00:04:15.270 --> 00:04:15.280 align:start position:0%
that i'm going to show you the general
 

00:04:15.280 --> 00:04:16.229 align:start position:0%
that i'm going to show you the general
idea<00:04:15.760><c> of</c>

00:04:16.229 --> 00:04:16.239 align:start position:0%
idea of
 

00:04:16.239 --> 00:04:18.310 align:start position:0%
idea of
but<00:04:16.479><c> the</c><00:04:16.720><c> one</c><00:04:17.199><c> difference</c><00:04:17.680><c> about</c><00:04:18.000><c> regular</c>

00:04:18.310 --> 00:04:18.320 align:start position:0%
but the one difference about regular
 

00:04:18.320 --> 00:04:19.590 align:start position:0%
but the one difference about regular
breadth<00:04:18.639><c> for</c><00:04:18.799><c> searches</c>

00:04:19.590 --> 00:04:19.600 align:start position:0%
breadth for searches
 

00:04:19.600 --> 00:04:22.550 align:start position:0%
breadth for searches
this<00:04:19.919><c> algorithm</c><00:04:20.479><c> actually</c><00:04:20.799><c> uses</c><00:04:21.199><c> a</c><00:04:21.600><c> minimum</c>

00:04:22.550 --> 00:04:22.560 align:start position:0%
this algorithm actually uses a minimum
 

00:04:22.560 --> 00:04:23.189 align:start position:0%
this algorithm actually uses a minimum
heap

00:04:23.189 --> 00:04:23.199 align:start position:0%
heap
 

00:04:23.199 --> 00:04:26.550 align:start position:0%
heap
aka<00:04:24.080><c> a</c><00:04:24.320><c> priority</c><00:04:25.120><c> queue</c><00:04:25.759><c> so</c><00:04:26.160><c> we're</c><00:04:26.320><c> going</c><00:04:26.479><c> to</c>

00:04:26.550 --> 00:04:26.560 align:start position:0%
aka a priority queue so we're going to
 

00:04:26.560 --> 00:04:28.390 align:start position:0%
aka a priority queue so we're going to
be<00:04:26.720><c> needing</c><00:04:27.120><c> this</c><00:04:27.360><c> data</c><00:04:27.680><c> structure</c><00:04:28.080><c> it's</c><00:04:28.240><c> not</c>

00:04:28.390 --> 00:04:28.400 align:start position:0%
be needing this data structure it's not
 

00:04:28.400 --> 00:04:30.310 align:start position:0%
be needing this data structure it's not
a<00:04:28.479><c> super</c><00:04:28.800><c> common</c><00:04:29.120><c> data</c><00:04:29.440><c> structure</c>

00:04:30.310 --> 00:04:30.320 align:start position:0%
a super common data structure
 

00:04:30.320 --> 00:04:33.270 align:start position:0%
a super common data structure
but<00:04:30.720><c> it</c><00:04:31.040><c> is</c><00:04:31.520><c> it</c><00:04:31.759><c> is</c><00:04:31.919><c> needed</c><00:04:32.240><c> for</c><00:04:32.560><c> this</c><00:04:32.880><c> graph</c>

00:04:33.270 --> 00:04:33.280 align:start position:0%
but it is it is needed for this graph
 

00:04:33.280 --> 00:04:35.110 align:start position:0%
but it is it is needed for this graph
algorithm<00:04:33.840><c> let</c><00:04:34.000><c> me</c><00:04:34.240><c> show</c><00:04:34.400><c> you</c><00:04:34.560><c> the</c><00:04:34.720><c> actual</c>

00:04:35.110 --> 00:04:35.120 align:start position:0%
algorithm let me show you the actual
 

00:04:35.120 --> 00:04:36.710 align:start position:0%
algorithm let me show you the actual
algorithm<00:04:35.680><c> after</c><00:04:35.919><c> that</c><00:04:36.080><c> we're</c><00:04:36.240><c> going</c><00:04:36.400><c> to</c><00:04:36.479><c> jump</c>

00:04:36.710 --> 00:04:36.720 align:start position:0%
algorithm after that we're going to jump
 

00:04:36.720 --> 00:04:37.909 align:start position:0%
algorithm after that we're going to jump
into<00:04:36.960><c> the</c><00:04:37.040><c> code</c>

00:04:37.909 --> 00:04:37.919 align:start position:0%
into the code
 

00:04:37.919 --> 00:04:39.350 align:start position:0%
into the code
so<00:04:38.160><c> in</c><00:04:38.240><c> case</c><00:04:38.479><c> you</c><00:04:38.560><c> want</c><00:04:38.720><c> to</c><00:04:38.800><c> google</c><00:04:39.120><c> this</c>

00:04:39.350 --> 00:04:39.360 align:start position:0%
so in case you want to google this
 

00:04:39.360 --> 00:04:41.189 align:start position:0%
so in case you want to google this
algorithm<00:04:39.759><c> or</c><00:04:39.840><c> do</c><00:04:40.000><c> some</c><00:04:40.160><c> more</c><00:04:40.320><c> research</c><00:04:40.800><c> it</c><00:04:41.040><c> is</c>

00:04:41.189 --> 00:04:41.199 align:start position:0%
algorithm or do some more research it is
 

00:04:41.199 --> 00:04:41.670 align:start position:0%
algorithm or do some more research it is
called

00:04:41.670 --> 00:04:41.680 align:start position:0%
called
 

00:04:41.680 --> 00:04:44.469 align:start position:0%
called
jigsaw's<00:04:42.240><c> algorithm</c><00:04:42.960><c> it</c><00:04:43.120><c> is</c><00:04:43.199><c> a</c><00:04:43.440><c> shortest</c><00:04:43.919><c> path</c>

00:04:44.469 --> 00:04:44.479 align:start position:0%
jigsaw's algorithm it is a shortest path
 

00:04:44.479 --> 00:04:45.830 align:start position:0%
jigsaw's algorithm it is a shortest path
graph<00:04:44.960><c> algorithm</c>

00:04:45.830 --> 00:04:45.840 align:start position:0%
graph algorithm
 

00:04:45.840 --> 00:04:48.629 align:start position:0%
graph algorithm
and<00:04:46.000><c> it's</c><00:04:46.240><c> pretty</c><00:04:47.040><c> common</c><00:04:47.680><c> you</c><00:04:47.919><c> have</c><00:04:48.240><c> probably</c>

00:04:48.629 --> 00:04:48.639 align:start position:0%
and it's pretty common you have probably
 

00:04:48.639 --> 00:04:51.110 align:start position:0%
and it's pretty common you have probably
learned<00:04:48.960><c> it</c><00:04:49.120><c> in</c><00:04:49.280><c> school</c><00:04:49.680><c> if</c><00:04:49.840><c> you</c><00:04:50.000><c> study</c><00:04:50.320><c> cs</c>

00:04:51.110 --> 00:04:51.120 align:start position:0%
learned it in school if you study cs
 

00:04:51.120 --> 00:04:53.110 align:start position:0%
learned it in school if you study cs
and<00:04:51.360><c> what</c><00:04:51.520><c> it</c><00:04:51.759><c> does</c><00:04:52.160><c> is</c><00:04:52.400><c> in</c><00:04:52.479><c> this</c><00:04:52.639><c> case</c><00:04:52.960><c> let's</c>

00:04:53.110 --> 00:04:53.120 align:start position:0%
and what it does is in this case let's
 

00:04:53.120 --> 00:04:56.150 align:start position:0%
and what it does is in this case let's
say<00:04:53.360><c> our</c><00:04:53.680><c> source</c><00:04:54.160><c> or</c><00:04:54.400><c> our</c><00:04:54.560><c> starting</c><00:04:55.120><c> point</c><00:04:55.520><c> is</c>

00:04:56.150 --> 00:04:56.160 align:start position:0%
say our source or our starting point is
 

00:04:56.160 --> 00:04:59.670 align:start position:0%
say our source or our starting point is
this<00:04:56.479><c> node</c><00:04:57.040><c> the</c><00:04:57.199><c> value</c><00:04:58.080><c> one</c><00:04:58.800><c> what</c><00:04:59.040><c> it</c><00:04:59.280><c> does</c>

00:04:59.670 --> 00:04:59.680 align:start position:0%
this node the value one what it does
 

00:04:59.680 --> 00:05:02.150 align:start position:0%
this node the value one what it does
is<00:04:59.919><c> for</c><00:05:00.160><c> every</c><00:05:00.800><c> other</c><00:05:01.199><c> node</c><00:05:01.520><c> it</c><00:05:01.680><c> basically</c>

00:05:02.150 --> 00:05:02.160 align:start position:0%
is for every other node it basically
 

00:05:02.160 --> 00:05:04.310 align:start position:0%
is for every other node it basically
tells<00:05:02.479><c> you</c><00:05:02.560><c> the</c><00:05:02.800><c> shortest</c><00:05:03.360><c> path</c><00:05:03.759><c> right</c><00:05:04.000><c> so</c>

00:05:04.310 --> 00:05:04.320 align:start position:0%
tells you the shortest path right so
 

00:05:04.320 --> 00:05:06.790 align:start position:0%
tells you the shortest path right so
for<00:05:04.479><c> example</c><00:05:05.360><c> three</c><00:05:05.919><c> what's</c><00:05:06.160><c> the</c><00:05:06.400><c> length</c><00:05:06.720><c> of</c>

00:05:06.790 --> 00:05:06.800 align:start position:0%
for example three what's the length of
 

00:05:06.800 --> 00:05:08.070 align:start position:0%
for example three what's the length of
the<00:05:06.960><c> shortest</c><00:05:07.440><c> path</c>

00:05:08.070 --> 00:05:08.080 align:start position:0%
the shortest path
 

00:05:08.080 --> 00:05:11.029 align:start position:0%
the shortest path
to<00:05:08.320><c> this</c><00:05:08.560><c> node</c><00:05:09.039><c> well</c><00:05:09.520><c> from</c><00:05:10.080><c> directly</c><00:05:10.560><c> from</c><00:05:10.800><c> one</c>

00:05:11.029 --> 00:05:11.039 align:start position:0%
to this node well from directly from one
 

00:05:11.039 --> 00:05:11.670 align:start position:0%
to this node well from directly from one
to<00:05:11.280><c> three</c>

00:05:11.670 --> 00:05:11.680 align:start position:0%
to three
 

00:05:11.680 --> 00:05:14.390 align:start position:0%
to three
it<00:05:11.840><c> takes</c><00:05:12.560><c> one</c><00:05:13.039><c> so</c><00:05:13.520><c> one</c><00:05:13.840><c> is</c><00:05:14.000><c> going</c><00:05:14.080><c> to</c><00:05:14.160><c> be</c><00:05:14.240><c> the</c>

00:05:14.390 --> 00:05:14.400 align:start position:0%
it takes one so one is going to be the
 

00:05:14.400 --> 00:05:15.350 align:start position:0%
it takes one so one is going to be the
shortest<00:05:14.800><c> path</c>

00:05:15.350 --> 00:05:15.360 align:start position:0%
shortest path
 

00:05:15.360 --> 00:05:18.710 align:start position:0%
shortest path
for<00:05:15.520><c> this</c><00:05:15.759><c> node</c><00:05:16.560><c> what</c><00:05:16.800><c> about</c><00:05:17.280><c> this</c><00:05:17.919><c> two</c><00:05:18.240><c> node</c>

00:05:18.710 --> 00:05:18.720 align:start position:0%
for this node what about this two node
 

00:05:18.720 --> 00:05:21.590 align:start position:0%
for this node what about this two node
what's<00:05:19.039><c> the</c><00:05:19.280><c> shortest</c><00:05:19.919><c> path</c><00:05:20.400><c> to</c><00:05:20.720><c> this</c><00:05:21.039><c> node</c>

00:05:21.590 --> 00:05:21.600 align:start position:0%
what's the shortest path to this node
 

00:05:21.600 --> 00:05:22.070 align:start position:0%
what's the shortest path to this node
right

00:05:22.070 --> 00:05:22.080 align:start position:0%
right
 

00:05:22.080 --> 00:05:23.990 align:start position:0%
right
with<00:05:22.320><c> this</c><00:05:22.639><c> it's</c><00:05:22.880><c> pretty</c><00:05:23.360><c> obvious</c><00:05:23.840><c> because</c>

00:05:23.990 --> 00:05:24.000 align:start position:0%
with this it's pretty obvious because
 

00:05:24.000 --> 00:05:25.110 align:start position:0%
with this it's pretty obvious because
there's<00:05:24.240><c> only</c><00:05:24.720><c> one</c>

00:05:25.110 --> 00:05:25.120 align:start position:0%
there's only one
 

00:05:25.120 --> 00:05:27.990 align:start position:0%
there's only one
way<00:05:25.440><c> to</c><00:05:25.680><c> get</c><00:05:26.000><c> here</c><00:05:26.400><c> anyway</c><00:05:26.960><c> but</c><00:05:27.199><c> take</c><00:05:27.440><c> a</c><00:05:27.680><c> look</c>

00:05:27.990 --> 00:05:28.000 align:start position:0%
way to get here anyway but take a look
 

00:05:28.000 --> 00:05:29.029 align:start position:0%
way to get here anyway but take a look
at<00:05:28.240><c> this</c><00:05:28.560><c> node</c>

00:05:29.029 --> 00:05:29.039 align:start position:0%
at this node
 

00:05:29.039 --> 00:05:31.110 align:start position:0%
at this node
there's<00:05:29.520><c> two</c><00:05:29.759><c> different</c><00:05:30.160><c> ways</c><00:05:30.479><c> to</c><00:05:30.639><c> get</c><00:05:30.800><c> there</c>

00:05:31.110 --> 00:05:31.120 align:start position:0%
there's two different ways to get there
 

00:05:31.120 --> 00:05:32.230 align:start position:0%
there's two different ways to get there
now<00:05:31.600><c> this</c>

00:05:32.230 --> 00:05:32.240 align:start position:0%
now this
 

00:05:32.240 --> 00:05:33.749 align:start position:0%
now this
is<00:05:32.400><c> this</c><00:05:32.560><c> the</c><00:05:32.720><c> shortest</c><00:05:33.120><c> path</c><00:05:33.360><c> it's</c><00:05:33.520><c> the</c>

00:05:33.749 --> 00:05:33.759 align:start position:0%
is this the shortest path it's the
 

00:05:33.759 --> 00:05:35.749 align:start position:0%
is this the shortest path it's the
obvious<00:05:34.240><c> path</c><00:05:34.880><c> right</c><00:05:35.199><c> it's</c><00:05:35.440><c> just</c>

00:05:35.749 --> 00:05:35.759 align:start position:0%
obvious path right it's just
 

00:05:35.759 --> 00:05:38.790 align:start position:0%
obvious path right it's just
one<00:05:36.400><c> node</c><00:05:36.720><c> away</c><00:05:37.120><c> but</c><00:05:37.280><c> the</c><00:05:37.520><c> edge</c><00:05:37.919><c> has</c><00:05:38.080><c> a</c><00:05:38.320><c> weight</c>

00:05:38.790 --> 00:05:38.800 align:start position:0%
one node away but the edge has a weight
 

00:05:38.800 --> 00:05:41.990 align:start position:0%
one node away but the edge has a weight
of<00:05:39.280><c> four</c><00:05:39.919><c> that's</c><00:05:40.240><c> a</c><00:05:40.400><c> problem</c><00:05:41.039><c> because</c><00:05:41.680><c> take</c><00:05:41.919><c> a</c>

00:05:41.990 --> 00:05:42.000 align:start position:0%
of four that's a problem because take a
 

00:05:42.000 --> 00:05:43.990 align:start position:0%
of four that's a problem because take a
look<00:05:42.160><c> at</c><00:05:42.400><c> the</c><00:05:42.639><c> second</c><00:05:43.039><c> path</c><00:05:43.280><c> that</c><00:05:43.440><c> we</c><00:05:43.600><c> can</c><00:05:43.759><c> do</c>

00:05:43.990 --> 00:05:44.000 align:start position:0%
look at the second path that we can do
 

00:05:44.000 --> 00:05:44.710 align:start position:0%
look at the second path that we can do
we<00:05:44.160><c> can</c><00:05:44.240><c> go</c><00:05:44.400><c> to</c>

00:05:44.710 --> 00:05:44.720 align:start position:0%
we can go to
 

00:05:44.720 --> 00:05:47.590 align:start position:0%
we can go to
three<00:05:45.520><c> right</c><00:05:45.759><c> over</c><00:05:46.080><c> here</c><00:05:46.720><c> then</c><00:05:46.960><c> we</c><00:05:47.120><c> can</c><00:05:47.280><c> go</c><00:05:47.440><c> to</c>

00:05:47.590 --> 00:05:47.600 align:start position:0%
three right over here then we can go to
 

00:05:47.600 --> 00:05:48.469 align:start position:0%
three right over here then we can go to
the<00:05:47.840><c> four</c>

00:05:48.469 --> 00:05:48.479 align:start position:0%
the four
 

00:05:48.479 --> 00:05:50.550 align:start position:0%
the four
and<00:05:48.880><c> then</c><00:05:49.280><c> we</c><00:05:49.440><c> can</c><00:05:49.600><c> get</c><00:05:49.759><c> to</c><00:05:49.919><c> the</c><00:05:50.080><c> two</c><00:05:50.320><c> right</c>

00:05:50.550 --> 00:05:50.560 align:start position:0%
and then we can get to the two right
 

00:05:50.560 --> 00:05:51.990 align:start position:0%
and then we can get to the two right
that<00:05:50.720><c> took</c><00:05:51.199><c> three</c>

00:05:51.990 --> 00:05:52.000 align:start position:0%
that took three
 

00:05:52.000 --> 00:05:54.790 align:start position:0%
that took three
edges<00:05:52.800><c> didn't</c><00:05:53.120><c> it</c><00:05:53.199><c> that</c><00:05:53.440><c> took</c><00:05:53.680><c> one</c><00:05:54.000><c> edge</c><00:05:54.560><c> two</c>

00:05:54.790 --> 00:05:54.800 align:start position:0%
edges didn't it that took one edge two
 

00:05:54.800 --> 00:05:55.350 align:start position:0%
edges didn't it that took one edge two
edge

00:05:55.350 --> 00:05:55.360 align:start position:0%
edge
 

00:05:55.360 --> 00:05:57.510 align:start position:0%
edge
three<00:05:55.680><c> edges</c><00:05:56.160><c> but</c><00:05:56.319><c> when</c><00:05:56.560><c> we</c><00:05:56.800><c> total</c><00:05:57.199><c> these</c>

00:05:57.510 --> 00:05:57.520 align:start position:0%
three edges but when we total these
 

00:05:57.520 --> 00:05:58.710 align:start position:0%
three edges but when we total these
values<00:05:58.240><c> up</c>

00:05:58.710 --> 00:05:58.720 align:start position:0%
values up
 

00:05:58.720 --> 00:06:02.309 align:start position:0%
values up
we<00:05:58.960><c> get</c><00:05:59.199><c> a</c><00:05:59.520><c> sum</c><00:06:00.160><c> of</c><00:06:00.800><c> three</c><00:06:01.520><c> that</c><00:06:01.759><c> means</c>

00:06:02.309 --> 00:06:02.319 align:start position:0%
we get a sum of three that means
 

00:06:02.319 --> 00:06:04.390 align:start position:0%
we get a sum of three that means
this<00:06:02.560><c> path</c><00:06:02.880><c> is</c><00:06:03.120><c> actually</c><00:06:03.600><c> shorter</c><00:06:04.080><c> than</c><00:06:04.240><c> the</c>

00:06:04.390 --> 00:06:04.400 align:start position:0%
this path is actually shorter than the
 

00:06:04.400 --> 00:06:06.150 align:start position:0%
this path is actually shorter than the
path<00:06:04.960><c> up</c><00:06:05.199><c> here</c><00:06:05.680><c> so</c>

00:06:06.150 --> 00:06:06.160 align:start position:0%
path up here so
 

00:06:06.160 --> 00:06:08.150 align:start position:0%
path up here so
it's<00:06:06.400><c> not</c><00:06:06.639><c> always</c><00:06:07.120><c> clear</c><00:06:07.600><c> right</c><00:06:07.759><c> that's</c><00:06:08.000><c> why</c>

00:06:08.150 --> 00:06:08.160 align:start position:0%
it's not always clear right that's why
 

00:06:08.160 --> 00:06:09.430 align:start position:0%
it's not always clear right that's why
we<00:06:08.240><c> need</c><00:06:08.479><c> an</c><00:06:08.720><c> algorithm</c>

00:06:09.430 --> 00:06:09.440 align:start position:0%
we need an algorithm
 

00:06:09.440 --> 00:06:11.029 align:start position:0%
we need an algorithm
and<00:06:09.520><c> that's</c><00:06:09.840><c> exactly</c><00:06:10.160><c> what</c><00:06:10.319><c> we</c><00:06:10.479><c> have</c><00:06:10.720><c> we</c><00:06:10.880><c> have</c>

00:06:11.029 --> 00:06:11.039 align:start position:0%
and that's exactly what we have we have
 

00:06:11.039 --> 00:06:12.469 align:start position:0%
and that's exactly what we have we have
jigsaw's<00:06:11.600><c> algorithm</c>

00:06:12.469 --> 00:06:12.479 align:start position:0%
jigsaw's algorithm
 

00:06:12.479 --> 00:06:13.909 align:start position:0%
jigsaw's algorithm
and<00:06:12.720><c> we're</c><00:06:12.880><c> going</c><00:06:12.960><c> to</c><00:06:13.039><c> be</c><00:06:13.199><c> doing</c><00:06:13.440><c> a</c><00:06:13.600><c> breath</c>

00:06:13.909 --> 00:06:13.919 align:start position:0%
and we're going to be doing a breath
 

00:06:13.919 --> 00:06:16.550 align:start position:0%
and we're going to be doing a breath
first<00:06:14.160><c> search</c><00:06:14.639><c> right</c><00:06:14.880><c> so</c><00:06:15.360><c> starting</c><00:06:15.919><c> at</c><00:06:16.160><c> this</c>

00:06:16.550 --> 00:06:16.560 align:start position:0%
first search right so starting at this
 

00:06:16.560 --> 00:06:19.270 align:start position:0%
first search right so starting at this
node<00:06:16.880><c> the</c><00:06:17.600><c> start</c><00:06:17.840><c> node</c><00:06:18.160><c> 1</c><00:06:18.560><c> we're</c><00:06:18.880><c> only</c><00:06:19.120><c> going</c>

00:06:19.270 --> 00:06:19.280 align:start position:0%
node the start node 1 we're only going
 

00:06:19.280 --> 00:06:21.590 align:start position:0%
node the start node 1 we're only going
to<00:06:19.360><c> be</c><00:06:19.520><c> possibly</c><00:06:20.160><c> visiting</c><00:06:20.560><c> nodes</c><00:06:20.960><c> that</c><00:06:21.039><c> are</c>

00:06:21.590 --> 00:06:21.600 align:start position:0%
to be possibly visiting nodes that are
 

00:06:21.600 --> 00:06:24.309 align:start position:0%
to be possibly visiting nodes that are
that<00:06:21.759><c> are</c><00:06:21.919><c> right</c><00:06:22.319><c> next</c><00:06:22.720><c> to</c><00:06:22.960><c> our</c><00:06:23.520><c> frontier</c>

00:06:24.309 --> 00:06:24.319 align:start position:0%
that are right next to our frontier
 

00:06:24.319 --> 00:06:24.870 align:start position:0%
that are right next to our frontier
right

00:06:24.870 --> 00:06:24.880 align:start position:0%
right
 

00:06:24.880 --> 00:06:26.629 align:start position:0%
right
depth<00:06:25.280><c> first</c><00:06:25.520><c> search</c><00:06:25.759><c> would</c><00:06:25.919><c> be</c><00:06:26.080><c> we</c><00:06:26.240><c> just</c><00:06:26.400><c> go</c>

00:06:26.629 --> 00:06:26.639 align:start position:0%
depth first search would be we just go
 

00:06:26.639 --> 00:06:28.629 align:start position:0%
depth first search would be we just go
one<00:06:26.880><c> direction</c><00:06:27.440><c> we</c><00:06:27.520><c> just</c><00:06:27.680><c> keep</c><00:06:28.000><c> going</c><00:06:28.319><c> right</c>

00:06:28.629 --> 00:06:28.639 align:start position:0%
one direction we just keep going right
 

00:06:28.639 --> 00:06:29.909 align:start position:0%
one direction we just keep going right
but<00:06:28.880><c> breadth</c><00:06:29.280><c> first</c><00:06:29.520><c> search</c>

00:06:29.909 --> 00:06:29.919 align:start position:0%
but breadth first search
 

00:06:29.919 --> 00:06:32.790 align:start position:0%
but breadth first search
is<00:06:30.080><c> we're</c><00:06:30.240><c> gonna</c><00:06:30.479><c> do</c><00:06:30.639><c> this</c><00:06:31.280><c> layer</c><00:06:32.000><c> by</c><00:06:32.400><c> layer</c>

00:06:32.790 --> 00:06:32.800 align:start position:0%
is we're gonna do this layer by layer
 

00:06:32.800 --> 00:06:34.230 align:start position:0%
is we're gonna do this layer by layer
right<00:06:33.120><c> we're</c><00:06:33.280><c> going</c><00:06:33.360><c> to</c><00:06:33.440><c> go</c><00:06:33.600><c> to</c><00:06:33.680><c> the</c><00:06:33.840><c> first</c>

00:06:34.230 --> 00:06:34.240 align:start position:0%
right we're going to go to the first
 

00:06:34.240 --> 00:06:34.790 align:start position:0%
right we're going to go to the first
layer

00:06:34.790 --> 00:06:34.800 align:start position:0%
layer
 

00:06:34.800 --> 00:06:36.870 align:start position:0%
layer
the<00:06:35.039><c> next</c><00:06:35.360><c> layer</c><00:06:35.680><c> and</c><00:06:35.919><c> so</c><00:06:36.080><c> on</c><00:06:36.319><c> if</c><00:06:36.479><c> we</c><00:06:36.560><c> had</c><00:06:36.800><c> a</c>

00:06:36.870 --> 00:06:36.880 align:start position:0%
the next layer and so on if we had a
 

00:06:36.880 --> 00:06:38.629 align:start position:0%
the next layer and so on if we had a
bigger<00:06:37.360><c> graph</c><00:06:37.759><c> right</c><00:06:38.000><c> that's</c><00:06:38.240><c> how</c><00:06:38.400><c> breadth</c>

00:06:38.629 --> 00:06:38.639 align:start position:0%
bigger graph right that's how breadth
 

00:06:38.639 --> 00:06:39.830 align:start position:0%
bigger graph right that's how breadth
first<00:06:38.880><c> search</c><00:06:39.199><c> works</c>

00:06:39.830 --> 00:06:39.840 align:start position:0%
first search works
 

00:06:39.840 --> 00:06:42.870 align:start position:0%
first search works
and<00:06:40.479><c> every</c><00:06:41.039><c> node</c><00:06:41.840><c> that</c><00:06:42.160><c> is</c><00:06:42.400><c> on</c><00:06:42.560><c> our</c>

00:06:42.870 --> 00:06:42.880 align:start position:0%
and every node that is on our
 

00:06:42.880 --> 00:06:45.270 align:start position:0%
and every node that is on our
frontier<00:06:43.759><c> right</c><00:06:44.000><c> so</c><00:06:44.400><c> if</c><00:06:44.639><c> this</c><00:06:44.880><c> is</c><00:06:45.039><c> our</c>

00:06:45.270 --> 00:06:45.280 align:start position:0%
frontier right so if this is our
 

00:06:45.280 --> 00:06:46.790 align:start position:0%
frontier right so if this is our
starting<00:06:45.680><c> point</c><00:06:46.080><c> we</c><00:06:46.240><c> have</c><00:06:46.479><c> two</c>

00:06:46.790 --> 00:06:46.800 align:start position:0%
starting point we have two
 

00:06:46.800 --> 00:06:49.270 align:start position:0%
starting point we have two
options<00:06:47.199><c> of</c><00:06:47.360><c> nodes</c><00:06:47.680><c> we</c><00:06:47.840><c> can</c><00:06:48.000><c> visit</c><00:06:48.479><c> this</c><00:06:48.800><c> node</c>

00:06:49.270 --> 00:06:49.280 align:start position:0%
options of nodes we can visit this node
 

00:06:49.280 --> 00:06:50.309 align:start position:0%
options of nodes we can visit this node
or<00:06:49.599><c> this</c><00:06:49.840><c> node</c>

00:06:50.309 --> 00:06:50.319 align:start position:0%
or this node
 

00:06:50.319 --> 00:06:52.790 align:start position:0%
or this node
these<00:06:50.800><c> both</c><00:06:51.280><c> are</c><00:06:51.440><c> going</c><00:06:52.080><c> are</c><00:06:52.240><c> going</c><00:06:52.400><c> to</c><00:06:52.479><c> be</c>

00:06:52.790 --> 00:06:52.800 align:start position:0%
these both are going are going to be
 

00:06:52.800 --> 00:06:54.150 align:start position:0%
these both are going are going to be
added<00:06:53.120><c> to</c><00:06:53.440><c> our</c><00:06:53.759><c> min</c>

00:06:54.150 --> 00:06:54.160 align:start position:0%
added to our min
 

00:06:54.160 --> 00:06:56.309 align:start position:0%
added to our min
heap<00:06:54.720><c> and</c><00:06:54.880><c> we're</c><00:06:55.120><c> only</c><00:06:55.440><c> going</c><00:06:55.599><c> to</c><00:06:55.759><c> visit</c><00:06:56.080><c> the</c>

00:06:56.309 --> 00:06:56.319 align:start position:0%
heap and we're only going to visit the
 

00:06:56.319 --> 00:06:58.469 align:start position:0%
heap and we're only going to visit the
one<00:06:56.800><c> with</c><00:06:57.039><c> a</c><00:06:57.280><c> shorter</c><00:06:57.919><c> path</c>

00:06:58.469 --> 00:06:58.479 align:start position:0%
one with a shorter path
 

00:06:58.479 --> 00:07:00.790 align:start position:0%
one with a shorter path
that<00:06:58.720><c> does</c><00:06:59.039><c> make</c><00:06:59.280><c> sense</c><00:06:59.680><c> so</c><00:06:59.919><c> far</c><00:07:00.240><c> doesn't</c><00:07:00.560><c> it</c>

00:07:00.790 --> 00:07:00.800 align:start position:0%
that does make sense so far doesn't it
 

00:07:00.800 --> 00:07:02.230 align:start position:0%
that does make sense so far doesn't it
it<00:07:00.960><c> makes</c><00:07:01.199><c> sense</c><00:07:01.440><c> that</c><00:07:01.599><c> we</c><00:07:01.759><c> would</c><00:07:01.919><c> want</c><00:07:02.080><c> to</c>

00:07:02.230 --> 00:07:02.240 align:start position:0%
it makes sense that we would want to
 

00:07:02.240 --> 00:07:02.710 align:start position:0%
it makes sense that we would want to
visit

00:07:02.710 --> 00:07:02.720 align:start position:0%
visit
 

00:07:02.720 --> 00:07:05.270 align:start position:0%
visit
this<00:07:03.120><c> node</c><00:07:03.599><c> because</c><00:07:03.840><c> it</c><00:07:03.919><c> has</c><00:07:04.080><c> a</c><00:07:04.240><c> shorter</c><00:07:04.720><c> path</c>

00:07:05.270 --> 00:07:05.280 align:start position:0%
this node because it has a shorter path
 

00:07:05.280 --> 00:07:07.510 align:start position:0%
this node because it has a shorter path
rather<00:07:05.599><c> than</c><00:07:05.840><c> visiting</c><00:07:06.319><c> this</c><00:07:06.639><c> node</c><00:07:07.039><c> first</c>

00:07:07.510 --> 00:07:07.520 align:start position:0%
rather than visiting this node first
 

00:07:07.520 --> 00:07:09.909 align:start position:0%
rather than visiting this node first
which<00:07:07.759><c> has</c><00:07:07.919><c> a</c><00:07:08.160><c> longer</c><00:07:08.639><c> path</c><00:07:08.960><c> right</c><00:07:09.440><c> that</c><00:07:09.680><c> makes</c>

00:07:09.909 --> 00:07:09.919 align:start position:0%
which has a longer path right that makes
 

00:07:09.919 --> 00:07:10.950 align:start position:0%
which has a longer path right that makes
sense<00:07:10.240><c> so</c><00:07:10.479><c> far</c>

00:07:10.950 --> 00:07:10.960 align:start position:0%
sense so far
 

00:07:10.960 --> 00:07:12.870 align:start position:0%
sense so far
that's<00:07:11.199><c> why</c><00:07:11.360><c> we're</c><00:07:11.599><c> using</c><00:07:11.840><c> a</c><00:07:12.000><c> minimum</c><00:07:12.400><c> heap</c>

00:07:12.870 --> 00:07:12.880 align:start position:0%
that's why we're using a minimum heap
 

00:07:12.880 --> 00:07:14.950 align:start position:0%
that's why we're using a minimum heap
minimum<00:07:13.360><c> heaps</c><00:07:13.680><c> can</c><00:07:13.840><c> get</c><00:07:14.000><c> us</c><00:07:14.240><c> the</c><00:07:14.479><c> minimum</c>

00:07:14.950 --> 00:07:14.960 align:start position:0%
minimum heaps can get us the minimum
 

00:07:14.960 --> 00:07:15.749 align:start position:0%
minimum heaps can get us the minimum
value

00:07:15.749 --> 00:07:15.759 align:start position:0%
value
 

00:07:15.759 --> 00:07:17.350 align:start position:0%
value
pretty<00:07:16.080><c> efficiently</c><00:07:16.639><c> right</c><00:07:16.880><c> every</c><00:07:17.039><c> time</c><00:07:17.280><c> we</c>

00:07:17.350 --> 00:07:17.360 align:start position:0%
pretty efficiently right every time we
 

00:07:17.360 --> 00:07:19.189 align:start position:0%
pretty efficiently right every time we
want<00:07:17.520><c> to</c><00:07:17.599><c> get</c><00:07:17.680><c> a</c><00:07:17.759><c> minimum</c><00:07:18.240><c> value</c><00:07:18.560><c> from</c><00:07:18.800><c> the</c><00:07:18.960><c> min</c>

00:07:19.189 --> 00:07:19.199 align:start position:0%
want to get a minimum value from the min
 

00:07:19.199 --> 00:07:19.589 align:start position:0%
want to get a minimum value from the min
heap

00:07:19.589 --> 00:07:19.599 align:start position:0%
heap
 

00:07:19.599 --> 00:07:22.710 align:start position:0%
heap
it's<00:07:19.919><c> just</c><00:07:20.319><c> a</c><00:07:20.639><c> log</c><00:07:21.120><c> n</c><00:07:21.520><c> operation</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
it's just a log n operation
 

00:07:22.720 --> 00:07:24.870 align:start position:0%
it's just a log n operation
okay<00:07:23.039><c> so</c><00:07:23.440><c> the</c><00:07:23.599><c> way</c><00:07:23.840><c> we</c><00:07:24.000><c> initialize</c><00:07:24.639><c> this</c>

00:07:24.870 --> 00:07:24.880 align:start position:0%
okay so the way we initialize this
 

00:07:24.880 --> 00:07:26.550 align:start position:0%
okay so the way we initialize this
algorithm<00:07:25.360><c> is</c><00:07:25.440><c> we</c><00:07:25.599><c> know</c><00:07:25.759><c> that</c><00:07:25.919><c> we're</c><00:07:26.080><c> starting</c>

00:07:26.550 --> 00:07:26.560 align:start position:0%
algorithm is we know that we're starting
 

00:07:26.560 --> 00:07:27.909 align:start position:0%
algorithm is we know that we're starting
here<00:07:26.880><c> right</c><00:07:27.120><c> what</c><00:07:27.280><c> we're</c><00:07:27.440><c> going</c><00:07:27.520><c> to</c><00:07:27.599><c> actually</c>

00:07:27.909 --> 00:07:27.919 align:start position:0%
here right what we're going to actually
 

00:07:27.919 --> 00:07:28.230 align:start position:0%
here right what we're going to actually
do

00:07:28.230 --> 00:07:28.240 align:start position:0%
do
 

00:07:28.240 --> 00:07:31.029 align:start position:0%
do
is<00:07:28.479><c> add</c><00:07:28.800><c> this</c><00:07:29.199><c> node</c><00:07:29.680><c> to</c><00:07:30.080><c> our</c><00:07:30.479><c> min</c><00:07:30.720><c> heap</c>

00:07:31.029 --> 00:07:31.039 align:start position:0%
is add this node to our min heap
 

00:07:31.039 --> 00:07:32.070 align:start position:0%
is add this node to our min heap
initially<00:07:31.520><c> right</c><00:07:31.759><c> so</c>

00:07:32.070 --> 00:07:32.080 align:start position:0%
initially right so
 

00:07:32.080 --> 00:07:33.430 align:start position:0%
initially right so
and<00:07:32.319><c> in</c><00:07:32.479><c> our</c><00:07:32.639><c> min</c><00:07:32.800><c> heap</c><00:07:33.039><c> we're</c><00:07:33.199><c> going</c><00:07:33.280><c> to</c><00:07:33.360><c> be</c>

00:07:33.430 --> 00:07:33.440 align:start position:0%
and in our min heap we're going to be
 

00:07:33.440 --> 00:07:35.110 align:start position:0%
and in our min heap we're going to be
keeping<00:07:33.759><c> track</c><00:07:34.000><c> of</c><00:07:34.160><c> two</c><00:07:34.400><c> values</c>

00:07:35.110 --> 00:07:35.120 align:start position:0%
keeping track of two values
 

00:07:35.120 --> 00:07:37.510 align:start position:0%
keeping track of two values
obviously<00:07:35.680><c> the</c><00:07:36.000><c> path</c><00:07:36.479><c> length</c><00:07:37.039><c> right</c><00:07:37.280><c> because</c>

00:07:37.510 --> 00:07:37.520 align:start position:0%
obviously the path length right because
 

00:07:37.520 --> 00:07:38.950 align:start position:0%
obviously the path length right because
we're<00:07:37.680><c> always</c><00:07:37.919><c> going</c><00:07:38.000><c> to</c><00:07:38.080><c> be</c><00:07:38.319><c> popping</c>

00:07:38.950 --> 00:07:38.960 align:start position:0%
we're always going to be popping
 

00:07:38.960 --> 00:07:41.510 align:start position:0%
we're always going to be popping
from<00:07:39.199><c> the</c><00:07:39.360><c> min</c><00:07:39.599><c> heap</c><00:07:39.919><c> based</c><00:07:40.319><c> on</c><00:07:40.479><c> the</c><00:07:40.720><c> minimum</c>

00:07:41.510 --> 00:07:41.520 align:start position:0%
from the min heap based on the minimum
 

00:07:41.520 --> 00:07:42.870 align:start position:0%
from the min heap based on the minimum
path<00:07:41.919><c> right</c><00:07:42.080><c> so</c><00:07:42.240><c> that's</c><00:07:42.479><c> what</c>

00:07:42.870 --> 00:07:42.880 align:start position:0%
path right so that's what
 

00:07:42.880 --> 00:07:44.710 align:start position:0%
path right so that's what
that's<00:07:43.120><c> like</c><00:07:43.360><c> our</c><00:07:43.520><c> key</c><00:07:43.840><c> value</c><00:07:44.160><c> that's</c><00:07:44.400><c> what</c><00:07:44.479><c> we</c>

00:07:44.710 --> 00:07:44.720 align:start position:0%
that's like our key value that's what we
 

00:07:44.720 --> 00:07:46.550 align:start position:0%
that's like our key value that's what we
actually<00:07:45.120><c> care</c><00:07:45.360><c> about</c><00:07:45.759><c> right</c><00:07:46.080><c> that's</c><00:07:46.319><c> what's</c>

00:07:46.550 --> 00:07:46.560 align:start position:0%
actually care about right that's what's
 

00:07:46.560 --> 00:07:47.510 align:start position:0%
actually care about right that's what's
going<00:07:46.639><c> to</c><00:07:46.720><c> determine</c>

00:07:47.510 --> 00:07:47.520 align:start position:0%
going to determine
 

00:07:47.520 --> 00:07:49.189 align:start position:0%
going to determine
which<00:07:47.759><c> one</c><00:07:47.919><c> we</c><00:07:48.160><c> pop</c><00:07:48.479><c> but</c><00:07:48.639><c> we</c><00:07:48.800><c> also</c><00:07:48.960><c> want</c><00:07:49.120><c> to</c>

00:07:49.189 --> 00:07:49.199 align:start position:0%
which one we pop but we also want to
 

00:07:49.199 --> 00:07:51.270 align:start position:0%
which one we pop but we also want to
keep<00:07:49.440><c> track</c><00:07:49.759><c> of</c><00:07:49.919><c> which</c><00:07:50.400><c> node</c><00:07:50.639><c> it</c><00:07:50.800><c> is</c><00:07:50.960><c> right</c><00:07:51.120><c> so</c>

00:07:51.270 --> 00:07:51.280 align:start position:0%
keep track of which node it is right so
 

00:07:51.280 --> 00:07:52.150 align:start position:0%
keep track of which node it is right so
initially

00:07:52.150 --> 00:07:52.160 align:start position:0%
initially
 

00:07:52.160 --> 00:07:55.670 align:start position:0%
initially
the<00:07:52.800><c> path</c><00:07:53.360><c> to</c><00:07:53.840><c> reach</c><00:07:54.479><c> uh</c><00:07:54.720><c> the</c><00:07:54.960><c> initial</c><00:07:55.280><c> node</c>

00:07:55.670 --> 00:07:55.680 align:start position:0%
the path to reach uh the initial node
 

00:07:55.680 --> 00:07:56.309 align:start position:0%
the path to reach uh the initial node
one

00:07:56.309 --> 00:07:56.319 align:start position:0%
one
 

00:07:56.319 --> 00:07:58.390 align:start position:0%
one
is<00:07:56.879><c> zero</c><00:07:57.280><c> right</c><00:07:57.520><c> because</c><00:07:57.759><c> we're</c><00:07:58.000><c> that's</c><00:07:58.240><c> where</c>

00:07:58.390 --> 00:07:58.400 align:start position:0%
is zero right because we're that's where
 

00:07:58.400 --> 00:07:59.670 align:start position:0%
is zero right because we're that's where
we're<00:07:58.720><c> starting</c><00:07:59.280><c> so</c>

00:07:59.670 --> 00:07:59.680 align:start position:0%
we're starting so
 

00:07:59.680 --> 00:08:01.749 align:start position:0%
we're starting so
it<00:07:59.840><c> doesn't</c><00:08:00.160><c> cost</c><00:08:00.479><c> us</c><00:08:00.639><c> anything</c><00:08:00.960><c> to</c><00:08:01.199><c> get</c><00:08:01.440><c> there</c>

00:08:01.749 --> 00:08:01.759 align:start position:0%
it doesn't cost us anything to get there
 

00:08:01.759 --> 00:08:02.869 align:start position:0%
it doesn't cost us anything to get there
and<00:08:01.840><c> the</c><00:08:02.000><c> node</c><00:08:02.319><c> itself</c>

00:08:02.869 --> 00:08:02.879 align:start position:0%
and the node itself
 

00:08:02.879 --> 00:08:05.029 align:start position:0%
and the node itself
is<00:08:03.039><c> obviously</c><00:08:03.759><c> one</c><00:08:04.319><c> so</c><00:08:04.479><c> this</c><00:08:04.639><c> is</c><00:08:04.720><c> how</c><00:08:04.879><c> we're</c>

00:08:05.029 --> 00:08:05.039 align:start position:0%
is obviously one so this is how we're
 

00:08:05.039 --> 00:08:06.950 align:start position:0%
is obviously one so this is how we're
gonna<00:08:05.280><c> start</c><00:08:05.680><c> then</c><00:08:05.840><c> we're</c><00:08:06.000><c> gonna</c><00:08:06.319><c> pop</c>

00:08:06.950 --> 00:08:06.960 align:start position:0%
gonna start then we're gonna pop
 

00:08:06.960 --> 00:08:09.670 align:start position:0%
gonna start then we're gonna pop
this<00:08:07.280><c> value</c><00:08:08.000><c> it's</c><00:08:08.240><c> only</c><00:08:08.479><c> one</c><00:08:08.720><c> value</c><00:08:09.039><c> so</c><00:08:09.280><c> far</c><00:08:09.440><c> so</c>

00:08:09.670 --> 00:08:09.680 align:start position:0%
this value it's only one value so far so
 

00:08:09.680 --> 00:08:10.629 align:start position:0%
this value it's only one value so far so
it's<00:08:09.919><c> it's</c><00:08:10.160><c> simple</c>

00:08:10.629 --> 00:08:10.639 align:start position:0%
it's it's simple
 

00:08:10.639 --> 00:08:13.589 align:start position:0%
it's it's simple
of<00:08:10.800><c> where</c><00:08:10.960><c> we're</c><00:08:11.120><c> popping</c><00:08:11.520><c> right</c><00:08:12.160><c> once</c><00:08:12.560><c> we</c><00:08:12.879><c> pop</c>

00:08:13.589 --> 00:08:13.599 align:start position:0%
of where we're popping right once we pop
 

00:08:13.599 --> 00:08:14.710 align:start position:0%
of where we're popping right once we pop
this<00:08:13.919><c> value</c>

00:08:14.710 --> 00:08:14.720 align:start position:0%
this value
 

00:08:14.720 --> 00:08:17.749 align:start position:0%
this value
what's<00:08:15.039><c> our</c><00:08:15.360><c> next</c><00:08:15.919><c> step</c><00:08:16.560><c> well</c><00:08:17.039><c> like</c><00:08:17.360><c> i</c><00:08:17.520><c> said</c>

00:08:17.749 --> 00:08:17.759 align:start position:0%
what's our next step well like i said
 

00:08:17.759 --> 00:08:18.390 align:start position:0%
what's our next step well like i said
this<00:08:18.000><c> is</c><00:08:18.160><c> a</c>

00:08:18.390 --> 00:08:18.400 align:start position:0%
this is a
 

00:08:18.400 --> 00:08:20.309 align:start position:0%
this is a
breadth<00:08:18.800><c> first</c><00:08:19.120><c> search</c><00:08:19.440><c> right</c><00:08:19.759><c> so</c><00:08:20.160><c> we're</c>

00:08:20.309 --> 00:08:20.319 align:start position:0%
breadth first search right so we're
 

00:08:20.319 --> 00:08:22.710 align:start position:0%
breadth first search right so we're
gonna<00:08:20.560><c> take</c><00:08:20.800><c> a</c><00:08:20.960><c> look</c><00:08:21.199><c> at</c><00:08:21.360><c> the</c><00:08:21.599><c> node</c><00:08:22.000><c> over</c><00:08:22.240><c> here</c>

00:08:22.710 --> 00:08:22.720 align:start position:0%
gonna take a look at the node over here
 

00:08:22.720 --> 00:08:25.110 align:start position:0%
gonna take a look at the node over here
it's<00:08:23.039><c> one</c><00:08:23.440><c> we're</c><00:08:23.599><c> gonna</c><00:08:23.840><c> look</c><00:08:24.080><c> at</c><00:08:24.319><c> all</c><00:08:24.639><c> of</c><00:08:24.800><c> its</c>

00:08:25.110 --> 00:08:25.120 align:start position:0%
it's one we're gonna look at all of its
 

00:08:25.120 --> 00:08:25.990 align:start position:0%
it's one we're gonna look at all of its
neighbors<00:08:25.680><c> right</c>

00:08:25.990 --> 00:08:26.000 align:start position:0%
neighbors right
 

00:08:26.000 --> 00:08:27.510 align:start position:0%
neighbors right
it<00:08:26.160><c> has</c><00:08:26.479><c> two</c><00:08:26.720><c> neighbors</c><00:08:27.120><c> right</c><00:08:27.280><c> we're</c>

00:08:27.510 --> 00:08:27.520 align:start position:0%
it has two neighbors right we're
 

00:08:27.520 --> 00:08:29.029 align:start position:0%
it has two neighbors right we're
checking<00:08:27.919><c> that</c><00:08:28.240><c> first</c>

00:08:29.029 --> 00:08:29.039 align:start position:0%
checking that first
 

00:08:29.039 --> 00:08:31.270 align:start position:0%
checking that first
layer<00:08:29.520><c> this</c><00:08:29.840><c> we're</c><00:08:30.000><c> going</c><00:08:30.240><c> we're</c><00:08:30.479><c> going</c><00:08:30.879><c> layer</c>

00:08:31.270 --> 00:08:31.280 align:start position:0%
layer this we're going we're going layer
 

00:08:31.280 --> 00:08:32.230 align:start position:0%
layer this we're going we're going layer
by<00:08:31.680><c> layer</c>

00:08:32.230 --> 00:08:32.240 align:start position:0%
by layer
 

00:08:32.240 --> 00:08:33.670 align:start position:0%
by layer
with<00:08:32.479><c> breadth</c><00:08:32.719><c> first</c><00:08:32.959><c> search</c><00:08:33.200><c> right</c><00:08:33.360><c> so</c><00:08:33.519><c> this</c>

00:08:33.670 --> 00:08:33.680 align:start position:0%
with breadth first search right so this
 

00:08:33.680 --> 00:08:35.430 align:start position:0%
with breadth first search right so this
is<00:08:33.760><c> our</c><00:08:33.919><c> first</c><00:08:34.479><c> layer</c><00:08:35.039><c> right</c>

00:08:35.430 --> 00:08:35.440 align:start position:0%
is our first layer right
 

00:08:35.440 --> 00:08:37.350 align:start position:0%
is our first layer right
we're<00:08:35.599><c> gonna</c><00:08:35.760><c> take</c><00:08:36.000><c> the</c><00:08:36.240><c> first</c><00:08:36.560><c> neighbor</c>

00:08:37.350 --> 00:08:37.360 align:start position:0%
we're gonna take the first neighbor
 

00:08:37.360 --> 00:08:39.350 align:start position:0%
we're gonna take the first neighbor
three<00:08:38.000><c> how</c><00:08:38.240><c> long</c><00:08:38.399><c> does</c><00:08:38.640><c> it</c><00:08:38.719><c> take</c><00:08:38.959><c> to</c><00:08:39.039><c> reach</c>

00:08:39.350 --> 00:08:39.360 align:start position:0%
three how long does it take to reach
 

00:08:39.360 --> 00:08:40.310 align:start position:0%
three how long does it take to reach
three<00:08:39.839><c> one</c>

00:08:40.310 --> 00:08:40.320 align:start position:0%
three one
 

00:08:40.320 --> 00:08:42.709 align:start position:0%
three one
we're<00:08:40.479><c> not</c><00:08:40.800><c> visiting</c><00:08:41.279><c> it</c><00:08:41.440><c> yet</c><00:08:41.839><c> we're</c><00:08:42.159><c> simply</c>

00:08:42.709 --> 00:08:42.719 align:start position:0%
we're not visiting it yet we're simply
 

00:08:42.719 --> 00:08:43.909 align:start position:0%
we're not visiting it yet we're simply
adding<00:08:43.120><c> it</c><00:08:43.360><c> to</c>

00:08:43.909 --> 00:08:43.919 align:start position:0%
adding it to
 

00:08:43.919 --> 00:08:47.269 align:start position:0%
adding it to
our<00:08:44.560><c> min</c><00:08:44.800><c> heap</c><00:08:45.120><c> so</c><00:08:45.519><c> the</c><00:08:45.760><c> path</c><00:08:46.160><c> length</c><00:08:46.480><c> is</c><00:08:46.800><c> one</c>

00:08:47.269 --> 00:08:47.279 align:start position:0%
our min heap so the path length is one
 

00:08:47.279 --> 00:08:50.310 align:start position:0%
our min heap so the path length is one
and<00:08:47.440><c> this</c><00:08:47.600><c> is</c><00:08:47.760><c> for</c><00:08:48.080><c> node</c><00:08:48.880><c> three</c><00:08:49.680><c> then</c><00:08:50.000><c> other</c>

00:08:50.310 --> 00:08:50.320 align:start position:0%
and this is for node three then other
 

00:08:50.320 --> 00:08:51.590 align:start position:0%
and this is for node three then other
node<00:08:50.640><c> that</c><00:08:50.800><c> we</c><00:08:50.880><c> can</c><00:08:51.120><c> reach</c>

00:08:51.590 --> 00:08:51.600 align:start position:0%
node that we can reach
 

00:08:51.600 --> 00:08:54.630 align:start position:0%
node that we can reach
is<00:08:52.080><c> two</c><00:08:52.720><c> the</c><00:08:52.880><c> path</c><00:08:53.200><c> length</c><00:08:53.519><c> is</c><00:08:53.760><c> four</c><00:08:54.080><c> let's</c><00:08:54.399><c> add</c>

00:08:54.630 --> 00:08:54.640 align:start position:0%
is two the path length is four let's add
 

00:08:54.640 --> 00:08:55.110 align:start position:0%
is two the path length is four let's add
that

00:08:55.110 --> 00:08:55.120 align:start position:0%
that
 

00:08:55.120 --> 00:08:58.310 align:start position:0%
that
as<00:08:55.360><c> well</c><00:08:55.839><c> four</c><00:08:56.560><c> and</c><00:08:56.720><c> the</c><00:08:56.880><c> node</c><00:08:57.360><c> is</c><00:08:57.680><c> two</c>

00:08:58.310 --> 00:08:58.320 align:start position:0%
as well four and the node is two
 

00:08:58.320 --> 00:09:00.710 align:start position:0%
as well four and the node is two
and<00:08:58.480><c> since</c><00:08:58.720><c> we've</c><00:08:59.040><c> already</c><00:08:59.440><c> visited</c><00:09:00.160><c> the</c><00:09:00.320><c> node</c>

00:09:00.710 --> 00:09:00.720 align:start position:0%
and since we've already visited the node
 

00:09:00.720 --> 00:09:03.110 align:start position:0%
and since we've already visited the node
one<00:09:01.040><c> we</c><00:09:01.200><c> can</c><00:09:01.360><c> cross</c><00:09:01.760><c> it</c><00:09:01.920><c> out</c><00:09:02.240><c> now</c>

00:09:03.110 --> 00:09:03.120 align:start position:0%
one we can cross it out now
 

00:09:03.120 --> 00:09:05.670 align:start position:0%
one we can cross it out now
so<00:09:03.839><c> now</c><00:09:04.000><c> we're</c><00:09:04.240><c> popping</c><00:09:04.640><c> another</c><00:09:05.040><c> value</c><00:09:05.440><c> this</c>

00:09:05.670 --> 00:09:05.680 align:start position:0%
so now we're popping another value this
 

00:09:05.680 --> 00:09:07.430 align:start position:0%
so now we're popping another value this
time<00:09:05.920><c> we</c><00:09:06.080><c> have</c><00:09:06.240><c> two</c><00:09:06.480><c> values</c><00:09:06.800><c> so</c><00:09:06.959><c> which</c><00:09:07.200><c> one</c><00:09:07.360><c> are</c>

00:09:07.430 --> 00:09:07.440 align:start position:0%
time we have two values so which one are
 

00:09:07.440 --> 00:09:09.110 align:start position:0%
time we have two values so which one are
we<00:09:07.600><c> gonna</c><00:09:07.760><c> pop</c><00:09:08.000><c> well</c><00:09:08.240><c> this</c><00:09:08.399><c> is</c><00:09:08.480><c> a</c><00:09:08.640><c> min</c><00:09:08.880><c> heap</c>

00:09:09.110 --> 00:09:09.120 align:start position:0%
we gonna pop well this is a min heap
 

00:09:09.120 --> 00:09:10.710 align:start position:0%
we gonna pop well this is a min heap
right<00:09:09.279><c> we're</c><00:09:09.440><c> gonna</c><00:09:09.600><c> pop</c><00:09:09.920><c> the</c><00:09:10.000><c> value</c><00:09:10.399><c> with</c><00:09:10.480><c> the</c>

00:09:10.710 --> 00:09:10.720 align:start position:0%
right we're gonna pop the value with the
 

00:09:10.720 --> 00:09:11.509 align:start position:0%
right we're gonna pop the value with the
minimum

00:09:11.509 --> 00:09:11.519 align:start position:0%
minimum
 

00:09:11.519 --> 00:09:13.670 align:start position:0%
minimum
path<00:09:12.000><c> it's</c><00:09:12.240><c> this</c><00:09:12.480><c> one</c><00:09:12.720><c> right</c><00:09:13.120><c> of</c><00:09:13.279><c> course</c>

00:09:13.670 --> 00:09:13.680 align:start position:0%
path it's this one right of course
 

00:09:13.680 --> 00:09:15.110 align:start position:0%
path it's this one right of course
that's<00:09:13.920><c> the</c><00:09:14.080><c> one</c><00:09:14.240><c> with</c><00:09:14.399><c> the</c><00:09:14.480><c> shortest</c><00:09:14.800><c> path</c>

00:09:15.110 --> 00:09:15.120 align:start position:0%
that's the one with the shortest path
 

00:09:15.120 --> 00:09:16.470 align:start position:0%
that's the one with the shortest path
that's<00:09:15.360><c> what</c><00:09:15.440><c> we're</c><00:09:15.600><c> gonna</c><00:09:15.839><c> pop</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
that's what we're gonna pop
 

00:09:16.480 --> 00:09:19.990 align:start position:0%
that's what we're gonna pop
now<00:09:17.200><c> so</c><00:09:18.000><c> as</c><00:09:18.240><c> we</c><00:09:18.560><c> pop</c><00:09:19.040><c> every</c><00:09:19.440><c> element</c>

00:09:19.990 --> 00:09:20.000 align:start position:0%
now so as we pop every element
 

00:09:20.000 --> 00:09:21.910 align:start position:0%
now so as we pop every element
we're<00:09:20.240><c> basically</c><00:09:20.720><c> determining</c><00:09:21.279><c> the</c><00:09:21.440><c> minimum</c>

00:09:21.910 --> 00:09:21.920 align:start position:0%
we're basically determining the minimum
 

00:09:21.920 --> 00:09:24.070 align:start position:0%
we're basically determining the minimum
path<00:09:22.160><c> so</c><00:09:22.399><c> now</c><00:09:22.560><c> we</c><00:09:22.720><c> can</c><00:09:22.959><c> say</c><00:09:23.279><c> for</c><00:09:23.519><c> sure</c><00:09:23.760><c> that</c><00:09:23.920><c> the</c>

00:09:24.070 --> 00:09:24.080 align:start position:0%
path so now we can say for sure that the
 

00:09:24.080 --> 00:09:25.910 align:start position:0%
path so now we can say for sure that the
minimum<00:09:24.480><c> path</c><00:09:24.800><c> to</c><00:09:24.959><c> reach</c><00:09:25.279><c> three</c>

00:09:25.910 --> 00:09:25.920 align:start position:0%
minimum path to reach three
 

00:09:25.920 --> 00:09:28.470 align:start position:0%
minimum path to reach three
takes<00:09:26.399><c> us</c><00:09:26.959><c> one</c><00:09:27.360><c> right</c><00:09:27.600><c> because</c><00:09:27.920><c> one</c><00:09:28.160><c> was</c><00:09:28.399><c> the</c>

00:09:28.470 --> 00:09:28.480 align:start position:0%
takes us one right because one was the
 

00:09:28.480 --> 00:09:29.750 align:start position:0%
takes us one right because one was the
value<00:09:28.800><c> that</c><00:09:28.959><c> we</c><00:09:29.120><c> added</c>

00:09:29.750 --> 00:09:29.760 align:start position:0%
value that we added
 

00:09:29.760 --> 00:09:32.710 align:start position:0%
value that we added
to<00:09:30.080><c> our</c><00:09:30.399><c> min</c><00:09:30.640><c> heap</c><00:09:31.519><c> and</c><00:09:31.760><c> again</c><00:09:32.320><c> we're</c><00:09:32.480><c> just</c>

00:09:32.710 --> 00:09:32.720 align:start position:0%
to our min heap and again we're just
 

00:09:32.720 --> 00:09:33.990 align:start position:0%
to our min heap and again we're just
doing<00:09:32.880><c> a</c><00:09:33.040><c> breath</c><00:09:33.279><c> first</c><00:09:33.519><c> search</c>

00:09:33.990 --> 00:09:34.000 align:start position:0%
doing a breath first search
 

00:09:34.000 --> 00:09:36.550 align:start position:0%
doing a breath first search
what<00:09:34.240><c> are</c><00:09:34.480><c> all</c><00:09:34.720><c> of</c><00:09:34.800><c> the</c><00:09:35.040><c> nodes</c><00:09:35.360><c> that</c><00:09:35.680><c> three</c><00:09:36.240><c> has</c>

00:09:36.550 --> 00:09:36.560 align:start position:0%
what are all of the nodes that three has
 

00:09:36.560 --> 00:09:37.430 align:start position:0%
what are all of the nodes that three has
neighbors<00:09:37.040><c> with</c>

00:09:37.430 --> 00:09:37.440 align:start position:0%
neighbors with
 

00:09:37.440 --> 00:09:40.470 align:start position:0%
neighbors with
it<00:09:37.920><c> it</c><00:09:38.000><c> only</c><00:09:38.240><c> has</c><00:09:38.480><c> neighbors</c><00:09:38.880><c> with</c><00:09:39.200><c> one</c><00:09:39.920><c> node</c>

00:09:40.470 --> 00:09:40.480 align:start position:0%
it it only has neighbors with one node
 

00:09:40.480 --> 00:09:43.110 align:start position:0%
it it only has neighbors with one node
right<00:09:41.040><c> this</c><00:09:41.440><c> four</c><00:09:41.760><c> we</c><00:09:41.920><c> have</c><00:09:42.000><c> a</c><00:09:42.080><c> directed</c><00:09:42.640><c> edge</c>

00:09:43.110 --> 00:09:43.120 align:start position:0%
right this four we have a directed edge
 

00:09:43.120 --> 00:09:45.509 align:start position:0%
right this four we have a directed edge
going<00:09:43.519><c> exactly</c><00:09:44.000><c> to</c><00:09:44.160><c> four</c><00:09:44.480><c> so</c><00:09:44.720><c> let's</c><00:09:45.040><c> add</c>

00:09:45.509 --> 00:09:45.519 align:start position:0%
going exactly to four so let's add
 

00:09:45.519 --> 00:09:48.710 align:start position:0%
going exactly to four so let's add
four<00:09:46.160><c> to</c><00:09:46.800><c> our</c><00:09:47.519><c> min</c><00:09:48.080><c> heap</c>

00:09:48.710 --> 00:09:48.720 align:start position:0%
four to our min heap
 

00:09:48.720 --> 00:09:50.389 align:start position:0%
four to our min heap
so<00:09:48.880><c> we're</c><00:09:49.120><c> adding</c><00:09:49.360><c> the</c><00:09:49.600><c> node</c><00:09:49.920><c> 4</c><00:09:50.080><c> right</c><00:09:50.320><c> so</c>

00:09:50.389 --> 00:09:50.399 align:start position:0%
so we're adding the node 4 right so
 

00:09:50.399 --> 00:09:51.670 align:start position:0%
so we're adding the node 4 right so
that's<00:09:50.560><c> what</c><00:09:50.720><c> we're</c><00:09:50.880><c> going</c><00:09:50.959><c> to</c><00:09:51.040><c> put</c><00:09:51.279><c> in</c><00:09:51.440><c> the</c>

00:09:51.670 --> 00:09:51.680 align:start position:0%
that's what we're going to put in the
 

00:09:51.680 --> 00:09:52.790 align:start position:0%
that's what we're going to put in the
node<00:09:52.080><c> position</c>

00:09:52.790 --> 00:09:52.800 align:start position:0%
node position
 

00:09:52.800 --> 00:09:54.550 align:start position:0%
node position
what<00:09:52.959><c> are</c><00:09:53.040><c> we</c><00:09:53.200><c> going</c><00:09:53.279><c> to</c><00:09:53.440><c> put</c><00:09:53.680><c> in</c><00:09:53.839><c> the</c><00:09:54.080><c> path</c>

00:09:54.550 --> 00:09:54.560 align:start position:0%
what are we going to put in the path
 

00:09:54.560 --> 00:09:56.550 align:start position:0%
what are we going to put in the path
position<00:09:55.440><c> are</c><00:09:55.600><c> we</c><00:09:55.760><c> just</c><00:09:55.920><c> going</c><00:09:56.080><c> to</c><00:09:56.160><c> put</c>

00:09:56.550 --> 00:09:56.560 align:start position:0%
position are we just going to put
 

00:09:56.560 --> 00:09:59.190 align:start position:0%
position are we just going to put
1<00:09:56.959><c> because</c><00:09:57.279><c> it</c><00:09:57.440><c> only</c><00:09:57.680><c> takes</c><00:09:58.080><c> 1</c><00:09:58.480><c> for</c><00:09:58.640><c> us</c><00:09:58.800><c> to</c><00:09:58.959><c> get</c>

00:09:59.190 --> 00:09:59.200 align:start position:0%
1 because it only takes 1 for us to get
 

00:09:59.200 --> 00:09:59.829 align:start position:0%
1 because it only takes 1 for us to get
there<00:09:59.519><c> from</c>

00:09:59.829 --> 00:09:59.839 align:start position:0%
there from
 

00:09:59.839 --> 00:10:01.990 align:start position:0%
there from
3<00:10:00.399><c> that's</c><00:10:00.800><c> not</c><00:10:01.200><c> actually</c><00:10:01.600><c> what</c><00:10:01.760><c> we're</c><00:10:01.920><c> going</c>

00:10:01.990 --> 00:10:02.000 align:start position:0%
3 that's not actually what we're going
 

00:10:02.000 --> 00:10:03.590 align:start position:0%
3 that's not actually what we're going
to<00:10:02.160><c> put</c><00:10:02.640><c> we're</c><00:10:02.800><c> going</c><00:10:02.959><c> to</c><00:10:03.120><c> take</c>

00:10:03.590 --> 00:10:03.600 align:start position:0%
to put we're going to take
 

00:10:03.600 --> 00:10:06.230 align:start position:0%
to put we're going to take
the<00:10:03.920><c> total</c><00:10:04.240><c> that</c><00:10:04.399><c> it</c><00:10:04.640><c> took</c><00:10:04.959><c> to</c><00:10:05.200><c> reach</c><00:10:05.680><c> three</c>

00:10:06.230 --> 00:10:06.240 align:start position:0%
the total that it took to reach three
 

00:10:06.240 --> 00:10:06.870 align:start position:0%
the total that it took to reach three
which<00:10:06.480><c> was</c>

00:10:06.870 --> 00:10:06.880 align:start position:0%
which was
 

00:10:06.880 --> 00:10:10.069 align:start position:0%
which was
one<00:10:07.519><c> and</c><00:10:08.240><c> it's</c><00:10:08.399><c> taking</c><00:10:08.720><c> us</c><00:10:08.880><c> another</c><00:10:09.519><c> one</c>

00:10:10.069 --> 00:10:10.079 align:start position:0%
one and it's taking us another one
 

00:10:10.079 --> 00:10:11.829 align:start position:0%
one and it's taking us another one
to<00:10:10.240><c> reach</c><00:10:10.560><c> four</c><00:10:10.800><c> so</c><00:10:10.959><c> we're</c><00:10:11.120><c> gonna</c><00:10:11.279><c> add</c><00:10:11.440><c> the</c>

00:10:11.829 --> 00:10:11.839 align:start position:0%
to reach four so we're gonna add the
 

00:10:11.839 --> 00:10:13.750 align:start position:0%
to reach four so we're gonna add the
total<00:10:12.640><c> to</c><00:10:12.800><c> this</c><00:10:13.120><c> right</c><00:10:13.279><c> we're</c><00:10:13.440><c> not</c><00:10:13.600><c> just</c>

00:10:13.750 --> 00:10:13.760 align:start position:0%
total to this right we're not just
 

00:10:13.760 --> 00:10:15.509 align:start position:0%
total to this right we're not just
keeping<00:10:14.079><c> track</c><00:10:14.320><c> of</c><00:10:14.480><c> the</c><00:10:14.720><c> single</c><00:10:15.120><c> one</c>

00:10:15.509 --> 00:10:15.519 align:start position:0%
keeping track of the single one
 

00:10:15.519 --> 00:10:18.230 align:start position:0%
keeping track of the single one
we're<00:10:15.680><c> keeping</c><00:10:16.079><c> track</c><00:10:16.399><c> of</c><00:10:16.560><c> the</c><00:10:16.959><c> total</c><00:10:17.440><c> path</c><00:10:18.079><c> it</c>

00:10:18.230 --> 00:10:18.240 align:start position:0%
we're keeping track of the total path it
 

00:10:18.240 --> 00:10:18.710 align:start position:0%
we're keeping track of the total path it
takes

00:10:18.710 --> 00:10:18.720 align:start position:0%
takes
 

00:10:18.720 --> 00:10:20.550 align:start position:0%
takes
for<00:10:18.959><c> each</c><00:10:19.279><c> node</c><00:10:19.519><c> we</c><00:10:19.680><c> want</c><00:10:19.839><c> to</c><00:10:19.920><c> know</c><00:10:20.079><c> how</c><00:10:20.320><c> long</c>

00:10:20.550 --> 00:10:20.560 align:start position:0%
for each node we want to know how long
 

00:10:20.560 --> 00:10:22.470 align:start position:0%
for each node we want to know how long
it<00:10:20.640><c> takes</c><00:10:20.959><c> to</c><00:10:21.120><c> reach</c><00:10:21.440><c> node</c><00:10:21.839><c> 4</c>

00:10:22.470 --> 00:10:22.480 align:start position:0%
it takes to reach node 4
 

00:10:22.480 --> 00:10:25.509 align:start position:0%
it takes to reach node 4
all<00:10:22.720><c> the</c><00:10:22.880><c> way</c><00:10:23.440><c> from</c><00:10:23.839><c> our</c><00:10:24.320><c> starting</c><00:10:24.959><c> position</c>

00:10:25.509 --> 00:10:25.519 align:start position:0%
all the way from our starting position
 

00:10:25.519 --> 00:10:27.829 align:start position:0%
all the way from our starting position
we<00:10:25.680><c> care</c><00:10:25.920><c> about</c><00:10:26.079><c> the</c><00:10:26.320><c> starting</c><00:10:26.800><c> position</c><00:10:27.600><c> so</c>

00:10:27.829 --> 00:10:27.839 align:start position:0%
we care about the starting position so
 

00:10:27.839 --> 00:10:29.670 align:start position:0%
we care about the starting position so
when<00:10:28.000><c> i</c><00:10:28.160><c> put</c><00:10:28.320><c> the</c><00:10:28.480><c> path</c><00:10:28.880><c> value</c>

00:10:29.670 --> 00:10:29.680 align:start position:0%
when i put the path value
 

00:10:29.680 --> 00:10:31.350 align:start position:0%
when i put the path value
of<00:10:29.760><c> the</c><00:10:29.920><c> path</c><00:10:30.320><c> length</c><00:10:30.640><c> for</c><00:10:30.800><c> this</c><00:10:30.959><c> node</c><00:10:31.279><c> i'm</c>

00:10:31.350 --> 00:10:31.360 align:start position:0%
of the path length for this node i'm
 

00:10:31.360 --> 00:10:33.509 align:start position:0%
of the path length for this node i'm
going<00:10:31.440><c> to</c><00:10:31.519><c> put</c><00:10:31.760><c> a</c><00:10:32.160><c> 2</c><00:10:32.640><c> value</c>

00:10:33.509 --> 00:10:33.519 align:start position:0%
going to put a 2 value
 

00:10:33.519 --> 00:10:36.630 align:start position:0%
going to put a 2 value
so<00:10:33.760><c> now</c><00:10:34.000><c> we</c><00:10:34.240><c> are</c><00:10:34.399><c> once</c><00:10:34.720><c> again</c><00:10:35.120><c> done</c><00:10:35.600><c> with</c><00:10:36.240><c> this</c>

00:10:36.630 --> 00:10:36.640 align:start position:0%
so now we are once again done with this
 

00:10:36.640 --> 00:10:39.430 align:start position:0%
so now we are once again done with this
node<00:10:37.200><c> so</c><00:10:37.519><c> now</c><00:10:37.839><c> again</c><00:10:38.320><c> we</c><00:10:38.560><c> are</c><00:10:38.640><c> going</c><00:10:38.800><c> to</c><00:10:38.959><c> decide</c>

00:10:39.430 --> 00:10:39.440 align:start position:0%
node so now again we are going to decide
 

00:10:39.440 --> 00:10:40.870 align:start position:0%
node so now again we are going to decide
which<00:10:39.680><c> one</c><00:10:39.839><c> are</c><00:10:39.920><c> we</c><00:10:40.079><c> going</c><00:10:40.160><c> to</c><00:10:40.320><c> pop</c>

00:10:40.870 --> 00:10:40.880 align:start position:0%
which one are we going to pop
 

00:10:40.880 --> 00:10:43.190 align:start position:0%
which one are we going to pop
from<00:10:41.279><c> our</c><00:10:41.600><c> min</c><00:10:41.839><c> heap</c><00:10:42.079><c> we</c><00:10:42.160><c> want</c><00:10:42.320><c> to</c><00:10:42.480><c> pop</c><00:10:42.959><c> the</c>

00:10:43.190 --> 00:10:43.200 align:start position:0%
from our min heap we want to pop the
 

00:10:43.200 --> 00:10:44.230 align:start position:0%
from our min heap we want to pop the
value<00:10:43.760><c> with</c><00:10:44.000><c> a</c>

00:10:44.230 --> 00:10:44.240 align:start position:0%
value with a
 

00:10:44.240 --> 00:10:46.790 align:start position:0%
value with a
shorter<00:10:44.800><c> path</c><00:10:45.279><c> so</c><00:10:45.440><c> we're</c><00:10:45.600><c> going</c><00:10:45.680><c> to</c><00:10:45.839><c> pop</c><00:10:46.480><c> this</c>

00:10:46.790 --> 00:10:46.800 align:start position:0%
shorter path so we're going to pop this
 

00:10:46.800 --> 00:10:47.910 align:start position:0%
shorter path so we're going to pop this
one

00:10:47.910 --> 00:10:47.920 align:start position:0%
one
 

00:10:47.920 --> 00:10:51.030 align:start position:0%
one
so<00:10:48.160><c> now</c><00:10:48.399><c> we're</c><00:10:48.720><c> at</c><00:10:49.040><c> this</c><00:10:49.440><c> node</c><00:10:49.839><c> right</c><00:10:50.480><c> and</c><00:10:50.880><c> how</c>

00:10:51.030 --> 00:10:51.040 align:start position:0%
so now we're at this node right and how
 

00:10:51.040 --> 00:10:52.630 align:start position:0%
so now we're at this node right and how
many<00:10:51.360><c> nodes</c><00:10:51.680><c> can</c><00:10:51.920><c> this</c><00:10:52.160><c> node</c>

00:10:52.630 --> 00:10:52.640 align:start position:0%
many nodes can this node
 

00:10:52.640 --> 00:10:55.430 align:start position:0%
many nodes can this node
reach<00:10:53.040><c> well</c><00:10:53.440><c> it</c><00:10:53.600><c> only</c><00:10:53.839><c> has</c><00:10:54.079><c> a</c><00:10:54.240><c> single</c><00:10:54.800><c> outgoing</c>

00:10:55.430 --> 00:10:55.440 align:start position:0%
reach well it only has a single outgoing
 

00:10:55.440 --> 00:10:55.990 align:start position:0%
reach well it only has a single outgoing
edge

00:10:55.990 --> 00:10:56.000 align:start position:0%
edge
 

00:10:56.000 --> 00:10:59.590 align:start position:0%
edge
to<00:10:56.560><c> this</c><00:10:57.200><c> node</c><00:10:57.839><c> 2</c><00:10:58.399><c> right</c><00:10:58.720><c> and</c><00:10:58.800><c> we</c><00:10:59.040><c> see</c><00:10:59.200><c> that</c>

00:10:59.590 --> 00:10:59.600 align:start position:0%
to this node 2 right and we see that
 

00:10:59.600 --> 00:11:03.030 align:start position:0%
to this node 2 right and we see that
2<00:11:00.000><c> has</c><00:11:00.240><c> actually</c><00:11:00.880><c> already</c><00:11:01.760><c> been</c><00:11:02.079><c> added</c><00:11:02.560><c> to</c>

00:11:03.030 --> 00:11:03.040 align:start position:0%
2 has actually already been added to
 

00:11:03.040 --> 00:11:06.230 align:start position:0%
2 has actually already been added to
our<00:11:03.519><c> min</c><00:11:03.839><c> heap</c><00:11:04.480><c> right</c><00:11:05.200><c> but</c><00:11:05.760><c> the</c><00:11:06.000><c> only</c>

00:11:06.230 --> 00:11:06.240 align:start position:0%
our min heap right but the only
 

00:11:06.240 --> 00:11:07.829 align:start position:0%
our min heap right but the only
difference<00:11:06.720><c> is</c><00:11:06.959><c> this</c><00:11:07.360><c> time</c>

00:11:07.829 --> 00:11:07.839 align:start position:0%
difference is this time
 

00:11:07.839 --> 00:11:09.269 align:start position:0%
difference is this time
and<00:11:08.000><c> i'm</c><00:11:08.160><c> running</c><00:11:08.399><c> out</c><00:11:08.480><c> of</c><00:11:08.560><c> space</c><00:11:08.880><c> so</c><00:11:09.040><c> i'm</c><00:11:09.120><c> just</c>

00:11:09.269 --> 00:11:09.279 align:start position:0%
and i'm running out of space so i'm just
 

00:11:09.279 --> 00:11:11.590 align:start position:0%
and i'm running out of space so i'm just
going<00:11:09.360><c> to</c><00:11:09.440><c> add</c><00:11:09.600><c> a</c><00:11:09.760><c> little</c><00:11:10.079><c> slot</c><00:11:10.640><c> is</c><00:11:10.880><c> that</c>

00:11:11.590 --> 00:11:11.600 align:start position:0%
going to add a little slot is that
 

00:11:11.600 --> 00:11:14.790 align:start position:0%
going to add a little slot is that
for<00:11:12.000><c> this</c><00:11:12.800><c> 2</c><00:11:13.680><c> it's</c><00:11:14.079><c> how</c><00:11:14.240><c> long</c>

00:11:14.790 --> 00:11:14.800 align:start position:0%
for this 2 it's how long
 

00:11:14.800 --> 00:11:16.550 align:start position:0%
for this 2 it's how long
first<00:11:15.040><c> of</c><00:11:15.200><c> all</c><00:11:15.360><c> how</c><00:11:15.760><c> long</c><00:11:16.000><c> did</c><00:11:16.160><c> it</c><00:11:16.240><c> take</c><00:11:16.399><c> to</c>

00:11:16.550 --> 00:11:16.560 align:start position:0%
first of all how long did it take to
 

00:11:16.560 --> 00:11:18.710 align:start position:0%
first of all how long did it take to
reach<00:11:16.880><c> this</c><00:11:17.200><c> it</c><00:11:17.360><c> took</c><00:11:17.600><c> a</c><00:11:17.680><c> distance</c><00:11:18.240><c> of</c>

00:11:18.710 --> 00:11:18.720 align:start position:0%
reach this it took a distance of
 

00:11:18.720 --> 00:11:22.150 align:start position:0%
reach this it took a distance of
two<00:11:19.040><c> to</c><00:11:19.200><c> reach</c><00:11:19.519><c> this</c><00:11:19.839><c> four</c><00:11:20.399><c> and</c><00:11:20.880><c> plus</c><00:11:21.519><c> one</c>

00:11:22.150 --> 00:11:22.160 align:start position:0%
two to reach this four and plus one
 

00:11:22.160 --> 00:11:25.190 align:start position:0%
two to reach this four and plus one
means<00:11:22.560><c> that</c><00:11:22.800><c> to</c><00:11:22.959><c> reach</c><00:11:23.600><c> this</c><00:11:24.320><c> to</c><00:11:24.480><c> reach</c><00:11:24.800><c> this</c>

00:11:25.190 --> 00:11:25.200 align:start position:0%
means that to reach this to reach this
 

00:11:25.200 --> 00:11:28.389 align:start position:0%
means that to reach this to reach this
two<00:11:25.440><c> now</c><00:11:25.839><c> it's</c><00:11:26.079><c> actually</c><00:11:26.560><c> a</c><00:11:26.720><c> distance</c><00:11:27.279><c> of</c><00:11:28.000><c> 3</c>

00:11:28.389 --> 00:11:28.399 align:start position:0%
two now it's actually a distance of 3
 

00:11:28.399 --> 00:11:28.949 align:start position:0%
two now it's actually a distance of 3
which<00:11:28.720><c> is</c>

00:11:28.949 --> 00:11:28.959 align:start position:0%
which is
 

00:11:28.959 --> 00:11:32.069 align:start position:0%
which is
shorter<00:11:29.680><c> than</c><00:11:29.920><c> this</c><00:11:30.160><c> one</c><00:11:30.480><c> right</c><00:11:31.040><c> so</c><00:11:31.680><c> now</c>

00:11:32.069 --> 00:11:32.079 align:start position:0%
shorter than this one right so now
 

00:11:32.079 --> 00:11:35.110 align:start position:0%
shorter than this one right so now
we<00:11:32.240><c> can</c><00:11:32.399><c> actually</c><00:11:32.800><c> add</c><00:11:33.120><c> that</c><00:11:33.440><c> same</c><00:11:33.920><c> node</c><00:11:34.399><c> 2</c>

00:11:35.110 --> 00:11:35.120 align:start position:0%
we can actually add that same node 2
 

00:11:35.120 --> 00:11:37.670 align:start position:0%
we can actually add that same node 2
to<00:11:35.519><c> our</c><00:11:36.160><c> min</c><00:11:36.399><c> heap</c><00:11:36.800><c> but</c><00:11:37.040><c> this</c><00:11:37.279><c> time</c><00:11:37.519><c> we're</c>

00:11:37.670 --> 00:11:37.680 align:start position:0%
to our min heap but this time we're
 

00:11:37.680 --> 00:11:38.230 align:start position:0%
to our min heap but this time we're
going<00:11:37.760><c> to</c><00:11:37.920><c> have</c>

00:11:38.230 --> 00:11:38.240 align:start position:0%
going to have
 

00:11:38.240 --> 00:11:41.110 align:start position:0%
going to have
a<00:11:38.399><c> distance</c><00:11:38.880><c> of</c><00:11:39.040><c> 3</c><00:11:39.279><c> which</c><00:11:39.519><c> is</c><00:11:39.680><c> shorter</c><00:11:40.720><c> so</c><00:11:40.880><c> we</c>

00:11:41.110 --> 00:11:41.120 align:start position:0%
a distance of 3 which is shorter so we
 

00:11:41.120 --> 00:11:42.150 align:start position:0%
a distance of 3 which is shorter so we
visited<00:11:41.519><c> this</c><00:11:41.760><c> node</c>

00:11:42.150 --> 00:11:42.160 align:start position:0%
visited this node
 

00:11:42.160 --> 00:11:44.230 align:start position:0%
visited this node
and<00:11:42.320><c> now</c><00:11:42.800><c> you</c><00:11:42.959><c> can</c><00:11:43.120><c> see</c><00:11:43.279><c> that</c><00:11:43.440><c> we</c><00:11:43.600><c> only</c><00:11:43.839><c> have</c>

00:11:44.230 --> 00:11:44.240 align:start position:0%
and now you can see that we only have
 

00:11:44.240 --> 00:11:46.550 align:start position:0%
and now you can see that we only have
one<00:11:44.560><c> node</c><00:11:45.040><c> remaining</c><00:11:45.680><c> to</c><00:11:45.839><c> visit</c>

00:11:46.550 --> 00:11:46.560 align:start position:0%
one node remaining to visit
 

00:11:46.560 --> 00:11:49.509 align:start position:0%
one node remaining to visit
good<00:11:46.800><c> thing</c><00:11:46.959><c> for</c><00:11:47.200><c> us</c><00:11:47.519><c> both</c><00:11:47.839><c> of</c><00:11:48.000><c> our</c><00:11:48.480><c> options</c><00:11:49.200><c> in</c>

00:11:49.509 --> 00:11:49.519 align:start position:0%
good thing for us both of our options in
 

00:11:49.519 --> 00:11:49.829 align:start position:0%
good thing for us both of our options in
the

00:11:49.829 --> 00:11:49.839 align:start position:0%
the
 

00:11:49.839 --> 00:11:52.310 align:start position:0%
the
min<00:11:50.079><c> heap</c><00:11:50.720><c> lead</c><00:11:50.959><c> to</c><00:11:51.120><c> that</c><00:11:51.440><c> node</c><00:11:51.760><c> which</c><00:11:52.000><c> one</c><00:11:52.240><c> are</c>

00:11:52.310 --> 00:11:52.320 align:start position:0%
min heap lead to that node which one are
 

00:11:52.320 --> 00:11:53.110 align:start position:0%
min heap lead to that node which one are
we<00:11:52.399><c> gonna</c><00:11:52.720><c> pick</c>

00:11:53.110 --> 00:11:53.120 align:start position:0%
we gonna pick
 

00:11:53.120 --> 00:11:55.509 align:start position:0%
we gonna pick
it's<00:11:53.360><c> a</c><00:11:53.519><c> min</c><00:11:53.760><c> heap</c><00:11:54.160><c> so</c><00:11:54.320><c> we're</c><00:11:54.480><c> gonna</c><00:11:54.720><c> pick</c><00:11:55.200><c> this</c>

00:11:55.509 --> 00:11:55.519 align:start position:0%
it's a min heap so we're gonna pick this
 

00:11:55.519 --> 00:11:56.389 align:start position:0%
it's a min heap so we're gonna pick this
one<00:11:55.920><c> 3</c>

00:11:56.389 --> 00:11:56.399 align:start position:0%
one 3
 

00:11:56.399 --> 00:11:58.550 align:start position:0%
one 3
is<00:11:56.560><c> less</c><00:11:56.800><c> than</c><00:11:57.040><c> 4</c><00:11:57.440><c> so</c><00:11:57.680><c> we're</c><00:11:57.839><c> going</c><00:11:57.920><c> to</c><00:11:58.240><c> pop</c>

00:11:58.550 --> 00:11:58.560 align:start position:0%
is less than 4 so we're going to pop
 

00:11:58.560 --> 00:12:00.550 align:start position:0%
is less than 4 so we're going to pop
this<00:11:59.040><c> from</c><00:11:59.360><c> our</c><00:11:59.600><c> min</c><00:11:59.839><c> heap</c>

00:12:00.550 --> 00:12:00.560 align:start position:0%
this from our min heap
 

00:12:00.560 --> 00:12:03.670 align:start position:0%
this from our min heap
so<00:12:00.720><c> now</c><00:12:01.120><c> we</c><00:12:01.360><c> finally</c><00:12:01.920><c> popped</c><00:12:02.399><c> the</c><00:12:02.720><c> last</c><00:12:03.279><c> node</c>

00:12:03.670 --> 00:12:03.680 align:start position:0%
so now we finally popped the last node
 

00:12:03.680 --> 00:12:05.110 align:start position:0%
so now we finally popped the last node
it's<00:12:03.920><c> a</c><00:12:04.079><c> path</c><00:12:04.480><c> length</c><00:12:04.880><c> of</c>

00:12:05.110 --> 00:12:05.120 align:start position:0%
it's a path length of
 

00:12:05.120 --> 00:12:08.629 align:start position:0%
it's a path length of
3<00:12:05.839><c> so</c><00:12:06.399><c> now</c><00:12:06.639><c> that</c><00:12:06.800><c> we've</c><00:12:07.120><c> reached</c><00:12:07.600><c> every</c><00:12:08.079><c> single</c>

00:12:08.629 --> 00:12:08.639 align:start position:0%
3 so now that we've reached every single
 

00:12:08.639 --> 00:12:11.829 align:start position:0%
3 so now that we've reached every single
node<00:12:09.120><c> in</c><00:12:09.519><c> our</c><00:12:10.160><c> array</c><00:12:10.959><c> and</c><00:12:11.120><c> by</c><00:12:11.360><c> the</c><00:12:11.440><c> way</c><00:12:11.600><c> this</c>

00:12:11.829 --> 00:12:11.839 align:start position:0%
node in our array and by the way this
 

00:12:11.839 --> 00:12:13.829 align:start position:0%
node in our array and by the way this
node<00:12:12.079><c> does</c><00:12:12.240><c> not</c><00:12:12.399><c> have</c><00:12:12.560><c> any</c><00:12:12.800><c> outgoing</c><00:12:13.360><c> edges</c><00:12:13.680><c> so</c>

00:12:13.829 --> 00:12:13.839 align:start position:0%
node does not have any outgoing edges so
 

00:12:13.839 --> 00:12:15.509 align:start position:0%
node does not have any outgoing edges so
we<00:12:13.920><c> don't</c><00:12:14.079><c> have</c><00:12:14.240><c> to</c><00:12:14.399><c> do</c><00:12:14.560><c> anything</c><00:12:14.959><c> more</c>

00:12:15.509 --> 00:12:15.519 align:start position:0%
we don't have to do anything more
 

00:12:15.519 --> 00:12:17.829 align:start position:0%
we don't have to do anything more
and<00:12:15.760><c> we</c><00:12:16.000><c> even</c><00:12:16.160><c> though</c><00:12:16.399><c> we</c><00:12:16.480><c> do</c><00:12:16.720><c> have</c><00:12:16.880><c> an</c><00:12:17.200><c> a</c><00:12:17.360><c> value</c>

00:12:17.829 --> 00:12:17.839 align:start position:0%
and we even though we do have an a value
 

00:12:17.839 --> 00:12:19.190 align:start position:0%
and we even though we do have an a value
left<00:12:18.240><c> in</c><00:12:18.399><c> our</c><00:12:18.639><c> min</c><00:12:18.880><c> heap</c>

00:12:19.190 --> 00:12:19.200 align:start position:0%
left in our min heap
 

00:12:19.200 --> 00:12:20.790 align:start position:0%
left in our min heap
once<00:12:19.440><c> we</c><00:12:19.680><c> pop</c><00:12:20.000><c> it</c><00:12:20.079><c> we're</c><00:12:20.240><c> going</c><00:12:20.320><c> to</c><00:12:20.480><c> see</c><00:12:20.639><c> that</c>

00:12:20.790 --> 00:12:20.800 align:start position:0%
once we pop it we're going to see that
 

00:12:20.800 --> 00:12:22.550 align:start position:0%
once we pop it we're going to see that
it's<00:12:21.040><c> the</c><00:12:21.279><c> same</c><00:12:21.600><c> node</c><00:12:21.839><c> that</c><00:12:21.920><c> we've</c><00:12:22.160><c> already</c>

00:12:22.550 --> 00:12:22.560 align:start position:0%
it's the same node that we've already
 

00:12:22.560 --> 00:12:24.389 align:start position:0%
it's the same node that we've already
visited<00:12:22.880><c> we</c><00:12:23.120><c> visited</c><00:12:23.519><c> this</c><00:12:23.760><c> two</c><00:12:23.920><c> node</c><00:12:24.160><c> and</c><00:12:24.240><c> we</c>

00:12:24.389 --> 00:12:24.399 align:start position:0%
visited we visited this two node and we
 

00:12:24.399 --> 00:12:26.470 align:start position:0%
visited we visited this two node and we
visited<00:12:24.880><c> every</c><00:12:25.200><c> node</c><00:12:25.519><c> now</c><00:12:25.760><c> and</c><00:12:26.079><c> you</c><00:12:26.160><c> can</c><00:12:26.320><c> see</c>

00:12:26.470 --> 00:12:26.480 align:start position:0%
visited every node now and you can see
 

00:12:26.480 --> 00:12:27.110 align:start position:0%
visited every node now and you can see
the<00:12:26.639><c> max</c>

00:12:27.110 --> 00:12:27.120 align:start position:0%
the max
 

00:12:27.120 --> 00:12:29.990 align:start position:0%
the max
value<00:12:27.519><c> that</c><00:12:27.680><c> we</c><00:12:27.920><c> got</c><00:12:28.240><c> in</c><00:12:28.320><c> terms</c><00:12:28.639><c> of</c><00:12:29.120><c> length</c><00:12:29.680><c> is</c>

00:12:29.990 --> 00:12:30.000 align:start position:0%
value that we got in terms of length is
 

00:12:30.000 --> 00:12:30.550 align:start position:0%
value that we got in terms of length is
three

00:12:30.550 --> 00:12:30.560 align:start position:0%
three
 

00:12:30.560 --> 00:12:32.870 align:start position:0%
three
so<00:12:30.959><c> three</c><00:12:31.440><c> is</c><00:12:31.600><c> going</c><00:12:31.680><c> to</c><00:12:31.760><c> be</c><00:12:32.000><c> our</c><00:12:32.320><c> output</c><00:12:32.720><c> in</c>

00:12:32.870 --> 00:12:32.880 align:start position:0%
so three is going to be our output in
 

00:12:32.880 --> 00:12:33.910 align:start position:0%
so three is going to be our output in
this<00:12:33.040><c> case</c><00:12:33.360><c> it</c><00:12:33.519><c> takes</c>

00:12:33.910 --> 00:12:33.920 align:start position:0%
this case it takes
 

00:12:33.920 --> 00:12:36.870 align:start position:0%
this case it takes
three<00:12:34.320><c> units</c><00:12:34.720><c> of</c><00:12:34.959><c> time</c><00:12:35.360><c> or</c><00:12:35.519><c> whatever</c><00:12:36.240><c> for</c><00:12:36.639><c> us</c>

00:12:36.870 --> 00:12:36.880 align:start position:0%
three units of time or whatever for us
 

00:12:36.880 --> 00:12:37.990 align:start position:0%
three units of time or whatever for us
to<00:12:37.120><c> start</c><00:12:37.519><c> at</c><00:12:37.680><c> this</c>

00:12:37.990 --> 00:12:38.000 align:start position:0%
to start at this
 

00:12:38.000 --> 00:12:40.629 align:start position:0%
to start at this
position<00:12:38.480><c> and</c><00:12:38.560><c> then</c><00:12:38.880><c> send</c><00:12:39.200><c> a</c><00:12:39.360><c> signal</c><00:12:39.920><c> to</c><00:12:40.240><c> every</c>

00:12:40.629 --> 00:12:40.639 align:start position:0%
position and then send a signal to every
 

00:12:40.639 --> 00:12:41.670 align:start position:0%
position and then send a signal to every
other<00:12:41.040><c> node</c>

00:12:41.670 --> 00:12:41.680 align:start position:0%
other node
 

00:12:41.680 --> 00:12:45.110 align:start position:0%
other node
in<00:12:42.240><c> the</c><00:12:42.880><c> graph</c><00:12:43.839><c> so</c><00:12:44.160><c> analyzing</c><00:12:44.720><c> the</c><00:12:44.880><c> time</c>

00:12:45.110 --> 00:12:45.120 align:start position:0%
in the graph so analyzing the time
 

00:12:45.120 --> 00:12:47.030 align:start position:0%
in the graph so analyzing the time
complexity<00:12:45.760><c> of</c><00:12:45.839><c> this</c><00:12:46.000><c> problem</c><00:12:46.399><c> is</c><00:12:46.560><c> actually</c><00:12:46.880><c> a</c>

00:12:47.030 --> 00:12:47.040 align:start position:0%
complexity of this problem is actually a
 

00:12:47.040 --> 00:12:48.949 align:start position:0%
complexity of this problem is actually a
little<00:12:47.279><c> more</c><00:12:47.519><c> difficult</c><00:12:48.000><c> than</c><00:12:48.160><c> you</c><00:12:48.399><c> think</c><00:12:48.720><c> so</c>

00:12:48.949 --> 00:12:48.959 align:start position:0%
little more difficult than you think so
 

00:12:48.959 --> 00:12:49.750 align:start position:0%
little more difficult than you think so
i'm<00:12:49.120><c> going</c><00:12:49.200><c> to</c><00:12:49.360><c> use</c>

00:12:49.750 --> 00:12:49.760 align:start position:0%
i'm going to use
 

00:12:49.760 --> 00:12:51.910 align:start position:0%
i'm going to use
e<00:12:50.079><c> to</c><00:12:50.240><c> tell</c><00:12:50.480><c> us</c><00:12:50.720><c> basically</c><00:12:51.200><c> the</c><00:12:51.360><c> number</c><00:12:51.680><c> of</c>

00:12:51.910 --> 00:12:51.920 align:start position:0%
e to tell us basically the number of
 

00:12:51.920 --> 00:12:52.949 align:start position:0%
e to tell us basically the number of
total<00:12:52.399><c> edges</c>

00:12:52.949 --> 00:12:52.959 align:start position:0%
total edges
 

00:12:52.959 --> 00:12:56.069 align:start position:0%
total edges
inside<00:12:53.440><c> of</c><00:12:54.000><c> our</c><00:12:54.800><c> graph</c><00:12:55.120><c> that</c><00:12:55.279><c> we're</c><00:12:55.440><c> given</c>

00:12:56.069 --> 00:12:56.079 align:start position:0%
inside of our graph that we're given
 

00:12:56.079 --> 00:12:58.870 align:start position:0%
inside of our graph that we're given
and<00:12:56.560><c> v</c><00:12:56.959><c> for</c><00:12:57.120><c> the</c><00:12:57.200><c> total</c><00:12:57.519><c> number</c><00:12:57.839><c> of</c><00:12:58.160><c> nodes</c><00:12:58.560><c> or</c>

00:12:58.870 --> 00:12:58.880 align:start position:0%
and v for the total number of nodes or
 

00:12:58.880 --> 00:13:00.470 align:start position:0%
and v for the total number of nodes or
vertices<00:12:59.519><c> that</c><00:12:59.680><c> we're</c><00:12:59.839><c> given</c>

00:13:00.470 --> 00:13:00.480 align:start position:0%
vertices that we're given
 

00:13:00.480 --> 00:13:03.030 align:start position:0%
vertices that we're given
and<00:13:00.959><c> just</c><00:13:01.200><c> so</c><00:13:01.360><c> you</c><00:13:01.600><c> know</c><00:13:01.920><c> the</c><00:13:02.160><c> maximum</c><00:13:02.720><c> number</c>

00:13:03.030 --> 00:13:03.040 align:start position:0%
and just so you know the maximum number
 

00:13:03.040 --> 00:13:04.069 align:start position:0%
and just so you know the maximum number
of<00:13:03.440><c> edges</c>

00:13:04.069 --> 00:13:04.079 align:start position:0%
of edges
 

00:13:04.079 --> 00:13:06.230 align:start position:0%
of edges
that<00:13:04.240><c> we</c><00:13:04.399><c> could</c><00:13:04.639><c> possibly</c><00:13:05.200><c> have</c><00:13:05.519><c> is</c><00:13:05.680><c> about</c>

00:13:06.230 --> 00:13:06.240 align:start position:0%
that we could possibly have is about
 

00:13:06.240 --> 00:13:08.069 align:start position:0%
that we could possibly have is about
proportional<00:13:06.880><c> to</c><00:13:07.040><c> the</c><00:13:07.200><c> number</c>

00:13:08.069 --> 00:13:08.079 align:start position:0%
proportional to the number
 

00:13:08.079 --> 00:13:11.590 align:start position:0%
proportional to the number
of<00:13:08.720><c> nodes</c><00:13:09.519><c> squared</c><00:13:10.000><c> because</c><00:13:10.320><c> like</c><00:13:11.040><c> it's</c><00:13:11.279><c> just</c>

00:13:11.590 --> 00:13:11.600 align:start position:0%
of nodes squared because like it's just
 

00:13:11.600 --> 00:13:13.750 align:start position:0%
of nodes squared because like it's just
kind<00:13:11.760><c> of</c><00:13:11.920><c> how</c><00:13:12.079><c> it</c><00:13:12.160><c> works</c><00:13:12.399><c> so</c><00:13:12.639><c> like</c><00:13:12.800><c> if</c><00:13:12.959><c> we</c><00:13:13.120><c> had</c>

00:13:13.750 --> 00:13:13.760 align:start position:0%
kind of how it works so like if we had
 

00:13:13.760 --> 00:13:14.629 align:start position:0%
kind of how it works so like if we had
two<00:13:14.000><c> nodes</c>

00:13:14.629 --> 00:13:14.639 align:start position:0%
two nodes
 

00:13:14.639 --> 00:13:17.269 align:start position:0%
two nodes
or<00:13:15.040><c> rather</c><00:13:15.360><c> three</c><00:13:15.600><c> nodes</c><00:13:16.160><c> you</c><00:13:16.240><c> know</c><00:13:16.399><c> there's</c>

00:13:17.269 --> 00:13:17.279 align:start position:0%
or rather three nodes you know there's
 

00:13:17.279 --> 00:13:19.269 align:start position:0%
or rather three nodes you know there's
we<00:13:17.360><c> could</c><00:13:17.519><c> have</c><00:13:17.680><c> bi-directional</c><00:13:18.480><c> edges</c>

00:13:19.269 --> 00:13:19.279 align:start position:0%
we could have bi-directional edges
 

00:13:19.279 --> 00:13:22.710 align:start position:0%
we could have bi-directional edges
for<00:13:19.680><c> every</c><00:13:20.079><c> pair</c><00:13:20.560><c> of</c><00:13:21.200><c> nodes</c><00:13:21.600><c> and</c><00:13:21.760><c> if</c><00:13:21.920><c> you</c><00:13:22.000><c> just</c>

00:13:22.710 --> 00:13:22.720 align:start position:0%
for every pair of nodes and if you just
 

00:13:22.720 --> 00:13:24.710 align:start position:0%
for every pair of nodes and if you just
basically<00:13:23.120><c> this</c><00:13:23.360><c> is</c><00:13:23.440><c> just</c><00:13:23.600><c> something</c><00:13:23.839><c> that's</c>

00:13:24.710 --> 00:13:24.720 align:start position:0%
basically this is just something that's
 

00:13:24.720 --> 00:13:26.790 align:start position:0%
basically this is just something that's
true<00:13:25.040><c> and</c><00:13:25.200><c> that's</c><00:13:25.440><c> what</c><00:13:25.519><c> i'm</c><00:13:25.680><c> going</c><00:13:25.760><c> to</c><00:13:25.920><c> assume</c>

00:13:26.790 --> 00:13:26.800 align:start position:0%
true and that's what i'm going to assume
 

00:13:26.800 --> 00:13:29.430 align:start position:0%
true and that's what i'm going to assume
so<00:13:27.200><c> the</c><00:13:27.440><c> max</c><00:13:27.920><c> size</c><00:13:28.320><c> of</c><00:13:28.560><c> our</c><00:13:28.800><c> heap</c><00:13:29.120><c> could</c>

00:13:29.430 --> 00:13:29.440 align:start position:0%
so the max size of our heap could
 

00:13:29.440 --> 00:13:30.470 align:start position:0%
so the max size of our heap could
actually<00:13:29.920><c> be</c>

00:13:30.470 --> 00:13:30.480 align:start position:0%
actually be
 

00:13:30.480 --> 00:13:33.509 align:start position:0%
actually be
v<00:13:30.800><c> squared</c><00:13:31.519><c> even</c><00:13:31.920><c> though</c><00:13:32.320><c> we</c><00:13:32.560><c> have</c><00:13:32.959><c> let's</c><00:13:33.200><c> say</c>

00:13:33.509 --> 00:13:33.519 align:start position:0%
v squared even though we have let's say
 

00:13:33.519 --> 00:13:33.990 align:start position:0%
v squared even though we have let's say
four

00:13:33.990 --> 00:13:34.000 align:start position:0%
four
 

00:13:34.000 --> 00:13:37.910 align:start position:0%
four
edges<00:13:34.560><c> we</c><00:13:34.880><c> noticed</c><00:13:35.360><c> that</c><00:13:35.760><c> some</c><00:13:36.000><c> of</c><00:13:36.160><c> the</c><00:13:36.800><c> uh</c>

00:13:37.910 --> 00:13:37.920 align:start position:0%
edges we noticed that some of the uh
 

00:13:37.920 --> 00:13:39.590 align:start position:0%
edges we noticed that some of the uh
or<00:13:38.079><c> rather</c><00:13:38.320><c> we</c><00:13:38.480><c> have</c><00:13:38.639><c> four</c><00:13:38.959><c> nodes</c><00:13:39.199><c> we</c><00:13:39.360><c> notice</c>

00:13:39.590 --> 00:13:39.600 align:start position:0%
or rather we have four nodes we notice
 

00:13:39.600 --> 00:13:41.189 align:start position:0%
or rather we have four nodes we notice
that<00:13:39.760><c> some</c><00:13:39.920><c> of</c><00:13:40.000><c> the</c><00:13:40.079><c> nodes</c><00:13:40.399><c> could</c><00:13:40.560><c> be</c><00:13:40.800><c> added</c>

00:13:41.189 --> 00:13:41.199 align:start position:0%
that some of the nodes could be added
 

00:13:41.199 --> 00:13:42.310 align:start position:0%
that some of the nodes could be added
into<00:13:41.440><c> the</c><00:13:41.600><c> min</c><00:13:41.920><c> heap</c>

00:13:42.310 --> 00:13:42.320 align:start position:0%
into the min heap
 

00:13:42.320 --> 00:13:44.629 align:start position:0%
into the min heap
multiple<00:13:42.800><c> times</c><00:13:43.360><c> that's</c><00:13:43.680><c> dependent</c><00:13:44.240><c> on</c><00:13:44.399><c> the</c>

00:13:44.629 --> 00:13:44.639 align:start position:0%
multiple times that's dependent on the
 

00:13:44.639 --> 00:13:46.310 align:start position:0%
multiple times that's dependent on the
total<00:13:44.880><c> number</c><00:13:45.120><c> of</c><00:13:45.360><c> edges</c><00:13:45.760><c> that's</c><00:13:45.920><c> why</c><00:13:46.160><c> we're</c>

00:13:46.310 --> 00:13:46.320 align:start position:0%
total number of edges that's why we're
 

00:13:46.320 --> 00:13:46.870 align:start position:0%
total number of edges that's why we're
saying<00:13:46.560><c> v</c>

00:13:46.870 --> 00:13:46.880 align:start position:0%
saying v
 

00:13:46.880 --> 00:13:49.189 align:start position:0%
saying v
squared<00:13:47.600><c> is</c><00:13:47.760><c> the</c><00:13:47.920><c> total</c><00:13:48.240><c> number</c><00:13:48.639><c> of</c><00:13:48.959><c> nodes</c>

00:13:49.189 --> 00:13:49.199 align:start position:0%
squared is the total number of nodes
 

00:13:49.199 --> 00:13:50.389 align:start position:0%
squared is the total number of nodes
that<00:13:49.279><c> could</c><00:13:49.440><c> be</c><00:13:49.600><c> in</c><00:13:49.680><c> the</c><00:13:49.839><c> heap</c>

00:13:50.389 --> 00:13:50.399 align:start position:0%
that could be in the heap
 

00:13:50.399 --> 00:13:53.110 align:start position:0%
that could be in the heap
so<00:13:50.880><c> every</c><00:13:51.279><c> heap</c><00:13:51.680><c> operation</c><00:13:52.320><c> is</c><00:13:52.560><c> possibly</c>

00:13:53.110 --> 00:13:53.120 align:start position:0%
so every heap operation is possibly
 

00:13:53.120 --> 00:13:54.069 align:start position:0%
so every heap operation is possibly
worst<00:13:53.519><c> case</c>

00:13:54.069 --> 00:13:54.079 align:start position:0%
worst case
 

00:13:54.079 --> 00:13:57.509 align:start position:0%
worst case
log<00:13:54.880><c> v</c><00:13:55.199><c> squared</c><00:13:56.160><c> and</c><00:13:56.480><c> how</c><00:13:56.639><c> many</c><00:13:57.040><c> times</c>

00:13:57.509 --> 00:13:57.519 align:start position:0%
log v squared and how many times
 

00:13:57.519 --> 00:13:59.430 align:start position:0%
log v squared and how many times
are<00:13:57.600><c> we</c><00:13:57.760><c> going</c><00:13:57.839><c> to</c><00:13:57.920><c> be</c><00:13:58.079><c> doing</c><00:13:58.320><c> this</c><00:13:58.560><c> operation</c>

00:13:59.430 --> 00:13:59.440 align:start position:0%
are we going to be doing this operation
 

00:13:59.440 --> 00:14:00.870 align:start position:0%
are we going to be doing this operation
it's<00:13:59.600><c> going</c><00:13:59.760><c> to</c><00:13:59.839><c> be</c><00:14:00.399><c> e</c>

00:14:00.870 --> 00:14:00.880 align:start position:0%
it's going to be e
 

00:14:00.880 --> 00:14:03.030 align:start position:0%
it's going to be e
times<00:14:01.360><c> worst</c><00:14:01.680><c> case</c><00:14:02.000><c> basically</c><00:14:02.399><c> the</c><00:14:02.560><c> number</c><00:14:02.880><c> of</c>

00:14:03.030 --> 00:14:03.040 align:start position:0%
times worst case basically the number of
 

00:14:03.040 --> 00:14:04.790 align:start position:0%
times worst case basically the number of
edges<00:14:03.440><c> because</c><00:14:03.680><c> for</c><00:14:03.920><c> every</c><00:14:04.240><c> edge</c>

00:14:04.790 --> 00:14:04.800 align:start position:0%
edges because for every edge
 

00:14:04.800 --> 00:14:07.350 align:start position:0%
edges because for every edge
is<00:14:05.040><c> how</c><00:14:05.199><c> many</c><00:14:05.440><c> times</c><00:14:05.680><c> we</c><00:14:05.839><c> can</c><00:14:06.079><c> add</c><00:14:06.320><c> values</c><00:14:07.120><c> to</c>

00:14:07.350 --> 00:14:07.360 align:start position:0%
is how many times we can add values to
 

00:14:07.360 --> 00:14:08.069 align:start position:0%
is how many times we can add values to
the<00:14:07.680><c> heap</c>

00:14:08.069 --> 00:14:08.079 align:start position:0%
the heap
 

00:14:08.079 --> 00:14:11.509 align:start position:0%
the heap
right<00:14:08.399><c> so</c><00:14:09.360><c> and</c><00:14:09.920><c> this</c><00:14:10.240><c> and</c><00:14:10.320><c> the</c><00:14:10.399><c> way</c><00:14:10.720><c> logs</c><00:14:11.120><c> work</c>

00:14:11.509 --> 00:14:11.519 align:start position:0%
right so and this and the way logs work
 

00:14:11.519 --> 00:14:13.750 align:start position:0%
right so and this and the way logs work
logarithms<00:14:12.399><c> if</c><00:14:12.480><c> you</c><00:14:12.639><c> take</c><00:14:12.800><c> this</c><00:14:13.120><c> 2</c><00:14:13.440><c> we</c><00:14:13.600><c> can</c>

00:14:13.750 --> 00:14:13.760 align:start position:0%
logarithms if you take this 2 we can
 

00:14:13.760 --> 00:14:14.629 align:start position:0%
logarithms if you take this 2 we can
actually

00:14:14.629 --> 00:14:14.639 align:start position:0%
actually
 

00:14:14.639 --> 00:14:16.470 align:start position:0%
actually
get<00:14:14.800><c> rid</c><00:14:14.959><c> of</c><00:14:15.040><c> that</c><00:14:15.199><c> too</c><00:14:15.519><c> put</c><00:14:15.680><c> it</c><00:14:15.839><c> over</c><00:14:16.160><c> here</c>

00:14:16.470 --> 00:14:16.480 align:start position:0%
get rid of that too put it over here
 

00:14:16.480 --> 00:14:18.310 align:start position:0%
get rid of that too put it over here
right<00:14:16.639><c> put</c><00:14:16.800><c> the</c><00:14:16.959><c> two</c><00:14:17.279><c> over</c><00:14:17.519><c> here</c><00:14:17.680><c> and</c><00:14:17.920><c> we</c><00:14:18.079><c> know</c>

00:14:18.310 --> 00:14:18.320 align:start position:0%
right put the two over here and we know
 

00:14:18.320 --> 00:14:19.110 align:start position:0%
right put the two over here and we know
how<00:14:18.560><c> big</c><00:14:18.880><c> o</c>

00:14:19.110 --> 00:14:19.120 align:start position:0%
how big o
 

00:14:19.120 --> 00:14:20.949 align:start position:0%
how big o
complexity<00:14:19.760><c> works</c><00:14:20.079><c> we</c><00:14:20.240><c> don't</c><00:14:20.399><c> care</c><00:14:20.560><c> about</c>

00:14:20.949 --> 00:14:20.959 align:start position:0%
complexity works we don't care about
 

00:14:20.959 --> 00:14:22.230 align:start position:0%
complexity works we don't care about
constant<00:14:21.600><c> values</c>

00:14:22.230 --> 00:14:22.240 align:start position:0%
constant values
 

00:14:22.240 --> 00:14:24.710 align:start position:0%
constant values
so<00:14:22.399><c> this</c><00:14:22.720><c> two</c><00:14:23.120><c> actually</c><00:14:23.519><c> goes</c><00:14:23.760><c> away</c><00:14:24.320><c> so</c><00:14:24.480><c> the</c>

00:14:24.710 --> 00:14:24.720 align:start position:0%
so this two actually goes away so the
 

00:14:24.720 --> 00:14:25.430 align:start position:0%
so this two actually goes away so the
overall

00:14:25.430 --> 00:14:25.440 align:start position:0%
overall
 

00:14:25.440 --> 00:14:28.629 align:start position:0%
overall
big<00:14:25.680><c> o</c><00:14:26.240><c> time</c><00:14:26.480><c> complexity</c><00:14:27.519><c> with</c><00:14:28.000><c> a</c>

00:14:28.629 --> 00:14:28.639 align:start position:0%
big o time complexity with a
 

00:14:28.639 --> 00:14:31.189 align:start position:0%
big o time complexity with a
priority<00:14:29.199><c> queue</c><00:14:29.440><c> for</c><00:14:30.000><c> a</c><00:14:30.160><c> jigsaw's</c><00:14:30.720><c> algorithm</c>

00:14:31.189 --> 00:14:31.199 align:start position:0%
priority queue for a jigsaw's algorithm
 

00:14:31.199 --> 00:14:32.230 align:start position:0%
priority queue for a jigsaw's algorithm
is<00:14:31.360><c> going</c><00:14:31.440><c> to</c><00:14:31.519><c> be</c><00:14:31.760><c> e</c>

00:14:32.230 --> 00:14:32.240 align:start position:0%
is going to be e
 

00:14:32.240 --> 00:14:35.430 align:start position:0%
is going to be e
log<00:14:32.800><c> v</c><00:14:33.440><c> this</c><00:14:33.680><c> is</c><00:14:33.760><c> just</c><00:14:34.000><c> the</c><00:14:34.480><c> general</c><00:14:34.880><c> overview</c>

00:14:35.430 --> 00:14:35.440 align:start position:0%
log v this is just the general overview
 

00:14:35.440 --> 00:14:37.430 align:start position:0%
log v this is just the general overview
now<00:14:35.600><c> let's</c><00:14:35.839><c> get</c><00:14:36.079><c> into</c><00:14:36.320><c> the</c><00:14:36.480><c> code</c>

00:14:37.430 --> 00:14:37.440 align:start position:0%
now let's get into the code
 

00:14:37.440 --> 00:14:40.870 align:start position:0%
now let's get into the code
so<00:14:37.680><c> we're</c><00:14:37.839><c> actually</c><00:14:38.240><c> given</c><00:14:38.720><c> a</c><00:14:39.120><c> list</c><00:14:39.600><c> of</c><00:14:40.399><c> edges</c>

00:14:40.870 --> 00:14:40.880 align:start position:0%
so we're actually given a list of edges
 

00:14:40.880 --> 00:14:43.189 align:start position:0%
so we're actually given a list of edges
and<00:14:41.040><c> we</c><00:14:41.199><c> want</c><00:14:41.360><c> to</c><00:14:41.519><c> create</c><00:14:41.839><c> an</c><00:14:42.000><c> adjacency</c><00:14:42.880><c> list</c>

00:14:43.189 --> 00:14:43.199 align:start position:0%
and we want to create an adjacency list
 

00:14:43.199 --> 00:14:44.310 align:start position:0%
and we want to create an adjacency list
of<00:14:43.440><c> that</c><00:14:43.839><c> first</c>

00:14:44.310 --> 00:14:44.320 align:start position:0%
of that first
 

00:14:44.320 --> 00:14:46.790 align:start position:0%
of that first
for<00:14:44.880><c> jigsaw's</c><00:14:45.440><c> algorithm</c><00:14:46.320><c> so</c><00:14:46.480><c> the</c><00:14:46.560><c> first</c>

00:14:46.790 --> 00:14:46.800 align:start position:0%
for jigsaw's algorithm so the first
 

00:14:46.800 --> 00:14:48.150 align:start position:0%
for jigsaw's algorithm so the first
thing<00:14:47.040><c> i'm</c><00:14:47.120><c> going</c><00:14:47.199><c> to</c><00:14:47.279><c> do</c><00:14:47.440><c> is</c><00:14:47.600><c> create</c><00:14:48.000><c> a</c>

00:14:48.150 --> 00:14:48.160 align:start position:0%
thing i'm going to do is create a
 

00:14:48.160 --> 00:14:49.910 align:start position:0%
thing i'm going to do is create a
dictionary<00:14:48.720><c> or</c><00:14:48.800><c> a</c><00:14:48.959><c> hashmap</c><00:14:49.600><c> of</c>

00:14:49.910 --> 00:14:49.920 align:start position:0%
dictionary or a hashmap of
 

00:14:49.920 --> 00:14:52.069 align:start position:0%
dictionary or a hashmap of
edges<00:14:50.399><c> initially</c><00:14:51.040><c> it's</c><00:14:51.199><c> just</c><00:14:51.440><c> going</c><00:14:51.519><c> to</c><00:14:51.600><c> be</c><00:14:51.920><c> an</c>

00:14:52.069 --> 00:14:52.079 align:start position:0%
edges initially it's just going to be an
 

00:14:52.079 --> 00:14:53.189 align:start position:0%
edges initially it's just going to be an
empty<00:14:52.639><c> list</c>

00:14:53.189 --> 00:14:53.199 align:start position:0%
empty list
 

00:14:53.199 --> 00:14:55.750 align:start position:0%
empty list
so<00:14:53.440><c> i'm</c><00:14:53.519><c> going</c><00:14:53.600><c> to</c><00:14:53.680><c> go</c><00:14:53.920><c> through</c><00:14:54.320><c> every</c><00:14:54.800><c> edge</c><00:14:55.360><c> in</c>

00:14:55.750 --> 00:14:55.760 align:start position:0%
so i'm going to go through every edge in
 

00:14:55.760 --> 00:14:56.550 align:start position:0%
so i'm going to go through every edge in
the<00:14:56.000><c> input</c>

00:14:56.550 --> 00:14:56.560 align:start position:0%
the input
 

00:14:56.560 --> 00:14:59.990 align:start position:0%
the input
so<00:14:56.880><c> for</c><00:14:57.600><c> so</c><00:14:57.760><c> for</c><00:14:58.000><c> every</c><00:14:58.399><c> edge</c><00:14:58.959><c> u</c><00:14:59.440><c> i'm</c><00:14:59.600><c> going</c><00:14:59.760><c> to</c>

00:14:59.990 --> 00:15:00.000 align:start position:0%
so for so for every edge u i'm going to
 

00:15:00.000 --> 00:15:03.509 align:start position:0%
so for so for every edge u i'm going to
get<00:15:00.240><c> a</c><00:15:00.639><c> list</c><00:15:02.000><c> of</c><00:15:02.399><c> all</c><00:15:02.800><c> of</c><00:15:03.040><c> its</c>

00:15:03.509 --> 00:15:03.519 align:start position:0%
get a list of all of its
 

00:15:03.519 --> 00:15:05.189 align:start position:0%
get a list of all of its
uh<00:15:03.839><c> neighbors</c><00:15:04.320><c> right</c><00:15:04.560><c> because</c><00:15:04.800><c> we</c><00:15:04.959><c> know</c><00:15:05.120><c> that</c>

00:15:05.189 --> 00:15:05.199 align:start position:0%
uh neighbors right because we know that
 

00:15:05.199 --> 00:15:07.189 align:start position:0%
uh neighbors right because we know that
that's<00:15:05.519><c> pretty</c><00:15:05.839><c> useful</c><00:15:06.399><c> for</c><00:15:06.560><c> a</c><00:15:06.720><c> gixxer's</c>

00:15:07.189 --> 00:15:07.199 align:start position:0%
that's pretty useful for a gixxer's
 

00:15:07.199 --> 00:15:08.230 align:start position:0%
that's pretty useful for a gixxer's
algorithm<00:15:07.600><c> we're</c><00:15:07.760><c> going</c><00:15:07.920><c> to</c>

00:15:08.230 --> 00:15:08.240 align:start position:0%
algorithm we're going to
 

00:15:08.240 --> 00:15:10.629 align:start position:0%
algorithm we're going to
basically<00:15:08.880><c> get</c><00:15:09.199><c> every</c><00:15:09.519><c> single</c><00:15:10.000><c> outgoing</c>

00:15:10.629 --> 00:15:10.639 align:start position:0%
basically get every single outgoing
 

00:15:10.639 --> 00:15:12.550 align:start position:0%
basically get every single outgoing
neighbor<00:15:11.040><c> so</c><00:15:11.920><c> v</c>

00:15:12.550 --> 00:15:12.560 align:start position:0%
neighbor so v
 

00:15:12.560 --> 00:15:16.069 align:start position:0%
neighbor so v
is<00:15:12.720><c> the</c><00:15:12.959><c> neighbor</c><00:15:13.600><c> node</c><00:15:14.079><c> and</c><00:15:14.480><c> w</c><00:15:15.199><c> is</c><00:15:15.360><c> the</c><00:15:15.680><c> weight</c>

00:15:16.069 --> 00:15:16.079 align:start position:0%
is the neighbor node and w is the weight
 

00:15:16.079 --> 00:15:17.910 align:start position:0%
is the neighbor node and w is the weight
of<00:15:16.320><c> that</c><00:15:16.639><c> node</c><00:15:16.880><c> so</c><00:15:17.040><c> we're</c><00:15:17.120><c> going</c><00:15:17.199><c> to</c><00:15:17.360><c> add</c><00:15:17.600><c> that</c>

00:15:17.910 --> 00:15:17.920 align:start position:0%
of that node so we're going to add that
 

00:15:17.920 --> 00:15:19.509 align:start position:0%
of that node so we're going to add that
to<00:15:18.240><c> edges</c>

00:15:19.509 --> 00:15:19.519 align:start position:0%
to edges
 

00:15:19.519 --> 00:15:22.470 align:start position:0%
to edges
list<00:15:20.160><c> for</c><00:15:20.480><c> you</c><00:15:21.040><c> so</c><00:15:21.279><c> this</c><00:15:21.440><c> is</c><00:15:21.600><c> just</c><00:15:21.920><c> creating</c><00:15:22.320><c> an</c>

00:15:22.470 --> 00:15:22.480 align:start position:0%
list for you so this is just creating an
 

00:15:22.480 --> 00:15:24.069 align:start position:0%
list for you so this is just creating an
adjacency<00:15:23.120><c> list</c><00:15:23.360><c> for</c><00:15:23.440><c> us</c><00:15:23.600><c> which</c><00:15:23.839><c> is</c><00:15:23.920><c> going</c><00:15:24.000><c> to</c>

00:15:24.069 --> 00:15:24.079 align:start position:0%
adjacency list for us which is going to
 

00:15:24.079 --> 00:15:24.870 align:start position:0%
adjacency list for us which is going to
be<00:15:24.240><c> useful</c>

00:15:24.870 --> 00:15:24.880 align:start position:0%
be useful
 

00:15:24.880 --> 00:15:27.030 align:start position:0%
be useful
now<00:15:25.120><c> i'm</c><00:15:25.279><c> going</c><00:15:25.360><c> to</c><00:15:25.519><c> create</c><00:15:25.839><c> that</c><00:15:26.160><c> min</c><00:15:26.480><c> heap</c><00:15:26.880><c> we</c>

00:15:27.030 --> 00:15:27.040 align:start position:0%
now i'm going to create that min heap we
 

00:15:27.040 --> 00:15:27.910 align:start position:0%
now i'm going to create that min heap we
remember

00:15:27.910 --> 00:15:27.920 align:start position:0%
remember
 

00:15:27.920 --> 00:15:30.949 align:start position:0%
remember
we<00:15:28.160><c> want</c><00:15:28.399><c> to</c><00:15:28.720><c> just</c><00:15:28.959><c> initialize</c><00:15:29.519><c> this</c><00:15:29.759><c> min</c><00:15:30.079><c> heap</c>

00:15:30.949 --> 00:15:30.959 align:start position:0%
we want to just initialize this min heap
 

00:15:30.959 --> 00:15:34.069 align:start position:0%
we want to just initialize this min heap
with<00:15:31.440><c> the</c><00:15:31.839><c> first</c><00:15:32.240><c> value</c><00:15:33.199><c> and</c><00:15:33.600><c> the</c>

00:15:34.069 --> 00:15:34.079 align:start position:0%
with the first value and the
 

00:15:34.079 --> 00:15:35.749 align:start position:0%
with the first value and the
weight<00:15:34.399><c> of</c><00:15:34.560><c> it's</c><00:15:34.800><c> going</c><00:15:34.880><c> to</c><00:15:34.959><c> be</c><00:15:35.120><c> 0</c><00:15:35.440><c> because</c><00:15:35.680><c> we</c>

00:15:35.749 --> 00:15:35.759 align:start position:0%
weight of it's going to be 0 because we
 

00:15:35.759 --> 00:15:37.430 align:start position:0%
weight of it's going to be 0 because we
know<00:15:35.920><c> it</c><00:15:36.000><c> doesn't</c><00:15:36.320><c> cost</c><00:15:36.639><c> us</c><00:15:36.800><c> anything</c><00:15:37.199><c> to</c><00:15:37.279><c> get</c>

00:15:37.430 --> 00:15:37.440 align:start position:0%
know it doesn't cost us anything to get
 

00:15:37.440 --> 00:15:38.949 align:start position:0%
know it doesn't cost us anything to get
there<00:15:37.680><c> and</c><00:15:37.839><c> that</c>

00:15:38.949 --> 00:15:38.959 align:start position:0%
there and that
 

00:15:38.959 --> 00:15:42.069 align:start position:0%
there and that
starting<00:15:39.440><c> node</c><00:15:39.759><c> is</c><00:15:40.000><c> given</c><00:15:40.240><c> to</c><00:15:40.480><c> us</c><00:15:40.720><c> as</c><00:15:41.120><c> k</c><00:15:41.839><c> i'm</c>

00:15:42.069 --> 00:15:42.079 align:start position:0%
starting node is given to us as k i'm
 

00:15:42.079 --> 00:15:43.509 align:start position:0%
starting node is given to us as k i'm
also<00:15:42.320><c> going</c><00:15:42.399><c> to</c><00:15:42.480><c> have</c><00:15:42.800><c> one</c><00:15:42.959><c> more</c><00:15:43.199><c> data</c>

00:15:43.509 --> 00:15:43.519 align:start position:0%
also going to have one more data
 

00:15:43.519 --> 00:15:44.790 align:start position:0%
also going to have one more data
structure<00:15:43.839><c> it's</c><00:15:44.000><c> going</c><00:15:44.079><c> to</c><00:15:44.160><c> be</c><00:15:44.240><c> a</c><00:15:44.480><c> set</c>

00:15:44.790 --> 00:15:44.800 align:start position:0%
structure it's going to be a set
 

00:15:44.800 --> 00:15:46.230 align:start position:0%
structure it's going to be a set
basically<00:15:45.279><c> it's</c><00:15:45.440><c> going</c><00:15:45.519><c> to</c><00:15:45.600><c> keep</c><00:15:45.839><c> track</c><00:15:46.079><c> of</c>

00:15:46.230 --> 00:15:46.240 align:start position:0%
basically it's going to keep track of
 

00:15:46.240 --> 00:15:48.870 align:start position:0%
basically it's going to keep track of
all<00:15:46.720><c> the</c><00:15:47.360><c> nodes</c><00:15:47.680><c> that</c><00:15:47.839><c> we've</c><00:15:48.160><c> visited</c><00:15:48.560><c> because</c>

00:15:48.870 --> 00:15:48.880 align:start position:0%
all the nodes that we've visited because
 

00:15:48.880 --> 00:15:50.069 align:start position:0%
all the nodes that we've visited because
we<00:15:48.959><c> know</c><00:15:49.199><c> we</c><00:15:49.360><c> don't</c><00:15:49.519><c> want</c><00:15:49.680><c> to</c><00:15:49.759><c> go</c>

00:15:50.069 --> 00:15:50.079 align:start position:0%
we know we don't want to go
 

00:15:50.079 --> 00:15:52.629 align:start position:0%
we know we don't want to go
in<00:15:50.240><c> a</c><00:15:50.560><c> cycle</c><00:15:50.959><c> we</c><00:15:51.120><c> don't</c><00:15:51.279><c> want</c><00:15:51.360><c> to</c><00:15:51.440><c> go</c><00:15:51.680><c> in</c><00:15:51.839><c> a</c><00:15:52.160><c> loop</c>

00:15:52.629 --> 00:15:52.639 align:start position:0%
in a cycle we don't want to go in a loop
 

00:15:52.639 --> 00:15:53.829 align:start position:0%
in a cycle we don't want to go in a loop
so<00:15:52.880><c> we</c><00:15:53.040><c> do</c><00:15:53.199><c> have</c><00:15:53.360><c> to</c>

00:15:53.829 --> 00:15:53.839 align:start position:0%
so we do have to
 

00:15:53.839 --> 00:15:55.269 align:start position:0%
so we do have to
sort<00:15:54.000><c> of</c><00:15:54.160><c> keep</c><00:15:54.399><c> track</c><00:15:54.639><c> of</c><00:15:54.800><c> that</c><00:15:54.959><c> i'm</c><00:15:55.120><c> also</c>

00:15:55.269 --> 00:15:55.279 align:start position:0%
sort of keep track of that i'm also
 

00:15:55.279 --> 00:15:57.030 align:start position:0%
sort of keep track of that i'm also
going<00:15:55.440><c> to</c><00:15:55.600><c> have</c><00:15:55.759><c> a</c><00:15:55.920><c> variable</c><00:15:56.480><c> t</c>

00:15:57.030 --> 00:15:57.040 align:start position:0%
going to have a variable t
 

00:15:57.040 --> 00:15:59.030 align:start position:0%
going to have a variable t
for<00:15:57.279><c> the</c><00:15:57.519><c> result</c><00:15:58.399><c> initially</c><00:15:58.800><c> it's</c><00:15:58.959><c> going</c><00:15:58.959><c> to</c>

00:15:59.030 --> 00:15:59.040 align:start position:0%
for the result initially it's going to
 

00:15:59.040 --> 00:16:01.350 align:start position:0%
for the result initially it's going to
be<00:15:59.199><c> 0</c><00:15:59.839><c> basically</c><00:16:00.320><c> the</c><00:16:00.560><c> max</c>

00:16:01.350 --> 00:16:01.360 align:start position:0%
be 0 basically the max
 

00:16:01.360 --> 00:16:03.350 align:start position:0%
be 0 basically the max
value<00:16:01.680><c> that</c><00:16:01.839><c> we</c><00:16:01.920><c> end</c><00:16:02.079><c> up</c><00:16:02.160><c> getting</c><00:16:02.480><c> or</c><00:16:02.639><c> the</c><00:16:02.880><c> last</c>

00:16:03.350 --> 00:16:03.360 align:start position:0%
value that we end up getting or the last
 

00:16:03.360 --> 00:16:04.870 align:start position:0%
value that we end up getting or the last
node<00:16:03.759><c> that</c><00:16:03.920><c> we</c><00:16:04.240><c> visit</c>

00:16:04.870 --> 00:16:04.880 align:start position:0%
node that we visit
 

00:16:04.880 --> 00:16:07.749 align:start position:0%
node that we visit
and<00:16:05.040><c> the</c><00:16:05.279><c> cost</c><00:16:06.000><c> or</c><00:16:06.160><c> the</c><00:16:06.639><c> length</c><00:16:07.040><c> to</c><00:16:07.279><c> visit</c><00:16:07.519><c> that</c>

00:16:07.749 --> 00:16:07.759 align:start position:0%
and the cost or the length to visit that
 

00:16:07.759 --> 00:16:09.110 align:start position:0%
and the cost or the length to visit that
note<00:16:08.000><c> is</c><00:16:08.160><c> going</c><00:16:08.240><c> to</c><00:16:08.320><c> be</c><00:16:08.399><c> the</c><00:16:08.560><c> value</c><00:16:08.880><c> that</c><00:16:08.959><c> we</c>

00:16:09.110 --> 00:16:09.120 align:start position:0%
note is going to be the value that we
 

00:16:09.120 --> 00:16:09.829 align:start position:0%
note is going to be the value that we
return

00:16:09.829 --> 00:16:09.839 align:start position:0%
return
 

00:16:09.839 --> 00:16:11.590 align:start position:0%
return
so<00:16:10.079><c> now</c><00:16:10.480><c> we're</c><00:16:10.639><c> just</c><00:16:10.800><c> going</c><00:16:10.880><c> to</c><00:16:10.959><c> continue</c><00:16:11.440><c> our</c>

00:16:11.590 --> 00:16:11.600 align:start position:0%
so now we're just going to continue our
 

00:16:11.600 --> 00:16:13.590 align:start position:0%
so now we're just going to continue our
algorithm<00:16:12.320><c> while</c><00:16:12.639><c> our</c><00:16:12.959><c> min</c><00:16:13.199><c> heap</c>

00:16:13.590 --> 00:16:13.600 align:start position:0%
algorithm while our min heap
 

00:16:13.600 --> 00:16:16.550 align:start position:0%
algorithm while our min heap
is<00:16:14.000><c> non-empty</c><00:16:15.279><c> we're</c><00:16:15.440><c> going</c><00:16:15.519><c> to</c><00:16:15.600><c> keep</c><00:16:16.079><c> popping</c>

00:16:16.550 --> 00:16:16.560 align:start position:0%
is non-empty we're going to keep popping
 

00:16:16.560 --> 00:16:17.110 align:start position:0%
is non-empty we're going to keep popping
from

00:16:17.110 --> 00:16:17.120 align:start position:0%
from
 

00:16:17.120 --> 00:16:19.350 align:start position:0%
from
our<00:16:17.759><c> heap</c><00:16:18.160><c> while</c><00:16:18.399><c> it's</c><00:16:18.560><c> not</c><00:16:18.880><c> empty</c><00:16:19.120><c> we</c><00:16:19.199><c> know</c>

00:16:19.350 --> 00:16:19.360 align:start position:0%
our heap while it's not empty we know
 

00:16:19.360 --> 00:16:21.030 align:start position:0%
our heap while it's not empty we know
that<00:16:19.519><c> there's</c><00:16:19.759><c> two</c><00:16:20.000><c> values</c><00:16:20.399><c> that</c><00:16:20.560><c> we</c><00:16:20.720><c> added</c>

00:16:21.030 --> 00:16:21.040 align:start position:0%
that there's two values that we added
 

00:16:21.040 --> 00:16:21.430 align:start position:0%
that there's two values that we added
the

00:16:21.430 --> 00:16:21.440 align:start position:0%
the
 

00:16:21.440 --> 00:16:23.030 align:start position:0%
the
weight<00:16:21.759><c> was</c><00:16:22.000><c> the</c><00:16:22.079><c> first</c><00:16:22.399><c> value</c><00:16:22.720><c> the</c><00:16:22.800><c> second</c>

00:16:23.030 --> 00:16:23.040 align:start position:0%
weight was the first value the second
 

00:16:23.040 --> 00:16:24.870 align:start position:0%
weight was the first value the second
was<00:16:23.199><c> the</c><00:16:23.360><c> actual</c><00:16:23.839><c> node</c><00:16:24.160><c> itself</c><00:16:24.560><c> so</c><00:16:24.720><c> we're</c>

00:16:24.870 --> 00:16:24.880 align:start position:0%
was the actual node itself so we're
 

00:16:24.880 --> 00:16:25.829 align:start position:0%
was the actual node itself so we're
going<00:16:24.959><c> to</c><00:16:25.040><c> say</c>

00:16:25.829 --> 00:16:25.839 align:start position:0%
going to say
 

00:16:25.839 --> 00:16:28.870 align:start position:0%
going to say
keep<00:16:26.240><c> q</c><00:16:26.800><c> dot</c><00:16:27.199><c> heap</c><00:16:28.320><c> pop</c>

00:16:28.870 --> 00:16:28.880 align:start position:0%
keep q dot heap pop
 

00:16:28.880 --> 00:16:30.949 align:start position:0%
keep q dot heap pop
from<00:16:29.199><c> our</c><00:16:29.519><c> min</c><00:16:29.759><c> heap</c><00:16:30.000><c> this</c><00:16:30.240><c> is</c><00:16:30.399><c> basically</c><00:16:30.800><c> how</c>

00:16:30.949 --> 00:16:30.959 align:start position:0%
from our min heap this is basically how
 

00:16:30.959 --> 00:16:32.389 align:start position:0%
from our min heap this is basically how
you<00:16:31.120><c> do</c><00:16:31.199><c> it</c><00:16:31.360><c> in</c><00:16:31.440><c> python</c><00:16:32.000><c> it's</c>

00:16:32.389 --> 00:16:32.399 align:start position:0%
you do it in python it's
 

00:16:32.399 --> 00:16:35.189 align:start position:0%
you do it in python it's
pretty<00:16:32.880><c> easy</c><00:16:33.279><c> in</c><00:16:33.440><c> python</c><00:16:33.920><c> that's</c><00:16:34.079><c> what</c><00:16:34.240><c> i</c><00:16:34.399><c> like</c>

00:16:35.189 --> 00:16:35.199 align:start position:0%
pretty easy in python that's what i like
 

00:16:35.199 --> 00:16:35.749 align:start position:0%
pretty easy in python that's what i like
and

00:16:35.749 --> 00:16:35.759 align:start position:0%
and
 

00:16:35.759 --> 00:16:37.350 align:start position:0%
and
like<00:16:36.000><c> i</c><00:16:36.079><c> said</c><00:16:36.240><c> we</c><00:16:36.399><c> don't</c><00:16:36.480><c> want</c><00:16:36.639><c> to</c><00:16:36.800><c> visit</c><00:16:37.199><c> a</c>

00:16:37.350 --> 00:16:37.360 align:start position:0%
like i said we don't want to visit a
 

00:16:37.360 --> 00:16:40.230 align:start position:0%
like i said we don't want to visit a
node<00:16:37.920><c> multiple</c><00:16:38.560><c> times</c><00:16:38.959><c> so</c><00:16:39.199><c> if</c><00:16:39.440><c> we</c><00:16:39.680><c> see</c><00:16:39.920><c> that</c>

00:16:40.230 --> 00:16:40.240 align:start position:0%
node multiple times so if we see that
 

00:16:40.240 --> 00:16:41.030 align:start position:0%
node multiple times so if we see that
this<00:16:40.560><c> node</c>

00:16:41.030 --> 00:16:41.040 align:start position:0%
this node
 

00:16:41.040 --> 00:16:44.470 align:start position:0%
this node
n1<00:16:41.759><c> is</c><00:16:42.079><c> in</c><00:16:42.800><c> visit</c><00:16:43.279><c> meaning</c><00:16:43.519><c> it's</c><00:16:43.759><c> already</c><00:16:44.160><c> been</c>

00:16:44.470 --> 00:16:44.480 align:start position:0%
n1 is in visit meaning it's already been
 

00:16:44.480 --> 00:16:45.430 align:start position:0%
n1 is in visit meaning it's already been
visited<00:16:44.800><c> then</c><00:16:44.959><c> we're</c><00:16:45.120><c> just</c><00:16:45.279><c> going</c><00:16:45.360><c> to</c>

00:16:45.430 --> 00:16:45.440 align:start position:0%
visited then we're just going to
 

00:16:45.440 --> 00:16:46.790 align:start position:0%
visited then we're just going to
continue<00:16:46.079><c> to</c><00:16:46.240><c> the</c><00:16:46.399><c> next</c>

00:16:46.790 --> 00:16:46.800 align:start position:0%
continue to the next
 

00:16:46.800 --> 00:16:48.550 align:start position:0%
continue to the next
iteration<00:16:47.360><c> of</c><00:16:47.440><c> the</c><00:16:47.600><c> loop</c><00:16:47.839><c> we</c><00:16:48.079><c> don't</c><00:16:48.320><c> want</c><00:16:48.480><c> to</c>

00:16:48.550 --> 00:16:48.560 align:start position:0%
iteration of the loop we don't want to
 

00:16:48.560 --> 00:16:50.550 align:start position:0%
iteration of the loop we don't want to
go<00:16:48.720><c> through</c><00:16:49.040><c> all</c><00:16:49.199><c> of</c><00:16:49.360><c> this</c><00:16:49.600><c> node's</c><00:16:50.000><c> neighbors</c>

00:16:50.550 --> 00:16:50.560 align:start position:0%
go through all of this node's neighbors
 

00:16:50.560 --> 00:16:52.790 align:start position:0%
go through all of this node's neighbors
if<00:16:50.720><c> it's</c><00:16:50.880><c> already</c><00:16:51.279><c> been</c><00:16:51.440><c> visited</c><00:16:52.079><c> otherwise</c>

00:16:52.790 --> 00:16:52.800 align:start position:0%
if it's already been visited otherwise
 

00:16:52.800 --> 00:16:54.150 align:start position:0%
if it's already been visited otherwise
what<00:16:52.959><c> we're</c><00:16:53.120><c> going</c><00:16:53.199><c> to</c><00:16:53.360><c> do</c><00:16:53.600><c> is</c>

00:16:54.150 --> 00:16:54.160 align:start position:0%
what we're going to do is
 

00:16:54.160 --> 00:16:56.150 align:start position:0%
what we're going to do is
add<00:16:54.399><c> it</c><00:16:54.560><c> to</c><00:16:54.720><c> visit</c><00:16:55.120><c> so</c><00:16:55.360><c> that</c><00:16:55.519><c> we</c><00:16:55.680><c> don't</c><00:16:55.839><c> visit</c>

00:16:56.150 --> 00:16:56.160 align:start position:0%
add it to visit so that we don't visit
 

00:16:56.160 --> 00:16:58.550 align:start position:0%
add it to visit so that we don't visit
it<00:16:56.320><c> again</c><00:16:57.120><c> and</c><00:16:57.440><c> we're</c><00:16:57.680><c> also</c><00:16:57.920><c> going</c><00:16:58.000><c> to</c><00:16:58.160><c> update</c>

00:16:58.550 --> 00:16:58.560 align:start position:0%
it again and we're also going to update
 

00:16:58.560 --> 00:16:59.509 align:start position:0%
it again and we're also going to update
our<00:16:58.800><c> result</c>

00:16:59.509 --> 00:16:59.519 align:start position:0%
our result
 

00:16:59.519 --> 00:17:01.509 align:start position:0%
our result
t<00:16:59.920><c> so</c><00:17:00.079><c> we're</c><00:17:00.240><c> going</c><00:17:00.320><c> to</c><00:17:00.399><c> set</c><00:17:00.560><c> it</c><00:17:00.639><c> to</c><00:17:00.800><c> the</c><00:17:00.959><c> max</c><00:17:01.360><c> of</c>

00:17:01.509 --> 00:17:01.519 align:start position:0%
t so we're going to set it to the max of
 

00:17:01.519 --> 00:17:02.949 align:start position:0%
t so we're going to set it to the max of
what<00:17:01.680><c> it</c><00:17:01.920><c> already</c><00:17:02.399><c> is</c>

00:17:02.949 --> 00:17:02.959 align:start position:0%
what it already is
 

00:17:02.959 --> 00:17:06.230 align:start position:0%
what it already is
and<00:17:03.199><c> the</c><00:17:03.360><c> max</c><00:17:03.920><c> of</c><00:17:04.400><c> the</c><00:17:04.799><c> weight</c><00:17:05.520><c> that</c><00:17:05.679><c> we</c><00:17:05.839><c> just</c>

00:17:06.230 --> 00:17:06.240 align:start position:0%
and the max of the weight that we just
 

00:17:06.240 --> 00:17:08.230 align:start position:0%
and the max of the weight that we just
got<00:17:06.480><c> the</c><00:17:06.720><c> weight</c><00:17:07.039><c> is</c><00:17:07.199><c> remember</c><00:17:07.600><c> the</c><00:17:07.839><c> time</c><00:17:08.160><c> it</c>

00:17:08.230 --> 00:17:08.240 align:start position:0%
got the weight is remember the time it
 

00:17:08.240 --> 00:17:09.189 align:start position:0%
got the weight is remember the time it
takes<00:17:08.559><c> to</c><00:17:08.799><c> reach</c>

00:17:09.189 --> 00:17:09.199 align:start position:0%
takes to reach
 

00:17:09.199 --> 00:17:11.189 align:start position:0%
takes to reach
this<00:17:09.600><c> node</c><00:17:10.000><c> so</c><00:17:10.160><c> we're</c><00:17:10.319><c> going</c><00:17:10.400><c> to</c><00:17:10.559><c> update</c><00:17:10.880><c> that</c>

00:17:11.189 --> 00:17:11.199 align:start position:0%
this node so we're going to update that
 

00:17:11.199 --> 00:17:13.189 align:start position:0%
this node so we're going to update that
now<00:17:11.679><c> we're</c><00:17:11.839><c> going</c><00:17:11.919><c> to</c><00:17:12.000><c> do</c><00:17:12.240><c> the</c><00:17:12.480><c> breath</c><00:17:12.880><c> first</c>

00:17:13.189 --> 00:17:13.199 align:start position:0%
now we're going to do the breath first
 

00:17:13.199 --> 00:17:13.669 align:start position:0%
now we're going to do the breath first
search

00:17:13.669 --> 00:17:13.679 align:start position:0%
search
 

00:17:13.679 --> 00:17:15.110 align:start position:0%
search
portion<00:17:14.160><c> of</c><00:17:14.240><c> it</c><00:17:14.319><c> so</c><00:17:14.480><c> we're</c><00:17:14.640><c> going</c><00:17:14.720><c> to</c><00:17:14.799><c> go</c>

00:17:15.110 --> 00:17:15.120 align:start position:0%
portion of it so we're going to go
 

00:17:15.120 --> 00:17:17.270 align:start position:0%
portion of it so we're going to go
through<00:17:15.760><c> all</c><00:17:16.000><c> the</c><00:17:16.400><c> neighbors</c>

00:17:17.270 --> 00:17:17.280 align:start position:0%
through all the neighbors
 

00:17:17.280 --> 00:17:20.309 align:start position:0%
through all the neighbors
of<00:17:17.439><c> this</c><00:17:17.679><c> node</c><00:17:18.480><c> so</c><00:17:18.640><c> the</c><00:17:18.959><c> no</c><00:17:19.360><c> the</c><00:17:19.600><c> neighbor</c><00:17:20.160><c> and</c>

00:17:20.309 --> 00:17:20.319 align:start position:0%
of this node so the no the neighbor and
 

00:17:20.319 --> 00:17:21.350 align:start position:0%
of this node so the no the neighbor and
the<00:17:20.559><c> neighbor's</c>

00:17:21.350 --> 00:17:21.360 align:start position:0%
the neighbor's
 

00:17:21.360 --> 00:17:23.189 align:start position:0%
the neighbor's
weight<00:17:21.679><c> so</c><00:17:21.919><c> i'm</c><00:17:22.000><c> just</c><00:17:22.160><c> going</c><00:17:22.240><c> to</c><00:17:22.319><c> call</c><00:17:22.480><c> that</c><00:17:22.720><c> n2</c>

00:17:23.189 --> 00:17:23.199 align:start position:0%
weight so i'm just going to call that n2
 

00:17:23.199 --> 00:17:25.909 align:start position:0%
weight so i'm just going to call that n2
and<00:17:23.360><c> w2</c><00:17:24.160><c> because</c><00:17:24.559><c> i'm</c><00:17:24.799><c> bad</c><00:17:25.039><c> at</c><00:17:25.280><c> naming</c>

00:17:25.909 --> 00:17:25.919 align:start position:0%
and w2 because i'm bad at naming
 

00:17:25.919 --> 00:17:29.830 align:start position:0%
and w2 because i'm bad at naming
these<00:17:26.640><c> so</c><00:17:27.039><c> in</c><00:17:27.839><c> edges</c><00:17:28.559><c> basically</c><00:17:29.120><c> neighbors</c>

00:17:29.830 --> 00:17:29.840 align:start position:0%
these so in edges basically neighbors
 

00:17:29.840 --> 00:17:33.110 align:start position:0%
these so in edges basically neighbors
of<00:17:30.400><c> this</c><00:17:30.880><c> n1</c><00:17:31.760><c> original</c><00:17:32.240><c> node</c><00:17:32.480><c> that</c><00:17:32.640><c> we</c><00:17:32.799><c> just</c>

00:17:33.110 --> 00:17:33.120 align:start position:0%
of this n1 original node that we just
 

00:17:33.120 --> 00:17:33.830 align:start position:0%
of this n1 original node that we just
popped<00:17:33.520><c> from</c>

00:17:33.830 --> 00:17:33.840 align:start position:0%
popped from
 

00:17:33.840 --> 00:17:35.350 align:start position:0%
popped from
our<00:17:34.000><c> min</c><00:17:34.240><c> heap</c><00:17:34.480><c> we're</c><00:17:34.640><c> going</c><00:17:34.720><c> to</c><00:17:34.880><c> go</c><00:17:35.039><c> through</c>

00:17:35.350 --> 00:17:35.360 align:start position:0%
our min heap we're going to go through
 

00:17:35.360 --> 00:17:37.830 align:start position:0%
our min heap we're going to go through
it<00:17:35.919><c> and</c><00:17:36.400><c> for</c><00:17:36.640><c> all</c><00:17:36.880><c> of</c><00:17:36.960><c> the</c><00:17:37.120><c> neighbors</c><00:17:37.600><c> that</c>

00:17:37.830 --> 00:17:37.840 align:start position:0%
it and for all of the neighbors that
 

00:17:37.840 --> 00:17:39.669 align:start position:0%
it and for all of the neighbors that
haven't<00:17:38.320><c> already</c><00:17:38.720><c> been</c><00:17:38.880><c> visited</c><00:17:39.280><c> so</c><00:17:39.440><c> if</c>

00:17:39.669 --> 00:17:39.679 align:start position:0%
haven't already been visited so if
 

00:17:39.679 --> 00:17:43.510 align:start position:0%
haven't already been visited so if
n2<00:17:40.240><c> is</c><00:17:40.640><c> not</c><00:17:41.039><c> in</c><00:17:41.520><c> visit</c><00:17:42.080><c> it's</c><00:17:42.480><c> it</c><00:17:42.720><c> has</c><00:17:43.039><c> not</c><00:17:43.280><c> been</c>

00:17:43.510 --> 00:17:43.520 align:start position:0%
n2 is not in visit it's it has not been
 

00:17:43.520 --> 00:17:44.470 align:start position:0%
n2 is not in visit it's it has not been
visited<00:17:44.000><c> yet</c>

00:17:44.470 --> 00:17:44.480 align:start position:0%
visited yet
 

00:17:44.480 --> 00:17:46.230 align:start position:0%
visited yet
then<00:17:44.720><c> we're</c><00:17:44.880><c> going</c><00:17:44.960><c> to</c><00:17:45.120><c> add</c><00:17:45.280><c> it</c><00:17:45.440><c> to</c><00:17:45.760><c> our</c><00:17:46.000><c> min</c>

00:17:46.230 --> 00:17:46.240 align:start position:0%
then we're going to add it to our min
 

00:17:46.240 --> 00:17:48.070 align:start position:0%
then we're going to add it to our min
heap<00:17:46.480><c> so</c><00:17:46.720><c> heap</c><00:17:47.039><c> q</c><00:17:47.440><c> dot</c>

00:17:48.070 --> 00:17:48.080 align:start position:0%
heap so heap q dot
 

00:17:48.080 --> 00:17:51.190 align:start position:0%
heap so heap q dot
heap<00:17:48.799><c> push</c><00:17:49.600><c> on</c><00:17:49.840><c> to</c><00:17:50.160><c> our</c><00:17:50.320><c> min</c><00:17:50.640><c> heap</c>

00:17:51.190 --> 00:17:51.200 align:start position:0%
heap push on to our min heap
 

00:17:51.200 --> 00:17:54.230 align:start position:0%
heap push on to our min heap
is<00:17:51.360><c> going</c><00:17:51.600><c> to</c><00:17:51.919><c> be</c><00:17:52.480><c> this</c><00:17:52.799><c> node</c><00:17:53.360><c> n2</c>

00:17:54.230 --> 00:17:54.240 align:start position:0%
is going to be this node n2
 

00:17:54.240 --> 00:17:55.750 align:start position:0%
is going to be this node n2
but<00:17:54.480><c> remember</c><00:17:54.880><c> the</c><00:17:54.960><c> first</c><00:17:55.280><c> value</c><00:17:55.600><c> we're</c>

00:17:55.750 --> 00:17:55.760 align:start position:0%
but remember the first value we're
 

00:17:55.760 --> 00:17:57.350 align:start position:0%
but remember the first value we're
adding<00:17:56.080><c> is</c><00:17:56.240><c> the</c><00:17:56.559><c> weight</c><00:17:56.960><c> so</c>

00:17:57.350 --> 00:17:57.360 align:start position:0%
adding is the weight so
 

00:17:57.360 --> 00:18:00.630 align:start position:0%
adding is the weight so
weight<00:17:57.760><c> 2</c><00:17:58.320><c> but</c><00:17:58.720><c> remember</c><00:17:59.520><c> this</c><00:18:00.160><c> weight</c>

00:18:00.630 --> 00:18:00.640 align:start position:0%
weight 2 but remember this weight
 

00:18:00.640 --> 00:18:02.870 align:start position:0%
weight 2 but remember this weight
is<00:18:00.880><c> just</c><00:18:01.360><c> this</c><00:18:01.600><c> weight</c><00:18:01.840><c> 2</c><00:18:02.080><c> is</c><00:18:02.160><c> just</c><00:18:02.400><c> the</c><00:18:02.640><c> weight</c>

00:18:02.870 --> 00:18:02.880 align:start position:0%
is just this weight 2 is just the weight
 

00:18:02.880 --> 00:18:03.750 align:start position:0%
is just this weight 2 is just the weight
that<00:18:03.120><c> it</c><00:18:03.200><c> takes</c>

00:18:03.750 --> 00:18:03.760 align:start position:0%
that it takes
 

00:18:03.760 --> 00:18:05.669 align:start position:0%
that it takes
for<00:18:04.080><c> one</c><00:18:04.400><c> edge</c><00:18:04.720><c> but</c><00:18:04.880><c> we</c><00:18:04.960><c> want</c><00:18:05.120><c> to</c><00:18:05.200><c> keep</c><00:18:05.440><c> track</c>

00:18:05.669 --> 00:18:05.679 align:start position:0%
for one edge but we want to keep track
 

00:18:05.679 --> 00:18:07.270 align:start position:0%
for one edge but we want to keep track
of<00:18:05.840><c> the</c><00:18:06.160><c> total</c>

00:18:07.270 --> 00:18:07.280 align:start position:0%
of the total
 

00:18:07.280 --> 00:18:09.350 align:start position:0%
of the total
uh<00:18:07.679><c> path</c><00:18:08.080><c> length</c><00:18:08.400><c> to</c><00:18:08.559><c> reach</c><00:18:08.799><c> this</c><00:18:09.039><c> node</c><00:18:09.200><c> so</c>

00:18:09.350 --> 00:18:09.360 align:start position:0%
uh path length to reach this node so
 

00:18:09.360 --> 00:18:10.549 align:start position:0%
uh path length to reach this node so
we're<00:18:09.440><c> actually</c><00:18:09.679><c> going</c><00:18:09.760><c> to</c><00:18:09.919><c> add</c><00:18:10.160><c> that</c>

00:18:10.549 --> 00:18:10.559 align:start position:0%
we're actually going to add that
 

00:18:10.559 --> 00:18:13.990 align:start position:0%
we're actually going to add that
w1<00:18:11.760><c> the</c><00:18:12.160><c> first</c><00:18:12.799><c> weight</c><00:18:13.520><c> to</c><00:18:13.760><c> it</c>

00:18:13.990 --> 00:18:14.000 align:start position:0%
w1 the first weight to it
 

00:18:14.000 --> 00:18:17.029 align:start position:0%
w1 the first weight to it
as<00:18:14.160><c> well</c><00:18:14.400><c> so</c><00:18:14.559><c> w1</c><00:18:15.600><c> plus</c><00:18:16.000><c> w2</c>

00:18:17.029 --> 00:18:17.039 align:start position:0%
as well so w1 plus w2
 

00:18:17.039 --> 00:18:20.710 align:start position:0%
as well so w1 plus w2
the<00:18:17.440><c> total</c><00:18:17.919><c> path</c><00:18:18.400><c> that</c><00:18:18.640><c> it</c><00:18:18.720><c> takes</c><00:18:19.039><c> to</c><00:18:19.200><c> reach</c><00:18:19.600><c> n2</c>

00:18:20.710 --> 00:18:20.720 align:start position:0%
the total path that it takes to reach n2
 

00:18:20.720 --> 00:18:22.789 align:start position:0%
the total path that it takes to reach n2
i<00:18:20.799><c> know</c><00:18:20.960><c> that</c><00:18:21.200><c> this</c><00:18:21.440><c> algorithm</c><00:18:22.080><c> is</c><00:18:22.240><c> actually</c>

00:18:22.789 --> 00:18:22.799 align:start position:0%
i know that this algorithm is actually
 

00:18:22.799 --> 00:18:23.990 align:start position:0%
i know that this algorithm is actually
pretty<00:18:23.120><c> complicated</c>

00:18:23.990 --> 00:18:24.000 align:start position:0%
pretty complicated
 

00:18:24.000 --> 00:18:26.070 align:start position:0%
pretty complicated
it's<00:18:24.240><c> not</c><00:18:24.480><c> a</c><00:18:24.559><c> lot</c><00:18:24.799><c> of</c><00:18:24.960><c> code</c><00:18:25.280><c> it's</c><00:18:25.520><c> about</c><00:18:25.760><c> 20</c>

00:18:26.070 --> 00:18:26.080 align:start position:0%
it's not a lot of code it's about 20
 

00:18:26.080 --> 00:18:27.510 align:start position:0%
it's not a lot of code it's about 20
lines<00:18:26.480><c> but</c><00:18:26.640><c> it's</c><00:18:26.880><c> actually</c>

00:18:27.510 --> 00:18:27.520 align:start position:0%
lines but it's actually
 

00:18:27.520 --> 00:18:29.350 align:start position:0%
lines but it's actually
you<00:18:27.679><c> know</c><00:18:28.000><c> it</c><00:18:28.080><c> does</c><00:18:28.320><c> take</c><00:18:28.559><c> some</c><00:18:28.799><c> practice</c><00:18:29.280><c> to</c>

00:18:29.350 --> 00:18:29.360 align:start position:0%
you know it does take some practice to
 

00:18:29.360 --> 00:18:31.270 align:start position:0%
you know it does take some practice to
get<00:18:29.600><c> used</c><00:18:29.840><c> to</c><00:18:30.000><c> it</c><00:18:30.240><c> after</c><00:18:30.559><c> you've</c><00:18:30.799><c> written</c><00:18:31.039><c> it</c><00:18:31.200><c> a</c>

00:18:31.270 --> 00:18:31.280 align:start position:0%
get used to it after you've written it a
 

00:18:31.280 --> 00:18:32.950 align:start position:0%
get used to it after you've written it a
few<00:18:31.440><c> times</c><00:18:31.679><c> you</c><00:18:31.840><c> do</c><00:18:32.000><c> kind</c><00:18:32.160><c> of</c><00:18:32.320><c> understand</c><00:18:32.720><c> the</c>

00:18:32.950 --> 00:18:32.960 align:start position:0%
few times you do kind of understand the
 

00:18:32.960 --> 00:18:33.990 align:start position:0%
few times you do kind of understand the
subtleties<00:18:33.600><c> of</c><00:18:33.760><c> it</c>

00:18:33.990 --> 00:18:34.000 align:start position:0%
subtleties of it
 

00:18:34.000 --> 00:18:35.510 align:start position:0%
subtleties of it
it's<00:18:34.240><c> pretty</c><00:18:34.400><c> easy</c><00:18:34.720><c> to</c><00:18:34.799><c> go</c><00:18:34.960><c> wrong</c><00:18:35.200><c> with</c><00:18:35.360><c> this</c>

00:18:35.510 --> 00:18:35.520 align:start position:0%
it's pretty easy to go wrong with this
 

00:18:35.520 --> 00:18:37.270 align:start position:0%
it's pretty easy to go wrong with this
algorithm<00:18:36.160><c> but</c><00:18:36.320><c> we've</c><00:18:36.559><c> basically</c>

00:18:37.270 --> 00:18:37.280 align:start position:0%
algorithm but we've basically
 

00:18:37.280 --> 00:18:40.070 align:start position:0%
algorithm but we've basically
written<00:18:37.600><c> the</c><00:18:37.760><c> entire</c><00:18:38.160><c> thing</c><00:18:38.480><c> so</c><00:18:39.039><c> now</c><00:18:39.520><c> we</c><00:18:39.760><c> can</c>

00:18:40.070 --> 00:18:40.080 align:start position:0%
written the entire thing so now we can
 

00:18:40.080 --> 00:18:40.549 align:start position:0%
written the entire thing so now we can
return

00:18:40.549 --> 00:18:40.559 align:start position:0%
return
 

00:18:40.559 --> 00:18:42.549 align:start position:0%
return
t<00:18:40.880><c> after</c><00:18:41.120><c> this</c><00:18:41.360><c> loop</c><00:18:41.679><c> is</c><00:18:41.760><c> done</c><00:18:42.000><c> executing</c>

00:18:42.549 --> 00:18:42.559 align:start position:0%
t after this loop is done executing
 

00:18:42.559 --> 00:18:44.470 align:start position:0%
t after this loop is done executing
after<00:18:42.799><c> the</c><00:18:43.120><c> min</c><00:18:43.360><c> heap</c><00:18:43.679><c> is</c><00:18:43.919><c> empty</c>

00:18:44.470 --> 00:18:44.480 align:start position:0%
after the min heap is empty
 

00:18:44.480 --> 00:18:47.830 align:start position:0%
after the min heap is empty
our<00:18:44.720><c> t</c><00:18:45.039><c> should</c><00:18:45.360><c> give</c><00:18:45.600><c> us</c><00:18:45.919><c> the</c><00:18:46.720><c> uh</c><00:18:47.440><c> basically</c>

00:18:47.830 --> 00:18:47.840 align:start position:0%
our t should give us the uh basically
 

00:18:47.840 --> 00:18:49.909 align:start position:0%
our t should give us the uh basically
what<00:18:48.000><c> it</c><00:18:48.080><c> takes</c><00:18:48.400><c> to</c><00:18:48.640><c> reach</c><00:18:48.960><c> every</c><00:18:49.120><c> single</c><00:18:49.520><c> node</c>

00:18:49.909 --> 00:18:49.919 align:start position:0%
what it takes to reach every single node
 

00:18:49.919 --> 00:18:52.150 align:start position:0%
what it takes to reach every single node
if<00:18:50.160><c> it's</c><00:18:50.400><c> possible</c><00:18:50.960><c> right</c><00:18:51.120><c> remember</c><00:18:51.600><c> if</c><00:18:51.760><c> it's</c>

00:18:52.150 --> 00:18:52.160 align:start position:0%
if it's possible right remember if it's
 

00:18:52.160 --> 00:18:53.110 align:start position:0%
if it's possible right remember if it's
possible

00:18:53.110 --> 00:18:53.120 align:start position:0%
possible
 

00:18:53.120 --> 00:18:55.590 align:start position:0%
possible
and<00:18:53.440><c> we</c><00:18:53.600><c> know</c><00:18:53.840><c> that</c><00:18:54.080><c> it's</c><00:18:54.320><c> possible</c><00:18:55.200><c> basically</c>

00:18:55.590 --> 00:18:55.600 align:start position:0%
and we know that it's possible basically
 

00:18:55.600 --> 00:18:56.390 align:start position:0%
and we know that it's possible basically
we've<00:18:55.840><c> visited</c>

00:18:56.390 --> 00:18:56.400 align:start position:0%
we've visited
 

00:18:56.400 --> 00:18:59.029 align:start position:0%
we've visited
every<00:18:56.799><c> single</c><00:18:57.120><c> node</c><00:18:57.440><c> if</c><00:18:57.679><c> the</c><00:18:58.000><c> length</c><00:18:58.400><c> of</c><00:18:58.559><c> visit</c>

00:18:59.029 --> 00:18:59.039 align:start position:0%
every single node if the length of visit
 

00:18:59.039 --> 00:18:59.909 align:start position:0%
every single node if the length of visit
is<00:18:59.280><c> equal</c>

00:18:59.909 --> 00:18:59.919 align:start position:0%
is equal
 

00:18:59.919 --> 00:19:02.549 align:start position:0%
is equal
to<00:19:00.160><c> our</c><00:19:00.400><c> input</c><00:19:00.880><c> value</c><00:19:01.440><c> n</c><00:19:01.760><c> which</c><00:19:02.000><c> tells</c><00:19:02.320><c> us</c><00:19:02.400><c> the</c>

00:19:02.549 --> 00:19:02.559 align:start position:0%
to our input value n which tells us the
 

00:19:02.559 --> 00:19:04.310 align:start position:0%
to our input value n which tells us the
total<00:19:02.799><c> number</c><00:19:03.039><c> of</c><00:19:03.200><c> nodes</c><00:19:03.520><c> if</c><00:19:03.679><c> we</c><00:19:03.840><c> visited</c>

00:19:04.310 --> 00:19:04.320 align:start position:0%
total number of nodes if we visited
 

00:19:04.320 --> 00:19:05.990 align:start position:0%
total number of nodes if we visited
every<00:19:04.640><c> node</c><00:19:04.960><c> then</c><00:19:05.200><c> we</c><00:19:05.360><c> can</c><00:19:05.520><c> return</c>

00:19:05.990 --> 00:19:06.000 align:start position:0%
every node then we can return
 

00:19:06.000 --> 00:19:08.470 align:start position:0%
every node then we can return
t<00:19:06.480><c> remember</c><00:19:06.960><c> the</c><00:19:07.200><c> other</c><00:19:07.440><c> condition</c><00:19:07.840><c> was</c><00:19:08.160><c> if</c><00:19:08.240><c> we</c>

00:19:08.470 --> 00:19:08.480 align:start position:0%
t remember the other condition was if we
 

00:19:08.480 --> 00:19:10.150 align:start position:0%
t remember the other condition was if we
can't<00:19:08.799><c> visit</c><00:19:09.120><c> every</c><00:19:09.360><c> single</c><00:19:09.679><c> node</c>

00:19:10.150 --> 00:19:10.160 align:start position:0%
can't visit every single node
 

00:19:10.160 --> 00:19:13.430 align:start position:0%
can't visit every single node
we<00:19:10.400><c> return</c><00:19:11.039><c> negative</c><00:19:11.600><c> one</c><00:19:12.480><c> and</c><00:19:12.720><c> that</c><00:19:13.039><c> is</c><00:19:13.280><c> the</c>

00:19:13.430 --> 00:19:13.440 align:start position:0%
we return negative one and that is the
 

00:19:13.440 --> 00:19:15.270 align:start position:0%
we return negative one and that is the
entire<00:19:13.840><c> algorithm</c><00:19:14.320><c> remember</c><00:19:14.720><c> the</c><00:19:14.960><c> overall</c>

00:19:15.270 --> 00:19:15.280 align:start position:0%
entire algorithm remember the overall
 

00:19:15.280 --> 00:19:16.470 align:start position:0%
entire algorithm remember the overall
time<00:19:15.440><c> complexity</c><00:19:16.000><c> is</c><00:19:16.160><c> big</c>

00:19:16.470 --> 00:19:16.480 align:start position:0%
time complexity is big
 

00:19:16.480 --> 00:19:19.510 align:start position:0%
time complexity is big
o<00:19:16.960><c> the</c><00:19:17.200><c> total</c><00:19:17.440><c> number</c><00:19:17.679><c> of</c><00:19:17.840><c> edges</c><00:19:18.320><c> multiplied</c>

00:19:19.510 --> 00:19:19.520 align:start position:0%
o the total number of edges multiplied
 

00:19:19.520 --> 00:19:23.190 align:start position:0%
o the total number of edges multiplied
by<00:19:19.919><c> log</c><00:19:20.640><c> the</c><00:19:20.799><c> total</c><00:19:21.120><c> number</c><00:19:21.520><c> of</c><00:19:22.000><c> vertices</c>

00:19:23.190 --> 00:19:23.200 align:start position:0%
by log the total number of vertices
 

00:19:23.200 --> 00:19:25.430 align:start position:0%
by log the total number of vertices
so<00:19:23.360><c> this</c><00:19:23.600><c> was</c><00:19:23.840><c> a</c><00:19:24.080><c> pretty</c><00:19:24.400><c> long</c><00:19:24.720><c> one</c><00:19:25.039><c> it</c><00:19:25.120><c> was</c>

00:19:25.430 --> 00:19:25.440 align:start position:0%
so this was a pretty long one it was
 

00:19:25.440 --> 00:19:27.110 align:start position:0%
so this was a pretty long one it was
pretty<00:19:25.679><c> difficult</c><00:19:26.160><c> i</c><00:19:26.240><c> actually</c><00:19:26.559><c> had</c><00:19:26.720><c> a</c><00:19:26.799><c> lot</c><00:19:26.960><c> of</c>

00:19:27.110 --> 00:19:27.120 align:start position:0%
pretty difficult i actually had a lot of
 

00:19:27.120 --> 00:19:28.950 align:start position:0%
pretty difficult i actually had a lot of
bugs<00:19:27.440><c> when</c><00:19:27.600><c> i</c><00:19:27.679><c> was</c><00:19:27.840><c> writing</c><00:19:28.160><c> my</c><00:19:28.320><c> code</c><00:19:28.640><c> for</c><00:19:28.799><c> this</c>

00:19:28.950 --> 00:19:28.960 align:start position:0%
bugs when i was writing my code for this
 

00:19:28.960 --> 00:19:29.590 align:start position:0%
bugs when i was writing my code for this
video

00:19:29.590 --> 00:19:29.600 align:start position:0%
video
 

00:19:29.600 --> 00:19:32.710 align:start position:0%
video
and<00:19:30.000><c> i</c><00:19:30.400><c> hope</c><00:19:30.720><c> that</c><00:19:30.960><c> this</c><00:19:31.520><c> came</c><00:19:31.760><c> across</c><00:19:32.320><c> pretty</c>

00:19:32.710 --> 00:19:32.720 align:start position:0%
and i hope that this came across pretty
 

00:19:32.720 --> 00:19:33.350 align:start position:0%
and i hope that this came across pretty
clear

00:19:33.350 --> 00:19:33.360 align:start position:0%
clear
 

00:19:33.360 --> 00:19:35.029 align:start position:0%
clear
if<00:19:33.520><c> this</c><00:19:33.679><c> was</c><00:19:33.840><c> helpful</c><00:19:34.400><c> please</c><00:19:34.720><c> like</c><00:19:34.960><c> and</c>

00:19:35.029 --> 00:19:35.039 align:start position:0%
if this was helpful please like and
 

00:19:35.039 --> 00:19:37.190 align:start position:0%
if this was helpful please like and
subscribe<00:19:35.600><c> it</c><00:19:35.679><c> supports</c><00:19:36.080><c> the</c><00:19:36.240><c> channel</c><00:19:36.640><c> a</c><00:19:36.799><c> lot</c>

00:19:37.190 --> 00:19:37.200 align:start position:0%
subscribe it supports the channel a lot
 

00:19:37.200 --> 00:19:38.150 align:start position:0%
subscribe it supports the channel a lot
and<00:19:37.360><c> i'll</c><00:19:37.520><c> hopefully</c>

00:19:38.150 --> 00:19:38.160 align:start position:0%
and i'll hopefully
 

00:19:38.160 --> 00:19:49.039 align:start position:0%
and i'll hopefully
see<00:19:38.400><c> you</c><00:19:38.480><c> pretty</c><00:19:38.799><c> soon</c><00:19:39.360><c> thanks</c><00:19:39.600><c> for</c><00:19:46.039><c> watching</c>

