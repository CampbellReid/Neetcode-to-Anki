WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.829 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.199><c> back</c><00:00:01.439><c> and</c><00:00:01.520><c> let's</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.839 --> 00:00:03.830 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.000><c> some</c><00:00:02.240><c> more</c><00:00:02.480><c> neat</c><00:00:02.720><c> code</c><00:00:02.960><c> today</c><00:00:03.280><c> so</c><00:00:03.439><c> today</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
write some more neat code today so today
 

00:00:03.840 --> 00:00:06.869 align:start position:0%
write some more neat code today so today
let's<00:00:04.160><c> solve</c><00:00:04.640><c> min</c><00:00:05.200><c> stack</c><00:00:06.160><c> so</c><00:00:06.319><c> this</c><00:00:06.560><c> is</c><00:00:06.640><c> a</c>

00:00:06.869 --> 00:00:06.879 align:start position:0%
let's solve min stack so this is a
 

00:00:06.879 --> 00:00:09.110 align:start position:0%
let's solve min stack so this is a
pretty<00:00:07.200><c> good</c><00:00:07.520><c> design</c><00:00:08.160><c> problem</c><00:00:08.880><c> and</c><00:00:08.960><c> the</c>

00:00:09.110 --> 00:00:09.120 align:start position:0%
pretty good design problem and the
 

00:00:09.120 --> 00:00:11.509 align:start position:0%
pretty good design problem and the
description<00:00:09.760><c> is</c><00:00:09.920><c> pretty</c><00:00:10.320><c> simple</c><00:00:10.719><c> so</c><00:00:10.880><c> our</c><00:00:11.200><c> job</c>

00:00:11.509 --> 00:00:11.519 align:start position:0%
description is pretty simple so our job
 

00:00:11.519 --> 00:00:15.270 align:start position:0%
description is pretty simple so our job
is<00:00:11.679><c> to</c><00:00:11.920><c> design</c><00:00:12.639><c> a</c><00:00:12.880><c> stack</c><00:00:13.519><c> class</c><00:00:14.160><c> that</c><00:00:14.400><c> supports</c>

00:00:15.270 --> 00:00:15.280 align:start position:0%
is to design a stack class that supports
 

00:00:15.280 --> 00:00:18.070 align:start position:0%
is to design a stack class that supports
four<00:00:15.679><c> operations</c><00:00:16.960><c> obviously</c><00:00:17.520><c> we</c><00:00:17.680><c> want</c><00:00:17.840><c> to</c>

00:00:18.070 --> 00:00:18.080 align:start position:0%
four operations obviously we want to
 

00:00:18.080 --> 00:00:19.910 align:start position:0%
four operations obviously we want to
push<00:00:18.400><c> on</c><00:00:18.560><c> to</c><00:00:18.720><c> the</c><00:00:18.880><c> stack</c><00:00:19.279><c> we</c><00:00:19.439><c> want</c><00:00:19.600><c> to</c><00:00:19.680><c> be</c><00:00:19.840><c> able</c>

00:00:19.910 --> 00:00:19.920 align:start position:0%
push on to the stack we want to be able
 

00:00:19.920 --> 00:00:22.230 align:start position:0%
push on to the stack we want to be able
to<00:00:20.160><c> pop</c><00:00:20.480><c> from</c><00:00:20.640><c> the</c><00:00:20.800><c> stack</c><00:00:21.439><c> and</c><00:00:21.680><c> we</c><00:00:21.840><c> want</c><00:00:22.000><c> to</c><00:00:22.160><c> be</c>

00:00:22.230 --> 00:00:22.240 align:start position:0%
to pop from the stack and we want to be
 

00:00:22.240 --> 00:00:25.509 align:start position:0%
to pop from the stack and we want to be
able<00:00:22.400><c> to</c><00:00:22.640><c> get</c><00:00:22.880><c> the</c><00:00:23.119><c> top</c><00:00:23.680><c> value</c><00:00:24.560><c> on</c><00:00:24.720><c> the</c><00:00:24.960><c> stack</c>

00:00:25.509 --> 00:00:25.519 align:start position:0%
able to get the top value on the stack
 

00:00:25.519 --> 00:00:27.830 align:start position:0%
able to get the top value on the stack
and<00:00:25.840><c> last</c><00:00:26.080><c> but</c><00:00:26.320><c> not</c><00:00:26.480><c> least</c><00:00:26.800><c> the</c><00:00:27.039><c> fourth</c><00:00:27.439><c> one</c>

00:00:27.830 --> 00:00:27.840 align:start position:0%
and last but not least the fourth one
 

00:00:27.840 --> 00:00:29.029 align:start position:0%
and last but not least the fourth one
this<00:00:28.000><c> is</c><00:00:28.160><c> the</c><00:00:28.240><c> part</c><00:00:28.480><c> that's</c><00:00:28.640><c> going</c><00:00:28.720><c> to</c><00:00:28.800><c> be</c>

00:00:29.029 --> 00:00:29.039 align:start position:0%
this is the part that's going to be
 

00:00:29.039 --> 00:00:31.589 align:start position:0%
this is the part that's going to be
tricky<00:00:29.760><c> we</c><00:00:30.000><c> want</c><00:00:30.160><c> to</c><00:00:30.320><c> be</c><00:00:30.480><c> able</c><00:00:30.720><c> to</c><00:00:30.960><c> retrieve</c>

00:00:31.589 --> 00:00:31.599 align:start position:0%
tricky we want to be able to retrieve
 

00:00:31.599 --> 00:00:35.990 align:start position:0%
tricky we want to be able to retrieve
the<00:00:31.920><c> minimum</c><00:00:32.640><c> element</c><00:00:33.520><c> in</c><00:00:34.000><c> constant</c><00:00:34.880><c> time</c><00:00:35.760><c> so</c>

00:00:35.990 --> 00:00:36.000 align:start position:0%
the minimum element in constant time so
 

00:00:36.000 --> 00:00:38.470 align:start position:0%
the minimum element in constant time so
we<00:00:36.160><c> want</c><00:00:36.320><c> to</c><00:00:36.399><c> be</c><00:00:36.559><c> able</c><00:00:36.719><c> to</c><00:00:36.960><c> do</c><00:00:37.360><c> all</c><00:00:37.840><c> four</c><00:00:38.239><c> of</c>

00:00:38.470 --> 00:00:38.480 align:start position:0%
we want to be able to do all four of
 

00:00:38.480 --> 00:00:41.750 align:start position:0%
we want to be able to do all four of
these<00:00:38.879><c> operations</c><00:00:39.760><c> in</c><00:00:40.079><c> constant</c><00:00:40.640><c> time</c><00:00:41.360><c> now</c><00:00:41.600><c> if</c>

00:00:41.750 --> 00:00:41.760 align:start position:0%
these operations in constant time now if
 

00:00:41.760 --> 00:00:44.709 align:start position:0%
these operations in constant time now if
you<00:00:42.160><c> are</c><00:00:42.320><c> familiar</c><00:00:42.879><c> with</c><00:00:43.200><c> a</c><00:00:43.520><c> stack</c><00:00:44.320><c> data</c>

00:00:44.709 --> 00:00:44.719 align:start position:0%
you are familiar with a stack data
 

00:00:44.719 --> 00:00:47.270 align:start position:0%
you are familiar with a stack data
structure<00:00:45.440><c> you</c><00:00:45.680><c> know</c><00:00:45.840><c> that</c><00:00:46.079><c> by</c><00:00:46.399><c> default</c><00:00:47.120><c> a</c>

00:00:47.270 --> 00:00:47.280 align:start position:0%
structure you know that by default a
 

00:00:47.280 --> 00:00:49.430 align:start position:0%
structure you know that by default a
stack<00:00:47.680><c> will</c><00:00:47.840><c> be</c><00:00:48.000><c> able</c><00:00:48.239><c> to</c><00:00:48.399><c> support</c><00:00:48.960><c> adding</c><00:00:49.280><c> a</c>

00:00:49.430 --> 00:00:49.440 align:start position:0%
stack will be able to support adding a
 

00:00:49.440 --> 00:00:51.750 align:start position:0%
stack will be able to support adding a
value<00:00:50.160><c> popping</c><00:00:50.559><c> a</c><00:00:50.640><c> value</c><00:00:51.120><c> and</c><00:00:51.280><c> getting</c><00:00:51.600><c> the</c>

00:00:51.750 --> 00:00:51.760 align:start position:0%
value popping a value and getting the
 

00:00:51.760 --> 00:00:54.549 align:start position:0%
value popping a value and getting the
top<00:00:52.079><c> value</c><00:00:52.800><c> all</c><00:00:53.039><c> three</c><00:00:53.280><c> of</c><00:00:53.360><c> those</c><00:00:53.760><c> in</c><00:00:54.000><c> of</c><00:00:54.320><c> one</c>

00:00:54.549 --> 00:00:54.559 align:start position:0%
top value all three of those in of one
 

00:00:54.559 --> 00:00:56.549 align:start position:0%
top value all three of those in of one
time<00:00:54.800><c> now</c><00:00:55.039><c> i'm</c><00:00:55.199><c> not</c><00:00:55.360><c> going</c><00:00:55.440><c> to</c><00:00:55.520><c> go</c><00:00:55.760><c> into</c><00:00:56.000><c> the</c>

00:00:56.549 --> 00:00:56.559 align:start position:0%
time now i'm not going to go into the
 

00:00:56.559 --> 00:00:58.869 align:start position:0%
time now i'm not going to go into the
details<00:00:57.520><c> of</c><00:00:57.680><c> how</c><00:00:57.840><c> to</c><00:00:58.000><c> actually</c><00:00:58.399><c> implement</c><00:00:58.800><c> a</c>

00:00:58.869 --> 00:00:58.879 align:start position:0%
details of how to actually implement a
 

00:00:58.879 --> 00:01:00.549 align:start position:0%
details of how to actually implement a
stack<00:00:59.280><c> you</c><00:00:59.359><c> can</c><00:00:59.520><c> implement</c><00:00:59.920><c> it</c><00:01:00.000><c> with</c><00:01:00.160><c> a</c><00:01:00.239><c> linked</c>

00:01:00.549 --> 00:01:00.559 align:start position:0%
stack you can implement it with a linked
 

00:01:00.559 --> 00:01:02.630 align:start position:0%
stack you can implement it with a linked
list<00:01:00.879><c> or</c><00:01:01.039><c> you</c><00:01:01.199><c> can</c><00:01:01.280><c> do</c><00:01:01.440><c> it</c><00:01:01.520><c> with</c><00:01:01.680><c> an</c><00:01:01.840><c> array</c><00:01:02.559><c> in</c>

00:01:02.630 --> 00:01:02.640 align:start position:0%
list or you can do it with an array in
 

00:01:02.640 --> 00:01:03.990 align:start position:0%
list or you can do it with an array in
this<00:01:02.879><c> problem</c><00:01:03.199><c> we're</c><00:01:03.359><c> basically</c><00:01:03.760><c> just</c><00:01:03.920><c> going</c>

00:01:03.990 --> 00:01:04.000 align:start position:0%
this problem we're basically just going
 

00:01:04.000 --> 00:01:06.789 align:start position:0%
this problem we're basically just going
to<00:01:04.080><c> use</c><00:01:04.239><c> the</c><00:01:04.400><c> built-in</c><00:01:05.280><c> data</c><00:01:05.600><c> structure</c><00:01:06.479><c> that</c>

00:01:06.789 --> 00:01:06.799 align:start position:0%
to use the built-in data structure that
 

00:01:06.799 --> 00:01:09.030 align:start position:0%
to use the built-in data structure that
is<00:01:07.040><c> pretty</c><00:01:07.280><c> much</c><00:01:07.520><c> implemented</c><00:01:08.080><c> as</c><00:01:08.240><c> a</c><00:01:08.400><c> stack</c>

00:01:09.030 --> 00:01:09.040 align:start position:0%
is pretty much implemented as a stack
 

00:01:09.040 --> 00:01:11.350 align:start position:0%
is pretty much implemented as a stack
but<00:01:09.280><c> the</c><00:01:09.439><c> main</c><00:01:09.840><c> part</c><00:01:10.159><c> of</c><00:01:10.240><c> this</c><00:01:10.560><c> problem</c><00:01:11.119><c> is</c>

00:01:11.350 --> 00:01:11.360 align:start position:0%
but the main part of this problem is
 

00:01:11.360 --> 00:01:13.590 align:start position:0%
but the main part of this problem is
being<00:01:11.680><c> able</c><00:01:11.840><c> to</c><00:01:12.000><c> do</c><00:01:12.159><c> this</c><00:01:12.479><c> last</c><00:01:12.880><c> operation</c>

00:01:13.590 --> 00:01:13.600 align:start position:0%
being able to do this last operation
 

00:01:13.600 --> 00:01:16.870 align:start position:0%
being able to do this last operation
getting<00:01:13.920><c> the</c><00:01:14.240><c> minimum</c><00:01:14.799><c> value</c><00:01:15.600><c> from</c><00:01:15.920><c> the</c><00:01:16.159><c> stack</c>

00:01:16.870 --> 00:01:16.880 align:start position:0%
getting the minimum value from the stack
 

00:01:16.880 --> 00:01:19.270 align:start position:0%
getting the minimum value from the stack
in<00:01:17.119><c> o</c><00:01:17.439><c> of</c><00:01:17.759><c> one</c><00:01:18.400><c> time</c>

00:01:19.270 --> 00:01:19.280 align:start position:0%
in o of one time
 

00:01:19.280 --> 00:01:21.749 align:start position:0%
in o of one time
right<00:01:19.520><c> because</c><00:01:19.840><c> by</c><00:01:20.080><c> default</c><00:01:20.720><c> a</c><00:01:20.880><c> stack</c><00:01:21.360><c> doesn't</c>

00:01:21.749 --> 00:01:21.759 align:start position:0%
right because by default a stack doesn't
 

00:01:21.759 --> 00:01:24.149 align:start position:0%
right because by default a stack doesn't
support<00:01:22.400><c> this</c><00:01:22.880><c> operation</c>

00:01:24.149 --> 00:01:24.159 align:start position:0%
support this operation
 

00:01:24.159 --> 00:01:26.630 align:start position:0%
support this operation
now<00:01:24.880><c> a</c><00:01:25.040><c> stack</c><00:01:25.520><c> let's</c><00:01:25.680><c> say</c><00:01:25.920><c> we're</c><00:01:26.159><c> implementing</c>

00:01:26.630 --> 00:01:26.640 align:start position:0%
now a stack let's say we're implementing
 

00:01:26.640 --> 00:01:29.510 align:start position:0%
now a stack let's say we're implementing
it<00:01:26.720><c> with</c><00:01:27.040><c> an</c><00:01:27.200><c> array</c><00:01:27.840><c> so</c><00:01:28.080><c> let's</c><00:01:28.320><c> say</c><00:01:28.720><c> this</c><00:01:29.200><c> is</c>

00:01:29.510 --> 00:01:29.520 align:start position:0%
it with an array so let's say this is
 

00:01:29.520 --> 00:01:31.910 align:start position:0%
it with an array so let's say this is
our<00:01:30.000><c> stack</c><00:01:30.640><c> and</c><00:01:30.880><c> let's</c><00:01:31.040><c> say</c><00:01:31.280><c> we</c><00:01:31.439><c> do</c><00:01:31.600><c> a</c><00:01:31.680><c> few</c>

00:01:31.910 --> 00:01:31.920 align:start position:0%
our stack and let's say we do a few
 

00:01:31.920 --> 00:01:33.429 align:start position:0%
our stack and let's say we do a few
operations<00:01:32.560><c> let's</c><00:01:32.720><c> just</c><00:01:32.880><c> look</c><00:01:33.119><c> at</c><00:01:33.200><c> this</c>

00:01:33.429 --> 00:01:33.439 align:start position:0%
operations let's just look at this
 

00:01:33.439 --> 00:01:35.990 align:start position:0%
operations let's just look at this
example<00:01:33.920><c> right</c><00:01:34.079><c> we</c><00:01:34.320><c> push</c><00:01:34.960><c> a</c><00:01:35.119><c> negative</c>

00:01:35.990 --> 00:01:36.000 align:start position:0%
example right we push a negative
 

00:01:36.000 --> 00:01:37.990 align:start position:0%
example right we push a negative
negative<00:01:36.400><c> two</c><00:01:36.880><c> we</c><00:01:37.040><c> push</c><00:01:37.280><c> it</c><00:01:37.360><c> let's</c><00:01:37.600><c> say</c><00:01:37.759><c> to</c><00:01:37.920><c> the</c>

00:01:37.990 --> 00:01:38.000 align:start position:0%
negative two we push it let's say to the
 

00:01:38.000 --> 00:01:39.749 align:start position:0%
negative two we push it let's say to the
bottom<00:01:38.240><c> of</c><00:01:38.320><c> the</c><00:01:38.479><c> stack</c><00:01:38.960><c> we</c><00:01:39.119><c> push</c><00:01:39.439><c> another</c>

00:01:39.749 --> 00:01:39.759 align:start position:0%
bottom of the stack we push another
 

00:01:39.759 --> 00:01:42.550 align:start position:0%
bottom of the stack we push another
value<00:01:40.240><c> a</c><00:01:40.479><c> zero</c><00:01:41.119><c> we</c><00:01:41.360><c> push</c><00:01:41.680><c> another</c><00:01:42.079><c> value</c>

00:01:42.550 --> 00:01:42.560 align:start position:0%
value a zero we push another value
 

00:01:42.560 --> 00:01:45.910 align:start position:0%
value a zero we push another value
negative<00:01:43.439><c> three</c><00:01:44.079><c> and</c><00:01:44.640><c> now</c><00:01:45.040><c> so</c><00:01:45.200><c> we</c><00:01:45.360><c> did</c><00:01:45.600><c> three</c>

00:01:45.910 --> 00:01:45.920 align:start position:0%
negative three and now so we did three
 

00:01:45.920 --> 00:01:48.230 align:start position:0%
negative three and now so we did three
push<00:01:46.240><c> operations</c><00:01:46.799><c> now</c><00:01:46.960><c> we</c><00:01:47.119><c> wanna</c><00:01:47.360><c> do</c><00:01:47.600><c> a</c><00:01:47.840><c> get</c>

00:01:48.230 --> 00:01:48.240 align:start position:0%
push operations now we wanna do a get
 

00:01:48.240 --> 00:01:50.550 align:start position:0%
push operations now we wanna do a get
min<00:01:48.799><c> so</c><00:01:49.040><c> how</c><00:01:49.280><c> exactly</c><00:01:49.920><c> are</c><00:01:50.079><c> we</c><00:01:50.159><c> gonna</c><00:01:50.399><c> be</c><00:01:50.479><c> able</c>

00:01:50.550 --> 00:01:50.560 align:start position:0%
min so how exactly are we gonna be able
 

00:01:50.560 --> 00:01:53.350 align:start position:0%
min so how exactly are we gonna be able
to<00:01:50.799><c> get</c><00:01:51.040><c> the</c><00:01:51.280><c> minimum</c><00:01:51.680><c> here</c><00:01:51.920><c> well</c><00:01:52.240><c> a</c><00:01:52.479><c> naive</c><00:01:53.040><c> way</c>

00:01:53.350 --> 00:01:53.360 align:start position:0%
to get the minimum here well a naive way
 

00:01:53.360 --> 00:01:55.270 align:start position:0%
to get the minimum here well a naive way
would<00:01:53.520><c> be</c><00:01:53.680><c> just</c><00:01:54.000><c> look</c><00:01:54.240><c> at</c><00:01:54.399><c> every</c><00:01:54.640><c> single</c><00:01:54.880><c> value</c>

00:01:55.270 --> 00:01:55.280 align:start position:0%
would be just look at every single value
 

00:01:55.280 --> 00:01:58.230 align:start position:0%
would be just look at every single value
negative<00:01:55.600><c> three</c><00:01:56.320><c> zero</c><00:01:57.040><c> negative</c><00:01:57.439><c> two</c><00:01:57.840><c> so</c><00:01:58.079><c> we</c>

00:01:58.230 --> 00:01:58.240 align:start position:0%
negative three zero negative two so we
 

00:01:58.240 --> 00:02:00.310 align:start position:0%
negative three zero negative two so we
can<00:01:58.320><c> look</c><00:01:58.560><c> through</c><00:01:58.719><c> the</c><00:01:58.880><c> entire</c><00:01:59.759><c> the</c><00:02:00.000><c> entire</c>

00:02:00.310 --> 00:02:00.320 align:start position:0%
can look through the entire the entire
 

00:02:00.320 --> 00:02:02.630 align:start position:0%
can look through the entire the entire
stack<00:02:00.640><c> that's</c><00:02:00.880><c> gonna</c><00:02:00.960><c> be</c><00:02:01.200><c> o</c><00:02:01.439><c> of</c><00:02:01.680><c> n</c><00:02:01.920><c> time</c><00:02:02.320><c> to</c><00:02:02.479><c> get</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
stack that's gonna be o of n time to get
 

00:02:02.640 --> 00:02:04.550 align:start position:0%
stack that's gonna be o of n time to get
the<00:02:02.799><c> minimum</c><00:02:03.360><c> so</c><00:02:03.520><c> at</c><00:02:03.600><c> least</c><00:02:03.920><c> we</c><00:02:04.079><c> have</c><00:02:04.320><c> a</c>

00:02:04.550 --> 00:02:04.560 align:start position:0%
the minimum so at least we have a
 

00:02:04.560 --> 00:02:06.230 align:start position:0%
the minimum so at least we have a
baseline<00:02:05.119><c> at</c><00:02:05.200><c> least</c><00:02:05.360><c> we</c><00:02:05.520><c> know</c><00:02:05.680><c> how</c><00:02:05.840><c> to</c><00:02:05.920><c> do</c><00:02:06.079><c> it</c>

00:02:06.230 --> 00:02:06.240 align:start position:0%
baseline at least we know how to do it
 

00:02:06.240 --> 00:02:08.550 align:start position:0%
baseline at least we know how to do it
in<00:02:06.399><c> o</c><00:02:06.560><c> of</c><00:02:06.799><c> n</c><00:02:06.960><c> time</c><00:02:07.200><c> that's</c><00:02:07.439><c> not</c><00:02:07.680><c> too</c><00:02:07.920><c> bad</c><00:02:08.399><c> but</c>

00:02:08.550 --> 00:02:08.560 align:start position:0%
in o of n time that's not too bad but
 

00:02:08.560 --> 00:02:10.550 align:start position:0%
in o of n time that's not too bad but
how<00:02:08.800><c> can</c><00:02:08.959><c> we</c><00:02:09.119><c> do</c><00:02:09.360><c> better</c><00:02:09.599><c> how</c><00:02:09.759><c> can</c><00:02:10.000><c> we</c><00:02:10.160><c> actually</c>

00:02:10.550 --> 00:02:10.560 align:start position:0%
how can we do better how can we actually
 

00:02:10.560 --> 00:02:13.670 align:start position:0%
how can we do better how can we actually
get<00:02:10.800><c> it</c><00:02:11.120><c> to</c><00:02:11.280><c> be</c><00:02:11.520><c> o</c><00:02:12.080><c> of</c><00:02:12.400><c> one</c><00:02:13.040><c> and</c><00:02:13.200><c> if</c><00:02:13.360><c> you</c><00:02:13.440><c> want</c><00:02:13.599><c> to</c>

00:02:13.670 --> 00:02:13.680 align:start position:0%
get it to be o of one and if you want to
 

00:02:13.680 --> 00:02:15.190 align:start position:0%
get it to be o of one and if you want to
try<00:02:13.920><c> to</c><00:02:14.000><c> figure</c><00:02:14.319><c> it</c><00:02:14.400><c> out</c><00:02:14.560><c> yourself</c><00:02:14.959><c> i</c>

00:02:15.190 --> 00:02:15.200 align:start position:0%
try to figure it out yourself i
 

00:02:15.200 --> 00:02:16.949 align:start position:0%
try to figure it out yourself i
recommend<00:02:15.599><c> taking</c><00:02:15.920><c> a</c><00:02:16.000><c> look</c><00:02:16.239><c> at</c><00:02:16.319><c> this</c><00:02:16.640><c> hint</c>

00:02:16.949 --> 00:02:16.959 align:start position:0%
recommend taking a look at this hint
 

00:02:16.959 --> 00:02:19.350 align:start position:0%
recommend taking a look at this hint
that<00:02:17.200><c> leak</c><00:02:17.440><c> code</c><00:02:17.680><c> actually</c><00:02:18.080><c> provides</c><00:02:18.959><c> they</c>

00:02:19.350 --> 00:02:19.360 align:start position:0%
that leak code actually provides they
 

00:02:19.360 --> 00:02:22.550 align:start position:0%
that leak code actually provides they
say<00:02:19.920><c> consider</c><00:02:20.720><c> each</c><00:02:21.040><c> value</c><00:02:21.520><c> in</c><00:02:21.680><c> the</c><00:02:21.840><c> stack</c>

00:02:22.550 --> 00:02:22.560 align:start position:0%
say consider each value in the stack
 

00:02:22.560 --> 00:02:25.910 align:start position:0%
say consider each value in the stack
having<00:02:23.040><c> a</c><00:02:23.400><c> corresponding</c><00:02:24.480><c> minimum</c><00:02:25.120><c> value</c>

00:02:25.910 --> 00:02:25.920 align:start position:0%
having a corresponding minimum value
 

00:02:25.920 --> 00:02:27.830 align:start position:0%
having a corresponding minimum value
think<00:02:26.160><c> about</c><00:02:26.400><c> that</c><00:02:26.560><c> for</c><00:02:26.720><c> a</c><00:02:26.800><c> second</c><00:02:27.280><c> so</c><00:02:27.520><c> let's</c>

00:02:27.830 --> 00:02:27.840 align:start position:0%
think about that for a second so let's
 

00:02:27.840 --> 00:02:29.910 align:start position:0%
think about that for a second so let's
go<00:02:28.160><c> back</c><00:02:28.400><c> to</c><00:02:28.560><c> the</c><00:02:28.720><c> basics</c><00:02:29.360><c> when</c><00:02:29.520><c> we</c><00:02:29.680><c> were</c>

00:02:29.910 --> 00:02:29.920 align:start position:0%
go back to the basics when we were
 

00:02:29.920 --> 00:02:32.630 align:start position:0%
go back to the basics when we were
adding<00:02:30.319><c> three</c><00:02:30.640><c> values</c><00:02:31.360><c> so</c><00:02:31.760><c> when</c><00:02:31.920><c> we</c><00:02:32.239><c> first</c>

00:02:32.630 --> 00:02:32.640 align:start position:0%
adding three values so when we first
 

00:02:32.640 --> 00:02:35.110 align:start position:0%
adding three values so when we first
added<00:02:32.959><c> a</c><00:02:33.040><c> value</c><00:02:33.440><c> we</c><00:02:33.599><c> added</c><00:02:34.000><c> a</c><00:02:34.160><c> negative</c><00:02:34.560><c> two</c><00:02:34.879><c> so</c>

00:02:35.110 --> 00:02:35.120 align:start position:0%
added a value we added a negative two so
 

00:02:35.120 --> 00:02:38.949 align:start position:0%
added a value we added a negative two so
what's<00:02:35.440><c> the</c><00:02:35.599><c> minimum</c><00:02:36.239><c> at</c><00:02:36.640><c> this</c><00:02:37.200><c> point</c><00:02:37.760><c> in</c><00:02:38.319><c> our</c>

00:02:38.949 --> 00:02:38.959 align:start position:0%
what's the minimum at this point in our
 

00:02:38.959 --> 00:02:41.430 align:start position:0%
what's the minimum at this point in our
stack<00:02:39.680><c> when</c><00:02:39.840><c> we</c><00:02:40.000><c> only</c><00:02:40.239><c> had</c><00:02:40.560><c> one</c><00:02:40.879><c> value</c><00:02:41.280><c> the</c>

00:02:41.430 --> 00:02:41.440 align:start position:0%
stack when we only had one value the
 

00:02:41.440 --> 00:02:44.150 align:start position:0%
stack when we only had one value the
minimum<00:02:41.920><c> at</c><00:02:42.080><c> that</c><00:02:42.319><c> point</c><00:02:42.800><c> was</c><00:02:43.120><c> negative</c><00:02:43.840><c> two</c>

00:02:44.150 --> 00:02:44.160 align:start position:0%
minimum at that point was negative two
 

00:02:44.160 --> 00:02:47.110 align:start position:0%
minimum at that point was negative two
right<00:02:44.720><c> when</c><00:02:44.879><c> we</c><00:02:45.200><c> added</c><00:02:45.920><c> another</c><00:02:46.560><c> value</c><00:02:46.959><c> we</c>

00:02:47.110 --> 00:02:47.120 align:start position:0%
right when we added another value we
 

00:02:47.120 --> 00:02:50.309 align:start position:0%
right when we added another value we
added<00:02:47.680><c> a</c><00:02:48.000><c> zero</c><00:02:48.720><c> what</c><00:02:48.959><c> was</c><00:02:49.200><c> the</c><00:02:49.440><c> minimum</c><00:02:50.080><c> at</c>

00:02:50.309 --> 00:02:50.319 align:start position:0%
added a zero what was the minimum at
 

00:02:50.319 --> 00:02:53.190 align:start position:0%
added a zero what was the minimum at
this<00:02:50.640><c> point</c><00:02:50.959><c> when</c><00:02:51.120><c> we</c><00:02:51.280><c> added</c><00:02:51.599><c> the</c><00:02:51.840><c> zero</c>

00:02:53.190 --> 00:02:53.200 align:start position:0%
this point when we added the zero
 

00:02:53.200 --> 00:02:55.990 align:start position:0%
this point when we added the zero
did<00:02:53.519><c> this</c><00:02:53.840><c> replace</c><00:02:54.640><c> our</c><00:02:55.120><c> current</c><00:02:55.519><c> minimum</c>

00:02:55.990 --> 00:02:56.000 align:start position:0%
did this replace our current minimum
 

00:02:56.000 --> 00:02:58.710 align:start position:0%
did this replace our current minimum
negative<00:02:56.400><c> two</c><00:02:56.879><c> no</c><00:02:57.200><c> it</c><00:02:57.360><c> did</c><00:02:57.599><c> not</c><00:02:57.920><c> so</c><00:02:58.319><c> in</c><00:02:58.560><c> other</c>

00:02:58.710 --> 00:02:58.720 align:start position:0%
negative two no it did not so in other
 

00:02:58.720 --> 00:03:01.750 align:start position:0%
negative two no it did not so in other
words<00:02:59.040><c> we</c><00:02:59.200><c> can</c><00:02:59.440><c> leave</c><00:02:59.760><c> our</c><00:03:00.000><c> minimum</c><00:03:00.560><c> as</c><00:03:00.800><c> it</c><00:03:01.040><c> is</c>

00:03:01.750 --> 00:03:01.760 align:start position:0%
words we can leave our minimum as it is
 

00:03:01.760 --> 00:03:03.750 align:start position:0%
words we can leave our minimum as it is
but<00:03:02.400><c> that's</c><00:03:02.800><c> not</c><00:03:03.040><c> always</c><00:03:03.360><c> going</c><00:03:03.440><c> to</c><00:03:03.519><c> work</c>

00:03:03.750 --> 00:03:03.760 align:start position:0%
but that's not always going to work
 

00:03:03.760 --> 00:03:06.070 align:start position:0%
but that's not always going to work
having<00:03:04.080><c> a</c><00:03:04.400><c> single</c><00:03:04.879><c> value</c><00:03:05.440><c> maintaining</c><00:03:05.920><c> the</c>

00:03:06.070 --> 00:03:06.080 align:start position:0%
having a single value maintaining the
 

00:03:06.080 --> 00:03:07.589 align:start position:0%
having a single value maintaining the
minimum<00:03:06.480><c> isn't</c><00:03:06.800><c> always</c><00:03:07.120><c> going</c><00:03:07.280><c> to</c><00:03:07.360><c> work</c>

00:03:07.589 --> 00:03:07.599 align:start position:0%
minimum isn't always going to work
 

00:03:07.599 --> 00:03:09.750 align:start position:0%
minimum isn't always going to work
because<00:03:07.840><c> for</c><00:03:08.000><c> example</c><00:03:08.640><c> let's</c><00:03:08.879><c> say</c><00:03:09.040><c> we</c><00:03:09.280><c> added</c>

00:03:09.750 --> 00:03:09.760 align:start position:0%
because for example let's say we added
 

00:03:09.760 --> 00:03:11.990 align:start position:0%
because for example let's say we added
another<00:03:10.239><c> negative</c><00:03:10.640><c> 2.</c><00:03:11.040><c> okay</c><00:03:11.360><c> our</c><00:03:11.519><c> minimum</c>

00:03:11.990 --> 00:03:12.000 align:start position:0%
another negative 2. okay our minimum
 

00:03:12.000 --> 00:03:13.750 align:start position:0%
another negative 2. okay our minimum
stays<00:03:12.239><c> the</c><00:03:12.480><c> exact</c><00:03:12.720><c> same</c><00:03:12.959><c> negative</c><00:03:13.280><c> 2</c><00:03:13.519><c> right</c>

00:03:13.750 --> 00:03:13.760 align:start position:0%
stays the exact same negative 2 right
 

00:03:13.760 --> 00:03:16.790 align:start position:0%
stays the exact same negative 2 right
now<00:03:14.080><c> what</c><00:03:14.319><c> if</c><00:03:14.640><c> we</c><00:03:15.040><c> pop</c><00:03:15.440><c> this</c><00:03:15.680><c> negative</c><00:03:16.080><c> 2</c><00:03:16.400><c> okay</c>

00:03:16.790 --> 00:03:16.800 align:start position:0%
now what if we pop this negative 2 okay
 

00:03:16.800 --> 00:03:19.190 align:start position:0%
now what if we pop this negative 2 okay
we<00:03:17.040><c> pop</c><00:03:17.280><c> that</c><00:03:17.440><c> negative</c><00:03:17.840><c> two</c><00:03:18.319><c> now</c><00:03:18.560><c> how</c><00:03:18.800><c> do</c><00:03:18.959><c> we</c>

00:03:19.190 --> 00:03:19.200 align:start position:0%
we pop that negative two now how do we
 

00:03:19.200 --> 00:03:21.430 align:start position:0%
we pop that negative two now how do we
know<00:03:19.680><c> what's</c><00:03:19.920><c> the</c><00:03:20.239><c> new</c><00:03:20.640><c> minimum</c><00:03:21.200><c> is</c><00:03:21.360><c> the</c>

00:03:21.430 --> 00:03:21.440 align:start position:0%
know what's the new minimum is the
 

00:03:21.440 --> 00:03:23.509 align:start position:0%
know what's the new minimum is the
minimum<00:03:21.920><c> gonna</c><00:03:22.239><c> stay</c><00:03:22.560><c> negative</c><00:03:22.959><c> two</c><00:03:23.200><c> or</c><00:03:23.360><c> is</c><00:03:23.440><c> it</c>

00:03:23.509 --> 00:03:23.519 align:start position:0%
minimum gonna stay negative two or is it
 

00:03:23.519 --> 00:03:25.750 align:start position:0%
minimum gonna stay negative two or is it
gonna<00:03:23.680><c> be</c><00:03:23.920><c> zero</c><00:03:24.400><c> well</c><00:03:24.640><c> of</c><00:03:24.799><c> course</c><00:03:25.120><c> we</c><00:03:25.519><c> know</c>

00:03:25.750 --> 00:03:25.760 align:start position:0%
gonna be zero well of course we know
 

00:03:25.760 --> 00:03:27.670 align:start position:0%
gonna be zero well of course we know
it's<00:03:25.920><c> gonna</c><00:03:26.080><c> be</c><00:03:26.400><c> stay</c><00:03:26.799><c> it's</c><00:03:26.959><c> gonna</c><00:03:27.120><c> stay</c><00:03:27.440><c> as</c>

00:03:27.670 --> 00:03:27.680 align:start position:0%
it's gonna be stay it's gonna stay as
 

00:03:27.680 --> 00:03:30.470 align:start position:0%
it's gonna be stay it's gonna stay as
negative<00:03:28.000><c> two</c><00:03:28.319><c> but</c><00:03:28.560><c> how</c><00:03:28.720><c> can</c><00:03:28.959><c> we</c><00:03:29.200><c> do</c><00:03:29.440><c> that</c><00:03:29.840><c> so</c><00:03:30.239><c> a</c>

00:03:30.470 --> 00:03:30.480 align:start position:0%
negative two but how can we do that so a
 

00:03:30.480 --> 00:03:32.949 align:start position:0%
negative two but how can we do that so a
good<00:03:30.799><c> workaround</c><00:03:31.519><c> is</c><00:03:31.920><c> let's</c><00:03:32.560><c> for</c><00:03:32.720><c> each</c>

00:03:32.949 --> 00:03:32.959 align:start position:0%
good workaround is let's for each
 

00:03:32.959 --> 00:03:34.149 align:start position:0%
good workaround is let's for each
position

00:03:34.149 --> 00:03:34.159 align:start position:0%
position
 

00:03:34.159 --> 00:03:36.630 align:start position:0%
position
write<00:03:34.480><c> down</c><00:03:35.040><c> what's</c><00:03:35.280><c> the</c><00:03:35.440><c> minimum</c><00:03:36.000><c> at</c><00:03:36.239><c> this</c>

00:03:36.630 --> 00:03:36.640 align:start position:0%
write down what's the minimum at this
 

00:03:36.640 --> 00:03:39.350 align:start position:0%
write down what's the minimum at this
point<00:03:36.959><c> so</c><00:03:37.120><c> when</c><00:03:37.280><c> we</c><00:03:37.599><c> pop</c><00:03:38.159><c> then</c><00:03:38.319><c> we</c><00:03:38.560><c> know</c><00:03:38.959><c> okay</c>

00:03:39.350 --> 00:03:39.360 align:start position:0%
point so when we pop then we know okay
 

00:03:39.360 --> 00:03:41.750 align:start position:0%
point so when we pop then we know okay
this<00:03:39.599><c> is</c><00:03:39.760><c> going</c><00:03:39.840><c> to</c><00:03:39.920><c> be</c><00:03:40.400><c> the</c><00:03:40.560><c> new</c><00:03:40.799><c> minimum</c><00:03:41.200><c> so</c>

00:03:41.750 --> 00:03:41.760 align:start position:0%
this is going to be the new minimum so
 

00:03:41.760 --> 00:03:43.589 align:start position:0%
this is going to be the new minimum so
let's<00:03:42.000><c> say</c><00:03:42.239><c> at</c><00:03:42.400><c> this</c><00:03:42.640><c> point</c><00:03:43.040><c> the</c><00:03:43.120><c> minimum</c>

00:03:43.589 --> 00:03:43.599 align:start position:0%
let's say at this point the minimum
 

00:03:43.599 --> 00:03:47.030 align:start position:0%
let's say at this point the minimum
stays<00:03:44.400><c> negative</c><00:03:45.120><c> two</c><00:03:45.760><c> and</c><00:03:46.000><c> we</c><00:03:46.239><c> added</c><00:03:46.560><c> a</c><00:03:46.720><c> third</c>

00:03:47.030 --> 00:03:47.040 align:start position:0%
stays negative two and we added a third
 

00:03:47.040 --> 00:03:49.670 align:start position:0%
stays negative two and we added a third
value<00:03:47.360><c> remember</c><00:03:47.680><c> we</c><00:03:47.840><c> added</c><00:03:48.239><c> a</c><00:03:48.560><c> negative</c><00:03:49.360><c> three</c>

00:03:49.670 --> 00:03:49.680 align:start position:0%
value remember we added a negative three
 

00:03:49.680 --> 00:03:52.309 align:start position:0%
value remember we added a negative three
so<00:03:50.080><c> now</c><00:03:50.480><c> what's</c><00:03:50.720><c> the</c><00:03:50.959><c> new</c><00:03:51.120><c> minimum</c><00:03:51.519><c> we</c><00:03:51.680><c> can</c><00:03:52.159><c> we</c>

00:03:52.309 --> 00:03:52.319 align:start position:0%
so now what's the new minimum we can we
 

00:03:52.319 --> 00:03:54.470 align:start position:0%
so now what's the new minimum we can we
can<00:03:52.480><c> compute</c><00:03:52.879><c> it</c><00:03:53.040><c> in</c><00:03:53.200><c> o</c><00:03:53.439><c> of</c><00:03:53.599><c> one</c><00:03:53.840><c> time</c><00:03:54.080><c> by</c><00:03:54.319><c> just</c>

00:03:54.470 --> 00:03:54.480 align:start position:0%
can compute it in o of one time by just
 

00:03:54.480 --> 00:03:56.789 align:start position:0%
can compute it in o of one time by just
comparing<00:03:54.959><c> this</c><00:03:55.280><c> new</c><00:03:55.519><c> value</c><00:03:55.840><c> we</c><00:03:56.000><c> added</c><00:03:56.480><c> and</c>

00:03:56.789 --> 00:03:56.799 align:start position:0%
comparing this new value we added and
 

00:03:56.799 --> 00:03:59.110 align:start position:0%
comparing this new value we added and
comparing<00:03:57.280><c> the</c><00:03:57.519><c> current</c><00:03:57.840><c> minimum</c><00:03:58.560><c> obviously</c>

00:03:59.110 --> 00:03:59.120 align:start position:0%
comparing the current minimum obviously
 

00:03:59.120 --> 00:04:01.509 align:start position:0%
comparing the current minimum obviously
negative<00:03:59.519><c> three</c><00:03:59.760><c> is</c><00:04:00.000><c> smaller</c><00:04:00.560><c> so</c><00:04:00.879><c> at</c><00:04:01.120><c> this</c>

00:04:01.509 --> 00:04:01.519 align:start position:0%
negative three is smaller so at this
 

00:04:01.519 --> 00:04:04.869 align:start position:0%
negative three is smaller so at this
point<00:04:02.080><c> in</c><00:04:02.319><c> our</c><00:04:02.480><c> stack</c><00:04:03.360><c> the</c><00:04:03.840><c> minimum</c><00:04:04.239><c> value</c><00:04:04.720><c> is</c>

00:04:04.869 --> 00:04:04.879 align:start position:0%
point in our stack the minimum value is
 

00:04:04.879 --> 00:04:07.030 align:start position:0%
point in our stack the minimum value is
negative<00:04:05.360><c> three</c><00:04:05.680><c> if</c><00:04:05.760><c> we</c><00:04:05.920><c> were</c><00:04:06.159><c> to</c><00:04:06.480><c> pop</c><00:04:06.799><c> this</c>

00:04:07.030 --> 00:04:07.040 align:start position:0%
negative three if we were to pop this
 

00:04:07.040 --> 00:04:09.509 align:start position:0%
negative three if we were to pop this
negative<00:04:07.439><c> three</c><00:04:08.080><c> then</c><00:04:08.319><c> the</c><00:04:08.560><c> new</c><00:04:08.799><c> minimum</c>

00:04:09.509 --> 00:04:09.519 align:start position:0%
negative three then the new minimum
 

00:04:09.519 --> 00:04:12.309 align:start position:0%
negative three then the new minimum
would<00:04:10.080><c> be</c><00:04:10.640><c> a</c><00:04:10.799><c> negative</c><00:04:11.200><c> two</c><00:04:11.519><c> right</c><00:04:11.920><c> this</c><00:04:12.159><c> would</c>

00:04:12.309 --> 00:04:12.319 align:start position:0%
would be a negative two right this would
 

00:04:12.319 --> 00:04:13.990 align:start position:0%
would be a negative two right this would
be<00:04:12.480><c> the</c><00:04:12.560><c> top</c><00:04:12.799><c> of</c><00:04:12.879><c> our</c><00:04:12.959><c> stack</c><00:04:13.360><c> this</c><00:04:13.599><c> would</c><00:04:13.760><c> be</c>

00:04:13.990 --> 00:04:14.000 align:start position:0%
be the top of our stack this would be
 

00:04:14.000 --> 00:04:16.229 align:start position:0%
be the top of our stack this would be
the<00:04:14.159><c> minimum</c><00:04:14.560><c> so</c><00:04:14.799><c> far</c><00:04:15.040><c> so</c><00:04:15.439><c> what</c><00:04:15.599><c> you</c><00:04:15.840><c> might</c><00:04:16.000><c> be</c>

00:04:16.229 --> 00:04:16.239 align:start position:0%
the minimum so far so what you might be
 

00:04:16.239 --> 00:04:19.189 align:start position:0%
the minimum so far so what you might be
noticing<00:04:16.799><c> is</c><00:04:17.280><c> on</c><00:04:17.600><c> this</c><00:04:17.919><c> right</c><00:04:18.239><c> hand</c><00:04:18.560><c> side</c><00:04:18.880><c> i'm</c>

00:04:19.189 --> 00:04:19.199 align:start position:0%
noticing is on this right hand side i'm
 

00:04:19.199 --> 00:04:22.790 align:start position:0%
noticing is on this right hand side i'm
actually<00:04:19.680><c> defining</c><00:04:20.720><c> another</c><00:04:21.919><c> stack</c><00:04:22.479><c> right</c><00:04:22.639><c> we</c>

00:04:22.790 --> 00:04:22.800 align:start position:0%
actually defining another stack right we
 

00:04:22.800 --> 00:04:26.230 align:start position:0%
actually defining another stack right we
have<00:04:23.120><c> two</c><00:04:23.520><c> stacks</c><00:04:24.320><c> one</c><00:04:24.639><c> stack</c><00:04:25.280><c> is</c><00:04:25.520><c> telling</c><00:04:25.840><c> us</c>

00:04:26.230 --> 00:04:26.240 align:start position:0%
have two stacks one stack is telling us
 

00:04:26.240 --> 00:04:28.550 align:start position:0%
have two stacks one stack is telling us
the<00:04:26.560><c> values</c><00:04:27.040><c> that</c><00:04:27.120><c> we've</c><00:04:27.360><c> added</c><00:04:27.759><c> so</c><00:04:28.080><c> far</c><00:04:28.479><c> in</c>

00:04:28.550 --> 00:04:28.560 align:start position:0%
the values that we've added so far in
 

00:04:28.560 --> 00:04:31.110 align:start position:0%
the values that we've added so far in
the<00:04:28.800><c> order</c><00:04:29.199><c> that</c><00:04:29.360><c> we</c><00:04:29.600><c> added</c><00:04:29.919><c> them</c><00:04:30.320><c> the</c><00:04:30.639><c> other</c>

00:04:31.110 --> 00:04:31.120 align:start position:0%
the order that we added them the other
 

00:04:31.120 --> 00:04:33.270 align:start position:0%
the order that we added them the other
the<00:04:31.280><c> other</c><00:04:31.520><c> stack</c><00:04:31.919><c> is</c><00:04:32.000><c> telling</c><00:04:32.320><c> us</c><00:04:32.639><c> what's</c><00:04:32.960><c> the</c>

00:04:33.270 --> 00:04:33.280 align:start position:0%
the other stack is telling us what's the
 

00:04:33.280 --> 00:04:36.790 align:start position:0%
the other stack is telling us what's the
minimum<00:04:33.840><c> value</c><00:04:34.240><c> that</c><00:04:34.400><c> we</c><00:04:34.639><c> have</c><00:04:34.960><c> added</c><00:04:35.759><c> so</c><00:04:36.080><c> far</c>

00:04:36.790 --> 00:04:36.800 align:start position:0%
minimum value that we have added so far
 

00:04:36.800 --> 00:04:39.110 align:start position:0%
minimum value that we have added so far
in<00:04:37.040><c> each</c><00:04:37.440><c> position</c><00:04:38.000><c> of</c><00:04:38.160><c> the</c><00:04:38.320><c> stack</c><00:04:38.639><c> so</c><00:04:38.800><c> if</c><00:04:38.880><c> we</c>

00:04:39.110 --> 00:04:39.120 align:start position:0%
in each position of the stack so if we
 

00:04:39.120 --> 00:04:41.430 align:start position:0%
in each position of the stack so if we
add<00:04:39.360><c> a</c><00:04:39.520><c> value</c><00:04:40.080><c> we'll</c><00:04:40.240><c> be</c><00:04:40.400><c> inserting</c><00:04:40.960><c> into</c><00:04:41.199><c> both</c>

00:04:41.430 --> 00:04:41.440 align:start position:0%
add a value we'll be inserting into both
 

00:04:41.440 --> 00:04:43.749 align:start position:0%
add a value we'll be inserting into both
stacks<00:04:41.919><c> if</c><00:04:42.000><c> we</c><00:04:42.240><c> pop</c><00:04:42.639><c> a</c><00:04:42.720><c> value</c><00:04:43.360><c> we'll</c><00:04:43.520><c> be</c>

00:04:43.749 --> 00:04:43.759 align:start position:0%
stacks if we pop a value we'll be
 

00:04:43.759 --> 00:04:46.150 align:start position:0%
stacks if we pop a value we'll be
popping<00:04:44.240><c> from</c><00:04:44.560><c> both</c><00:04:44.880><c> stacks</c><00:04:45.440><c> when</c><00:04:45.600><c> we</c><00:04:45.759><c> get</c><00:04:45.919><c> the</c>

00:04:46.150 --> 00:04:46.160 align:start position:0%
popping from both stacks when we get the
 

00:04:46.160 --> 00:04:47.830 align:start position:0%
popping from both stacks when we get the
top<00:04:46.560><c> value</c><00:04:46.960><c> of</c><00:04:47.120><c> our</c><00:04:47.199><c> stack</c><00:04:47.520><c> right</c><00:04:47.680><c> because</c>

00:04:47.830 --> 00:04:47.840 align:start position:0%
top value of our stack right because
 

00:04:47.840 --> 00:04:49.670 align:start position:0%
top value of our stack right because
remember<00:04:48.240><c> that's</c><00:04:48.479><c> an</c><00:04:48.639><c> operation</c><00:04:49.120><c> the</c><00:04:49.360><c> top</c>

00:04:49.670 --> 00:04:49.680 align:start position:0%
remember that's an operation the top
 

00:04:49.680 --> 00:04:51.830 align:start position:0%
remember that's an operation the top
value<00:04:50.240><c> we're</c><00:04:50.479><c> going</c><00:04:50.560><c> to</c><00:04:50.639><c> be</c><00:04:50.800><c> looking</c><00:04:51.199><c> at</c><00:04:51.600><c> the</c>

00:04:51.830 --> 00:04:51.840 align:start position:0%
value we're going to be looking at the
 

00:04:51.840 --> 00:04:53.430 align:start position:0%
value we're going to be looking at the
first<00:04:52.320><c> stack</c><00:04:52.639><c> we're</c><00:04:52.720><c> just</c><00:04:52.880><c> going</c><00:04:52.960><c> to</c><00:04:53.040><c> say</c><00:04:53.199><c> okay</c>

00:04:53.430 --> 00:04:53.440 align:start position:0%
first stack we're just going to say okay
 

00:04:53.440 --> 00:04:55.590 align:start position:0%
first stack we're just going to say okay
this<00:04:53.680><c> is</c><00:04:53.759><c> the</c><00:04:54.000><c> most</c><00:04:54.320><c> recently</c><00:04:54.800><c> added</c><00:04:55.120><c> value</c><00:04:55.520><c> in</c>

00:04:55.590 --> 00:04:55.600 align:start position:0%
this is the most recently added value in
 

00:04:55.600 --> 00:04:58.390 align:start position:0%
this is the most recently added value in
the<00:04:55.680><c> stack</c><00:04:56.240><c> when</c><00:04:56.479><c> we</c><00:04:56.880><c> do</c><00:04:57.120><c> the</c><00:04:57.440><c> get</c><00:04:57.919><c> min</c>

00:04:58.390 --> 00:04:58.400 align:start position:0%
the stack when we do the get min
 

00:04:58.400 --> 00:05:00.790 align:start position:0%
the stack when we do the get min
operation<00:04:59.280><c> we're</c><00:04:59.520><c> going</c><00:04:59.600><c> to</c><00:04:59.759><c> look</c><00:05:00.000><c> at</c><00:05:00.080><c> the</c><00:05:00.320><c> top</c>

00:05:00.790 --> 00:05:00.800 align:start position:0%
operation we're going to look at the top
 

00:05:00.800 --> 00:05:04.150 align:start position:0%
operation we're going to look at the top
of<00:05:01.039><c> our</c><00:05:01.280><c> minimum</c><00:05:01.840><c> stack</c><00:05:02.560><c> get</c><00:05:02.960><c> that</c><00:05:03.440><c> in</c><00:05:03.840><c> o</c><00:05:04.000><c> of</c>

00:05:04.150 --> 00:05:04.160 align:start position:0%
of our minimum stack get that in o of
 

00:05:04.160 --> 00:05:05.830 align:start position:0%
of our minimum stack get that in o of
one<00:05:04.400><c> time</c><00:05:04.639><c> right</c><00:05:04.800><c> we</c><00:05:04.960><c> just</c><00:05:05.120><c> have</c><00:05:05.199><c> to</c><00:05:05.280><c> get</c><00:05:05.600><c> one</c>

00:05:05.830 --> 00:05:05.840 align:start position:0%
one time right we just have to get one
 

00:05:05.840 --> 00:05:07.749 align:start position:0%
one time right we just have to get one
value<00:05:06.160><c> so</c><00:05:06.320><c> we</c><00:05:06.400><c> can</c><00:05:06.479><c> do</c><00:05:06.639><c> an</c><00:05:06.880><c> o</c><00:05:07.039><c> of</c><00:05:07.120><c> one</c><00:05:07.360><c> time</c>

00:05:07.749 --> 00:05:07.759 align:start position:0%
value so we can do an o of one time
 

00:05:07.759 --> 00:05:09.590 align:start position:0%
value so we can do an o of one time
don't<00:05:08.000><c> have</c><00:05:08.160><c> to</c><00:05:08.320><c> pop</c><00:05:08.560><c> anything</c><00:05:09.120><c> we</c><00:05:09.280><c> just</c><00:05:09.440><c> have</c>

00:05:09.590 --> 00:05:09.600 align:start position:0%
don't have to pop anything we just have
 

00:05:09.600 --> 00:05:12.629 align:start position:0%
don't have to pop anything we just have
to<00:05:09.759><c> take</c><00:05:10.000><c> a</c><00:05:10.080><c> look</c><00:05:10.400><c> at</c><00:05:10.639><c> our</c><00:05:10.960><c> second</c><00:05:11.440><c> stack</c><00:05:12.320><c> so</c>

00:05:12.629 --> 00:05:12.639 align:start position:0%
to take a look at our second stack so
 

00:05:12.639 --> 00:05:14.629 align:start position:0%
to take a look at our second stack so
that<00:05:12.960><c> is</c><00:05:13.120><c> the</c><00:05:13.360><c> main</c><00:05:13.759><c> idea</c><00:05:14.160><c> it's</c><00:05:14.320><c> a</c><00:05:14.400><c> little</c>

00:05:14.629 --> 00:05:14.639 align:start position:0%
that is the main idea it's a little
 

00:05:14.639 --> 00:05:16.550 align:start position:0%
that is the main idea it's a little
tricky<00:05:15.039><c> to</c><00:05:15.199><c> actually</c><00:05:15.600><c> come</c><00:05:15.919><c> up</c><00:05:16.000><c> with</c><00:05:16.160><c> this</c><00:05:16.400><c> but</c>

00:05:16.550 --> 00:05:16.560 align:start position:0%
tricky to actually come up with this but
 

00:05:16.560 --> 00:05:19.430 align:start position:0%
tricky to actually come up with this but
once<00:05:16.880><c> you</c><00:05:17.120><c> do</c><00:05:17.440><c> it's</c><00:05:17.759><c> very</c><00:05:18.240><c> simple</c><00:05:18.880><c> so</c><00:05:19.199><c> now</c>

00:05:19.430 --> 00:05:19.440 align:start position:0%
once you do it's very simple so now
 

00:05:19.440 --> 00:05:21.430 align:start position:0%
once you do it's very simple so now
let's<00:05:19.680><c> actually</c><00:05:20.080><c> jump</c><00:05:20.400><c> into</c><00:05:20.560><c> the</c><00:05:20.720><c> code</c><00:05:21.120><c> okay</c>

00:05:21.430 --> 00:05:21.440 align:start position:0%
let's actually jump into the code okay
 

00:05:21.440 --> 00:05:23.990 align:start position:0%
let's actually jump into the code okay
so<00:05:21.680><c> now</c><00:05:21.919><c> let's</c><00:05:22.160><c> get</c><00:05:22.479><c> into</c><00:05:22.720><c> the</c><00:05:22.880><c> coding</c><00:05:23.280><c> portion</c>

00:05:23.990 --> 00:05:24.000 align:start position:0%
so now let's get into the coding portion
 

00:05:24.000 --> 00:05:25.909 align:start position:0%
so now let's get into the coding portion
so<00:05:24.320><c> we</c><00:05:24.560><c> know</c><00:05:24.720><c> that</c><00:05:24.800><c> we</c><00:05:24.960><c> have</c><00:05:25.039><c> to</c><00:05:25.120><c> support</c><00:05:25.600><c> four</c>

00:05:25.909 --> 00:05:25.919 align:start position:0%
so we know that we have to support four
 

00:05:25.919 --> 00:05:27.830 align:start position:0%
so we know that we have to support four
operations<00:05:26.479><c> and</c><00:05:26.639><c> in</c><00:05:26.800><c> our</c><00:05:26.960><c> constructor</c><00:05:27.680><c> the</c>

00:05:27.830 --> 00:05:27.840 align:start position:0%
operations and in our constructor the
 

00:05:27.840 --> 00:05:29.029 align:start position:0%
operations and in our constructor the
first<00:05:28.000><c> thing</c><00:05:28.160><c> we're</c><00:05:28.320><c> going</c><00:05:28.400><c> to</c><00:05:28.479><c> do</c><00:05:28.720><c> is</c><00:05:28.800><c> since</c>

00:05:29.029 --> 00:05:29.039 align:start position:0%
first thing we're going to do is since
 

00:05:29.039 --> 00:05:31.029 align:start position:0%
first thing we're going to do is since
we<00:05:29.199><c> know</c><00:05:29.440><c> we're</c><00:05:29.600><c> going</c><00:05:29.680><c> to</c><00:05:29.759><c> have</c><00:05:30.080><c> two</c><00:05:30.400><c> stacks</c>

00:05:31.029 --> 00:05:31.039 align:start position:0%
we know we're going to have two stacks
 

00:05:31.039 --> 00:05:33.350 align:start position:0%
we know we're going to have two stacks
let's<00:05:31.280><c> define</c><00:05:31.759><c> those</c><00:05:31.919><c> stacks</c><00:05:32.560><c> first</c><00:05:32.880><c> of</c><00:05:33.039><c> all</c>

00:05:33.350 --> 00:05:33.360 align:start position:0%
let's define those stacks first of all
 

00:05:33.360 --> 00:05:34.790 align:start position:0%
let's define those stacks first of all
and<00:05:33.840><c> like</c><00:05:34.080><c> i</c><00:05:34.160><c> said</c><00:05:34.320><c> i'm</c><00:05:34.479><c> going</c><00:05:34.560><c> to</c><00:05:34.639><c> be</c>

00:05:34.790 --> 00:05:34.800 align:start position:0%
and like i said i'm going to be
 

00:05:34.800 --> 00:05:36.870 align:start position:0%
and like i said i'm going to be
implementing<00:05:35.440><c> this</c><00:05:35.759><c> with</c><00:05:36.000><c> an</c><00:05:36.240><c> array</c><00:05:36.639><c> or</c><00:05:36.800><c> at</c>

00:05:36.870 --> 00:05:36.880 align:start position:0%
implementing this with an array or at
 

00:05:36.880 --> 00:05:38.629 align:start position:0%
implementing this with an array or at
least<00:05:37.199><c> an</c><00:05:37.360><c> array</c><00:05:37.680><c> list</c><00:05:38.000><c> if</c><00:05:38.080><c> you</c><00:05:38.240><c> were</c><00:05:38.320><c> using</c>

00:05:38.629 --> 00:05:38.639 align:start position:0%
least an array list if you were using
 

00:05:38.639 --> 00:05:40.629 align:start position:0%
least an array list if you were using
java<00:05:38.960><c> this</c><00:05:39.120><c> is</c><00:05:39.199><c> not</c><00:05:39.440><c> just</c><00:05:39.600><c> an</c><00:05:39.840><c> ordinary</c><00:05:40.320><c> array</c>

00:05:40.629 --> 00:05:40.639 align:start position:0%
java this is not just an ordinary array
 

00:05:40.639 --> 00:05:43.270 align:start position:0%
java this is not just an ordinary array
we<00:05:40.800><c> can</c><00:05:40.960><c> append</c><00:05:41.680><c> pop</c><00:05:42.000><c> from</c><00:05:42.240><c> it</c><00:05:42.560><c> it's</c><00:05:42.800><c> basically</c>

00:05:43.270 --> 00:05:43.280 align:start position:0%
we can append pop from it it's basically
 

00:05:43.280 --> 00:05:45.670 align:start position:0%
we can append pop from it it's basically
python's<00:05:43.919><c> implementation</c><00:05:44.800><c> of</c><00:05:44.960><c> a</c><00:05:45.440><c> like</c><00:05:45.600><c> a</c>

00:05:45.670 --> 00:05:45.680 align:start position:0%
python's implementation of a like a
 

00:05:45.680 --> 00:05:47.510 align:start position:0%
python's implementation of a like a
regular<00:05:46.160><c> stack</c><00:05:46.720><c> we're</c><00:05:46.880><c> going</c><00:05:46.960><c> to</c><00:05:47.120><c> have</c><00:05:47.280><c> a</c>

00:05:47.510 --> 00:05:47.520 align:start position:0%
regular stack we're going to have a
 

00:05:47.520 --> 00:05:49.909 align:start position:0%
regular stack we're going to have a
second<00:05:48.400><c> array</c><00:05:48.960><c> which</c><00:05:49.199><c> is</c><00:05:49.360><c> going</c><00:05:49.440><c> to</c><00:05:49.520><c> be</c><00:05:49.680><c> the</c>

00:05:49.909 --> 00:05:49.919 align:start position:0%
second array which is going to be the
 

00:05:49.919 --> 00:05:51.909 align:start position:0%
second array which is going to be the
min<00:05:50.240><c> stack</c><00:05:51.039><c> and</c><00:05:51.199><c> initially</c><00:05:51.600><c> they're</c><00:05:51.759><c> going</c><00:05:51.840><c> to</c>

00:05:51.909 --> 00:05:51.919 align:start position:0%
min stack and initially they're going to
 

00:05:51.919 --> 00:05:54.790 align:start position:0%
min stack and initially they're going to
be<00:05:52.160><c> empty</c><00:05:52.720><c> so</c><00:05:52.880><c> the</c><00:05:53.039><c> simple</c><00:05:53.360><c> thing</c><00:05:53.600><c> to</c><00:05:53.759><c> do</c><00:05:54.320><c> is</c>

00:05:54.790 --> 00:05:54.800 align:start position:0%
be empty so the simple thing to do is
 

00:05:54.800 --> 00:05:57.430 align:start position:0%
be empty so the simple thing to do is
push<00:05:55.199><c> right</c><00:05:55.440><c> that's</c><00:05:56.080><c> the</c><00:05:56.319><c> first</c><00:05:56.639><c> operation</c><00:05:57.120><c> so</c>

00:05:57.430 --> 00:05:57.440 align:start position:0%
push right that's the first operation so
 

00:05:57.440 --> 00:05:58.950 align:start position:0%
push right that's the first operation so
on<00:05:57.600><c> our</c><00:05:57.759><c> first</c><00:05:58.000><c> stack</c><00:05:58.319><c> it's</c><00:05:58.479><c> always</c><00:05:58.800><c> going</c><00:05:58.880><c> to</c>

00:05:58.950 --> 00:05:58.960 align:start position:0%
on our first stack it's always going to
 

00:05:58.960 --> 00:06:00.309 align:start position:0%
on our first stack it's always going to
be<00:05:59.120><c> easy</c><00:05:59.360><c> right</c><00:05:59.520><c> we're</c><00:05:59.680><c> always</c><00:05:59.919><c> going</c><00:06:00.000><c> to</c><00:06:00.160><c> take</c>

00:06:00.309 --> 00:06:00.319 align:start position:0%
be easy right we're always going to take
 

00:06:00.319 --> 00:06:02.390 align:start position:0%
be easy right we're always going to take
the<00:06:00.560><c> input</c><00:06:00.880><c> value</c><00:06:01.520><c> and</c><00:06:01.680><c> append</c><00:06:02.080><c> it</c><00:06:02.160><c> to</c><00:06:02.319><c> the</c>

00:06:02.390 --> 00:06:02.400 align:start position:0%
the input value and append it to the
 

00:06:02.400 --> 00:06:05.990 align:start position:0%
the input value and append it to the
first<00:06:02.639><c> stack</c><00:06:03.360><c> now</c><00:06:03.600><c> with</c><00:06:03.919><c> the</c><00:06:04.319><c> second</c><00:06:04.880><c> stack</c><00:06:05.680><c> we</c>

00:06:05.990 --> 00:06:06.000 align:start position:0%
first stack now with the second stack we
 

00:06:06.000 --> 00:06:08.230 align:start position:0%
first stack now with the second stack we
need<00:06:06.240><c> to</c><00:06:06.479><c> know</c><00:06:06.960><c> for</c><00:06:07.120><c> the</c><00:06:07.280><c> second</c><00:06:07.600><c> stack</c><00:06:08.080><c> if</c>

00:06:08.230 --> 00:06:08.240 align:start position:0%
need to know for the second stack if
 

00:06:08.240 --> 00:06:10.629 align:start position:0%
need to know for the second stack if
there's<00:06:08.720><c> already</c><00:06:09.199><c> a</c><00:06:09.280><c> value</c><00:06:09.759><c> inserted</c><00:06:10.479><c> in</c><00:06:10.560><c> the</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
there's already a value inserted in the
 

00:06:10.639 --> 00:06:12.390 align:start position:0%
there's already a value inserted in the
minimum<00:06:11.120><c> stack</c><00:06:11.680><c> then</c><00:06:11.840><c> we're</c><00:06:12.000><c> going</c><00:06:12.080><c> to</c><00:06:12.240><c> take</c>

00:06:12.390 --> 00:06:12.400 align:start position:0%
minimum stack then we're going to take
 

00:06:12.400 --> 00:06:14.790 align:start position:0%
minimum stack then we're going to take
the<00:06:12.560><c> minimum</c><00:06:13.120><c> of</c><00:06:13.280><c> the</c><00:06:13.520><c> input</c><00:06:13.919><c> value</c><00:06:14.400><c> and</c><00:06:14.639><c> the</c>

00:06:14.790 --> 00:06:14.800 align:start position:0%
the minimum of the input value and the
 

00:06:14.800 --> 00:06:17.350 align:start position:0%
the minimum of the input value and the
minimum<00:06:15.280><c> value</c><00:06:16.080><c> or</c><00:06:16.319><c> at</c><00:06:16.400><c> least</c><00:06:16.639><c> the</c><00:06:16.800><c> value</c><00:06:17.199><c> at</c>

00:06:17.350 --> 00:06:17.360 align:start position:0%
minimum value or at least the value at
 

00:06:17.360 --> 00:06:18.870 align:start position:0%
minimum value or at least the value at
the<00:06:17.440><c> top</c><00:06:17.680><c> of</c><00:06:17.840><c> our</c><00:06:18.000><c> min</c><00:06:18.160><c> stack</c><00:06:18.479><c> and</c><00:06:18.560><c> take</c><00:06:18.720><c> the</c>

00:06:18.870 --> 00:06:18.880 align:start position:0%
the top of our min stack and take the
 

00:06:18.880 --> 00:06:20.629 align:start position:0%
the top of our min stack and take the
minimum<00:06:19.280><c> of</c><00:06:19.440><c> those</c><00:06:19.600><c> two</c><00:06:19.840><c> and</c><00:06:19.919><c> then</c><00:06:20.160><c> append</c>

00:06:20.629 --> 00:06:20.639 align:start position:0%
minimum of those two and then append
 

00:06:20.639 --> 00:06:23.029 align:start position:0%
minimum of those two and then append
that<00:06:20.880><c> value</c><00:06:21.520><c> to</c><00:06:21.759><c> the</c><00:06:21.919><c> min</c><00:06:22.160><c> stack</c><00:06:22.479><c> so</c><00:06:22.639><c> let's</c>

00:06:23.029 --> 00:06:23.039 align:start position:0%
that value to the min stack so let's
 

00:06:23.039 --> 00:06:25.430 align:start position:0%
that value to the min stack so let's
update<00:06:23.520><c> our</c><00:06:23.759><c> value</c><00:06:24.240><c> first</c><00:06:24.479><c> of</c><00:06:24.639><c> all</c><00:06:24.960><c> let's</c><00:06:25.280><c> set</c>

00:06:25.430 --> 00:06:25.440 align:start position:0%
update our value first of all let's set
 

00:06:25.440 --> 00:06:28.390 align:start position:0%
update our value first of all let's set
it<00:06:25.680><c> equal</c><00:06:25.919><c> to</c><00:06:26.080><c> the</c><00:06:26.160><c> minimum</c><00:06:26.639><c> of</c><00:06:26.880><c> itself</c><00:06:27.840><c> and</c>

00:06:28.390 --> 00:06:28.400 align:start position:0%
it equal to the minimum of itself and
 

00:06:28.400 --> 00:06:31.110 align:start position:0%
it equal to the minimum of itself and
the<00:06:28.560><c> minimum</c><00:06:29.199><c> of</c><00:06:29.440><c> the</c><00:06:29.680><c> top</c><00:06:30.080><c> of</c><00:06:30.240><c> our</c><00:06:30.400><c> min</c><00:06:30.720><c> stack</c>

00:06:31.110 --> 00:06:31.120 align:start position:0%
the minimum of the top of our min stack
 

00:06:31.120 --> 00:06:33.830 align:start position:0%
the minimum of the top of our min stack
so<00:06:31.360><c> let's</c><00:06:31.520><c> say</c><00:06:31.840><c> self.min</c><00:06:32.880><c> stack</c><00:06:33.280><c> at</c><00:06:33.520><c> negative</c>

00:06:33.830 --> 00:06:33.840 align:start position:0%
so let's say self.min stack at negative
 

00:06:33.840 --> 00:06:35.110 align:start position:0%
so let's say self.min stack at negative
one<00:06:34.160><c> at</c><00:06:34.240><c> least</c><00:06:34.400><c> that's</c><00:06:34.560><c> how</c><00:06:34.720><c> you</c><00:06:34.800><c> do</c><00:06:34.880><c> it</c><00:06:35.039><c> in</c>

00:06:35.110 --> 00:06:35.120 align:start position:0%
one at least that's how you do it in
 

00:06:35.120 --> 00:06:36.950 align:start position:0%
one at least that's how you do it in
python<00:06:35.520><c> but</c><00:06:35.680><c> we</c><00:06:35.840><c> know</c><00:06:36.000><c> that</c><00:06:36.160><c> this</c><00:06:36.400><c> min</c><00:06:36.639><c> stack</c>

00:06:36.950 --> 00:06:36.960 align:start position:0%
python but we know that this min stack
 

00:06:36.960 --> 00:06:38.550 align:start position:0%
python but we know that this min stack
actually<00:06:37.440><c> could</c><00:06:37.759><c> be</c>

00:06:38.550 --> 00:06:38.560 align:start position:0%
actually could be
 

00:06:38.560 --> 00:06:41.029 align:start position:0%
actually could be
non-empty<00:06:39.120><c> so</c><00:06:39.280><c> we're</c><00:06:39.440><c> gonna</c><00:06:39.759><c> only</c><00:06:40.000><c> do</c><00:06:40.160><c> this</c><00:06:40.479><c> if</c>

00:06:41.029 --> 00:06:41.039 align:start position:0%
non-empty so we're gonna only do this if
 

00:06:41.039 --> 00:06:44.150 align:start position:0%
non-empty so we're gonna only do this if
our<00:06:41.520><c> self.min</c><00:06:42.240><c> stack</c><00:06:42.800><c> is</c><00:06:43.120><c> non-empty</c>

00:06:44.150 --> 00:06:44.160 align:start position:0%
our self.min stack is non-empty
 

00:06:44.160 --> 00:06:47.029 align:start position:0%
our self.min stack is non-empty
otherwise<00:06:44.880><c> let's</c><00:06:45.120><c> just</c><00:06:45.360><c> take</c><00:06:45.600><c> the</c><00:06:46.000><c> minimum</c><00:06:46.560><c> of</c>

00:06:47.029 --> 00:06:47.039 align:start position:0%
otherwise let's just take the minimum of
 

00:06:47.039 --> 00:06:49.110 align:start position:0%
otherwise let's just take the minimum of
val<00:06:47.520><c> and</c><00:06:47.759><c> val</c><00:06:48.080><c> so</c><00:06:48.240><c> i</c><00:06:48.400><c> this</c><00:06:48.560><c> might</c><00:06:48.720><c> be</c><00:06:48.800><c> a</c><00:06:48.880><c> little</c>

00:06:49.110 --> 00:06:49.120 align:start position:0%
val and val so i this might be a little
 

00:06:49.120 --> 00:06:50.629 align:start position:0%
val and val so i this might be a little
complicated<00:06:49.919><c> i</c><00:06:50.080><c> probably</c><00:06:50.319><c> could</c><00:06:50.400><c> have</c><00:06:50.560><c> just</c>

00:06:50.629 --> 00:06:50.639 align:start position:0%
complicated i probably could have just
 

00:06:50.639 --> 00:06:52.870 align:start position:0%
complicated i probably could have just
done<00:06:50.880><c> an</c><00:06:51.039><c> if</c><00:06:51.280><c> else</c><00:06:51.520><c> statement</c><00:06:52.000><c> but</c><00:06:52.319><c> in</c><00:06:52.479><c> python</c>

00:06:52.870 --> 00:06:52.880 align:start position:0%
done an if else statement but in python
 

00:06:52.880 --> 00:06:54.469 align:start position:0%
done an if else statement but in python
i<00:06:52.960><c> feel</c><00:06:53.120><c> like</c><00:06:53.280><c> this</c><00:06:53.440><c> is</c><00:06:53.520><c> a</c><00:06:53.599><c> little</c><00:06:53.680><c> bit</c><00:06:53.919><c> cleaner</c>

00:06:54.469 --> 00:06:54.479 align:start position:0%
i feel like this is a little bit cleaner
 

00:06:54.479 --> 00:06:55.909 align:start position:0%
i feel like this is a little bit cleaner
so<00:06:54.639><c> we're</c><00:06:54.800><c> just</c><00:06:54.960><c> taking</c><00:06:55.199><c> the</c><00:06:55.280><c> minimum</c><00:06:55.759><c> of</c>

00:06:55.909 --> 00:06:55.919 align:start position:0%
so we're just taking the minimum of
 

00:06:55.919 --> 00:06:58.469 align:start position:0%
so we're just taking the minimum of
value<00:06:56.639><c> and</c><00:06:56.800><c> the</c><00:06:56.960><c> top</c><00:06:57.199><c> of</c><00:06:57.360><c> our</c><00:06:57.440><c> stack</c><00:06:58.080><c> if</c><00:06:58.319><c> the</c>

00:06:58.469 --> 00:06:58.479 align:start position:0%
value and the top of our stack if the
 

00:06:58.479 --> 00:07:01.110 align:start position:0%
value and the top of our stack if the
stack<00:06:58.880><c> is</c><00:06:59.039><c> not</c><00:06:59.440><c> empty</c><00:06:59.759><c> if</c><00:06:59.919><c> it</c><00:07:00.160><c> is</c><00:07:00.479><c> empty</c><00:07:00.960><c> we're</c>

00:07:01.110 --> 00:07:01.120 align:start position:0%
stack is not empty if it is empty we're
 

00:07:01.120 --> 00:07:03.909 align:start position:0%
stack is not empty if it is empty we're
just<00:07:01.360><c> taking</c><00:07:01.599><c> the</c><00:07:01.840><c> minimum</c><00:07:02.319><c> of</c><00:07:02.479><c> val</c><00:07:02.960><c> and</c><00:07:03.440><c> val</c>

00:07:03.909 --> 00:07:03.919 align:start position:0%
just taking the minimum of val and val
 

00:07:03.919 --> 00:07:05.990 align:start position:0%
just taking the minimum of val and val
because<00:07:04.560><c> if</c><00:07:04.800><c> the</c><00:07:04.960><c> stack</c><00:07:05.280><c> is</c><00:07:05.440><c> empty</c><00:07:05.680><c> then</c><00:07:05.919><c> of</c>

00:07:05.990 --> 00:07:06.000 align:start position:0%
because if the stack is empty then of
 

00:07:06.000 --> 00:07:07.510 align:start position:0%
because if the stack is empty then of
course<00:07:06.160><c> we're</c><00:07:06.319><c> just</c><00:07:06.479><c> going</c><00:07:06.560><c> to</c><00:07:06.720><c> take</c><00:07:07.280><c> the</c>

00:07:07.510 --> 00:07:07.520 align:start position:0%
course we're just going to take the
 

00:07:07.520 --> 00:07:09.990 align:start position:0%
course we're just going to take the
men's<00:07:07.840><c> stack</c><00:07:08.319><c> and</c><00:07:08.560><c> append</c>

00:07:09.990 --> 00:07:10.000 align:start position:0%
men's stack and append
 

00:07:10.000 --> 00:07:12.469 align:start position:0%
men's stack and append
the<00:07:10.160><c> value</c><00:07:10.720><c> to</c><00:07:11.039><c> it</c><00:07:11.520><c> right</c><00:07:11.680><c> so</c><00:07:11.840><c> when</c><00:07:12.000><c> we</c><00:07:12.160><c> append</c>

00:07:12.469 --> 00:07:12.479 align:start position:0%
the value to it right so when we append
 

00:07:12.479 --> 00:07:14.870 align:start position:0%
the value to it right so when we append
this<00:07:12.720><c> value</c><00:07:13.120><c> it</c><00:07:13.280><c> should</c><00:07:13.520><c> be</c><00:07:13.680><c> the</c><00:07:13.840><c> minimum</c><00:07:14.400><c> of</c>

00:07:14.870 --> 00:07:14.880 align:start position:0%
this value it should be the minimum of
 

00:07:14.880 --> 00:07:16.790 align:start position:0%
this value it should be the minimum of
the<00:07:15.120><c> input</c><00:07:15.360><c> value</c><00:07:15.759><c> and</c><00:07:15.919><c> the</c><00:07:16.000><c> minimum</c><00:07:16.479><c> of</c><00:07:16.639><c> the</c>

00:07:16.790 --> 00:07:16.800 align:start position:0%
the input value and the minimum of the
 

00:07:16.800 --> 00:07:19.189 align:start position:0%
the input value and the minimum of the
top<00:07:17.039><c> of</c><00:07:17.199><c> the</c><00:07:17.440><c> min</c><00:07:17.680><c> stack</c><00:07:18.400><c> so</c><00:07:18.560><c> that's</c><00:07:18.880><c> all</c><00:07:19.039><c> for</c>

00:07:19.189 --> 00:07:19.199 align:start position:0%
top of the min stack so that's all for
 

00:07:19.199 --> 00:07:20.950 align:start position:0%
top of the min stack so that's all for
our<00:07:19.360><c> push</c><00:07:19.680><c> function</c><00:07:20.080><c> now</c><00:07:20.240><c> let's</c><00:07:20.400><c> do</c><00:07:20.560><c> the</c><00:07:20.720><c> pop</c>

00:07:20.950 --> 00:07:20.960 align:start position:0%
our push function now let's do the pop
 

00:07:20.960 --> 00:07:22.150 align:start position:0%
our push function now let's do the pop
function<00:07:21.360><c> we</c><00:07:21.440><c> don't</c><00:07:21.599><c> have</c><00:07:21.680><c> to</c><00:07:21.840><c> return</c>

00:07:22.150 --> 00:07:22.160 align:start position:0%
function we don't have to return
 

00:07:22.160 --> 00:07:24.390 align:start position:0%
function we don't have to return
anything<00:07:22.560><c> all</c><00:07:22.720><c> we</c><00:07:22.800><c> have</c><00:07:22.960><c> to</c><00:07:23.039><c> do</c><00:07:23.440><c> is</c><00:07:23.680><c> pop</c><00:07:24.160><c> from</c>

00:07:24.390 --> 00:07:24.400 align:start position:0%
anything all we have to do is pop from
 

00:07:24.400 --> 00:07:26.150 align:start position:0%
anything all we have to do is pop from
our<00:07:24.560><c> stack</c><00:07:24.880><c> but</c><00:07:25.039><c> since</c><00:07:25.280><c> we</c><00:07:25.440><c> have</c><00:07:25.520><c> two</c><00:07:25.759><c> stacks</c>

00:07:26.150 --> 00:07:26.160 align:start position:0%
our stack but since we have two stacks
 

00:07:26.160 --> 00:07:27.670 align:start position:0%
our stack but since we have two stacks
we're<00:07:26.319><c> gonna</c><00:07:26.400><c> have</c><00:07:26.560><c> to</c><00:07:26.639><c> pop</c><00:07:26.960><c> from</c><00:07:27.199><c> both</c><00:07:27.520><c> of</c>

00:07:27.670 --> 00:07:27.680 align:start position:0%
we're gonna have to pop from both of
 

00:07:27.680 --> 00:07:30.150 align:start position:0%
we're gonna have to pop from both of
these<00:07:27.919><c> stacks</c><00:07:28.240><c> so</c><00:07:28.479><c> popping</c><00:07:28.960><c> from</c><00:07:29.599><c> the</c><00:07:29.919><c> first</c>

00:07:30.150 --> 00:07:30.160 align:start position:0%
these stacks so popping from the first
 

00:07:30.160 --> 00:07:33.270 align:start position:0%
these stacks so popping from the first
stack<00:07:30.560><c> and</c><00:07:30.800><c> popping</c><00:07:31.199><c> from</c><00:07:31.759><c> the</c><00:07:32.080><c> minimum</c><00:07:32.560><c> stack</c>

00:07:33.270 --> 00:07:33.280 align:start position:0%
stack and popping from the minimum stack
 

00:07:33.280 --> 00:07:35.270 align:start position:0%
stack and popping from the minimum stack
so<00:07:33.599><c> that</c><00:07:34.080><c> definitely</c><00:07:34.639><c> takes</c><00:07:34.960><c> care</c><00:07:35.120><c> of</c>

00:07:35.270 --> 00:07:35.280 align:start position:0%
so that definitely takes care of
 

00:07:35.280 --> 00:07:36.629 align:start position:0%
so that definitely takes care of
everything<00:07:35.680><c> for</c><00:07:35.919><c> us</c>

00:07:36.629 --> 00:07:36.639 align:start position:0%
everything for us
 

00:07:36.639 --> 00:07:37.990 align:start position:0%
everything for us
it<00:07:36.800><c> feels</c><00:07:37.039><c> like</c><00:07:37.280><c> cheating</c><00:07:37.599><c> since</c><00:07:37.840><c> we're</c>

00:07:37.990 --> 00:07:38.000 align:start position:0%
it feels like cheating since we're
 

00:07:38.000 --> 00:07:40.070 align:start position:0%
it feels like cheating since we're
pretty<00:07:38.160><c> much</c><00:07:38.400><c> using</c><00:07:38.639><c> the</c><00:07:38.800><c> built-in</c><00:07:39.360><c> functions</c>

00:07:40.070 --> 00:07:40.080 align:start position:0%
pretty much using the built-in functions
 

00:07:40.080 --> 00:07:43.350 align:start position:0%
pretty much using the built-in functions
and<00:07:40.240><c> to</c><00:07:40.400><c> get</c><00:07:40.560><c> the</c><00:07:40.800><c> top</c><00:07:41.199><c> value</c><00:07:41.919><c> of</c><00:07:42.080><c> the</c><00:07:42.240><c> stack</c><00:07:43.039><c> we</c>

00:07:43.350 --> 00:07:43.360 align:start position:0%
and to get the top value of the stack we
 

00:07:43.360 --> 00:07:45.830 align:start position:0%
and to get the top value of the stack we
are<00:07:43.520><c> going</c><00:07:43.599><c> to</c><00:07:43.680><c> take</c><00:07:44.160><c> from</c><00:07:44.639><c> the</c><00:07:44.960><c> top</c><00:07:45.360><c> of</c><00:07:45.520><c> the</c>

00:07:45.830 --> 00:07:45.840 align:start position:0%
are going to take from the top of the
 

00:07:45.840 --> 00:07:48.070 align:start position:0%
are going to take from the top of the
first<00:07:46.080><c> stack</c><00:07:46.479><c> right</c><00:07:46.639><c> we</c><00:07:46.879><c> by</c><00:07:47.120><c> top</c><00:07:47.360><c> we</c><00:07:47.599><c> want</c><00:07:47.840><c> to</c>

00:07:48.070 --> 00:07:48.080 align:start position:0%
first stack right we by top we want to
 

00:07:48.080 --> 00:07:50.790 align:start position:0%
first stack right we by top we want to
get<00:07:48.639><c> the</c><00:07:48.960><c> last</c><00:07:49.360><c> value</c><00:07:49.680><c> that</c><00:07:49.840><c> was</c><00:07:50.080><c> inserted</c><00:07:50.639><c> and</c>

00:07:50.790 --> 00:07:50.800 align:start position:0%
get the last value that was inserted and
 

00:07:50.800 --> 00:07:52.790 align:start position:0%
get the last value that was inserted and
this<00:07:50.960><c> is</c><00:07:51.120><c> always</c><00:07:51.440><c> going</c><00:07:51.599><c> to</c><00:07:51.680><c> be</c><00:07:51.919><c> called</c><00:07:52.479><c> when</c>

00:07:52.790 --> 00:07:52.800 align:start position:0%
this is always going to be called when
 

00:07:52.800 --> 00:07:54.950 align:start position:0%
this is always going to be called when
our<00:07:52.960><c> stack</c><00:07:53.440><c> is</c><00:07:53.599><c> non-empty</c><00:07:54.240><c> so</c><00:07:54.560><c> we</c><00:07:54.720><c> don't</c><00:07:54.879><c> have</c>

00:07:54.950 --> 00:07:54.960 align:start position:0%
our stack is non-empty so we don't have
 

00:07:54.960 --> 00:07:57.189 align:start position:0%
our stack is non-empty so we don't have
to<00:07:55.039><c> take</c><00:07:55.199><c> care</c><00:07:55.360><c> of</c><00:07:55.520><c> any</c><00:07:55.680><c> edge</c><00:07:55.919><c> cases</c><00:07:56.639><c> the</c><00:07:56.879><c> last</c>

00:07:57.189 --> 00:07:57.199 align:start position:0%
to take care of any edge cases the last
 

00:07:57.199 --> 00:07:59.749 align:start position:0%
to take care of any edge cases the last
one<00:07:57.520><c> get</c><00:07:57.840><c> min</c><00:07:58.400><c> is</c><00:07:58.560><c> going</c><00:07:58.639><c> to</c><00:07:58.720><c> be</c><00:07:59.039><c> returning</c>

00:07:59.749 --> 00:07:59.759 align:start position:0%
one get min is going to be returning
 

00:07:59.759 --> 00:08:02.390 align:start position:0%
one get min is going to be returning
from<00:08:00.000><c> the</c><00:08:00.240><c> top</c><00:08:00.639><c> of</c><00:08:00.960><c> the</c><00:08:01.360><c> min</c><00:08:01.759><c> stack</c><00:08:02.240><c> right</c>

00:08:02.390 --> 00:08:02.400 align:start position:0%
from the top of the min stack right
 

00:08:02.400 --> 00:08:04.070 align:start position:0%
from the top of the min stack right
because<00:08:02.639><c> we</c><00:08:02.720><c> want</c><00:08:02.879><c> the</c><00:08:03.039><c> minimum</c><00:08:03.440><c> value</c><00:08:03.759><c> that's</c>

00:08:04.070 --> 00:08:04.080 align:start position:0%
because we want the minimum value that's
 

00:08:04.080 --> 00:08:05.909 align:start position:0%
because we want the minimum value that's
always<00:08:04.400><c> going</c><00:08:04.479><c> to</c><00:08:04.560><c> be</c><00:08:04.800><c> on</c><00:08:04.960><c> the</c><00:08:05.039><c> top</c><00:08:05.360><c> of</c><00:08:05.520><c> the</c><00:08:05.680><c> min</c>

00:08:05.909 --> 00:08:05.919 align:start position:0%
always going to be on the top of the min
 

00:08:05.919 --> 00:08:08.150 align:start position:0%
always going to be on the top of the min
stack<00:08:06.400><c> and</c><00:08:06.560><c> this</c><00:08:06.800><c> function</c><00:08:07.199><c> as</c><00:08:07.440><c> well</c><00:08:07.759><c> is</c><00:08:07.919><c> only</c>

00:08:08.150 --> 00:08:08.160 align:start position:0%
stack and this function as well is only
 

00:08:08.160 --> 00:08:09.749 align:start position:0%
stack and this function as well is only
going<00:08:08.240><c> to</c><00:08:08.319><c> be</c><00:08:08.479><c> called</c><00:08:08.960><c> when</c><00:08:09.120><c> our</c><00:08:09.280><c> stack</c><00:08:09.599><c> is</c>

00:08:09.749 --> 00:08:09.759 align:start position:0%
going to be called when our stack is
 

00:08:09.759 --> 00:08:13.430 align:start position:0%
going to be called when our stack is
non-empty<00:08:10.800><c> so</c><00:08:11.120><c> that</c><00:08:11.440><c> is</c><00:08:11.599><c> the</c><00:08:11.919><c> entire</c><00:08:12.479><c> code</c><00:08:13.280><c> and</c>

00:08:13.430 --> 00:08:13.440 align:start position:0%
non-empty so that is the entire code and
 

00:08:13.440 --> 00:08:14.869 align:start position:0%
non-empty so that is the entire code and
of<00:08:13.599><c> course</c><00:08:13.919><c> for</c><00:08:14.080><c> some</c><00:08:14.319><c> reason</c><00:08:14.560><c> i</c><00:08:14.639><c> didn't</c>

00:08:14.869 --> 00:08:14.879 align:start position:0%
of course for some reason i didn't
 

00:08:14.879 --> 00:08:16.230 align:start position:0%
of course for some reason i didn't
notice<00:08:15.120><c> that</c><00:08:15.280><c> i</c><00:08:15.360><c> didn't</c><00:08:15.599><c> actually</c><00:08:15.840><c> put</c><00:08:16.000><c> the</c>

00:08:16.230 --> 00:08:16.240 align:start position:0%
notice that i didn't actually put the
 

00:08:16.240 --> 00:08:19.029 align:start position:0%
notice that i didn't actually put the
else<00:08:16.720><c> over</c><00:08:16.960><c> here</c><00:08:17.280><c> so</c><00:08:17.840><c> if</c><00:08:18.080><c> it</c><00:08:18.160><c> was</c><00:08:18.319><c> confusing</c>

00:08:19.029 --> 00:08:19.039 align:start position:0%
else over here so if it was confusing
 

00:08:19.039 --> 00:08:21.830 align:start position:0%
else over here so if it was confusing
before<00:08:19.440><c> i'm</c><00:08:19.599><c> really</c><00:08:19.840><c> sorry</c><00:08:20.160><c> about</c><00:08:20.400><c> that</c><00:08:20.800><c> so</c>

00:08:21.830 --> 00:08:21.840 align:start position:0%
before i'm really sorry about that so
 

00:08:21.840 --> 00:08:23.430 align:start position:0%
before i'm really sorry about that so
now<00:08:22.080><c> you</c><00:08:22.240><c> can</c><00:08:22.400><c> probably</c><00:08:22.720><c> tell</c><00:08:22.960><c> exactly</c><00:08:23.280><c> what's</c>

00:08:23.430 --> 00:08:23.440 align:start position:0%
now you can probably tell exactly what's
 

00:08:23.440 --> 00:08:25.110 align:start position:0%
now you can probably tell exactly what's
going<00:08:23.680><c> on</c><00:08:23.840><c> because</c><00:08:24.000><c> it's</c><00:08:24.160><c> pretty</c><00:08:24.400><c> simple</c><00:08:24.879><c> so</c>

00:08:25.110 --> 00:08:25.120 align:start position:0%
going on because it's pretty simple so
 

00:08:25.120 --> 00:08:26.469 align:start position:0%
going on because it's pretty simple so
this<00:08:25.280><c> is</c><00:08:25.360><c> what</c><00:08:25.520><c> we're</c><00:08:25.680><c> going</c><00:08:25.759><c> to</c><00:08:25.919><c> be</c>

00:08:26.469 --> 00:08:26.479 align:start position:0%
this is what we're going to be
 

00:08:26.479 --> 00:08:29.110 align:start position:0%
this is what we're going to be
evaluating<00:08:27.440><c> if</c><00:08:27.759><c> our</c><00:08:28.000><c> stack</c><00:08:28.319><c> is</c><00:08:28.479><c> not</c><00:08:28.720><c> empty</c>

00:08:29.110 --> 00:08:29.120 align:start position:0%
evaluating if our stack is not empty
 

00:08:29.120 --> 00:08:30.790 align:start position:0%
evaluating if our stack is not empty
else<00:08:29.680><c> this</c><00:08:29.919><c> expression</c><00:08:30.479><c> is</c><00:08:30.639><c> going</c><00:08:30.720><c> to</c>

00:08:30.790 --> 00:08:30.800 align:start position:0%
else this expression is going to
 

00:08:30.800 --> 00:08:33.509 align:start position:0%
else this expression is going to
evaluate<00:08:31.360><c> just</c><00:08:31.680><c> to</c><00:08:31.919><c> this</c><00:08:32.320><c> value</c><00:08:32.800><c> and</c><00:08:32.880><c> then</c>

00:08:33.509 --> 00:08:33.519 align:start position:0%
evaluate just to this value and then
 

00:08:33.519 --> 00:08:35.509 align:start position:0%
evaluate just to this value and then
we'll<00:08:33.839><c> of</c><00:08:33.919><c> course</c><00:08:34.159><c> take</c><00:08:34.320><c> the</c><00:08:34.479><c> minimum</c><00:08:34.959><c> of</c>

00:08:35.509 --> 00:08:35.519 align:start position:0%
we'll of course take the minimum of
 

00:08:35.519 --> 00:08:36.709 align:start position:0%
we'll of course take the minimum of
these<00:08:35.839><c> two</c>

00:08:36.709 --> 00:08:36.719 align:start position:0%
these two
 

00:08:36.719 --> 00:08:38.870 align:start position:0%
these two
so<00:08:36.959><c> now</c><00:08:37.279><c> this</c><00:08:37.519><c> code</c><00:08:37.839><c> is</c><00:08:38.000><c> complete</c><00:08:38.479><c> you</c><00:08:38.640><c> can</c><00:08:38.719><c> see</c>

00:08:38.870 --> 00:08:38.880 align:start position:0%
so now this code is complete you can see
 

00:08:38.880 --> 00:08:40.550 align:start position:0%
so now this code is complete you can see
that<00:08:39.120><c> it's</c><00:08:39.279><c> very</c><00:08:39.519><c> efficient</c><00:08:39.919><c> because</c><00:08:40.320><c> every</c>

00:08:40.550 --> 00:08:40.560 align:start position:0%
that it's very efficient because every
 

00:08:40.560 --> 00:08:42.550 align:start position:0%
that it's very efficient because every
single<00:08:40.880><c> one</c><00:08:41.039><c> of</c><00:08:41.120><c> these</c><00:08:41.360><c> four</c><00:08:41.599><c> functions</c><00:08:42.399><c> is</c>

00:08:42.550 --> 00:08:42.560 align:start position:0%
single one of these four functions is
 

00:08:42.560 --> 00:08:44.710 align:start position:0%
single one of these four functions is
done<00:08:42.800><c> in</c><00:08:42.959><c> o</c><00:08:43.200><c> of</c><00:08:43.360><c> one</c><00:08:43.680><c> time</c><00:08:44.159><c> so</c><00:08:44.320><c> i</c><00:08:44.399><c> hope</c><00:08:44.640><c> that</c>

00:08:44.710 --> 00:08:44.720 align:start position:0%
done in o of one time so i hope that
 

00:08:44.720 --> 00:08:47.190 align:start position:0%
done in o of one time so i hope that
this<00:08:44.880><c> was</c><00:08:45.120><c> helpful</c><00:08:45.760><c> if</c><00:08:45.920><c> it</c><00:08:46.080><c> was</c><00:08:46.640><c> please</c><00:08:46.959><c> like</c>

00:08:47.190 --> 00:08:47.200 align:start position:0%
this was helpful if it was please like
 

00:08:47.200 --> 00:08:49.269 align:start position:0%
this was helpful if it was please like
and<00:08:47.360><c> subscribe</c><00:08:47.920><c> it</c><00:08:48.000><c> supports</c><00:08:48.480><c> the</c><00:08:48.640><c> channel</c><00:08:49.040><c> a</c>

00:08:49.269 --> 00:08:49.279 align:start position:0%
and subscribe it supports the channel a
 

00:08:49.279 --> 00:08:51.269 align:start position:0%
and subscribe it supports the channel a
lot<00:08:49.600><c> and</c><00:08:49.760><c> i'll</c><00:08:50.000><c> hopefully</c><00:08:50.640><c> see</c><00:08:50.800><c> you</c><00:08:50.959><c> pretty</c>

00:08:51.269 --> 00:08:51.279 align:start position:0%
lot and i'll hopefully see you pretty
 

00:08:51.279 --> 00:08:54.800 align:start position:0%
lot and i'll hopefully see you pretty
soon<00:08:51.760><c> thanks</c><00:08:52.000><c> for</c><00:08:52.160><c> watching</c>

