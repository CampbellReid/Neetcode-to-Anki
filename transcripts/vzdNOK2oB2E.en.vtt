WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.510 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.199><c> now</c><00:00:01.360><c> let's</c>

00:00:01.510 --> 00:00:01.520 align:start position:0%
hey everyone welcome back now let's
 

00:00:01.520 --> 00:00:03.350 align:start position:0%
hey everyone welcome back now let's
write<00:00:01.760><c> some</c><00:00:01.920><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.639><c> today</c><00:00:02.879><c> so</c><00:00:03.120><c> today</c>

00:00:03.350 --> 00:00:03.360 align:start position:0%
write some more neat code today so today
 

00:00:03.360 --> 00:00:04.470 align:start position:0%
write some more neat code today so today
let's<00:00:03.600><c> look</c><00:00:03.760><c> at</c><00:00:03.919><c> a</c><00:00:04.080><c> good</c>

00:00:04.470 --> 00:00:04.480 align:start position:0%
let's look at a good
 

00:00:04.480 --> 00:00:06.630 align:start position:0%
let's look at a good
question<00:00:04.880><c> to</c><00:00:05.200><c> practice</c><00:00:05.600><c> the</c><00:00:05.759><c> fundamentals</c>

00:00:06.630 --> 00:00:06.640 align:start position:0%
question to practice the fundamentals
 

00:00:06.640 --> 00:00:08.150 align:start position:0%
question to practice the fundamentals
group<00:00:07.120><c> anagrams</c>

00:00:08.150 --> 00:00:08.160 align:start position:0%
group anagrams
 

00:00:08.160 --> 00:00:11.110 align:start position:0%
group anagrams
so<00:00:08.400><c> we're</c><00:00:08.639><c> given</c><00:00:09.200><c> just</c><00:00:09.519><c> a</c><00:00:09.760><c> list</c><00:00:10.160><c> of</c><00:00:10.480><c> strings</c>

00:00:11.110 --> 00:00:11.120 align:start position:0%
so we're given just a list of strings
 

00:00:11.120 --> 00:00:12.549 align:start position:0%
so we're given just a list of strings
and<00:00:11.360><c> we</c><00:00:11.519><c> want</c><00:00:11.679><c> to</c><00:00:11.920><c> group</c>

00:00:12.549 --> 00:00:12.559 align:start position:0%
and we want to group
 

00:00:12.559 --> 00:00:15.669 align:start position:0%
and we want to group
all<00:00:12.799><c> anagrams</c><00:00:13.679><c> together</c><00:00:14.559><c> so</c><00:00:14.880><c> for</c><00:00:15.040><c> example</c><00:00:15.519><c> we</c>

00:00:15.669 --> 00:00:15.679 align:start position:0%
all anagrams together so for example we
 

00:00:15.679 --> 00:00:16.550 align:start position:0%
all anagrams together so for example we
have<00:00:15.920><c> tan</c>

00:00:16.550 --> 00:00:16.560 align:start position:0%
have tan
 

00:00:16.560 --> 00:00:19.109 align:start position:0%
have tan
and<00:00:16.800><c> we</c><00:00:17.039><c> have</c><00:00:17.440><c> nat</c><00:00:18.000><c> and</c><00:00:18.160><c> they</c><00:00:18.400><c> are</c><00:00:18.560><c> anagrams</c>

00:00:19.109 --> 00:00:19.119 align:start position:0%
and we have nat and they are anagrams
 

00:00:19.119 --> 00:00:19.590 align:start position:0%
and we have nat and they are anagrams
together

00:00:19.590 --> 00:00:19.600 align:start position:0%
together
 

00:00:19.600 --> 00:00:22.630 align:start position:0%
together
so<00:00:20.080><c> in</c><00:00:20.480><c> the</c><00:00:20.880><c> output</c><00:00:21.520><c> we're</c><00:00:21.680><c> gonna</c><00:00:22.000><c> group</c><00:00:22.400><c> them</c>

00:00:22.630 --> 00:00:22.640 align:start position:0%
so in the output we're gonna group them
 

00:00:22.640 --> 00:00:23.189 align:start position:0%
so in the output we're gonna group them
together

00:00:23.189 --> 00:00:23.199 align:start position:0%
together
 

00:00:23.199 --> 00:00:26.230 align:start position:0%
together
into<00:00:23.680><c> one</c><00:00:24.400><c> sub-list</c><00:00:25.279><c> and</c><00:00:25.519><c> how</c><00:00:25.680><c> do</c><00:00:25.920><c> we</c>

00:00:26.230 --> 00:00:26.240 align:start position:0%
into one sub-list and how do we
 

00:00:26.240 --> 00:00:28.550 align:start position:0%
into one sub-list and how do we
know<00:00:26.560><c> these</c><00:00:26.960><c> two</c><00:00:27.359><c> are</c><00:00:27.599><c> anagrams</c><00:00:28.160><c> of</c><00:00:28.320><c> each</c>

00:00:28.550 --> 00:00:28.560 align:start position:0%
know these two are anagrams of each
 

00:00:28.560 --> 00:00:29.990 align:start position:0%
know these two are anagrams of each
other<00:00:29.039><c> the</c><00:00:29.199><c> first</c><00:00:29.599><c> one</c>

00:00:29.990 --> 00:00:30.000 align:start position:0%
other the first one
 

00:00:30.000 --> 00:00:33.510 align:start position:0%
other the first one
is<00:00:30.560><c> tan</c><00:00:31.439><c> the</c><00:00:31.599><c> second</c><00:00:31.920><c> one</c><00:00:32.320><c> is</c><00:00:32.880><c> na</c>

00:00:33.510 --> 00:00:33.520 align:start position:0%
is tan the second one is na
 

00:00:33.520 --> 00:00:37.110 align:start position:0%
is tan the second one is na
and<00:00:33.680><c> you</c><00:00:33.920><c> see</c><00:00:34.239><c> if</c><00:00:34.399><c> we</c><00:00:34.640><c> swap</c><00:00:35.200><c> the</c><00:00:35.520><c> n</c><00:00:36.000><c> and</c><00:00:36.160><c> the</c><00:00:36.399><c> t</c>

00:00:37.110 --> 00:00:37.120 align:start position:0%
and you see if we swap the n and the t
 

00:00:37.120 --> 00:00:40.630 align:start position:0%
and you see if we swap the n and the t
then<00:00:37.600><c> we</c><00:00:38.000><c> get</c><00:00:38.640><c> we</c><00:00:38.800><c> get</c><00:00:39.280><c> tan</c><00:00:40.079><c> right</c>

00:00:40.630 --> 00:00:40.640 align:start position:0%
then we get we get tan right
 

00:00:40.640 --> 00:00:43.030 align:start position:0%
then we get we get tan right
and<00:00:41.120><c> that's</c><00:00:41.440><c> the</c><00:00:41.680><c> same</c><00:00:42.000><c> as</c><00:00:42.239><c> this</c><00:00:42.480><c> so</c><00:00:42.800><c> by</c>

00:00:43.030 --> 00:00:43.040 align:start position:0%
and that's the same as this so by
 

00:00:43.040 --> 00:00:43.990 align:start position:0%
and that's the same as this so by
rearranging

00:00:43.990 --> 00:00:44.000 align:start position:0%
rearranging
 

00:00:44.000 --> 00:00:46.229 align:start position:0%
rearranging
the<00:00:44.160><c> characters</c><00:00:44.719><c> we</c><00:00:44.879><c> can</c><00:00:45.039><c> get</c><00:00:45.520><c> equivalent</c>

00:00:46.229 --> 00:00:46.239 align:start position:0%
the characters we can get equivalent
 

00:00:46.239 --> 00:00:48.389 align:start position:0%
the characters we can get equivalent
strings<00:00:46.640><c> so</c><00:00:46.879><c> these</c><00:00:47.120><c> two</c><00:00:47.440><c> are</c><00:00:47.760><c> equal</c>

00:00:48.389 --> 00:00:48.399 align:start position:0%
strings so these two are equal
 

00:00:48.399 --> 00:00:51.110 align:start position:0%
strings so these two are equal
so<00:00:48.640><c> another</c><00:00:49.120><c> way</c><00:00:49.280><c> of</c><00:00:49.440><c> looking</c><00:00:49.760><c> at</c><00:00:50.000><c> it</c><00:00:50.239><c> is</c><00:00:50.800><c> two</c>

00:00:51.110 --> 00:00:51.120 align:start position:0%
so another way of looking at it is two
 

00:00:51.120 --> 00:00:51.910 align:start position:0%
so another way of looking at it is two
strings

00:00:51.910 --> 00:00:51.920 align:start position:0%
strings
 

00:00:51.920 --> 00:00:55.510 align:start position:0%
strings
are<00:00:52.160><c> anagrams</c><00:00:52.879><c> of</c><00:00:53.120><c> each</c><00:00:53.280><c> other</c><00:00:53.840><c> if</c><00:00:54.320><c> we</c><00:00:54.879><c> take</c>

00:00:55.510 --> 00:00:55.520 align:start position:0%
are anagrams of each other if we take
 

00:00:55.520 --> 00:00:58.150 align:start position:0%
are anagrams of each other if we take
each<00:00:55.760><c> of</c><00:00:55.920><c> them</c><00:00:56.640><c> and</c><00:00:57.120><c> sort</c><00:00:57.520><c> them</c><00:00:57.760><c> right</c><00:00:57.920><c> so</c><00:00:58.079><c> if</c>

00:00:58.150 --> 00:00:58.160 align:start position:0%
each of them and sort them right so if
 

00:00:58.160 --> 00:00:59.910 align:start position:0%
each of them and sort them right so if
we<00:00:58.480><c> sort</c><00:00:58.879><c> both</c><00:00:59.199><c> of</c><00:00:59.359><c> these</c>

00:00:59.910 --> 00:00:59.920 align:start position:0%
we sort both of these
 

00:00:59.920 --> 00:01:02.869 align:start position:0%
we sort both of these
we're<00:01:00.160><c> gonna</c><00:01:00.559><c> get</c><00:01:01.039><c> ant</c><00:01:01.840><c> right</c><00:01:02.239><c> for</c><00:01:02.480><c> both</c><00:01:02.719><c> of</c>

00:01:02.869 --> 00:01:02.879 align:start position:0%
we're gonna get ant right for both of
 

00:01:02.879 --> 00:01:03.270 align:start position:0%
we're gonna get ant right for both of
them

00:01:03.270 --> 00:01:03.280 align:start position:0%
them
 

00:01:03.280 --> 00:01:05.189 align:start position:0%
them
because<00:01:03.520><c> that's</c><00:01:03.760><c> the</c><00:01:04.000><c> sorted</c><00:01:04.400><c> version</c><00:01:04.799><c> so</c><00:01:05.040><c> if</c>

00:01:05.189 --> 00:01:05.199 align:start position:0%
because that's the sorted version so if
 

00:01:05.199 --> 00:01:07.030 align:start position:0%
because that's the sorted version so if
they're<00:01:05.439><c> anagrams</c><00:01:06.000><c> of</c><00:01:06.159><c> each</c><00:01:06.400><c> other</c>

00:01:07.030 --> 00:01:07.040 align:start position:0%
they're anagrams of each other
 

00:01:07.040 --> 00:01:09.030 align:start position:0%
they're anagrams of each other
when<00:01:07.200><c> they</c><00:01:07.360><c> are</c><00:01:07.600><c> sorted</c><00:01:08.080><c> they</c><00:01:08.400><c> should</c><00:01:08.640><c> be</c>

00:01:09.030 --> 00:01:09.040 align:start position:0%
when they are sorted they should be
 

00:01:09.040 --> 00:01:10.469 align:start position:0%
when they are sorted they should be
equal<00:01:09.520><c> right</c><00:01:09.840><c> so</c>

00:01:10.469 --> 00:01:10.479 align:start position:0%
equal right so
 

00:01:10.479 --> 00:01:13.109 align:start position:0%
equal right so
so<00:01:10.720><c> one</c><00:01:10.960><c> way</c><00:01:11.280><c> to</c><00:01:11.520><c> group</c><00:01:11.920><c> anagrams</c><00:01:12.640><c> together</c>

00:01:13.109 --> 00:01:13.119 align:start position:0%
so one way to group anagrams together
 

00:01:13.119 --> 00:01:14.230 align:start position:0%
so one way to group anagrams together
would<00:01:13.360><c> be</c><00:01:13.600><c> to</c><00:01:13.840><c> take</c>

00:01:14.230 --> 00:01:14.240 align:start position:0%
would be to take
 

00:01:14.240 --> 00:01:16.710 align:start position:0%
would be to take
each<00:01:14.560><c> one</c><00:01:14.720><c> of</c><00:01:14.880><c> these</c><00:01:15.200><c> strings</c><00:01:15.920><c> in</c><00:01:16.080><c> the</c><00:01:16.320><c> input</c>

00:01:16.710 --> 00:01:16.720 align:start position:0%
each one of these strings in the input
 

00:01:16.720 --> 00:01:18.070 align:start position:0%
each one of these strings in the input
and<00:01:16.799><c> then</c><00:01:17.119><c> sort</c><00:01:17.439><c> them</c>

00:01:18.070 --> 00:01:18.080 align:start position:0%
and then sort them
 

00:01:18.080 --> 00:01:20.870 align:start position:0%
and then sort them
but<00:01:18.240><c> the</c><00:01:18.560><c> time</c><00:01:18.880><c> complexity</c><00:01:19.600><c> of</c><00:01:19.680><c> that</c><00:01:20.159><c> is</c><00:01:20.479><c> going</c>

00:01:20.870 --> 00:01:20.880 align:start position:0%
but the time complexity of that is going
 

00:01:20.880 --> 00:01:21.990 align:start position:0%
but the time complexity of that is going
to<00:01:21.200><c> be</c>

00:01:21.990 --> 00:01:22.000 align:start position:0%
to be
 

00:01:22.000 --> 00:01:25.429 align:start position:0%
to be
n<00:01:22.640><c> log</c><00:01:23.119><c> n</c><00:01:23.759><c> where</c><00:01:24.000><c> let's</c><00:01:24.320><c> just</c><00:01:24.560><c> say</c><00:01:24.960><c> n</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
n log n where let's just say n
 

00:01:25.439 --> 00:01:27.830 align:start position:0%
n log n where let's just say n
is<00:01:25.600><c> the</c><00:01:25.840><c> average</c><00:01:26.479><c> length</c><00:01:26.960><c> of</c><00:01:27.280><c> each</c><00:01:27.520><c> of</c><00:01:27.600><c> the</c>

00:01:27.830 --> 00:01:27.840 align:start position:0%
is the average length of each of the
 

00:01:27.840 --> 00:01:28.710 align:start position:0%
is the average length of each of the
input<00:01:28.159><c> strings</c>

00:01:28.710 --> 00:01:28.720 align:start position:0%
input strings
 

00:01:28.720 --> 00:01:31.429 align:start position:0%
input strings
so<00:01:28.960><c> that's</c><00:01:29.520><c> how</c><00:01:29.680><c> much</c><00:01:30.000><c> it</c><00:01:30.159><c> takes</c><00:01:30.479><c> to</c><00:01:30.720><c> sort</c><00:01:31.200><c> each</c>

00:01:31.429 --> 00:01:31.439 align:start position:0%
so that's how much it takes to sort each
 

00:01:31.439 --> 00:01:32.310 align:start position:0%
so that's how much it takes to sort each
of<00:01:31.520><c> the</c><00:01:31.680><c> strings</c>

00:01:32.310 --> 00:01:32.320 align:start position:0%
of the strings
 

00:01:32.320 --> 00:01:35.030 align:start position:0%
of the strings
and<00:01:32.400><c> we</c><00:01:32.640><c> have</c><00:01:32.720><c> to</c><00:01:32.880><c> do</c><00:01:33.040><c> that</c><00:01:33.520><c> m</c><00:01:34.320><c> times</c><00:01:34.799><c> where</c>

00:01:35.030 --> 00:01:35.040 align:start position:0%
and we have to do that m times where
 

00:01:35.040 --> 00:01:35.590 align:start position:0%
and we have to do that m times where
let's<00:01:35.200><c> say</c>

00:01:35.590 --> 00:01:35.600 align:start position:0%
let's say
 

00:01:35.600 --> 00:01:39.109 align:start position:0%
let's say
m<00:01:36.159><c> is</c><00:01:36.799><c> the</c><00:01:37.600><c> length</c><00:01:38.560><c> of</c>

00:01:39.109 --> 00:01:39.119 align:start position:0%
m is the length of
 

00:01:39.119 --> 00:01:41.109 align:start position:0%
m is the length of
how<00:01:39.280><c> many</c><00:01:39.840><c> like</c><00:01:40.079><c> basically</c><00:01:40.479><c> how</c><00:01:40.640><c> many</c><00:01:40.880><c> input</c>

00:01:41.109 --> 00:01:41.119 align:start position:0%
how many like basically how many input
 

00:01:41.119 --> 00:01:43.190 align:start position:0%
how many like basically how many input
strings<00:01:41.439><c> were</c><00:01:41.680><c> given</c><00:01:42.000><c> in</c><00:01:42.159><c> the</c><00:01:42.240><c> first</c><00:01:42.560><c> place</c>

00:01:43.190 --> 00:01:43.200 align:start position:0%
strings were given in the first place
 

00:01:43.200 --> 00:01:45.429 align:start position:0%
strings were given in the first place
so<00:01:43.360><c> you</c><00:01:43.520><c> can</c><00:01:43.680><c> see</c><00:01:43.840><c> that</c><00:01:44.159><c> this</c><00:01:44.560><c> is</c><00:01:44.799><c> going</c><00:01:45.040><c> to</c><00:01:45.200><c> be</c>

00:01:45.429 --> 00:01:45.439 align:start position:0%
so you can see that this is going to be
 

00:01:45.439 --> 00:01:47.590 align:start position:0%
so you can see that this is going to be
the<00:01:45.759><c> overall</c><00:01:46.320><c> time</c><00:01:46.560><c> complexity</c>

00:01:47.590 --> 00:01:47.600 align:start position:0%
the overall time complexity
 

00:01:47.600 --> 00:01:50.469 align:start position:0%
the overall time complexity
so<00:01:47.840><c> my</c><00:01:48.079><c> question</c><00:01:48.479><c> is</c><00:01:48.720><c> can</c><00:01:49.040><c> we</c><00:01:49.360><c> do</c><00:01:49.920><c> better</c><00:01:50.240><c> than</c>

00:01:50.469 --> 00:01:50.479 align:start position:0%
so my question is can we do better than
 

00:01:50.479 --> 00:01:51.990 align:start position:0%
so my question is can we do better than
this<00:01:50.799><c> and</c><00:01:51.040><c> actually</c>

00:01:51.990 --> 00:01:52.000 align:start position:0%
this and actually
 

00:01:52.000 --> 00:01:54.630 align:start position:0%
this and actually
the<00:01:52.640><c> simple</c><00:01:53.119><c> solution</c><00:01:53.680><c> in</c><00:01:53.840><c> this</c><00:01:54.000><c> case</c><00:01:54.320><c> happens</c>

00:01:54.630 --> 00:01:54.640 align:start position:0%
the simple solution in this case happens
 

00:01:54.640 --> 00:01:56.550 align:start position:0%
the simple solution in this case happens
to<00:01:54.720><c> be</c><00:01:54.960><c> more</c><00:01:55.200><c> efficient</c><00:01:55.680><c> and</c><00:01:55.759><c> let</c><00:01:55.920><c> me</c><00:01:56.079><c> show</c><00:01:56.240><c> you</c>

00:01:56.550 --> 00:01:56.560 align:start position:0%
to be more efficient and let me show you
 

00:01:56.560 --> 00:01:59.350 align:start position:0%
to be more efficient and let me show you
that<00:01:56.719><c> solution</c><00:01:57.280><c> right</c><00:01:57.520><c> now</c><00:01:58.240><c> so</c><00:01:58.560><c> one</c><00:01:58.960><c> also</c>

00:01:59.350 --> 00:01:59.360 align:start position:0%
that solution right now so one also
 

00:01:59.360 --> 00:02:00.550 align:start position:0%
that solution right now so one also
condition<00:01:59.840><c> that</c><00:02:00.000><c> we're</c><00:02:00.159><c> given</c>

00:02:00.550 --> 00:02:00.560 align:start position:0%
condition that we're given
 

00:02:00.560 --> 00:02:02.389 align:start position:0%
condition that we're given
is<00:02:00.640><c> that</c><00:02:00.799><c> each</c><00:02:01.119><c> character</c><00:02:01.600><c> is</c><00:02:01.680><c> going</c><00:02:01.840><c> to</c><00:02:01.920><c> be</c>

00:02:02.389 --> 00:02:02.399 align:start position:0%
is that each character is going to be
 

00:02:02.399 --> 00:02:03.990 align:start position:0%
is that each character is going to be
from<00:02:02.880><c> lowercase</c><00:02:03.680><c> a</c>

00:02:03.990 --> 00:02:04.000 align:start position:0%
from lowercase a
 

00:02:04.000 --> 00:02:08.150 align:start position:0%
from lowercase a
to<00:02:04.240><c> lowercase</c><00:02:05.119><c> z</c><00:02:05.439><c> so</c><00:02:05.759><c> at</c><00:02:06.079><c> most</c><00:02:06.479><c> we</c><00:02:06.640><c> have</c><00:02:06.880><c> 26</c>

00:02:08.150 --> 00:02:08.160 align:start position:0%
to lowercase z so at most we have 26
 

00:02:08.160 --> 00:02:10.949 align:start position:0%
to lowercase z so at most we have 26
unique<00:02:08.720><c> characters</c><00:02:09.440><c> right</c><00:02:10.000><c> so</c><00:02:10.319><c> let's</c><00:02:10.640><c> just</c>

00:02:10.949 --> 00:02:10.959 align:start position:0%
unique characters right so let's just
 

00:02:10.959 --> 00:02:11.430 align:start position:0%
unique characters right so let's just
have

00:02:11.430 --> 00:02:11.440 align:start position:0%
have
 

00:02:11.440 --> 00:02:14.630 align:start position:0%
have
an<00:02:11.840><c> array</c><00:02:12.640><c> called</c><00:02:13.280><c> count</c><00:02:14.000><c> so</c><00:02:14.239><c> for</c>

00:02:14.630 --> 00:02:14.640 align:start position:0%
an array called count so for
 

00:02:14.640 --> 00:02:17.190 align:start position:0%
an array called count so for
each<00:02:15.120><c> one</c><00:02:15.280><c> of</c><00:02:15.440><c> these</c><00:02:15.760><c> strings</c><00:02:16.400><c> we</c><00:02:16.640><c> want</c><00:02:16.800><c> to</c>

00:02:17.190 --> 00:02:17.200 align:start position:0%
each one of these strings we want to
 

00:02:17.200 --> 00:02:17.990 align:start position:0%
each one of these strings we want to
count

00:02:17.990 --> 00:02:18.000 align:start position:0%
count
 

00:02:18.000 --> 00:02:21.510 align:start position:0%
count
the<00:02:18.319><c> characters</c><00:02:19.280><c> from</c><00:02:19.840><c> a</c><00:02:20.480><c> to</c><00:02:20.720><c> z</c>

00:02:21.510 --> 00:02:21.520 align:start position:0%
the characters from a to z
 

00:02:21.520 --> 00:02:24.150 align:start position:0%
the characters from a to z
right<00:02:22.000><c> how</c><00:02:22.160><c> many</c><00:02:22.400><c> does</c><00:02:22.560><c> it</c><00:02:22.720><c> have</c><00:02:22.959><c> of</c><00:02:23.280><c> each</c><00:02:23.680><c> so</c>

00:02:24.150 --> 00:02:24.160 align:start position:0%
right how many does it have of each so
 

00:02:24.160 --> 00:02:25.510 align:start position:0%
right how many does it have of each so
we<00:02:24.319><c> know</c><00:02:24.560><c> it</c><00:02:24.720><c> has</c>

00:02:25.510 --> 00:02:25.520 align:start position:0%
we know it has
 

00:02:25.520 --> 00:02:28.630 align:start position:0%
we know it has
one<00:02:25.920><c> e</c><00:02:26.720><c> one</c><00:02:27.200><c> a</c><00:02:27.920><c> and</c><00:02:28.080><c> it</c><00:02:28.160><c> has</c>

00:02:28.630 --> 00:02:28.640 align:start position:0%
one e one a and it has
 

00:02:28.640 --> 00:02:32.229 align:start position:0%
one e one a and it has
one<00:02:29.360><c> t</c><00:02:30.319><c> and</c><00:02:30.959><c> for</c><00:02:31.360><c> this</c><00:02:31.680><c> one</c>

00:02:32.229 --> 00:02:32.239 align:start position:0%
one t and for this one
 

00:02:32.239 --> 00:02:33.830 align:start position:0%
one t and for this one
we<00:02:32.400><c> would</c><00:02:32.560><c> see</c><00:02:32.800><c> that</c><00:02:32.959><c> the</c><00:02:33.120><c> exact</c><00:02:33.440><c> same</c><00:02:33.680><c> thing</c>

00:02:33.830 --> 00:02:33.840 align:start position:0%
we would see that the exact same thing
 

00:02:33.840 --> 00:02:36.790 align:start position:0%
we would see that the exact same thing
is<00:02:34.000><c> true</c><00:02:34.239><c> it</c><00:02:34.319><c> has</c><00:02:34.720><c> one</c><00:02:35.040><c> e</c><00:02:35.840><c> one</c><00:02:36.160><c> a</c>

00:02:36.790 --> 00:02:36.800 align:start position:0%
is true it has one e one a
 

00:02:36.800 --> 00:02:40.070 align:start position:0%
is true it has one e one a
and<00:02:37.040><c> one</c><00:02:37.440><c> t</c><00:02:37.840><c> so</c><00:02:38.080><c> if</c><00:02:38.239><c> we</c><00:02:38.480><c> use</c><00:02:38.800><c> a</c><00:02:39.040><c> data</c><00:02:39.360><c> structure</c>

00:02:40.070 --> 00:02:40.080 align:start position:0%
and one t so if we use a data structure
 

00:02:40.080 --> 00:02:42.550 align:start position:0%
and one t so if we use a data structure
called<00:02:40.400><c> a</c><00:02:40.560><c> hash</c><00:02:40.879><c> map</c><00:02:41.280><c> in</c><00:02:41.360><c> this</c><00:02:41.599><c> case</c><00:02:42.160><c> and</c><00:02:42.480><c> in</c>

00:02:42.550 --> 00:02:42.560 align:start position:0%
called a hash map in this case and in
 

00:02:42.560 --> 00:02:43.190 align:start position:0%
called a hash map in this case and in
this<00:02:42.800><c> case</c>

00:02:43.190 --> 00:02:43.200 align:start position:0%
this case
 

00:02:43.200 --> 00:02:46.229 align:start position:0%
this case
our<00:02:43.519><c> key</c><00:02:44.319><c> is</c><00:02:44.640><c> going</c><00:02:44.959><c> to</c><00:02:45.360><c> be</c>

00:02:46.229 --> 00:02:46.239 align:start position:0%
our key is going to be
 

00:02:46.239 --> 00:02:49.509 align:start position:0%
our key is going to be
this<00:02:47.120><c> over</c><00:02:47.440><c> here</c><00:02:48.160><c> so</c><00:02:48.720><c> this</c><00:02:48.959><c> is</c><00:02:49.040><c> what</c><00:02:49.200><c> we</c><00:02:49.360><c> can</c>

00:02:49.509 --> 00:02:49.519 align:start position:0%
this over here so this is what we can
 

00:02:49.519 --> 00:02:49.990 align:start position:0%
this over here so this is what we can
use<00:02:49.760><c> to</c>

00:02:49.990 --> 00:02:50.000 align:start position:0%
use to
 

00:02:50.000 --> 00:02:52.790 align:start position:0%
use to
identify<00:02:50.640><c> anagrams</c><00:02:51.440><c> and</c><00:02:51.599><c> then</c><00:02:51.840><c> our</c><00:02:52.160><c> value</c><00:02:52.720><c> is</c>

00:02:52.790 --> 00:02:52.800 align:start position:0%
identify anagrams and then our value is
 

00:02:52.800 --> 00:02:54.070 align:start position:0%
identify anagrams and then our value is
going<00:02:52.959><c> to</c><00:02:53.040><c> be</c><00:02:53.200><c> the</c><00:02:53.599><c> list</c>

00:02:54.070 --> 00:02:54.080 align:start position:0%
going to be the list
 

00:02:54.080 --> 00:02:57.110 align:start position:0%
going to be the list
of<00:02:54.239><c> anagrams</c><00:02:55.120><c> so</c><00:02:55.440><c> in</c><00:02:55.680><c> this</c><00:02:55.920><c> case</c><00:02:56.560><c> how</c><00:02:56.800><c> many</c>

00:02:57.110 --> 00:02:57.120 align:start position:0%
of anagrams so in this case how many
 

00:02:57.120 --> 00:02:59.190 align:start position:0%
of anagrams so in this case how many
strings<00:02:57.680><c> or</c><00:02:57.920><c> which</c><00:02:58.239><c> strings</c><00:02:58.800><c> have</c>

00:02:59.190 --> 00:02:59.200 align:start position:0%
strings or which strings have
 

00:02:59.200 --> 00:03:02.229 align:start position:0%
strings or which strings have
this<00:02:59.519><c> pattern</c><00:03:00.159><c> of</c><00:03:00.480><c> count</c><00:03:01.040><c> one</c><00:03:01.440><c> e</c>

00:03:02.229 --> 00:03:02.239 align:start position:0%
this pattern of count one e
 

00:03:02.239 --> 00:03:05.990 align:start position:0%
this pattern of count one e
one<00:03:02.959><c> a</c><00:03:03.440><c> and</c><00:03:03.599><c> one</c><00:03:03.920><c> t</c><00:03:04.159><c> well</c><00:03:04.400><c> we</c><00:03:04.560><c> see</c><00:03:05.120><c> there's</c><00:03:05.519><c> one</c>

00:03:05.990 --> 00:03:06.000 align:start position:0%
one a and one t well we see there's one
 

00:03:06.000 --> 00:03:09.990 align:start position:0%
one a and one t well we see there's one
each<00:03:06.800><c> there's</c><00:03:07.200><c> one</c><00:03:08.000><c> t</c><00:03:08.800><c> and</c><00:03:08.959><c> there's</c><00:03:09.360><c> one</c><00:03:09.599><c> last</c>

00:03:09.990 --> 00:03:10.000 align:start position:0%
each there's one t and there's one last
 

00:03:10.000 --> 00:03:10.869 align:start position:0%
each there's one t and there's one last
one

00:03:10.869 --> 00:03:10.879 align:start position:0%
one
 

00:03:10.879 --> 00:03:14.070 align:start position:0%
one
a<00:03:11.360><c> so</c><00:03:11.680><c> those</c><00:03:12.080><c> are</c><00:03:12.239><c> gonna</c><00:03:12.560><c> be</c><00:03:13.200><c> the</c><00:03:13.440><c> values</c><00:03:13.920><c> we'll</c>

00:03:14.070 --> 00:03:14.080 align:start position:0%
a so those are gonna be the values we'll
 

00:03:14.080 --> 00:03:15.589 align:start position:0%
a so those are gonna be the values we'll
have<00:03:14.239><c> a</c><00:03:14.480><c> list</c><00:03:14.720><c> of</c><00:03:14.959><c> them</c>

00:03:15.589 --> 00:03:15.599 align:start position:0%
have a list of them
 

00:03:15.599 --> 00:03:19.190 align:start position:0%
have a list of them
e<00:03:16.239><c> t</c><00:03:16.959><c> and</c><00:03:17.120><c> then</c><00:03:17.440><c> a</c><00:03:18.080><c> right</c><00:03:18.239><c> so</c><00:03:18.400><c> we'll</c><00:03:18.560><c> have</c><00:03:18.800><c> three</c>

00:03:19.190 --> 00:03:19.200 align:start position:0%
e t and then a right so we'll have three
 

00:03:19.200 --> 00:03:20.070 align:start position:0%
e t and then a right so we'll have three
strings

00:03:20.070 --> 00:03:20.080 align:start position:0%
strings
 

00:03:20.080 --> 00:03:22.630 align:start position:0%
strings
and<00:03:20.560><c> as</c><00:03:20.800><c> you</c><00:03:20.879><c> can</c><00:03:21.040><c> see</c><00:03:21.360><c> in</c><00:03:21.599><c> the</c><00:03:22.000><c> output</c><00:03:22.400><c> it's</c><00:03:22.560><c> a</c>

00:03:22.630 --> 00:03:22.640 align:start position:0%
and as you can see in the output it's a
 

00:03:22.640 --> 00:03:24.390 align:start position:0%
and as you can see in the output it's a
little<00:03:22.879><c> messy</c><00:03:23.280><c> but</c><00:03:23.519><c> that's</c><00:03:23.760><c> what</c><00:03:23.920><c> we</c><00:03:24.080><c> have</c>

00:03:24.390 --> 00:03:24.400 align:start position:0%
little messy but that's what we have
 

00:03:24.400 --> 00:03:25.750 align:start position:0%
little messy but that's what we have
here<00:03:24.640><c> right</c><00:03:24.879><c> so</c><00:03:25.040><c> these</c><00:03:25.360><c> three</c>

00:03:25.750 --> 00:03:25.760 align:start position:0%
here right so these three
 

00:03:25.760 --> 00:03:27.110 align:start position:0%
here right so these three
are<00:03:25.920><c> grouped</c><00:03:26.239><c> together</c><00:03:26.560><c> so</c><00:03:26.720><c> we're</c><00:03:26.879><c> going</c><00:03:27.040><c> to</c>

00:03:27.110 --> 00:03:27.120 align:start position:0%
are grouped together so we're going to
 

00:03:27.120 --> 00:03:28.789 align:start position:0%
are grouped together so we're going to
use<00:03:27.680><c> a</c><00:03:27.920><c> hash</c><00:03:28.319><c> map</c>

00:03:28.789 --> 00:03:28.799 align:start position:0%
use a hash map
 

00:03:28.799 --> 00:03:31.270 align:start position:0%
use a hash map
to<00:03:29.040><c> group</c><00:03:29.280><c> them</c><00:03:29.440><c> together</c><00:03:30.319><c> since</c><00:03:30.720><c> all</c><00:03:30.959><c> we're</c>

00:03:31.270 --> 00:03:31.280 align:start position:0%
to group them together since all we're
 

00:03:31.280 --> 00:03:33.350 align:start position:0%
to group them together since all we're
and<00:03:31.440><c> since</c><00:03:31.680><c> we're</c><00:03:31.920><c> using</c><00:03:32.239><c> a</c><00:03:32.400><c> hash</c><00:03:32.720><c> map</c><00:03:32.959><c> and</c><00:03:33.200><c> all</c>

00:03:33.350 --> 00:03:33.360 align:start position:0%
and since we're using a hash map and all
 

00:03:33.360 --> 00:03:34.710 align:start position:0%
and since we're using a hash map and all
we're<00:03:33.519><c> doing</c><00:03:33.840><c> is</c><00:03:34.080><c> counting</c>

00:03:34.710 --> 00:03:34.720 align:start position:0%
we're doing is counting
 

00:03:34.720 --> 00:03:37.750 align:start position:0%
we're doing is counting
the<00:03:34.959><c> characters</c><00:03:36.000><c> of</c><00:03:36.400><c> each</c><00:03:37.120><c> and</c>

00:03:37.750 --> 00:03:37.760 align:start position:0%
the characters of each and
 

00:03:37.760 --> 00:03:40.550 align:start position:0%
the characters of each and
we<00:03:38.000><c> know</c><00:03:38.239><c> that</c><00:03:38.400><c> we</c><00:03:38.640><c> have</c><00:03:38.799><c> a</c><00:03:38.959><c> limit</c><00:03:39.440><c> of</c><00:03:39.680><c> 26</c>

00:03:40.550 --> 00:03:40.560 align:start position:0%
we know that we have a limit of 26
 

00:03:40.560 --> 00:03:41.990 align:start position:0%
we know that we have a limit of 26
lowercase<00:03:41.200><c> characters</c>

00:03:41.990 --> 00:03:42.000 align:start position:0%
lowercase characters
 

00:03:42.000 --> 00:03:44.789 align:start position:0%
lowercase characters
the<00:03:42.319><c> overall</c><00:03:42.879><c> time</c><00:03:43.120><c> complexity</c><00:03:43.680><c> is</c><00:03:43.840><c> gonna</c><00:03:44.080><c> be</c>

00:03:44.789 --> 00:03:44.799 align:start position:0%
the overall time complexity is gonna be
 

00:03:44.799 --> 00:03:45.430 align:start position:0%
the overall time complexity is gonna be
big

00:03:45.430 --> 00:03:45.440 align:start position:0%
big
 

00:03:45.440 --> 00:03:48.949 align:start position:0%
big
o<00:03:46.480><c> of</c><00:03:47.040><c> m</c><00:03:47.920><c> where</c><00:03:48.400><c> m</c>

00:03:48.949 --> 00:03:48.959 align:start position:0%
o of m where m
 

00:03:48.959 --> 00:03:52.630 align:start position:0%
o of m where m
is<00:03:49.200><c> the</c><00:03:49.519><c> total</c><00:03:50.239><c> number</c><00:03:51.120><c> of</c><00:03:51.920><c> input</c><00:03:52.319><c> strings</c>

00:03:52.630 --> 00:03:52.640 align:start position:0%
is the total number of input strings
 

00:03:52.640 --> 00:03:53.830 align:start position:0%
is the total number of input strings
that<00:03:52.799><c> we're</c><00:03:52.959><c> given</c>

00:03:53.830 --> 00:03:53.840 align:start position:0%
that we're given
 

00:03:53.840 --> 00:03:57.110 align:start position:0%
that we're given
times<00:03:54.720><c> n</c><00:03:55.599><c> where</c><00:03:56.080><c> n</c><00:03:56.480><c> is</c><00:03:56.720><c> the</c>

00:03:57.110 --> 00:03:57.120 align:start position:0%
times n where n is the
 

00:03:57.120 --> 00:04:00.550 align:start position:0%
times n where n is the
average<00:03:58.159><c> length</c><00:03:58.720><c> of</c><00:03:58.879><c> a</c><00:03:59.200><c> string</c><00:04:00.080><c> because</c><00:04:00.400><c> we</c>

00:04:00.550 --> 00:04:00.560 align:start position:0%
average length of a string because we
 

00:04:00.560 --> 00:04:00.949 align:start position:0%
average length of a string because we
have<00:04:00.640><c> to</c>

00:04:00.949 --> 00:04:00.959 align:start position:0%
have to
 

00:04:00.959 --> 00:04:03.429 align:start position:0%
have to
count<00:04:01.599><c> how</c><00:04:01.760><c> many</c><00:04:02.319><c> of</c><00:04:02.480><c> each</c><00:04:02.720><c> character</c><00:04:03.200><c> it</c><00:04:03.280><c> has</c>

00:04:03.429 --> 00:04:03.439 align:start position:0%
count how many of each character it has
 

00:04:03.439 --> 00:04:04.630 align:start position:0%
count how many of each character it has
so<00:04:03.599><c> we're</c><00:04:03.760><c> gonna</c><00:04:03.920><c> have</c><00:04:04.000><c> to</c><00:04:04.080><c> go</c><00:04:04.319><c> through</c>

00:04:04.630 --> 00:04:04.640 align:start position:0%
so we're gonna have to go through
 

00:04:04.640 --> 00:04:07.350 align:start position:0%
so we're gonna have to go through
every<00:04:05.040><c> single</c><00:04:05.439><c> character</c><00:04:06.080><c> in</c><00:04:06.159><c> a</c><00:04:06.319><c> string</c><00:04:07.040><c> and</c>

00:04:07.350 --> 00:04:07.360 align:start position:0%
every single character in a string and
 

00:04:07.360 --> 00:04:07.990 align:start position:0%
every single character in a string and
since<00:04:07.680><c> we</c>

00:04:07.990 --> 00:04:08.000 align:start position:0%
since we
 

00:04:08.000 --> 00:04:11.990 align:start position:0%
since we
are<00:04:08.239><c> using</c><00:04:08.959><c> count</c><00:04:09.599><c> right</c><00:04:09.920><c> or</c><00:04:10.159><c> this</c><00:04:10.879><c> array</c>

00:04:11.990 --> 00:04:12.000 align:start position:0%
are using count right or this array
 

00:04:12.000 --> 00:04:15.030 align:start position:0%
are using count right or this array
in<00:04:12.720><c> our</c><00:04:13.040><c> hash</c><00:04:13.360><c> map</c><00:04:13.519><c> we're</c><00:04:13.680><c> using</c><00:04:14.000><c> it</c><00:04:14.159><c> as</c><00:04:14.319><c> a</c><00:04:14.480><c> key</c>

00:04:15.030 --> 00:04:15.040 align:start position:0%
in our hash map we're using it as a key
 

00:04:15.040 --> 00:04:17.030 align:start position:0%
in our hash map we're using it as a key
in<00:04:15.200><c> our</c><00:04:15.280><c> hash</c><00:04:15.599><c> map</c><00:04:15.920><c> we</c><00:04:16.079><c> kind</c><00:04:16.320><c> of</c><00:04:16.560><c> also</c><00:04:16.799><c> have</c><00:04:16.959><c> to</c>

00:04:17.030 --> 00:04:17.040 align:start position:0%
in our hash map we kind of also have to
 

00:04:17.040 --> 00:04:19.189 align:start position:0%
in our hash map we kind of also have to
multiply<00:04:17.519><c> this</c><00:04:17.759><c> by</c><00:04:18.079><c> 26</c>

00:04:19.189 --> 00:04:19.199 align:start position:0%
multiply this by 26
 

00:04:19.199 --> 00:04:20.629 align:start position:0%
multiply this by 26
because<00:04:19.440><c> that's</c><00:04:19.840><c> what's</c><00:04:20.079><c> going</c><00:04:20.160><c> to</c><00:04:20.239><c> be</c><00:04:20.320><c> the</c>

00:04:20.629 --> 00:04:20.639 align:start position:0%
because that's what's going to be the
 

00:04:20.639 --> 00:04:22.790 align:start position:0%
because that's what's going to be the
length<00:04:21.120><c> of</c><00:04:21.359><c> our</c><00:04:21.600><c> count</c><00:04:22.000><c> array</c>

00:04:22.790 --> 00:04:22.800 align:start position:0%
length of our count array
 

00:04:22.800 --> 00:04:25.749 align:start position:0%
length of our count array
but<00:04:23.040><c> you</c><00:04:23.280><c> know</c><00:04:23.600><c> that</c><00:04:23.919><c> this</c><00:04:24.400><c> reduces</c><00:04:25.120><c> anyway</c><00:04:25.520><c> so</c>

00:04:25.749 --> 00:04:25.759 align:start position:0%
but you know that this reduces anyway so
 

00:04:25.759 --> 00:04:27.990 align:start position:0%
but you know that this reduces anyway so
the<00:04:26.160><c> actual</c><00:04:26.560><c> time</c><00:04:26.800><c> complexity</c><00:04:27.440><c> is</c><00:04:27.680><c> big</c>

00:04:27.990 --> 00:04:28.000 align:start position:0%
the actual time complexity is big
 

00:04:28.000 --> 00:04:31.909 align:start position:0%
the actual time complexity is big
o<00:04:28.800><c> m</c><00:04:29.600><c> times</c><00:04:30.639><c> n</c>

00:04:31.909 --> 00:04:31.919 align:start position:0%
o m times n
 

00:04:31.919 --> 00:04:33.990 align:start position:0%
o m times n
so<00:04:32.160><c> now</c><00:04:32.320><c> let's</c><00:04:32.560><c> code</c><00:04:32.800><c> it</c><00:04:32.960><c> up</c><00:04:33.199><c> as</c><00:04:33.440><c> you</c><00:04:33.600><c> can</c><00:04:33.840><c> see</c>

00:04:33.990 --> 00:04:34.000 align:start position:0%
so now let's code it up as you can see
 

00:04:34.000 --> 00:04:35.590 align:start position:0%
so now let's code it up as you can see
though<00:04:34.240><c> this</c><00:04:34.479><c> is</c><00:04:34.639><c> basically</c><00:04:35.040><c> one</c><00:04:35.199><c> of</c><00:04:35.280><c> those</c>

00:04:35.590 --> 00:04:35.600 align:start position:0%
though this is basically one of those
 

00:04:35.600 --> 00:04:37.510 align:start position:0%
though this is basically one of those
problems<00:04:36.160><c> that</c><00:04:36.400><c> can</c><00:04:36.639><c> be</c><00:04:36.880><c> solved</c>

00:04:37.510 --> 00:04:37.520 align:start position:0%
problems that can be solved
 

00:04:37.520 --> 00:04:40.310 align:start position:0%
problems that can be solved
with<00:04:38.000><c> a</c><00:04:38.160><c> hash</c><00:04:38.479><c> map</c><00:04:38.800><c> very</c><00:04:39.040><c> efficiently</c><00:04:39.919><c> so</c>

00:04:40.310 --> 00:04:40.320 align:start position:0%
with a hash map very efficiently so
 

00:04:40.320 --> 00:04:42.469 align:start position:0%
with a hash map very efficiently so
let's<00:04:40.639><c> create</c><00:04:41.040><c> our</c><00:04:41.280><c> hashmap</c><00:04:41.840><c> we'll</c><00:04:42.080><c> call</c><00:04:42.320><c> it</c>

00:04:42.469 --> 00:04:42.479 align:start position:0%
let's create our hashmap we'll call it
 

00:04:42.479 --> 00:04:44.870 align:start position:0%
let's create our hashmap we'll call it
result<00:04:43.120><c> and</c><00:04:43.440><c> so</c><00:04:43.680><c> remember</c><00:04:44.160><c> what</c><00:04:44.320><c> we're</c><00:04:44.560><c> doing</c>

00:04:44.870 --> 00:04:44.880 align:start position:0%
result and so remember what we're doing
 

00:04:44.880 --> 00:04:46.390 align:start position:0%
result and so remember what we're doing
is<00:04:45.040><c> we're</c><00:04:45.360><c> mapping</c>

00:04:46.390 --> 00:04:46.400 align:start position:0%
is we're mapping
 

00:04:46.400 --> 00:04:49.749 align:start position:0%
is we're mapping
the<00:04:46.800><c> character</c><00:04:47.759><c> count</c><00:04:48.400><c> of</c><00:04:48.639><c> each</c><00:04:49.040><c> string</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
the character count of each string
 

00:04:49.759 --> 00:04:53.350 align:start position:0%
the character count of each string
and<00:04:49.919><c> we're</c><00:04:50.240><c> mapping</c><00:04:50.720><c> that</c><00:04:51.280><c> to</c><00:04:52.240><c> the</c><00:04:52.639><c> list</c>

00:04:53.350 --> 00:04:53.360 align:start position:0%
and we're mapping that to the list
 

00:04:53.360 --> 00:04:56.790 align:start position:0%
and we're mapping that to the list
of<00:04:53.919><c> anagrams</c><00:04:55.120><c> so</c><00:04:55.680><c> to</c><00:04:55.840><c> do</c><00:04:56.000><c> that</c><00:04:56.240><c> we</c><00:04:56.400><c> of</c><00:04:56.560><c> course</c>

00:04:56.790 --> 00:04:56.800 align:start position:0%
of anagrams so to do that we of course
 

00:04:56.800 --> 00:04:58.790 align:start position:0%
of anagrams so to do that we of course
have<00:04:56.960><c> to</c><00:04:57.120><c> go</c><00:04:57.440><c> through</c><00:04:57.759><c> every</c><00:04:58.160><c> string</c><00:04:58.639><c> that</c>

00:04:58.790 --> 00:04:58.800 align:start position:0%
have to go through every string that
 

00:04:58.800 --> 00:05:00.710 align:start position:0%
have to go through every string that
we're<00:04:59.040><c> given</c><00:04:59.440><c> in</c><00:04:59.600><c> the</c><00:04:59.840><c> input</c>

00:05:00.710 --> 00:05:00.720 align:start position:0%
we're given in the input
 

00:05:00.720 --> 00:05:02.950 align:start position:0%
we're given in the input
and<00:05:01.039><c> we</c><00:05:01.280><c> want</c><00:05:01.440><c> to</c><00:05:01.680><c> count</c><00:05:02.160><c> how</c><00:05:02.320><c> many</c><00:05:02.560><c> of</c><00:05:02.720><c> each</c>

00:05:02.950 --> 00:05:02.960 align:start position:0%
and we want to count how many of each
 

00:05:02.960 --> 00:05:04.629 align:start position:0%
and we want to count how many of each
character<00:05:03.440><c> it</c><00:05:03.520><c> has</c><00:05:03.759><c> so</c><00:05:04.000><c> we'll</c><00:05:04.240><c> have</c>

00:05:04.629 --> 00:05:04.639 align:start position:0%
character it has so we'll have
 

00:05:04.639 --> 00:05:07.990 align:start position:0%
character it has so we'll have
initially<00:05:05.600><c> a</c><00:05:06.080><c> array</c><00:05:07.039><c> so</c><00:05:07.440><c> it's</c><00:05:07.680><c> we're</c><00:05:07.840><c> going</c><00:05:07.919><c> to</c>

00:05:07.990 --> 00:05:08.000 align:start position:0%
initially a array so it's we're going to
 

00:05:08.000 --> 00:05:08.230 align:start position:0%
initially a array so it's we're going to
have

00:05:08.230 --> 00:05:08.240 align:start position:0%
have
 

00:05:08.240 --> 00:05:11.430 align:start position:0%
have
0<00:05:08.720><c> in</c><00:05:08.880><c> it</c><00:05:09.039><c> we're</c><00:05:09.199><c> going</c><00:05:09.280><c> to</c><00:05:09.360><c> have</c><00:05:09.680><c> 26</c><00:05:10.960><c> zeros</c>

00:05:11.430 --> 00:05:11.440 align:start position:0%
0 in it we're going to have 26 zeros
 

00:05:11.440 --> 00:05:12.710 align:start position:0%
0 in it we're going to have 26 zeros
right<00:05:11.759><c> because</c>

00:05:12.710 --> 00:05:12.720 align:start position:0%
right because
 

00:05:12.720 --> 00:05:15.110 align:start position:0%
right because
one<00:05:12.960><c> for</c><00:05:13.120><c> each</c><00:05:13.280><c> character</c><00:05:14.000><c> so</c><00:05:14.160><c> from</c><00:05:14.400><c> lowercase</c>

00:05:15.110 --> 00:05:15.120 align:start position:0%
one for each character so from lowercase
 

00:05:15.120 --> 00:05:15.830 align:start position:0%
one for each character so from lowercase
a

00:05:15.830 --> 00:05:15.840 align:start position:0%
a
 

00:05:15.840 --> 00:05:18.870 align:start position:0%
a
all<00:05:16.080><c> the</c><00:05:16.240><c> way</c><00:05:16.960><c> to</c><00:05:17.199><c> lowercase</c><00:05:18.240><c> z</c>

00:05:18.870 --> 00:05:18.880 align:start position:0%
all the way to lowercase z
 

00:05:18.880 --> 00:05:21.270 align:start position:0%
all the way to lowercase z
and<00:05:19.120><c> now</c><00:05:19.360><c> we</c><00:05:19.600><c> want</c><00:05:19.759><c> to</c><00:05:19.919><c> go</c><00:05:20.240><c> through</c><00:05:20.720><c> every</c>

00:05:21.270 --> 00:05:21.280 align:start position:0%
and now we want to go through every
 

00:05:21.280 --> 00:05:22.629 align:start position:0%
and now we want to go through every
single<00:05:21.759><c> character</c>

00:05:22.629 --> 00:05:22.639 align:start position:0%
single character
 

00:05:22.639 --> 00:05:25.430 align:start position:0%
single character
in<00:05:22.880><c> each</c><00:05:23.199><c> string</c><00:05:24.080><c> and</c><00:05:24.320><c> we</c><00:05:24.479><c> want</c><00:05:24.639><c> to</c><00:05:24.880><c> count</c><00:05:25.280><c> how</c>

00:05:25.430 --> 00:05:25.440 align:start position:0%
in each string and we want to count how
 

00:05:25.440 --> 00:05:28.070 align:start position:0%
in each string and we want to count how
many<00:05:25.680><c> of</c><00:05:25.840><c> each</c><00:05:26.160><c> character</c><00:05:26.720><c> so</c><00:05:26.960><c> we</c><00:05:27.199><c> want</c><00:05:27.440><c> to</c><00:05:27.680><c> map</c>

00:05:28.070 --> 00:05:28.080 align:start position:0%
many of each character so we want to map
 

00:05:28.080 --> 00:05:31.430 align:start position:0%
many of each character so we want to map
in<00:05:28.240><c> this</c><00:05:28.479><c> case</c><00:05:28.960><c> a</c><00:05:29.520><c> to</c><00:05:29.840><c> index</c><00:05:30.479><c> 0</c>

00:05:31.430 --> 00:05:31.440 align:start position:0%
in this case a to index 0
 

00:05:31.440 --> 00:05:34.629 align:start position:0%
in this case a to index 0
and<00:05:31.520><c> we</c><00:05:31.680><c> want</c><00:05:31.840><c> to</c><00:05:32.000><c> map</c><00:05:32.400><c> z</c><00:05:32.880><c> to</c><00:05:33.199><c> index</c><00:05:33.600><c> 25</c><00:05:34.240><c> so</c><00:05:34.479><c> how</c>

00:05:34.629 --> 00:05:34.639 align:start position:0%
and we want to map z to index 25 so how
 

00:05:34.639 --> 00:05:36.310 align:start position:0%
and we want to map z to index 25 so how
can<00:05:34.800><c> we</c><00:05:35.039><c> do</c><00:05:35.199><c> that</c><00:05:35.440><c> well</c><00:05:35.600><c> we</c><00:05:35.840><c> can</c>

00:05:36.310 --> 00:05:36.320 align:start position:0%
can we do that well we can
 

00:05:36.320 --> 00:05:39.029 align:start position:0%
can we do that well we can
one<00:05:36.639><c> way</c><00:05:36.880><c> at</c><00:05:37.039><c> least</c><00:05:37.520><c> is</c><00:05:37.680><c> just</c><00:05:37.919><c> take</c><00:05:38.160><c> the</c><00:05:38.479><c> ascii</c>

00:05:39.029 --> 00:05:39.039 align:start position:0%
one way at least is just take the ascii
 

00:05:39.039 --> 00:05:41.189 align:start position:0%
one way at least is just take the ascii
value<00:05:39.520><c> of</c><00:05:39.680><c> the</c><00:05:39.840><c> current</c><00:05:40.240><c> character</c><00:05:40.639><c> we're</c><00:05:40.880><c> at</c>

00:05:41.189 --> 00:05:41.199 align:start position:0%
value of the current character we're at
 

00:05:41.199 --> 00:05:44.230 align:start position:0%
value of the current character we're at
c<00:05:41.759><c> and</c><00:05:41.840><c> then</c><00:05:42.160><c> subtract</c><00:05:43.280><c> the</c><00:05:43.520><c> ascii</c>

00:05:44.230 --> 00:05:44.240 align:start position:0%
c and then subtract the ascii
 

00:05:44.240 --> 00:05:47.510 align:start position:0%
c and then subtract the ascii
value<00:05:45.199><c> of</c><00:05:45.919><c> lowercase</c><00:05:46.800><c> character</c>

00:05:47.510 --> 00:05:47.520 align:start position:0%
value of lowercase character
 

00:05:47.520 --> 00:05:50.790 align:start position:0%
value of lowercase character
a<00:05:48.240><c> so</c><00:05:49.120><c> as</c><00:05:49.280><c> you</c><00:05:49.440><c> can</c><00:05:49.600><c> see</c><00:05:49.840><c> lowercase</c><00:05:50.479><c> a</c>

00:05:50.790 --> 00:05:50.800 align:start position:0%
a so as you can see lowercase a
 

00:05:50.800 --> 00:05:54.230 align:start position:0%
a so as you can see lowercase a
minus<00:05:51.199><c> lowercase</c><00:05:51.759><c> a</c><00:05:51.919><c> is</c><00:05:52.000><c> going</c><00:05:52.160><c> to</c><00:05:52.240><c> be</c><00:05:52.479><c> 0</c><00:05:53.440><c> z</c>

00:05:54.230 --> 00:05:54.240 align:start position:0%
minus lowercase a is going to be 0 z
 

00:05:54.240 --> 00:05:57.189 align:start position:0%
minus lowercase a is going to be 0 z
lowercase<00:05:54.880><c> z</c><00:05:55.280><c> minus</c><00:05:55.680><c> lowercase</c><00:05:56.479><c> a</c><00:05:56.960><c> is</c><00:05:57.120><c> going</c>

00:05:57.189 --> 00:05:57.199 align:start position:0%
lowercase z minus lowercase a is going
 

00:05:57.199 --> 00:05:59.110 align:start position:0%
lowercase z minus lowercase a is going
to<00:05:57.280><c> be</c><00:05:57.520><c> 25</c><00:05:58.319><c> so</c>

00:05:59.110 --> 00:05:59.120 align:start position:0%
to be 25 so
 

00:05:59.120 --> 00:06:01.510 align:start position:0%
to be 25 so
we<00:05:59.280><c> do</c><00:05:59.520><c> have</c><00:05:59.759><c> it</c><00:05:59.919><c> correctly</c><00:06:00.560><c> because</c><00:06:01.360><c> for</c>

00:06:01.510 --> 00:06:01.520 align:start position:0%
we do have it correctly because for
 

00:06:01.520 --> 00:06:02.629 align:start position:0%
we do have it correctly because for
example<00:06:01.840><c> let's</c><00:06:02.000><c> just</c><00:06:02.240><c> say</c>

00:06:02.629 --> 00:06:02.639 align:start position:0%
example let's just say
 

00:06:02.639 --> 00:06:05.749 align:start position:0%
example let's just say
a<00:06:03.039><c> is</c><00:06:03.199><c> ascii</c><00:06:03.600><c> value</c><00:06:04.560><c> 80</c><00:06:05.199><c> and</c><00:06:05.360><c> i</c><00:06:05.440><c> don't</c><00:06:05.520><c> know</c><00:06:05.680><c> if</c>

00:06:05.749 --> 00:06:05.759 align:start position:0%
a is ascii value 80 and i don't know if
 

00:06:05.759 --> 00:06:07.270 align:start position:0%
a is ascii value 80 and i don't know if
this<00:06:05.919><c> is</c><00:06:06.000><c> actually</c><00:06:06.319><c> correct</c><00:06:06.639><c> but</c><00:06:06.880><c> it's</c><00:06:06.960><c> just</c><00:06:07.199><c> a</c>

00:06:07.270 --> 00:06:07.280 align:start position:0%
this is actually correct but it's just a
 

00:06:07.280 --> 00:06:08.309 align:start position:0%
this is actually correct but it's just a
random<00:06:07.600><c> value</c><00:06:08.000><c> then</c>

00:06:08.309 --> 00:06:08.319 align:start position:0%
random value then
 

00:06:08.319 --> 00:06:11.830 align:start position:0%
random value then
b<00:06:08.639><c> is</c><00:06:08.800><c> going</c><00:06:08.960><c> to</c><00:06:09.039><c> be</c><00:06:09.199><c> ascii</c><00:06:09.600><c> value</c><00:06:10.160><c> 81</c><00:06:11.280><c> and</c><00:06:11.600><c> so</c>

00:06:11.830 --> 00:06:11.840 align:start position:0%
b is going to be ascii value 81 and so
 

00:06:11.840 --> 00:06:12.629 align:start position:0%
b is going to be ascii value 81 and so
on

00:06:12.629 --> 00:06:12.639 align:start position:0%
on
 

00:06:12.639 --> 00:06:15.909 align:start position:0%
on
but<00:06:12.880><c> if</c><00:06:13.039><c> we</c><00:06:13.120><c> want</c><00:06:13.280><c> to</c><00:06:13.360><c> map</c><00:06:13.759><c> this</c><00:06:14.400><c> to</c><00:06:14.800><c> zero</c>

00:06:15.909 --> 00:06:15.919 align:start position:0%
but if we want to map this to zero
 

00:06:15.919 --> 00:06:18.790 align:start position:0%
but if we want to map this to zero
we<00:06:16.080><c> know</c><00:06:16.479><c> one</c><00:06:16.720><c> way</c><00:06:16.960><c> to</c><00:06:17.120><c> do</c><00:06:17.360><c> that</c><00:06:17.600><c> is</c><00:06:17.840><c> take</c><00:06:18.319><c> 80</c>

00:06:18.790 --> 00:06:18.800 align:start position:0%
we know one way to do that is take 80
 

00:06:18.800 --> 00:06:19.990 align:start position:0%
we know one way to do that is take 80
minus<00:06:19.360><c> 80.</c>

00:06:19.990 --> 00:06:20.000 align:start position:0%
minus 80.
 

00:06:20.000 --> 00:06:23.430 align:start position:0%
minus 80.
if<00:06:20.160><c> we</c><00:06:20.240><c> want</c><00:06:20.400><c> to</c><00:06:20.560><c> map</c><00:06:20.960><c> lowercase</c><00:06:21.759><c> b</c><00:06:22.319><c> to</c><00:06:22.639><c> 1</c>

00:06:23.430 --> 00:06:23.440 align:start position:0%
if we want to map lowercase b to 1
 

00:06:23.440 --> 00:06:27.029 align:start position:0%
if we want to map lowercase b to 1
we<00:06:23.600><c> can</c><00:06:23.840><c> take</c><00:06:24.560><c> 81</c><00:06:25.520><c> minus</c><00:06:26.160><c> 80</c><00:06:26.639><c> right</c>

00:06:27.029 --> 00:06:27.039 align:start position:0%
we can take 81 minus 80 right
 

00:06:27.039 --> 00:06:29.189 align:start position:0%
we can take 81 minus 80 right
so<00:06:27.199><c> that's</c><00:06:27.520><c> basically</c><00:06:28.000><c> what</c><00:06:28.160><c> i'm</c><00:06:28.319><c> doing</c><00:06:28.560><c> here</c>

00:06:29.189 --> 00:06:29.199 align:start position:0%
so that's basically what i'm doing here
 

00:06:29.199 --> 00:06:30.950 align:start position:0%
so that's basically what i'm doing here
in<00:06:29.360><c> case</c><00:06:29.680><c> you</c><00:06:29.840><c> haven't</c><00:06:30.160><c> seen</c><00:06:30.400><c> something</c><00:06:30.720><c> like</c>

00:06:30.950 --> 00:06:30.960 align:start position:0%
in case you haven't seen something like
 

00:06:30.960 --> 00:06:31.749 align:start position:0%
in case you haven't seen something like
this<00:06:31.199><c> before</c>

00:06:31.749 --> 00:06:31.759 align:start position:0%
this before
 

00:06:31.759 --> 00:06:33.590 align:start position:0%
this before
and<00:06:32.000><c> so</c><00:06:32.400><c> we're</c><00:06:32.560><c> just</c><00:06:32.720><c> going</c><00:06:32.880><c> to</c><00:06:33.039><c> increment</c>

00:06:33.590 --> 00:06:33.600 align:start position:0%
and so we're just going to increment
 

00:06:33.600 --> 00:06:34.950 align:start position:0%
and so we're just going to increment
this<00:06:34.000><c> by</c><00:06:34.400><c> one</c>

00:06:34.950 --> 00:06:34.960 align:start position:0%
this by one
 

00:06:34.960 --> 00:06:36.390 align:start position:0%
this by one
we're<00:06:35.120><c> just</c><00:06:35.360><c> counting</c><00:06:35.680><c> how</c><00:06:35.840><c> many</c><00:06:36.080><c> of</c><00:06:36.240><c> each</c>

00:06:36.390 --> 00:06:36.400 align:start position:0%
we're just counting how many of each
 

00:06:36.400 --> 00:06:38.150 align:start position:0%
we're just counting how many of each
character<00:06:36.880><c> we</c><00:06:37.039><c> have</c><00:06:37.520><c> and</c><00:06:37.759><c> now</c>

00:06:38.150 --> 00:06:38.160 align:start position:0%
character we have and now
 

00:06:38.160 --> 00:06:41.830 align:start position:0%
character we have and now
in<00:06:38.639><c> our</c><00:06:39.199><c> result</c><00:06:40.400><c> we</c><00:06:40.880><c> want</c><00:06:41.199><c> to</c>

00:06:41.830 --> 00:06:41.840 align:start position:0%
in our result we want to
 

00:06:41.840 --> 00:06:44.870 align:start position:0%
in our result we want to
add<00:06:42.560><c> so</c><00:06:42.800><c> for</c><00:06:43.120><c> this</c><00:06:43.360><c> particular</c><00:06:44.319><c> count</c>

00:06:44.870 --> 00:06:44.880 align:start position:0%
add so for this particular count
 

00:06:44.880 --> 00:06:49.189 align:start position:0%
add so for this particular count
we<00:06:45.120><c> want</c><00:06:45.440><c> to</c><00:06:45.919><c> add</c><00:06:46.639><c> we</c><00:06:46.800><c> want</c><00:06:46.960><c> to</c><00:06:47.199><c> append</c>

00:06:49.189 --> 00:06:49.199 align:start position:0%
we want to add we want to append
 

00:06:49.199 --> 00:06:52.390 align:start position:0%
we want to add we want to append
we're<00:06:49.360><c> going</c><00:06:49.440><c> to</c><00:06:49.680><c> append</c><00:06:50.560><c> this</c><00:06:51.120><c> string</c><00:06:51.840><c> s</c>

00:06:52.390 --> 00:06:52.400 align:start position:0%
we're going to append this string s
 

00:06:52.400 --> 00:06:54.469 align:start position:0%
we're going to append this string s
so<00:06:52.560><c> we</c><00:06:52.720><c> want</c><00:06:52.880><c> to</c><00:06:53.039><c> group</c><00:06:53.520><c> all</c><00:06:53.759><c> anagrams</c><00:06:54.319><c> with</c>

00:06:54.469 --> 00:06:54.479 align:start position:0%
so we want to group all anagrams with
 

00:06:54.479 --> 00:06:55.430 align:start position:0%
so we want to group all anagrams with
this<00:06:54.639><c> particular</c>

00:06:55.430 --> 00:06:55.440 align:start position:0%
this particular
 

00:06:55.440 --> 00:06:58.550 align:start position:0%
this particular
count<00:06:55.840><c> together</c><00:06:57.039><c> now</c><00:06:57.360><c> what</c><00:06:57.520><c> if</c><00:06:58.000><c> this</c><00:06:58.240><c> count</c>

00:06:58.550 --> 00:06:58.560 align:start position:0%
count together now what if this count
 

00:06:58.560 --> 00:06:59.430 align:start position:0%
count together now what if this count
does<00:06:58.720><c> not</c><00:06:58.960><c> exist</c>

00:06:59.430 --> 00:06:59.440 align:start position:0%
does not exist
 

00:06:59.440 --> 00:07:01.110 align:start position:0%
does not exist
yet<00:06:59.680><c> well</c><00:06:59.919><c> i'm</c><00:07:00.080><c> actually</c><00:07:00.319><c> going</c><00:07:00.400><c> to</c><00:07:00.639><c> change</c>

00:07:01.110 --> 00:07:01.120 align:start position:0%
yet well i'm actually going to change
 

00:07:01.120 --> 00:07:02.469 align:start position:0%
yet well i'm actually going to change
this<00:07:01.360><c> dictionary</c><00:07:02.080><c> to</c>

00:07:02.469 --> 00:07:02.479 align:start position:0%
this dictionary to
 

00:07:02.479 --> 00:07:05.350 align:start position:0%
this dictionary to
a<00:07:02.800><c> default</c><00:07:03.840><c> dictionary</c><00:07:04.639><c> or</c><00:07:04.880><c> a</c><00:07:04.960><c> default</c>

00:07:05.350 --> 00:07:05.360 align:start position:0%
a default dictionary or a default
 

00:07:05.360 --> 00:07:06.150 align:start position:0%
a default dictionary or a default
hashmap

00:07:06.150 --> 00:07:06.160 align:start position:0%
hashmap
 

00:07:06.160 --> 00:07:08.309 align:start position:0%
hashmap
where<00:07:06.319><c> the</c><00:07:06.400><c> default</c><00:07:06.800><c> value</c><00:07:07.280><c> is</c><00:07:07.360><c> a</c><00:07:07.520><c> list</c><00:07:08.000><c> so</c><00:07:08.240><c> we</c>

00:07:08.309 --> 00:07:08.319 align:start position:0%
where the default value is a list so we
 

00:07:08.319 --> 00:07:10.629 align:start position:0%
where the default value is a list so we
don't<00:07:08.560><c> have</c><00:07:08.639><c> to</c><00:07:08.800><c> deal</c><00:07:09.039><c> with</c><00:07:09.280><c> one</c><00:07:09.599><c> edge</c><00:07:09.919><c> case</c>

00:07:10.629 --> 00:07:10.639 align:start position:0%
don't have to deal with one edge case
 

00:07:10.639 --> 00:07:14.150 align:start position:0%
don't have to deal with one edge case
and<00:07:10.880><c> also</c><00:07:11.840><c> right</c><00:07:12.080><c> now</c><00:07:12.400><c> our</c><00:07:12.720><c> count</c><00:07:13.120><c> is</c><00:07:13.280><c> a</c><00:07:13.599><c> list</c>

00:07:14.150 --> 00:07:14.160 align:start position:0%
and also right now our count is a list
 

00:07:14.160 --> 00:07:17.189 align:start position:0%
and also right now our count is a list
but<00:07:14.400><c> we</c><00:07:14.639><c> know</c><00:07:14.960><c> in</c><00:07:15.199><c> python</c><00:07:16.000><c> lists</c><00:07:16.479><c> cannot</c><00:07:16.880><c> be</c>

00:07:17.189 --> 00:07:17.199 align:start position:0%
but we know in python lists cannot be
 

00:07:17.199 --> 00:07:18.950 align:start position:0%
but we know in python lists cannot be
keys<00:07:17.840><c> so</c><00:07:18.080><c> we're</c><00:07:18.240><c> actually</c><00:07:18.479><c> just</c><00:07:18.639><c> going</c><00:07:18.800><c> to</c>

00:07:18.950 --> 00:07:18.960 align:start position:0%
keys so we're actually just going to
 

00:07:18.960 --> 00:07:21.029 align:start position:0%
keys so we're actually just going to
change<00:07:19.280><c> this</c><00:07:19.520><c> to</c><00:07:19.680><c> a</c><00:07:19.919><c> tuple</c>

00:07:21.029 --> 00:07:21.039 align:start position:0%
change this to a tuple
 

00:07:21.039 --> 00:07:24.150 align:start position:0%
change this to a tuple
because<00:07:21.599><c> tuples</c><00:07:22.400><c> are</c><00:07:22.880><c> non-mutable</c>

00:07:24.150 --> 00:07:24.160 align:start position:0%
because tuples are non-mutable
 

00:07:24.160 --> 00:07:25.990 align:start position:0%
because tuples are non-mutable
but<00:07:24.479><c> mainly</c><00:07:24.880><c> this</c><00:07:25.039><c> is</c><00:07:25.199><c> python</c><00:07:25.680><c> stuff</c><00:07:25.919><c> you</c>

00:07:25.990 --> 00:07:26.000 align:start position:0%
but mainly this is python stuff you
 

00:07:26.000 --> 00:07:27.510 align:start position:0%
but mainly this is python stuff you
might<00:07:26.160><c> not</c><00:07:26.319><c> have</c><00:07:26.479><c> to</c><00:07:26.560><c> worry</c><00:07:26.800><c> about</c><00:07:27.120><c> this</c>

00:07:27.510 --> 00:07:27.520 align:start position:0%
might not have to worry about this
 

00:07:27.520 --> 00:07:29.749 align:start position:0%
might not have to worry about this
in<00:07:27.680><c> other</c><00:07:28.000><c> languages</c><00:07:28.960><c> and</c><00:07:29.120><c> so</c><00:07:29.280><c> that's</c>

00:07:29.749 --> 00:07:29.759 align:start position:0%
in other languages and so that's
 

00:07:29.759 --> 00:07:31.029 align:start position:0%
in other languages and so that's
actually<00:07:30.400><c> it</c>

00:07:31.029 --> 00:07:31.039 align:start position:0%
actually it
 

00:07:31.039 --> 00:07:34.629 align:start position:0%
actually it
so<00:07:31.360><c> now</c><00:07:32.319><c> in</c><00:07:32.560><c> our</c><00:07:32.880><c> dictionary</c><00:07:33.520><c> we</c><00:07:33.759><c> have</c><00:07:34.080><c> grouped</c>

00:07:34.629 --> 00:07:34.639 align:start position:0%
so now in our dictionary we have grouped
 

00:07:34.639 --> 00:07:37.589 align:start position:0%
so now in our dictionary we have grouped
the<00:07:35.280><c> anagrams</c><00:07:35.919><c> together</c><00:07:36.400><c> so</c><00:07:36.639><c> we</c><00:07:36.880><c> just</c><00:07:37.440><c> can</c>

00:07:37.589 --> 00:07:37.599 align:start position:0%
the anagrams together so we just can
 

00:07:37.599 --> 00:07:38.589 align:start position:0%
the anagrams together so we just can
take

00:07:38.589 --> 00:07:38.599 align:start position:0%
take
 

00:07:38.599 --> 00:07:40.870 align:start position:0%
take
result.values<00:07:39.759><c> we</c><00:07:39.919><c> don't</c><00:07:40.080><c> want</c><00:07:40.319><c> the</c><00:07:40.560><c> keys</c>

00:07:40.870 --> 00:07:40.880 align:start position:0%
result.values we don't want the keys
 

00:07:40.880 --> 00:07:42.790 align:start position:0%
result.values we don't want the keys
anymore<00:07:41.199><c> we</c><00:07:41.440><c> just</c><00:07:41.759><c> want</c><00:07:41.919><c> to</c><00:07:42.000><c> return</c>

00:07:42.790 --> 00:07:42.800 align:start position:0%
anymore we just want to return
 

00:07:42.800 --> 00:07:45.029 align:start position:0%
anymore we just want to return
the<00:07:43.039><c> values</c><00:07:43.520><c> the</c><00:07:43.680><c> anagrams</c><00:07:44.319><c> grouped</c><00:07:44.639><c> together</c>

00:07:45.029 --> 00:07:45.039 align:start position:0%
the values the anagrams grouped together
 

00:07:45.039 --> 00:07:45.990 align:start position:0%
the values the anagrams grouped together
so<00:07:45.360><c> we</c><00:07:45.520><c> can</c>

00:07:45.990 --> 00:07:46.000 align:start position:0%
so we can
 

00:07:46.000 --> 00:07:48.629 align:start position:0%
so we can
return<00:07:46.400><c> that</c><00:07:46.800><c> and</c><00:07:47.039><c> we're</c><00:07:47.360><c> actually</c><00:07:47.919><c> finished</c>

00:07:48.629 --> 00:07:48.639 align:start position:0%
return that and we're actually finished
 

00:07:48.639 --> 00:07:49.189 align:start position:0%
return that and we're actually finished
so<00:07:48.879><c> this</c>

00:07:49.189 --> 00:07:49.199 align:start position:0%
so this
 

00:07:49.199 --> 00:07:52.710 align:start position:0%
so this
is<00:07:49.360><c> the</c><00:07:49.680><c> optimal</c><00:07:50.560><c> m</c><00:07:51.039><c> times</c><00:07:51.599><c> n</c><00:07:51.840><c> solution</c>

00:07:52.710 --> 00:07:52.720 align:start position:0%
is the optimal m times n solution
 

00:07:52.720 --> 00:07:55.510 align:start position:0%
is the optimal m times n solution
where<00:07:53.199><c> m</c><00:07:53.680><c> is</c><00:07:54.240><c> the</c><00:07:54.479><c> number</c><00:07:54.800><c> of</c><00:07:54.960><c> strings</c><00:07:55.280><c> we're</c>

00:07:55.510 --> 00:07:55.520 align:start position:0%
where m is the number of strings we're
 

00:07:55.520 --> 00:07:56.309 align:start position:0%
where m is the number of strings we're
given<00:07:55.919><c> and</c>

00:07:56.309 --> 00:07:56.319 align:start position:0%
given and
 

00:07:56.319 --> 00:07:59.510 align:start position:0%
given and
n<00:07:56.960><c> is</c><00:07:57.280><c> the</c><00:07:57.520><c> average</c><00:07:58.160><c> length</c><00:07:58.720><c> of</c><00:07:58.879><c> each</c><00:07:59.120><c> string</c>

00:07:59.510 --> 00:07:59.520 align:start position:0%
n is the average length of each string
 

00:07:59.520 --> 00:08:01.189 align:start position:0%
n is the average length of each string
how<00:07:59.680><c> many</c><00:07:59.919><c> characters</c><00:08:00.560><c> are</c>

00:08:01.189 --> 00:08:01.199 align:start position:0%
how many characters are
 

00:08:01.199 --> 00:08:03.189 align:start position:0%
how many characters are
in<00:08:01.360><c> each</c><00:08:01.680><c> string</c><00:08:02.319><c> so</c><00:08:02.560><c> i</c><00:08:02.639><c> hope</c><00:08:02.879><c> this</c><00:08:03.039><c> was</c>

00:08:03.189 --> 00:08:03.199 align:start position:0%
in each string so i hope this was
 

00:08:03.199 --> 00:08:05.189 align:start position:0%
in each string so i hope this was
helpful<00:08:03.840><c> if</c><00:08:04.080><c> it</c><00:08:04.160><c> was</c><00:08:04.560><c> please</c><00:08:04.879><c> like</c><00:08:05.120><c> and</c>

00:08:05.189 --> 00:08:05.199 align:start position:0%
helpful if it was please like and
 

00:08:05.199 --> 00:08:07.510 align:start position:0%
helpful if it was please like and
subscribe<00:08:05.759><c> it</c><00:08:05.919><c> supports</c><00:08:06.319><c> the</c><00:08:06.479><c> channel</c><00:08:06.879><c> a</c><00:08:07.120><c> lot</c>

00:08:07.510 --> 00:08:07.520 align:start position:0%
subscribe it supports the channel a lot
 

00:08:07.520 --> 00:08:12.960 align:start position:0%
subscribe it supports the channel a lot
and<00:08:07.680><c> i'll</c><00:08:07.840><c> hopefully</c><00:08:08.400><c> see</c><00:08:08.639><c> you</c><00:08:08.800><c> pretty</c><00:08:09.960><c> soon</c>

