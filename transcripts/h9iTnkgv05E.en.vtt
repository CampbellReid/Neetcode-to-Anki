WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.750 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.120><c> back</c><00:00:01.360><c> and</c><00:00:01.520><c> let's</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.760 --> 00:00:03.669 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.920><c> some</c><00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.639><c> code</c><00:00:02.879><c> today</c><00:00:03.120><c> so</c><00:00:03.360><c> today</c>

00:00:03.669 --> 00:00:03.679 align:start position:0%
write some more neat code today so today
 

00:00:03.679 --> 00:00:06.070 align:start position:0%
write some more neat code today so today
let's<00:00:04.000><c> solve</c><00:00:04.400><c> word</c><00:00:04.799><c> ladder</c><00:00:05.200><c> this</c><00:00:05.359><c> is</c><00:00:05.520><c> a</c><00:00:05.680><c> hard</c>

00:00:06.070 --> 00:00:06.080 align:start position:0%
let's solve word ladder this is a hard
 

00:00:06.080 --> 00:00:07.590 align:start position:0%
let's solve word ladder this is a hard
problem<00:00:06.399><c> but</c><00:00:06.560><c> i</c><00:00:06.640><c> don't</c><00:00:06.799><c> think</c><00:00:06.960><c> it's</c><00:00:07.200><c> super</c>

00:00:07.590 --> 00:00:07.600 align:start position:0%
problem but i don't think it's super
 

00:00:07.600 --> 00:00:09.589 align:start position:0%
problem but i don't think it's super
difficult<00:00:08.240><c> there's</c><00:00:08.400><c> just</c><00:00:08.720><c> one</c><00:00:09.040><c> little</c><00:00:09.280><c> thing</c>

00:00:09.589 --> 00:00:09.599 align:start position:0%
difficult there's just one little thing
 

00:00:09.599 --> 00:00:11.350 align:start position:0%
difficult there's just one little thing
that<00:00:09.760><c> kind</c><00:00:10.000><c> of</c><00:00:10.160><c> makes</c><00:00:10.400><c> it</c><00:00:10.559><c> really</c><00:00:10.800><c> annoying</c><00:00:11.280><c> to</c>

00:00:11.350 --> 00:00:11.360 align:start position:0%
that kind of makes it really annoying to
 

00:00:11.360 --> 00:00:13.589 align:start position:0%
that kind of makes it really annoying to
get<00:00:11.519><c> this</c><00:00:11.679><c> to</c><00:00:11.920><c> pass</c><00:00:12.320><c> on</c><00:00:12.480><c> leak</c><00:00:12.799><c> code</c><00:00:13.280><c> but</c><00:00:13.440><c> the</c>

00:00:13.589 --> 00:00:13.599 align:start position:0%
get this to pass on leak code but the
 

00:00:13.599 --> 00:00:16.310 align:start position:0%
get this to pass on leak code but the
idea<00:00:14.080><c> is</c><00:00:14.400><c> we're</c><00:00:14.639><c> given</c><00:00:14.960><c> a</c><00:00:15.120><c> beginning</c><00:00:15.679><c> word</c><00:00:16.080><c> and</c>

00:00:16.310 --> 00:00:16.320 align:start position:0%
idea is we're given a beginning word and
 

00:00:16.320 --> 00:00:19.429 align:start position:0%
idea is we're given a beginning word and
we're<00:00:16.560><c> given</c><00:00:16.960><c> an</c><00:00:17.199><c> end</c><00:00:17.520><c> word</c><00:00:18.240><c> and</c><00:00:18.480><c> we're</c><00:00:18.800><c> given</c>

00:00:19.429 --> 00:00:19.439 align:start position:0%
we're given an end word and we're given
 

00:00:19.439 --> 00:00:23.029 align:start position:0%
we're given an end word and we're given
a<00:00:19.760><c> list</c><00:00:20.240><c> of</c><00:00:20.400><c> words</c><00:00:21.279><c> we</c><00:00:21.680><c> want</c><00:00:21.920><c> to</c><00:00:22.080><c> create</c><00:00:22.720><c> a</c>

00:00:23.029 --> 00:00:23.039 align:start position:0%
a list of words we want to create a
 

00:00:23.039 --> 00:00:26.390 align:start position:0%
a list of words we want to create a
sequence<00:00:23.840><c> from</c><00:00:24.160><c> this</c><00:00:24.480><c> beginning</c><00:00:25.039><c> word</c><00:00:25.680><c> to</c><00:00:26.000><c> the</c>

00:00:26.390 --> 00:00:26.400 align:start position:0%
sequence from this beginning word to the
 

00:00:26.400 --> 00:00:29.429 align:start position:0%
sequence from this beginning word to the
end<00:00:26.720><c> word</c><00:00:27.519><c> and</c><00:00:27.760><c> the</c><00:00:28.000><c> end</c><00:00:28.240><c> word</c><00:00:28.640><c> is</c><00:00:28.800><c> definitely</c>

00:00:29.429 --> 00:00:29.439 align:start position:0%
end word and the end word is definitely
 

00:00:29.439 --> 00:00:31.669 align:start position:0%
end word and the end word is definitely
going<00:00:29.679><c> to</c><00:00:29.920><c> be</c><00:00:30.480><c> need</c><00:00:30.720><c> to</c><00:00:30.880><c> be</c><00:00:31.039><c> a</c><00:00:31.119><c> part</c><00:00:31.359><c> of</c><00:00:31.519><c> our</c>

00:00:31.669 --> 00:00:31.679 align:start position:0%
going to be need to be a part of our
 

00:00:31.679 --> 00:00:33.350 align:start position:0%
going to be need to be a part of our
word<00:00:32.000><c> list</c><00:00:32.320><c> but</c><00:00:32.480><c> the</c><00:00:32.640><c> beginning</c><00:00:33.040><c> word</c>

00:00:33.350 --> 00:00:33.360 align:start position:0%
word list but the beginning word
 

00:00:33.360 --> 00:00:35.750 align:start position:0%
word list but the beginning word
actually<00:00:33.680><c> might</c><00:00:34.079><c> not</c><00:00:34.320><c> be</c><00:00:34.559><c> a</c><00:00:34.719><c> part</c><00:00:35.040><c> of</c><00:00:35.120><c> the</c><00:00:35.360><c> word</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
actually might not be a part of the word
 

00:00:35.760 --> 00:00:38.069 align:start position:0%
actually might not be a part of the word
list<00:00:36.559><c> and</c><00:00:36.719><c> so</c><00:00:36.880><c> we</c><00:00:37.040><c> want</c><00:00:37.200><c> to</c><00:00:37.280><c> create</c><00:00:37.600><c> a</c><00:00:37.680><c> sequence</c>

00:00:38.069 --> 00:00:38.079 align:start position:0%
list and so we want to create a sequence
 

00:00:38.079 --> 00:00:39.590 align:start position:0%
list and so we want to create a sequence
from<00:00:38.320><c> the</c><00:00:38.399><c> beginning</c><00:00:38.719><c> word</c><00:00:38.960><c> to</c><00:00:39.120><c> the</c><00:00:39.200><c> end</c><00:00:39.360><c> word</c>

00:00:39.590 --> 00:00:39.600 align:start position:0%
from the beginning word to the end word
 

00:00:39.600 --> 00:00:41.350 align:start position:0%
from the beginning word to the end word
that<00:00:39.760><c> sounds</c><00:00:40.160><c> pretty</c><00:00:40.399><c> easy</c><00:00:40.640><c> but</c><00:00:40.800><c> there's</c><00:00:41.040><c> one</c>

00:00:41.350 --> 00:00:41.360 align:start position:0%
that sounds pretty easy but there's one
 

00:00:41.360 --> 00:00:44.389 align:start position:0%
that sounds pretty easy but there's one
restriction<00:00:42.559><c> that</c><00:00:42.800><c> we</c><00:00:43.040><c> have</c><00:00:43.280><c> to</c><00:00:43.520><c> follow</c><00:00:44.160><c> and</c>

00:00:44.389 --> 00:00:44.399 align:start position:0%
restriction that we have to follow and
 

00:00:44.399 --> 00:00:46.790 align:start position:0%
restriction that we have to follow and
that<00:00:44.640><c> restriction</c><00:00:45.280><c> mainly</c><00:00:45.760><c> is</c><00:00:46.000><c> that</c><00:00:46.320><c> every</c>

00:00:46.790 --> 00:00:46.800 align:start position:0%
that restriction mainly is that every
 

00:00:46.800 --> 00:00:50.310 align:start position:0%
that restriction mainly is that every
adjacent<00:00:47.600><c> pair</c><00:00:47.920><c> of</c><00:00:48.239><c> words</c><00:00:48.879><c> in</c><00:00:49.200><c> that</c><00:00:49.600><c> sequence</c>

00:00:50.310 --> 00:00:50.320 align:start position:0%
adjacent pair of words in that sequence
 

00:00:50.320 --> 00:00:53.670 align:start position:0%
adjacent pair of words in that sequence
can<00:00:50.719><c> only</c><00:00:51.280><c> differ</c><00:00:52.000><c> by</c><00:00:52.320><c> a</c><00:00:52.719><c> single</c><00:00:53.120><c> character</c>

00:00:53.670 --> 00:00:53.680 align:start position:0%
can only differ by a single character
 

00:00:53.680 --> 00:00:55.990 align:start position:0%
can only differ by a single character
exactly<00:00:54.559><c> one</c><00:00:54.800><c> character</c><00:00:55.199><c> they</c><00:00:55.440><c> have</c><00:00:55.760><c> to</c>

00:00:55.990 --> 00:00:56.000 align:start position:0%
exactly one character they have to
 

00:00:56.000 --> 00:00:59.349 align:start position:0%
exactly one character they have to
differ<00:00:56.559><c> by</c><00:00:56.800><c> exactly</c><00:00:57.600><c> one</c><00:00:58.000><c> character</c><00:00:58.879><c> and</c><00:00:59.120><c> so</c>

00:00:59.349 --> 00:00:59.359 align:start position:0%
differ by exactly one character and so
 

00:00:59.359 --> 00:01:01.830 align:start position:0%
differ by exactly one character and so
we<00:00:59.600><c> want</c><00:00:59.840><c> to</c><00:01:00.160><c> find</c><00:01:00.559><c> a</c><00:01:00.879><c> sequence</c><00:01:01.440><c> from</c><00:01:01.680><c> that</c>

00:01:01.830 --> 00:01:01.840 align:start position:0%
we want to find a sequence from that
 

00:01:01.840 --> 00:01:03.830 align:start position:0%
we want to find a sequence from that
beginning<00:01:02.239><c> word</c><00:01:02.480><c> to</c><00:01:02.640><c> the</c><00:01:02.879><c> end</c><00:01:03.120><c> word</c><00:01:03.600><c> where</c>

00:01:03.830 --> 00:01:03.840 align:start position:0%
beginning word to the end word where
 

00:01:03.840 --> 00:01:06.310 align:start position:0%
beginning word to the end word where
every<00:01:04.159><c> word</c><00:01:04.559><c> in</c><00:01:04.720><c> between</c><00:01:05.360><c> is</c><00:01:05.519><c> a</c><00:01:05.680><c> part</c><00:01:06.000><c> of</c><00:01:06.080><c> the</c>

00:01:06.310 --> 00:01:06.320 align:start position:0%
every word in between is a part of the
 

00:01:06.320 --> 00:01:07.910 align:start position:0%
every word in between is a part of the
word<00:01:06.640><c> list</c><00:01:06.880><c> and</c><00:01:06.960><c> we</c><00:01:07.119><c> want</c><00:01:07.280><c> to</c><00:01:07.360><c> return</c><00:01:07.680><c> the</c>

00:01:07.910 --> 00:01:07.920 align:start position:0%
word list and we want to return the
 

00:01:07.920 --> 00:01:10.469 align:start position:0%
word list and we want to return the
shortest<00:01:08.400><c> sequence</c><00:01:09.200><c> so</c><00:01:09.760><c> the</c><00:01:09.920><c> sequence</c><00:01:10.320><c> will</c>

00:01:10.469 --> 00:01:10.479 align:start position:0%
shortest sequence so the sequence will
 

00:01:10.479 --> 00:01:12.230 align:start position:0%
shortest sequence so the sequence will
basically<00:01:10.880><c> be</c><00:01:11.040><c> the</c><00:01:11.200><c> number</c><00:01:11.520><c> of</c><00:01:11.600><c> words</c><00:01:11.920><c> so</c><00:01:12.080><c> for</c>

00:01:12.230 --> 00:01:12.240 align:start position:0%
basically be the number of words so for
 

00:01:12.240 --> 00:01:14.710 align:start position:0%
basically be the number of words so for
example<00:01:12.799><c> in</c><00:01:13.360><c> uh</c><00:01:13.600><c> this</c><00:01:13.760><c> example</c><00:01:14.240><c> down</c><00:01:14.400><c> here</c><00:01:14.560><c> we</c>

00:01:14.710 --> 00:01:14.720 align:start position:0%
example in uh this example down here we
 

00:01:14.720 --> 00:01:16.469 align:start position:0%
example in uh this example down here we
can<00:01:14.799><c> see</c><00:01:14.960><c> that</c><00:01:15.360><c> there's</c><00:01:15.600><c> a</c><00:01:15.680><c> sequence</c><00:01:16.080><c> from</c><00:01:16.240><c> the</c>

00:01:16.469 --> 00:01:16.479 align:start position:0%
can see that there's a sequence from the
 

00:01:16.479 --> 00:01:18.710 align:start position:0%
can see that there's a sequence from the
starting<00:01:16.880><c> word</c><00:01:17.280><c> hit</c><00:01:17.759><c> and</c><00:01:17.920><c> notice</c><00:01:18.320><c> how</c><00:01:18.479><c> this</c><00:01:18.640><c> is</c>

00:01:18.710 --> 00:01:18.720 align:start position:0%
starting word hit and notice how this is
 

00:01:18.720 --> 00:01:20.230 align:start position:0%
starting word hit and notice how this is
the<00:01:18.799><c> beginning</c><00:01:19.200><c> word</c><00:01:19.439><c> so</c><00:01:19.600><c> it</c><00:01:19.680><c> doesn't</c><00:01:19.920><c> have</c><00:01:20.080><c> to</c>

00:01:20.230 --> 00:01:20.240 align:start position:0%
the beginning word so it doesn't have to
 

00:01:20.240 --> 00:01:22.870 align:start position:0%
the beginning word so it doesn't have to
be<00:01:20.400><c> a</c><00:01:20.479><c> part</c><00:01:20.799><c> of</c><00:01:20.960><c> our</c><00:01:21.200><c> list</c><00:01:21.439><c> of</c><00:01:21.600><c> words</c><00:01:22.080><c> but</c><00:01:22.400><c> every</c>

00:01:22.870 --> 00:01:22.880 align:start position:0%
be a part of our list of words but every
 

00:01:22.880 --> 00:01:25.429 align:start position:0%
be a part of our list of words but every
other<00:01:23.119><c> word</c><00:01:23.840><c> in</c><00:01:23.920><c> the</c><00:01:24.159><c> sequence</c><00:01:24.799><c> does</c><00:01:25.119><c> have</c><00:01:25.360><c> to</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
other word in the sequence does have to
 

00:01:25.439 --> 00:01:28.230 align:start position:0%
other word in the sequence does have to
be<00:01:25.759><c> a</c><00:01:25.920><c> part</c><00:01:26.240><c> of</c><00:01:26.479><c> the</c><00:01:26.640><c> list</c><00:01:26.960><c> of</c><00:01:27.119><c> words</c><00:01:27.759><c> and</c><00:01:27.920><c> that</c>

00:01:28.230 --> 00:01:28.240 align:start position:0%
be a part of the list of words and that
 

00:01:28.240 --> 00:01:30.950 align:start position:0%
be a part of the list of words and that
includes<00:01:28.720><c> the</c><00:01:29.040><c> end</c><00:01:29.200><c> word</c><00:01:29.520><c> so</c><00:01:29.840><c> cog</c><00:01:30.560><c> does</c><00:01:30.799><c> have</c>

00:01:30.950 --> 00:01:30.960 align:start position:0%
includes the end word so cog does have
 

00:01:30.960 --> 00:01:33.590 align:start position:0%
includes the end word so cog does have
to<00:01:31.119><c> be</c><00:01:31.360><c> a</c><00:01:31.520><c> part</c><00:01:31.840><c> of</c><00:01:32.000><c> our</c><00:01:32.159><c> list</c><00:01:32.400><c> of</c><00:01:32.560><c> words</c><00:01:33.200><c> and</c><00:01:33.360><c> so</c>

00:01:33.590 --> 00:01:33.600 align:start position:0%
to be a part of our list of words and so
 

00:01:33.600 --> 00:01:35.670 align:start position:0%
to be a part of our list of words and so
in<00:01:33.680><c> this</c><00:01:33.920><c> example</c><00:01:34.320><c> the</c><00:01:34.479><c> shortest</c><00:01:34.880><c> sequence</c><00:01:35.439><c> is</c>

00:01:35.670 --> 00:01:35.680 align:start position:0%
in this example the shortest sequence is
 

00:01:35.680 --> 00:01:37.990 align:start position:0%
in this example the shortest sequence is
of<00:01:35.840><c> length</c><00:01:36.320><c> five</c><00:01:36.640><c> because</c><00:01:36.880><c> it</c><00:01:36.960><c> has</c><00:01:37.360><c> five</c>

00:01:37.990 --> 00:01:38.000 align:start position:0%
of length five because it has five
 

00:01:38.000 --> 00:01:40.870 align:start position:0%
of length five because it has five
different<00:01:38.479><c> words</c><00:01:39.040><c> in</c><00:01:39.200><c> it</c><00:01:39.680><c> now</c><00:01:40.000><c> the</c><00:01:40.240><c> convenient</c>

00:01:40.870 --> 00:01:40.880 align:start position:0%
different words in it now the convenient
 

00:01:40.880 --> 00:01:43.510 align:start position:0%
different words in it now the convenient
thing<00:01:41.119><c> for</c><00:01:41.360><c> us</c><00:01:41.600><c> is</c><00:01:41.680><c> that</c><00:01:42.079><c> every</c><00:01:42.479><c> single</c><00:01:42.960><c> word</c>

00:01:43.510 --> 00:01:43.520 align:start position:0%
thing for us is that every single word
 

00:01:43.520 --> 00:01:45.590 align:start position:0%
thing for us is that every single word
including<00:01:43.920><c> the</c><00:01:44.079><c> beginning</c><00:01:44.720><c> end</c><00:01:44.960><c> word</c><00:01:45.280><c> and</c>

00:01:45.590 --> 00:01:45.600 align:start position:0%
including the beginning end word and
 

00:01:45.600 --> 00:01:47.590 align:start position:0%
including the beginning end word and
every<00:01:45.840><c> word</c><00:01:46.159><c> in</c><00:01:46.320><c> the</c><00:01:46.479><c> list</c><00:01:46.799><c> is</c><00:01:46.960><c> going</c><00:01:47.119><c> to</c><00:01:47.280><c> be</c>

00:01:47.590 --> 00:01:47.600 align:start position:0%
every word in the list is going to be
 

00:01:47.600 --> 00:01:49.590 align:start position:0%
every word in the list is going to be
guaranteed<00:01:48.159><c> to</c><00:01:48.320><c> be</c><00:01:48.479><c> the</c><00:01:48.640><c> exact</c><00:01:49.040><c> same</c><00:01:49.280><c> length</c>

00:01:49.590 --> 00:01:49.600 align:start position:0%
guaranteed to be the exact same length
 

00:01:49.600 --> 00:01:51.590 align:start position:0%
guaranteed to be the exact same length
in<00:01:49.759><c> this</c><00:01:49.920><c> case</c><00:01:50.159><c> every</c><00:01:50.479><c> word</c><00:01:50.960><c> has</c><00:01:51.280><c> three</c>

00:01:51.590 --> 00:01:51.600 align:start position:0%
in this case every word has three
 

00:01:51.600 --> 00:01:54.149 align:start position:0%
in this case every word has three
characters<00:01:52.240><c> in</c><00:01:52.399><c> it</c><00:01:52.720><c> so</c><00:01:53.040><c> it's</c><00:01:53.280><c> pretty</c><00:01:53.600><c> easy</c><00:01:54.000><c> to</c>

00:01:54.149 --> 00:01:54.159 align:start position:0%
characters in it so it's pretty easy to
 

00:01:54.159 --> 00:01:56.950 align:start position:0%
characters in it so it's pretty easy to
take<00:01:54.479><c> two</c><00:01:54.720><c> words</c><00:01:55.200><c> and</c><00:01:55.840><c> figure</c><00:01:56.159><c> out</c><00:01:56.320><c> what's</c><00:01:56.560><c> the</c>

00:01:56.950 --> 00:01:56.960 align:start position:0%
take two words and figure out what's the
 

00:01:56.960 --> 00:01:57.749 align:start position:0%
take two words and figure out what's the
the

00:01:57.749 --> 00:01:57.759 align:start position:0%
the
 

00:01:57.759 --> 00:01:59.270 align:start position:0%
the
difference<00:01:58.240><c> in</c><00:01:58.320><c> characters</c><00:01:58.799><c> between</c><00:01:59.119><c> them</c>

00:01:59.270 --> 00:01:59.280 align:start position:0%
difference in characters between them
 

00:01:59.280 --> 00:02:00.870 align:start position:0%
difference in characters between them
right<00:01:59.439><c> we</c><00:01:59.600><c> can</c><00:01:59.680><c> just</c><00:01:59.840><c> compare</c><00:02:00.240><c> character</c><00:02:00.640><c> by</c>

00:02:00.870 --> 00:02:00.880 align:start position:0%
right we can just compare character by
 

00:02:00.880 --> 00:02:02.709 align:start position:0%
right we can just compare character by
character<00:02:01.680><c> and</c><00:02:01.920><c> see</c><00:02:02.079><c> that</c><00:02:02.240><c> there's</c><00:02:02.479><c> one</c>

00:02:02.709 --> 00:02:02.719 align:start position:0%
character and see that there's one
 

00:02:02.719 --> 00:02:04.789 align:start position:0%
character and see that there's one
character<00:02:03.200><c> difference</c><00:02:03.759><c> therefore</c><00:02:04.240><c> we</c><00:02:04.479><c> could</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
character difference therefore we could
 

00:02:04.799 --> 00:02:07.350 align:start position:0%
character difference therefore we could
form<00:02:05.119><c> a</c><00:02:05.360><c> path</c><00:02:05.840><c> between</c><00:02:06.240><c> these</c><00:02:06.640><c> two</c><00:02:06.960><c> words</c>

00:02:07.350 --> 00:02:07.360 align:start position:0%
form a path between these two words
 

00:02:07.360 --> 00:02:09.830 align:start position:0%
form a path between these two words
right<00:02:07.920><c> and</c><00:02:08.160><c> each</c><00:02:08.560><c> edge</c><00:02:08.879><c> between</c><00:02:09.280><c> these</c><00:02:09.520><c> words</c>

00:02:09.830 --> 00:02:09.840 align:start position:0%
right and each edge between these words
 

00:02:09.840 --> 00:02:12.550 align:start position:0%
right and each edge between these words
let's<00:02:10.000><c> say</c><00:02:10.319><c> log</c><00:02:11.039><c> and</c><00:02:11.280><c> cog</c><00:02:11.840><c> is</c><00:02:12.000><c> going</c><00:02:12.239><c> to</c><00:02:12.400><c> be</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
let's say log and cog is going to be
 

00:02:12.560 --> 00:02:14.470 align:start position:0%
let's say log and cog is going to be
bi-directional<00:02:13.440><c> right</c><00:02:13.599><c> we</c><00:02:13.760><c> could</c><00:02:13.920><c> go</c><00:02:14.080><c> from</c>

00:02:14.470 --> 00:02:14.480 align:start position:0%
bi-directional right we could go from
 

00:02:14.480 --> 00:02:17.030 align:start position:0%
bi-directional right we could go from
log<00:02:15.040><c> to</c><00:02:15.200><c> cog</c><00:02:15.840><c> or</c><00:02:16.000><c> we</c><00:02:16.160><c> could</c><00:02:16.319><c> go</c><00:02:16.560><c> the</c><00:02:16.720><c> other</c>

00:02:17.030 --> 00:02:17.040 align:start position:0%
log to cog or we could go the other
 

00:02:17.040 --> 00:02:19.030 align:start position:0%
log to cog or we could go the other
direction<00:02:17.520><c> right</c><00:02:17.760><c> so</c><00:02:18.080><c> this</c><00:02:18.319><c> is</c><00:02:18.480><c> starting</c><00:02:18.800><c> to</c>

00:02:19.030 --> 00:02:19.040 align:start position:0%
direction right so this is starting to
 

00:02:19.040 --> 00:02:21.750 align:start position:0%
direction right so this is starting to
look<00:02:19.280><c> like</c><00:02:19.520><c> a</c><00:02:19.599><c> bit</c><00:02:19.920><c> of</c><00:02:20.080><c> a</c><00:02:20.239><c> graph</c><00:02:20.800><c> problem</c><00:02:21.520><c> right</c>

00:02:21.750 --> 00:02:21.760 align:start position:0%
look like a bit of a graph problem right
 

00:02:21.760 --> 00:02:24.390 align:start position:0%
look like a bit of a graph problem right
we<00:02:21.920><c> want</c><00:02:22.480><c> we</c><00:02:22.720><c> want</c><00:02:22.879><c> to</c><00:02:23.280><c> find</c><00:02:23.599><c> the</c><00:02:23.840><c> shortest</c>

00:02:24.390 --> 00:02:24.400 align:start position:0%
we want we want to find the shortest
 

00:02:24.400 --> 00:02:27.110 align:start position:0%
we want we want to find the shortest
path<00:02:24.959><c> from</c><00:02:25.200><c> the</c><00:02:25.360><c> beginning</c><00:02:25.920><c> node</c><00:02:26.319><c> hit</c><00:02:26.800><c> all</c><00:02:27.040><c> the</c>

00:02:27.110 --> 00:02:27.120 align:start position:0%
path from the beginning node hit all the
 

00:02:27.120 --> 00:02:30.070 align:start position:0%
path from the beginning node hit all the
way<00:02:27.280><c> to</c><00:02:27.440><c> the</c><00:02:27.680><c> end</c><00:02:28.000><c> node</c><00:02:28.480><c> cog</c><00:02:29.120><c> and</c><00:02:29.440><c> the</c><00:02:29.680><c> the</c><00:02:29.840><c> way</c>

00:02:30.070 --> 00:02:30.080 align:start position:0%
way to the end node cog and the the way
 

00:02:30.080 --> 00:02:32.710 align:start position:0%
way to the end node cog and the the way
the<00:02:30.319><c> edges</c><00:02:30.800><c> are</c><00:02:30.959><c> going</c><00:02:31.040><c> to</c><00:02:31.200><c> work</c><00:02:31.760><c> so</c><00:02:32.160><c> hit</c><00:02:32.560><c> could</c>

00:02:32.710 --> 00:02:32.720 align:start position:0%
the edges are going to work so hit could
 

00:02:32.720 --> 00:02:35.350 align:start position:0%
the edges are going to work so hit could
be<00:02:32.879><c> connected</c><00:02:33.360><c> to</c><00:02:33.680><c> any</c><00:02:34.000><c> of</c><00:02:34.160><c> the</c><00:02:34.400><c> words</c><00:02:34.879><c> in</c><00:02:35.040><c> this</c>

00:02:35.350 --> 00:02:35.360 align:start position:0%
be connected to any of the words in this
 

00:02:35.360 --> 00:02:37.670 align:start position:0%
be connected to any of the words in this
word<00:02:35.680><c> list</c><00:02:36.319><c> where</c><00:02:36.640><c> it</c><00:02:36.800><c> has</c><00:02:37.120><c> a</c><00:02:37.360><c> single</c>

00:02:37.670 --> 00:02:37.680 align:start position:0%
word list where it has a single
 

00:02:37.680 --> 00:02:39.589 align:start position:0%
word list where it has a single
character<00:02:38.160><c> difference</c><00:02:38.480><c> so</c><00:02:38.959><c> let's</c><00:02:39.360><c> think</c>

00:02:39.589 --> 00:02:39.599 align:start position:0%
character difference so let's think
 

00:02:39.599 --> 00:02:41.509 align:start position:0%
character difference so let's think
about<00:02:39.840><c> this</c><00:02:40.080><c> so</c><00:02:40.400><c> hit</c><00:02:40.879><c> which</c><00:02:41.120><c> one</c><00:02:41.280><c> of</c><00:02:41.360><c> these</c>

00:02:41.509 --> 00:02:41.519 align:start position:0%
about this so hit which one of these
 

00:02:41.519 --> 00:02:43.350 align:start position:0%
about this so hit which one of these
words<00:02:41.840><c> could</c><00:02:42.000><c> it</c><00:02:42.080><c> be</c><00:02:42.239><c> connected</c><00:02:42.640><c> to</c><00:02:43.040><c> is</c><00:02:43.200><c> there</c>

00:02:43.350 --> 00:02:43.360 align:start position:0%
words could it be connected to is there
 

00:02:43.360 --> 00:02:45.110 align:start position:0%
words could it be connected to is there
a<00:02:43.519><c> single</c><00:02:43.920><c> character</c><00:02:44.319><c> difference</c><00:02:44.720><c> between</c>

00:02:45.110 --> 00:02:45.120 align:start position:0%
a single character difference between
 

00:02:45.120 --> 00:02:48.309 align:start position:0%
a single character difference between
hit<00:02:45.440><c> and</c><00:02:45.680><c> hot</c><00:02:46.160><c> yes</c><00:02:46.480><c> that's</c><00:02:46.720><c> the</c><00:02:46.879><c> case</c><00:02:47.440><c> so</c><00:02:47.760><c> hit</c>

00:02:48.309 --> 00:02:48.319 align:start position:0%
hit and hot yes that's the case so hit
 

00:02:48.319 --> 00:02:50.630 align:start position:0%
hit and hot yes that's the case so hit
and<00:02:48.560><c> hot</c><00:02:48.879><c> are</c><00:02:49.120><c> going</c><00:02:49.360><c> to</c><00:02:49.519><c> be</c><00:02:50.000><c> connected</c><00:02:50.560><c> in</c>

00:02:50.630 --> 00:02:50.640 align:start position:0%
and hot are going to be connected in
 

00:02:50.640 --> 00:02:53.030 align:start position:0%
and hot are going to be connected in
this<00:02:50.800><c> problem</c><00:02:51.360><c> what</c><00:02:51.519><c> about</c><00:02:52.000><c> dot</c><00:02:52.560><c> nope</c><00:02:52.879><c> it</c>

00:02:53.030 --> 00:02:53.040 align:start position:0%
this problem what about dot nope it
 

00:02:53.040 --> 00:02:54.710 align:start position:0%
this problem what about dot nope it
takes<00:02:53.280><c> two</c><00:02:53.519><c> character</c><00:02:53.920><c> difference</c><00:02:54.239><c> between</c>

00:02:54.710 --> 00:02:54.720 align:start position:0%
takes two character difference between
 

00:02:54.720 --> 00:02:57.350 align:start position:0%
takes two character difference between
hit<00:02:55.120><c> what</c><00:02:55.360><c> about</c><00:02:55.599><c> dog</c><00:02:56.239><c> again</c><00:02:56.720><c> two</c><00:02:56.959><c> character</c>

00:02:57.350 --> 00:02:57.360 align:start position:0%
hit what about dog again two character
 

00:02:57.360 --> 00:02:58.309 align:start position:0%
hit what about dog again two character
difference

00:02:58.309 --> 00:02:58.319 align:start position:0%
difference
 

00:02:58.319 --> 00:03:01.190 align:start position:0%
difference
lot<00:02:59.040><c> again</c><00:02:59.599><c> two</c><00:02:59.840><c> character</c><00:03:00.239><c> difference</c><00:03:00.959><c> same</c>

00:03:01.190 --> 00:03:01.200 align:start position:0%
lot again two character difference same
 

00:03:01.200 --> 00:03:04.149 align:start position:0%
lot again two character difference same
with<00:03:01.440><c> log</c><00:03:01.760><c> and</c><00:03:01.920><c> same</c><00:03:02.159><c> with</c><00:03:02.400><c> cog</c><00:03:02.879><c> but</c><00:03:03.440><c> hot</c><00:03:03.920><c> could</c>

00:03:04.149 --> 00:03:04.159 align:start position:0%
with log and same with cog but hot could
 

00:03:04.159 --> 00:03:06.470 align:start position:0%
with log and same with cog but hot could
be<00:03:04.319><c> connected</c><00:03:04.800><c> to</c><00:03:04.959><c> some</c><00:03:05.120><c> of</c><00:03:05.280><c> these</c><00:03:05.760><c> characters</c>

00:03:06.470 --> 00:03:06.480 align:start position:0%
be connected to some of these characters
 

00:03:06.480 --> 00:03:08.790 align:start position:0%
be connected to some of these characters
or<00:03:06.640><c> some</c><00:03:06.800><c> of</c><00:03:06.959><c> these</c><00:03:07.200><c> words</c><00:03:07.680><c> right</c><00:03:08.000><c> so</c><00:03:08.560><c> we're</c>

00:03:08.790 --> 00:03:08.800 align:start position:0%
or some of these words right so we're
 

00:03:08.800 --> 00:03:10.949 align:start position:0%
or some of these words right so we're
realizing<00:03:09.360><c> that</c><00:03:09.599><c> building</c><00:03:10.080><c> a</c><00:03:10.319><c> graph</c><00:03:10.720><c> like</c>

00:03:10.949 --> 00:03:10.959 align:start position:0%
realizing that building a graph like
 

00:03:10.959 --> 00:03:12.790 align:start position:0%
realizing that building a graph like
this<00:03:11.200><c> with</c><00:03:11.440><c> all</c><00:03:11.599><c> the</c><00:03:11.840><c> edges</c><00:03:12.480><c> like</c><00:03:12.640><c> an</c>

00:03:12.790 --> 00:03:12.800 align:start position:0%
this with all the edges like an
 

00:03:12.800 --> 00:03:14.630 align:start position:0%
this with all the edges like an
adjacency<00:03:13.440><c> list</c><00:03:13.760><c> pretty</c><00:03:13.920><c> much</c><00:03:14.159><c> between</c><00:03:14.480><c> the</c>

00:03:14.630 --> 00:03:14.640 align:start position:0%
adjacency list pretty much between the
 

00:03:14.640 --> 00:03:16.790 align:start position:0%
adjacency list pretty much between the
words<00:03:14.959><c> is</c><00:03:15.120><c> going</c><00:03:15.200><c> to</c><00:03:15.280><c> be</c><00:03:15.440><c> very</c><00:03:15.680><c> helpful</c><00:03:16.159><c> for</c><00:03:16.319><c> us</c>

00:03:16.790 --> 00:03:16.800 align:start position:0%
words is going to be very helpful for us
 

00:03:16.800 --> 00:03:19.670 align:start position:0%
words is going to be very helpful for us
and<00:03:17.200><c> there's</c><00:03:17.519><c> a</c><00:03:17.680><c> naive</c><00:03:18.319><c> way</c><00:03:18.560><c> to</c><00:03:18.720><c> create</c><00:03:19.200><c> this</c>

00:03:19.670 --> 00:03:19.680 align:start position:0%
and there's a naive way to create this
 

00:03:19.680 --> 00:03:21.990 align:start position:0%
and there's a naive way to create this
adjacency<00:03:20.400><c> list</c><00:03:21.200><c> which</c><00:03:21.440><c> is</c><00:03:21.599><c> going</c><00:03:21.840><c> to</c>

00:03:21.990 --> 00:03:22.000 align:start position:0%
adjacency list which is going to
 

00:03:22.000 --> 00:03:24.550 align:start position:0%
adjacency list which is going to
basically<00:03:22.400><c> be</c><00:03:22.640><c> a</c><00:03:22.879><c> nested</c><00:03:23.440><c> loop</c><00:03:23.760><c> on</c><00:03:23.920><c> the</c><00:03:24.159><c> entire</c>

00:03:24.550 --> 00:03:24.560 align:start position:0%
basically be a nested loop on the entire
 

00:03:24.560 --> 00:03:26.949 align:start position:0%
basically be a nested loop on the entire
list<00:03:24.879><c> of</c><00:03:25.040><c> words</c><00:03:25.599><c> which</c><00:03:25.840><c> let's</c><00:03:26.080><c> say</c><00:03:26.480><c> ends</c><00:03:26.720><c> up</c>

00:03:26.949 --> 00:03:26.959 align:start position:0%
list of words which let's say ends up
 

00:03:26.959 --> 00:03:29.350 align:start position:0%
list of words which let's say ends up
being<00:03:27.680><c> n</c><00:03:27.920><c> squared</c><00:03:28.319><c> where</c><00:03:28.560><c> n</c><00:03:28.720><c> is</c><00:03:28.879><c> the</c><00:03:28.959><c> number</c><00:03:29.200><c> of</c>

00:03:29.350 --> 00:03:29.360 align:start position:0%
being n squared where n is the number of
 

00:03:29.360 --> 00:03:31.430 align:start position:0%
being n squared where n is the number of
words<00:03:29.840><c> and</c><00:03:29.920><c> let's</c><00:03:30.159><c> say</c><00:03:30.319><c> the</c><00:03:30.640><c> length</c><00:03:31.040><c> of</c><00:03:31.200><c> each</c>

00:03:31.430 --> 00:03:31.440 align:start position:0%
words and let's say the length of each
 

00:03:31.440 --> 00:03:32.710 align:start position:0%
words and let's say the length of each
word<00:03:31.680><c> which</c><00:03:31.840><c> is</c><00:03:32.000><c> always</c><00:03:32.239><c> going</c><00:03:32.319><c> to</c><00:03:32.400><c> be</c><00:03:32.560><c> the</c>

00:03:32.710 --> 00:03:32.720 align:start position:0%
word which is always going to be the
 

00:03:32.720 --> 00:03:34.949 align:start position:0%
word which is always going to be the
same<00:03:33.120><c> is</c><00:03:33.599><c> m</c><00:03:34.159><c> because</c><00:03:34.400><c> we're</c><00:03:34.560><c> going</c><00:03:34.640><c> to</c><00:03:34.720><c> need</c><00:03:34.799><c> to</c>

00:03:34.949 --> 00:03:34.959 align:start position:0%
same is m because we're going to need to
 

00:03:34.959 --> 00:03:36.550 align:start position:0%
same is m because we're going to need to
compare<00:03:35.360><c> character</c><00:03:35.760><c> by</c><00:03:35.920><c> character</c><00:03:36.319><c> between</c>

00:03:36.550 --> 00:03:36.560 align:start position:0%
compare character by character between
 

00:03:36.560 --> 00:03:38.229 align:start position:0%
compare character by character between
the<00:03:36.720><c> words</c><00:03:36.879><c> so</c><00:03:37.040><c> creating</c><00:03:37.440><c> that</c><00:03:37.680><c> adjacency</c>

00:03:38.229 --> 00:03:38.239 align:start position:0%
the words so creating that adjacency
 

00:03:38.239 --> 00:03:39.670 align:start position:0%
the words so creating that adjacency
list<00:03:38.480><c> is</c><00:03:38.560><c> going</c><00:03:38.640><c> to</c><00:03:38.720><c> be</c><00:03:38.879><c> something</c><00:03:39.200><c> like</c><00:03:39.519><c> n</c>

00:03:39.670 --> 00:03:39.680 align:start position:0%
list is going to be something like n
 

00:03:39.680 --> 00:03:41.670 align:start position:0%
list is going to be something like n
squared<00:03:40.319><c> times</c><00:03:40.879><c> m</c>

00:03:41.670 --> 00:03:41.680 align:start position:0%
squared times m
 

00:03:41.680 --> 00:03:43.270 align:start position:0%
squared times m
but<00:03:42.159><c> and</c><00:03:42.319><c> you</c><00:03:42.400><c> might</c><00:03:42.560><c> think</c><00:03:42.720><c> that</c><00:03:42.799><c> that's</c><00:03:43.040><c> good</c>

00:03:43.270 --> 00:03:43.280 align:start position:0%
but and you might think that that's good
 

00:03:43.280 --> 00:03:45.350 align:start position:0%
but and you might think that that's good
enough<00:03:43.599><c> unfortunately</c><00:03:44.319><c> this</c><00:03:44.640><c> won't</c><00:03:44.879><c> pass</c><00:03:45.200><c> on</c>

00:03:45.350 --> 00:03:45.360 align:start position:0%
enough unfortunately this won't pass on
 

00:03:45.360 --> 00:03:46.630 align:start position:0%
enough unfortunately this won't pass on
leak<00:03:45.599><c> code</c><00:03:45.760><c> and</c><00:03:45.920><c> i</c><00:03:46.000><c> really</c><00:03:46.159><c> think</c><00:03:46.319><c> that's</c><00:03:46.560><c> kind</c>

00:03:46.630 --> 00:03:46.640 align:start position:0%
leak code and i really think that's kind
 

00:03:46.640 --> 00:03:48.630 align:start position:0%
leak code and i really think that's kind
of<00:03:46.799><c> stupid</c><00:03:47.200><c> that</c><00:03:47.360><c> it</c><00:03:47.519><c> does</c><00:03:47.760><c> that</c><00:03:48.159><c> the</c><00:03:48.319><c> main</c>

00:03:48.630 --> 00:03:48.640 align:start position:0%
of stupid that it does that the main
 

00:03:48.640 --> 00:03:50.789 align:start position:0%
of stupid that it does that the main
thing<00:03:49.040><c> to</c><00:03:49.200><c> notice</c><00:03:49.680><c> to</c><00:03:49.840><c> build</c><00:03:50.080><c> the</c><00:03:50.239><c> adjacency</c>

00:03:50.789 --> 00:03:50.799 align:start position:0%
thing to notice to build the adjacency
 

00:03:50.799 --> 00:03:52.070 align:start position:0%
thing to notice to build the adjacency
list<00:03:50.959><c> faster</c><00:03:51.360><c> is</c><00:03:51.519><c> to</c><00:03:51.680><c> look</c><00:03:51.840><c> at</c><00:03:51.920><c> the</c>

00:03:52.070 --> 00:03:52.080 align:start position:0%
list faster is to look at the
 

00:03:52.080 --> 00:03:55.030 align:start position:0%
list faster is to look at the
constraints<00:03:52.959><c> they</c><00:03:53.280><c> tell</c><00:03:53.599><c> us</c><00:03:53.920><c> that</c><00:03:54.159><c> the</c><00:03:54.480><c> length</c>

00:03:55.030 --> 00:03:55.040 align:start position:0%
constraints they tell us that the length
 

00:03:55.040 --> 00:03:57.670 align:start position:0%
constraints they tell us that the length
of<00:03:55.280><c> the</c><00:03:55.760><c> of</c><00:03:55.920><c> the</c><00:03:56.080><c> list</c><00:03:56.400><c> of</c><00:03:56.560><c> words</c><00:03:57.040><c> in</c><00:03:57.200><c> our</c><00:03:57.439><c> case</c>

00:03:57.670 --> 00:03:57.680 align:start position:0%
of the of the list of words in our case
 

00:03:57.680 --> 00:03:59.670 align:start position:0%
of the of the list of words in our case
that's<00:03:58.159><c> n</c><00:03:58.400><c> so</c><00:03:58.560><c> it's</c><00:03:58.720><c> going</c><00:03:58.799><c> to</c><00:03:58.879><c> be</c><00:03:59.120><c> n</c><00:03:59.280><c> squared</c>

00:03:59.670 --> 00:03:59.680 align:start position:0%
that's n so it's going to be n squared
 

00:03:59.680 --> 00:04:01.670 align:start position:0%
that's n so it's going to be n squared
right<00:04:00.159><c> is</c><00:04:00.640><c> going</c><00:04:00.799><c> to</c><00:04:00.879><c> be</c><00:04:01.040><c> less</c><00:04:01.200><c> than</c><00:04:01.360><c> or</c><00:04:01.519><c> equal</c>

00:04:01.670 --> 00:04:01.680 align:start position:0%
right is going to be less than or equal
 

00:04:01.680 --> 00:04:04.949 align:start position:0%
right is going to be less than or equal
to<00:04:01.840><c> 5000</c><00:04:02.799><c> whereas</c><00:04:03.280><c> the</c><00:04:03.680><c> length</c><00:04:04.080><c> of</c><00:04:04.239><c> the</c><00:04:04.480><c> word</c>

00:04:04.949 --> 00:04:04.959 align:start position:0%
to 5000 whereas the length of the word
 

00:04:04.959 --> 00:04:08.149 align:start position:0%
to 5000 whereas the length of the word
itself<00:04:06.080><c> is</c><00:04:06.400><c> going</c><00:04:06.640><c> to</c><00:04:06.879><c> be</c><00:04:07.439><c> less</c><00:04:07.599><c> than</c><00:04:07.760><c> or</c><00:04:07.920><c> equal</c>

00:04:08.149 --> 00:04:08.159 align:start position:0%
itself is going to be less than or equal
 

00:04:08.159 --> 00:04:10.390 align:start position:0%
itself is going to be less than or equal
to<00:04:08.480><c> 10.</c><00:04:09.040><c> so</c><00:04:09.200><c> there's</c><00:04:09.519><c> actually</c><00:04:09.920><c> a</c><00:04:10.080><c> way</c><00:04:10.239><c> where</c>

00:04:10.390 --> 00:04:10.400 align:start position:0%
to 10. so there's actually a way where
 

00:04:10.400 --> 00:04:12.710 align:start position:0%
to 10. so there's actually a way where
we<00:04:10.560><c> can</c><00:04:10.799><c> change</c><00:04:11.360><c> this</c><00:04:11.680><c> time</c><00:04:11.840><c> complexity</c><00:04:12.400><c> to</c><00:04:12.560><c> at</c>

00:04:12.710 --> 00:04:12.720 align:start position:0%
we can change this time complexity to at
 

00:04:12.720 --> 00:04:15.270 align:start position:0%
we can change this time complexity to at
least<00:04:13.040><c> generate</c><00:04:13.519><c> that</c><00:04:13.760><c> adjacency</c><00:04:14.640><c> list</c><00:04:15.040><c> to</c>

00:04:15.270 --> 00:04:15.280 align:start position:0%
least generate that adjacency list to
 

00:04:15.280 --> 00:04:19.030 align:start position:0%
least generate that adjacency list to
something<00:04:15.760><c> like</c><00:04:16.400><c> n</c><00:04:17.040><c> times</c><00:04:17.600><c> m</c><00:04:18.239><c> squared</c><00:04:18.799><c> because</c>

00:04:19.030 --> 00:04:19.040 align:start position:0%
something like n times m squared because
 

00:04:19.040 --> 00:04:21.670 align:start position:0%
something like n times m squared because
the<00:04:19.280><c> m</c><00:04:19.519><c> is</c><00:04:19.600><c> going</c><00:04:19.680><c> to</c><00:04:19.759><c> be</c><00:04:20.000><c> smaller</c><00:04:20.479><c> than</c><00:04:20.720><c> the</c><00:04:21.040><c> n</c>

00:04:21.670 --> 00:04:21.680 align:start position:0%
the m is going to be smaller than the n
 

00:04:21.680 --> 00:04:23.830 align:start position:0%
the m is going to be smaller than the n
so<00:04:22.000><c> we</c><00:04:22.160><c> can</c><00:04:22.320><c> actually</c><00:04:22.560><c> make</c><00:04:22.960><c> it</c><00:04:23.199><c> kind</c><00:04:23.360><c> of</c><00:04:23.520><c> like</c>

00:04:23.830 --> 00:04:23.840 align:start position:0%
so we can actually make it kind of like
 

00:04:23.840 --> 00:04:26.230 align:start position:0%
so we can actually make it kind of like
this<00:04:24.320><c> but</c><00:04:24.479><c> i'm</c><00:04:24.720><c> pretty</c><00:04:25.040><c> sure</c><00:04:25.680><c> that</c><00:04:26.000><c> the</c>

00:04:26.230 --> 00:04:26.240 align:start position:0%
this but i'm pretty sure that the
 

00:04:26.240 --> 00:04:28.150 align:start position:0%
this but i'm pretty sure that the
overall<00:04:26.639><c> time</c><00:04:26.800><c> complexity</c><00:04:27.360><c> because</c><00:04:27.680><c> after</c><00:04:28.000><c> we</c>

00:04:28.150 --> 00:04:28.160 align:start position:0%
overall time complexity because after we
 

00:04:28.160 --> 00:04:30.070 align:start position:0%
overall time complexity because after we
actually<00:04:28.479><c> create</c><00:04:29.040><c> this</c><00:04:29.280><c> graph</c><00:04:29.680><c> we</c><00:04:29.840><c> are</c><00:04:29.919><c> going</c>

00:04:30.070 --> 00:04:30.080 align:start position:0%
actually create this graph we are going
 

00:04:30.080 --> 00:04:32.469 align:start position:0%
actually create this graph we are going
to<00:04:30.240><c> run</c><00:04:30.720><c> a</c><00:04:31.040><c> breadth-first</c><00:04:31.680><c> search</c><00:04:32.000><c> algorithm</c>

00:04:32.469 --> 00:04:32.479 align:start position:0%
to run a breadth-first search algorithm
 

00:04:32.479 --> 00:04:34.469 align:start position:0%
to run a breadth-first search algorithm
to<00:04:32.639><c> find</c><00:04:32.800><c> the</c><00:04:32.960><c> shortest</c><00:04:33.440><c> path</c><00:04:33.759><c> we</c><00:04:34.000><c> could</c><00:04:34.240><c> do</c><00:04:34.400><c> it</c>

00:04:34.469 --> 00:04:34.479 align:start position:0%
to find the shortest path we could do it
 

00:04:34.479 --> 00:04:36.550 align:start position:0%
to find the shortest path we could do it
with<00:04:34.639><c> dfs</c><00:04:35.360><c> but</c><00:04:35.520><c> usually</c><00:04:36.080><c> to</c><00:04:36.240><c> find</c><00:04:36.400><c> the</c>

00:04:36.550 --> 00:04:36.560 align:start position:0%
with dfs but usually to find the
 

00:04:36.560 --> 00:04:38.310 align:start position:0%
with dfs but usually to find the
shortest<00:04:36.960><c> path</c><00:04:37.440><c> breadth</c><00:04:37.759><c> first</c><00:04:37.919><c> search</c><00:04:38.160><c> is</c>

00:04:38.310 --> 00:04:38.320 align:start position:0%
shortest path breadth first search is
 

00:04:38.320 --> 00:04:40.870 align:start position:0%
shortest path breadth first search is
much<00:04:38.560><c> more</c><00:04:38.800><c> efficient</c><00:04:39.360><c> and</c><00:04:39.520><c> i'm</c><00:04:39.759><c> pretty</c><00:04:40.240><c> sure</c>

00:04:40.870 --> 00:04:40.880 align:start position:0%
much more efficient and i'm pretty sure
 

00:04:40.880 --> 00:04:42.870 align:start position:0%
much more efficient and i'm pretty sure
even<00:04:41.199><c> in</c><00:04:41.360><c> this</c><00:04:41.600><c> case</c><00:04:42.240><c> the</c><00:04:42.400><c> breadth</c><00:04:42.720><c> first</c>

00:04:42.870 --> 00:04:42.880 align:start position:0%
even in this case the breadth first
 

00:04:42.880 --> 00:04:45.110 align:start position:0%
even in this case the breadth first
search<00:04:43.120><c> solution</c><00:04:43.600><c> is</c><00:04:43.680><c> going</c><00:04:43.840><c> to</c><00:04:44.000><c> be</c><00:04:44.560><c> n</c><00:04:44.720><c> squared</c>

00:04:45.110 --> 00:04:45.120 align:start position:0%
search solution is going to be n squared
 

00:04:45.120 --> 00:04:46.390 align:start position:0%
search solution is going to be n squared
because<00:04:45.360><c> this</c><00:04:45.600><c> is</c><00:04:45.680><c> going</c><00:04:45.759><c> to</c><00:04:45.840><c> be</c><00:04:45.919><c> the</c><00:04:46.080><c> number</c>

00:04:46.390 --> 00:04:46.400 align:start position:0%
because this is going to be the number
 

00:04:46.400 --> 00:04:48.230 align:start position:0%
because this is going to be the number
of<00:04:46.639><c> edges</c><00:04:47.040><c> we</c><00:04:47.199><c> could</c><00:04:47.360><c> potentially</c><00:04:47.840><c> have</c><00:04:48.080><c> right</c>

00:04:48.230 --> 00:04:48.240 align:start position:0%
of edges we could potentially have right
 

00:04:48.240 --> 00:04:49.670 align:start position:0%
of edges we could potentially have right
because<00:04:48.400><c> that's</c><00:04:48.639><c> how</c><00:04:48.720><c> many</c><00:04:48.880><c> words</c><00:04:49.280><c> we</c><00:04:49.360><c> have</c><00:04:49.600><c> we</c>

00:04:49.670 --> 00:04:49.680 align:start position:0%
because that's how many words we have we
 

00:04:49.680 --> 00:04:52.070 align:start position:0%
because that's how many words we have we
could<00:04:49.840><c> have</c><00:04:50.000><c> n</c><00:04:50.240><c> squared</c><00:04:50.720><c> edges</c><00:04:51.360><c> and</c><00:04:51.840><c> we're</c>

00:04:52.070 --> 00:04:52.080 align:start position:0%
could have n squared edges and we're
 

00:04:52.080 --> 00:04:54.870 align:start position:0%
could have n squared edges and we're
also<00:04:52.400><c> going</c><00:04:52.479><c> to</c><00:04:52.560><c> have</c><00:04:52.639><c> to</c><00:04:52.800><c> compare</c><00:04:53.280><c> words</c><00:04:53.919><c> so</c>

00:04:54.870 --> 00:04:54.880 align:start position:0%
also going to have to compare words so
 

00:04:54.880 --> 00:04:56.550 align:start position:0%
also going to have to compare words so
on<00:04:55.040><c> each</c><00:04:55.280><c> operation</c><00:04:55.759><c> when</c><00:04:55.919><c> we're</c><00:04:56.080><c> traversing</c>

00:04:56.550 --> 00:04:56.560 align:start position:0%
on each operation when we're traversing
 

00:04:56.560 --> 00:04:57.990 align:start position:0%
on each operation when we're traversing
the<00:04:56.639><c> graph</c><00:04:56.880><c> it's</c><00:04:57.040><c> going</c><00:04:57.120><c> to</c><00:04:57.199><c> be</c><00:04:57.360><c> multiplied</c><00:04:57.840><c> by</c>

00:04:57.990 --> 00:04:58.000 align:start position:0%
the graph it's going to be multiplied by
 

00:04:58.000 --> 00:04:59.510 align:start position:0%
the graph it's going to be multiplied by
the<00:04:58.080><c> length</c><00:04:58.400><c> of</c><00:04:58.479><c> the</c><00:04:58.560><c> word</c><00:04:58.880><c> so</c><00:04:59.040><c> the</c><00:04:59.199><c> overall</c>

00:04:59.510 --> 00:04:59.520 align:start position:0%
the length of the word so the overall
 

00:04:59.520 --> 00:05:01.270 align:start position:0%
the length of the word so the overall
time<00:04:59.759><c> complexity</c><00:05:00.240><c> for</c><00:05:00.400><c> the</c><00:05:00.479><c> bfs</c><00:05:00.960><c> is</c><00:05:01.120><c> still</c>

00:05:01.270 --> 00:05:01.280 align:start position:0%
time complexity for the bfs is still
 

00:05:01.280 --> 00:05:03.990 align:start position:0%
time complexity for the bfs is still
going<00:05:01.440><c> to</c><00:05:01.520><c> be</c><00:05:01.759><c> n</c><00:05:02.000><c> squared</c><00:05:02.560><c> which</c><00:05:02.800><c> is</c><00:05:03.199><c> you</c><00:05:03.280><c> know</c>

00:05:03.990 --> 00:05:04.000 align:start position:0%
going to be n squared which is you know
 

00:05:04.000 --> 00:05:05.749 align:start position:0%
going to be n squared which is you know
pretty<00:05:04.160><c> much</c><00:05:04.479><c> this</c><00:05:04.639><c> so</c><00:05:04.800><c> you</c><00:05:04.880><c> might</c><00:05:05.120><c> think</c><00:05:05.360><c> well</c>

00:05:05.749 --> 00:05:05.759 align:start position:0%
pretty much this so you might think well
 

00:05:05.759 --> 00:05:07.670 align:start position:0%
pretty much this so you might think well
then<00:05:06.000><c> why</c><00:05:06.240><c> isn't</c><00:05:06.400><c> it</c><00:05:06.560><c> passing</c><00:05:06.960><c> on</c><00:05:07.120><c> leak</c><00:05:07.360><c> code</c>

00:05:07.670 --> 00:05:07.680 align:start position:0%
then why isn't it passing on leak code
 

00:05:07.680 --> 00:05:09.430 align:start position:0%
then why isn't it passing on leak code
and<00:05:08.000><c> you</c><00:05:08.080><c> know</c><00:05:08.160><c> that's</c><00:05:08.400><c> a</c><00:05:08.479><c> good</c><00:05:08.639><c> question</c><00:05:09.360><c> i</c>

00:05:09.430 --> 00:05:09.440 align:start position:0%
and you know that's a good question i
 

00:05:09.440 --> 00:05:10.950 align:start position:0%
and you know that's a good question i
think<00:05:09.680><c> in</c><00:05:09.840><c> general</c><00:05:10.160><c> though</c><00:05:10.400><c> doing</c><00:05:10.639><c> it</c><00:05:10.720><c> like</c>

00:05:10.950 --> 00:05:10.960 align:start position:0%
think in general though doing it like
 

00:05:10.960 --> 00:05:12.629 align:start position:0%
think in general though doing it like
this<00:05:11.199><c> is</c><00:05:11.360><c> going</c><00:05:11.440><c> to</c><00:05:11.520><c> be</c><00:05:11.680><c> faster</c><00:05:12.000><c> we</c><00:05:12.160><c> use</c><00:05:12.400><c> this</c>

00:05:12.629 --> 00:05:12.639 align:start position:0%
this is going to be faster we use this
 

00:05:12.639 --> 00:05:14.310 align:start position:0%
this is going to be faster we use this
to<00:05:12.800><c> generate</c><00:05:13.199><c> our</c><00:05:13.360><c> adjacency</c><00:05:13.919><c> list</c><00:05:14.160><c> and</c><00:05:14.240><c> then</c>

00:05:14.310 --> 00:05:14.320 align:start position:0%
to generate our adjacency list and then
 

00:05:14.320 --> 00:05:17.350 align:start position:0%
to generate our adjacency list and then
we<00:05:14.479><c> do</c><00:05:14.639><c> a</c><00:05:14.720><c> bfs</c><00:05:15.600><c> with</c><00:05:15.919><c> this</c><00:05:16.160><c> time</c><00:05:16.400><c> complexity</c>

00:05:17.350 --> 00:05:17.360 align:start position:0%
we do a bfs with this time complexity
 

00:05:17.360 --> 00:05:19.110 align:start position:0%
we do a bfs with this time complexity
and<00:05:17.680><c> basically</c><00:05:18.160><c> there's</c><00:05:18.400><c> kind</c><00:05:18.560><c> of</c><00:05:18.639><c> a</c><00:05:18.720><c> small</c>

00:05:19.110 --> 00:05:19.120 align:start position:0%
and basically there's kind of a small
 

00:05:19.120 --> 00:05:21.110 align:start position:0%
and basically there's kind of a small
trick<00:05:19.440><c> that</c><00:05:19.600><c> i'm</c><00:05:19.759><c> going</c><00:05:19.840><c> to</c><00:05:19.919><c> show</c><00:05:20.080><c> you</c><00:05:20.639><c> which</c>

00:05:21.110 --> 00:05:21.120 align:start position:0%
trick that i'm going to show you which
 

00:05:21.120 --> 00:05:23.350 align:start position:0%
trick that i'm going to show you which
will<00:05:21.360><c> get</c><00:05:21.520><c> it</c><00:05:21.680><c> to</c><00:05:21.759><c> pass</c><00:05:22.080><c> on</c><00:05:22.240><c> leak</c><00:05:22.479><c> code</c><00:05:22.960><c> so</c><00:05:23.120><c> like</c>

00:05:23.350 --> 00:05:23.360 align:start position:0%
will get it to pass on leak code so like
 

00:05:23.360 --> 00:05:25.029 align:start position:0%
will get it to pass on leak code so like
i<00:05:23.520><c> said</c><00:05:23.680><c> the</c><00:05:23.840><c> first</c><00:05:24.160><c> part</c><00:05:24.400><c> is</c><00:05:24.560><c> building</c><00:05:24.880><c> an</c>

00:05:25.029 --> 00:05:25.039 align:start position:0%
i said the first part is building an
 

00:05:25.039 --> 00:05:27.029 align:start position:0%
i said the first part is building an
adjacency<00:05:25.759><c> list</c><00:05:26.080><c> and</c><00:05:26.160><c> the</c><00:05:26.320><c> naive</c><00:05:26.720><c> way</c><00:05:26.880><c> would</c>

00:05:27.029 --> 00:05:27.039 align:start position:0%
adjacency list and the naive way would
 

00:05:27.039 --> 00:05:28.950 align:start position:0%
adjacency list and the naive way would
be<00:05:27.199><c> to</c><00:05:27.360><c> go</c><00:05:27.520><c> through</c><00:05:27.759><c> every</c><00:05:27.919><c> word</c><00:05:28.240><c> hot</c><00:05:28.639><c> compare</c>

00:05:28.950 --> 00:05:28.960 align:start position:0%
be to go through every word hot compare
 

00:05:28.960 --> 00:05:30.150 align:start position:0%
be to go through every word hot compare
it<00:05:29.039><c> with</c><00:05:29.199><c> every</c><00:05:29.440><c> other</c><00:05:29.600><c> word</c><00:05:29.840><c> that's</c><00:05:30.000><c> going</c><00:05:30.080><c> to</c>

00:05:30.150 --> 00:05:30.160 align:start position:0%
it with every other word that's going to
 

00:05:30.160 --> 00:05:32.070 align:start position:0%
it with every other word that's going to
be<00:05:30.400><c> n</c><00:05:30.639><c> squared</c><00:05:31.199><c> and</c><00:05:31.280><c> then</c><00:05:31.440><c> the</c><00:05:31.600><c> length</c><00:05:31.840><c> of</c><00:05:31.919><c> the</c>

00:05:32.070 --> 00:05:32.080 align:start position:0%
be n squared and then the length of the
 

00:05:32.080 --> 00:05:34.230 align:start position:0%
be n squared and then the length of the
word<00:05:32.320><c> which</c><00:05:32.560><c> is</c><00:05:32.800><c> m</c><00:05:33.280><c> but</c><00:05:33.680><c> there's</c><00:05:33.919><c> a</c><00:05:33.919><c> little</c><00:05:34.080><c> bit</c>

00:05:34.230 --> 00:05:34.240 align:start position:0%
word which is m but there's a little bit
 

00:05:34.240 --> 00:05:36.629 align:start position:0%
word which is m but there's a little bit
of<00:05:34.320><c> a</c><00:05:34.479><c> trick</c><00:05:34.960><c> so</c><00:05:35.120><c> how</c><00:05:35.280><c> about</c><00:05:35.440><c> we</c><00:05:35.919><c> we</c><00:05:36.080><c> do</c><00:05:36.240><c> it</c><00:05:36.320><c> some</c>

00:05:36.629 --> 00:05:36.639 align:start position:0%
of a trick so how about we we do it some
 

00:05:36.639 --> 00:05:38.070 align:start position:0%
of a trick so how about we we do it some
a<00:05:36.720><c> different</c><00:05:36.960><c> way</c><00:05:37.199><c> right</c><00:05:37.360><c> we</c><00:05:37.520><c> know</c><00:05:37.680><c> that</c><00:05:37.919><c> for</c>

00:05:38.070 --> 00:05:38.080 align:start position:0%
a different way right we know that for
 

00:05:38.080 --> 00:05:41.749 align:start position:0%
a different way right we know that for
any<00:05:38.479><c> word</c><00:05:39.280><c> we</c><00:05:39.520><c> want</c><00:05:39.840><c> at</c><00:05:40.000><c> most</c><00:05:40.560><c> one</c><00:05:40.960><c> character</c>

00:05:41.749 --> 00:05:41.759 align:start position:0%
any word we want at most one character
 

00:05:41.759 --> 00:05:44.390 align:start position:0%
any word we want at most one character
difference<00:05:42.240><c> right</c><00:05:42.479><c> so</c><00:05:42.720><c> let's</c><00:05:43.039><c> take</c><00:05:43.280><c> a</c><00:05:43.600><c> look</c><00:05:44.000><c> at</c>

00:05:44.390 --> 00:05:44.400 align:start position:0%
difference right so let's take a look at
 

00:05:44.400 --> 00:05:46.469 align:start position:0%
difference right so let's take a look at
hot<00:05:44.800><c> our</c><00:05:44.960><c> first</c><00:05:45.360><c> word</c><00:05:45.680><c> and</c><00:05:45.759><c> let's</c><00:05:46.000><c> take</c><00:05:46.240><c> a</c><00:05:46.320><c> look</c>

00:05:46.469 --> 00:05:46.479 align:start position:0%
hot our first word and let's take a look
 

00:05:46.479 --> 00:05:49.430 align:start position:0%
hot our first word and let's take a look
at<00:05:46.720><c> every</c><00:05:47.360><c> pattern</c><00:05:48.000><c> it</c><00:05:48.160><c> could</c><00:05:48.400><c> fall</c><00:05:48.800><c> into</c><00:05:49.280><c> if</c>

00:05:49.430 --> 00:05:49.440 align:start position:0%
at every pattern it could fall into if
 

00:05:49.440 --> 00:05:52.469 align:start position:0%
at every pattern it could fall into if
we<00:05:49.680><c> changed</c><00:05:50.479><c> one</c><00:05:50.800><c> character</c><00:05:51.360><c> at</c><00:05:51.520><c> most</c><00:05:52.080><c> if</c><00:05:52.240><c> we</c>

00:05:52.469 --> 00:05:52.479 align:start position:0%
we changed one character at most if we
 

00:05:52.479 --> 00:05:55.029 align:start position:0%
we changed one character at most if we
changed<00:05:53.039><c> the</c><00:05:53.280><c> first</c><00:05:53.600><c> character</c><00:05:54.000><c> to</c><00:05:54.400><c> any</c><00:05:54.720><c> other</c>

00:05:55.029 --> 00:05:55.039 align:start position:0%
changed the first character to any other
 

00:05:55.039 --> 00:05:57.909 align:start position:0%
changed the first character to any other
character<00:05:55.680><c> we</c><00:05:55.840><c> could</c><00:05:56.080><c> transform</c><00:05:56.720><c> this</c><00:05:57.039><c> into</c>

00:05:57.909 --> 00:05:57.919 align:start position:0%
character we could transform this into
 

00:05:57.919 --> 00:06:01.189 align:start position:0%
character we could transform this into
star<00:05:58.400><c> for</c><00:05:58.639><c> the</c><00:05:58.880><c> wild</c><00:05:59.280><c> card</c><00:05:59.759><c> and</c><00:05:59.919><c> then</c><00:06:00.240><c> o</c><00:06:00.960><c> t</c>

00:06:01.189 --> 00:06:01.199 align:start position:0%
star for the wild card and then o t
 

00:06:01.199 --> 00:06:02.629 align:start position:0%
star for the wild card and then o t
right<00:06:01.360><c> we</c><00:06:01.600><c> changed</c><00:06:01.840><c> the</c><00:06:02.000><c> first</c><00:06:02.240><c> character</c><00:06:02.560><c> we</c>

00:06:02.629 --> 00:06:02.639 align:start position:0%
right we changed the first character we
 

00:06:02.639 --> 00:06:05.430 align:start position:0%
right we changed the first character we
could<00:06:02.880><c> also</c><00:06:03.280><c> transform</c><00:06:03.840><c> it</c><00:06:04.080><c> into</c><00:06:04.560><c> h</c><00:06:05.120><c> change</c>

00:06:05.430 --> 00:06:05.440 align:start position:0%
could also transform it into h change
 

00:06:05.440 --> 00:06:07.510 align:start position:0%
could also transform it into h change
the<00:06:05.600><c> middle</c><00:06:06.000><c> character</c><00:06:06.560><c> star</c>

00:06:07.510 --> 00:06:07.520 align:start position:0%
the middle character star
 

00:06:07.520 --> 00:06:10.230 align:start position:0%
the middle character star
and<00:06:07.680><c> then</c><00:06:08.000><c> t</c><00:06:08.560><c> right</c><00:06:08.800><c> and</c><00:06:08.880><c> then</c><00:06:09.280><c> also</c><00:06:09.680><c> to</c><00:06:09.919><c> a</c>

00:06:10.230 --> 00:06:10.240 align:start position:0%
and then t right and then also to a
 

00:06:10.240 --> 00:06:14.550 align:start position:0%
and then t right and then also to a
third<00:06:10.800><c> word</c><00:06:11.440><c> h</c><00:06:11.919><c> o</c><00:06:12.639><c> and</c><00:06:13.280><c> the</c><00:06:13.520><c> last</c><00:06:14.080><c> character</c><00:06:14.479><c> is</c>

00:06:14.550 --> 00:06:14.560 align:start position:0%
third word h o and the last character is
 

00:06:14.560 --> 00:06:16.550 align:start position:0%
third word h o and the last character is
going<00:06:14.639><c> to</c><00:06:14.720><c> be</c><00:06:14.880><c> a</c><00:06:14.960><c> star</c><00:06:15.440><c> right</c><00:06:15.840><c> so</c><00:06:16.160><c> these</c><00:06:16.479><c> are</c>

00:06:16.550 --> 00:06:16.560 align:start position:0%
going to be a star right so these are
 

00:06:16.560 --> 00:06:20.309 align:start position:0%
going to be a star right so these are
the<00:06:16.800><c> three</c><00:06:17.360><c> patterns</c><00:06:18.160><c> that</c><00:06:18.560><c> hot</c><00:06:19.039><c> fits</c><00:06:19.600><c> into</c>

00:06:20.309 --> 00:06:20.319 align:start position:0%
the three patterns that hot fits into
 

00:06:20.319 --> 00:06:21.909 align:start position:0%
the three patterns that hot fits into
and<00:06:20.479><c> now</c><00:06:20.639><c> let's</c><00:06:20.880><c> take</c><00:06:21.039><c> a</c><00:06:21.120><c> look</c><00:06:21.360><c> at</c><00:06:21.520><c> a</c><00:06:21.600><c> different</c>

00:06:21.909 --> 00:06:21.919 align:start position:0%
and now let's take a look at a different
 

00:06:21.919 --> 00:06:25.110 align:start position:0%
and now let's take a look at a different
word<00:06:22.720><c> dot</c><00:06:23.280><c> and</c><00:06:23.440><c> let's</c><00:06:23.680><c> quickly</c><00:06:24.479><c> do</c><00:06:24.720><c> the</c><00:06:24.880><c> same</c>

00:06:25.110 --> 00:06:25.120 align:start position:0%
word dot and let's quickly do the same
 

00:06:25.120 --> 00:06:27.670 align:start position:0%
word dot and let's quickly do the same
thing<00:06:25.360><c> for</c><00:06:25.680><c> this</c><00:06:26.160><c> so</c><00:06:26.560><c> the</c><00:06:26.720><c> first</c><00:06:27.199><c> pattern</c><00:06:27.520><c> will</c>

00:06:27.670 --> 00:06:27.680 align:start position:0%
thing for this so the first pattern will
 

00:06:27.680 --> 00:06:31.430 align:start position:0%
thing for this so the first pattern will
be<00:06:28.240><c> uh</c><00:06:28.639><c> star</c><00:06:29.120><c> o</c><00:06:29.360><c> t</c><00:06:30.000><c> next</c><00:06:30.560><c> d</c>

00:06:31.430 --> 00:06:31.440 align:start position:0%
be uh star o t next d
 

00:06:31.440 --> 00:06:32.870 align:start position:0%
be uh star o t next d
star<00:06:32.160><c> t</c>

00:06:32.870 --> 00:06:32.880 align:start position:0%
star t
 

00:06:32.880 --> 00:06:34.629 align:start position:0%
star t
lastly<00:06:34.000><c> d</c>

00:06:34.629 --> 00:06:34.639 align:start position:0%
lastly d
 

00:06:34.639 --> 00:06:37.590 align:start position:0%
lastly d
o<00:06:35.360><c> star</c><00:06:35.919><c> so</c><00:06:36.160><c> notice</c><00:06:36.479><c> how</c><00:06:36.720><c> okay</c><00:06:37.039><c> these</c><00:06:37.360><c> two</c>

00:06:37.590 --> 00:06:37.600 align:start position:0%
o star so notice how okay these two
 

00:06:37.600 --> 00:06:39.749 align:start position:0%
o star so notice how okay these two
patterns<00:06:38.080><c> between</c><00:06:38.400><c> the</c><00:06:38.479><c> words</c><00:06:38.800><c> are</c><00:06:38.960><c> different</c>

00:06:39.749 --> 00:06:39.759 align:start position:0%
patterns between the words are different
 

00:06:39.759 --> 00:06:41.590 align:start position:0%
patterns between the words are different
these<00:06:40.080><c> two</c><00:06:40.319><c> patterns</c><00:06:40.800><c> between</c><00:06:41.120><c> the</c><00:06:41.199><c> words</c><00:06:41.520><c> are</c>

00:06:41.590 --> 00:06:41.600 align:start position:0%
these two patterns between the words are
 

00:06:41.600 --> 00:06:44.390 align:start position:0%
these two patterns between the words are
different<00:06:42.000><c> but</c><00:06:42.160><c> the</c><00:06:42.560><c> first</c><00:06:43.120><c> pattern</c><00:06:43.840><c> for</c><00:06:44.080><c> each</c>

00:06:44.390 --> 00:06:44.400 align:start position:0%
different but the first pattern for each
 

00:06:44.400 --> 00:06:48.070 align:start position:0%
different but the first pattern for each
word<00:06:44.800><c> is</c><00:06:44.960><c> the</c><00:06:45.199><c> exact</c><00:06:45.759><c> same</c><00:06:46.560><c> since</c><00:06:47.039><c> these</c><00:06:47.520><c> both</c>

00:06:48.070 --> 00:06:48.080 align:start position:0%
word is the exact same since these both
 

00:06:48.080 --> 00:06:51.110 align:start position:0%
word is the exact same since these both
both<00:06:48.319><c> of</c><00:06:48.479><c> these</c><00:06:48.720><c> words</c><00:06:49.440><c> hot</c><00:06:50.080><c> and</c><00:06:50.319><c> dot</c><00:06:50.720><c> have</c><00:06:50.880><c> the</c>

00:06:51.110 --> 00:06:51.120 align:start position:0%
both of these words hot and dot have the
 

00:06:51.120 --> 00:06:52.629 align:start position:0%
both of these words hot and dot have the
same<00:06:51.599><c> pattern</c>

00:06:52.629 --> 00:06:52.639 align:start position:0%
same pattern
 

00:06:52.639 --> 00:06:54.550 align:start position:0%
same pattern
when<00:06:52.800><c> we</c><00:06:52.960><c> remove</c><00:06:53.360><c> the</c><00:06:53.440><c> first</c><00:06:53.759><c> character</c><00:06:54.160><c> that</c>

00:06:54.550 --> 00:06:54.560 align:start position:0%
when we remove the first character that
 

00:06:54.560 --> 00:06:57.430 align:start position:0%
when we remove the first character that
means<00:06:55.199><c> that</c><00:06:55.520><c> they</c><00:06:55.840><c> have</c><00:06:56.400><c> a</c><00:06:56.639><c> one</c><00:06:56.960><c> character</c>

00:06:57.430 --> 00:06:57.440 align:start position:0%
means that they have a one character
 

00:06:57.440 --> 00:06:59.189 align:start position:0%
means that they have a one character
difference<00:06:57.919><c> between</c><00:06:58.400><c> these</c><00:06:58.639><c> words</c><00:06:58.960><c> and</c><00:06:59.039><c> that</c>

00:06:59.189 --> 00:06:59.199 align:start position:0%
difference between these words and that
 

00:06:59.199 --> 00:07:01.029 align:start position:0%
difference between these words and that
makes<00:06:59.520><c> sense</c><00:06:59.840><c> right</c><00:07:00.160><c> if</c><00:07:00.240><c> we</c><00:07:00.400><c> change</c><00:07:00.720><c> the</c><00:07:00.800><c> first</c>

00:07:01.029 --> 00:07:01.039 align:start position:0%
makes sense right if we change the first
 

00:07:01.039 --> 00:07:03.350 align:start position:0%
makes sense right if we change the first
character<00:07:01.520><c> from</c><00:07:01.680><c> here</c><00:07:01.919><c> to</c><00:07:02.160><c> a</c><00:07:02.319><c> d</c><00:07:02.720><c> or</c><00:07:02.960><c> change</c><00:07:03.280><c> the</c>

00:07:03.350 --> 00:07:03.360 align:start position:0%
character from here to a d or change the
 

00:07:03.360 --> 00:07:05.589 align:start position:0%
character from here to a d or change the
first<00:07:03.599><c> character</c><00:07:03.919><c> from</c><00:07:04.080><c> here</c><00:07:04.400><c> to</c><00:07:04.560><c> an</c><00:07:04.880><c> h</c><00:07:05.360><c> these</c>

00:07:05.589 --> 00:07:05.599 align:start position:0%
first character from here to an h these
 

00:07:05.599 --> 00:07:07.270 align:start position:0%
first character from here to an h these
two<00:07:05.759><c> words</c><00:07:06.000><c> will</c><00:07:06.160><c> be</c><00:07:06.319><c> the</c><00:07:06.479><c> same</c><00:07:06.960><c> that</c><00:07:07.120><c> means</c>

00:07:07.270 --> 00:07:07.280 align:start position:0%
two words will be the same that means
 

00:07:07.280 --> 00:07:09.270 align:start position:0%
two words will be the same that means
they<00:07:07.440><c> have</c><00:07:07.520><c> a</c><00:07:07.680><c> one</c><00:07:07.919><c> character</c><00:07:08.400><c> difference</c><00:07:08.960><c> so</c>

00:07:09.270 --> 00:07:09.280 align:start position:0%
they have a one character difference so
 

00:07:09.280 --> 00:07:11.830 align:start position:0%
they have a one character difference so
using<00:07:09.680><c> this</c><00:07:10.080><c> idea</c><00:07:10.880><c> we</c><00:07:11.120><c> are</c><00:07:11.199><c> going</c><00:07:11.360><c> to</c><00:07:11.440><c> create</c>

00:07:11.830 --> 00:07:11.840 align:start position:0%
using this idea we are going to create
 

00:07:11.840 --> 00:07:14.309 align:start position:0%
using this idea we are going to create
an<00:07:12.000><c> adjacency</c><00:07:12.720><c> list</c><00:07:13.039><c> where</c><00:07:13.440><c> the</c><00:07:13.840><c> where</c><00:07:14.000><c> the</c>

00:07:14.309 --> 00:07:14.319 align:start position:0%
an adjacency list where the where the
 

00:07:14.319 --> 00:07:16.550 align:start position:0%
an adjacency list where the where the
key<00:07:14.720><c> of</c><00:07:14.880><c> the</c><00:07:15.039><c> adjacency</c><00:07:15.680><c> list</c><00:07:16.000><c> is</c><00:07:16.080><c> going</c><00:07:16.240><c> to</c><00:07:16.400><c> be</c>

00:07:16.550 --> 00:07:16.560 align:start position:0%
key of the adjacency list is going to be
 

00:07:16.560 --> 00:07:18.790 align:start position:0%
key of the adjacency list is going to be
the<00:07:16.800><c> pattern</c><00:07:17.680><c> by</c><00:07:17.919><c> pattern</c><00:07:18.240><c> i</c><00:07:18.400><c> mean</c><00:07:18.560><c> one</c><00:07:18.720><c> of</c>

00:07:18.790 --> 00:07:18.800 align:start position:0%
the pattern by pattern i mean one of
 

00:07:18.800 --> 00:07:21.670 align:start position:0%
the pattern by pattern i mean one of
these<00:07:19.120><c> wild</c><00:07:19.520><c> card</c><00:07:19.840><c> type</c><00:07:20.080><c> strings</c><00:07:20.800><c> and</c><00:07:21.280><c> the</c>

00:07:21.670 --> 00:07:21.680 align:start position:0%
these wild card type strings and the
 

00:07:21.680 --> 00:07:24.469 align:start position:0%
these wild card type strings and the
value<00:07:22.240><c> of</c><00:07:22.479><c> this</c><00:07:22.880><c> adjacency</c><00:07:23.520><c> list</c><00:07:24.000><c> in</c><00:07:24.080><c> our</c><00:07:24.240><c> case</c>

00:07:24.469 --> 00:07:24.479 align:start position:0%
value of this adjacency list in our case
 

00:07:24.479 --> 00:07:26.070 align:start position:0%
value of this adjacency list in our case
it's<00:07:24.639><c> going</c><00:07:24.720><c> to</c><00:07:24.800><c> be</c><00:07:25.039><c> a</c><00:07:25.199><c> hash</c><00:07:25.520><c> map</c><00:07:25.759><c> or</c><00:07:26.000><c> a</c>

00:07:26.070 --> 00:07:26.080 align:start position:0%
it's going to be a hash map or a
 

00:07:26.080 --> 00:07:27.990 align:start position:0%
it's going to be a hash map or a
dictionary<00:07:26.639><c> so</c><00:07:26.960><c> each</c><00:07:27.360><c> pattern</c><00:07:27.759><c> is</c><00:07:27.840><c> going</c><00:07:27.919><c> to</c>

00:07:27.990 --> 00:07:28.000 align:start position:0%
dictionary so each pattern is going to
 

00:07:28.000 --> 00:07:30.390 align:start position:0%
dictionary so each pattern is going to
be<00:07:28.080><c> mapped</c><00:07:28.400><c> to</c><00:07:28.560><c> a</c><00:07:28.800><c> list</c><00:07:29.199><c> of</c><00:07:29.440><c> words</c><00:07:30.000><c> so</c><00:07:30.160><c> each</c>

00:07:30.390 --> 00:07:30.400 align:start position:0%
be mapped to a list of words so each
 

00:07:30.400 --> 00:07:31.830 align:start position:0%
be mapped to a list of words so each
pattern<00:07:30.720><c> to</c><00:07:30.800><c> a</c><00:07:30.880><c> list</c><00:07:31.120><c> of</c><00:07:31.199><c> words</c><00:07:31.520><c> so</c><00:07:31.680><c> for</c>

00:07:31.830 --> 00:07:31.840 align:start position:0%
pattern to a list of words so for
 

00:07:31.840 --> 00:07:35.510 align:start position:0%
pattern to a list of words so for
example<00:07:32.720><c> if</c><00:07:32.960><c> we</c><00:07:33.120><c> take</c><00:07:33.360><c> the</c><00:07:33.520><c> pattern</c><00:07:34.319><c> star</c>

00:07:35.510 --> 00:07:35.520 align:start position:0%
example if we take the pattern star
 

00:07:35.520 --> 00:07:36.309 align:start position:0%
example if we take the pattern star
o

00:07:36.309 --> 00:07:36.319 align:start position:0%
o
 

00:07:36.319 --> 00:07:38.469 align:start position:0%
o
t<00:07:36.880><c> we'll</c><00:07:37.039><c> have</c><00:07:37.199><c> a</c><00:07:37.360><c> corresponding</c><00:07:38.080><c> list</c><00:07:38.400><c> of</c>

00:07:38.469 --> 00:07:38.479 align:start position:0%
t we'll have a corresponding list of
 

00:07:38.479 --> 00:07:40.710 align:start position:0%
t we'll have a corresponding list of
words<00:07:38.800><c> for</c><00:07:39.199><c> all</c><00:07:39.520><c> words</c><00:07:39.919><c> that</c><00:07:40.160><c> fit</c><00:07:40.400><c> this</c>

00:07:40.710 --> 00:07:40.720 align:start position:0%
words for all words that fit this
 

00:07:40.720 --> 00:07:42.550 align:start position:0%
words for all words that fit this
pattern<00:07:41.039><c> right</c><00:07:41.199><c> we</c><00:07:41.360><c> so</c><00:07:41.520><c> far</c><00:07:41.759><c> we</c><00:07:41.919><c> found</c><00:07:42.240><c> hot</c>

00:07:42.550 --> 00:07:42.560 align:start position:0%
pattern right we so far we found hot
 

00:07:42.560 --> 00:07:45.350 align:start position:0%
pattern right we so far we found hot
fits<00:07:42.800><c> this</c><00:07:43.039><c> pattern</c><00:07:43.599><c> we</c><00:07:43.840><c> also</c><00:07:44.240><c> found</c><00:07:44.479><c> that</c><00:07:44.960><c> dot</c>

00:07:45.350 --> 00:07:45.360 align:start position:0%
fits this pattern we also found that dot
 

00:07:45.360 --> 00:07:47.189 align:start position:0%
fits this pattern we also found that dot
fits<00:07:45.680><c> this</c><00:07:45.919><c> pattern</c>

00:07:47.189 --> 00:07:47.199 align:start position:0%
fits this pattern
 

00:07:47.199 --> 00:07:49.909 align:start position:0%
fits this pattern
and<00:07:47.440><c> by</c><00:07:47.680><c> just</c><00:07:47.919><c> looking</c><00:07:48.319><c> at</c><00:07:48.560><c> our</c><00:07:49.280><c> list</c><00:07:49.680><c> we</c><00:07:49.840><c> can</c>

00:07:49.909 --> 00:07:49.919 align:start position:0%
and by just looking at our list we can
 

00:07:49.919 --> 00:07:52.469 align:start position:0%
and by just looking at our list we can
see<00:07:50.160><c> that</c><00:07:50.479><c> lot</c><00:07:51.039><c> is</c><00:07:51.360><c> also</c><00:07:51.759><c> going</c><00:07:51.840><c> to</c><00:07:52.000><c> fit</c><00:07:52.240><c> this</c>

00:07:52.469 --> 00:07:52.479 align:start position:0%
see that lot is also going to fit this
 

00:07:52.479 --> 00:07:55.430 align:start position:0%
see that lot is also going to fit this
pattern<00:07:52.800><c> so</c><00:07:52.960><c> we</c><00:07:53.120><c> have</c><00:07:53.360><c> three</c><00:07:54.160><c> words</c><00:07:54.800><c> that</c><00:07:55.039><c> fit</c>

00:07:55.430 --> 00:07:55.440 align:start position:0%
pattern so we have three words that fit
 

00:07:55.440 --> 00:07:58.629 align:start position:0%
pattern so we have three words that fit
this<00:07:55.840><c> pattern</c><00:07:56.560><c> so</c><00:07:56.879><c> if</c><00:07:57.199><c> we</c><00:07:57.520><c> wanted</c><00:07:58.080><c> all</c><00:07:58.319><c> the</c>

00:07:58.629 --> 00:07:58.639 align:start position:0%
this pattern so if we wanted all the
 

00:07:58.639 --> 00:08:02.309 align:start position:0%
this pattern so if we wanted all the
neighbors<00:07:59.440><c> of</c><00:07:59.840><c> hot</c><00:08:00.319><c> in</c><00:08:00.720><c> our</c><00:08:01.120><c> adjacency</c><00:08:01.840><c> list</c>

00:08:02.309 --> 00:08:02.319 align:start position:0%
neighbors of hot in our adjacency list
 

00:08:02.319 --> 00:08:03.990 align:start position:0%
neighbors of hot in our adjacency list
how<00:08:02.479><c> would</c><00:08:02.720><c> we</c><00:08:02.960><c> find</c><00:08:03.199><c> them</c><00:08:03.360><c> right</c><00:08:03.520><c> because</c><00:08:03.759><c> the</c>

00:08:03.990 --> 00:08:04.000 align:start position:0%
how would we find them right because the
 

00:08:04.000 --> 00:08:06.230 align:start position:0%
how would we find them right because the
key<00:08:04.479><c> we're</c><00:08:04.639><c> not</c><00:08:04.800><c> it's</c><00:08:04.960><c> not</c><00:08:05.199><c> it's</c><00:08:05.360><c> not</c><00:08:05.520><c> like</c><00:08:05.840><c> hot</c>

00:08:06.230 --> 00:08:06.240 align:start position:0%
key we're not it's not it's not like hot
 

00:08:06.240 --> 00:08:08.790 align:start position:0%
key we're not it's not it's not like hot
is<00:08:06.479><c> the</c><00:08:06.720><c> key</c><00:08:07.120><c> of</c><00:08:07.280><c> this</c><00:08:07.520><c> adjacency</c><00:08:08.160><c> list</c><00:08:08.479><c> so</c><00:08:08.639><c> to</c>

00:08:08.790 --> 00:08:08.800 align:start position:0%
is the key of this adjacency list so to
 

00:08:08.800 --> 00:08:11.029 align:start position:0%
is the key of this adjacency list so to
find<00:08:09.120><c> all</c><00:08:09.280><c> the</c><00:08:09.520><c> neighbors</c><00:08:10.080><c> of</c><00:08:10.319><c> hot</c><00:08:10.639><c> what</c><00:08:10.800><c> we</c>

00:08:11.029 --> 00:08:11.039 align:start position:0%
find all the neighbors of hot what we
 

00:08:11.039 --> 00:08:13.909 align:start position:0%
find all the neighbors of hot what we
have<00:08:11.120><c> to</c><00:08:11.280><c> do</c><00:08:11.759><c> is</c><00:08:12.080><c> first</c><00:08:12.479><c> for</c><00:08:12.800><c> for</c><00:08:13.039><c> hot</c><00:08:13.360><c> find</c><00:08:13.759><c> all</c>

00:08:13.909 --> 00:08:13.919 align:start position:0%
have to do is first for for hot find all
 

00:08:13.919 --> 00:08:16.309 align:start position:0%
have to do is first for for hot find all
of<00:08:14.080><c> its</c><00:08:14.319><c> patterns</c><00:08:14.960><c> right</c><00:08:15.199><c> the</c><00:08:15.280><c> first</c><00:08:15.599><c> pattern</c>

00:08:16.309 --> 00:08:16.319 align:start position:0%
of its patterns right the first pattern
 

00:08:16.319 --> 00:08:18.309 align:start position:0%
of its patterns right the first pattern
star<00:08:16.720><c> ot</c><00:08:17.120><c> will</c><00:08:17.280><c> go</c><00:08:17.520><c> to</c><00:08:17.599><c> that</c><00:08:17.759><c> straw</c><00:08:18.080><c> and</c><00:08:18.160><c> say</c>

00:08:18.309 --> 00:08:18.319 align:start position:0%
star ot will go to that straw and say
 

00:08:18.319 --> 00:08:21.350 align:start position:0%
star ot will go to that straw and say
okay<00:08:18.639><c> these</c><00:08:18.960><c> are</c><00:08:19.120><c> all</c><00:08:19.280><c> the</c><00:08:19.599><c> neighbors</c><00:08:20.319><c> of</c><00:08:20.639><c> hot</c>

00:08:21.350 --> 00:08:21.360 align:start position:0%
okay these are all the neighbors of hot
 

00:08:21.360 --> 00:08:23.029 align:start position:0%
okay these are all the neighbors of hot
these<00:08:21.599><c> are</c><00:08:21.759><c> all</c><00:08:21.840><c> the</c><00:08:22.000><c> neighbors</c><00:08:22.400><c> in</c><00:08:22.479><c> the</c><00:08:22.639><c> graph</c>

00:08:23.029 --> 00:08:23.039 align:start position:0%
these are all the neighbors in the graph
 

00:08:23.039 --> 00:08:25.270 align:start position:0%
these are all the neighbors in the graph
of<00:08:23.199><c> course</c><00:08:23.680><c> we</c><00:08:23.840><c> can't</c><00:08:24.080><c> include</c><00:08:24.479><c> itself</c><00:08:25.039><c> so</c>

00:08:25.270 --> 00:08:25.280 align:start position:0%
of course we can't include itself so
 

00:08:25.280 --> 00:08:27.749 align:start position:0%
of course we can't include itself so
we'd<00:08:25.440><c> say</c><00:08:25.599><c> okay</c><00:08:26.000><c> dot</c><00:08:26.560><c> and</c><00:08:26.879><c> lot</c><00:08:27.280><c> are</c><00:08:27.440><c> going</c><00:08:27.680><c> to</c>

00:08:27.749 --> 00:08:27.759 align:start position:0%
we'd say okay dot and lot are going to
 

00:08:27.759 --> 00:08:30.309 align:start position:0%
we'd say okay dot and lot are going to
be<00:08:27.919><c> the</c><00:08:28.080><c> neighbors</c><00:08:28.479><c> of</c><00:08:28.720><c> hot</c><00:08:29.199><c> but</c><00:08:29.360><c> we</c><00:08:29.599><c> also</c><00:08:29.840><c> know</c>

00:08:30.309 --> 00:08:30.319 align:start position:0%
be the neighbors of hot but we also know
 

00:08:30.319 --> 00:08:32.149 align:start position:0%
be the neighbors of hot but we also know
that<00:08:30.560><c> hot</c><00:08:30.800><c> could</c><00:08:30.960><c> have</c><00:08:31.120><c> a</c><00:08:31.199><c> couple</c><00:08:31.680><c> other</c>

00:08:32.149 --> 00:08:32.159 align:start position:0%
that hot could have a couple other
 

00:08:32.159 --> 00:08:35.110 align:start position:0%
that hot could have a couple other
patterns<00:08:32.560><c> that</c><00:08:32.719><c> it</c><00:08:32.800><c> fits</c><00:08:33.039><c> into</c><00:08:33.599><c> h</c><00:08:34.000><c> star</c><00:08:34.479><c> t</c><00:08:35.039><c> are</c>

00:08:35.110 --> 00:08:35.120 align:start position:0%
patterns that it fits into h star t are
 

00:08:35.120 --> 00:08:37.909 align:start position:0%
patterns that it fits into h star t are
there<00:08:35.440><c> any</c><00:08:35.680><c> other</c><00:08:35.919><c> words</c><00:08:36.399><c> in</c><00:08:36.560><c> our</c><00:08:36.880><c> list</c><00:08:37.519><c> that</c>

00:08:37.909 --> 00:08:37.919 align:start position:0%
there any other words in our list that
 

00:08:37.919 --> 00:08:40.389 align:start position:0%
there any other words in our list that
match<00:08:38.240><c> this</c><00:08:38.479><c> pattern</c><00:08:38.959><c> well</c><00:08:39.680><c> hit</c>

00:08:40.389 --> 00:08:40.399 align:start position:0%
match this pattern well hit
 

00:08:40.399 --> 00:08:42.709 align:start position:0%
match this pattern well hit
is<00:08:40.640><c> going</c><00:08:40.880><c> to</c><00:08:41.039><c> match</c><00:08:41.279><c> that</c><00:08:41.519><c> right</c><00:08:41.919><c> hit</c><00:08:42.479><c> is</c>

00:08:42.709 --> 00:08:42.719 align:start position:0%
is going to match that right hit is
 

00:08:42.719 --> 00:08:45.829 align:start position:0%
is going to match that right hit is
going<00:08:42.880><c> to</c><00:08:43.039><c> match</c><00:08:43.279><c> the</c><00:08:43.440><c> pattern</c><00:08:44.240><c> h</c><00:08:44.640><c> star</c><00:08:45.120><c> t</c><00:08:45.600><c> so</c>

00:08:45.829 --> 00:08:45.839 align:start position:0%
going to match the pattern h star t so
 

00:08:45.839 --> 00:08:48.230 align:start position:0%
going to match the pattern h star t so
in<00:08:46.000><c> that</c><00:08:46.240><c> list</c><00:08:46.480><c> we</c><00:08:46.640><c> would</c><00:08:46.800><c> have</c><00:08:46.959><c> hot</c><00:08:47.600><c> and</c><00:08:47.839><c> hit</c>

00:08:48.230 --> 00:08:48.240 align:start position:0%
in that list we would have hot and hit
 

00:08:48.240 --> 00:08:50.389 align:start position:0%
in that list we would have hot and hit
so<00:08:48.800><c> that's</c><00:08:49.040><c> how</c><00:08:49.200><c> we'd</c><00:08:49.360><c> get</c><00:08:49.519><c> another</c><00:08:49.920><c> neighbor</c>

00:08:50.389 --> 00:08:50.399 align:start position:0%
so that's how we'd get another neighbor
 

00:08:50.399 --> 00:08:52.470 align:start position:0%
so that's how we'd get another neighbor
for<00:08:50.560><c> hot</c><00:08:51.120><c> and</c><00:08:51.360><c> lastly</c><00:08:51.760><c> we'd</c><00:08:52.000><c> see</c><00:08:52.240><c> are</c><00:08:52.320><c> there</c>

00:08:52.470 --> 00:08:52.480 align:start position:0%
for hot and lastly we'd see are there
 

00:08:52.480 --> 00:08:54.710 align:start position:0%
for hot and lastly we'd see are there
any<00:08:52.720><c> other</c><00:08:52.880><c> words</c><00:08:53.200><c> that</c><00:08:53.360><c> fit</c><00:08:53.600><c> this</c><00:08:53.839><c> pattern</c><00:08:54.399><c> h</c>

00:08:54.710 --> 00:08:54.720 align:start position:0%
any other words that fit this pattern h
 

00:08:54.720 --> 00:08:57.670 align:start position:0%
any other words that fit this pattern h
o<00:08:55.120><c> star</c><00:08:55.839><c> in</c><00:08:56.080><c> our</c><00:08:56.320><c> list</c><00:08:56.640><c> you</c><00:08:56.800><c> can</c><00:08:56.959><c> tell</c><00:08:57.360><c> that</c><00:08:57.600><c> i</c>

00:08:57.670 --> 00:08:57.680 align:start position:0%
o star in our list you can tell that i
 

00:08:57.680 --> 00:08:59.269 align:start position:0%
o star in our list you can tell that i
don't<00:08:57.920><c> think</c><00:08:58.160><c> any</c><00:08:58.399><c> other</c><00:08:58.640><c> words</c><00:08:58.959><c> are</c><00:08:59.040><c> going</c><00:08:59.120><c> to</c>

00:08:59.269 --> 00:08:59.279 align:start position:0%
don't think any other words are going to
 

00:08:59.279 --> 00:09:01.750 align:start position:0%
don't think any other words are going to
fit<00:08:59.519><c> that</c><00:08:59.680><c> pattern</c><00:09:00.240><c> only</c><00:09:00.720><c> hot</c><00:09:01.040><c> itself</c><00:09:01.440><c> fits</c>

00:09:01.750 --> 00:09:01.760 align:start position:0%
fit that pattern only hot itself fits
 

00:09:01.760 --> 00:09:03.030 align:start position:0%
fit that pattern only hot itself fits
that<00:09:01.920><c> pattern</c><00:09:02.160><c> so</c><00:09:02.320><c> it</c><00:09:02.399><c> doesn't</c><00:09:02.640><c> have</c><00:09:02.880><c> any</c>

00:09:03.030 --> 00:09:03.040 align:start position:0%
that pattern so it doesn't have any
 

00:09:03.040 --> 00:09:05.030 align:start position:0%
that pattern so it doesn't have any
additional<00:09:03.519><c> neighbors</c><00:09:04.080><c> so</c><00:09:04.480><c> the</c><00:09:04.720><c> all</c><00:09:04.880><c> the</c>

00:09:05.030 --> 00:09:05.040 align:start position:0%
additional neighbors so the all the
 

00:09:05.040 --> 00:09:08.870 align:start position:0%
additional neighbors so the all the
neighbors<00:09:05.519><c> of</c><00:09:05.760><c> hot</c><00:09:06.240><c> are</c><00:09:06.399><c> going</c><00:09:06.640><c> to</c><00:09:06.880><c> be</c><00:09:07.440><c> dot</c><00:09:08.160><c> lot</c>

00:09:08.870 --> 00:09:08.880 align:start position:0%
neighbors of hot are going to be dot lot
 

00:09:08.880 --> 00:09:11.829 align:start position:0%
neighbors of hot are going to be dot lot
and<00:09:09.519><c> hit</c><00:09:09.839><c> from</c><00:09:10.080><c> up</c><00:09:10.240><c> above</c><00:09:10.640><c> here</c><00:09:11.120><c> and</c><00:09:11.279><c> so</c><00:09:11.600><c> how</c>

00:09:11.829 --> 00:09:11.839 align:start position:0%
and hit from up above here and so how
 

00:09:11.839 --> 00:09:13.829 align:start position:0%
and hit from up above here and so how
are<00:09:11.920><c> we</c><00:09:12.240><c> finding</c><00:09:12.640><c> the</c><00:09:12.800><c> neighbors</c><00:09:13.600><c> so</c>

00:09:13.829 --> 00:09:13.839 align:start position:0%
are we finding the neighbors so
 

00:09:13.839 --> 00:09:15.430 align:start position:0%
are we finding the neighbors so
basically<00:09:14.240><c> what's</c><00:09:14.399><c> the</c><00:09:14.560><c> computation</c><00:09:15.200><c> of</c><00:09:15.279><c> what</c>

00:09:15.430 --> 00:09:15.440 align:start position:0%
basically what's the computation of what
 

00:09:15.440 --> 00:09:18.310 align:start position:0%
basically what's the computation of what
i<00:09:15.600><c> just</c><00:09:15.920><c> did</c><00:09:16.320><c> it's</c><00:09:16.720><c> it's</c><00:09:16.959><c> going</c><00:09:17.200><c> to</c><00:09:17.440><c> be</c><00:09:17.920><c> since</c>

00:09:18.310 --> 00:09:18.320 align:start position:0%
i just did it's it's going to be since
 

00:09:18.320 --> 00:09:19.509 align:start position:0%
i just did it's it's going to be since
to<00:09:18.480><c> find</c><00:09:18.720><c> all</c><00:09:18.800><c> the</c><00:09:18.959><c> neighbors</c><00:09:19.279><c> we're</c><00:09:19.360><c> going</c><00:09:19.440><c> to</c>

00:09:19.509 --> 00:09:19.519 align:start position:0%
to find all the neighbors we're going to
 

00:09:19.519 --> 00:09:21.590 align:start position:0%
to find all the neighbors we're going to
have<00:09:19.680><c> to</c><00:09:19.760><c> go</c><00:09:20.080><c> from</c><00:09:20.320><c> hot</c><00:09:20.720><c> consider</c><00:09:21.200><c> okay</c><00:09:21.360><c> if</c><00:09:21.519><c> we</c>

00:09:21.590 --> 00:09:21.600 align:start position:0%
have to go from hot consider okay if we
 

00:09:21.600 --> 00:09:22.949 align:start position:0%
have to go from hot consider okay if we
remove<00:09:21.920><c> this</c><00:09:22.080><c> character</c><00:09:22.399><c> or</c><00:09:22.480><c> remove</c><00:09:22.800><c> this</c>

00:09:22.949 --> 00:09:22.959 align:start position:0%
remove this character or remove this
 

00:09:22.959 --> 00:09:24.710 align:start position:0%
remove this character or remove this
character<00:09:23.279><c> remove</c><00:09:23.680><c> this</c><00:09:23.839><c> character</c><00:09:24.480><c> so</c>

00:09:24.710 --> 00:09:24.720 align:start position:0%
character remove this character so
 

00:09:24.720 --> 00:09:26.790 align:start position:0%
character remove this character so
basically<00:09:25.360><c> we're</c><00:09:25.600><c> going</c><00:09:25.760><c> through</c><00:09:26.080><c> every</c><00:09:26.399><c> word</c>

00:09:26.790 --> 00:09:26.800 align:start position:0%
basically we're going through every word
 

00:09:26.800 --> 00:09:29.110 align:start position:0%
basically we're going through every word
in<00:09:26.959><c> our</c><00:09:27.120><c> list</c><00:09:27.440><c> which</c><00:09:27.680><c> is</c><00:09:28.000><c> n</c><00:09:28.480><c> and</c><00:09:28.800><c> then</c><00:09:28.959><c> we're</c>

00:09:29.110 --> 00:09:29.120 align:start position:0%
in our list which is n and then we're
 

00:09:29.120 --> 00:09:30.389 align:start position:0%
in our list which is n and then we're
going<00:09:29.279><c> through</c><00:09:29.519><c> every</c><00:09:29.680><c> single</c><00:09:30.000><c> character</c>

00:09:30.389 --> 00:09:30.399 align:start position:0%
going through every single character
 

00:09:30.399 --> 00:09:32.949 align:start position:0%
going through every single character
that<00:09:30.560><c> we</c><00:09:30.720><c> remove</c><00:09:31.519><c> which</c><00:09:31.760><c> is</c><00:09:32.240><c> m</c>

00:09:32.949 --> 00:09:32.959 align:start position:0%
that we remove which is m
 

00:09:32.959 --> 00:09:34.310 align:start position:0%
that we remove which is m
right<00:09:33.120><c> so</c><00:09:33.279><c> that's</c><00:09:33.519><c> how</c><00:09:33.680><c> many</c><00:09:33.839><c> possible</c>

00:09:34.310 --> 00:09:34.320 align:start position:0%
right so that's how many possible
 

00:09:34.320 --> 00:09:35.910 align:start position:0%
right so that's how many possible
different<00:09:34.640><c> patterns</c><00:09:35.120><c> we</c><00:09:35.200><c> could</c><00:09:35.360><c> have</c><00:09:35.600><c> in</c>

00:09:35.910 --> 00:09:35.920 align:start position:0%
different patterns we could have in
 

00:09:35.920 --> 00:09:38.310 align:start position:0%
different patterns we could have in
total<00:09:36.320><c> and</c><00:09:36.480><c> then</c><00:09:36.720><c> to</c><00:09:36.880><c> actually</c><00:09:37.279><c> add</c><00:09:37.760><c> each</c><00:09:38.000><c> word</c>

00:09:38.310 --> 00:09:38.320 align:start position:0%
total and then to actually add each word
 

00:09:38.320 --> 00:09:40.230 align:start position:0%
total and then to actually add each word
to<00:09:38.480><c> the</c><00:09:38.560><c> list</c><00:09:38.800><c> is</c><00:09:38.959><c> going</c><00:09:39.120><c> to</c><00:09:39.200><c> be</c><00:09:39.440><c> another</c><00:09:39.920><c> m</c><00:09:40.080><c> so</c>

00:09:40.230 --> 00:09:40.240 align:start position:0%
to the list is going to be another m so
 

00:09:40.240 --> 00:09:41.509 align:start position:0%
to the list is going to be another m so
that's<00:09:40.480><c> kind</c><00:09:40.640><c> of</c><00:09:40.720><c> how</c><00:09:40.880><c> you</c><00:09:40.959><c> can</c><00:09:41.120><c> get</c><00:09:41.279><c> the</c>

00:09:41.509 --> 00:09:41.519 align:start position:0%
that's kind of how you can get the
 

00:09:41.519 --> 00:09:44.150 align:start position:0%
that's kind of how you can get the
complexity<00:09:42.240><c> n</c><00:09:42.480><c> times</c><00:09:42.959><c> m</c><00:09:43.200><c> squared</c><00:09:43.519><c> to</c><00:09:43.680><c> at</c><00:09:43.760><c> least</c>

00:09:44.150 --> 00:09:44.160 align:start position:0%
complexity n times m squared to at least
 

00:09:44.160 --> 00:09:46.150 align:start position:0%
complexity n times m squared to at least
generate<00:09:44.560><c> the</c><00:09:44.720><c> adjacency</c><00:09:45.360><c> list</c><00:09:45.760><c> now</c><00:09:45.920><c> let's</c>

00:09:46.150 --> 00:09:46.160 align:start position:0%
generate the adjacency list now let's
 

00:09:46.160 --> 00:09:48.230 align:start position:0%
generate the adjacency list now let's
assume<00:09:46.480><c> we</c><00:09:46.640><c> have</c><00:09:46.880><c> that</c><00:09:47.120><c> adjacency</c><00:09:47.680><c> list</c><00:09:48.080><c> and</c>

00:09:48.230 --> 00:09:48.240 align:start position:0%
assume we have that adjacency list and
 

00:09:48.240 --> 00:09:50.470 align:start position:0%
assume we have that adjacency list and
we<00:09:48.399><c> have</c><00:09:48.560><c> a</c><00:09:48.720><c> graph</c><00:09:49.360><c> then</c><00:09:49.680><c> the</c><00:09:49.920><c> algorithm</c><00:09:50.399><c> is</c>

00:09:50.470 --> 00:09:50.480 align:start position:0%
we have a graph then the algorithm is
 

00:09:50.480 --> 00:09:52.150 align:start position:0%
we have a graph then the algorithm is
actually<00:09:50.800><c> pretty</c><00:09:51.040><c> straightforward</c><00:09:51.920><c> it's</c>

00:09:52.150 --> 00:09:52.160 align:start position:0%
actually pretty straightforward it's
 

00:09:52.160 --> 00:09:55.030 align:start position:0%
actually pretty straightforward it's
just<00:09:52.320><c> going</c><00:09:52.480><c> to</c><00:09:52.560><c> be</c><00:09:52.800><c> a</c><00:09:52.959><c> basic</c><00:09:53.440><c> bfs</c><00:09:54.320><c> search</c><00:09:54.880><c> so</c>

00:09:55.030 --> 00:09:55.040 align:start position:0%
just going to be a basic bfs search so
 

00:09:55.040 --> 00:09:56.870 align:start position:0%
just going to be a basic bfs search so
this<00:09:55.279><c> is</c><00:09:55.519><c> something</c><00:09:55.839><c> like</c><00:09:56.000><c> how</c><00:09:56.240><c> our</c><00:09:56.399><c> graph</c><00:09:56.800><c> is</c>

00:09:56.870 --> 00:09:56.880 align:start position:0%
this is something like how our graph is
 

00:09:56.880 --> 00:09:57.990 align:start position:0%
this is something like how our graph is
going<00:09:56.959><c> to</c><00:09:57.040><c> look</c><00:09:57.279><c> like</c><00:09:57.440><c> we</c><00:09:57.600><c> know</c><00:09:57.760><c> that</c><00:09:57.839><c> the</c>

00:09:57.990 --> 00:09:58.000 align:start position:0%
going to look like we know that the
 

00:09:58.000 --> 00:10:00.470 align:start position:0%
going to look like we know that the
beginning<00:09:58.320><c> word</c><00:09:58.640><c> is</c><00:09:58.800><c> hit</c><00:09:59.440><c> the</c><00:09:59.760><c> destination</c>

00:10:00.470 --> 00:10:00.480 align:start position:0%
beginning word is hit the destination
 

00:10:00.480 --> 00:10:03.350 align:start position:0%
beginning word is hit the destination
word<00:10:01.120><c> the</c><00:10:01.360><c> end</c><00:10:01.519><c> word</c><00:10:02.000><c> is</c><00:10:02.320><c> cog</c><00:10:02.800><c> so</c><00:10:03.040><c> we</c><00:10:03.120><c> want</c><00:10:03.279><c> to</c>

00:10:03.350 --> 00:10:03.360 align:start position:0%
word the end word is cog so we want to
 

00:10:03.360 --> 00:10:05.590 align:start position:0%
word the end word is cog so we want to
find<00:10:03.600><c> the</c><00:10:03.680><c> shortest</c><00:10:04.160><c> path</c><00:10:04.480><c> from</c><00:10:04.720><c> here</c><00:10:05.279><c> all</c><00:10:05.440><c> the</c>

00:10:05.590 --> 00:10:05.600 align:start position:0%
find the shortest path from here all the
 

00:10:05.600 --> 00:10:08.389 align:start position:0%
find the shortest path from here all the
way<00:10:06.000><c> to</c><00:10:06.240><c> here</c><00:10:06.800><c> so</c><00:10:07.440><c> we</c><00:10:07.600><c> know</c><00:10:07.839><c> that</c><00:10:08.000><c> a</c><00:10:08.079><c> good</c><00:10:08.240><c> way</c>

00:10:08.389 --> 00:10:08.399 align:start position:0%
way to here so we know that a good way
 

00:10:08.399 --> 00:10:10.630 align:start position:0%
way to here so we know that a good way
to<00:10:08.560><c> define</c><00:10:09.040><c> a</c><00:10:09.200><c> shortest</c><00:10:09.600><c> path</c><00:10:09.839><c> is</c><00:10:10.000><c> a</c><00:10:10.079><c> bfs</c>

00:10:10.630 --> 00:10:10.640 align:start position:0%
to define a shortest path is a bfs
 

00:10:10.640 --> 00:10:13.110 align:start position:0%
to define a shortest path is a bfs
search<00:10:10.959><c> so</c><00:10:11.440><c> from</c><00:10:11.680><c> our</c><00:10:11.920><c> first</c><00:10:12.320><c> initial</c><00:10:12.720><c> spot</c>

00:10:13.110 --> 00:10:13.120 align:start position:0%
search so from our first initial spot
 

00:10:13.120 --> 00:10:14.470 align:start position:0%
search so from our first initial spot
we're<00:10:13.279><c> going</c><00:10:13.360><c> to</c><00:10:13.440><c> look</c><00:10:13.600><c> at</c><00:10:13.760><c> all</c><00:10:14.079><c> neighbors</c>

00:10:14.470 --> 00:10:14.480 align:start position:0%
we're going to look at all neighbors
 

00:10:14.480 --> 00:10:16.310 align:start position:0%
we're going to look at all neighbors
that<00:10:14.640><c> it</c><00:10:14.800><c> has</c><00:10:15.200><c> from</c><00:10:15.440><c> the</c><00:10:15.519><c> picture</c><00:10:15.839><c> it's</c><00:10:16.000><c> pretty</c>

00:10:16.310 --> 00:10:16.320 align:start position:0%
that it has from the picture it's pretty
 

00:10:16.320 --> 00:10:19.190 align:start position:0%
that it has from the picture it's pretty
obvious<00:10:16.959><c> hot</c><00:10:17.360><c> is</c><00:10:17.920><c> the</c><00:10:18.160><c> only</c><00:10:18.480><c> neighbor</c><00:10:18.800><c> so</c><00:10:19.040><c> so</c>

00:10:19.190 --> 00:10:19.200 align:start position:0%
obvious hot is the only neighbor so so
 

00:10:19.200 --> 00:10:21.269 align:start position:0%
obvious hot is the only neighbor so so
far<00:10:19.440><c> we</c><00:10:19.600><c> have</c><00:10:19.760><c> a</c><00:10:19.839><c> path</c><00:10:20.240><c> of</c><00:10:20.399><c> length</c><00:10:20.800><c> 2</c><00:10:21.040><c> because</c>

00:10:21.269 --> 00:10:21.279 align:start position:0%
far we have a path of length 2 because
 

00:10:21.279 --> 00:10:23.110 align:start position:0%
far we have a path of length 2 because
we're<00:10:21.440><c> counting</c><00:10:21.680><c> the</c><00:10:21.839><c> number</c><00:10:22.160><c> of</c><00:10:22.320><c> words</c><00:10:22.720><c> that</c>

00:10:23.110 --> 00:10:23.120 align:start position:0%
we're counting the number of words that
 

00:10:23.120 --> 00:10:24.710 align:start position:0%
we're counting the number of words that
is<00:10:23.200><c> what</c><00:10:23.360><c> determines</c><00:10:23.839><c> the</c><00:10:24.079><c> length</c><00:10:24.480><c> of</c><00:10:24.560><c> the</c>

00:10:24.710 --> 00:10:24.720 align:start position:0%
is what determines the length of the
 

00:10:24.720 --> 00:10:26.310 align:start position:0%
is what determines the length of the
path<00:10:25.200><c> and</c><00:10:25.360><c> of</c><00:10:25.440><c> course</c><00:10:25.680><c> it's</c><00:10:25.839><c> not</c><00:10:26.000><c> going</c><00:10:26.079><c> to</c><00:10:26.160><c> be</c>

00:10:26.310 --> 00:10:26.320 align:start position:0%
path and of course it's not going to be
 

00:10:26.320 --> 00:10:28.550 align:start position:0%
path and of course it's not going to be
this<00:10:26.800><c> simple</c><00:10:27.200><c> to</c><00:10:27.360><c> get</c><00:10:27.600><c> the</c><00:10:27.839><c> neighbors</c><00:10:28.240><c> because</c>

00:10:28.550 --> 00:10:28.560 align:start position:0%
this simple to get the neighbors because
 

00:10:28.560 --> 00:10:30.550 align:start position:0%
this simple to get the neighbors because
we<00:10:28.640><c> know</c><00:10:28.800><c> that</c><00:10:28.959><c> our</c><00:10:29.120><c> adjacency</c><00:10:29.760><c> list</c><00:10:30.000><c> is</c><00:10:30.480><c> a</c>

00:10:30.550 --> 00:10:30.560 align:start position:0%
we know that our adjacency list is a
 

00:10:30.560 --> 00:10:32.710 align:start position:0%
we know that our adjacency list is a
little<00:10:30.720><c> bit</c><00:10:30.880><c> more</c><00:10:31.120><c> complicated</c><00:10:32.000><c> and</c><00:10:32.240><c> again</c>

00:10:32.710 --> 00:10:32.720 align:start position:0%
little bit more complicated and again
 

00:10:32.720 --> 00:10:34.630 align:start position:0%
little bit more complicated and again
from<00:10:33.120><c> hot</c><00:10:33.360><c> we're</c><00:10:33.519><c> going</c><00:10:33.600><c> to</c><00:10:33.680><c> go</c><00:10:33.839><c> to</c><00:10:34.079><c> its</c><00:10:34.399><c> two</c>

00:10:34.630 --> 00:10:34.640 align:start position:0%
from hot we're going to go to its two
 

00:10:34.640 --> 00:10:35.910 align:start position:0%
from hot we're going to go to its two
neighbors<00:10:35.200><c> and</c><00:10:35.360><c> we're</c><00:10:35.519><c> never</c><00:10:35.760><c> going</c><00:10:35.839><c> to</c>

00:10:35.910 --> 00:10:35.920 align:start position:0%
neighbors and we're never going to
 

00:10:35.920 --> 00:10:38.310 align:start position:0%
neighbors and we're never going to
revisit<00:10:36.480><c> the</c><00:10:36.560><c> same</c><00:10:36.800><c> neighbor</c><00:10:37.200><c> twice</c><00:10:37.839><c> but</c><00:10:38.079><c> we</c>

00:10:38.310 --> 00:10:38.320 align:start position:0%
revisit the same neighbor twice but we
 

00:10:38.320 --> 00:10:39.590 align:start position:0%
revisit the same neighbor twice but we
are<00:10:38.480><c> going</c><00:10:38.640><c> to</c><00:10:38.720><c> potentially</c><00:10:39.200><c> have</c><00:10:39.279><c> to</c><00:10:39.440><c> go</c>

00:10:39.590 --> 00:10:39.600 align:start position:0%
are going to potentially have to go
 

00:10:39.600 --> 00:10:41.910 align:start position:0%
are going to potentially have to go
along<00:10:40.000><c> each</c><00:10:40.320><c> edge</c><00:10:40.959><c> at</c><00:10:41.120><c> least</c><00:10:41.360><c> once</c><00:10:41.600><c> we're</c><00:10:41.680><c> also</c>

00:10:41.910 --> 00:10:41.920 align:start position:0%
along each edge at least once we're also
 

00:10:41.920 --> 00:10:43.190 align:start position:0%
along each edge at least once we're also
not<00:10:42.000><c> going</c><00:10:42.079><c> to</c><00:10:42.160><c> go</c><00:10:42.320><c> along</c><00:10:42.560><c> the</c><00:10:42.640><c> same</c><00:10:42.959><c> edge</c>

00:10:43.190 --> 00:10:43.200 align:start position:0%
not going to go along the same edge
 

00:10:43.200 --> 00:10:45.750 align:start position:0%
not going to go along the same edge
twice<00:10:43.600><c> but</c><00:10:44.079><c> the</c><00:10:44.240><c> number</c><00:10:44.480><c> of</c><00:10:44.720><c> edges</c><00:10:45.120><c> i'm</c><00:10:45.440><c> pretty</c>

00:10:45.750 --> 00:10:45.760 align:start position:0%
twice but the number of edges i'm pretty
 

00:10:45.760 --> 00:10:46.389 align:start position:0%
twice but the number of edges i'm pretty
sure

00:10:46.389 --> 00:10:46.399 align:start position:0%
sure
 

00:10:46.399 --> 00:10:49.590 align:start position:0%
sure
could<00:10:46.720><c> be</c><00:10:46.959><c> the</c><00:10:47.200><c> number</c><00:10:47.440><c> of</c><00:10:47.600><c> words</c><00:10:48.160><c> n</c><00:10:48.800><c> squared</c>

00:10:49.590 --> 00:10:49.600 align:start position:0%
could be the number of words n squared
 

00:10:49.600 --> 00:10:52.150 align:start position:0%
could be the number of words n squared
and<00:10:49.839><c> for</c><00:10:50.079><c> each</c><00:10:50.720><c> neighbor</c><00:10:51.360><c> to</c><00:10:51.600><c> find</c><00:10:52.000><c> each</c>

00:10:52.150 --> 00:10:52.160 align:start position:0%
and for each neighbor to find each
 

00:10:52.160 --> 00:10:53.910 align:start position:0%
and for each neighbor to find each
neighbor<00:10:52.480><c> we're</c><00:10:52.640><c> going</c><00:10:52.720><c> to</c><00:10:52.800><c> have</c><00:10:52.959><c> to</c><00:10:53.040><c> do</c><00:10:53.279><c> an</c><00:10:53.600><c> m</c>

00:10:53.910 --> 00:10:53.920 align:start position:0%
neighbor we're going to have to do an m
 

00:10:53.920 --> 00:10:56.710 align:start position:0%
neighbor we're going to have to do an m
operation<00:10:54.399><c> where</c><00:10:54.720><c> m</c><00:10:54.959><c> is</c><00:10:55.120><c> the</c><00:10:55.360><c> length</c><00:10:55.839><c> of</c><00:10:56.240><c> of</c><00:10:56.560><c> a</c>

00:10:56.710 --> 00:10:56.720 align:start position:0%
operation where m is the length of of a
 

00:10:56.720 --> 00:10:58.310 align:start position:0%
operation where m is the length of of a
particular<00:10:57.200><c> word</c><00:10:57.519><c> is</c><00:10:57.680><c> which</c><00:10:57.920><c> is</c><00:10:58.000><c> where</c><00:10:58.160><c> i'm</c>

00:10:58.310 --> 00:10:58.320 align:start position:0%
particular word is which is where i'm
 

00:10:58.320 --> 00:11:00.150 align:start position:0%
particular word is which is where i'm
getting<00:10:58.560><c> this</c><00:10:58.720><c> time</c><00:10:58.959><c> complexity</c><00:10:59.600><c> n</c><00:10:59.760><c> squared</c>

00:11:00.150 --> 00:11:00.160 align:start position:0%
getting this time complexity n squared
 

00:11:00.160 --> 00:11:02.150 align:start position:0%
getting this time complexity n squared
times<00:11:00.640><c> m</c><00:11:00.800><c> i'm</c><00:11:00.959><c> pretty</c><00:11:01.200><c> sure</c><00:11:01.440><c> leak</c><00:11:01.680><c> code</c><00:11:01.920><c> has</c>

00:11:02.150 --> 00:11:02.160 align:start position:0%
times m i'm pretty sure leak code has
 

00:11:02.160 --> 00:11:04.550 align:start position:0%
times m i'm pretty sure leak code has
the<00:11:02.399><c> wrong</c><00:11:02.720><c> time</c><00:11:02.959><c> complexity</c><00:11:03.600><c> for</c><00:11:03.839><c> this</c>

00:11:04.550 --> 00:11:04.560 align:start position:0%
the wrong time complexity for this
 

00:11:04.560 --> 00:11:06.150 align:start position:0%
the wrong time complexity for this
somebody<00:11:04.880><c> can</c><00:11:05.040><c> correct</c><00:11:05.279><c> me</c><00:11:05.440><c> if</c><00:11:05.600><c> i'm</c><00:11:05.839><c> wrong</c>

00:11:06.150 --> 00:11:06.160 align:start position:0%
somebody can correct me if i'm wrong
 

00:11:06.160 --> 00:11:09.430 align:start position:0%
somebody can correct me if i'm wrong
though<00:11:06.720><c> because</c><00:11:07.120><c> for</c><00:11:07.440><c> a</c><00:11:07.600><c> graph</c><00:11:08.000><c> with</c><00:11:08.320><c> n</c><00:11:08.880><c> nodes</c>

00:11:09.430 --> 00:11:09.440 align:start position:0%
though because for a graph with n nodes
 

00:11:09.440 --> 00:11:11.670 align:start position:0%
though because for a graph with n nodes
the<00:11:09.760><c> maximum</c><00:11:10.240><c> number</c><00:11:10.480><c> of</c><00:11:10.560><c> edges</c><00:11:10.880><c> could</c><00:11:11.120><c> be</c><00:11:11.360><c> n</c>

00:11:11.670 --> 00:11:11.680 align:start position:0%
the maximum number of edges could be n
 

00:11:11.680 --> 00:11:12.630 align:start position:0%
the maximum number of edges could be n
squared

00:11:12.630 --> 00:11:12.640 align:start position:0%
squared
 

00:11:12.640 --> 00:11:14.870 align:start position:0%
squared
and<00:11:12.959><c> again</c><00:11:13.440><c> from</c><00:11:13.760><c> here</c><00:11:14.079><c> so</c><00:11:14.240><c> we</c><00:11:14.399><c> don't</c><00:11:14.560><c> want</c><00:11:14.640><c> to</c>

00:11:14.870 --> 00:11:14.880 align:start position:0%
and again from here so we don't want to
 

00:11:14.880 --> 00:11:16.230 align:start position:0%
and again from here so we don't want to
even<00:11:15.040><c> though</c><00:11:15.120><c> there's</c><00:11:15.279><c> an</c><00:11:15.519><c> edge</c><00:11:15.760><c> between</c>

00:11:16.230 --> 00:11:16.240 align:start position:0%
even though there's an edge between
 

00:11:16.240 --> 00:11:17.670 align:start position:0%
even though there's an edge between
these<00:11:16.480><c> two</c><00:11:16.720><c> nodes</c><00:11:16.959><c> we</c><00:11:17.040><c> don't</c><00:11:17.200><c> want</c><00:11:17.360><c> to</c><00:11:17.440><c> go</c>

00:11:17.670 --> 00:11:17.680 align:start position:0%
these two nodes we don't want to go
 

00:11:17.680 --> 00:11:19.509 align:start position:0%
these two nodes we don't want to go
along<00:11:18.000><c> that</c><00:11:18.240><c> edge</c><00:11:18.640><c> because</c><00:11:19.040><c> that's</c><00:11:19.360><c> going</c><00:11:19.440><c> to</c>

00:11:19.509 --> 00:11:19.519 align:start position:0%
along that edge because that's going to
 

00:11:19.519 --> 00:11:21.910 align:start position:0%
along that edge because that's going to
be<00:11:19.680><c> revisiting</c><00:11:20.160><c> the</c><00:11:20.320><c> same</c><00:11:20.800><c> nodes</c><00:11:21.200><c> twice</c><00:11:21.680><c> so</c>

00:11:21.910 --> 00:11:21.920 align:start position:0%
be revisiting the same nodes twice so
 

00:11:21.920 --> 00:11:23.590 align:start position:0%
be revisiting the same nodes twice so
now<00:11:22.079><c> we're</c><00:11:22.240><c> going</c><00:11:22.320><c> to</c><00:11:22.399><c> go</c><00:11:22.560><c> along</c><00:11:22.959><c> our</c><00:11:23.120><c> next</c>

00:11:23.590 --> 00:11:23.600 align:start position:0%
now we're going to go along our next
 

00:11:23.600 --> 00:11:26.550 align:start position:0%
now we're going to go along our next
layer<00:11:24.160><c> so</c><00:11:24.399><c> from</c><00:11:24.720><c> dot</c><00:11:24.959><c> we</c><00:11:25.120><c> can</c><00:11:25.360><c> reach</c><00:11:25.839><c> dog</c><00:11:26.399><c> and</c>

00:11:26.550 --> 00:11:26.560 align:start position:0%
layer so from dot we can reach dog and
 

00:11:26.560 --> 00:11:28.389 align:start position:0%
layer so from dot we can reach dog and
from<00:11:26.880><c> lot</c><00:11:27.279><c> we</c><00:11:27.440><c> can</c><00:11:27.600><c> reach</c>

00:11:28.389 --> 00:11:28.399 align:start position:0%
from lot we can reach
 

00:11:28.399 --> 00:11:30.790 align:start position:0%
from lot we can reach
log<00:11:29.120><c> one</c><00:11:29.519><c> now</c><00:11:29.839><c> there's</c><00:11:30.079><c> just</c><00:11:30.240><c> one</c><00:11:30.480><c> last</c>

00:11:30.790 --> 00:11:30.800 align:start position:0%
log one now there's just one last
 

00:11:30.800 --> 00:11:32.870 align:start position:0%
log one now there's just one last
unvisited<00:11:31.360><c> node</c><00:11:31.680><c> both</c><00:11:31.920><c> of</c><00:11:32.079><c> these</c><00:11:32.320><c> log</c><00:11:32.640><c> could</c>

00:11:32.870 --> 00:11:32.880 align:start position:0%
unvisited node both of these log could
 

00:11:32.880 --> 00:11:34.949 align:start position:0%
unvisited node both of these log could
visit<00:11:33.200><c> it</c><00:11:33.279><c> or</c><00:11:33.519><c> dog</c><00:11:33.839><c> could</c><00:11:34.000><c> visit</c><00:11:34.320><c> it</c><00:11:34.399><c> but</c><00:11:34.640><c> at</c>

00:11:34.949 --> 00:11:34.959 align:start position:0%
visit it or dog could visit it but at
 

00:11:34.959 --> 00:11:37.190 align:start position:0%
visit it or dog could visit it but at
the<00:11:35.120><c> end</c><00:11:35.600><c> we're</c><00:11:35.760><c> gonna</c><00:11:35.920><c> have</c><00:11:36.079><c> a</c><00:11:36.320><c> single</c>

00:11:37.190 --> 00:11:37.200 align:start position:0%
the end we're gonna have a single
 

00:11:37.200 --> 00:11:39.190 align:start position:0%
the end we're gonna have a single
another<00:11:37.600><c> node</c><00:11:37.839><c> so</c><00:11:38.000><c> what</c><00:11:38.160><c> was</c><00:11:38.240><c> the</c><00:11:38.480><c> path</c><00:11:38.880><c> so</c><00:11:39.040><c> we</c>

00:11:39.190 --> 00:11:39.200 align:start position:0%
another node so what was the path so we
 

00:11:39.200 --> 00:11:42.550 align:start position:0%
another node so what was the path so we
had<00:11:39.440><c> one</c><00:11:39.680><c> word</c><00:11:40.240><c> two</c><00:11:40.480><c> word</c><00:11:41.040><c> three</c><00:11:41.760><c> four</c>

00:11:42.550 --> 00:11:42.560 align:start position:0%
had one word two word three four
 

00:11:42.560 --> 00:11:45.430 align:start position:0%
had one word two word three four
five<00:11:42.800><c> it</c><00:11:42.959><c> took</c><00:11:43.120><c> us</c><00:11:43.360><c> five</c><00:11:44.000><c> layers</c><00:11:44.560><c> of</c><00:11:44.720><c> our</c><00:11:44.800><c> bfs</c>

00:11:45.430 --> 00:11:45.440 align:start position:0%
five it took us five layers of our bfs
 

00:11:45.440 --> 00:11:48.150 align:start position:0%
five it took us five layers of our bfs
to<00:11:45.680><c> reach</c><00:11:46.000><c> this</c><00:11:46.560><c> so</c><00:11:46.959><c> we're</c><00:11:47.120><c> gonna</c><00:11:47.440><c> say</c><00:11:48.000><c> that</c>

00:11:48.150 --> 00:11:48.160 align:start position:0%
to reach this so we're gonna say that
 

00:11:48.160 --> 00:11:50.389 align:start position:0%
to reach this so we're gonna say that
our<00:11:48.320><c> result</c><00:11:48.800><c> is</c><00:11:49.120><c> five</c><00:11:49.600><c> and</c><00:11:49.920><c> when</c><00:11:50.079><c> you</c><00:11:50.160><c> look</c><00:11:50.320><c> at</c>

00:11:50.389 --> 00:11:50.399 align:start position:0%
our result is five and when you look at
 

00:11:50.399 --> 00:11:52.230 align:start position:0%
our result is five and when you look at
the<00:11:50.560><c> output</c><00:11:50.959><c> that's</c><00:11:51.200><c> exactly</c><00:11:51.519><c> what</c><00:11:51.680><c> they</c><00:11:51.839><c> had</c>

00:11:52.230 --> 00:11:52.240 align:start position:0%
the output that's exactly what they had
 

00:11:52.240 --> 00:11:54.629 align:start position:0%
the output that's exactly what they had
as<00:11:52.480><c> well</c><00:11:52.959><c> so</c><00:11:53.120><c> with</c><00:11:53.279><c> that</c><00:11:53.519><c> being</c><00:11:53.839><c> said</c><00:11:54.240><c> we</c><00:11:54.399><c> can</c>

00:11:54.629 --> 00:11:54.639 align:start position:0%
as well so with that being said we can
 

00:11:54.639 --> 00:11:56.470 align:start position:0%
as well so with that being said we can
jump<00:11:54.880><c> into</c><00:11:55.120><c> the</c><00:11:55.200><c> code</c><00:11:55.440><c> now</c><00:11:55.680><c> so</c><00:11:55.839><c> now</c><00:11:56.079><c> let's</c><00:11:56.240><c> get</c>

00:11:56.470 --> 00:11:56.480 align:start position:0%
jump into the code now so now let's get
 

00:11:56.480 --> 00:11:58.150 align:start position:0%
jump into the code now so now let's get
into<00:11:56.639><c> the</c><00:11:56.800><c> code</c><00:11:57.200><c> and</c><00:11:57.360><c> like</c><00:11:57.519><c> i</c><00:11:57.680><c> mentioned</c><00:11:58.000><c> we</c>

00:11:58.150 --> 00:11:58.160 align:start position:0%
into the code and like i mentioned we
 

00:11:58.160 --> 00:11:59.670 align:start position:0%
into the code and like i mentioned we
want<00:11:58.320><c> to</c><00:11:58.399><c> make</c><00:11:58.480><c> sure</c><00:11:58.639><c> that</c><00:11:58.800><c> the</c><00:11:59.040><c> end</c><00:11:59.279><c> word</c><00:11:59.600><c> is</c>

00:11:59.670 --> 00:11:59.680 align:start position:0%
want to make sure that the end word is
 

00:11:59.680 --> 00:12:01.430 align:start position:0%
want to make sure that the end word is
actually<00:12:00.079><c> in</c><00:12:00.320><c> the</c><00:12:00.480><c> word</c><00:12:00.720><c> list</c><00:12:01.040><c> because</c><00:12:01.200><c> that's</c>

00:12:01.430 --> 00:12:01.440 align:start position:0%
actually in the word list because that's
 

00:12:01.440 --> 00:12:03.190 align:start position:0%
actually in the word list because that's
a<00:12:01.519><c> requirement</c><00:12:02.160><c> if</c><00:12:02.320><c> it's</c><00:12:02.560><c> not</c><00:12:02.800><c> then</c><00:12:02.959><c> we</c><00:12:03.120><c> have</c>

00:12:03.190 --> 00:12:03.200 align:start position:0%
a requirement if it's not then we have
 

00:12:03.200 --> 00:12:05.030 align:start position:0%
a requirement if it's not then we have
to<00:12:03.360><c> return</c><00:12:03.760><c> 0</c><00:12:04.160><c> because</c><00:12:04.320><c> that's</c><00:12:04.560><c> what</c><00:12:04.720><c> we</c><00:12:04.880><c> want</c>

00:12:05.030 --> 00:12:05.040 align:start position:0%
to return 0 because that's what we want
 

00:12:05.040 --> 00:12:07.190 align:start position:0%
to return 0 because that's what we want
to<00:12:05.120><c> return</c><00:12:05.760><c> if</c><00:12:05.920><c> there</c><00:12:06.160><c> doesn't</c><00:12:06.480><c> exist</c><00:12:06.880><c> a</c><00:12:06.959><c> path</c>

00:12:07.190 --> 00:12:07.200 align:start position:0%
to return if there doesn't exist a path
 

00:12:07.200 --> 00:12:09.509 align:start position:0%
to return if there doesn't exist a path
from<00:12:07.440><c> the</c><00:12:07.519><c> beginning</c><00:12:07.839><c> word</c><00:12:08.320><c> to</c><00:12:08.560><c> the</c><00:12:08.800><c> end</c><00:12:08.959><c> word</c>

00:12:09.509 --> 00:12:09.519 align:start position:0%
from the beginning word to the end word
 

00:12:09.519 --> 00:12:11.030 align:start position:0%
from the beginning word to the end word
we're<00:12:09.680><c> going</c><00:12:09.760><c> to</c><00:12:09.839><c> have</c><00:12:10.079><c> a</c><00:12:10.240><c> list</c><00:12:10.480><c> of</c><00:12:10.639><c> neighbors</c>

00:12:11.030 --> 00:12:11.040 align:start position:0%
we're going to have a list of neighbors
 

00:12:11.040 --> 00:12:12.870 align:start position:0%
we're going to have a list of neighbors
this<00:12:11.279><c> is</c><00:12:11.360><c> going</c><00:12:11.440><c> to</c><00:12:11.519><c> be</c><00:12:11.600><c> our</c><00:12:11.760><c> adjacency</c><00:12:12.399><c> list</c>

00:12:12.870 --> 00:12:12.880 align:start position:0%
this is going to be our adjacency list
 

00:12:12.880 --> 00:12:14.230 align:start position:0%
this is going to be our adjacency list
and<00:12:13.040><c> this</c><00:12:13.200><c> is</c><00:12:13.360><c> the</c><00:12:13.440><c> first</c><00:12:13.600><c> time</c><00:12:13.839><c> i'm</c><00:12:14.000><c> actually</c>

00:12:14.230 --> 00:12:14.240 align:start position:0%
and this is the first time i'm actually
 

00:12:14.240 --> 00:12:15.069 align:start position:0%
and this is the first time i'm actually
going<00:12:14.320><c> to</c><00:12:14.399><c> do</c>

00:12:15.069 --> 00:12:15.079 align:start position:0%
going to do
 

00:12:15.079 --> 00:12:17.509 align:start position:0%
going to do
collections.default<00:12:16.079><c> dict</c><00:12:16.399><c> i</c><00:12:16.560><c> usually</c><00:12:17.120><c> avoid</c>

00:12:17.509 --> 00:12:17.519 align:start position:0%
collections.default dict i usually avoid
 

00:12:17.519 --> 00:12:19.670 align:start position:0%
collections.default dict i usually avoid
doing<00:12:17.760><c> this</c><00:12:18.000><c> i</c><00:12:18.160><c> actually</c><00:12:18.800><c> manually</c><00:12:19.279><c> create</c>

00:12:19.670 --> 00:12:19.680 align:start position:0%
doing this i actually manually create
 

00:12:19.680 --> 00:12:21.110 align:start position:0%
doing this i actually manually create
the<00:12:19.920><c> dictionary</c><00:12:20.399><c> but</c><00:12:20.560><c> in</c><00:12:20.639><c> this</c><00:12:20.800><c> case</c><00:12:20.959><c> it's</c>

00:12:21.110 --> 00:12:21.120 align:start position:0%
the dictionary but in this case it's
 

00:12:21.120 --> 00:12:22.550 align:start position:0%
the dictionary but in this case it's
going<00:12:21.200><c> to</c><00:12:21.279><c> be</c><00:12:21.360><c> helpful</c><00:12:21.680><c> to</c><00:12:21.839><c> do</c><00:12:22.000><c> this</c><00:12:22.160><c> basically</c>

00:12:22.550 --> 00:12:22.560 align:start position:0%
going to be helpful to do this basically
 

00:12:22.560 --> 00:12:24.710 align:start position:0%
going to be helpful to do this basically
this<00:12:22.720><c> is</c><00:12:22.880><c> a</c><00:12:22.959><c> dictionary</c><00:12:23.600><c> where</c><00:12:23.839><c> we</c><00:12:24.240><c> if</c><00:12:24.399><c> we're</c>

00:12:24.710 --> 00:12:24.720 align:start position:0%
this is a dictionary where we if we're
 

00:12:24.720 --> 00:12:26.629 align:start position:0%
this is a dictionary where we if we're
inserting<00:12:25.200><c> a</c><00:12:25.279><c> new</c><00:12:25.440><c> value</c><00:12:25.760><c> for</c><00:12:25.920><c> the</c><00:12:26.000><c> first</c><00:12:26.320><c> time</c>

00:12:26.629 --> 00:12:26.639 align:start position:0%
inserting a new value for the first time
 

00:12:26.639 --> 00:12:28.389 align:start position:0%
inserting a new value for the first time
the<00:12:26.800><c> default</c><00:12:27.200><c> value</c><00:12:27.519><c> is</c><00:12:27.600><c> going</c><00:12:27.839><c> to</c><00:12:27.920><c> be</c><00:12:28.160><c> an</c>

00:12:28.389 --> 00:12:28.399 align:start position:0%
the default value is going to be an
 

00:12:28.399 --> 00:12:31.269 align:start position:0%
the default value is going to be an
empty<00:12:28.880><c> list</c><00:12:29.440><c> also</c><00:12:29.920><c> to</c><00:12:30.160><c> our</c><00:12:30.399><c> word</c><00:12:30.800><c> list</c><00:12:31.120><c> i'm</c>

00:12:31.269 --> 00:12:31.279 align:start position:0%
empty list also to our word list i'm
 

00:12:31.279 --> 00:12:32.790 align:start position:0%
empty list also to our word list i'm
going<00:12:31.360><c> to</c><00:12:31.440><c> go</c><00:12:31.600><c> ahead</c><00:12:31.920><c> and</c><00:12:32.160><c> append</c><00:12:32.639><c> the</c>

00:12:32.790 --> 00:12:32.800 align:start position:0%
going to go ahead and append the
 

00:12:32.800 --> 00:12:34.870 align:start position:0%
going to go ahead and append the
beginning<00:12:33.200><c> word</c><00:12:33.519><c> because</c><00:12:33.760><c> it's</c><00:12:34.000><c> not</c><00:12:34.560><c> a</c><00:12:34.639><c> part</c>

00:12:34.870 --> 00:12:34.880 align:start position:0%
beginning word because it's not a part
 

00:12:34.880 --> 00:12:37.269 align:start position:0%
beginning word because it's not a part
of<00:12:35.040><c> the</c><00:12:35.120><c> word</c><00:12:35.360><c> list</c><00:12:36.000><c> initially</c><00:12:36.560><c> so</c>

00:12:37.269 --> 00:12:37.279 align:start position:0%
of the word list initially so
 

00:12:37.279 --> 00:12:39.509 align:start position:0%
of the word list initially so
beginword<00:12:38.240><c> now</c><00:12:38.480><c> let's</c><00:12:38.720><c> actually</c><00:12:39.120><c> build</c><00:12:39.360><c> the</c>

00:12:39.509 --> 00:12:39.519 align:start position:0%
beginword now let's actually build the
 

00:12:39.519 --> 00:12:41.590 align:start position:0%
beginword now let's actually build the
adjacency<00:12:40.160><c> list</c><00:12:40.399><c> so</c><00:12:40.639><c> first</c><00:12:40.959><c> let's</c><00:12:41.200><c> go</c><00:12:41.360><c> through</c>

00:12:41.590 --> 00:12:41.600 align:start position:0%
adjacency list so first let's go through
 

00:12:41.600 --> 00:12:44.710 align:start position:0%
adjacency list so first let's go through
every<00:12:41.839><c> single</c><00:12:42.240><c> word</c><00:12:42.720><c> in</c><00:12:42.880><c> this</c><00:12:43.200><c> word</c><00:12:43.600><c> list</c><00:12:44.320><c> and</c>

00:12:44.710 --> 00:12:44.720 align:start position:0%
every single word in this word list and
 

00:12:44.720 --> 00:12:47.350 align:start position:0%
every single word in this word list and
now<00:12:44.959><c> for</c><00:12:45.279><c> each</c><00:12:45.680><c> word</c><00:12:46.000><c> we</c><00:12:46.160><c> want</c><00:12:46.320><c> to</c><00:12:46.480><c> find</c><00:12:46.880><c> every</c>

00:12:47.350 --> 00:12:47.360 align:start position:0%
now for each word we want to find every
 

00:12:47.360 --> 00:12:49.350 align:start position:0%
now for each word we want to find every
possible<00:12:48.000><c> pattern</c><00:12:48.480><c> for</c><00:12:48.720><c> this</c><00:12:48.880><c> word</c><00:12:49.120><c> so</c><00:12:49.279><c> i'm</c>

00:12:49.350 --> 00:12:49.360 align:start position:0%
possible pattern for this word so i'm
 

00:12:49.360 --> 00:12:50.949 align:start position:0%
possible pattern for this word so i'm
going to<00:12:49.440><c> use</c><00:12:49.600><c> a</c><00:12:49.680><c> pointer</c><00:12:50.079><c> j</c><00:12:50.399><c> just</c><00:12:50.560><c> to</c><00:12:50.720><c> go</c>

00:12:50.949 --> 00:12:50.959 align:start position:0%
going to use a pointer j just to go
 

00:12:50.959 --> 00:12:52.949 align:start position:0%
going to use a pointer j just to go
through<00:12:51.200><c> every</c><00:12:51.440><c> single</c><00:12:51.839><c> position</c><00:12:52.560><c> of</c><00:12:52.720><c> this</c>

00:12:52.949 --> 00:12:52.959 align:start position:0%
through every single position of this
 

00:12:52.959 --> 00:12:54.550 align:start position:0%
through every single position of this
word<00:12:53.279><c> of</c><00:12:53.440><c> course</c><00:12:53.600><c> we</c><00:12:53.760><c> know</c><00:12:54.000><c> every</c><00:12:54.240><c> word</c><00:12:54.480><c> is</c>

00:12:54.550 --> 00:12:54.560 align:start position:0%
word of course we know every word is
 

00:12:54.560 --> 00:12:56.550 align:start position:0%
word of course we know every word is
going<00:12:54.639><c> to</c><00:12:54.720><c> be</c><00:12:54.880><c> the</c><00:12:54.959><c> exact</c><00:12:55.279><c> same</c><00:12:55.680><c> length</c><00:12:56.160><c> and</c>

00:12:56.550 --> 00:12:56.560 align:start position:0%
going to be the exact same length and
 

00:12:56.560 --> 00:12:58.629 align:start position:0%
going to be the exact same length and
for<00:12:56.800><c> each</c><00:12:57.120><c> position</c><00:12:57.600><c> of</c><00:12:57.760><c> this</c><00:12:57.920><c> word</c><00:12:58.240><c> i</c><00:12:58.320><c> want</c><00:12:58.480><c> to</c>

00:12:58.629 --> 00:12:58.639 align:start position:0%
for each position of this word i want to
 

00:12:58.639 --> 00:13:01.670 align:start position:0%
for each position of this word i want to
replace<00:12:59.279><c> a</c><00:12:59.519><c> character</c><00:13:00.320><c> with</c><00:13:00.720><c> the</c><00:13:00.959><c> wild</c><00:13:01.360><c> card</c>

00:13:01.670 --> 00:13:01.680 align:start position:0%
replace a character with the wild card
 

00:13:01.680 --> 00:13:02.949 align:start position:0%
replace a character with the wild card
character<00:13:02.000><c> so</c><00:13:02.160><c> i'm</c><00:13:02.240><c> going</c><00:13:02.320><c> to</c><00:13:02.639><c> i'm</c><00:13:02.720><c> going</c><00:13:02.800><c> to</c>

00:13:02.949 --> 00:13:02.959 align:start position:0%
character so i'm going to i'm going to
 

00:13:02.959 --> 00:13:05.030 align:start position:0%
character so i'm going to i'm going to
transform<00:13:03.600><c> this</c><00:13:03.839><c> string</c><00:13:04.240><c> word</c><00:13:04.639><c> into</c><00:13:04.880><c> a</c>

00:13:05.030 --> 00:13:05.040 align:start position:0%
transform this string word into a
 

00:13:05.040 --> 00:13:06.470 align:start position:0%
transform this string word into a
pattern<00:13:05.440><c> string</c><00:13:05.760><c> where</c><00:13:06.000><c> we're</c><00:13:06.160><c> going</c><00:13:06.240><c> to</c><00:13:06.320><c> take</c>

00:13:06.470 --> 00:13:06.480 align:start position:0%
pattern string where we're going to take
 

00:13:06.480 --> 00:13:08.310 align:start position:0%
pattern string where we're going to take
the<00:13:06.639><c> first</c><00:13:07.440><c> uh</c>

00:13:08.310 --> 00:13:08.320 align:start position:0%
the first uh
 

00:13:08.320 --> 00:13:10.389 align:start position:0%
the first uh
j<00:13:08.639><c> characters</c><00:13:09.360><c> initially</c><00:13:09.839><c> j</c><00:13:10.079><c> is</c><00:13:10.160><c> just</c><00:13:10.320><c> going</c>

00:13:10.389 --> 00:13:10.399 align:start position:0%
j characters initially j is just going
 

00:13:10.399 --> 00:13:12.069 align:start position:0%
j characters initially j is just going
to<00:13:10.480><c> be</c><00:13:10.560><c> zero</c><00:13:10.880><c> so</c><00:13:11.040><c> we're</c><00:13:11.120><c> going</c><00:13:11.200><c> to</c><00:13:11.279><c> take</c><00:13:11.600><c> that</c>

00:13:12.069 --> 00:13:12.079 align:start position:0%
to be zero so we're going to take that
 

00:13:12.079 --> 00:13:13.750 align:start position:0%
to be zero so we're going to take that
we're<00:13:12.240><c> going</c><00:13:12.320><c> to</c><00:13:12.399><c> replace</c><00:13:12.880><c> the</c><00:13:13.040><c> j</c><00:13:13.440><c> character</c>

00:13:13.750 --> 00:13:13.760 align:start position:0%
we're going to replace the j character
 

00:13:13.760 --> 00:13:16.150 align:start position:0%
we're going to replace the j character
the<00:13:13.920><c> 0th</c><00:13:14.320><c> character</c><00:13:14.639><c> with</c><00:13:14.880><c> a</c><00:13:15.040><c> star</c><00:13:15.839><c> and</c><00:13:16.000><c> then</c>

00:13:16.150 --> 00:13:16.160 align:start position:0%
the 0th character with a star and then
 

00:13:16.160 --> 00:13:17.350 align:start position:0%
the 0th character with a star and then
we're<00:13:16.320><c> going</c><00:13:16.399><c> to</c><00:13:16.480><c> get</c><00:13:16.639><c> the</c><00:13:16.800><c> remaining</c>

00:13:17.350 --> 00:13:17.360 align:start position:0%
we're going to get the remaining
 

00:13:17.360 --> 00:13:19.750 align:start position:0%
we're going to get the remaining
characters<00:13:18.240><c> skipping</c><00:13:18.720><c> the</c><00:13:18.880><c> jth</c><00:13:19.200><c> character</c><00:13:19.519><c> so</c>

00:13:19.750 --> 00:13:19.760 align:start position:0%
characters skipping the jth character so
 

00:13:19.760 --> 00:13:22.470 align:start position:0%
characters skipping the jth character so
j<00:13:20.160><c> plus</c><00:13:20.639><c> one</c><00:13:21.200><c> to</c><00:13:21.360><c> the</c><00:13:21.600><c> end</c><00:13:21.760><c> of</c><00:13:21.839><c> the</c><00:13:22.000><c> string</c><00:13:22.320><c> so</c>

00:13:22.470 --> 00:13:22.480 align:start position:0%
j plus one to the end of the string so
 

00:13:22.480 --> 00:13:23.509 align:start position:0%
j plus one to the end of the string so
we're<00:13:22.639><c> just</c><00:13:22.800><c> gonna</c><00:13:22.959><c> go</c><00:13:23.120><c> through</c><00:13:23.279><c> every</c>

00:13:23.509 --> 00:13:23.519 align:start position:0%
we're just gonna go through every
 

00:13:23.519 --> 00:13:25.430 align:start position:0%
we're just gonna go through every
position<00:13:24.079><c> replacing</c><00:13:24.639><c> a</c><00:13:24.800><c> character</c><00:13:25.120><c> with</c><00:13:25.279><c> the</c>

00:13:25.430 --> 00:13:25.440 align:start position:0%
position replacing a character with the
 

00:13:25.440 --> 00:13:27.430 align:start position:0%
position replacing a character with the
star<00:13:25.920><c> and</c><00:13:26.000><c> then</c><00:13:26.240><c> for</c><00:13:26.480><c> this</c><00:13:26.800><c> pattern</c><00:13:27.200><c> we're</c>

00:13:27.430 --> 00:13:27.440 align:start position:0%
star and then for this pattern we're
 

00:13:27.440 --> 00:13:30.150 align:start position:0%
star and then for this pattern we're
gonna<00:13:27.600><c> say</c><00:13:27.839><c> okay</c><00:13:28.399><c> in</c><00:13:28.560><c> our</c><00:13:28.800><c> neighbor</c><00:13:29.279><c> list</c><00:13:29.760><c> the</c>

00:13:30.150 --> 00:13:30.160 align:start position:0%
gonna say okay in our neighbor list the
 

00:13:30.160 --> 00:13:32.230 align:start position:0%
gonna say okay in our neighbor list the
all<00:13:30.320><c> the</c><00:13:30.720><c> the</c><00:13:30.959><c> strings</c><00:13:31.279><c> that</c><00:13:31.440><c> fall</c><00:13:31.760><c> into</c><00:13:32.000><c> this</c>

00:13:32.230 --> 00:13:32.240 align:start position:0%
all the the strings that fall into this
 

00:13:32.240 --> 00:13:34.310 align:start position:0%
all the the strings that fall into this
pattern<00:13:32.880><c> so</c><00:13:33.200><c> for</c><00:13:33.440><c> this</c><00:13:33.600><c> pattern</c><00:13:33.920><c> we</c><00:13:34.079><c> want</c><00:13:34.240><c> to</c>

00:13:34.310 --> 00:13:34.320 align:start position:0%
pattern so for this pattern we want to
 

00:13:34.320 --> 00:13:36.790 align:start position:0%
pattern so for this pattern we want to
append<00:13:35.120><c> the</c><00:13:35.360><c> current</c><00:13:35.920><c> word</c><00:13:36.240><c> we</c><00:13:36.399><c> want</c><00:13:36.560><c> to</c><00:13:36.639><c> say</c>

00:13:36.790 --> 00:13:36.800 align:start position:0%
append the current word we want to say
 

00:13:36.800 --> 00:13:39.590 align:start position:0%
append the current word we want to say
this<00:13:37.120><c> word</c><00:13:37.600><c> is</c><00:13:37.920><c> a</c><00:13:38.079><c> part</c><00:13:38.399><c> of</c><00:13:38.560><c> this</c><00:13:38.959><c> pattern</c><00:13:39.519><c> and</c>

00:13:39.590 --> 00:13:39.600 align:start position:0%
this word is a part of this pattern and
 

00:13:39.600 --> 00:13:41.509 align:start position:0%
this word is a part of this pattern and
that's<00:13:39.839><c> going</c><00:13:40.000><c> to</c><00:13:40.079><c> help</c><00:13:40.320><c> us</c><00:13:40.880><c> traverse</c><00:13:41.360><c> the</c>

00:13:41.509 --> 00:13:41.519 align:start position:0%
that's going to help us traverse the
 

00:13:41.519 --> 00:13:43.590 align:start position:0%
that's going to help us traverse the
graph<00:13:42.000><c> later</c><00:13:42.399><c> on</c><00:13:42.959><c> and</c><00:13:43.120><c> of</c><00:13:43.199><c> course</c><00:13:43.440><c> we're</c><00:13:43.600><c> going</c>

00:13:43.590 --> 00:13:43.600 align:start position:0%
graph later on and of course we're going
 

00:13:43.600 --> 00:13:45.350 align:start position:0%
graph later on and of course we're going
to<00:13:43.680><c> do</c><00:13:43.839><c> that</c><00:13:44.000><c> for</c><00:13:44.160><c> every</c><00:13:44.320><c> single</c><00:13:44.639><c> word</c><00:13:44.959><c> in</c><00:13:45.120><c> the</c>

00:13:45.350 --> 00:13:45.360 align:start position:0%
to do that for every single word in the
 

00:13:45.360 --> 00:13:48.069 align:start position:0%
to do that for every single word in the
entire<00:13:46.160><c> uh</c><00:13:46.720><c> list</c><00:13:47.199><c> and</c><00:13:47.279><c> we're</c><00:13:47.440><c> gonna</c><00:13:47.600><c> do</c><00:13:47.760><c> it</c>

00:13:48.069 --> 00:13:48.079 align:start position:0%
entire uh list and we're gonna do it
 

00:13:48.079 --> 00:13:50.150 align:start position:0%
entire uh list and we're gonna do it
we're<00:13:48.240><c> gonna</c><00:13:48.639><c> have</c><00:13:48.959><c> that</c><00:13:49.199><c> star</c><00:13:49.600><c> go</c><00:13:49.839><c> in</c><00:13:49.920><c> every</c>

00:13:50.150 --> 00:13:50.160 align:start position:0%
we're gonna have that star go in every
 

00:13:50.160 --> 00:13:52.629 align:start position:0%
we're gonna have that star go in every
position<00:13:50.720><c> of</c><00:13:50.880><c> the</c><00:13:51.040><c> word</c><00:13:51.760><c> next</c><00:13:52.079><c> let's</c><00:13:52.320><c> do</c><00:13:52.480><c> our</c>

00:13:52.629 --> 00:13:52.639 align:start position:0%
position of the word next let's do our
 

00:13:52.639 --> 00:13:54.870 align:start position:0%
position of the word next let's do our
bfs<00:13:53.519><c> there's</c><00:13:53.760><c> a</c><00:13:53.839><c> couple</c><00:13:54.079><c> data</c><00:13:54.399><c> structures</c>

00:13:54.870 --> 00:13:54.880 align:start position:0%
bfs there's a couple data structures
 

00:13:54.880 --> 00:13:56.550 align:start position:0%
bfs there's a couple data structures
we're<00:13:55.040><c> gonna</c><00:13:55.199><c> need</c><00:13:55.519><c> we</c><00:13:55.600><c> don't</c><00:13:55.760><c> wanna</c><00:13:56.000><c> revisit</c>

00:13:56.550 --> 00:13:56.560 align:start position:0%
we're gonna need we don't wanna revisit
 

00:13:56.560 --> 00:13:58.389 align:start position:0%
we're gonna need we don't wanna revisit
the<00:13:56.639><c> same</c><00:13:56.880><c> position</c><00:13:57.440><c> twice</c><00:13:57.920><c> so</c><00:13:58.079><c> we're</c><00:13:58.240><c> gonna</c>

00:13:58.389 --> 00:13:58.399 align:start position:0%
the same position twice so we're gonna
 

00:13:58.399 --> 00:13:59.990 align:start position:0%
the same position twice so we're gonna
have<00:13:58.480><c> a</c><00:13:58.639><c> set</c><00:13:58.880><c> to</c><00:13:59.040><c> make</c><00:13:59.199><c> sure</c><00:13:59.360><c> we</c><00:13:59.519><c> don't</c><00:13:59.680><c> do</c><00:13:59.839><c> that</c>

00:13:59.990 --> 00:14:00.000 align:start position:0%
have a set to make sure we don't do that
 

00:14:00.000 --> 00:14:01.030 align:start position:0%
have a set to make sure we don't do that
we<00:14:00.079><c> know</c><00:14:00.240><c> we're</c><00:14:00.320><c> gonna</c><00:14:00.560><c> start</c><00:14:00.800><c> at</c><00:14:00.959><c> the</c>

00:14:01.030 --> 00:14:01.040 align:start position:0%
we know we're gonna start at the
 

00:14:01.040 --> 00:14:02.870 align:start position:0%
we know we're gonna start at the
beginning<00:14:01.519><c> word</c><00:14:01.760><c> so</c><00:14:01.920><c> let's</c><00:14:02.160><c> add</c><00:14:02.480><c> beginning</c>

00:14:02.870 --> 00:14:02.880 align:start position:0%
beginning word so let's add beginning
 

00:14:02.880 --> 00:14:06.550 align:start position:0%
beginning word so let's add beginning
word<00:14:03.440><c> to</c><00:14:03.680><c> the</c><00:14:03.920><c> set</c><00:14:04.399><c> and</c><00:14:04.639><c> we</c><00:14:04.800><c> also</c><00:14:05.040><c> need</c><00:14:05.360><c> a</c><00:14:05.680><c> cue</c>

00:14:06.550 --> 00:14:06.560 align:start position:0%
word to the set and we also need a cue
 

00:14:06.560 --> 00:14:08.629 align:start position:0%
word to the set and we also need a cue
and<00:14:06.800><c> we're</c><00:14:06.959><c> gonna</c><00:14:07.600><c> similarly</c><00:14:08.240><c> add</c><00:14:08.480><c> the</c>

00:14:08.629 --> 00:14:08.639 align:start position:0%
and we're gonna similarly add the
 

00:14:08.639 --> 00:14:11.110 align:start position:0%
and we're gonna similarly add the
beginning<00:14:08.959><c> word</c><00:14:09.279><c> to</c><00:14:09.440><c> this</c><00:14:09.760><c> cue</c><00:14:10.320><c> and</c><00:14:10.959><c> we're</c>

00:14:11.110 --> 00:14:11.120 align:start position:0%
beginning word to this cue and we're
 

00:14:11.120 --> 00:14:12.550 align:start position:0%
beginning word to this cue and we're
just<00:14:11.279><c> gonna</c><00:14:11.519><c> continue</c><00:14:11.920><c> popping</c><00:14:12.240><c> we're</c><00:14:12.399><c> gonna</c>

00:14:12.550 --> 00:14:12.560 align:start position:0%
just gonna continue popping we're gonna
 

00:14:12.560 --> 00:14:14.629 align:start position:0%
just gonna continue popping we're gonna
go<00:14:12.800><c> layer</c><00:14:13.120><c> by</c><00:14:13.360><c> layer</c><00:14:13.760><c> until</c><00:14:14.000><c> we</c><00:14:14.160><c> get</c><00:14:14.320><c> to</c><00:14:14.399><c> the</c>

00:14:14.629 --> 00:14:14.639 align:start position:0%
go layer by layer until we get to the
 

00:14:14.639 --> 00:14:17.509 align:start position:0%
go layer by layer until we get to the
end<00:14:14.959><c> word</c><00:14:15.600><c> and</c><00:14:15.760><c> initially</c><00:14:16.240><c> our</c><00:14:16.399><c> result</c><00:14:16.959><c> or</c><00:14:17.199><c> our</c>

00:14:17.509 --> 00:14:17.519 align:start position:0%
end word and initially our result or our
 

00:14:17.519 --> 00:14:19.910 align:start position:0%
end word and initially our result or our
length<00:14:17.839><c> of</c><00:14:18.000><c> the</c><00:14:18.160><c> path</c><00:14:18.480><c> is</c><00:14:18.639><c> going</c><00:14:18.800><c> to</c><00:14:18.880><c> be</c><00:14:19.279><c> 1</c>

00:14:19.910 --> 00:14:19.920 align:start position:0%
length of the path is going to be 1
 

00:14:19.920 --> 00:14:21.910 align:start position:0%
length of the path is going to be 1
because<00:14:20.160><c> we</c><00:14:20.320><c> have</c><00:14:20.560><c> at</c><00:14:20.639><c> least</c><00:14:20.959><c> one</c><00:14:21.279><c> word</c><00:14:21.760><c> the</c>

00:14:21.910 --> 00:14:21.920 align:start position:0%
because we have at least one word the
 

00:14:21.920 --> 00:14:23.350 align:start position:0%
because we have at least one word the
length<00:14:22.240><c> is</c><00:14:22.320><c> going</c><00:14:22.480><c> to</c><00:14:22.560><c> be</c><00:14:22.720><c> the</c><00:14:22.880><c> number</c><00:14:23.199><c> of</c>

00:14:23.350 --> 00:14:23.360 align:start position:0%
length is going to be the number of
 

00:14:23.360 --> 00:14:25.430 align:start position:0%
length is going to be the number of
words<00:14:23.760><c> along</c><00:14:24.079><c> the</c><00:14:24.240><c> path</c><00:14:24.720><c> and</c><00:14:24.959><c> now</c><00:14:25.120><c> we're</c><00:14:25.279><c> going</c>

00:14:25.430 --> 00:14:25.440 align:start position:0%
words along the path and now we're going
 

00:14:25.440 --> 00:14:27.590 align:start position:0%
words along the path and now we're going
to<00:14:25.519><c> continue</c><00:14:26.000><c> going</c><00:14:26.639><c> while</c><00:14:26.880><c> the</c><00:14:27.040><c> q</c><00:14:27.440><c> is</c>

00:14:27.590 --> 00:14:27.600 align:start position:0%
to continue going while the q is
 

00:14:27.600 --> 00:14:29.829 align:start position:0%
to continue going while the q is
non-empty<00:14:28.560><c> if</c><00:14:28.720><c> we</c><00:14:28.959><c> find</c><00:14:29.279><c> the</c><00:14:29.360><c> word</c><00:14:29.680><c> we're</c>

00:14:29.829 --> 00:14:29.839 align:start position:0%
non-empty if we find the word we're
 

00:14:29.839 --> 00:14:31.590 align:start position:0%
non-empty if we find the word we're
going<00:14:29.920><c> to</c><00:14:30.000><c> end</c><00:14:30.160><c> up</c><00:14:30.240><c> returning</c><00:14:30.720><c> the</c><00:14:30.880><c> result</c><00:14:31.440><c> if</c>

00:14:31.590 --> 00:14:31.600 align:start position:0%
going to end up returning the result if
 

00:14:31.600 --> 00:14:33.670 align:start position:0%
going to end up returning the result if
we<00:14:31.760><c> don't</c><00:14:32.000><c> find</c><00:14:32.240><c> the</c><00:14:32.320><c> word</c><00:14:32.959><c> when</c><00:14:33.120><c> the</c><00:14:33.279><c> loop</c>

00:14:33.670 --> 00:14:33.680 align:start position:0%
we don't find the word when the loop
 

00:14:33.680 --> 00:14:35.590 align:start position:0%
we don't find the word when the loop
exits<00:14:34.000><c> we're</c><00:14:34.160><c> going</c><00:14:34.240><c> to</c><00:14:34.399><c> end</c><00:14:34.480><c> up</c><00:14:34.639><c> returning</c><00:14:35.199><c> 0.</c>

00:14:35.590 --> 00:14:35.600 align:start position:0%
exits we're going to end up returning 0.
 

00:14:35.600 --> 00:14:37.030 align:start position:0%
exits we're going to end up returning 0.
so<00:14:35.760><c> let's</c><00:14:36.079><c> do</c><00:14:36.240><c> that</c>

00:14:37.030 --> 00:14:37.040 align:start position:0%
so let's do that
 

00:14:37.040 --> 00:14:38.949 align:start position:0%
so let's do that
and<00:14:37.199><c> so</c><00:14:37.360><c> we</c><00:14:37.519><c> want</c><00:14:37.680><c> to</c><00:14:37.760><c> go</c><00:14:37.920><c> through</c><00:14:38.160><c> the</c><00:14:38.399><c> entire</c>

00:14:38.949 --> 00:14:38.959 align:start position:0%
and so we want to go through the entire
 

00:14:38.959 --> 00:14:41.189 align:start position:0%
and so we want to go through the entire
layer<00:14:39.519><c> and</c><00:14:39.680><c> then</c><00:14:40.000><c> we</c><00:14:40.160><c> want</c><00:14:40.399><c> to</c>

00:14:41.189 --> 00:14:41.199 align:start position:0%
layer and then we want to
 

00:14:41.199 --> 00:14:43.670 align:start position:0%
layer and then we want to
increment<00:14:41.760><c> our</c><00:14:41.920><c> result</c><00:14:42.240><c> by</c><00:14:42.480><c> one</c><00:14:42.720><c> so</c><00:14:43.279><c> i'm</c><00:14:43.440><c> gonna</c>

00:14:43.670 --> 00:14:43.680 align:start position:0%
increment our result by one so i'm gonna
 

00:14:43.680 --> 00:14:45.509 align:start position:0%
increment our result by one so i'm gonna
increment<00:14:44.079><c> result</c><00:14:44.399><c> by</c><00:14:44.560><c> one</c><00:14:44.880><c> after</c><00:14:45.120><c> we</c><00:14:45.279><c> go</c>

00:14:45.509 --> 00:14:45.519 align:start position:0%
increment result by one after we go
 

00:14:45.519 --> 00:14:47.030 align:start position:0%
increment result by one after we go
through<00:14:45.680><c> the</c><00:14:45.920><c> entire</c><00:14:46.399><c> layer</c><00:14:46.639><c> and</c><00:14:46.720><c> then</c><00:14:46.880><c> we're</c>

00:14:47.030 --> 00:14:47.040 align:start position:0%
through the entire layer and then we're
 

00:14:47.040 --> 00:14:48.790 align:start position:0%
through the entire layer and then we're
gonna<00:14:47.279><c> continue</c><00:14:47.760><c> going</c><00:14:48.000><c> layer</c><00:14:48.240><c> by</c><00:14:48.480><c> layer</c>

00:14:48.790 --> 00:14:48.800 align:start position:0%
gonna continue going layer by layer
 

00:14:48.800 --> 00:14:52.069 align:start position:0%
gonna continue going layer by layer
until<00:14:49.199><c> our</c><00:14:49.440><c> q</c><00:14:49.760><c> happens</c><00:14:50.079><c> to</c><00:14:50.160><c> be</c><00:14:50.399><c> empty</c><00:14:51.279><c> so</c><00:14:51.760><c> let's</c>

00:14:52.069 --> 00:14:52.079 align:start position:0%
until our q happens to be empty so let's
 

00:14:52.079 --> 00:14:53.509 align:start position:0%
until our q happens to be empty so let's
go<00:14:52.320><c> through</c><00:14:52.480><c> whatever</c><00:14:52.880><c> the</c><00:14:53.040><c> length</c><00:14:53.279><c> of</c><00:14:53.360><c> the</c>

00:14:53.509 --> 00:14:53.519 align:start position:0%
go through whatever the length of the
 

00:14:53.519 --> 00:14:55.110 align:start position:0%
go through whatever the length of the
queue<00:14:53.839><c> currently</c><00:14:54.320><c> is</c><00:14:54.560><c> let's</c><00:14:54.720><c> go</c><00:14:54.959><c> through</c>

00:14:55.110 --> 00:14:55.120 align:start position:0%
queue currently is let's go through
 

00:14:55.120 --> 00:14:57.110 align:start position:0%
queue currently is let's go through
every<00:14:55.360><c> single</c>

00:14:57.110 --> 00:14:57.120 align:start position:0%
every single
 

00:14:57.120 --> 00:15:00.069 align:start position:0%
every single
node<00:14:57.519><c> and</c><00:14:57.680><c> pop</c><00:14:58.000><c> that</c><00:14:58.240><c> note</c><00:14:58.480><c> so</c><00:14:58.639><c> q</c><00:14:58.959><c> dot</c><00:14:59.279><c> pop</c>

00:15:00.069 --> 00:15:00.079 align:start position:0%
node and pop that note so q dot pop
 

00:15:00.079 --> 00:15:01.910 align:start position:0%
node and pop that note so q dot pop
left<00:15:00.639><c> and</c><00:15:00.720><c> when</c><00:15:00.880><c> we</c><00:15:01.120><c> pop</c><00:15:01.360><c> we're</c><00:15:01.600><c> going</c><00:15:01.680><c> to</c><00:15:01.760><c> be</c>

00:15:01.910 --> 00:15:01.920 align:start position:0%
left and when we pop we're going to be
 

00:15:01.920 --> 00:15:04.629 align:start position:0%
left and when we pop we're going to be
getting<00:15:02.320><c> a</c><00:15:02.560><c> word</c><00:15:03.120><c> that</c><00:15:03.279><c> we</c><00:15:03.519><c> ended</c><00:15:03.760><c> up</c><00:15:03.920><c> adding</c>

00:15:04.629 --> 00:15:04.639 align:start position:0%
getting a word that we ended up adding
 

00:15:04.639 --> 00:15:07.350 align:start position:0%
getting a word that we ended up adding
if<00:15:04.880><c> this</c><00:15:05.120><c> word</c><00:15:05.600><c> equals</c><00:15:06.560><c> the</c>

00:15:07.350 --> 00:15:07.360 align:start position:0%
if this word equals the
 

00:15:07.360 --> 00:15:10.629 align:start position:0%
if this word equals the
end<00:15:07.680><c> word</c><00:15:08.160><c> then</c><00:15:08.399><c> we</c><00:15:08.560><c> can</c><00:15:08.880><c> return</c><00:15:09.760><c> the</c><00:15:10.320><c> length</c>

00:15:10.629 --> 00:15:10.639 align:start position:0%
end word then we can return the length
 

00:15:10.639 --> 00:15:12.949 align:start position:0%
end word then we can return the length
of<00:15:10.720><c> the</c><00:15:10.880><c> path</c><00:15:11.279><c> aka</c><00:15:11.760><c> the</c><00:15:12.000><c> result</c><00:15:12.399><c> if</c><00:15:12.560><c> it's</c><00:15:12.720><c> not</c>

00:15:12.949 --> 00:15:12.959 align:start position:0%
of the path aka the result if it's not
 

00:15:12.959 --> 00:15:14.230 align:start position:0%
of the path aka the result if it's not
the<00:15:13.199><c> end</c><00:15:13.360><c> word</c><00:15:13.600><c> then</c><00:15:13.760><c> we're</c><00:15:13.920><c> going</c><00:15:14.000><c> to</c><00:15:14.079><c> go</c>

00:15:14.230 --> 00:15:14.240 align:start position:0%
the end word then we're going to go
 

00:15:14.240 --> 00:15:16.790 align:start position:0%
the end word then we're going to go
ahead<00:15:14.399><c> and</c><00:15:14.480><c> take</c><00:15:14.720><c> the</c><00:15:14.959><c> neighbors</c><00:15:15.839><c> of</c><00:15:16.399><c> this</c>

00:15:16.790 --> 00:15:16.800 align:start position:0%
ahead and take the neighbors of this
 

00:15:16.800 --> 00:15:19.750 align:start position:0%
ahead and take the neighbors of this
word<00:15:17.360><c> and</c><00:15:17.760><c> add</c><00:15:18.079><c> them</c><00:15:18.560><c> to</c><00:15:18.800><c> the</c><00:15:19.040><c> queue</c><00:15:19.360><c> how</c><00:15:19.519><c> can</c>

00:15:19.750 --> 00:15:19.760 align:start position:0%
word and add them to the queue how can
 

00:15:19.760 --> 00:15:22.230 align:start position:0%
word and add them to the queue how can
we<00:15:19.920><c> get</c><00:15:20.160><c> the</c><00:15:20.399><c> neighbors</c><00:15:21.040><c> of</c><00:15:21.279><c> this</c><00:15:21.600><c> word</c><00:15:22.000><c> well</c>

00:15:22.230 --> 00:15:22.240 align:start position:0%
we get the neighbors of this word well
 

00:15:22.240 --> 00:15:24.629 align:start position:0%
we get the neighbors of this word well
first<00:15:22.560><c> we</c><00:15:22.720><c> have</c><00:15:22.800><c> to</c><00:15:23.040><c> see</c><00:15:23.600><c> all</c><00:15:23.839><c> the</c><00:15:24.079><c> patterns</c>

00:15:24.629 --> 00:15:24.639 align:start position:0%
first we have to see all the patterns
 

00:15:24.639 --> 00:15:26.629 align:start position:0%
first we have to see all the patterns
that<00:15:24.800><c> this</c><00:15:25.040><c> word</c><00:15:25.440><c> falls</c><00:15:25.839><c> into</c><00:15:26.320><c> and</c><00:15:26.399><c> then</c><00:15:26.560><c> we</c>

00:15:26.629 --> 00:15:26.639 align:start position:0%
that this word falls into and then we
 

00:15:26.639 --> 00:15:28.870 align:start position:0%
that this word falls into and then we
have<00:15:26.800><c> to</c><00:15:26.880><c> get</c><00:15:27.120><c> all</c><00:15:27.360><c> the</c><00:15:27.680><c> other</c><00:15:28.079><c> words</c><00:15:28.560><c> that</c>

00:15:28.870 --> 00:15:28.880 align:start position:0%
have to get all the other words that
 

00:15:28.880 --> 00:15:31.030 align:start position:0%
have to get all the other words that
fall<00:15:29.199><c> into</c><00:15:29.440><c> the</c><00:15:29.600><c> exact</c><00:15:29.920><c> same</c><00:15:30.320><c> pattern</c><00:15:30.720><c> because</c>

00:15:31.030 --> 00:15:31.040 align:start position:0%
fall into the exact same pattern because
 

00:15:31.040 --> 00:15:33.430 align:start position:0%
fall into the exact same pattern because
that's<00:15:31.519><c> the</c><00:15:32.000><c> most</c><00:15:32.240><c> efficient</c><00:15:32.720><c> way</c><00:15:32.959><c> to</c><00:15:33.120><c> get</c><00:15:33.279><c> the</c>

00:15:33.430 --> 00:15:33.440 align:start position:0%
that's the most efficient way to get the
 

00:15:33.440 --> 00:15:35.350 align:start position:0%
that's the most efficient way to get the
neighbors<00:15:34.160><c> so</c><00:15:34.320><c> first</c><00:15:34.560><c> let's</c><00:15:34.800><c> go</c><00:15:34.959><c> through</c><00:15:35.199><c> for</c>

00:15:35.350 --> 00:15:35.360 align:start position:0%
neighbors so first let's go through for
 

00:15:35.360 --> 00:15:38.790 align:start position:0%
neighbors so first let's go through for
every<00:15:35.759><c> j</c><00:15:36.320><c> in</c><00:15:36.720><c> range</c><00:15:37.519><c> of</c><00:15:37.759><c> the</c><00:15:37.920><c> length</c><00:15:38.320><c> of</c><00:15:38.480><c> this</c>

00:15:38.790 --> 00:15:38.800 align:start position:0%
every j in range of the length of this
 

00:15:38.800 --> 00:15:40.629 align:start position:0%
every j in range of the length of this
word<00:15:39.279><c> so</c><00:15:39.519><c> that</c><00:15:39.600><c> we</c><00:15:39.759><c> can</c><00:15:39.920><c> replace</c><00:15:40.399><c> each</c>

00:15:40.629 --> 00:15:40.639 align:start position:0%
word so that we can replace each
 

00:15:40.639 --> 00:15:42.550 align:start position:0%
word so that we can replace each
character<00:15:41.040><c> with</c><00:15:41.279><c> the</c><00:15:41.519><c> wild</c><00:15:41.920><c> card</c><00:15:42.160><c> character</c>

00:15:42.550 --> 00:15:42.560 align:start position:0%
character with the wild card character
 

00:15:42.560 --> 00:15:44.550 align:start position:0%
character with the wild card character
so<00:15:42.720><c> let's</c><00:15:43.040><c> transform</c><00:15:43.600><c> this</c><00:15:43.759><c> word</c><00:15:44.079><c> into</c><00:15:44.320><c> the</c>

00:15:44.550 --> 00:15:44.560 align:start position:0%
so let's transform this word into the
 

00:15:44.560 --> 00:15:46.949 align:start position:0%
so let's transform this word into the
pattern<00:15:45.279><c> so</c><00:15:45.920><c> basically</c><00:15:46.399><c> the</c><00:15:46.560><c> exact</c><00:15:46.800><c> same</c>

00:15:46.949 --> 00:15:46.959 align:start position:0%
pattern so basically the exact same
 

00:15:46.959 --> 00:15:48.550 align:start position:0%
pattern so basically the exact same
thing<00:15:47.199><c> that</c><00:15:47.279><c> we</c><00:15:47.440><c> just</c><00:15:47.600><c> did</c><00:15:47.839><c> up</c><00:15:48.000><c> above</c><00:15:48.399><c> i'll</c>

00:15:48.550 --> 00:15:48.560 align:start position:0%
thing that we just did up above i'll
 

00:15:48.560 --> 00:15:50.790 align:start position:0%
thing that we just did up above i'll
literally<00:15:48.880><c> just</c><00:15:49.040><c> copy</c><00:15:49.360><c> and</c><00:15:49.519><c> paste</c><00:15:49.920><c> it</c><00:15:50.320><c> so</c><00:15:50.560><c> this</c>

00:15:50.790 --> 00:15:50.800 align:start position:0%
literally just copy and paste it so this
 

00:15:50.800 --> 00:15:53.670 align:start position:0%
literally just copy and paste it so this
word<00:15:51.120><c> could</c><00:15:51.279><c> be</c><00:15:51.440><c> replaced</c><00:15:52.320><c> with</c><00:15:52.720><c> the</c><00:15:52.959><c> pattern</c>

00:15:53.670 --> 00:15:53.680 align:start position:0%
word could be replaced with the pattern
 

00:15:53.680 --> 00:15:56.069 align:start position:0%
word could be replaced with the pattern
right<00:15:54.160><c> and</c><00:15:54.639><c> now</c><00:15:55.040><c> we're</c><00:15:55.279><c> using</c><00:15:55.519><c> this</c><00:15:55.759><c> pattern</c>

00:15:56.069 --> 00:15:56.079 align:start position:0%
right and now we're using this pattern
 

00:15:56.079 --> 00:15:58.230 align:start position:0%
right and now we're using this pattern
we<00:15:56.240><c> can</c><00:15:56.320><c> get</c><00:15:56.560><c> all</c><00:15:56.720><c> the</c><00:15:56.959><c> neighbors</c><00:15:57.600><c> of</c><00:15:57.839><c> this</c>

00:15:58.230 --> 00:15:58.240 align:start position:0%
we can get all the neighbors of this
 

00:15:58.240 --> 00:15:59.189 align:start position:0%
we can get all the neighbors of this
word

00:15:59.189 --> 00:15:59.199 align:start position:0%
word
 

00:15:59.199 --> 00:16:02.069 align:start position:0%
word
so<00:15:59.440><c> let's</c><00:15:59.680><c> go</c><00:15:59.920><c> through</c><00:16:00.240><c> four</c><00:16:00.959><c> neighbor</c><00:16:01.519><c> word</c>

00:16:02.069 --> 00:16:02.079 align:start position:0%
so let's go through four neighbor word
 

00:16:02.079 --> 00:16:05.670 align:start position:0%
so let's go through four neighbor word
in<00:16:02.560><c> neighbors</c><00:16:03.279><c> of</c><00:16:03.680><c> this</c><00:16:04.320><c> pattern</c><00:16:05.279><c> now</c><00:16:05.519><c> of</c>

00:16:05.670 --> 00:16:05.680 align:start position:0%
in neighbors of this pattern now of
 

00:16:05.680 --> 00:16:07.590 align:start position:0%
in neighbors of this pattern now of
course<00:16:06.000><c> we</c><00:16:06.240><c> might</c><00:16:06.399><c> be</c><00:16:06.480><c> able</c><00:16:06.639><c> to</c><00:16:06.720><c> get</c><00:16:06.880><c> that</c><00:16:07.199><c> same</c>

00:16:07.590 --> 00:16:07.600 align:start position:0%
course we might be able to get that same
 

00:16:07.600 --> 00:16:09.430 align:start position:0%
course we might be able to get that same
word<00:16:08.240><c> but</c><00:16:08.399><c> the</c><00:16:08.560><c> reason</c><00:16:08.880><c> we're</c><00:16:09.040><c> not</c><00:16:09.199><c> going</c><00:16:09.360><c> to</c>

00:16:09.430 --> 00:16:09.440 align:start position:0%
word but the reason we're not going to
 

00:16:09.440 --> 00:16:10.550 align:start position:0%
word but the reason we're not going to
get<00:16:09.600><c> the</c><00:16:09.680><c> same</c><00:16:09.839><c> word</c><00:16:10.079><c> is</c><00:16:10.160><c> we're</c><00:16:10.320><c> going</c><00:16:10.480><c> to</c>

00:16:10.550 --> 00:16:10.560 align:start position:0%
get the same word is we're going to
 

00:16:10.560 --> 00:16:13.269 align:start position:0%
get the same word is we're going to
check<00:16:10.880><c> if</c><00:16:11.120><c> this</c><00:16:11.360><c> neighbor</c><00:16:11.759><c> word</c><00:16:12.399><c> is</c><00:16:12.959><c> not</c>

00:16:13.269 --> 00:16:13.279 align:start position:0%
check if this neighbor word is not
 

00:16:13.279 --> 00:16:15.110 align:start position:0%
check if this neighbor word is not
visited<00:16:13.680><c> so</c><00:16:13.839><c> if</c><00:16:14.000><c> neighbor</c><00:16:14.320><c> word</c>

00:16:15.110 --> 00:16:15.120 align:start position:0%
visited so if neighbor word
 

00:16:15.120 --> 00:16:17.990 align:start position:0%
visited so if neighbor word
not<00:16:15.839><c> in</c><00:16:16.399><c> visit</c><00:16:16.959><c> that's</c><00:16:17.279><c> when</c><00:16:17.440><c> we're</c><00:16:17.680><c> going</c><00:16:17.759><c> to</c>

00:16:17.990 --> 00:16:18.000 align:start position:0%
not in visit that's when we're going to
 

00:16:18.000 --> 00:16:18.710 align:start position:0%
not in visit that's when we're going to
be

00:16:18.710 --> 00:16:18.720 align:start position:0%
be
 

00:16:18.720 --> 00:16:20.870 align:start position:0%
be
processing<00:16:19.360><c> that</c><00:16:19.600><c> word</c><00:16:20.079><c> so</c><00:16:20.240><c> we</c><00:16:20.399><c> definitely</c>

00:16:20.870 --> 00:16:20.880 align:start position:0%
processing that word so we definitely
 

00:16:20.880 --> 00:16:22.550 align:start position:0%
processing that word so we definitely
won't<00:16:21.120><c> be</c><00:16:21.279><c> looking</c><00:16:21.519><c> at</c><00:16:21.600><c> the</c><00:16:21.759><c> same</c><00:16:22.000><c> word</c><00:16:22.240><c> twice</c>

00:16:22.550 --> 00:16:22.560 align:start position:0%
won't be looking at the same word twice
 

00:16:22.560 --> 00:16:24.310 align:start position:0%
won't be looking at the same word twice
so<00:16:22.959><c> if</c><00:16:23.120><c> this</c><00:16:23.360><c> neighbor</c><00:16:23.600><c> word</c><00:16:23.839><c> has</c><00:16:24.000><c> not</c><00:16:24.160><c> been</c>

00:16:24.310 --> 00:16:24.320 align:start position:0%
so if this neighbor word has not been
 

00:16:24.320 --> 00:16:26.790 align:start position:0%
so if this neighbor word has not been
visited<00:16:24.720><c> we</c><00:16:24.880><c> can</c><00:16:25.040><c> of</c><00:16:25.120><c> course</c><00:16:25.440><c> add</c><00:16:25.680><c> it</c><00:16:25.839><c> to</c><00:16:26.160><c> visit</c>

00:16:26.790 --> 00:16:26.800 align:start position:0%
visited we can of course add it to visit
 

00:16:26.800 --> 00:16:29.590 align:start position:0%
visited we can of course add it to visit
and<00:16:27.120><c> we</c><00:16:27.279><c> can</c><00:16:27.519><c> add</c><00:16:27.759><c> it</c><00:16:27.920><c> to</c><00:16:28.160><c> the</c><00:16:28.480><c> queue</c><00:16:28.800><c> so</c><00:16:29.040><c> q</c><00:16:29.279><c> dot</c>

00:16:29.590 --> 00:16:29.600 align:start position:0%
and we can add it to the queue so q dot
 

00:16:29.600 --> 00:16:30.629 align:start position:0%
and we can add it to the queue so q dot
append

00:16:30.629 --> 00:16:30.639 align:start position:0%
append
 

00:16:30.639 --> 00:16:33.030 align:start position:0%
append
neighbor<00:16:31.440><c> word</c><00:16:32.079><c> uh</c><00:16:32.240><c> for</c><00:16:32.399><c> some</c><00:16:32.639><c> reason</c><00:16:32.880><c> up</c>

00:16:33.030 --> 00:16:33.040 align:start position:0%
neighbor word uh for some reason up
 

00:16:33.040 --> 00:16:35.350 align:start position:0%
neighbor word uh for some reason up
above<00:16:33.360><c> i</c><00:16:33.519><c> said</c><00:16:33.759><c> if</c><00:16:34.000><c> end</c><00:16:34.240><c> word</c><00:16:34.560><c> is</c><00:16:34.800><c> in</c><00:16:34.959><c> the</c><00:16:35.120><c> word</c>

00:16:35.350 --> 00:16:35.360 align:start position:0%
above i said if end word is in the word
 

00:16:35.360 --> 00:16:37.110 align:start position:0%
above i said if end word is in the word
list<00:16:35.600><c> i</c><00:16:35.759><c> meant</c><00:16:35.920><c> to</c><00:16:36.079><c> say</c><00:16:36.240><c> if</c><00:16:36.320><c> it's</c><00:16:36.639><c> not</c><00:16:36.880><c> in</c><00:16:37.040><c> the</c>

00:16:37.110 --> 00:16:37.120 align:start position:0%
list i meant to say if it's not in the
 

00:16:37.120 --> 00:16:38.470 align:start position:0%
list i meant to say if it's not in the
word<00:16:37.360><c> list</c><00:16:37.680><c> in</c><00:16:37.759><c> that</c><00:16:37.920><c> case</c><00:16:38.160><c> we're</c><00:16:38.320><c> going</c><00:16:38.399><c> to</c>

00:16:38.470 --> 00:16:38.480 align:start position:0%
word list in that case we're going to
 

00:16:38.480 --> 00:16:39.829 align:start position:0%
word list in that case we're going to
return<00:16:38.880><c> zero</c>

00:16:39.829 --> 00:16:39.839 align:start position:0%
return zero
 

00:16:39.839 --> 00:16:41.910 align:start position:0%
return zero
but<00:16:40.000><c> other</c><00:16:40.240><c> than</c><00:16:40.480><c> that</c><00:16:40.720><c> the</c><00:16:40.880><c> code</c><00:16:41.279><c> is</c><00:16:41.519><c> correct</c>

00:16:41.910 --> 00:16:41.920 align:start position:0%
but other than that the code is correct
 

00:16:41.920 --> 00:16:43.430 align:start position:0%
but other than that the code is correct
you<00:16:42.000><c> can</c><00:16:42.160><c> see</c><00:16:42.320><c> that</c><00:16:42.480><c> it's</c><00:16:42.639><c> pretty</c><00:16:42.959><c> efficient</c>

00:16:43.430 --> 00:16:43.440 align:start position:0%
you can see that it's pretty efficient
 

00:16:43.440 --> 00:16:45.749 align:start position:0%
you can see that it's pretty efficient
that's<00:16:43.759><c> because</c><00:16:44.000><c> we</c><00:16:44.160><c> kind</c><00:16:44.320><c> of</c><00:16:44.399><c> use</c><00:16:44.720><c> this</c><00:16:45.120><c> trick</c>

00:16:45.749 --> 00:16:45.759 align:start position:0%
that's because we kind of use this trick
 

00:16:45.759 --> 00:16:48.150 align:start position:0%
that's because we kind of use this trick
to<00:16:45.920><c> find</c><00:16:46.720><c> the</c><00:16:46.880><c> adjacency</c><00:16:47.519><c> list</c><00:16:47.759><c> i</c><00:16:47.839><c> feel</c><00:16:48.000><c> like</c>

00:16:48.150 --> 00:16:48.160 align:start position:0%
to find the adjacency list i feel like
 

00:16:48.160 --> 00:16:50.230 align:start position:0%
to find the adjacency list i feel like
this<00:16:48.399><c> shouldn't</c><00:16:48.720><c> be</c><00:16:48.880><c> required</c><00:16:49.519><c> to</c><00:16:49.680><c> pass</c><00:16:50.000><c> this</c>

00:16:50.230 --> 00:16:50.240 align:start position:0%
this shouldn't be required to pass this
 

00:16:50.240 --> 00:16:51.430 align:start position:0%
this shouldn't be required to pass this
problem<00:16:50.560><c> though</c><00:16:50.720><c> i</c><00:16:50.800><c> think</c><00:16:50.959><c> that's</c><00:16:51.120><c> kind</c><00:16:51.279><c> of</c>

00:16:51.430 --> 00:16:51.440 align:start position:0%
problem though i think that's kind of
 

00:16:51.440 --> 00:16:53.509 align:start position:0%
problem though i think that's kind of
dumb<00:16:51.759><c> on</c><00:16:52.000><c> leak</c><00:16:52.160><c> codes</c><00:16:52.560><c> part</c><00:16:52.959><c> but</c><00:16:53.199><c> for</c><00:16:53.360><c> some</c>

00:16:53.509 --> 00:16:53.519 align:start position:0%
dumb on leak codes part but for some
 

00:16:53.519 --> 00:16:55.509 align:start position:0%
dumb on leak codes part but for some
reason<00:16:53.839><c> it</c><00:16:54.079><c> is</c><00:16:54.480><c> but</c><00:16:54.720><c> once</c><00:16:54.959><c> you</c><00:16:55.040><c> kind</c><00:16:55.199><c> of</c><00:16:55.360><c> know</c>

00:16:55.509 --> 00:16:55.519 align:start position:0%
reason it is but once you kind of know
 

00:16:55.519 --> 00:16:57.749 align:start position:0%
reason it is but once you kind of know
that<00:16:55.759><c> trick</c><00:16:56.320><c> this</c><00:16:56.639><c> problem</c><00:16:57.040><c> basically</c><00:16:57.519><c> just</c>

00:16:57.749 --> 00:16:57.759 align:start position:0%
that trick this problem basically just
 

00:16:57.759 --> 00:17:00.470 align:start position:0%
that trick this problem basically just
reduces<00:16:58.399><c> to</c><00:16:58.720><c> a</c><00:16:58.959><c> breath</c><00:16:59.199><c> first</c><00:16:59.519><c> search</c><00:17:00.160><c> so</c><00:17:00.320><c> i</c>

00:17:00.470 --> 00:17:00.480 align:start position:0%
reduces to a breath first search so i
 

00:17:00.480 --> 00:17:02.710 align:start position:0%
reduces to a breath first search so i
hope<00:17:00.720><c> that</c><00:17:00.880><c> this</c><00:17:01.120><c> was</c><00:17:01.360><c> helpful</c><00:17:01.920><c> if</c><00:17:02.079><c> it</c><00:17:02.240><c> was</c>

00:17:02.710 --> 00:17:02.720 align:start position:0%
hope that this was helpful if it was
 

00:17:02.720 --> 00:17:04.470 align:start position:0%
hope that this was helpful if it was
please<00:17:03.040><c> like</c><00:17:03.279><c> and</c><00:17:03.360><c> subscribe</c><00:17:03.920><c> it</c><00:17:04.079><c> supports</c>

00:17:04.470 --> 00:17:04.480 align:start position:0%
please like and subscribe it supports
 

00:17:04.480 --> 00:17:07.360 align:start position:0%
please like and subscribe it supports
the<00:17:04.559><c> channel</c><00:17:04.959><c> a</c><00:17:05.120><c> lot</c>

