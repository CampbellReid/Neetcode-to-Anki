WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.120><c> back</c><00:00:01.360><c> and</c><00:00:01.439><c> let's</c>

00:00:01.670 --> 00:00:01.680 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.680 --> 00:00:03.510 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.920><c> some</c><00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.560><c> code</c><00:00:02.800><c> today</c><00:00:03.040><c> so</c><00:00:03.199><c> today</c>

00:00:03.510 --> 00:00:03.520 align:start position:0%
write some more neat code today so today
 

00:00:03.520 --> 00:00:05.349 align:start position:0%
write some more neat code today so today
let's<00:00:03.760><c> solve</c><00:00:04.080><c> another</c><00:00:04.480><c> problem</c><00:00:04.880><c> from</c><00:00:05.120><c> this</c>

00:00:05.349 --> 00:00:05.359 align:start position:0%
let's solve another problem from this
 

00:00:05.359 --> 00:00:06.710 align:start position:0%
let's solve another problem from this
week's<00:00:05.680><c> leak</c><00:00:05.839><c> code</c><00:00:06.160><c> contest</c>

00:00:06.710 --> 00:00:06.720 align:start position:0%
week's leak code contest
 

00:00:06.720 --> 00:00:09.910 align:start position:0%
week's leak code contest
minimum<00:00:07.279><c> interval</c><00:00:07.680><c> to</c><00:00:07.919><c> include</c><00:00:08.720><c> each</c><00:00:09.200><c> query</c>

00:00:09.910 --> 00:00:09.920 align:start position:0%
minimum interval to include each query
 

00:00:09.920 --> 00:00:12.230 align:start position:0%
minimum interval to include each query
we're<00:00:10.080><c> given</c><00:00:10.400><c> a</c><00:00:10.559><c> 2d</c><00:00:11.040><c> integer</c><00:00:11.519><c> array</c><00:00:11.920><c> of</c>

00:00:12.230 --> 00:00:12.240 align:start position:0%
we're given a 2d integer array of
 

00:00:12.240 --> 00:00:14.310 align:start position:0%
we're given a 2d integer array of
intervals<00:00:12.880><c> each</c><00:00:13.200><c> interval</c><00:00:13.759><c> has</c><00:00:14.000><c> a</c>

00:00:14.310 --> 00:00:14.320 align:start position:0%
intervals each interval has a
 

00:00:14.320 --> 00:00:16.550 align:start position:0%
intervals each interval has a
left<00:00:14.799><c> value</c><00:00:15.280><c> and</c><00:00:15.440><c> a</c><00:00:15.679><c> right</c><00:00:15.839><c> value</c><00:00:16.320><c> which</c>

00:00:16.550 --> 00:00:16.560 align:start position:0%
left value and a right value which
 

00:00:16.560 --> 00:00:18.230 align:start position:0%
left value and a right value which
basically<00:00:16.960><c> determines</c><00:00:17.520><c> the</c><00:00:17.760><c> length</c>

00:00:18.230 --> 00:00:18.240 align:start position:0%
basically determines the length
 

00:00:18.240 --> 00:00:19.990 align:start position:0%
basically determines the length
and<00:00:18.400><c> positions</c><00:00:18.960><c> of</c><00:00:19.039><c> the</c><00:00:19.199><c> interval</c><00:00:19.520><c> so</c><00:00:19.760><c> right</c>

00:00:19.990 --> 00:00:20.000 align:start position:0%
and positions of the interval so right
 

00:00:20.000 --> 00:00:21.670 align:start position:0%
and positions of the interval so right
like<00:00:20.160><c> the</c><00:00:20.320><c> left</c><00:00:20.640><c> point</c><00:00:20.960><c> and</c><00:00:21.119><c> the</c><00:00:21.199><c> right</c><00:00:21.439><c> point</c>

00:00:21.670 --> 00:00:21.680 align:start position:0%
like the left point and the right point
 

00:00:21.680 --> 00:00:23.590 align:start position:0%
like the left point and the right point
and<00:00:21.840><c> so</c><00:00:22.000><c> the</c><00:00:22.080><c> interval</c><00:00:22.480><c> is</c><00:00:22.640><c> connected</c><00:00:23.199><c> by</c><00:00:23.359><c> the</c>

00:00:23.590 --> 00:00:23.600 align:start position:0%
and so the interval is connected by the
 

00:00:23.600 --> 00:00:24.950 align:start position:0%
and so the interval is connected by the
left<00:00:23.840><c> and</c><00:00:24.000><c> right</c><00:00:24.240><c> points</c>

00:00:24.950 --> 00:00:24.960 align:start position:0%
left and right points
 

00:00:24.960 --> 00:00:26.950 align:start position:0%
left and right points
and<00:00:25.119><c> of</c><00:00:25.279><c> course</c><00:00:25.599><c> the</c><00:00:25.840><c> size</c><00:00:26.160><c> of</c><00:00:26.240><c> the</c><00:00:26.400><c> interval</c>

00:00:26.950 --> 00:00:26.960 align:start position:0%
and of course the size of the interval
 

00:00:26.960 --> 00:00:28.470 align:start position:0%
and of course the size of the interval
is<00:00:27.199><c> just</c><00:00:27.439><c> defined</c><00:00:28.080><c> as</c>

00:00:28.470 --> 00:00:28.480 align:start position:0%
is just defined as
 

00:00:28.480 --> 00:00:30.710 align:start position:0%
is just defined as
the<00:00:28.880><c> right</c><00:00:29.119><c> value</c><00:00:29.599><c> minus</c><00:00:29.920><c> the</c><00:00:30.080><c> left</c><00:00:30.320><c> value</c>

00:00:30.710 --> 00:00:30.720 align:start position:0%
the right value minus the left value
 

00:00:30.720 --> 00:00:32.229 align:start position:0%
the right value minus the left value
plus<00:00:31.119><c> one</c><00:00:31.359><c> right</c><00:00:31.599><c> basically</c>

00:00:32.229 --> 00:00:32.239 align:start position:0%
plus one right basically
 

00:00:32.239 --> 00:00:33.510 align:start position:0%
plus one right basically
you<00:00:32.399><c> know</c><00:00:32.480><c> the</c><00:00:32.640><c> size</c><00:00:32.880><c> of</c><00:00:32.960><c> the</c><00:00:33.040><c> interval</c><00:00:33.360><c> if</c>

00:00:33.510 --> 00:00:33.520 align:start position:0%
you know the size of the interval if
 

00:00:33.520 --> 00:00:35.910 align:start position:0%
you know the size of the interval if
this<00:00:33.680><c> was</c><00:00:33.840><c> one</c><00:00:34.320><c> this</c><00:00:34.480><c> was</c><00:00:34.719><c> two</c><00:00:35.120><c> basically</c><00:00:35.680><c> if</c>

00:00:35.910 --> 00:00:35.920 align:start position:0%
this was one this was two basically if
 

00:00:35.920 --> 00:00:36.549 align:start position:0%
this was one this was two basically if
this

00:00:36.549 --> 00:00:36.559 align:start position:0%
this
 

00:00:36.559 --> 00:00:38.950 align:start position:0%
this
if<00:00:36.719><c> we</c><00:00:36.800><c> had</c><00:00:37.040><c> this</c><00:00:37.280><c> interval</c><00:00:37.760><c> one</c><00:00:38.160><c> and</c><00:00:38.480><c> two</c><00:00:38.800><c> the</c>

00:00:38.950 --> 00:00:38.960 align:start position:0%
if we had this interval one and two the
 

00:00:38.960 --> 00:00:40.389 align:start position:0%
if we had this interval one and two the
size<00:00:39.200><c> of</c><00:00:39.280><c> the</c><00:00:39.440><c> interval</c><00:00:39.760><c> is</c><00:00:39.920><c> going</c><00:00:40.000><c> to</c><00:00:40.079><c> be</c>

00:00:40.389 --> 00:00:40.399 align:start position:0%
size of the interval is going to be
 

00:00:40.399 --> 00:00:42.229 align:start position:0%
size of the interval is going to be
two<00:00:40.960><c> even</c><00:00:41.200><c> though</c><00:00:41.280><c> that</c><00:00:41.680><c> even</c><00:00:41.840><c> though</c><00:00:42.000><c> the</c>

00:00:42.229 --> 00:00:42.239 align:start position:0%
two even though that even though the
 

00:00:42.239 --> 00:00:44.389 align:start position:0%
two even though that even though the
length<00:00:42.559><c> of</c><00:00:42.640><c> the</c><00:00:42.800><c> interval</c><00:00:43.280><c> is</c><00:00:43.520><c> one</c><00:00:43.840><c> the</c><00:00:44.079><c> size</c>

00:00:44.389 --> 00:00:44.399 align:start position:0%
length of the interval is one the size
 

00:00:44.399 --> 00:00:46.549 align:start position:0%
length of the interval is one the size
is<00:00:44.640><c> two</c><00:00:44.879><c> because</c><00:00:45.120><c> it</c><00:00:45.200><c> contains</c><00:00:45.760><c> two</c><00:00:46.000><c> values</c>

00:00:46.549 --> 00:00:46.559 align:start position:0%
is two because it contains two values
 

00:00:46.559 --> 00:00:49.350 align:start position:0%
is two because it contains two values
one<00:00:46.960><c> and</c><00:00:47.200><c> two</c><00:00:47.840><c> if</c><00:00:48.000><c> this</c><00:00:48.160><c> was</c><00:00:48.399><c> three</c><00:00:48.960><c> then</c><00:00:49.200><c> this</c>

00:00:49.350 --> 00:00:49.360 align:start position:0%
one and two if this was three then this
 

00:00:49.360 --> 00:00:50.869 align:start position:0%
one and two if this was three then this
would<00:00:49.520><c> be</c><00:00:49.600><c> an</c><00:00:49.760><c> interval</c><00:00:50.079><c> of</c><00:00:50.239><c> length</c><00:00:50.559><c> three</c>

00:00:50.869 --> 00:00:50.879 align:start position:0%
would be an interval of length three
 

00:00:50.879 --> 00:00:53.189 align:start position:0%
would be an interval of length three
three<00:00:51.120><c> minus</c><00:00:51.520><c> one</c><00:00:51.840><c> plus</c><00:00:52.239><c> one</c><00:00:52.559><c> is</c><00:00:52.719><c> going</c><00:00:52.879><c> to</c><00:00:52.960><c> be</c>

00:00:53.189 --> 00:00:53.199 align:start position:0%
three minus one plus one is going to be
 

00:00:53.199 --> 00:00:53.830 align:start position:0%
three minus one plus one is going to be
three

00:00:53.830 --> 00:00:53.840 align:start position:0%
three
 

00:00:53.840 --> 00:00:56.229 align:start position:0%
three
because<00:00:54.160><c> it</c><00:00:54.239><c> contains</c><00:00:54.800><c> one</c><00:00:55.360><c> it</c><00:00:55.440><c> contains</c><00:00:56.000><c> two</c>

00:00:56.229 --> 00:00:56.239 align:start position:0%
because it contains one it contains two
 

00:00:56.239 --> 00:00:57.270 align:start position:0%
because it contains one it contains two
in<00:00:56.320><c> the</c><00:00:56.399><c> middle</c><00:00:56.800><c> and</c><00:00:56.960><c> then</c>

00:00:57.270 --> 00:00:57.280 align:start position:0%
in the middle and then
 

00:00:57.280 --> 00:00:59.590 align:start position:0%
in the middle and then
three<00:00:57.680><c> it</c><00:00:57.920><c> contains</c><00:00:58.399><c> three</c><00:00:58.800><c> points</c><00:00:59.199><c> so</c><00:00:59.359><c> that's</c>

00:00:59.590 --> 00:00:59.600 align:start position:0%
three it contains three points so that's
 

00:00:59.600 --> 00:01:00.389 align:start position:0%
three it contains three points so that's
basically

00:01:00.389 --> 00:01:00.399 align:start position:0%
basically
 

00:01:00.399 --> 00:01:02.790 align:start position:0%
basically
what<00:01:00.559><c> the</c><00:01:00.800><c> size</c><00:01:01.199><c> is</c><00:01:01.359><c> in</c><00:01:01.520><c> this</c><00:01:01.760><c> case</c><00:01:02.399><c> if</c><00:01:02.559><c> we</c><00:01:02.640><c> had</c>

00:01:02.790 --> 00:01:02.800 align:start position:0%
what the size is in this case if we had
 

00:01:02.800 --> 00:01:04.710 align:start position:0%
what the size is in this case if we had
just<00:01:03.039><c> a</c><00:01:03.280><c> an</c><00:01:03.520><c> interval</c><00:01:03.920><c> with</c>

00:01:04.710 --> 00:01:04.720 align:start position:0%
just a an interval with
 

00:01:04.720 --> 00:01:06.789 align:start position:0%
just a an interval with
one<00:01:05.040><c> point</c><00:01:05.519><c> right</c><00:01:05.680><c> like</c><00:01:05.920><c> maybe</c><00:01:06.240><c> the</c><00:01:06.400><c> left</c><00:01:06.640><c> and</c>

00:01:06.789 --> 00:01:06.799 align:start position:0%
one point right like maybe the left and
 

00:01:06.799 --> 00:01:08.310 align:start position:0%
one point right like maybe the left and
right<00:01:06.960><c> value</c><00:01:07.280><c> are</c><00:01:07.439><c> equal</c><00:01:07.760><c> then</c><00:01:07.920><c> the</c><00:01:08.000><c> size</c><00:01:08.240><c> of</c>

00:01:08.310 --> 00:01:08.320 align:start position:0%
right value are equal then the size of
 

00:01:08.320 --> 00:01:09.350 align:start position:0%
right value are equal then the size of
this<00:01:08.479><c> interval</c><00:01:08.799><c> is</c><00:01:08.880><c> going</c><00:01:08.960><c> to</c><00:01:09.040><c> be</c>

00:01:09.350 --> 00:01:09.360 align:start position:0%
this interval is going to be
 

00:01:09.360 --> 00:01:12.070 align:start position:0%
this interval is going to be
one<00:01:10.000><c> we're</c><00:01:10.240><c> also</c><00:01:10.560><c> given</c><00:01:10.880><c> an</c><00:01:11.119><c> integer</c><00:01:11.439><c> array</c><00:01:11.760><c> of</c>

00:01:12.070 --> 00:01:12.080 align:start position:0%
one we're also given an integer array of
 

00:01:12.080 --> 00:01:13.910 align:start position:0%
one we're also given an integer array of
queries<00:01:12.640><c> and</c><00:01:12.799><c> the</c><00:01:13.040><c> answer</c><00:01:13.439><c> to</c><00:01:13.600><c> the</c>

00:01:13.910 --> 00:01:13.920 align:start position:0%
queries and the answer to the
 

00:01:13.920 --> 00:01:15.429 align:start position:0%
queries and the answer to the
jth<00:01:14.320><c> query</c><00:01:14.640><c> this</c><00:01:14.799><c> is</c><00:01:14.880><c> where</c><00:01:15.040><c> things</c><00:01:15.280><c> are</c><00:01:15.360><c> going</c>

00:01:15.429 --> 00:01:15.439 align:start position:0%
jth query this is where things are going
 

00:01:15.439 --> 00:01:17.270 align:start position:0%
jth query this is where things are going
to<00:01:15.520><c> get</c><00:01:15.680><c> a</c><00:01:15.840><c> little</c><00:01:16.080><c> bit</c><00:01:16.320><c> complicated</c>

00:01:17.270 --> 00:01:17.280 align:start position:0%
to get a little bit complicated
 

00:01:17.280 --> 00:01:20.310 align:start position:0%
to get a little bit complicated
the<00:01:17.520><c> answer</c><00:01:17.840><c> to</c><00:01:18.240><c> each</c><00:01:18.560><c> query</c><00:01:19.200><c> is</c><00:01:19.439><c> basically</c>

00:01:20.310 --> 00:01:20.320 align:start position:0%
the answer to each query is basically
 

00:01:20.320 --> 00:01:24.230 align:start position:0%
the answer to each query is basically
the<00:01:20.720><c> size</c><00:01:21.280><c> of</c><00:01:21.439><c> the</c><00:01:21.759><c> interval</c><00:01:23.040><c> the</c><00:01:23.280><c> size</c><00:01:23.759><c> of</c><00:01:23.920><c> the</c>

00:01:24.230 --> 00:01:24.240 align:start position:0%
the size of the interval the size of the
 

00:01:24.240 --> 00:01:27.749 align:start position:0%
the size of the interval the size of the
smallest<00:01:25.040><c> interval</c><00:01:25.520><c> such</c><00:01:25.920><c> that</c><00:01:26.400><c> q</c><00:01:27.119><c> falls</c>

00:01:27.749 --> 00:01:27.759 align:start position:0%
smallest interval such that q falls
 

00:01:27.759 --> 00:01:30.710 align:start position:0%
smallest interval such that q falls
into<00:01:28.560><c> the</c><00:01:29.040><c> interval</c><00:01:29.759><c> so</c><00:01:30.079><c> for</c><00:01:30.240><c> example</c><00:01:30.560><c> we</c>

00:01:30.710 --> 00:01:30.720 align:start position:0%
into the interval so for example we
 

00:01:30.720 --> 00:01:31.429 align:start position:0%
into the interval so for example we
could<00:01:30.799><c> have</c><00:01:31.040><c> maybe</c>

00:01:31.429 --> 00:01:31.439 align:start position:0%
could have maybe
 

00:01:31.439 --> 00:01:33.910 align:start position:0%
could have maybe
one<00:01:32.240><c> interval</c><00:01:32.640><c> like</c><00:01:32.799><c> this</c><00:01:33.119><c> and</c><00:01:33.200><c> then</c><00:01:33.360><c> maybe</c><00:01:33.680><c> a</c>

00:01:33.910 --> 00:01:33.920 align:start position:0%
one interval like this and then maybe a
 

00:01:33.920 --> 00:01:34.950 align:start position:0%
one interval like this and then maybe a
smaller<00:01:34.400><c> interval</c>

00:01:34.950 --> 00:01:34.960 align:start position:0%
smaller interval
 

00:01:34.960 --> 00:01:37.510 align:start position:0%
smaller interval
like<00:01:35.520><c> this</c><00:01:35.920><c> and</c><00:01:36.079><c> let's</c><00:01:36.320><c> say</c><00:01:36.479><c> we</c><00:01:36.640><c> had</c><00:01:36.880><c> a</c><00:01:37.119><c> query</c>

00:01:37.510 --> 00:01:37.520 align:start position:0%
like this and let's say we had a query
 

00:01:37.520 --> 00:01:39.030 align:start position:0%
like this and let's say we had a query
such<00:01:37.759><c> that</c><00:01:38.000><c> the</c><00:01:38.159><c> query</c><00:01:38.560><c> you</c><00:01:38.720><c> know</c>

00:01:39.030 --> 00:01:39.040 align:start position:0%
such that the query you know
 

00:01:39.040 --> 00:01:41.109 align:start position:0%
such that the query you know
the<00:01:39.200><c> query</c><00:01:39.600><c> is</c><00:01:39.840><c> over</c><00:01:40.079><c> here</c><00:01:40.400><c> this</c><00:01:40.560><c> is</c><00:01:40.640><c> the</c><00:01:40.799><c> point</c>

00:01:41.109 --> 00:01:41.119 align:start position:0%
the query is over here this is the point
 

00:01:41.119 --> 00:01:42.710 align:start position:0%
the query is over here this is the point
each<00:01:41.360><c> query</c><00:01:41.680><c> is</c><00:01:41.759><c> just</c><00:01:41.920><c> going</c><00:01:42.000><c> to</c><00:01:42.079><c> be</c><00:01:42.240><c> a</c><00:01:42.320><c> single</c>

00:01:42.710 --> 00:01:42.720 align:start position:0%
each query is just going to be a single
 

00:01:42.720 --> 00:01:44.550 align:start position:0%
each query is just going to be a single
value<00:01:43.200><c> a</c><00:01:43.439><c> point</c><00:01:43.840><c> so</c>

00:01:44.550 --> 00:01:44.560 align:start position:0%
value a point so
 

00:01:44.560 --> 00:01:47.590 align:start position:0%
value a point so
as<00:01:44.720><c> we</c><00:01:44.880><c> can</c><00:01:45.040><c> see</c><00:01:45.280><c> this</c><00:01:45.600><c> point</c><00:01:46.240><c> falls</c><00:01:46.720><c> into</c><00:01:47.119><c> two</c>

00:01:47.590 --> 00:01:47.600 align:start position:0%
as we can see this point falls into two
 

00:01:47.600 --> 00:01:49.510 align:start position:0%
as we can see this point falls into two
different<00:01:48.240><c> intervals</c><00:01:48.880><c> which</c><00:01:49.119><c> one</c><00:01:49.280><c> of</c><00:01:49.360><c> the</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
different intervals which one of the
 

00:01:49.520 --> 00:01:50.950 align:start position:0%
different intervals which one of the
intervals<00:01:50.000><c> is</c><00:01:50.159><c> smaller</c>

00:01:50.950 --> 00:01:50.960 align:start position:0%
intervals is smaller
 

00:01:50.960 --> 00:01:53.190 align:start position:0%
intervals is smaller
it's<00:01:51.360><c> this</c><00:01:51.680><c> little</c><00:01:51.920><c> one</c><00:01:52.159><c> over</c><00:01:52.399><c> here</c><00:01:52.640><c> right</c><00:01:52.880><c> so</c>

00:01:53.190 --> 00:01:53.200 align:start position:0%
it's this little one over here right so
 

00:01:53.200 --> 00:01:54.550 align:start position:0%
it's this little one over here right so
basically<00:01:53.520><c> we're</c><00:01:53.759><c> going</c><00:01:53.840><c> to</c><00:01:53.920><c> return</c>

00:01:54.550 --> 00:01:54.560 align:start position:0%
basically we're going to return
 

00:01:54.560 --> 00:01:57.270 align:start position:0%
basically we're going to return
the<00:01:54.960><c> length</c><00:01:55.360><c> of</c><00:01:55.520><c> that</c><00:01:55.840><c> smaller</c><00:01:56.479><c> interval</c><00:01:57.040><c> for</c>

00:01:57.270 --> 00:01:57.280 align:start position:0%
the length of that smaller interval for
 

00:01:57.280 --> 00:01:58.389 align:start position:0%
the length of that smaller interval for
each<00:01:57.680><c> query</c>

00:01:58.389 --> 00:01:58.399 align:start position:0%
each query
 

00:01:58.399 --> 00:02:00.950 align:start position:0%
each query
since<00:01:58.640><c> we're</c><00:01:58.880><c> doing</c><00:01:59.520><c> a</c><00:01:59.759><c> result</c><00:02:00.320><c> for</c><00:02:00.560><c> every</c>

00:02:00.950 --> 00:02:00.960 align:start position:0%
since we're doing a result for every
 

00:02:00.960 --> 00:02:02.630 align:start position:0%
since we're doing a result for every
single<00:02:01.360><c> query</c><00:02:01.680><c> that</c><00:02:01.840><c> we</c><00:02:01.920><c> have</c><00:02:02.079><c> we're</c><00:02:02.320><c> actually</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
single query that we have we're actually
 

00:02:02.640 --> 00:02:05.190 align:start position:0%
single query that we have we're actually
returning<00:02:03.200><c> an</c><00:02:03.360><c> array</c><00:02:04.079><c> output</c><00:02:04.560><c> basically</c>

00:02:05.190 --> 00:02:05.200 align:start position:0%
returning an array output basically
 

00:02:05.200 --> 00:02:07.109 align:start position:0%
returning an array output basically
for<00:02:05.439><c> each</c><00:02:05.600><c> query</c><00:02:06.240><c> like</c><00:02:06.399><c> this</c><00:02:06.560><c> is</c><00:02:06.640><c> our</c><00:02:06.799><c> query</c>

00:02:07.109 --> 00:02:07.119 align:start position:0%
for each query like this is our query
 

00:02:07.119 --> 00:02:08.630 align:start position:0%
for each query like this is our query
array<00:02:07.600><c> we</c><00:02:07.680><c> have</c><00:02:07.840><c> two</c><00:02:08.080><c> three</c><00:02:08.319><c> four</c>

00:02:08.630 --> 00:02:08.640 align:start position:0%
array we have two three four
 

00:02:08.640 --> 00:02:09.990 align:start position:0%
array we have two three four
five<00:02:09.039><c> for</c><00:02:09.200><c> each</c><00:02:09.360><c> one</c><00:02:09.520><c> of</c><00:02:09.599><c> these</c><00:02:09.759><c> we're</c><00:02:09.920><c> gonna</c>

00:02:09.990 --> 00:02:10.000 align:start position:0%
five for each one of these we're gonna
 

00:02:10.000 --> 00:02:12.150 align:start position:0%
five for each one of these we're gonna
have<00:02:10.080><c> a</c><00:02:10.239><c> corresponding</c><00:02:10.959><c> output</c><00:02:11.440><c> value</c><00:02:11.920><c> which</c>

00:02:12.150 --> 00:02:12.160 align:start position:0%
have a corresponding output value which
 

00:02:12.160 --> 00:02:13.830 align:start position:0%
have a corresponding output value which
is<00:02:12.239><c> gonna</c><00:02:12.480><c> tell</c><00:02:12.640><c> us</c><00:02:12.800><c> the</c><00:02:13.120><c> size</c>

00:02:13.830 --> 00:02:13.840 align:start position:0%
is gonna tell us the size
 

00:02:13.840 --> 00:02:16.070 align:start position:0%
is gonna tell us the size
of<00:02:13.920><c> the</c><00:02:14.239><c> smallest</c><00:02:14.800><c> interval</c><00:02:15.280><c> that</c><00:02:15.440><c> this</c><00:02:15.599><c> query</c>

00:02:16.070 --> 00:02:16.080 align:start position:0%
of the smallest interval that this query
 

00:02:16.080 --> 00:02:17.510 align:start position:0%
of the smallest interval that this query
falls<00:02:16.560><c> into</c>

00:02:17.510 --> 00:02:17.520 align:start position:0%
falls into
 

00:02:17.520 --> 00:02:20.550 align:start position:0%
falls into
if<00:02:17.840><c> it's</c><00:02:18.239><c> possible</c><00:02:18.800><c> that</c><00:02:19.040><c> a</c><00:02:19.280><c> query</c><00:02:20.160><c> like</c>

00:02:20.550 --> 00:02:20.560 align:start position:0%
if it's possible that a query like
 

00:02:20.560 --> 00:02:23.270 align:start position:0%
if it's possible that a query like
two<00:02:20.879><c> for</c><00:02:21.040><c> example</c><00:02:21.520><c> might</c><00:02:21.920><c> not</c><00:02:22.319><c> fall</c><00:02:22.560><c> into</c><00:02:22.879><c> any</c>

00:02:23.270 --> 00:02:23.280 align:start position:0%
two for example might not fall into any
 

00:02:23.280 --> 00:02:25.030 align:start position:0%
two for example might not fall into any
interval<00:02:23.680><c> that's</c><00:02:23.920><c> available</c><00:02:24.319><c> to</c><00:02:24.560><c> us</c><00:02:24.720><c> in</c><00:02:24.879><c> that</c>

00:02:25.030 --> 00:02:25.040 align:start position:0%
interval that's available to us in that
 

00:02:25.040 --> 00:02:27.190 align:start position:0%
interval that's available to us in that
case<00:02:25.360><c> we</c><00:02:25.520><c> return</c><00:02:25.920><c> a</c><00:02:26.080><c> default</c><00:02:26.560><c> value</c><00:02:26.959><c> of</c>

00:02:27.190 --> 00:02:27.200 align:start position:0%
case we return a default value of
 

00:02:27.200 --> 00:02:27.990 align:start position:0%
case we return a default value of
negative<00:02:27.599><c> one</c>

00:02:27.990 --> 00:02:28.000 align:start position:0%
negative one
 

00:02:28.000 --> 00:02:29.510 align:start position:0%
negative one
it's<00:02:28.160><c> also</c><00:02:28.480><c> possible</c><00:02:28.879><c> we</c><00:02:28.959><c> could</c><00:02:29.120><c> have</c>

00:02:29.510 --> 00:02:29.520 align:start position:0%
it's also possible we could have
 

00:02:29.520 --> 00:02:31.270 align:start position:0%
it's also possible we could have
multiple<00:02:29.920><c> queries</c><00:02:30.239><c> that</c><00:02:30.400><c> are</c><00:02:30.480><c> the</c><00:02:30.640><c> exact</c><00:02:30.959><c> same</c>

00:02:31.270 --> 00:02:31.280 align:start position:0%
multiple queries that are the exact same
 

00:02:31.280 --> 00:02:32.790 align:start position:0%
multiple queries that are the exact same
right<00:02:31.440><c> there's</c><00:02:31.599><c> no</c><00:02:31.760><c> restriction</c><00:02:32.319><c> on</c><00:02:32.480><c> that</c>

00:02:32.790 --> 00:02:32.800 align:start position:0%
right there's no restriction on that
 

00:02:32.800 --> 00:02:34.550 align:start position:0%
right there's no restriction on that
we<00:02:32.879><c> could</c><00:02:33.040><c> have</c><00:02:33.200><c> a</c><00:02:33.360><c> two</c><00:02:33.599><c> query</c><00:02:34.080><c> and</c><00:02:34.239><c> another</c>

00:02:34.550 --> 00:02:34.560 align:start position:0%
we could have a two query and another
 

00:02:34.560 --> 00:02:36.470 align:start position:0%
we could have a two query and another
two<00:02:34.800><c> query</c><00:02:35.599><c> so</c><00:02:35.760><c> what's</c><00:02:36.000><c> going</c><00:02:36.080><c> to</c><00:02:36.160><c> be</c><00:02:36.239><c> the</c>

00:02:36.470 --> 00:02:36.480 align:start position:0%
two query so what's going to be the
 

00:02:36.480 --> 00:02:38.309 align:start position:0%
two query so what's going to be the
brute<00:02:36.879><c> force</c><00:02:37.200><c> way</c><00:02:37.360><c> to</c><00:02:37.519><c> solve</c><00:02:37.760><c> this</c><00:02:37.920><c> problem</c>

00:02:38.309 --> 00:02:38.319 align:start position:0%
brute force way to solve this problem
 

00:02:38.319 --> 00:02:39.030 align:start position:0%
brute force way to solve this problem
can<00:02:38.480><c> you</c><00:02:38.640><c> answer</c>

00:02:39.030 --> 00:02:39.040 align:start position:0%
can you answer
 

00:02:39.040 --> 00:02:41.750 align:start position:0%
can you answer
that<00:02:39.599><c> well</c><00:02:40.160><c> for</c><00:02:40.400><c> each</c><00:02:40.720><c> query</c><00:02:41.280><c> we're</c><00:02:41.519><c> looking</c>

00:02:41.750 --> 00:02:41.760 align:start position:0%
that well for each query we're looking
 

00:02:41.760 --> 00:02:43.350 align:start position:0%
that well for each query we're looking
for<00:02:41.920><c> the</c><00:02:42.080><c> minimum</c><00:02:42.560><c> interval</c><00:02:42.959><c> right</c><00:02:43.120><c> so</c><00:02:43.280><c> the</c>

00:02:43.350 --> 00:02:43.360 align:start position:0%
for the minimum interval right so the
 

00:02:43.360 --> 00:02:44.309 align:start position:0%
for the minimum interval right so the
brute<00:02:43.599><c> force</c><00:02:43.840><c> will</c><00:02:44.000><c> be</c>

00:02:44.309 --> 00:02:44.319 align:start position:0%
brute force will be
 

00:02:44.319 --> 00:02:46.949 align:start position:0%
brute force will be
for<00:02:44.560><c> each</c><00:02:44.800><c> query</c><00:02:45.360><c> just</c><00:02:45.599><c> scan</c><00:02:46.160><c> through</c><00:02:46.800><c> the</c>

00:02:46.949 --> 00:02:46.959 align:start position:0%
for each query just scan through the
 

00:02:46.959 --> 00:02:47.830 align:start position:0%
for each query just scan through the
entire

00:02:47.830 --> 00:02:47.840 align:start position:0%
entire
 

00:02:47.840 --> 00:02:50.309 align:start position:0%
entire
interval<00:02:48.400><c> list</c><00:02:48.800><c> and</c><00:02:48.879><c> then</c><00:02:49.120><c> find</c><00:02:49.440><c> which</c><00:02:49.680><c> one</c><00:02:49.920><c> of</c>

00:02:50.309 --> 00:02:50.319 align:start position:0%
interval list and then find which one of
 

00:02:50.319 --> 00:02:51.190 align:start position:0%
interval list and then find which one of
the<00:02:50.640><c> queries</c>

00:02:51.190 --> 00:02:51.200 align:start position:0%
the queries
 

00:02:51.200 --> 00:02:52.710 align:start position:0%
the queries
which<00:02:51.440><c> one</c><00:02:51.599><c> of</c><00:02:51.680><c> the</c><00:02:51.840><c> intervals</c><00:02:52.239><c> the</c><00:02:52.400><c> query</c>

00:02:52.710 --> 00:02:52.720 align:start position:0%
which one of the intervals the query
 

00:02:52.720 --> 00:02:55.110 align:start position:0%
which one of the intervals the query
falls<00:02:53.120><c> into</c><00:02:53.920><c> that</c><00:02:54.160><c> happens</c><00:02:54.480><c> to</c><00:02:54.560><c> be</c><00:02:54.800><c> the</c>

00:02:55.110 --> 00:02:55.120 align:start position:0%
falls into that happens to be the
 

00:02:55.120 --> 00:02:57.910 align:start position:0%
falls into that happens to be the
smallest<00:02:56.239><c> interval</c><00:02:56.640><c> right</c><00:02:56.800><c> so</c><00:02:57.280><c> two</c><00:02:57.599><c> in</c><00:02:57.680><c> this</c>

00:02:57.910 --> 00:02:57.920 align:start position:0%
smallest interval right so two in this
 

00:02:57.920 --> 00:02:58.309 align:start position:0%
smallest interval right so two in this
case

00:02:58.309 --> 00:02:58.319 align:start position:0%
case
 

00:02:58.319 --> 00:03:00.470 align:start position:0%
case
which<00:02:58.560><c> one</c><00:02:58.720><c> of</c><00:02:58.800><c> these</c><00:02:59.120><c> four</c><00:02:59.519><c> intervals</c><00:03:00.080><c> is</c><00:03:00.239><c> the</c>

00:03:00.470 --> 00:03:00.480 align:start position:0%
which one of these four intervals is the
 

00:03:00.480 --> 00:03:02.630 align:start position:0%
which one of these four intervals is the
smallest<00:03:00.959><c> interval</c><00:03:01.280><c> that</c><00:03:01.519><c> two</c><00:03:01.760><c> falls</c><00:03:02.080><c> into</c>

00:03:02.630 --> 00:03:02.640 align:start position:0%
smallest interval that two falls into
 

00:03:02.640 --> 00:03:04.630 align:start position:0%
smallest interval that two falls into
it<00:03:02.800><c> falls</c><00:03:03.120><c> into</c><00:03:03.360><c> this</c><00:03:03.599><c> one</c><00:03:03.920><c> and</c><00:03:04.080><c> the</c><00:03:04.239><c> length</c><00:03:04.480><c> of</c>

00:03:04.630 --> 00:03:04.640 align:start position:0%
it falls into this one and the length of
 

00:03:04.640 --> 00:03:06.790 align:start position:0%
it falls into this one and the length of
that<00:03:04.879><c> is</c><00:03:05.040><c> three</c><00:03:05.519><c> it</c><00:03:05.760><c> also</c><00:03:06.000><c> falls</c><00:03:06.319><c> into</c><00:03:06.560><c> this</c>

00:03:06.790 --> 00:03:06.800 align:start position:0%
that is three it also falls into this
 

00:03:06.800 --> 00:03:07.190 align:start position:0%
that is three it also falls into this
one

00:03:07.190 --> 00:03:07.200 align:start position:0%
one
 

00:03:07.200 --> 00:03:08.790 align:start position:0%
one
and<00:03:07.360><c> the</c><00:03:07.440><c> length</c><00:03:07.760><c> of</c><00:03:07.840><c> this</c><00:03:08.000><c> one</c><00:03:08.319><c> well</c><00:03:08.560><c> actually</c>

00:03:08.790 --> 00:03:08.800 align:start position:0%
and the length of this one well actually
 

00:03:08.800 --> 00:03:10.229 align:start position:0%
and the length of this one well actually
the<00:03:08.879><c> length</c><00:03:09.120><c> of</c><00:03:09.200><c> this</c><00:03:09.360><c> one</c><00:03:09.519><c> is</c><00:03:09.760><c> four</c><00:03:10.159><c> the</c>

00:03:10.229 --> 00:03:10.239 align:start position:0%
the length of this one is four the
 

00:03:10.239 --> 00:03:11.190 align:start position:0%
the length of this one is four the
length<00:03:10.560><c> of</c><00:03:10.640><c> this</c><00:03:10.879><c> one</c>

00:03:11.190 --> 00:03:11.200 align:start position:0%
length of this one
 

00:03:11.200 --> 00:03:14.390 align:start position:0%
length of this one
is<00:03:11.440><c> three</c><00:03:12.159><c> and</c><00:03:12.560><c> it</c><00:03:12.800><c> does</c><00:03:13.120><c> not</c><00:03:13.519><c> fall</c><00:03:13.840><c> into</c><00:03:14.080><c> this</c>

00:03:14.390 --> 00:03:14.400 align:start position:0%
is three and it does not fall into this
 

00:03:14.400 --> 00:03:15.270 align:start position:0%
is three and it does not fall into this
one

00:03:15.270 --> 00:03:15.280 align:start position:0%
one
 

00:03:15.280 --> 00:03:17.509 align:start position:0%
one
and<00:03:15.599><c> two</c><00:03:15.920><c> also</c><00:03:16.239><c> does</c><00:03:16.400><c> not</c><00:03:16.640><c> fall</c><00:03:16.879><c> into</c><00:03:17.120><c> this</c><00:03:17.280><c> one</c>

00:03:17.509 --> 00:03:17.519 align:start position:0%
and two also does not fall into this one
 

00:03:17.519 --> 00:03:19.589 align:start position:0%
and two also does not fall into this one
so<00:03:17.840><c> what's</c><00:03:18.080><c> the</c><00:03:18.239><c> size</c><00:03:18.560><c> of</c><00:03:18.640><c> the</c><00:03:18.720><c> smallest</c><00:03:19.200><c> query</c>

00:03:19.589 --> 00:03:19.599 align:start position:0%
so what's the size of the smallest query
 

00:03:19.599 --> 00:03:20.790 align:start position:0%
so what's the size of the smallest query
it's<00:03:19.840><c> going</c><00:03:19.920><c> to</c><00:03:20.000><c> be</c><00:03:20.239><c> 3</c>

00:03:20.790 --> 00:03:20.800 align:start position:0%
it's going to be 3
 

00:03:20.800 --> 00:03:22.630 align:start position:0%
it's going to be 3
that's<00:03:21.040><c> why</c><00:03:21.200><c> we</c><00:03:21.360><c> can</c><00:03:21.519><c> see</c><00:03:21.840><c> over</c><00:03:22.159><c> here</c><00:03:22.480><c> the</c>

00:03:22.630 --> 00:03:22.640 align:start position:0%
that's why we can see over here the
 

00:03:22.640 --> 00:03:25.190 align:start position:0%
that's why we can see over here the
first<00:03:22.959><c> value</c><00:03:23.360><c> in</c><00:03:23.440><c> our</c><00:03:23.599><c> output</c><00:03:24.080><c> is</c><00:03:24.400><c> 3.</c>

00:03:25.190 --> 00:03:25.200 align:start position:0%
first value in our output is 3.
 

00:03:25.200 --> 00:03:26.390 align:start position:0%
first value in our output is 3.
so<00:03:25.440><c> what's</c><00:03:25.680><c> going</c><00:03:25.760><c> to</c><00:03:25.840><c> be</c><00:03:25.920><c> the</c><00:03:26.080><c> time</c>

00:03:26.390 --> 00:03:26.400 align:start position:0%
so what's going to be the time
 

00:03:26.400 --> 00:03:28.309 align:start position:0%
so what's going to be the time
complexity<00:03:27.040><c> of</c><00:03:27.120><c> that</c><00:03:27.360><c> well</c><00:03:27.920><c> it's</c><00:03:28.080><c> just</c><00:03:28.239><c> going</c>

00:03:28.309 --> 00:03:28.319 align:start position:0%
complexity of that well it's just going
 

00:03:28.319 --> 00:03:30.070 align:start position:0%
complexity of that well it's just going
to<00:03:28.400><c> be</c><00:03:28.560><c> a</c><00:03:28.720><c> nested</c><00:03:29.200><c> for</c><00:03:29.519><c> loop</c><00:03:29.760><c> right</c><00:03:29.920><c> we're</c>

00:03:30.070 --> 00:03:30.080 align:start position:0%
to be a nested for loop right we're
 

00:03:30.080 --> 00:03:30.630 align:start position:0%
to be a nested for loop right we're
going<00:03:30.159><c> to</c><00:03:30.239><c> have</c>

00:03:30.630 --> 00:03:30.640 align:start position:0%
going to have
 

00:03:30.640 --> 00:03:33.110 align:start position:0%
going to have
a<00:03:30.879><c> length</c><00:03:31.280><c> of</c><00:03:31.440><c> queries</c><00:03:32.239><c> and</c><00:03:32.400><c> the</c><00:03:32.560><c> length</c><00:03:32.959><c> of</c>

00:03:33.110 --> 00:03:33.120 align:start position:0%
a length of queries and the length of
 

00:03:33.120 --> 00:03:34.630 align:start position:0%
a length of queries and the length of
intervals<00:03:33.599><c> right</c><00:03:33.760><c> so</c><00:03:34.000><c> multiply</c><00:03:34.400><c> those</c>

00:03:34.630 --> 00:03:34.640 align:start position:0%
intervals right so multiply those
 

00:03:34.640 --> 00:03:35.670 align:start position:0%
intervals right so multiply those
together<00:03:35.040><c> let's</c><00:03:35.200><c> say</c><00:03:35.360><c> it's</c>

00:03:35.670 --> 00:03:35.680 align:start position:0%
together let's say it's
 

00:03:35.680 --> 00:03:38.070 align:start position:0%
together let's say it's
you<00:03:35.760><c> know</c><00:03:36.000><c> n</c><00:03:36.239><c> is</c><00:03:36.400><c> the</c><00:03:36.480><c> size</c><00:03:36.799><c> of</c><00:03:36.879><c> queries</c><00:03:37.599><c> or</c><00:03:37.920><c> n</c>

00:03:38.070 --> 00:03:38.080 align:start position:0%
you know n is the size of queries or n
 

00:03:38.080 --> 00:03:39.830 align:start position:0%
you know n is the size of queries or n
is<00:03:38.159><c> the</c><00:03:38.319><c> size</c><00:03:38.560><c> of</c><00:03:38.640><c> intervals</c><00:03:39.120><c> q</c><00:03:39.360><c> is</c><00:03:39.440><c> the</c><00:03:39.519><c> size</c>

00:03:39.830 --> 00:03:39.840 align:start position:0%
is the size of intervals q is the size
 

00:03:39.840 --> 00:03:41.270 align:start position:0%
is the size of intervals q is the size
of<00:03:40.080><c> queries</c><00:03:40.480><c> we're</c><00:03:40.640><c> going</c><00:03:40.720><c> to</c><00:03:40.799><c> get</c><00:03:41.040><c> n</c>

00:03:41.270 --> 00:03:41.280 align:start position:0%
of queries we're going to get n
 

00:03:41.280 --> 00:03:44.470 align:start position:0%
of queries we're going to get n
times<00:03:42.080><c> q</c><00:03:42.640><c> is</c><00:03:42.799><c> going</c><00:03:42.879><c> to</c><00:03:42.959><c> be</c><00:03:43.120><c> the</c><00:03:43.360><c> overall</c><00:03:44.239><c> time</c>

00:03:44.470 --> 00:03:44.480 align:start position:0%
times q is going to be the overall time
 

00:03:44.480 --> 00:03:45.350 align:start position:0%
times q is going to be the overall time
complexity

00:03:45.350 --> 00:03:45.360 align:start position:0%
complexity
 

00:03:45.360 --> 00:03:47.670 align:start position:0%
complexity
now<00:03:45.599><c> is</c><00:03:45.760><c> it</c><00:03:45.920><c> possible</c><00:03:46.319><c> to</c><00:03:46.480><c> solve</c><00:03:46.720><c> this</c><00:03:46.959><c> problem</c>

00:03:47.670 --> 00:03:47.680 align:start position:0%
now is it possible to solve this problem
 

00:03:47.680 --> 00:03:48.869 align:start position:0%
now is it possible to solve this problem
more<00:03:47.920><c> efficiently</c>

00:03:48.869 --> 00:03:48.879 align:start position:0%
more efficiently
 

00:03:48.879 --> 00:03:51.350 align:start position:0%
more efficiently
yes<00:03:49.360><c> but</c><00:03:49.760><c> not</c><00:03:50.000><c> by</c><00:03:50.400><c> much</c><00:03:50.879><c> and</c><00:03:51.040><c> i'm</c><00:03:51.120><c> going</c><00:03:51.200><c> to</c>

00:03:51.350 --> 00:03:51.360 align:start position:0%
yes but not by much and i'm going to
 

00:03:51.360 --> 00:03:53.429 align:start position:0%
yes but not by much and i'm going to
show<00:03:51.519><c> you</c><00:03:51.840><c> what</c><00:03:52.080><c> the</c><00:03:52.239><c> time</c><00:03:52.400><c> complexity</c><00:03:53.040><c> is</c><00:03:53.280><c> and</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
show you what the time complexity is and
 

00:03:53.439 --> 00:03:54.630 align:start position:0%
show you what the time complexity is and
then<00:03:53.680><c> i'm</c><00:03:53.840><c> going</c><00:03:53.920><c> to</c><00:03:54.000><c> show</c><00:03:54.159><c> you</c><00:03:54.319><c> how</c><00:03:54.480><c> to</c>

00:03:54.630 --> 00:03:54.640 align:start position:0%
then i'm going to show you how to
 

00:03:54.640 --> 00:03:56.789 align:start position:0%
then i'm going to show you how to
actually<00:03:55.120><c> achieve</c><00:03:55.599><c> that</c><00:03:55.760><c> time</c><00:03:56.000><c> complexity</c>

00:03:56.789 --> 00:03:56.799 align:start position:0%
actually achieve that time complexity
 

00:03:56.799 --> 00:04:00.229 align:start position:0%
actually achieve that time complexity
so<00:03:57.040><c> it's</c><00:03:57.200><c> going</c><00:03:57.360><c> to</c><00:03:57.439><c> be</c><00:03:58.080><c> n</c><00:03:58.400><c> log</c><00:03:58.720><c> n</c><00:03:59.439><c> plus</c>

00:04:00.229 --> 00:04:00.239 align:start position:0%
so it's going to be n log n plus
 

00:04:00.239 --> 00:04:03.589 align:start position:0%
so it's going to be n log n plus
q<00:04:01.120><c> log</c><00:04:01.920><c> q</c><00:04:02.720><c> because</c>

00:04:03.589 --> 00:04:03.599 align:start position:0%
q log q because
 

00:04:03.599 --> 00:04:05.830 align:start position:0%
q log q because
the<00:04:04.000><c> and</c><00:04:04.319><c> and</c><00:04:04.480><c> mainly</c><00:04:04.799><c> this</c><00:04:04.959><c> time</c><00:04:05.200><c> complexity</c>

00:04:05.830 --> 00:04:05.840 align:start position:0%
the and and mainly this time complexity
 

00:04:05.840 --> 00:04:06.789 align:start position:0%
the and and mainly this time complexity
is<00:04:06.000><c> going</c><00:04:06.159><c> to</c><00:04:06.400><c> come</c>

00:04:06.789 --> 00:04:06.799 align:start position:0%
is going to come
 

00:04:06.799 --> 00:04:08.070 align:start position:0%
is going to come
from<00:04:06.959><c> the</c><00:04:07.120><c> fact</c><00:04:07.360><c> that</c><00:04:07.439><c> we're</c><00:04:07.599><c> going</c><00:04:07.680><c> to</c><00:04:07.760><c> be</c>

00:04:08.070 --> 00:04:08.080 align:start position:0%
from the fact that we're going to be
 

00:04:08.080 --> 00:04:09.910 align:start position:0%
from the fact that we're going to be
sorting<00:04:08.640><c> our</c><00:04:08.879><c> intervals</c><00:04:09.439><c> and</c><00:04:09.599><c> we're</c><00:04:09.760><c> going</c><00:04:09.840><c> to</c>

00:04:09.910 --> 00:04:09.920 align:start position:0%
sorting our intervals and we're going to
 

00:04:09.920 --> 00:04:10.229 align:start position:0%
sorting our intervals and we're going to
be

00:04:10.229 --> 00:04:10.239 align:start position:0%
be
 

00:04:10.239 --> 00:04:13.030 align:start position:0%
be
sorting<00:04:10.720><c> our</c><00:04:10.879><c> queries</c><00:04:11.519><c> and</c><00:04:11.760><c> once</c><00:04:12.080><c> we</c><00:04:12.319><c> do</c><00:04:12.560><c> that</c>

00:04:13.030 --> 00:04:13.040 align:start position:0%
sorting our queries and once we do that
 

00:04:13.040 --> 00:04:14.390 align:start position:0%
sorting our queries and once we do that
we<00:04:13.200><c> can</c><00:04:13.519><c> scan</c>

00:04:14.390 --> 00:04:14.400 align:start position:0%
we can scan
 

00:04:14.400 --> 00:04:17.509 align:start position:0%
we can scan
our<00:04:14.640><c> queries</c><00:04:15.200><c> from</c><00:04:15.599><c> left</c><00:04:16.160><c> to</c><00:04:16.400><c> right</c><00:04:17.040><c> and</c>

00:04:17.509 --> 00:04:17.519 align:start position:0%
our queries from left to right and
 

00:04:17.519 --> 00:04:19.830 align:start position:0%
our queries from left to right and
that'll<00:04:18.000><c> and</c><00:04:18.239><c> since</c><00:04:18.479><c> our</c><00:04:18.720><c> intervals</c><00:04:19.199><c> are</c><00:04:19.440><c> also</c>

00:04:19.830 --> 00:04:19.840 align:start position:0%
that'll and since our intervals are also
 

00:04:19.840 --> 00:04:20.710 align:start position:0%
that'll and since our intervals are also
sorted

00:04:20.710 --> 00:04:20.720 align:start position:0%
sorted
 

00:04:20.720 --> 00:04:23.749 align:start position:0%
sorted
each<00:04:21.120><c> query</c><00:04:21.519><c> will</c><00:04:21.680><c> be</c><00:04:22.079><c> close</c><00:04:22.720><c> to</c><00:04:22.880><c> the</c><00:04:23.120><c> interval</c>

00:04:23.749 --> 00:04:23.759 align:start position:0%
each query will be close to the interval
 

00:04:23.759 --> 00:04:25.670 align:start position:0%
each query will be close to the interval
that<00:04:24.000><c> it</c><00:04:24.160><c> belongs</c><00:04:24.720><c> to</c><00:04:24.880><c> right</c><00:04:25.120><c> the</c><00:04:25.199><c> smallest</c>

00:04:25.670 --> 00:04:25.680 align:start position:0%
that it belongs to right the smallest
 

00:04:25.680 --> 00:04:27.189 align:start position:0%
that it belongs to right the smallest
interval<00:04:26.080><c> that</c><00:04:26.240><c> it</c><00:04:26.320><c> belongs</c><00:04:26.800><c> to</c>

00:04:27.189 --> 00:04:27.199 align:start position:0%
interval that it belongs to
 

00:04:27.199 --> 00:04:29.430 align:start position:0%
interval that it belongs to
so<00:04:27.440><c> it'll</c><00:04:27.680><c> actually</c><00:04:28.160><c> end</c><00:04:28.400><c> up</c><00:04:28.960><c> being</c>

00:04:29.430 --> 00:04:29.440 align:start position:0%
so it'll actually end up being
 

00:04:29.440 --> 00:04:31.749 align:start position:0%
so it'll actually end up being
relatively<00:04:30.080><c> efficient</c><00:04:30.639><c> once</c><00:04:30.960><c> we</c><00:04:31.199><c> sort</c><00:04:31.520><c> both</c>

00:04:31.749 --> 00:04:31.759 align:start position:0%
relatively efficient once we sort both
 

00:04:31.759 --> 00:04:33.350 align:start position:0%
relatively efficient once we sort both
of<00:04:31.919><c> them</c><00:04:32.080><c> but</c><00:04:32.240><c> we're</c><00:04:32.479><c> also</c><00:04:32.720><c> going</c><00:04:32.880><c> to</c><00:04:32.960><c> actually</c>

00:04:33.350 --> 00:04:33.360 align:start position:0%
of them but we're also going to actually
 

00:04:33.360 --> 00:04:34.950 align:start position:0%
of them but we're also going to actually
need<00:04:33.680><c> a</c><00:04:33.919><c> data</c><00:04:34.320><c> structure</c>

00:04:34.950 --> 00:04:34.960 align:start position:0%
need a data structure
 

00:04:34.960 --> 00:04:37.749 align:start position:0%
need a data structure
in<00:04:35.120><c> order</c><00:04:35.360><c> to</c><00:04:35.520><c> actually</c><00:04:35.840><c> find</c><00:04:36.400><c> the</c><00:04:36.720><c> minimum</c>

00:04:37.749 --> 00:04:37.759 align:start position:0%
in order to actually find the minimum
 

00:04:37.759 --> 00:04:39.189 align:start position:0%
in order to actually find the minimum
the<00:04:38.080><c> smallest</c><00:04:38.639><c> interval</c>

00:04:39.189 --> 00:04:39.199 align:start position:0%
the smallest interval
 

00:04:39.199 --> 00:04:41.909 align:start position:0%
the smallest interval
so<00:04:39.360><c> we're</c><00:04:39.520><c> going</c><00:04:39.600><c> to</c><00:04:39.680><c> be</c><00:04:39.840><c> needing</c><00:04:40.320><c> a</c><00:04:40.960><c> min</c><00:04:41.280><c> heap</c>

00:04:41.909 --> 00:04:41.919 align:start position:0%
so we're going to be needing a min heap
 

00:04:41.919 --> 00:04:43.110 align:start position:0%
so we're going to be needing a min heap
to<00:04:42.240><c> achieve</c>

00:04:43.110 --> 00:04:43.120 align:start position:0%
to achieve
 

00:04:43.120 --> 00:04:45.749 align:start position:0%
to achieve
that<00:04:43.440><c> for</c><00:04:43.759><c> us</c><00:04:44.160><c> so</c><00:04:44.400><c> this</c><00:04:44.639><c> problem</c><00:04:45.040><c> is</c><00:04:45.199><c> a</c><00:04:45.360><c> hard</c>

00:04:45.749 --> 00:04:45.759 align:start position:0%
that for us so this problem is a hard
 

00:04:45.759 --> 00:04:47.270 align:start position:0%
that for us so this problem is a hard
problem<00:04:46.080><c> for</c><00:04:46.240><c> a</c><00:04:46.400><c> reason</c>

00:04:47.270 --> 00:04:47.280 align:start position:0%
problem for a reason
 

00:04:47.280 --> 00:04:49.189 align:start position:0%
problem for a reason
it<00:04:47.520><c> does</c><00:04:47.840><c> have</c><00:04:48.160><c> a</c><00:04:48.240><c> little</c><00:04:48.400><c> bit</c><00:04:48.560><c> of</c><00:04:48.639><c> difficulty</c>

00:04:49.189 --> 00:04:49.199 align:start position:0%
it does have a little bit of difficulty
 

00:04:49.199 --> 00:04:50.950 align:start position:0%
it does have a little bit of difficulty
it's<00:04:49.360><c> not</c><00:04:49.600><c> super</c><00:04:50.000><c> intuitive</c>

00:04:50.950 --> 00:04:50.960 align:start position:0%
it's not super intuitive
 

00:04:50.960 --> 00:04:53.110 align:start position:0%
it's not super intuitive
but<00:04:51.280><c> the</c><00:04:51.520><c> solution</c><00:04:51.919><c> is</c><00:04:52.080><c> doable</c><00:04:52.479><c> the</c><00:04:52.720><c> code</c><00:04:53.040><c> is</c>

00:04:53.110 --> 00:04:53.120 align:start position:0%
but the solution is doable the code is
 

00:04:53.120 --> 00:04:55.990 align:start position:0%
but the solution is doable the code is
going<00:04:53.199><c> to</c><00:04:53.280><c> be</c><00:04:53.440><c> about</c><00:04:53.840><c> 15</c><00:04:54.240><c> to</c><00:04:54.400><c> 20</c><00:04:54.720><c> lines</c><00:04:55.040><c> of</c><00:04:55.199><c> code</c>

00:04:55.990 --> 00:04:56.000 align:start position:0%
going to be about 15 to 20 lines of code
 

00:04:56.000 --> 00:04:57.670 align:start position:0%
going to be about 15 to 20 lines of code
so<00:04:56.240><c> pretty</c><00:04:56.479><c> much</c><00:04:56.720><c> like</c><00:04:56.960><c> every</c><00:04:57.280><c> interval</c>

00:04:57.670 --> 00:04:57.680 align:start position:0%
so pretty much like every interval
 

00:04:57.680 --> 00:04:59.189 align:start position:0%
so pretty much like every interval
problem<00:04:58.080><c> we're</c><00:04:58.240><c> going</c><00:04:58.400><c> to</c><00:04:58.479><c> use</c><00:04:58.720><c> the</c><00:04:58.880><c> fact</c><00:04:59.120><c> that</c>

00:04:59.189 --> 00:04:59.199 align:start position:0%
problem we're going to use the fact that
 

00:04:59.199 --> 00:05:00.629 align:start position:0%
problem we're going to use the fact that
we<00:04:59.360><c> can</c><00:04:59.520><c> sort</c><00:04:59.759><c> the</c><00:05:00.000><c> intervals</c>

00:05:00.629 --> 00:05:00.639 align:start position:0%
we can sort the intervals
 

00:05:00.639 --> 00:05:03.590 align:start position:0%
we can sort the intervals
to<00:05:00.880><c> our</c><00:05:01.120><c> advantage</c><00:05:02.160><c> and</c><00:05:02.560><c> just</c><00:05:02.800><c> by</c><00:05:03.120><c> looking</c><00:05:03.520><c> at</c>

00:05:03.590 --> 00:05:03.600 align:start position:0%
to our advantage and just by looking at
 

00:05:03.600 --> 00:05:05.189 align:start position:0%
to our advantage and just by looking at
the<00:05:03.759><c> picture</c><00:05:04.160><c> this</c><00:05:04.320><c> is</c><00:05:04.400><c> why</c><00:05:04.560><c> i</c><00:05:04.720><c> like</c><00:05:04.880><c> to</c><00:05:05.039><c> draw</c>

00:05:05.189 --> 00:05:05.199 align:start position:0%
the picture this is why i like to draw
 

00:05:05.199 --> 00:05:06.550 align:start position:0%
the picture this is why i like to draw
pictures<00:05:05.600><c> because</c><00:05:05.840><c> it</c><00:05:05.919><c> becomes</c><00:05:06.320><c> more</c>

00:05:06.550 --> 00:05:06.560 align:start position:0%
pictures because it becomes more
 

00:05:06.560 --> 00:05:07.270 align:start position:0%
pictures because it becomes more
intuitive

00:05:07.270 --> 00:05:07.280 align:start position:0%
intuitive
 

00:05:07.280 --> 00:05:09.270 align:start position:0%
intuitive
it<00:05:07.520><c> wouldn't</c><00:05:07.840><c> really</c><00:05:08.080><c> make</c><00:05:08.479><c> sense</c><00:05:08.800><c> for</c><00:05:08.960><c> us</c><00:05:09.120><c> to</c>

00:05:09.270 --> 00:05:09.280 align:start position:0%
it wouldn't really make sense for us to
 

00:05:09.280 --> 00:05:10.790 align:start position:0%
it wouldn't really make sense for us to
go<00:05:09.520><c> brute</c><00:05:10.000><c> force</c><00:05:10.400><c> right</c>

00:05:10.790 --> 00:05:10.800 align:start position:0%
go brute force right
 

00:05:10.800 --> 00:05:12.550 align:start position:0%
go brute force right
just<00:05:11.039><c> like</c><00:05:11.360><c> let's</c><00:05:11.520><c> say</c><00:05:11.680><c> the</c><00:05:11.840><c> order</c><00:05:12.240><c> we</c><00:05:12.320><c> were</c>

00:05:12.550 --> 00:05:12.560 align:start position:0%
just like let's say the order we were
 

00:05:12.560 --> 00:05:14.390 align:start position:0%
just like let's say the order we were
given<00:05:13.039><c> these</c><00:05:13.360><c> values</c><00:05:13.759><c> was</c><00:05:13.919><c> maybe</c>

00:05:14.390 --> 00:05:14.400 align:start position:0%
given these values was maybe
 

00:05:14.400 --> 00:05:16.390 align:start position:0%
given these values was maybe
three<00:05:14.800><c> and</c><00:05:14.960><c> then</c><00:05:15.280><c> four</c><00:05:15.680><c> and</c><00:05:15.759><c> then</c><00:05:16.080><c> two</c><00:05:16.320><c> it</c>

00:05:16.390 --> 00:05:16.400 align:start position:0%
three and then four and then two it
 

00:05:16.400 --> 00:05:18.070 align:start position:0%
three and then four and then two it
doesn't<00:05:16.639><c> make</c><00:05:16.880><c> sense</c><00:05:17.120><c> for</c><00:05:17.280><c> us</c><00:05:17.440><c> to</c><00:05:17.520><c> do</c><00:05:17.680><c> these</c><00:05:17.919><c> in</c>

00:05:18.070 --> 00:05:18.080 align:start position:0%
doesn't make sense for us to do these in
 

00:05:18.080 --> 00:05:19.830 align:start position:0%
doesn't make sense for us to do these in
a<00:05:18.160><c> random</c><00:05:18.639><c> order</c><00:05:18.960><c> of</c><00:05:19.120><c> course</c><00:05:19.360><c> we</c><00:05:19.520><c> would</c><00:05:19.680><c> want</c>

00:05:19.830 --> 00:05:19.840 align:start position:0%
a random order of course we would want
 

00:05:19.840 --> 00:05:20.550 align:start position:0%
a random order of course we would want
to<00:05:19.919><c> do</c><00:05:20.080><c> it</c><00:05:20.160><c> from</c>

00:05:20.550 --> 00:05:20.560 align:start position:0%
to do it from
 

00:05:20.560 --> 00:05:23.110 align:start position:0%
to do it from
left<00:05:21.120><c> to</c><00:05:21.360><c> right</c><00:05:21.759><c> because</c><00:05:22.160><c> the</c><00:05:22.560><c> queries</c><00:05:23.039><c> are</c>

00:05:23.110 --> 00:05:23.120 align:start position:0%
left to right because the queries are
 

00:05:23.120 --> 00:05:24.150 align:start position:0%
left to right because the queries are
going<00:05:23.199><c> to</c><00:05:23.280><c> be</c><00:05:23.520><c> close</c>

00:05:24.150 --> 00:05:24.160 align:start position:0%
going to be close
 

00:05:24.160 --> 00:05:26.469 align:start position:0%
going to be close
to<00:05:24.320><c> the</c><00:05:24.720><c> intervals</c><00:05:25.199><c> that</c><00:05:25.360><c> they</c><00:05:25.680><c> belong</c><00:05:26.080><c> to</c><00:05:26.400><c> and</c>

00:05:26.469 --> 00:05:26.479 align:start position:0%
to the intervals that they belong to and
 

00:05:26.479 --> 00:05:28.310 align:start position:0%
to the intervals that they belong to and
we're<00:05:26.720><c> going</c><00:05:26.800><c> to</c><00:05:26.880><c> get</c><00:05:27.039><c> the</c><00:05:27.199><c> smallest</c><00:05:27.759><c> interval</c>

00:05:28.310 --> 00:05:28.320 align:start position:0%
we're going to get the smallest interval
 

00:05:28.320 --> 00:05:30.230 align:start position:0%
we're going to get the smallest interval
that<00:05:28.560><c> it</c><00:05:28.639><c> belongs</c><00:05:29.039><c> to</c><00:05:29.520><c> and</c><00:05:29.680><c> of</c><00:05:29.759><c> course</c><00:05:30.160><c> you</c>

00:05:30.230 --> 00:05:30.240 align:start position:0%
that it belongs to and of course you
 

00:05:30.240 --> 00:05:31.590 align:start position:0%
that it belongs to and of course you
know<00:05:30.400><c> for</c><00:05:30.560><c> a</c><00:05:30.639><c> query</c><00:05:30.960><c> like</c><00:05:31.120><c> this</c><00:05:31.360><c> we're</c><00:05:31.520><c> not</c>

00:05:31.590 --> 00:05:31.600 align:start position:0%
know for a query like this we're not
 

00:05:31.600 --> 00:05:32.950 align:start position:0%
know for a query like this we're not
going<00:05:31.680><c> to</c><00:05:31.759><c> be</c><00:05:32.000><c> necessarily</c><00:05:32.479><c> looking</c><00:05:32.800><c> at</c>

00:05:32.950 --> 00:05:32.960 align:start position:0%
going to be necessarily looking at
 

00:05:32.960 --> 00:05:34.950 align:start position:0%
going to be necessarily looking at
intervals<00:05:33.520><c> all</c><00:05:33.600><c> the</c><00:05:33.680><c> way</c><00:05:33.919><c> over</c><00:05:34.320><c> here</c>

00:05:34.950 --> 00:05:34.960 align:start position:0%
intervals all the way over here
 

00:05:34.960 --> 00:05:37.110 align:start position:0%
intervals all the way over here
right<00:05:35.440><c> that's</c><00:05:35.759><c> 1</c><00:05:36.000><c> and</c><00:05:36.160><c> of</c><00:05:36.240><c> course</c><00:05:36.720><c> we</c><00:05:36.880><c> know</c><00:05:37.039><c> we</c>

00:05:37.110 --> 00:05:37.120 align:start position:0%
right that's 1 and of course we know we
 

00:05:37.120 --> 00:05:37.990 align:start position:0%
right that's 1 and of course we know we
could<00:05:37.280><c> also</c><00:05:37.520><c> have</c>

00:05:37.990 --> 00:05:38.000 align:start position:0%
could also have
 

00:05:38.000 --> 00:05:39.510 align:start position:0%
could also have
multiple<00:05:38.400><c> queries</c><00:05:38.720><c> we</c><00:05:38.800><c> have</c><00:05:38.880><c> a</c><00:05:38.960><c> query</c><00:05:39.280><c> here</c><00:05:39.440><c> we</c>

00:05:39.510 --> 00:05:39.520 align:start position:0%
multiple queries we have a query here we
 

00:05:39.520 --> 00:05:40.550 align:start position:0%
multiple queries we have a query here we
could<00:05:39.600><c> have</c><00:05:39.680><c> multiple</c><00:05:40.000><c> queries</c><00:05:40.320><c> with</c><00:05:40.479><c> the</c>

00:05:40.550 --> 00:05:40.560 align:start position:0%
could have multiple queries with the
 

00:05:40.560 --> 00:05:41.990 align:start position:0%
could have multiple queries with the
same<00:05:40.880><c> value</c><00:05:41.360><c> and</c><00:05:41.520><c> of</c><00:05:41.600><c> course</c>

00:05:41.990 --> 00:05:42.000 align:start position:0%
same value and of course
 

00:05:42.000 --> 00:05:44.469 align:start position:0%
same value and of course
both<00:05:42.320><c> of</c><00:05:42.400><c> them</c><00:05:42.880><c> would</c><00:05:43.120><c> have</c><00:05:43.600><c> the</c><00:05:43.919><c> same</c>

00:05:44.469 --> 00:05:44.479 align:start position:0%
both of them would have the same
 

00:05:44.479 --> 00:05:45.189 align:start position:0%
both of them would have the same
smallest

00:05:45.189 --> 00:05:45.199 align:start position:0%
smallest
 

00:05:45.199 --> 00:05:46.950 align:start position:0%
smallest
interval<00:05:45.520><c> that</c><00:05:45.680><c> they</c><00:05:45.840><c> belong</c><00:05:46.160><c> to</c><00:05:46.400><c> so</c><00:05:46.720><c> you</c><00:05:46.880><c> know</c>

00:05:46.950 --> 00:05:46.960 align:start position:0%
interval that they belong to so you know
 

00:05:46.960 --> 00:05:48.070 align:start position:0%
interval that they belong to so you know
we<00:05:47.039><c> could</c><00:05:47.199><c> kind</c><00:05:47.360><c> of</c><00:05:47.520><c> cut</c><00:05:47.680><c> down</c><00:05:47.919><c> on</c><00:05:48.000><c> the</c>

00:05:48.070 --> 00:05:48.080 align:start position:0%
we could kind of cut down on the
 

00:05:48.080 --> 00:05:49.749 align:start position:0%
we could kind of cut down on the
repeated<00:05:48.560><c> work</c><00:05:48.880><c> like</c><00:05:49.120><c> that</c>

00:05:49.749 --> 00:05:49.759 align:start position:0%
repeated work like that
 

00:05:49.759 --> 00:05:51.430 align:start position:0%
repeated work like that
but<00:05:49.919><c> so</c><00:05:50.080><c> how</c><00:05:50.320><c> is</c><00:05:50.400><c> this</c><00:05:50.560><c> going</c><00:05:50.720><c> to</c><00:05:50.800><c> work</c><00:05:51.120><c> like</c><00:05:51.360><c> i</c>

00:05:51.430 --> 00:05:51.440 align:start position:0%
but so how is this going to work like i
 

00:05:51.440 --> 00:05:53.510 align:start position:0%
but so how is this going to work like i
said<00:05:51.600><c> we're</c><00:05:51.759><c> going</c><00:05:51.919><c> to</c><00:05:52.000><c> need</c><00:05:52.240><c> a</c><00:05:52.479><c> min</c><00:05:52.800><c> heap</c>

00:05:53.510 --> 00:05:53.520 align:start position:0%
said we're going to need a min heap
 

00:05:53.520 --> 00:05:55.590 align:start position:0%
said we're going to need a min heap
so<00:05:53.759><c> we're</c><00:05:53.919><c> going</c><00:05:54.080><c> to</c><00:05:54.240><c> iterate</c><00:05:54.800><c> through</c><00:05:55.199><c> every</c>

00:05:55.590 --> 00:05:55.600 align:start position:0%
so we're going to iterate through every
 

00:05:55.600 --> 00:05:56.710 align:start position:0%
so we're going to iterate through every
single<00:05:56.000><c> query</c><00:05:56.400><c> right</c>

00:05:56.710 --> 00:05:56.720 align:start position:0%
single query right
 

00:05:56.720 --> 00:05:58.469 align:start position:0%
single query right
ultimately<00:05:57.199><c> we're</c><00:05:57.360><c> trying</c><00:05:57.600><c> to</c><00:05:57.759><c> build</c><00:05:58.160><c> our</c>

00:05:58.469 --> 00:05:58.479 align:start position:0%
ultimately we're trying to build our
 

00:05:58.479 --> 00:05:59.749 align:start position:0%
ultimately we're trying to build our
resulting<00:05:59.199><c> output</c>

00:05:59.749 --> 00:05:59.759 align:start position:0%
resulting output
 

00:05:59.759 --> 00:06:02.469 align:start position:0%
resulting output
with<00:05:59.919><c> the</c><00:06:00.240><c> size</c><00:06:00.720><c> of</c><00:06:00.800><c> the</c><00:06:00.960><c> minimum</c><00:06:01.759><c> interval</c>

00:06:02.469 --> 00:06:02.479 align:start position:0%
with the size of the minimum interval
 

00:06:02.479 --> 00:06:04.230 align:start position:0%
with the size of the minimum interval
that<00:06:02.639><c> each</c><00:06:02.880><c> query</c><00:06:03.199><c> belongs</c><00:06:03.600><c> to</c><00:06:03.840><c> so</c>

00:06:04.230 --> 00:06:04.240 align:start position:0%
that each query belongs to so
 

00:06:04.240 --> 00:06:06.870 align:start position:0%
that each query belongs to so
let's<00:06:04.479><c> start</c><00:06:04.880><c> with</c><00:06:05.199><c> this</c><00:06:05.759><c> query</c><00:06:06.240><c> right</c><00:06:06.479><c> it's</c>

00:06:06.870 --> 00:06:06.880 align:start position:0%
let's start with this query right it's
 

00:06:06.880 --> 00:06:07.430 align:start position:0%
let's start with this query right it's
at<00:06:07.120><c> the</c>

00:06:07.430 --> 00:06:07.440 align:start position:0%
at the
 

00:06:07.440 --> 00:06:10.230 align:start position:0%
at the
its<00:06:07.680><c> value</c><00:06:08.080><c> is</c><00:06:08.319><c> two</c><00:06:08.800><c> so</c><00:06:08.960><c> what</c><00:06:09.120><c> are</c><00:06:09.199><c> we</c><00:06:09.360><c> gonna</c><00:06:09.600><c> do</c>

00:06:10.230 --> 00:06:10.240 align:start position:0%
its value is two so what are we gonna do
 

00:06:10.240 --> 00:06:11.590 align:start position:0%
its value is two so what are we gonna do
we're<00:06:10.479><c> gonna</c><00:06:10.880><c> start</c>

00:06:11.590 --> 00:06:11.600 align:start position:0%
we're gonna start
 

00:06:11.600 --> 00:06:13.670 align:start position:0%
we're gonna start
iterating<00:06:12.240><c> through</c><00:06:12.560><c> our</c><00:06:12.880><c> intervals</c><00:06:13.360><c> from</c>

00:06:13.670 --> 00:06:13.680 align:start position:0%
iterating through our intervals from
 

00:06:13.680 --> 00:06:14.790 align:start position:0%
iterating through our intervals from
left<00:06:13.919><c> to</c><00:06:14.160><c> right</c>

00:06:14.790 --> 00:06:14.800 align:start position:0%
left to right
 

00:06:14.800 --> 00:06:16.469 align:start position:0%
left to right
you<00:06:14.880><c> know</c><00:06:15.280><c> since</c><00:06:15.520><c> we've</c><00:06:15.759><c> sorted</c><00:06:16.160><c> them</c><00:06:16.319><c> we're</c>

00:06:16.469 --> 00:06:16.479 align:start position:0%
you know since we've sorted them we're
 

00:06:16.479 --> 00:06:18.790 align:start position:0%
you know since we've sorted them we're
gonna<00:06:16.720><c> sort</c><00:06:16.960><c> them</c><00:06:17.199><c> based</c><00:06:17.520><c> on</c><00:06:17.680><c> the</c><00:06:18.000><c> left</c><00:06:18.400><c> value</c>

00:06:18.790 --> 00:06:18.800 align:start position:0%
gonna sort them based on the left value
 

00:06:18.800 --> 00:06:19.350 align:start position:0%
gonna sort them based on the left value
of<00:06:19.039><c> each</c>

00:06:19.350 --> 00:06:19.360 align:start position:0%
of each
 

00:06:19.360 --> 00:06:21.270 align:start position:0%
of each
interval<00:06:19.919><c> so</c><00:06:20.160><c> in</c><00:06:20.319><c> what</c><00:06:20.560><c> order</c><00:06:20.960><c> are</c><00:06:21.039><c> we</c><00:06:21.199><c> going</c>

00:06:21.270 --> 00:06:21.280 align:start position:0%
interval so in what order are we going
 

00:06:21.280 --> 00:06:22.790 align:start position:0%
interval so in what order are we going
to<00:06:21.440><c> iterate</c><00:06:21.759><c> through</c><00:06:21.919><c> these</c><00:06:22.160><c> intervals</c>

00:06:22.790 --> 00:06:22.800 align:start position:0%
to iterate through these intervals
 

00:06:22.800 --> 00:06:24.629 align:start position:0%
to iterate through these intervals
well<00:06:23.280><c> this</c><00:06:23.520><c> one</c><00:06:23.680><c> has</c><00:06:23.840><c> the</c><00:06:24.000><c> smallest</c><00:06:24.400><c> left</c>

00:06:24.629 --> 00:06:24.639 align:start position:0%
well this one has the smallest left
 

00:06:24.639 --> 00:06:26.629 align:start position:0%
well this one has the smallest left
value<00:06:25.280><c> this</c><00:06:25.520><c> one</c><00:06:25.759><c> is</c><00:06:25.919><c> next</c>

00:06:26.629 --> 00:06:26.639 align:start position:0%
value this one is next
 

00:06:26.639 --> 00:06:28.469 align:start position:0%
value this one is next
this<00:06:26.880><c> one</c><00:06:27.120><c> is</c><00:06:27.199><c> next</c><00:06:27.520><c> and</c><00:06:27.600><c> then</c><00:06:27.840><c> this</c><00:06:28.080><c> last</c><00:06:28.319><c> one</c>

00:06:28.469 --> 00:06:28.479 align:start position:0%
this one is next and then this last one
 

00:06:28.479 --> 00:06:30.070 align:start position:0%
this one is next and then this last one
which<00:06:28.720><c> is</c><00:06:28.800><c> just</c><00:06:29.039><c> a</c><00:06:29.120><c> single</c><00:06:29.600><c> point</c><00:06:29.840><c> but</c><00:06:30.000><c> it</c>

00:06:30.070 --> 00:06:30.080 align:start position:0%
which is just a single point but it
 

00:06:30.080 --> 00:06:31.430 align:start position:0%
which is just a single point but it
still<00:06:30.400><c> counts</c><00:06:30.639><c> as</c><00:06:30.800><c> an</c><00:06:30.960><c> interval</c>

00:06:31.430 --> 00:06:31.440 align:start position:0%
still counts as an interval
 

00:06:31.440 --> 00:06:33.670 align:start position:0%
still counts as an interval
is<00:06:31.600><c> going</c><00:06:31.680><c> to</c><00:06:31.759><c> be</c><00:06:31.919><c> the</c><00:06:32.080><c> last</c><00:06:32.319><c> one</c><00:06:32.720><c> so</c><00:06:33.120><c> starting</c>

00:06:33.670 --> 00:06:33.680 align:start position:0%
is going to be the last one so starting
 

00:06:33.680 --> 00:06:35.909 align:start position:0%
is going to be the last one so starting
here<00:06:34.319><c> what</c><00:06:34.479><c> are</c><00:06:34.560><c> we</c><00:06:34.720><c> going</c><00:06:34.880><c> to</c><00:06:34.960><c> determine</c>

00:06:35.909 --> 00:06:35.919 align:start position:0%
here what are we going to determine
 

00:06:35.919 --> 00:06:38.629 align:start position:0%
here what are we going to determine
what<00:06:36.160><c> we</c><00:06:36.400><c> want</c><00:06:36.639><c> to</c><00:06:36.800><c> do</c><00:06:37.039><c> for</c><00:06:37.440><c> this</c><00:06:37.759><c> query</c><00:06:38.240><c> is</c><00:06:38.400><c> we</c>

00:06:38.629 --> 00:06:38.639 align:start position:0%
what we want to do for this query is we
 

00:06:38.639 --> 00:06:39.189 align:start position:0%
what we want to do for this query is we
want<00:06:38.880><c> to</c>

00:06:39.189 --> 00:06:39.199 align:start position:0%
want to
 

00:06:39.199 --> 00:06:42.309 align:start position:0%
want to
add<00:06:39.759><c> all</c><00:06:40.160><c> possible</c><00:06:40.880><c> intervals</c><00:06:41.759><c> that</c><00:06:42.000><c> this</c>

00:06:42.309 --> 00:06:42.319 align:start position:0%
add all possible intervals that this
 

00:06:42.319 --> 00:06:44.469 align:start position:0%
add all possible intervals that this
query<00:06:42.800><c> could</c><00:06:43.120><c> belong</c><00:06:43.680><c> to</c><00:06:44.000><c> right</c>

00:06:44.469 --> 00:06:44.479 align:start position:0%
query could belong to right
 

00:06:44.479 --> 00:06:46.469 align:start position:0%
query could belong to right
how<00:06:44.639><c> do</c><00:06:44.720><c> we</c><00:06:44.880><c> know</c><00:06:45.199><c> which</c><00:06:45.600><c> intervals</c><00:06:46.240><c> this</c>

00:06:46.469 --> 00:06:46.479 align:start position:0%
how do we know which intervals this
 

00:06:46.479 --> 00:06:48.469 align:start position:0%
how do we know which intervals this
query<00:06:46.880><c> could</c><00:06:47.039><c> possibly</c><00:06:47.600><c> belong</c><00:06:48.080><c> to</c>

00:06:48.469 --> 00:06:48.479 align:start position:0%
query could possibly belong to
 

00:06:48.479 --> 00:06:50.469 align:start position:0%
query could possibly belong to
well<00:06:48.800><c> let's</c><00:06:49.039><c> say</c><00:06:49.199><c> we</c><00:06:49.360><c> had</c><00:06:49.599><c> an</c><00:06:49.759><c> interval</c><00:06:50.240><c> over</c>

00:06:50.469 --> 00:06:50.479 align:start position:0%
well let's say we had an interval over
 

00:06:50.479 --> 00:06:52.390 align:start position:0%
well let's say we had an interval over
here<00:06:50.800><c> right</c><00:06:51.039><c> like</c><00:06:51.360><c> something</c><00:06:51.599><c> like</c><00:06:51.919><c> this</c>

00:06:52.390 --> 00:06:52.400 align:start position:0%
here right like something like this
 

00:06:52.400 --> 00:06:55.029 align:start position:0%
here right like something like this
since<00:06:52.800><c> this</c><00:06:53.199><c> interval</c><00:06:53.599><c> is</c><00:06:53.840><c> too</c><00:06:54.319><c> far</c><00:06:54.639><c> to</c><00:06:54.800><c> the</c>

00:06:55.029 --> 00:06:55.039 align:start position:0%
since this interval is too far to the
 

00:06:55.039 --> 00:06:55.510 align:start position:0%
since this interval is too far to the
right

00:06:55.510 --> 00:06:55.520 align:start position:0%
right
 

00:06:55.520 --> 00:06:57.510 align:start position:0%
right
of<00:06:55.840><c> course</c><00:06:56.240><c> this</c><00:06:56.479><c> query</c><00:06:56.960><c> is</c><00:06:57.120><c> not</c><00:06:57.280><c> going</c><00:06:57.440><c> to</c>

00:06:57.510 --> 00:06:57.520 align:start position:0%
of course this query is not going to
 

00:06:57.520 --> 00:06:59.189 align:start position:0%
of course this query is not going to
belong<00:06:58.080><c> to</c><00:06:58.319><c> that</c><00:06:58.639><c> interval</c>

00:06:59.189 --> 00:06:59.199 align:start position:0%
belong to that interval
 

00:06:59.199 --> 00:07:01.270 align:start position:0%
belong to that interval
how<00:06:59.440><c> do</c><00:06:59.599><c> we</c><00:06:59.840><c> know</c><00:07:00.000><c> that</c><00:07:00.240><c> the</c><00:07:00.400><c> what</c><00:07:00.720><c> algorithm</c>

00:07:01.270 --> 00:07:01.280 align:start position:0%
how do we know that the what algorithm
 

00:07:01.280 --> 00:07:03.350 align:start position:0%
how do we know that the what algorithm
or<00:07:01.440><c> what</c><00:07:01.599><c> kind</c><00:07:01.840><c> of</c><00:07:02.160><c> condition</c><00:07:02.720><c> can</c><00:07:02.880><c> we</c><00:07:02.960><c> use</c><00:07:03.199><c> to</c>

00:07:03.350 --> 00:07:03.360 align:start position:0%
or what kind of condition can we use to
 

00:07:03.360 --> 00:07:04.390 align:start position:0%
or what kind of condition can we use to
check<00:07:03.599><c> that</c><00:07:03.919><c> well</c>

00:07:04.390 --> 00:07:04.400 align:start position:0%
check that well
 

00:07:04.400 --> 00:07:06.629 align:start position:0%
check that well
take<00:07:04.560><c> a</c><00:07:04.720><c> look</c><00:07:04.880><c> at</c><00:07:05.039><c> its</c><00:07:05.440><c> left</c><00:07:05.840><c> value</c><00:07:06.240><c> or</c><00:07:06.400><c> its</c>

00:07:06.629 --> 00:07:06.639 align:start position:0%
take a look at its left value or its
 

00:07:06.639 --> 00:07:08.309 align:start position:0%
take a look at its left value or its
start<00:07:07.039><c> value</c><00:07:07.440><c> of</c><00:07:07.520><c> the</c><00:07:07.759><c> interval</c>

00:07:08.309 --> 00:07:08.319 align:start position:0%
start value of the interval
 

00:07:08.319 --> 00:07:11.270 align:start position:0%
start value of the interval
if<00:07:08.479><c> the</c><00:07:08.800><c> left</c><00:07:09.199><c> value</c><00:07:09.680><c> of</c><00:07:09.840><c> this</c><00:07:10.160><c> interval</c><00:07:10.880><c> is</c>

00:07:11.270 --> 00:07:11.280 align:start position:0%
if the left value of this interval is
 

00:07:11.280 --> 00:07:12.070 align:start position:0%
if the left value of this interval is
greater

00:07:12.070 --> 00:07:12.080 align:start position:0%
greater
 

00:07:12.080 --> 00:07:14.469 align:start position:0%
greater
than<00:07:12.240><c> the</c><00:07:12.639><c> point</c><00:07:13.120><c> or</c><00:07:13.360><c> this</c><00:07:13.680><c> query</c><00:07:14.080><c> right</c><00:07:14.319><c> if</c>

00:07:14.469 --> 00:07:14.479 align:start position:0%
than the point or this query right if
 

00:07:14.479 --> 00:07:16.710 align:start position:0%
than the point or this query right if
the<00:07:14.880><c> left</c><00:07:15.120><c> value</c><00:07:15.440><c> is</c><00:07:15.599><c> greater</c><00:07:15.919><c> than</c><00:07:16.080><c> the</c><00:07:16.240><c> query</c>

00:07:16.710 --> 00:07:16.720 align:start position:0%
the left value is greater than the query
 

00:07:16.720 --> 00:07:19.189 align:start position:0%
the left value is greater than the query
of<00:07:16.960><c> course</c><00:07:17.360><c> this</c><00:07:17.599><c> query</c><00:07:17.919><c> could</c><00:07:18.080><c> not</c><00:07:18.319><c> belong</c><00:07:19.039><c> to</c>

00:07:19.189 --> 00:07:19.199 align:start position:0%
of course this query could not belong to
 

00:07:19.199 --> 00:07:20.469 align:start position:0%
of course this query could not belong to
this<00:07:19.520><c> interval</c>

00:07:20.469 --> 00:07:20.479 align:start position:0%
this interval
 

00:07:20.479 --> 00:07:22.710 align:start position:0%
this interval
so<00:07:20.960><c> the</c><00:07:21.120><c> condition</c><00:07:21.680><c> we're</c><00:07:21.840><c> going</c><00:07:21.919><c> to</c><00:07:22.080><c> use</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
so the condition we're going to use
 

00:07:22.720 --> 00:07:24.309 align:start position:0%
so the condition we're going to use
we're<00:07:22.960><c> going</c><00:07:23.039><c> to</c><00:07:23.199><c> keep</c><00:07:23.520><c> iterating</c><00:07:24.080><c> through</c>

00:07:24.309 --> 00:07:24.319 align:start position:0%
we're going to keep iterating through
 

00:07:24.319 --> 00:07:25.189 align:start position:0%
we're going to keep iterating through
these<00:07:24.560><c> intervals</c>

00:07:25.189 --> 00:07:25.199 align:start position:0%
these intervals
 

00:07:25.199 --> 00:07:27.830 align:start position:0%
these intervals
while<00:07:25.680><c> the</c><00:07:26.000><c> left</c><00:07:26.319><c> value</c><00:07:26.720><c> of</c><00:07:26.800><c> the</c><00:07:26.960><c> interval</c><00:07:27.520><c> is</c>

00:07:27.830 --> 00:07:27.840 align:start position:0%
while the left value of the interval is
 

00:07:27.840 --> 00:07:29.670 align:start position:0%
while the left value of the interval is
less<00:07:28.240><c> than</c><00:07:28.560><c> or</c><00:07:28.880><c> equal</c>

00:07:29.670 --> 00:07:29.680 align:start position:0%
less than or equal
 

00:07:29.680 --> 00:07:32.390 align:start position:0%
less than or equal
to<00:07:30.000><c> the</c><00:07:30.319><c> query</c><00:07:31.120><c> so</c><00:07:31.360><c> for</c><00:07:31.520><c> example</c><00:07:32.000><c> this</c><00:07:32.240><c> is</c><00:07:32.319><c> the</c>

00:07:32.390 --> 00:07:32.400 align:start position:0%
to the query so for example this is the
 

00:07:32.400 --> 00:07:33.830 align:start position:0%
to the query so for example this is the
first<00:07:32.639><c> query</c><00:07:32.960><c> we're</c><00:07:33.120><c> going</c><00:07:33.199><c> to</c><00:07:33.280><c> look</c><00:07:33.440><c> at</c><00:07:33.520><c> the</c>

00:07:33.830 --> 00:07:33.840 align:start position:0%
first query we're going to look at the
 

00:07:33.840 --> 00:07:35.909 align:start position:0%
first query we're going to look at the
the<00:07:34.000><c> left</c><00:07:34.319><c> value</c><00:07:34.720><c> is</c><00:07:34.960><c> less</c><00:07:35.120><c> than</c><00:07:35.280><c> or</c><00:07:35.520><c> equal</c><00:07:35.759><c> to</c>

00:07:35.909 --> 00:07:35.919 align:start position:0%
the left value is less than or equal to
 

00:07:35.919 --> 00:07:37.670 align:start position:0%
the left value is less than or equal to
this<00:07:36.240><c> so</c><00:07:36.400><c> we're</c><00:07:36.560><c> going</c><00:07:36.639><c> to</c><00:07:36.720><c> go</c><00:07:36.880><c> ahead</c><00:07:37.199><c> and</c><00:07:37.440><c> add</c>

00:07:37.670 --> 00:07:37.680 align:start position:0%
this so we're going to go ahead and add
 

00:07:37.680 --> 00:07:39.749 align:start position:0%
this so we're going to go ahead and add
that<00:07:38.000><c> query</c><00:07:38.479><c> or</c><00:07:38.639><c> add</c><00:07:38.880><c> that</c><00:07:39.120><c> interval</c>

00:07:39.749 --> 00:07:39.759 align:start position:0%
that query or add that interval
 

00:07:39.759 --> 00:07:42.150 align:start position:0%
that query or add that interval
to<00:07:40.000><c> our</c><00:07:40.240><c> min</c><00:07:40.479><c> heap</c><00:07:41.199><c> how</c><00:07:41.440><c> are</c><00:07:41.520><c> we</c><00:07:41.680><c> going</c><00:07:41.840><c> to</c><00:07:42.000><c> add</c>

00:07:42.150 --> 00:07:42.160 align:start position:0%
to our min heap how are we going to add
 

00:07:42.160 --> 00:07:43.670 align:start position:0%
to our min heap how are we going to add
it<00:07:42.240><c> to</c><00:07:42.400><c> our</c><00:07:42.560><c> min</c><00:07:42.800><c> heap</c><00:07:43.039><c> though</c><00:07:43.199><c> remember</c><00:07:43.599><c> we</c>

00:07:43.670 --> 00:07:43.680 align:start position:0%
it to our min heap though remember we
 

00:07:43.680 --> 00:07:45.430 align:start position:0%
it to our min heap though remember we
want<00:07:43.919><c> to</c><00:07:44.080><c> pop</c><00:07:44.400><c> the</c><00:07:44.720><c> minimum</c>

00:07:45.430 --> 00:07:45.440 align:start position:0%
want to pop the minimum
 

00:07:45.440 --> 00:07:46.950 align:start position:0%
want to pop the minimum
size<00:07:45.840><c> so</c><00:07:46.000><c> we're</c><00:07:46.160><c> actually</c><00:07:46.400><c> going</c><00:07:46.479><c> to</c><00:07:46.639><c> take</c>

00:07:46.950 --> 00:07:46.960 align:start position:0%
size so we're actually going to take
 

00:07:46.960 --> 00:07:49.430 align:start position:0%
size so we're actually going to take
this<00:07:47.280><c> interval</c><00:07:47.840><c> and</c><00:07:48.080><c> calculate</c><00:07:48.720><c> the</c><00:07:48.960><c> size</c><00:07:49.280><c> of</c>

00:07:49.430 --> 00:07:49.440 align:start position:0%
this interval and calculate the size of
 

00:07:49.440 --> 00:07:49.670 align:start position:0%
this interval and calculate the size of
it

00:07:49.670 --> 00:07:49.680 align:start position:0%
it
 

00:07:49.680 --> 00:07:52.390 align:start position:0%
it
how<00:07:49.840><c> are</c><00:07:49.919><c> we</c><00:07:50.000><c> going</c><00:07:50.080><c> to</c><00:07:50.160><c> do</c><00:07:50.319><c> that</c><00:07:50.479><c> well</c><00:07:51.120><c> 4</c><00:07:51.919><c> minus</c>

00:07:52.390 --> 00:07:52.400 align:start position:0%
how are we going to do that well 4 minus
 

00:07:52.400 --> 00:07:53.029 align:start position:0%
how are we going to do that well 4 minus
1

00:07:53.029 --> 00:07:53.039 align:start position:0%
1
 

00:07:53.039 --> 00:07:55.589 align:start position:0%
1
plus<00:07:53.440><c> 1</c><00:07:54.000><c> is</c><00:07:54.240><c> going</c><00:07:54.400><c> to</c><00:07:54.479><c> be</c><00:07:54.720><c> equal</c><00:07:54.960><c> to</c><00:07:55.199><c> 4.</c><00:07:55.440><c> so</c>

00:07:55.589 --> 00:07:55.599 align:start position:0%
plus 1 is going to be equal to 4. so
 

00:07:55.599 --> 00:07:56.390 align:start position:0%
plus 1 is going to be equal to 4. so
we're<00:07:55.680><c> going</c><00:07:55.759><c> to</c><00:07:55.919><c> add</c>

00:07:56.390 --> 00:07:56.400 align:start position:0%
we're going to add
 

00:07:56.400 --> 00:07:58.950 align:start position:0%
we're going to add
4<00:07:57.199><c> to</c><00:07:57.440><c> our</c><00:07:57.759><c> min</c><00:07:58.000><c> heap</c><00:07:58.240><c> but</c><00:07:58.479><c> actually</c><00:07:58.800><c> we're</c>

00:07:58.950 --> 00:07:58.960 align:start position:0%
4 to our min heap but actually we're
 

00:07:58.960 --> 00:07:59.589 align:start position:0%
4 to our min heap but actually we're
going<00:07:59.039><c> to</c><00:07:59.120><c> add</c><00:07:59.360><c> a</c>

00:07:59.589 --> 00:07:59.599 align:start position:0%
going to add a
 

00:07:59.599 --> 00:08:02.469 align:start position:0%
going to add a
second<00:08:00.000><c> value</c><00:08:00.560><c> 2</c><00:08:01.120><c> because</c><00:08:01.840><c> there</c><00:08:02.000><c> could</c><00:08:02.160><c> be</c><00:08:02.400><c> a</c>

00:08:02.469 --> 00:08:02.479 align:start position:0%
second value 2 because there could be a
 

00:08:02.479 --> 00:08:04.390 align:start position:0%
second value 2 because there could be a
condition<00:08:02.960><c> where</c><00:08:03.199><c> two</c><00:08:03.440><c> intervals</c><00:08:04.000><c> are</c><00:08:04.160><c> the</c>

00:08:04.390 --> 00:08:04.400 align:start position:0%
condition where two intervals are the
 

00:08:04.400 --> 00:08:05.029 align:start position:0%
condition where two intervals are the
same

00:08:05.029 --> 00:08:05.039 align:start position:0%
same
 

00:08:05.039 --> 00:08:07.589 align:start position:0%
same
length<00:08:05.520><c> right</c><00:08:06.160><c> we</c><00:08:06.319><c> could</c><00:08:06.560><c> have</c><00:08:06.720><c> an</c><00:08:06.960><c> interval</c>

00:08:07.589 --> 00:08:07.599 align:start position:0%
length right we could have an interval
 

00:08:07.599 --> 00:08:08.790 align:start position:0%
length right we could have an interval
like<00:08:08.000><c> this</c>

00:08:08.790 --> 00:08:08.800 align:start position:0%
like this
 

00:08:08.800 --> 00:08:10.950 align:start position:0%
like this
right<00:08:09.280><c> from</c><00:08:09.520><c> here</c><00:08:09.759><c> to</c><00:08:09.919><c> here</c><00:08:10.240><c> we</c><00:08:10.400><c> could</c><00:08:10.639><c> also</c>

00:08:10.950 --> 00:08:10.960 align:start position:0%
right from here to here we could also
 

00:08:10.960 --> 00:08:12.070 align:start position:0%
right from here to here we could also
have<00:08:11.120><c> an</c><00:08:11.280><c> interval</c><00:08:11.680><c> like</c>

00:08:12.070 --> 00:08:12.080 align:start position:0%
have an interval like
 

00:08:12.080 --> 00:08:14.390 align:start position:0%
have an interval like
this<00:08:12.560><c> from</c><00:08:12.800><c> here</c><00:08:13.039><c> to</c><00:08:13.199><c> here</c><00:08:13.599><c> both</c><00:08:13.840><c> of</c><00:08:13.919><c> these</c><00:08:14.160><c> are</c>

00:08:14.390 --> 00:08:14.400 align:start position:0%
this from here to here both of these are
 

00:08:14.400 --> 00:08:15.270 align:start position:0%
this from here to here both of these are
size

00:08:15.270 --> 00:08:15.280 align:start position:0%
size
 

00:08:15.280 --> 00:08:17.670 align:start position:0%
size
both<00:08:15.520><c> of</c><00:08:15.599><c> these</c><00:08:15.840><c> are</c><00:08:15.919><c> size</c><00:08:16.400><c> 2</c><00:08:16.720><c> intervals</c><00:08:17.440><c> but</c>

00:08:17.670 --> 00:08:17.680 align:start position:0%
both of these are size 2 intervals but
 

00:08:17.680 --> 00:08:19.589 align:start position:0%
both of these are size 2 intervals but
which<00:08:18.000><c> one</c><00:08:18.240><c> of</c><00:08:18.319><c> these</c><00:08:18.639><c> intervals</c><00:08:19.120><c> would</c><00:08:19.360><c> we</c>

00:08:19.589 --> 00:08:19.599 align:start position:0%
which one of these intervals would we
 

00:08:19.599 --> 00:08:20.150 align:start position:0%
which one of these intervals would we
want<00:08:19.840><c> to</c>

00:08:20.150 --> 00:08:20.160 align:start position:0%
want to
 

00:08:20.160 --> 00:08:23.589 align:start position:0%
want to
pop<00:08:20.639><c> first</c><00:08:21.520><c> of</c><00:08:21.759><c> course</c><00:08:22.160><c> we</c><00:08:22.400><c> would</c><00:08:22.560><c> want</c><00:08:22.720><c> to</c><00:08:22.960><c> pop</c>

00:08:23.589 --> 00:08:23.599 align:start position:0%
pop first of course we would want to pop
 

00:08:23.599 --> 00:08:25.510 align:start position:0%
pop first of course we would want to pop
this<00:08:24.000><c> interval</c><00:08:24.400><c> first</c><00:08:24.720><c> because</c><00:08:24.960><c> it's</c><00:08:25.199><c> farther</c>

00:08:25.510 --> 00:08:25.520 align:start position:0%
this interval first because it's farther
 

00:08:25.520 --> 00:08:27.909 align:start position:0%
this interval first because it's farther
to<00:08:25.680><c> the</c><00:08:26.000><c> left</c><00:08:26.400><c> right</c><00:08:26.560><c> we'd</c><00:08:26.800><c> rather</c><00:08:27.199><c> pop</c>

00:08:27.909 --> 00:08:27.919 align:start position:0%
to the left right we'd rather pop
 

00:08:27.919 --> 00:08:30.950 align:start position:0%
to the left right we'd rather pop
the<00:08:28.240><c> leftmo</c><00:08:28.960><c> most</c><00:08:29.360><c> interval</c><00:08:30.000><c> because</c>

00:08:30.950 --> 00:08:30.960 align:start position:0%
the leftmo most interval because
 

00:08:30.960 --> 00:08:33.509 align:start position:0%
the leftmo most interval because
what<00:08:31.199><c> if</c><00:08:31.759><c> what</c><00:08:31.919><c> if</c><00:08:32.000><c> we</c><00:08:32.159><c> pop</c><00:08:32.560><c> this</c><00:08:32.880><c> one</c><00:08:33.200><c> first</c>

00:08:33.509 --> 00:08:33.519 align:start position:0%
what if what if we pop this one first
 

00:08:33.519 --> 00:08:34.550 align:start position:0%
what if what if we pop this one first
from<00:08:33.760><c> our</c><00:08:33.839><c> min</c><00:08:34.080><c> heap</c>

00:08:34.550 --> 00:08:34.560 align:start position:0%
from our min heap
 

00:08:34.560 --> 00:08:36.310 align:start position:0%
from our min heap
but<00:08:34.719><c> it</c><00:08:34.959><c> turns</c><00:08:35.279><c> out</c><00:08:35.440><c> that</c><00:08:35.519><c> there's</c><00:08:35.760><c> a</c><00:08:35.919><c> query</c>

00:08:36.310 --> 00:08:36.320 align:start position:0%
but it turns out that there's a query
 

00:08:36.320 --> 00:08:37.829 align:start position:0%
but it turns out that there's a query
over<00:08:36.640><c> here</c><00:08:37.039><c> that</c><00:08:37.279><c> actually</c>

00:08:37.829 --> 00:08:37.839 align:start position:0%
over here that actually
 

00:08:37.839 --> 00:08:39.990 align:start position:0%
over here that actually
you<00:08:38.000><c> know</c><00:08:38.240><c> this</c><00:08:38.640><c> is</c><00:08:38.800><c> the</c><00:08:39.039><c> answer</c><00:08:39.440><c> for</c><00:08:39.680><c> this</c>

00:08:39.990 --> 00:08:40.000 align:start position:0%
you know this is the answer for this
 

00:08:40.000 --> 00:08:41.670 align:start position:0%
you know this is the answer for this
query<00:08:40.479><c> we'd</c><00:08:40.719><c> rather</c><00:08:41.039><c> pop</c>

00:08:41.670 --> 00:08:41.680 align:start position:0%
query we'd rather pop
 

00:08:41.680 --> 00:08:43.589 align:start position:0%
query we'd rather pop
this<00:08:42.000><c> one</c><00:08:42.240><c> because</c><00:08:42.800><c> we're</c><00:08:42.959><c> going</c><00:08:43.120><c> to</c><00:08:43.200><c> be</c><00:08:43.279><c> going</c>

00:08:43.589 --> 00:08:43.599 align:start position:0%
this one because we're going to be going
 

00:08:43.599 --> 00:08:45.350 align:start position:0%
this one because we're going to be going
from<00:08:43.919><c> left</c><00:08:44.560><c> to</c><00:08:44.800><c> right</c>

00:08:45.350 --> 00:08:45.360 align:start position:0%
from left to right
 

00:08:45.360 --> 00:08:48.870 align:start position:0%
from left to right
so<00:08:45.519><c> we'd</c><00:08:45.839><c> rather</c><00:08:47.040><c> have</c><00:08:47.600><c> this</c><00:08:48.240><c> interval</c>

00:08:48.870 --> 00:08:48.880 align:start position:0%
so we'd rather have this interval
 

00:08:48.880 --> 00:08:52.070 align:start position:0%
so we'd rather have this interval
belong<00:08:49.680><c> to</c><00:08:50.080><c> this</c><00:08:50.720><c> query</c><00:08:51.120><c> and</c><00:08:51.200><c> we'd</c><00:08:51.360><c> rather</c><00:08:51.760><c> pop</c>

00:08:52.070 --> 00:08:52.080 align:start position:0%
belong to this query and we'd rather pop
 

00:08:52.080 --> 00:08:52.870 align:start position:0%
belong to this query and we'd rather pop
this<00:08:52.320><c> query</c>

00:08:52.870 --> 00:08:52.880 align:start position:0%
this query
 

00:08:52.880 --> 00:08:55.030 align:start position:0%
this query
rather<00:08:53.120><c> than</c><00:08:53.360><c> popping</c><00:08:53.680><c> this</c><00:08:53.920><c> query</c><00:08:54.320><c> first</c><00:08:54.800><c> so</c>

00:08:55.030 --> 00:08:55.040 align:start position:0%
rather than popping this query first so
 

00:08:55.040 --> 00:08:55.990 align:start position:0%
rather than popping this query first so
we're<00:08:55.200><c> going</c><00:08:55.360><c> to</c><00:08:55.440><c> need</c>

00:08:55.990 --> 00:08:56.000 align:start position:0%
we're going to need
 

00:08:56.000 --> 00:08:58.550 align:start position:0%
we're going to need
one<00:08:56.240><c> thing</c><00:08:56.480><c> to</c><00:08:57.040><c> to</c><00:08:57.200><c> be</c><00:08:57.440><c> our</c><00:08:57.680><c> tie</c><00:08:58.000><c> breaker</c><00:08:58.399><c> we</c>

00:08:58.550 --> 00:08:58.560 align:start position:0%
one thing to to be our tie breaker we
 

00:08:58.560 --> 00:08:59.910 align:start position:0%
one thing to to be our tie breaker we
need<00:08:58.720><c> a</c><00:08:58.880><c> tie</c><00:08:59.279><c> breaker</c>

00:08:59.910 --> 00:08:59.920 align:start position:0%
need a tie breaker
 

00:08:59.920 --> 00:09:02.070 align:start position:0%
need a tie breaker
between<00:09:00.480><c> these</c><00:09:00.880><c> two</c><00:09:01.200><c> intervals</c><00:09:01.680><c> what's</c><00:09:01.920><c> the</c>

00:09:02.070 --> 00:09:02.080 align:start position:0%
between these two intervals what's the
 

00:09:02.080 --> 00:09:03.190 align:start position:0%
between these two intervals what's the
tie<00:09:02.320><c> breaker</c><00:09:02.640><c> going</c><00:09:02.800><c> to</c><00:09:02.880><c> be</c>

00:09:03.190 --> 00:09:03.200 align:start position:0%
tie breaker going to be
 

00:09:03.200 --> 00:09:06.150 align:start position:0%
tie breaker going to be
it's<00:09:03.360><c> going</c><00:09:03.519><c> to</c><00:09:03.600><c> be</c><00:09:04.000><c> the</c><00:09:04.480><c> right</c><00:09:04.880><c> value</c><00:09:05.680><c> of</c><00:09:05.839><c> the</c>

00:09:06.150 --> 00:09:06.160 align:start position:0%
it's going to be the right value of the
 

00:09:06.160 --> 00:09:06.630 align:start position:0%
it's going to be the right value of the
interval

00:09:06.630 --> 00:09:06.640 align:start position:0%
interval
 

00:09:06.640 --> 00:09:09.110 align:start position:0%
interval
we'd<00:09:06.880><c> rather</c><00:09:07.279><c> pop</c><00:09:07.680><c> this</c><00:09:08.000><c> one</c><00:09:08.320><c> before</c><00:09:08.720><c> popping</c>

00:09:09.110 --> 00:09:09.120 align:start position:0%
we'd rather pop this one before popping
 

00:09:09.120 --> 00:09:10.870 align:start position:0%
we'd rather pop this one before popping
this<00:09:09.360><c> one</c><00:09:09.600><c> so</c><00:09:09.760><c> we're</c><00:09:10.000><c> popping</c><00:09:10.399><c> the</c><00:09:10.560><c> one</c><00:09:10.720><c> with</c>

00:09:10.870 --> 00:09:10.880 align:start position:0%
this one so we're popping the one with
 

00:09:10.880 --> 00:09:13.269 align:start position:0%
this one so we're popping the one with
the<00:09:11.120><c> smaller</c><00:09:11.760><c> right</c><00:09:12.080><c> value</c><00:09:12.560><c> so</c><00:09:12.720><c> we're</c><00:09:12.880><c> gonna</c>

00:09:13.269 --> 00:09:13.279 align:start position:0%
the smaller right value so we're gonna
 

00:09:13.279 --> 00:09:15.269 align:start position:0%
the smaller right value so we're gonna
we're<00:09:13.440><c> gonna</c><00:09:13.519><c> have</c><00:09:13.680><c> our</c><00:09:13.920><c> right</c><00:09:14.240><c> value</c><00:09:14.800><c> as</c><00:09:14.959><c> the</c>

00:09:15.269 --> 00:09:15.279 align:start position:0%
we're gonna have our right value as the
 

00:09:15.279 --> 00:09:16.550 align:start position:0%
we're gonna have our right value as the
second<00:09:15.839><c> key</c>

00:09:16.550 --> 00:09:16.560 align:start position:0%
second key
 

00:09:16.560 --> 00:09:18.389 align:start position:0%
second key
of<00:09:16.800><c> our</c><00:09:17.040><c> min</c><00:09:17.360><c> heap</c><00:09:17.680><c> so</c><00:09:17.839><c> we're</c><00:09:17.920><c> gonna</c><00:09:18.080><c> have</c><00:09:18.240><c> a</c>

00:09:18.389 --> 00:09:18.399 align:start position:0%
of our min heap so we're gonna have a
 

00:09:18.399 --> 00:09:20.389 align:start position:0%
of our min heap so we're gonna have a
pair<00:09:18.880><c> for</c><00:09:19.040><c> our</c><00:09:19.279><c> key</c><00:09:19.600><c> of</c><00:09:19.680><c> the</c><00:09:19.839><c> min</c><00:09:20.000><c> heap</c>

00:09:20.389 --> 00:09:20.399 align:start position:0%
pair for our key of the min heap
 

00:09:20.399 --> 00:09:22.710 align:start position:0%
pair for our key of the min heap
the<00:09:20.640><c> first</c><00:09:20.959><c> is</c><00:09:21.120><c> going</c><00:09:21.200><c> to</c><00:09:21.279><c> be</c><00:09:21.360><c> the</c><00:09:21.600><c> size</c><00:09:22.240><c> of</c><00:09:22.399><c> the</c>

00:09:22.710 --> 00:09:22.720 align:start position:0%
the first is going to be the size of the
 

00:09:22.720 --> 00:09:24.630 align:start position:0%
the first is going to be the size of the
interval<00:09:23.360><c> the</c><00:09:23.600><c> second</c><00:09:23.920><c> is</c><00:09:24.080><c> going</c><00:09:24.160><c> to</c><00:09:24.240><c> be</c><00:09:24.320><c> the</c>

00:09:24.630 --> 00:09:24.640 align:start position:0%
interval the second is going to be the
 

00:09:24.640 --> 00:09:25.509 align:start position:0%
interval the second is going to be the
right<00:09:24.959><c> value</c>

00:09:25.509 --> 00:09:25.519 align:start position:0%
right value
 

00:09:25.519 --> 00:09:27.670 align:start position:0%
right value
of<00:09:25.600><c> the</c><00:09:25.839><c> interval</c><00:09:26.560><c> so</c><00:09:26.800><c> in</c><00:09:26.880><c> this</c><00:09:27.120><c> case</c><00:09:27.360><c> this</c><00:09:27.519><c> is</c>

00:09:27.670 --> 00:09:27.680 align:start position:0%
of the interval so in this case this is
 

00:09:27.680 --> 00:09:29.030 align:start position:0%
of the interval so in this case this is
the<00:09:27.760><c> left</c><00:09:28.000><c> value</c><00:09:28.240><c> of</c><00:09:28.320><c> the</c><00:09:28.480><c> interval</c><00:09:28.720><c> this</c><00:09:28.959><c> is</c>

00:09:29.030 --> 00:09:29.040 align:start position:0%
the left value of the interval this is
 

00:09:29.040 --> 00:09:30.710 align:start position:0%
the left value of the interval this is
the<00:09:29.200><c> right</c><00:09:29.440><c> value</c><00:09:29.839><c> it's</c><00:09:30.000><c> a</c><00:09:30.160><c> value</c>

00:09:30.710 --> 00:09:30.720 align:start position:0%
the right value it's a value
 

00:09:30.720 --> 00:09:32.870 align:start position:0%
the right value it's a value
of<00:09:30.959><c> 4</c><00:09:31.360><c> so</c><00:09:31.519><c> the</c><00:09:31.920><c> what</c><00:09:32.080><c> we're</c><00:09:32.240><c> adding</c><00:09:32.480><c> to</c><00:09:32.640><c> the</c><00:09:32.720><c> min</c>

00:09:32.870 --> 00:09:32.880 align:start position:0%
of 4 so the what we're adding to the min
 

00:09:32.880 --> 00:09:35.110 align:start position:0%
of 4 so the what we're adding to the min
heap<00:09:33.120><c> is</c><00:09:33.279><c> 4</c><00:09:33.519><c> 4</c><00:09:33.760><c> the</c><00:09:33.839><c> first</c><00:09:34.160><c> value</c><00:09:34.480><c> is</c><00:09:34.560><c> the</c><00:09:34.800><c> size</c>

00:09:35.110 --> 00:09:35.120 align:start position:0%
heap is 4 4 the first value is the size
 

00:09:35.120 --> 00:09:36.949 align:start position:0%
heap is 4 4 the first value is the size
the<00:09:35.279><c> second</c><00:09:35.600><c> value</c><00:09:35.920><c> is</c><00:09:36.080><c> the</c><00:09:36.320><c> right</c><00:09:36.560><c> value</c><00:09:36.880><c> of</c>

00:09:36.949 --> 00:09:36.959 align:start position:0%
the second value is the right value of
 

00:09:36.959 --> 00:09:37.750 align:start position:0%
the second value is the right value of
the<00:09:37.120><c> interval</c>

00:09:37.750 --> 00:09:37.760 align:start position:0%
the interval
 

00:09:37.760 --> 00:09:40.070 align:start position:0%
the interval
so<00:09:37.920><c> we've</c><00:09:38.160><c> added</c><00:09:38.560><c> this</c><00:09:38.800><c> to</c><00:09:39.040><c> our</c><00:09:39.200><c> min</c><00:09:39.440><c> heap</c><00:09:39.920><c> now</c>

00:09:40.070 --> 00:09:40.080 align:start position:0%
so we've added this to our min heap now
 

00:09:40.080 --> 00:09:41.910 align:start position:0%
so we've added this to our min heap now
let's<00:09:40.320><c> go</c><00:09:40.480><c> to</c><00:09:40.640><c> the</c><00:09:40.880><c> next</c><00:09:41.200><c> interval</c>

00:09:41.910 --> 00:09:41.920 align:start position:0%
let's go to the next interval
 

00:09:41.920 --> 00:09:44.630 align:start position:0%
let's go to the next interval
it's<00:09:42.160><c> this</c><00:09:42.399><c> one</c><00:09:42.800><c> right</c><00:09:43.120><c> so</c><00:09:43.680><c> so</c><00:09:43.839><c> the</c><00:09:44.000><c> left</c><00:09:44.240><c> value</c>

00:09:44.630 --> 00:09:44.640 align:start position:0%
it's this one right so so the left value
 

00:09:44.640 --> 00:09:46.310 align:start position:0%
it's this one right so so the left value
of<00:09:44.720><c> this</c><00:09:44.959><c> interval</c><00:09:45.360><c> is</c><00:09:45.519><c> technically</c><00:09:46.080><c> less</c>

00:09:46.310 --> 00:09:46.320 align:start position:0%
of this interval is technically less
 

00:09:46.320 --> 00:09:48.150 align:start position:0%
of this interval is technically less
than<00:09:46.480><c> or</c><00:09:46.640><c> equal</c><00:09:46.880><c> to</c><00:09:47.040><c> this</c><00:09:47.279><c> it's</c><00:09:47.519><c> equal</c><00:09:47.839><c> to</c><00:09:48.000><c> it</c>

00:09:48.150 --> 00:09:48.160 align:start position:0%
than or equal to this it's equal to it
 

00:09:48.160 --> 00:09:48.710 align:start position:0%
than or equal to this it's equal to it
so

00:09:48.710 --> 00:09:48.720 align:start position:0%
so
 

00:09:48.720 --> 00:09:50.389 align:start position:0%
so
technically<00:09:49.200><c> we</c><00:09:49.360><c> are</c><00:09:49.600><c> going</c><00:09:49.680><c> to</c><00:09:49.760><c> be</c><00:09:50.000><c> iterating</c>

00:09:50.389 --> 00:09:50.399 align:start position:0%
technically we are going to be iterating
 

00:09:50.399 --> 00:09:52.070 align:start position:0%
technically we are going to be iterating
through<00:09:50.560><c> this</c><00:09:50.800><c> one</c><00:09:51.040><c> as</c><00:09:51.120><c> well</c><00:09:51.360><c> so</c><00:09:51.519><c> what's</c><00:09:51.760><c> the</c>

00:09:52.070 --> 00:09:52.080 align:start position:0%
through this one as well so what's the
 

00:09:52.080 --> 00:09:53.910 align:start position:0%
through this one as well so what's the
size<00:09:52.480><c> of</c><00:09:52.720><c> this</c><00:09:53.040><c> interval</c><00:09:53.440><c> well</c>

00:09:53.910 --> 00:09:53.920 align:start position:0%
size of this interval well
 

00:09:53.920 --> 00:09:56.550 align:start position:0%
size of this interval well
four<00:09:54.640><c> minus</c><00:09:55.040><c> two</c><00:09:55.279><c> plus</c><00:09:55.600><c> one</c><00:09:55.760><c> so</c><00:09:55.920><c> the</c><00:09:56.080><c> size</c><00:09:56.399><c> is</c>

00:09:56.550 --> 00:09:56.560 align:start position:0%
four minus two plus one so the size is
 

00:09:56.560 --> 00:09:56.949 align:start position:0%
four minus two plus one so the size is
actually

00:09:56.949 --> 00:09:56.959 align:start position:0%
actually
 

00:09:56.959 --> 00:09:59.110 align:start position:0%
actually
three<00:09:57.440><c> that's</c><00:09:57.920><c> that's</c><00:09:58.160><c> pretty</c><00:09:58.480><c> good</c><00:09:58.720><c> for</c><00:09:58.959><c> us</c>

00:09:59.110 --> 00:09:59.120 align:start position:0%
three that's that's pretty good for us
 

00:09:59.120 --> 00:10:00.389 align:start position:0%
three that's that's pretty good for us
right<00:09:59.279><c> so</c><00:09:59.440><c> we're</c><00:09:59.519><c> going</c><00:09:59.600><c> to</c><00:09:59.760><c> add</c><00:09:59.920><c> that</c><00:10:00.080><c> to</c><00:10:00.240><c> our</c>

00:10:00.389 --> 00:10:00.399 align:start position:0%
right so we're going to add that to our
 

00:10:00.399 --> 00:10:02.389 align:start position:0%
right so we're going to add that to our
min<00:10:00.640><c> heap</c><00:10:00.959><c> the</c><00:10:01.120><c> reason</c><00:10:01.440><c> it's</c><00:10:01.600><c> good</c><00:10:01.920><c> is</c><00:10:02.000><c> because</c>

00:10:02.389 --> 00:10:02.399 align:start position:0%
min heap the reason it's good is because
 

00:10:02.399 --> 00:10:03.269 align:start position:0%
min heap the reason it's good is because
we<00:10:02.640><c> found</c><00:10:02.959><c> a</c>

00:10:03.269 --> 00:10:03.279 align:start position:0%
we found a
 

00:10:03.279 --> 00:10:05.910 align:start position:0%
we found a
smaller<00:10:03.839><c> interval</c><00:10:04.399><c> that</c><00:10:04.720><c> this</c><00:10:05.120><c> value</c><00:10:05.519><c> belongs</c>

00:10:05.910 --> 00:10:05.920 align:start position:0%
smaller interval that this value belongs
 

00:10:05.920 --> 00:10:06.790 align:start position:0%
smaller interval that this value belongs
to<00:10:06.079><c> right</c><00:10:06.320><c> that</c>

00:10:06.790 --> 00:10:06.800 align:start position:0%
to right that
 

00:10:06.800 --> 00:10:08.870 align:start position:0%
to right that
that<00:10:07.120><c> necessarily</c><00:10:07.920><c> didn't</c><00:10:08.240><c> have</c><00:10:08.480><c> to</c><00:10:08.560><c> be</c><00:10:08.720><c> the</c>

00:10:08.870 --> 00:10:08.880 align:start position:0%
that necessarily didn't have to be the
 

00:10:08.880 --> 00:10:10.389 align:start position:0%
that necessarily didn't have to be the
case<00:10:09.120><c> right</c><00:10:09.360><c> it</c><00:10:09.440><c> could</c><00:10:09.600><c> have</c><00:10:09.680><c> been</c><00:10:09.839><c> possible</c>

00:10:10.389 --> 00:10:10.399 align:start position:0%
case right it could have been possible
 

00:10:10.399 --> 00:10:11.829 align:start position:0%
case right it could have been possible
that<00:10:10.640><c> even</c><00:10:10.800><c> though</c><00:10:10.959><c> this</c><00:10:11.200><c> interval</c><00:10:11.519><c> started</c>

00:10:11.829 --> 00:10:11.839 align:start position:0%
that even though this interval started
 

00:10:11.839 --> 00:10:13.030 align:start position:0%
that even though this interval started
here<00:10:12.000><c> it</c><00:10:12.079><c> could</c><00:10:12.240><c> have</c><00:10:12.320><c> just</c><00:10:12.399><c> been</c><00:10:12.560><c> a</c><00:10:12.720><c> really</c>

00:10:13.030 --> 00:10:13.040 align:start position:0%
here it could have just been a really
 

00:10:13.040 --> 00:10:14.230 align:start position:0%
here it could have just been a really
long<00:10:13.440><c> interval</c><00:10:13.920><c> right</c>

00:10:14.230 --> 00:10:14.240 align:start position:0%
long interval right
 

00:10:14.240 --> 00:10:16.389 align:start position:0%
long interval right
that's<00:10:14.560><c> the</c><00:10:14.720><c> reason</c><00:10:15.120><c> why</c><00:10:15.279><c> we're</c><00:10:15.600><c> adding</c><00:10:16.160><c> for</c>

00:10:16.389 --> 00:10:16.399 align:start position:0%
that's the reason why we're adding for
 

00:10:16.399 --> 00:10:18.150 align:start position:0%
that's the reason why we're adding for
this<00:10:16.720><c> query</c><00:10:17.040><c> we're</c><00:10:17.200><c> having</c><00:10:17.519><c> to</c><00:10:17.600><c> add</c>

00:10:18.150 --> 00:10:18.160 align:start position:0%
this query we're having to add
 

00:10:18.160 --> 00:10:20.550 align:start position:0%
this query we're having to add
all<00:10:18.480><c> possible</c><00:10:19.040><c> intervals</c><00:10:19.760><c> that</c><00:10:20.079><c> this</c><00:10:20.320><c> query</c>

00:10:20.550 --> 00:10:20.560 align:start position:0%
all possible intervals that this query
 

00:10:20.560 --> 00:10:22.389 align:start position:0%
all possible intervals that this query
belongs<00:10:20.959><c> to</c><00:10:21.120><c> because</c><00:10:21.360><c> we</c><00:10:21.519><c> don't</c><00:10:21.839><c> know</c><00:10:22.079><c> what's</c>

00:10:22.389 --> 00:10:22.399 align:start position:0%
belongs to because we don't know what's
 

00:10:22.399 --> 00:10:23.670 align:start position:0%
belongs to because we don't know what's
the<00:10:22.560><c> shortest</c><00:10:22.959><c> gonna</c><00:10:23.279><c> be</c>

00:10:23.670 --> 00:10:23.680 align:start position:0%
the shortest gonna be
 

00:10:23.680 --> 00:10:25.430 align:start position:0%
the shortest gonna be
that's<00:10:23.920><c> why</c><00:10:24.079><c> we</c><00:10:24.240><c> need</c><00:10:24.399><c> our</c><00:10:24.560><c> min</c><00:10:24.800><c> heap</c><00:10:25.279><c> to</c>

00:10:25.430 --> 00:10:25.440 align:start position:0%
that's why we need our min heap to
 

00:10:25.440 --> 00:10:26.870 align:start position:0%
that's why we need our min heap to
efficiently<00:10:26.240><c> in</c><00:10:26.480><c> log</c>

00:10:26.870 --> 00:10:26.880 align:start position:0%
efficiently in log
 

00:10:26.880 --> 00:10:29.269 align:start position:0%
efficiently in log
n<00:10:27.200><c> time</c><00:10:27.760><c> to</c><00:10:28.160><c> help</c><00:10:28.320><c> us</c><00:10:28.480><c> determine</c><00:10:28.959><c> what</c><00:10:29.120><c> that</c>

00:10:29.269 --> 00:10:29.279 align:start position:0%
n time to help us determine what that
 

00:10:29.279 --> 00:10:31.110 align:start position:0%
n time to help us determine what that
smallest<00:10:29.839><c> interval</c><00:10:30.240><c> is</c><00:10:30.320><c> going</c><00:10:30.480><c> to</c><00:10:30.560><c> be</c>

00:10:31.110 --> 00:10:31.120 align:start position:0%
smallest interval is going to be
 

00:10:31.120 --> 00:10:33.430 align:start position:0%
smallest interval is going to be
so<00:10:31.279><c> we</c><00:10:31.440><c> got</c><00:10:31.680><c> the</c><00:10:32.000><c> size</c><00:10:32.560><c> of</c><00:10:32.800><c> that</c><00:10:33.040><c> interval</c>

00:10:33.430 --> 00:10:33.440 align:start position:0%
so we got the size of that interval
 

00:10:33.440 --> 00:10:35.190 align:start position:0%
so we got the size of that interval
what's<00:10:33.680><c> the</c><00:10:33.920><c> right</c><00:10:34.240><c> value</c><00:10:34.560><c> of</c><00:10:34.640><c> the</c><00:10:34.720><c> interval</c>

00:10:35.190 --> 00:10:35.200 align:start position:0%
what's the right value of the interval
 

00:10:35.200 --> 00:10:38.470 align:start position:0%
what's the right value of the interval
take<00:10:35.360><c> a</c><00:10:35.440><c> look</c><00:10:35.760><c> it's</c><00:10:36.160><c> four</c><00:10:36.720><c> so</c><00:10:37.600><c> it's</c><00:10:38.079><c> four</c><00:10:38.320><c> in</c>

00:10:38.470 --> 00:10:38.480 align:start position:0%
take a look it's four so it's four in
 

00:10:38.480 --> 00:10:40.230 align:start position:0%
take a look it's four so it's four in
this<00:10:38.640><c> case</c><00:10:38.959><c> well</c><00:10:39.200><c> technically</c><00:10:39.680><c> we</c><00:10:39.760><c> don't</c><00:10:40.000><c> need</c>

00:10:40.230 --> 00:10:40.240 align:start position:0%
this case well technically we don't need
 

00:10:40.240 --> 00:10:41.750 align:start position:0%
this case well technically we don't need
that<00:10:40.399><c> tie</c><00:10:40.720><c> breaker</c><00:10:41.120><c> because</c><00:10:41.279><c> this</c><00:10:41.519><c> is</c><00:10:41.600><c> this</c>

00:10:41.750 --> 00:10:41.760 align:start position:0%
that tie breaker because this is this
 

00:10:41.760 --> 00:10:43.509 align:start position:0%
that tie breaker because this is this
one<00:10:42.000><c> is</c><00:10:42.079><c> going</c><00:10:42.160><c> to</c><00:10:42.240><c> be</c><00:10:42.399><c> popped</c><00:10:42.800><c> first</c><00:10:43.200><c> from</c><00:10:43.360><c> our</c>

00:10:43.509 --> 00:10:43.519 align:start position:0%
one is going to be popped first from our
 

00:10:43.519 --> 00:10:45.430 align:start position:0%
one is going to be popped first from our
min<00:10:43.760><c> heat</c><00:10:43.920><c> because</c><00:10:44.160><c> it</c><00:10:44.240><c> has</c><00:10:44.399><c> the</c><00:10:44.560><c> smaller</c><00:10:45.040><c> size</c>

00:10:45.430 --> 00:10:45.440 align:start position:0%
min heat because it has the smaller size
 

00:10:45.440 --> 00:10:47.670 align:start position:0%
min heat because it has the smaller size
but<00:10:45.680><c> in</c><00:10:45.839><c> case</c><00:10:46.079><c> we</c><00:10:46.240><c> did</c><00:10:46.480><c> need</c><00:10:46.640><c> that</c><00:10:46.880><c> tie</c><00:10:47.120><c> breaker</c>

00:10:47.670 --> 00:10:47.680 align:start position:0%
but in case we did need that tie breaker
 

00:10:47.680 --> 00:10:50.069 align:start position:0%
but in case we did need that tie breaker
we<00:10:47.920><c> do</c><00:10:48.160><c> have</c><00:10:48.399><c> it</c><00:10:48.800><c> so</c><00:10:48.959><c> now</c><00:10:49.200><c> we've</c><00:10:49.440><c> added</c><00:10:49.839><c> this</c>

00:10:50.069 --> 00:10:50.079 align:start position:0%
we do have it so now we've added this
 

00:10:50.079 --> 00:10:51.670 align:start position:0%
we do have it so now we've added this
interval<00:10:50.480><c> to</c><00:10:50.640><c> our</c><00:10:50.720><c> min</c><00:10:50.880><c> heap</c><00:10:51.200><c> as</c><00:10:51.279><c> well</c><00:10:51.519><c> now</c>

00:10:51.670 --> 00:10:51.680 align:start position:0%
interval to our min heap as well now
 

00:10:51.680 --> 00:10:52.790 align:start position:0%
interval to our min heap as well now
let's<00:10:51.920><c> take</c><00:10:52.079><c> a</c><00:10:52.160><c> look</c><00:10:52.320><c> at</c><00:10:52.399><c> the</c>

00:10:52.790 --> 00:10:52.800 align:start position:0%
let's take a look at the
 

00:10:52.800 --> 00:10:55.030 align:start position:0%
let's take a look at the
next<00:10:53.200><c> interval</c><00:10:53.760><c> hey</c><00:10:54.079><c> take</c><00:10:54.240><c> a</c><00:10:54.320><c> look</c><00:10:54.560><c> though</c>

00:10:55.030 --> 00:10:55.040 align:start position:0%
next interval hey take a look though
 

00:10:55.040 --> 00:10:56.150 align:start position:0%
next interval hey take a look though
this<00:10:55.360><c> interval</c>

00:10:56.150 --> 00:10:56.160 align:start position:0%
this interval
 

00:10:56.160 --> 00:10:58.389 align:start position:0%
this interval
the<00:10:56.320><c> left</c><00:10:56.560><c> value</c><00:10:56.959><c> is</c><00:10:57.120><c> not</c><00:10:57.440><c> less</c><00:10:57.680><c> than</c><00:10:57.920><c> or</c><00:10:58.079><c> equal</c>

00:10:58.389 --> 00:10:58.399 align:start position:0%
the left value is not less than or equal
 

00:10:58.399 --> 00:11:00.069 align:start position:0%
the left value is not less than or equal
to<00:10:58.720><c> our</c><00:10:59.040><c> query</c><00:10:59.360><c> so</c><00:10:59.519><c> we're</c><00:10:59.680><c> actually</c>

00:11:00.069 --> 00:11:00.079 align:start position:0%
to our query so we're actually
 

00:11:00.079 --> 00:11:01.990 align:start position:0%
to our query so we're actually
not<00:11:00.320><c> going</c><00:11:00.480><c> to</c><00:11:00.560><c> iterate</c><00:11:01.040><c> through</c><00:11:01.200><c> this</c><00:11:01.440><c> one</c>

00:11:01.990 --> 00:11:02.000 align:start position:0%
not going to iterate through this one
 

00:11:02.000 --> 00:11:03.750 align:start position:0%
not going to iterate through this one
just<00:11:02.480><c> yet</c><00:11:02.800><c> we're</c><00:11:02.959><c> not</c><00:11:03.200><c> going</c><00:11:03.279><c> to</c>

00:11:03.750 --> 00:11:03.760 align:start position:0%
just yet we're not going to
 

00:11:03.760 --> 00:11:05.350 align:start position:0%
just yet we're not going to
be<00:11:04.079><c> it</c><00:11:04.399><c> we're</c><00:11:04.560><c> not</c><00:11:04.720><c> going</c><00:11:04.800><c> to</c><00:11:04.800><c> be</c><00:11:04.959><c> adding</c><00:11:05.200><c> it</c><00:11:05.279><c> to</c>

00:11:05.350 --> 00:11:05.360 align:start position:0%
be it we're not going to be adding it to
 

00:11:05.360 --> 00:11:07.110 align:start position:0%
be it we're not going to be adding it to
our<00:11:05.519><c> min</c><00:11:05.680><c> heap</c><00:11:06.160><c> just</c><00:11:06.480><c> yet</c>

00:11:07.110 --> 00:11:07.120 align:start position:0%
our min heap just yet
 

00:11:07.120 --> 00:11:09.509 align:start position:0%
our min heap just yet
take<00:11:07.360><c> a</c><00:11:07.440><c> look</c><00:11:07.680><c> at</c><00:11:07.839><c> our</c><00:11:08.079><c> output</c><00:11:08.399><c> array</c><00:11:08.959><c> now</c><00:11:09.279><c> we</c>

00:11:09.509 --> 00:11:09.519 align:start position:0%
take a look at our output array now we
 

00:11:09.519 --> 00:11:10.470 align:start position:0%
take a look at our output array now we
need<00:11:09.760><c> an</c><00:11:09.920><c> answer</c>

00:11:10.470 --> 00:11:10.480 align:start position:0%
need an answer
 

00:11:10.480 --> 00:11:13.190 align:start position:0%
need an answer
for<00:11:10.720><c> this</c><00:11:10.959><c> query</c><00:11:11.600><c> what</c><00:11:11.839><c> is</c><00:11:12.000><c> the</c><00:11:12.320><c> size</c><00:11:12.720><c> of</c><00:11:12.880><c> the</c>

00:11:13.190 --> 00:11:13.200 align:start position:0%
for this query what is the size of the
 

00:11:13.200 --> 00:11:14.310 align:start position:0%
for this query what is the size of the
smallest

00:11:14.310 --> 00:11:14.320 align:start position:0%
smallest
 

00:11:14.320 --> 00:11:17.190 align:start position:0%
smallest
interval<00:11:14.800><c> that</c><00:11:15.040><c> it</c><00:11:15.279><c> belongs</c><00:11:15.839><c> to</c><00:11:16.560><c> well</c><00:11:16.800><c> let's</c>

00:11:17.190 --> 00:11:17.200 align:start position:0%
interval that it belongs to well let's
 

00:11:17.200 --> 00:11:19.269 align:start position:0%
interval that it belongs to well let's
take<00:11:17.440><c> a</c><00:11:17.600><c> look</c><00:11:17.920><c> at</c><00:11:18.160><c> our</c><00:11:18.399><c> min</c><00:11:18.720><c> heap</c>

00:11:19.269 --> 00:11:19.279 align:start position:0%
take a look at our min heap
 

00:11:19.279 --> 00:11:21.269 align:start position:0%
take a look at our min heap
what's<00:11:19.600><c> this</c><00:11:20.160><c> what's</c><00:11:20.399><c> the</c><00:11:20.560><c> size</c><00:11:20.959><c> of</c><00:11:21.040><c> the</c>

00:11:21.269 --> 00:11:21.279 align:start position:0%
what's this what's the size of the
 

00:11:21.279 --> 00:11:22.630 align:start position:0%
what's this what's the size of the
smallest<00:11:22.079><c> interval</c>

00:11:22.630 --> 00:11:22.640 align:start position:0%
smallest interval
 

00:11:22.640 --> 00:11:24.790 align:start position:0%
smallest interval
in<00:11:22.800><c> it</c><00:11:23.120><c> well</c><00:11:23.760><c> we</c><00:11:23.920><c> have</c><00:11:24.079><c> two</c><00:11:24.240><c> choices</c><00:11:24.640><c> right</c>

00:11:24.790 --> 00:11:24.800 align:start position:0%
in it well we have two choices right
 

00:11:24.800 --> 00:11:25.750 align:start position:0%
in it well we have two choices right
this<00:11:24.959><c> one</c><00:11:25.200><c> or</c><00:11:25.279><c> this</c><00:11:25.440><c> one</c>

00:11:25.750 --> 00:11:25.760 align:start position:0%
this one or this one
 

00:11:25.760 --> 00:11:27.829 align:start position:0%
this one or this one
obviously<00:11:26.160><c> this</c><00:11:26.399><c> one</c><00:11:26.800><c> has</c><00:11:27.040><c> a</c><00:11:27.120><c> size</c><00:11:27.440><c> of</c><00:11:27.600><c> three</c>

00:11:27.829 --> 00:11:27.839 align:start position:0%
obviously this one has a size of three
 

00:11:27.839 --> 00:11:29.509 align:start position:0%
obviously this one has a size of three
whereas<00:11:28.079><c> this</c><00:11:28.160><c> one</c><00:11:28.399><c> has</c><00:11:28.480><c> a</c><00:11:28.560><c> size</c><00:11:28.880><c> of</c><00:11:28.959><c> four</c><00:11:29.279><c> so</c>

00:11:29.509 --> 00:11:29.519 align:start position:0%
whereas this one has a size of four so
 

00:11:29.519 --> 00:11:31.350 align:start position:0%
whereas this one has a size of four so
this<00:11:29.760><c> is</c><00:11:29.839><c> the</c><00:11:30.000><c> smallest</c><00:11:30.399><c> one</c><00:11:30.720><c> so</c><00:11:30.880><c> we</c><00:11:30.959><c> get</c><00:11:31.200><c> a</c>

00:11:31.350 --> 00:11:31.360 align:start position:0%
this is the smallest one so we get a
 

00:11:31.360 --> 00:11:32.550 align:start position:0%
this is the smallest one so we get a
three<00:11:31.760><c> right</c><00:11:32.079><c> three</c>

00:11:32.550 --> 00:11:32.560 align:start position:0%
three right three
 

00:11:32.560 --> 00:11:34.630 align:start position:0%
three right three
is<00:11:32.640><c> the</c><00:11:32.959><c> size</c><00:11:33.279><c> of</c><00:11:33.440><c> the</c><00:11:33.600><c> smallest</c><00:11:34.079><c> query</c><00:11:34.320><c> that</c>

00:11:34.630 --> 00:11:34.640 align:start position:0%
is the size of the smallest query that
 

00:11:34.640 --> 00:11:35.829 align:start position:0%
is the size of the smallest query that
this

00:11:35.829 --> 00:11:35.839 align:start position:0%
this
 

00:11:35.839 --> 00:11:37.350 align:start position:0%
this
that<00:11:36.000><c> this</c><00:11:36.160><c> query</c><00:11:36.399><c> belongs</c><00:11:36.720><c> to</c><00:11:36.880><c> right</c><00:11:37.040><c> so</c><00:11:37.200><c> what</c>

00:11:37.350 --> 00:11:37.360 align:start position:0%
that this query belongs to right so what
 

00:11:37.360 --> 00:11:39.110 align:start position:0%
that this query belongs to right so what
we're<00:11:37.519><c> gonna</c><00:11:37.680><c> do</c><00:11:38.079><c> is</c><00:11:38.160><c> to</c><00:11:38.399><c> our</c><00:11:38.560><c> output</c>

00:11:39.110 --> 00:11:39.120 align:start position:0%
we're gonna do is to our output
 

00:11:39.120 --> 00:11:40.710 align:start position:0%
we're gonna do is to our output
for<00:11:39.279><c> the</c><00:11:39.440><c> first</c><00:11:39.680><c> value</c><00:11:40.000><c> we're</c><00:11:40.160><c> gonna</c><00:11:40.320><c> add</c><00:11:40.560><c> a</c>

00:11:40.710 --> 00:11:40.720 align:start position:0%
for the first value we're gonna add a
 

00:11:40.720 --> 00:11:42.870 align:start position:0%
for the first value we're gonna add a
three<00:11:41.440><c> oh</c><00:11:41.760><c> and</c><00:11:42.000><c> by</c><00:11:42.240><c> the</c><00:11:42.399><c> way</c>

00:11:42.870 --> 00:11:42.880 align:start position:0%
three oh and by the way
 

00:11:42.880 --> 00:11:44.790 align:start position:0%
three oh and by the way
remember<00:11:43.279><c> how</c><00:11:43.440><c> we</c><00:11:43.760><c> sorted</c><00:11:44.160><c> these</c><00:11:44.399><c> queries</c><00:11:44.720><c> i</c>

00:11:44.790 --> 00:11:44.800 align:start position:0%
remember how we sorted these queries i
 

00:11:44.800 --> 00:11:46.550 align:start position:0%
remember how we sorted these queries i
know<00:11:44.959><c> i'm</c><00:11:45.120><c> probably</c><00:11:45.279><c> getting</c><00:11:45.600><c> a</c><00:11:45.680><c> little</c><00:11:46.000><c> too</c>

00:11:46.550 --> 00:11:46.560 align:start position:0%
know i'm probably getting a little too
 

00:11:46.560 --> 00:11:48.150 align:start position:0%
know i'm probably getting a little too
in-depth<00:11:47.040><c> but</c><00:11:47.440><c> that's</c><00:11:47.680><c> just</c><00:11:47.839><c> kind</c><00:11:47.920><c> of</c><00:11:48.079><c> the</c>

00:11:48.150 --> 00:11:48.160 align:start position:0%
in-depth but that's just kind of the
 

00:11:48.160 --> 00:11:49.509 align:start position:0%
in-depth but that's just kind of the
nature<00:11:48.480><c> of</c><00:11:48.560><c> this</c><00:11:48.800><c> problem</c><00:11:49.040><c> there's</c><00:11:49.200><c> just</c><00:11:49.440><c> a</c>

00:11:49.509 --> 00:11:49.519 align:start position:0%
nature of this problem there's just a
 

00:11:49.519 --> 00:11:50.069 align:start position:0%
nature of this problem there's just a
lot<00:11:49.680><c> of</c><00:11:49.760><c> like</c>

00:11:50.069 --> 00:11:50.079 align:start position:0%
lot of like
 

00:11:50.079 --> 00:11:51.750 align:start position:0%
lot of like
bookkeeping<00:11:50.800><c> and</c><00:11:50.959><c> details</c><00:11:51.360><c> that</c><00:11:51.519><c> you</c><00:11:51.600><c> have</c><00:11:51.680><c> to</c>

00:11:51.750 --> 00:11:51.760 align:start position:0%
bookkeeping and details that you have to
 

00:11:51.760 --> 00:11:53.509 align:start position:0%
bookkeeping and details that you have to
worry<00:11:52.000><c> about</c><00:11:52.240><c> remember</c><00:11:52.560><c> how</c><00:11:52.720><c> we</c><00:11:52.959><c> sorted</c><00:11:53.440><c> our</c>

00:11:53.509 --> 00:11:53.519 align:start position:0%
worry about remember how we sorted our
 

00:11:53.519 --> 00:11:55.430 align:start position:0%
worry about remember how we sorted our
queries<00:11:54.079><c> so</c><00:11:54.320><c> technically</c><00:11:54.720><c> we</c><00:11:54.880><c> don't</c><00:11:55.120><c> actually</c>

00:11:55.430 --> 00:11:55.440 align:start position:0%
queries so technically we don't actually
 

00:11:55.440 --> 00:11:55.990 align:start position:0%
queries so technically we don't actually
know<00:11:55.600><c> that</c><00:11:55.760><c> this</c>

00:11:55.990 --> 00:11:56.000 align:start position:0%
know that this
 

00:11:56.000 --> 00:11:58.310 align:start position:0%
know that this
is<00:11:56.079><c> the</c><00:11:56.480><c> first</c><00:11:56.880><c> query</c><00:11:57.279><c> we</c><00:11:57.440><c> don't</c><00:11:57.760><c> know</c><00:11:57.920><c> that</c>

00:11:58.310 --> 00:11:58.320 align:start position:0%
is the first query we don't know that
 

00:11:58.320 --> 00:11:59.190 align:start position:0%
is the first query we don't know that
this<00:11:58.560><c> query</c>

00:11:59.190 --> 00:11:59.200 align:start position:0%
this query
 

00:11:59.200 --> 00:12:00.710 align:start position:0%
this query
is<00:11:59.360><c> going</c><00:11:59.440><c> to</c><00:11:59.519><c> be</c><00:11:59.680><c> the</c><00:11:59.760><c> one</c><00:11:59.920><c> that</c><00:12:00.079><c> corresponds</c>

00:12:00.710 --> 00:12:00.720 align:start position:0%
is going to be the one that corresponds
 

00:12:00.720 --> 00:12:02.550 align:start position:0%
is going to be the one that corresponds
to<00:12:00.880><c> the</c><00:12:01.120><c> first</c><00:12:01.600><c> position</c>

00:12:02.550 --> 00:12:02.560 align:start position:0%
to the first position
 

00:12:02.560 --> 00:12:04.629 align:start position:0%
to the first position
in<00:12:02.720><c> our</c><00:12:02.959><c> output</c><00:12:03.519><c> right</c><00:12:03.839><c> so</c><00:12:04.000><c> we're</c><00:12:04.240><c> going</c><00:12:04.320><c> to</c><00:12:04.399><c> be</c>

00:12:04.629 --> 00:12:04.639 align:start position:0%
in our output right so we're going to be
 

00:12:04.639 --> 00:12:05.990 align:start position:0%
in our output right so we're going to be
needing<00:12:04.880><c> to</c><00:12:05.040><c> do</c><00:12:05.360><c> some</c>

00:12:05.990 --> 00:12:06.000 align:start position:0%
needing to do some
 

00:12:06.000 --> 00:12:07.670 align:start position:0%
needing to do some
like<00:12:06.320><c> bookkeeping</c><00:12:06.959><c> to</c><00:12:07.040><c> do</c><00:12:07.200><c> that</c><00:12:07.279><c> and</c><00:12:07.440><c> all</c>

00:12:07.670 --> 00:12:07.680 align:start position:0%
like bookkeeping to do that and all
 

00:12:07.680 --> 00:12:08.949 align:start position:0%
like bookkeeping to do that and all
that's<00:12:07.920><c> what</c><00:12:08.000><c> i'm</c><00:12:08.079><c> going</c><00:12:08.160><c> to</c><00:12:08.240><c> show</c><00:12:08.399><c> you</c><00:12:08.639><c> in</c><00:12:08.720><c> the</c>

00:12:08.949 --> 00:12:08.959 align:start position:0%
that's what i'm going to show you in the
 

00:12:08.959 --> 00:12:10.230 align:start position:0%
that's what i'm going to show you in the
code<00:12:09.360><c> because</c><00:12:09.519><c> i</c><00:12:09.600><c> don't</c><00:12:09.680><c> want</c><00:12:09.839><c> to</c><00:12:09.920><c> get</c><00:12:10.000><c> this</c>

00:12:10.230 --> 00:12:10.240 align:start position:0%
code because i don't want to get this
 

00:12:10.240 --> 00:12:11.430 align:start position:0%
code because i don't want to get this
too<00:12:10.480><c> complicated</c>

00:12:11.430 --> 00:12:11.440 align:start position:0%
too complicated
 

00:12:11.440 --> 00:12:13.030 align:start position:0%
too complicated
basically<00:12:11.839><c> we're</c><00:12:12.000><c> going</c><00:12:12.079><c> to</c><00:12:12.160><c> be</c><00:12:12.240><c> using</c><00:12:12.560><c> a</c><00:12:12.720><c> hash</c>

00:12:13.030 --> 00:12:13.040 align:start position:0%
basically we're going to be using a hash
 

00:12:13.040 --> 00:12:14.629 align:start position:0%
basically we're going to be using a hash
map<00:12:13.360><c> to</c><00:12:13.519><c> make</c><00:12:13.760><c> sure</c><00:12:13.920><c> that</c><00:12:14.079><c> we</c><00:12:14.240><c> can</c>

00:12:14.629 --> 00:12:14.639 align:start position:0%
map to make sure that we can
 

00:12:14.639 --> 00:12:17.350 align:start position:0%
map to make sure that we can
maintain<00:12:15.120><c> the</c><00:12:15.360><c> correct</c><00:12:16.000><c> order</c><00:12:16.480><c> of</c><00:12:16.639><c> them</c><00:12:17.200><c> but</c>

00:12:17.350 --> 00:12:17.360 align:start position:0%
maintain the correct order of them but
 

00:12:17.360 --> 00:12:19.030 align:start position:0%
maintain the correct order of them but
okay<00:12:17.680><c> so</c><00:12:17.920><c> for</c><00:12:18.160><c> this</c><00:12:18.399><c> query</c><00:12:18.720><c> right</c><00:12:18.880><c> we're</c>

00:12:19.030 --> 00:12:19.040 align:start position:0%
okay so for this query right we're
 

00:12:19.040 --> 00:12:20.949 align:start position:0%
okay so for this query right we're
basically<00:12:19.519><c> done</c><00:12:19.839><c> with</c><00:12:20.000><c> this</c><00:12:20.240><c> query</c><00:12:20.639><c> now</c><00:12:20.800><c> right</c>

00:12:20.949 --> 00:12:20.959 align:start position:0%
basically done with this query now right
 

00:12:20.959 --> 00:12:22.150 align:start position:0%
basically done with this query now right
we<00:12:21.120><c> don't</c><00:12:21.200><c> have</c><00:12:21.279><c> to</c><00:12:21.360><c> look</c><00:12:21.519><c> at</c><00:12:21.680><c> it</c><00:12:21.760><c> but</c>

00:12:22.150 --> 00:12:22.160 align:start position:0%
we don't have to look at it but
 

00:12:22.160 --> 00:12:24.790 align:start position:0%
we don't have to look at it but
notice<00:12:22.480><c> how</c><00:12:22.720><c> i</c><00:12:22.800><c> didn't</c><00:12:23.120><c> actually</c><00:12:23.680><c> pop</c><00:12:24.399><c> this</c>

00:12:24.790 --> 00:12:24.800 align:start position:0%
notice how i didn't actually pop this
 

00:12:24.800 --> 00:12:25.990 align:start position:0%
notice how i didn't actually pop this
from<00:12:25.120><c> our</c><00:12:25.360><c> min</c><00:12:25.600><c> heap</c>

00:12:25.990 --> 00:12:26.000 align:start position:0%
from our min heap
 

00:12:26.000 --> 00:12:29.110 align:start position:0%
from our min heap
why<00:12:26.320><c> didn't</c><00:12:26.639><c> i</c><00:12:26.959><c> pop</c><00:12:27.360><c> it</c><00:12:28.000><c> because</c><00:12:28.800><c> it's</c>

00:12:29.110 --> 00:12:29.120 align:start position:0%
why didn't i pop it because it's
 

00:12:29.120 --> 00:12:31.670 align:start position:0%
why didn't i pop it because it's
technically<00:12:29.680><c> possible</c><00:12:30.160><c> that</c><00:12:30.320><c> the</c><00:12:30.639><c> next</c><00:12:31.040><c> query</c>

00:12:31.670 --> 00:12:31.680 align:start position:0%
technically possible that the next query
 

00:12:31.680 --> 00:12:34.790 align:start position:0%
technically possible that the next query
could<00:12:32.079><c> also</c><00:12:32.880><c> belong</c><00:12:33.600><c> to</c><00:12:33.839><c> this</c><00:12:34.240><c> interval</c>

00:12:34.790 --> 00:12:34.800 align:start position:0%
could also belong to this interval
 

00:12:34.800 --> 00:12:37.030 align:start position:0%
could also belong to this interval
right<00:12:35.200><c> and</c><00:12:35.360><c> this</c><00:12:35.680><c> interval</c><00:12:36.079><c> could</c><00:12:36.720><c> could</c><00:12:36.880><c> be</c>

00:12:37.030 --> 00:12:37.040 align:start position:0%
right and this interval could could be
 

00:12:37.040 --> 00:12:38.230 align:start position:0%
right and this interval could could be
the<00:12:37.200><c> smallest</c>

00:12:38.230 --> 00:12:38.240 align:start position:0%
the smallest
 

00:12:38.240 --> 00:12:40.310 align:start position:0%
the smallest
interval<00:12:38.720><c> that</c><00:12:38.880><c> this</c><00:12:39.120><c> query</c><00:12:39.360><c> belongs</c><00:12:39.839><c> to</c><00:12:40.160><c> so</c>

00:12:40.310 --> 00:12:40.320 align:start position:0%
interval that this query belongs to so
 

00:12:40.320 --> 00:12:41.750 align:start position:0%
interval that this query belongs to so
we're<00:12:40.480><c> not</c><00:12:40.639><c> going</c><00:12:40.720><c> to</c><00:12:40.800><c> be</c><00:12:41.040><c> necessarily</c>

00:12:41.750 --> 00:12:41.760 align:start position:0%
we're not going to be necessarily
 

00:12:41.760 --> 00:12:44.870 align:start position:0%
we're not going to be necessarily
popping<00:12:42.720><c> the</c><00:12:43.440><c> uh</c><00:12:43.839><c> from</c><00:12:44.000><c> the</c><00:12:44.160><c> min</c><00:12:44.399><c> heap</c><00:12:44.720><c> just</c>

00:12:44.870 --> 00:12:44.880 align:start position:0%
popping the uh from the min heap just
 

00:12:44.880 --> 00:12:46.710 align:start position:0%
popping the uh from the min heap just
because<00:12:45.200><c> we</c><00:12:45.440><c> found</c><00:12:45.760><c> a</c><00:12:46.000><c> result</c>

00:12:46.710 --> 00:12:46.720 align:start position:0%
because we found a result
 

00:12:46.720 --> 00:12:48.629 align:start position:0%
because we found a result
okay<00:12:46.959><c> so</c><00:12:47.200><c> now</c><00:12:47.360><c> it's</c><00:12:47.519><c> time</c><00:12:47.839><c> finally</c><00:12:48.160><c> to</c><00:12:48.320><c> get</c><00:12:48.480><c> to</c>

00:12:48.629 --> 00:12:48.639 align:start position:0%
okay so now it's time finally to get to
 

00:12:48.639 --> 00:12:49.990 align:start position:0%
okay so now it's time finally to get to
the<00:12:48.720><c> next</c><00:12:49.040><c> query</c><00:12:49.360><c> this</c><00:12:49.519><c> is</c><00:12:49.600><c> going</c><00:12:49.680><c> to</c><00:12:49.760><c> take</c><00:12:49.920><c> a</c>

00:12:49.990 --> 00:12:50.000 align:start position:0%
the next query this is going to take a
 

00:12:50.000 --> 00:12:51.190 align:start position:0%
the next query this is going to take a
while<00:12:50.320><c> i</c><00:12:50.399><c> can</c><00:12:50.560><c> tell</c>

00:12:51.190 --> 00:12:51.200 align:start position:0%
while i can tell
 

00:12:51.200 --> 00:12:53.430 align:start position:0%
while i can tell
but<00:12:51.360><c> so</c><00:12:51.600><c> now</c><00:12:51.920><c> we</c><00:12:52.079><c> already</c><00:12:52.480><c> added</c><00:12:52.720><c> these</c><00:12:53.040><c> two</c><00:12:53.200><c> to</c>

00:12:53.430 --> 00:12:53.440 align:start position:0%
but so now we already added these two to
 

00:12:53.440 --> 00:12:54.870 align:start position:0%
but so now we already added these two to
our<00:12:53.519><c> min</c><00:12:53.760><c> heap</c><00:12:54.160><c> what</c><00:12:54.320><c> about</c>

00:12:54.870 --> 00:12:54.880 align:start position:0%
our min heap what about
 

00:12:54.880 --> 00:12:57.190 align:start position:0%
our min heap what about
this<00:12:55.200><c> one</c><00:12:55.519><c> right</c><00:12:55.839><c> so</c><00:12:56.160><c> let's</c><00:12:56.399><c> take</c><00:12:56.560><c> a</c><00:12:56.639><c> look</c><00:12:56.800><c> at</c>

00:12:57.190 --> 00:12:57.200 align:start position:0%
this one right so let's take a look at
 

00:12:57.200 --> 00:12:59.430 align:start position:0%
this one right so let's take a look at
this<00:12:57.440><c> left</c><00:12:57.680><c> value</c><00:12:58.079><c> is</c><00:12:58.240><c> it</c><00:12:58.480><c> less</c><00:12:58.720><c> than</c><00:12:58.959><c> or</c><00:12:59.120><c> equal</c>

00:12:59.430 --> 00:12:59.440 align:start position:0%
this left value is it less than or equal
 

00:12:59.440 --> 00:13:01.430 align:start position:0%
this left value is it less than or equal
to<00:12:59.680><c> this</c><00:12:59.920><c> query</c><00:13:00.399><c> yes</c><00:13:00.639><c> it</c><00:13:00.800><c> is</c><00:13:01.040><c> so</c><00:13:01.200><c> we're</c><00:13:01.360><c> going</c>

00:13:01.430 --> 00:13:01.440 align:start position:0%
to this query yes it is so we're going
 

00:13:01.440 --> 00:13:03.350 align:start position:0%
to this query yes it is so we're going
to<00:13:01.519><c> go</c><00:13:01.680><c> ahead</c><00:13:01.920><c> and</c><00:13:02.079><c> add</c><00:13:02.240><c> it</c><00:13:02.320><c> to</c><00:13:02.560><c> our</c><00:13:02.720><c> min</c><00:13:02.959><c> heap</c>

00:13:03.350 --> 00:13:03.360 align:start position:0%
to go ahead and add it to our min heap
 

00:13:03.360 --> 00:13:05.269 align:start position:0%
to go ahead and add it to our min heap
first<00:13:03.600><c> of</c><00:13:03.760><c> all</c><00:13:03.920><c> what's</c><00:13:04.160><c> the</c><00:13:04.399><c> size</c><00:13:04.800><c> of</c><00:13:04.959><c> this</c>

00:13:05.269 --> 00:13:05.279 align:start position:0%
first of all what's the size of this
 

00:13:05.279 --> 00:13:06.949 align:start position:0%
first of all what's the size of this
interval<00:13:05.760><c> well</c><00:13:06.079><c> take</c><00:13:06.320><c> a</c><00:13:06.399><c> look</c>

00:13:06.949 --> 00:13:06.959 align:start position:0%
interval well take a look
 

00:13:06.959 --> 00:13:10.150 align:start position:0%
interval well take a look
6<00:13:07.760><c> minus</c><00:13:08.240><c> 3</c><00:13:08.959><c> plus</c><00:13:09.279><c> 1</c><00:13:09.440><c> what's</c><00:13:09.680><c> that</c><00:13:09.839><c> going</c><00:13:09.920><c> to</c><00:13:10.000><c> be</c>

00:13:10.150 --> 00:13:10.160 align:start position:0%
6 minus 3 plus 1 what's that going to be
 

00:13:10.160 --> 00:13:10.790 align:start position:0%
6 minus 3 plus 1 what's that going to be
that's<00:13:10.320><c> going</c><00:13:10.399><c> to</c><00:13:10.480><c> be</c>

00:13:10.790 --> 00:13:10.800 align:start position:0%
that's going to be
 

00:13:10.800 --> 00:13:14.069 align:start position:0%
that's going to be
4<00:13:11.839><c> so</c><00:13:12.000><c> let's</c><00:13:12.240><c> add</c><00:13:12.639><c> 4</c><00:13:13.519><c> to</c>

00:13:14.069 --> 00:13:14.079 align:start position:0%
4 so let's add 4 to
 

00:13:14.079 --> 00:13:16.710 align:start position:0%
4 so let's add 4 to
our<00:13:14.399><c> min</c><00:13:14.639><c> heap</c><00:13:15.040><c> now</c><00:13:15.200><c> what's</c><00:13:15.600><c> the</c><00:13:16.079><c> right</c><00:13:16.399><c> value</c>

00:13:16.710 --> 00:13:16.720 align:start position:0%
our min heap now what's the right value
 

00:13:16.720 --> 00:13:18.150 align:start position:0%
our min heap now what's the right value
going<00:13:16.880><c> to</c><00:13:16.959><c> be</c><00:13:17.200><c> of</c><00:13:17.279><c> the</c><00:13:17.440><c> min</c><00:13:17.680><c> heap</c>

00:13:18.150 --> 00:13:18.160 align:start position:0%
going to be of the min heap
 

00:13:18.160 --> 00:13:20.310 align:start position:0%
going to be of the min heap
the<00:13:18.480><c> interval</c><00:13:19.040><c> the</c><00:13:19.200><c> right</c><00:13:19.360><c> value</c><00:13:19.680><c> is</c><00:13:19.839><c> six</c><00:13:20.160><c> so</c>

00:13:20.310 --> 00:13:20.320 align:start position:0%
the interval the right value is six so
 

00:13:20.320 --> 00:13:21.590 align:start position:0%
the interval the right value is six so
that's<00:13:20.560><c> going</c><00:13:20.639><c> to</c><00:13:20.720><c> be</c><00:13:20.880><c> the</c><00:13:20.959><c> second</c><00:13:21.200><c> value</c><00:13:21.519><c> that</c>

00:13:21.590 --> 00:13:21.600 align:start position:0%
that's going to be the second value that
 

00:13:21.600 --> 00:13:22.470 align:start position:0%
that's going to be the second value that
we<00:13:21.839><c> add</c>

00:13:22.470 --> 00:13:22.480 align:start position:0%
we add
 

00:13:22.480 --> 00:13:25.829 align:start position:0%
we add
to<00:13:23.200><c> our</c><00:13:24.160><c> min</c><00:13:24.399><c> heap</c><00:13:24.959><c> okay</c><00:13:25.200><c> so</c><00:13:25.360><c> we</c><00:13:25.519><c> don't</c><00:13:25.680><c> have</c><00:13:25.760><c> to</c>

00:13:25.829 --> 00:13:25.839 align:start position:0%
to our min heap okay so we don't have to
 

00:13:25.839 --> 00:13:27.350 align:start position:0%
to our min heap okay so we don't have to
worry<00:13:26.079><c> about</c><00:13:26.240><c> this</c><00:13:26.480><c> interval</c><00:13:26.880><c> anymore</c><00:13:27.200><c> we</c>

00:13:27.350 --> 00:13:27.360 align:start position:0%
worry about this interval anymore we
 

00:13:27.360 --> 00:13:28.949 align:start position:0%
worry about this interval anymore we
already<00:13:27.600><c> added</c><00:13:27.839><c> it</c><00:13:28.000><c> to</c><00:13:28.160><c> our</c><00:13:28.240><c> min</c><00:13:28.480><c> heap</c>

00:13:28.949 --> 00:13:28.959 align:start position:0%
already added it to our min heap
 

00:13:28.959 --> 00:13:31.190 align:start position:0%
already added it to our min heap
now<00:13:29.120><c> let's</c><00:13:29.279><c> go</c><00:13:29.440><c> to</c><00:13:29.680><c> the</c><00:13:30.079><c> next</c><00:13:30.560><c> and</c><00:13:30.800><c> actually</c>

00:13:31.190 --> 00:13:31.200 align:start position:0%
now let's go to the next and actually
 

00:13:31.200 --> 00:13:31.990 align:start position:0%
now let's go to the next and actually
the<00:13:31.519><c> last</c>

00:13:31.990 --> 00:13:32.000 align:start position:0%
the last
 

00:13:32.000 --> 00:13:35.190 align:start position:0%
the last
interval<00:13:32.720><c> in</c><00:13:33.200><c> our</c><00:13:33.920><c> intervals</c><00:13:34.560><c> this</c><00:13:34.800><c> one</c><00:13:34.959><c> the</c>

00:13:35.190 --> 00:13:35.200 align:start position:0%
interval in our intervals this one the
 

00:13:35.200 --> 00:13:35.509 align:start position:0%
interval in our intervals this one the
left

00:13:35.509 --> 00:13:35.519 align:start position:0%
left
 

00:13:35.519 --> 00:13:37.509 align:start position:0%
left
the<00:13:35.920><c> left</c><00:13:36.079><c> value</c><00:13:36.399><c> of</c><00:13:36.480><c> this</c><00:13:36.720><c> interval</c><00:13:37.040><c> is</c><00:13:37.200><c> not</c>

00:13:37.509 --> 00:13:37.519 align:start position:0%
the left value of this interval is not
 

00:13:37.519 --> 00:13:39.030 align:start position:0%
the left value of this interval is not
less<00:13:37.680><c> than</c><00:13:37.920><c> or</c><00:13:38.079><c> equal</c><00:13:38.320><c> to</c><00:13:38.399><c> this</c><00:13:38.560><c> so</c><00:13:38.720><c> we're</c><00:13:38.880><c> not</c>

00:13:39.030 --> 00:13:39.040 align:start position:0%
less than or equal to this so we're not
 

00:13:39.040 --> 00:13:40.790 align:start position:0%
less than or equal to this so we're not
going<00:13:39.199><c> to</c><00:13:39.279><c> be</c><00:13:39.440><c> considering</c><00:13:40.000><c> this</c><00:13:40.320><c> interval</c>

00:13:40.790 --> 00:13:40.800 align:start position:0%
going to be considering this interval
 

00:13:40.800 --> 00:13:41.269 align:start position:0%
going to be considering this interval
just

00:13:41.269 --> 00:13:41.279 align:start position:0%
just
 

00:13:41.279 --> 00:13:44.629 align:start position:0%
just
yet<00:13:42.079><c> so</c><00:13:42.399><c> now</c><00:13:42.639><c> it's</c><00:13:42.880><c> time</c><00:13:43.440><c> for</c><00:13:43.839><c> this</c><00:13:44.160><c> query</c><00:13:44.480><c> to</c>

00:13:44.629 --> 00:13:44.639 align:start position:0%
yet so now it's time for this query to
 

00:13:44.639 --> 00:13:45.590 align:start position:0%
yet so now it's time for this query to
determine

00:13:45.590 --> 00:13:45.600 align:start position:0%
determine
 

00:13:45.600 --> 00:13:47.590 align:start position:0%
determine
what<00:13:45.839><c> is</c><00:13:46.000><c> the</c><00:13:46.240><c> smallest</c><00:13:46.800><c> value</c><00:13:47.199><c> what's</c><00:13:47.519><c> the</c>

00:13:47.590 --> 00:13:47.600 align:start position:0%
what is the smallest value what's the
 

00:13:47.600 --> 00:13:48.870 align:start position:0%
what is the smallest value what's the
smallest<00:13:48.160><c> length</c>

00:13:48.870 --> 00:13:48.880 align:start position:0%
smallest length
 

00:13:48.880 --> 00:13:51.030 align:start position:0%
smallest length
of<00:13:48.959><c> the</c><00:13:49.120><c> interval</c><00:13:49.519><c> that</c><00:13:49.680><c> it</c><00:13:49.839><c> belongs</c><00:13:50.320><c> to</c><00:13:50.800><c> well</c>

00:13:51.030 --> 00:13:51.040 align:start position:0%
of the interval that it belongs to well
 

00:13:51.040 --> 00:13:52.310 align:start position:0%
of the interval that it belongs to well
once<00:13:51.279><c> again</c><00:13:51.519><c> we're</c><00:13:51.680><c> going</c><00:13:51.760><c> to</c><00:13:51.839><c> take</c><00:13:52.000><c> a</c><00:13:52.079><c> look</c><00:13:52.240><c> at</c>

00:13:52.310 --> 00:13:52.320 align:start position:0%
once again we're going to take a look at
 

00:13:52.320 --> 00:13:53.750 align:start position:0%
once again we're going to take a look at
our<00:13:52.480><c> min</c><00:13:52.720><c> heap</c><00:13:52.959><c> we're</c><00:13:53.040><c> going</c><00:13:53.199><c> to</c><00:13:53.360><c> get</c><00:13:53.519><c> the</c>

00:13:53.750 --> 00:13:53.760 align:start position:0%
our min heap we're going to get the
 

00:13:53.760 --> 00:13:54.710 align:start position:0%
our min heap we're going to get the
interval

00:13:54.710 --> 00:13:54.720 align:start position:0%
interval
 

00:13:54.720 --> 00:13:56.550 align:start position:0%
interval
that's<00:13:54.959><c> the</c><00:13:55.120><c> smallest</c><00:13:55.680><c> interval</c><00:13:56.079><c> from</c><00:13:56.320><c> here</c>

00:13:56.550 --> 00:13:56.560 align:start position:0%
that's the smallest interval from here
 

00:13:56.560 --> 00:13:58.310 align:start position:0%
that's the smallest interval from here
and<00:13:56.720><c> we</c><00:13:56.800><c> can</c><00:13:56.959><c> actually</c><00:13:57.199><c> do</c><00:13:57.360><c> that</c><00:13:57.519><c> in</c><00:13:57.680><c> o</c><00:13:57.920><c> of</c><00:13:58.079><c> one</c>

00:13:58.310 --> 00:13:58.320 align:start position:0%
and we can actually do that in o of one
 

00:13:58.320 --> 00:13:59.829 align:start position:0%
and we can actually do that in o of one
time<00:13:58.480><c> because</c><00:13:58.720><c> we're</c><00:13:58.880><c> not</c><00:13:59.040><c> actually</c><00:13:59.440><c> popping</c>

00:13:59.829 --> 00:13:59.839 align:start position:0%
time because we're not actually popping
 

00:13:59.839 --> 00:14:01.590 align:start position:0%
time because we're not actually popping
from<00:14:00.000><c> the</c><00:14:00.160><c> min</c><00:14:00.320><c> heap</c><00:14:00.560><c> but</c><00:14:00.639><c> we</c><00:14:00.800><c> will</c><00:14:00.959><c> be</c><00:14:01.199><c> popping</c>

00:14:01.590 --> 00:14:01.600 align:start position:0%
from the min heap but we will be popping
 

00:14:01.600 --> 00:14:01.990 align:start position:0%
from the min heap but we will be popping
later

00:14:01.990 --> 00:14:02.000 align:start position:0%
later
 

00:14:02.000 --> 00:14:03.829 align:start position:0%
later
on<00:14:02.240><c> and</c><00:14:02.399><c> i'll</c><00:14:02.480><c> show</c><00:14:02.639><c> you</c><00:14:02.880><c> why</c><00:14:03.120><c> we</c><00:14:03.279><c> do</c><00:14:03.519><c> need</c><00:14:03.680><c> to</c>

00:14:03.829 --> 00:14:03.839 align:start position:0%
on and i'll show you why we do need to
 

00:14:03.839 --> 00:14:05.030 align:start position:0%
on and i'll show you why we do need to
pop<00:14:04.079><c> from</c><00:14:04.240><c> the</c><00:14:04.399><c> min</c><00:14:04.639><c> heap</c>

00:14:05.030 --> 00:14:05.040 align:start position:0%
pop from the min heap
 

00:14:05.040 --> 00:14:07.509 align:start position:0%
pop from the min heap
later<00:14:05.440><c> on</c><00:14:05.920><c> but</c><00:14:06.079><c> for</c><00:14:06.320><c> now</c><00:14:06.720><c> what's</c><00:14:06.959><c> the</c><00:14:07.120><c> smallest</c>

00:14:07.509 --> 00:14:07.519 align:start position:0%
later on but for now what's the smallest
 

00:14:07.519 --> 00:14:08.710 align:start position:0%
later on but for now what's the smallest
value<00:14:07.839><c> in</c><00:14:07.920><c> the</c><00:14:08.079><c> min</c><00:14:08.320><c> heap</c>

00:14:08.710 --> 00:14:08.720 align:start position:0%
value in the min heap
 

00:14:08.720 --> 00:14:11.350 align:start position:0%
value in the min heap
it's<00:14:09.120><c> this</c><00:14:09.440><c> one</c><00:14:09.760><c> again</c><00:14:10.320><c> right</c><00:14:10.560><c> and</c><00:14:10.720><c> that</c><00:14:11.040><c> does</c>

00:14:11.350 --> 00:14:11.360 align:start position:0%
it's this one again right and that does
 

00:14:11.360 --> 00:14:11.750 align:start position:0%
it's this one again right and that does
make

00:14:11.750 --> 00:14:11.760 align:start position:0%
make
 

00:14:11.760 --> 00:14:14.230 align:start position:0%
make
sense<00:14:12.320><c> because</c><00:14:12.800><c> take</c><00:14:13.040><c> a</c><00:14:13.120><c> look</c><00:14:13.360><c> at</c><00:14:13.440><c> this</c><00:14:13.680><c> query</c>

00:14:14.230 --> 00:14:14.240 align:start position:0%
sense because take a look at this query
 

00:14:14.240 --> 00:14:16.790 align:start position:0%
sense because take a look at this query
it<00:14:14.480><c> does</c><00:14:14.800><c> belong</c><00:14:15.440><c> to</c><00:14:15.600><c> this</c><00:14:15.920><c> interval</c><00:14:16.320><c> and</c><00:14:16.480><c> this</c>

00:14:16.790 --> 00:14:16.800 align:start position:0%
it does belong to this interval and this
 

00:14:16.800 --> 00:14:18.389 align:start position:0%
it does belong to this interval and this
interval<00:14:17.199><c> is</c><00:14:17.279><c> the</c><00:14:17.440><c> smallest</c><00:14:17.920><c> interval</c><00:14:18.240><c> that</c>

00:14:18.389 --> 00:14:18.399 align:start position:0%
interval is the smallest interval that
 

00:14:18.399 --> 00:14:19.350 align:start position:0%
interval is the smallest interval that
it<00:14:18.480><c> belongs</c><00:14:18.880><c> to</c>

00:14:19.350 --> 00:14:19.360 align:start position:0%
it belongs to
 

00:14:19.360 --> 00:14:21.670 align:start position:0%
it belongs to
so<00:14:19.760><c> for</c><00:14:20.000><c> the</c><00:14:20.399><c> size</c><00:14:20.639><c> of</c><00:14:20.720><c> the</c><00:14:20.880><c> smallest</c><00:14:21.279><c> interval</c>

00:14:21.670 --> 00:14:21.680 align:start position:0%
so for the size of the smallest interval
 

00:14:21.680 --> 00:14:23.189 align:start position:0%
so for the size of the smallest interval
of<00:14:21.760><c> this</c><00:14:22.000><c> query</c><00:14:22.320><c> we're</c><00:14:22.480><c> going</c><00:14:22.560><c> to</c><00:14:22.720><c> add</c>

00:14:23.189 --> 00:14:23.199 align:start position:0%
of this query we're going to add
 

00:14:23.199 --> 00:14:25.509 align:start position:0%
of this query we're going to add
3<00:14:23.600><c> once</c><00:14:23.920><c> again</c><00:14:24.560><c> and</c><00:14:24.720><c> now</c><00:14:24.959><c> we</c><00:14:25.120><c> are</c><00:14:25.199><c> done</c><00:14:25.360><c> with</c>

00:14:25.509 --> 00:14:25.519 align:start position:0%
3 once again and now we are done with
 

00:14:25.519 --> 00:14:27.430 align:start position:0%
3 once again and now we are done with
this<00:14:25.680><c> query</c><00:14:26.079><c> time</c><00:14:26.240><c> to</c><00:14:26.399><c> move</c><00:14:26.560><c> on</c><00:14:26.720><c> to</c><00:14:26.959><c> the</c><00:14:27.120><c> next</c>

00:14:27.430 --> 00:14:27.440 align:start position:0%
this query time to move on to the next
 

00:14:27.440 --> 00:14:27.990 align:start position:0%
this query time to move on to the next
one

00:14:27.990 --> 00:14:28.000 align:start position:0%
one
 

00:14:28.000 --> 00:14:30.069 align:start position:0%
one
so<00:14:28.240><c> remember</c><00:14:28.560><c> there's</c><00:14:28.800><c> only</c><00:14:29.040><c> one</c><00:14:29.279><c> query</c><00:14:29.680><c> left</c>

00:14:30.069 --> 00:14:30.079 align:start position:0%
so remember there's only one query left
 

00:14:30.079 --> 00:14:31.350 align:start position:0%
so remember there's only one query left
we<00:14:30.320><c> already</c><00:14:30.880><c> finished</c>

00:14:31.350 --> 00:14:31.360 align:start position:0%
we already finished
 

00:14:31.360 --> 00:14:32.949 align:start position:0%
we already finished
this<00:14:31.519><c> one</c><00:14:31.839><c> so</c><00:14:32.160><c> let's</c><00:14:32.320><c> take</c><00:14:32.480><c> a</c><00:14:32.560><c> look</c><00:14:32.720><c> at</c><00:14:32.880><c> the</c>

00:14:32.949 --> 00:14:32.959 align:start position:0%
this one so let's take a look at the
 

00:14:32.959 --> 00:14:34.710 align:start position:0%
this one so let's take a look at the
left<00:14:33.199><c> value</c><00:14:33.519><c> of</c><00:14:33.600><c> this</c><00:14:33.839><c> query</c><00:14:34.079><c> it's</c><00:14:34.240><c> a</c><00:14:34.320><c> single</c>

00:14:34.710 --> 00:14:34.720 align:start position:0%
left value of this query it's a single
 

00:14:34.720 --> 00:14:35.670 align:start position:0%
left value of this query it's a single
point<00:14:35.040><c> query</c>

00:14:35.670 --> 00:14:35.680 align:start position:0%
point query
 

00:14:35.680 --> 00:14:37.509 align:start position:0%
point query
so<00:14:35.920><c> the</c><00:14:36.000><c> left</c><00:14:36.240><c> value</c><00:14:36.639><c> is</c><00:14:36.800><c> equal</c><00:14:37.040><c> to</c><00:14:37.120><c> the</c><00:14:37.279><c> right</c>

00:14:37.509 --> 00:14:37.519 align:start position:0%
so the left value is equal to the right
 

00:14:37.519 --> 00:14:39.590 align:start position:0%
so the left value is equal to the right
value<00:14:38.160><c> is</c><00:14:38.320><c> the</c><00:14:38.480><c> left</c><00:14:38.720><c> value</c>

00:14:39.590 --> 00:14:39.600 align:start position:0%
value is the left value
 

00:14:39.600 --> 00:14:42.150 align:start position:0%
value is the left value
less<00:14:39.839><c> than</c><00:14:40.079><c> or</c><00:14:40.320><c> equal</c><00:14:40.720><c> to</c><00:14:40.959><c> the</c><00:14:41.199><c> query</c><00:14:41.680><c> yes</c><00:14:41.920><c> it</c>

00:14:42.150 --> 00:14:42.160 align:start position:0%
less than or equal to the query yes it
 

00:14:42.160 --> 00:14:44.150 align:start position:0%
less than or equal to the query yes it
is<00:14:42.480><c> so</c><00:14:42.639><c> we're</c><00:14:42.800><c> going</c><00:14:42.880><c> to</c><00:14:43.040><c> take</c><00:14:43.279><c> this</c><00:14:43.519><c> interval</c>

00:14:44.150 --> 00:14:44.160 align:start position:0%
is so we're going to take this interval
 

00:14:44.160 --> 00:14:46.629 align:start position:0%
is so we're going to take this interval
and<00:14:44.399><c> add</c><00:14:44.639><c> it</c><00:14:44.880><c> to</c><00:14:45.199><c> our</c><00:14:45.360><c> min</c><00:14:45.600><c> heap</c><00:14:46.079><c> what's</c><00:14:46.399><c> the</c>

00:14:46.629 --> 00:14:46.639 align:start position:0%
and add it to our min heap what's the
 

00:14:46.639 --> 00:14:48.470 align:start position:0%
and add it to our min heap what's the
size<00:14:47.120><c> of</c><00:14:47.360><c> this</c><00:14:47.680><c> interval</c><00:14:48.000><c> well</c><00:14:48.160><c> it's</c><00:14:48.320><c> going</c><00:14:48.399><c> to</c>

00:14:48.470 --> 00:14:48.480 align:start position:0%
size of this interval well it's going to
 

00:14:48.480 --> 00:14:49.590 align:start position:0%
size of this interval well it's going to
be<00:14:48.639><c> 4</c><00:14:48.959><c> minus</c><00:14:49.279><c> 4</c>

00:14:49.590 --> 00:14:49.600 align:start position:0%
be 4 minus 4
 

00:14:49.600 --> 00:14:52.790 align:start position:0%
be 4 minus 4
plus<00:14:49.920><c> 1</c><00:14:50.160><c> that's</c><00:14:50.399><c> going</c><00:14:50.480><c> to</c><00:14:50.560><c> be</c><00:14:50.959><c> 1</c><00:14:51.839><c> and</c><00:14:52.480><c> what's</c>

00:14:52.790 --> 00:14:52.800 align:start position:0%
plus 1 that's going to be 1 and what's
 

00:14:52.800 --> 00:14:54.389 align:start position:0%
plus 1 that's going to be 1 and what's
the<00:14:53.040><c> right</c><00:14:53.279><c> value</c><00:14:53.600><c> of</c><00:14:53.680><c> the</c>

00:14:54.389 --> 00:14:54.399 align:start position:0%
the right value of the
 

00:14:54.399 --> 00:14:56.949 align:start position:0%
the right value of the
of<00:14:54.480><c> the</c><00:14:54.639><c> interval</c><00:14:55.279><c> well</c><00:14:55.600><c> it's</c><00:14:55.760><c> going</c><00:14:55.920><c> to</c><00:14:56.000><c> be</c>

00:14:56.949 --> 00:14:56.959 align:start position:0%
of the interval well it's going to be
 

00:14:56.959 --> 00:14:57.990 align:start position:0%
of the interval well it's going to be
one<00:14:57.279><c> or</c><00:14:57.440><c> it's</c><00:14:57.600><c> going</c><00:14:57.680><c> to</c><00:14:57.760><c> be</c>

00:14:57.990 --> 00:14:58.000 align:start position:0%
one or it's going to be
 

00:14:58.000 --> 00:15:00.230 align:start position:0%
one or it's going to be
four<00:14:58.399><c> because</c><00:14:58.800><c> it's</c><00:14:59.040><c> a</c><00:14:59.120><c> single</c><00:14:59.519><c> point</c>

00:15:00.230 --> 00:15:00.240 align:start position:0%
four because it's a single point
 

00:15:00.240 --> 00:15:01.189 align:start position:0%
four because it's a single point
interval

00:15:01.189 --> 00:15:01.199 align:start position:0%
interval
 

00:15:01.199 --> 00:15:02.790 align:start position:0%
interval
that's<00:15:01.440><c> where</c><00:15:01.600><c> it's</c><00:15:01.760><c> going</c><00:15:01.839><c> to</c><00:15:01.920><c> go</c><00:15:02.480><c> so</c><00:15:02.639><c> now</c>

00:15:02.790 --> 00:15:02.800 align:start position:0%
that's where it's going to go so now
 

00:15:02.800 --> 00:15:05.269 align:start position:0%
that's where it's going to go so now
we've<00:15:03.040><c> actually</c><00:15:03.440><c> added</c><00:15:03.920><c> all</c><00:15:04.160><c> the</c><00:15:04.480><c> intervals</c>

00:15:05.269 --> 00:15:05.279 align:start position:0%
we've actually added all the intervals
 

00:15:05.279 --> 00:15:07.430 align:start position:0%
we've actually added all the intervals
to<00:15:05.680><c> our</c><00:15:06.079><c> query</c><00:15:06.399><c> so</c><00:15:06.560><c> the</c><00:15:06.639><c> next</c><00:15:06.800><c> time</c><00:15:06.959><c> we</c><00:15:07.120><c> go</c><00:15:07.279><c> to</c>

00:15:07.430 --> 00:15:07.440 align:start position:0%
to our query so the next time we go to
 

00:15:07.440 --> 00:15:08.710 align:start position:0%
to our query so the next time we go to
the<00:15:07.519><c> next</c><00:15:07.760><c> query</c><00:15:08.160><c> we</c><00:15:08.320><c> want</c>

00:15:08.710 --> 00:15:08.720 align:start position:0%
the next query we want
 

00:15:08.720 --> 00:15:10.629 align:start position:0%
the next query we want
we<00:15:08.880><c> won't</c><00:15:09.120><c> actually</c><00:15:09.519><c> have</c><00:15:09.680><c> to</c><00:15:09.920><c> add</c><00:15:10.240><c> more</c>

00:15:10.629 --> 00:15:10.639 align:start position:0%
we won't actually have to add more
 

00:15:10.639 --> 00:15:12.550 align:start position:0%
we won't actually have to add more
intervals<00:15:11.120><c> to</c><00:15:11.440><c> our</c><00:15:11.600><c> min</c><00:15:11.920><c> heap</c><00:15:12.160><c> that's</c><00:15:12.399><c> pretty</c>

00:15:12.550 --> 00:15:12.560 align:start position:0%
intervals to our min heap that's pretty
 

00:15:12.560 --> 00:15:13.430 align:start position:0%
intervals to our min heap that's pretty
good<00:15:12.959><c> but</c>

00:15:13.430 --> 00:15:13.440 align:start position:0%
good but
 

00:15:13.440 --> 00:15:15.269 align:start position:0%
good but
now<00:15:13.680><c> it's</c><00:15:13.839><c> time</c><00:15:14.160><c> to</c><00:15:14.320><c> determine</c><00:15:14.880><c> for</c><00:15:15.040><c> this</c>

00:15:15.269 --> 00:15:15.279 align:start position:0%
now it's time to determine for this
 

00:15:15.279 --> 00:15:17.430 align:start position:0%
now it's time to determine for this
query<00:15:15.760><c> what's</c><00:15:16.000><c> the</c><00:15:16.160><c> smallest</c><00:15:16.639><c> interval</c>

00:15:17.430 --> 00:15:17.440 align:start position:0%
query what's the smallest interval
 

00:15:17.440 --> 00:15:19.910 align:start position:0%
query what's the smallest interval
that<00:15:17.600><c> it</c><00:15:17.760><c> belongs</c><00:15:18.240><c> to</c><00:15:18.800><c> well</c><00:15:19.199><c> let's</c><00:15:19.440><c> again</c><00:15:19.760><c> take</c>

00:15:19.910 --> 00:15:19.920 align:start position:0%
that it belongs to well let's again take
 

00:15:19.920 --> 00:15:21.030 align:start position:0%
that it belongs to well let's again take
a<00:15:20.000><c> look</c><00:15:20.160><c> at</c><00:15:20.240><c> the</c><00:15:20.399><c> min</c><00:15:20.639><c> heap</c>

00:15:21.030 --> 00:15:21.040 align:start position:0%
a look at the min heap
 

00:15:21.040 --> 00:15:23.189 align:start position:0%
a look at the min heap
take<00:15:21.279><c> a</c><00:15:21.360><c> look</c><00:15:21.600><c> at</c><00:15:21.680><c> the</c><00:15:21.839><c> smallest</c><00:15:22.399><c> value</c><00:15:22.959><c> now</c>

00:15:23.189 --> 00:15:23.199 align:start position:0%
take a look at the smallest value now
 

00:15:23.199 --> 00:15:24.230 align:start position:0%
take a look at the smallest value now
that<00:15:23.360><c> we</c><00:15:23.600><c> added</c>

00:15:24.230 --> 00:15:24.240 align:start position:0%
that we added
 

00:15:24.240 --> 00:15:26.710 align:start position:0%
that we added
the<00:15:24.639><c> size</c><00:15:24.959><c> of</c><00:15:25.040><c> the</c><00:15:25.120><c> smallest</c><00:15:25.600><c> interval</c><00:15:26.079><c> is</c><00:15:26.240><c> now</c>

00:15:26.710 --> 00:15:26.720 align:start position:0%
the size of the smallest interval is now
 

00:15:26.720 --> 00:15:27.590 align:start position:0%
the size of the smallest interval is now
one<00:15:27.199><c> so</c>

00:15:27.590 --> 00:15:27.600 align:start position:0%
one so
 

00:15:27.600 --> 00:15:30.069 align:start position:0%
one so
one<00:15:28.000><c> is</c><00:15:28.240><c> going</c><00:15:28.399><c> to</c><00:15:28.560><c> be</c><00:15:28.720><c> the</c><00:15:28.959><c> size</c><00:15:29.279><c> that</c><00:15:29.440><c> we</c><00:15:29.600><c> add</c>

00:15:30.069 --> 00:15:30.079 align:start position:0%
one is going to be the size that we add
 

00:15:30.079 --> 00:15:30.710 align:start position:0%
one is going to be the size that we add
to<00:15:30.399><c> our</c>

00:15:30.710 --> 00:15:30.720 align:start position:0%
to our
 

00:15:30.720 --> 00:15:32.870 align:start position:0%
to our
output<00:15:31.440><c> so</c><00:15:31.680><c> now</c><00:15:31.920><c> we</c><00:15:32.079><c> are</c><00:15:32.240><c> done</c><00:15:32.480><c> with</c><00:15:32.639><c> this</c>

00:15:32.870 --> 00:15:32.880 align:start position:0%
output so now we are done with this
 

00:15:32.880 --> 00:15:34.949 align:start position:0%
output so now we are done with this
query<00:15:33.199><c> we</c><00:15:33.360><c> only</c><00:15:33.600><c> have</c><00:15:33.839><c> one</c><00:15:34.079><c> last</c><00:15:34.399><c> query</c>

00:15:34.949 --> 00:15:34.959 align:start position:0%
query we only have one last query
 

00:15:34.959 --> 00:15:37.670 align:start position:0%
query we only have one last query
left<00:15:35.519><c> to</c><00:15:35.920><c> consider</c><00:15:36.560><c> so</c><00:15:36.720><c> the</c><00:15:36.880><c> good</c><00:15:37.040><c> thing</c><00:15:37.279><c> is</c><00:15:37.519><c> we</c>

00:15:37.670 --> 00:15:37.680 align:start position:0%
left to consider so the good thing is we
 

00:15:37.680 --> 00:15:39.590 align:start position:0%
left to consider so the good thing is we
added<00:15:38.079><c> all</c><00:15:38.240><c> the</c><00:15:38.399><c> intervals</c><00:15:38.880><c> to</c><00:15:39.040><c> the</c><00:15:39.199><c> min</c><00:15:39.360><c> heap</c>

00:15:39.590 --> 00:15:39.600 align:start position:0%
added all the intervals to the min heap
 

00:15:39.600 --> 00:15:41.189 align:start position:0%
added all the intervals to the min heap
so<00:15:39.759><c> we</c><00:15:39.839><c> don't</c><00:15:40.000><c> have</c><00:15:40.160><c> to</c><00:15:40.240><c> do</c><00:15:40.480><c> that</c>

00:15:41.189 --> 00:15:41.199 align:start position:0%
so we don't have to do that
 

00:15:41.199 --> 00:15:44.310 align:start position:0%
so we don't have to do that
but<00:15:41.839><c> now</c><00:15:42.399><c> notice</c><00:15:43.120><c> one</c><00:15:43.680><c> thing</c>

00:15:44.310 --> 00:15:44.320 align:start position:0%
but now notice one thing
 

00:15:44.320 --> 00:15:46.949 align:start position:0%
but now notice one thing
so<00:15:44.959><c> now</c><00:15:45.360><c> if</c><00:15:45.519><c> we</c><00:15:45.759><c> if</c><00:15:45.920><c> we're</c><00:15:46.160><c> trying</c><00:15:46.399><c> to</c><00:15:46.480><c> look</c><00:15:46.720><c> for</c>

00:15:46.949 --> 00:15:46.959 align:start position:0%
so now if we if we're trying to look for
 

00:15:46.959 --> 00:15:48.550 align:start position:0%
so now if we if we're trying to look for
the<00:15:47.120><c> smallest</c><00:15:47.519><c> interval</c><00:15:47.839><c> that</c><00:15:48.000><c> this</c><00:15:48.160><c> belongs</c>

00:15:48.550 --> 00:15:48.560 align:start position:0%
the smallest interval that this belongs
 

00:15:48.560 --> 00:15:49.350 align:start position:0%
the smallest interval that this belongs
to<00:15:48.800><c> if</c><00:15:48.880><c> we</c><00:15:49.040><c> just</c>

00:15:49.350 --> 00:15:49.360 align:start position:0%
to if we just
 

00:15:49.360 --> 00:15:51.990 align:start position:0%
to if we just
immediately<00:15:50.160><c> go</c><00:15:50.399><c> to</c><00:15:50.639><c> our</c><00:15:50.800><c> min</c><00:15:51.040><c> heap</c><00:15:51.440><c> and</c><00:15:51.680><c> pop</c>

00:15:51.990 --> 00:15:52.000 align:start position:0%
immediately go to our min heap and pop
 

00:15:52.000 --> 00:15:53.670 align:start position:0%
immediately go to our min heap and pop
and<00:15:52.320><c> get</c><00:15:52.480><c> the</c><00:15:52.639><c> smallest</c><00:15:53.120><c> one</c><00:15:53.360><c> it's</c><00:15:53.519><c> going</c><00:15:53.600><c> to</c>

00:15:53.670 --> 00:15:53.680 align:start position:0%
and get the smallest one it's going to
 

00:15:53.680 --> 00:15:54.710 align:start position:0%
and get the smallest one it's going to
be<00:15:53.920><c> this</c><00:15:54.160><c> one</c><00:15:54.399><c> right</c>

00:15:54.710 --> 00:15:54.720 align:start position:0%
be this one right
 

00:15:54.720 --> 00:15:56.710 align:start position:0%
be this one right
it's<00:15:54.880><c> going</c><00:15:54.959><c> to</c><00:15:55.040><c> be</c><00:15:55.360><c> 1</c><00:15:55.759><c> 4.</c><00:15:56.160><c> so</c><00:15:56.320><c> then</c><00:15:56.560><c> we're</c>

00:15:56.710 --> 00:15:56.720 align:start position:0%
it's going to be 1 4. so then we're
 

00:15:56.720 --> 00:15:58.949 align:start position:0%
it's going to be 1 4. so then we're
going<00:15:56.800><c> to</c><00:15:56.880><c> end</c><00:15:57.040><c> up</c><00:15:57.199><c> adding</c><00:15:57.680><c> a</c><00:15:58.000><c> 1</c><00:15:58.320><c> over</c><00:15:58.560><c> here</c><00:15:58.720><c> but</c>

00:15:58.949 --> 00:15:58.959 align:start position:0%
going to end up adding a 1 over here but
 

00:15:58.959 --> 00:16:00.870 align:start position:0%
going to end up adding a 1 over here but
is<00:15:59.120><c> that</c><00:15:59.440><c> correct</c><00:16:00.000><c> let's</c><00:16:00.160><c> take</c><00:16:00.399><c> a</c><00:16:00.480><c> look</c><00:16:00.639><c> at</c><00:16:00.720><c> the</c>

00:16:00.870 --> 00:16:00.880 align:start position:0%
is that correct let's take a look at the
 

00:16:00.880 --> 00:16:01.749 align:start position:0%
is that correct let's take a look at the
picture

00:16:01.749 --> 00:16:01.759 align:start position:0%
picture
 

00:16:01.759 --> 00:16:04.870 align:start position:0%
picture
does<00:16:02.560><c> this</c><00:16:03.040><c> query</c><00:16:03.759><c> belong</c>

00:16:04.870 --> 00:16:04.880 align:start position:0%
does this query belong
 

00:16:04.880 --> 00:16:07.749 align:start position:0%
does this query belong
to<00:16:05.120><c> the</c><00:16:05.440><c> interval</c><00:16:06.000><c> of</c><00:16:06.320><c> size</c><00:16:06.880><c> 1</c><00:16:07.279><c> it</c><00:16:07.440><c> doesn't</c>

00:16:07.749 --> 00:16:07.759 align:start position:0%
to the interval of size 1 it doesn't
 

00:16:07.759 --> 00:16:07.990 align:start position:0%
to the interval of size 1 it doesn't
like

00:16:07.990 --> 00:16:08.000 align:start position:0%
like
 

00:16:08.000 --> 00:16:10.069 align:start position:0%
like
look<00:16:08.240><c> at</c><00:16:08.320><c> this</c><00:16:08.639><c> right</c><00:16:08.959><c> if</c><00:16:09.120><c> you</c><00:16:09.199><c> go</c><00:16:09.440><c> vertically</c>

00:16:10.069 --> 00:16:10.079 align:start position:0%
look at this right if you go vertically
 

00:16:10.079 --> 00:16:11.189 align:start position:0%
look at this right if you go vertically
there's<00:16:10.320><c> only</c><00:16:10.800><c> one</c>

00:16:11.189 --> 00:16:11.199 align:start position:0%
there's only one
 

00:16:11.199 --> 00:16:13.749 align:start position:0%
there's only one
interval<00:16:11.759><c> that</c><00:16:12.000><c> this</c><00:16:12.240><c> query</c><00:16:12.639><c> belongs</c><00:16:13.120><c> to</c><00:16:13.440><c> so</c>

00:16:13.749 --> 00:16:13.759 align:start position:0%
interval that this query belongs to so
 

00:16:13.759 --> 00:16:14.230 align:start position:0%
interval that this query belongs to so
now

00:16:14.230 --> 00:16:14.240 align:start position:0%
now
 

00:16:14.240 --> 00:16:16.389 align:start position:0%
now
we're<00:16:14.399><c> going</c><00:16:14.480><c> to</c><00:16:14.560><c> get</c><00:16:14.800><c> to</c><00:16:15.040><c> the</c><00:16:15.519><c> the</c><00:16:15.839><c> other</c><00:16:16.079><c> part</c>

00:16:16.389 --> 00:16:16.399 align:start position:0%
we're going to get to the the other part
 

00:16:16.399 --> 00:16:18.230 align:start position:0%
we're going to get to the the other part
of<00:16:16.480><c> this</c><00:16:16.800><c> algorithm</c><00:16:17.279><c> that</c><00:16:17.440><c> i</c><00:16:17.519><c> didn't</c><00:16:17.839><c> show</c><00:16:18.000><c> you</c>

00:16:18.230 --> 00:16:18.240 align:start position:0%
of this algorithm that i didn't show you
 

00:16:18.240 --> 00:16:18.870 align:start position:0%
of this algorithm that i didn't show you
yet

00:16:18.870 --> 00:16:18.880 align:start position:0%
yet
 

00:16:18.880 --> 00:16:21.590 align:start position:0%
yet
every<00:16:19.360><c> time</c><00:16:20.079><c> we're</c><00:16:20.399><c> getting</c><00:16:20.800><c> the</c><00:16:21.040><c> smallest</c>

00:16:21.590 --> 00:16:21.600 align:start position:0%
every time we're getting the smallest
 

00:16:21.600 --> 00:16:23.670 align:start position:0%
every time we're getting the smallest
interval<00:16:21.920><c> that</c><00:16:22.079><c> a</c><00:16:22.240><c> query</c><00:16:22.639><c> belongs</c><00:16:23.120><c> to</c>

00:16:23.670 --> 00:16:23.680 align:start position:0%
interval that a query belongs to
 

00:16:23.680 --> 00:16:26.790 align:start position:0%
interval that a query belongs to
first<00:16:24.079><c> we</c><00:16:24.320><c> have</c><00:16:24.480><c> to</c><00:16:24.720><c> make</c><00:16:24.959><c> sure</c><00:16:25.199><c> we</c><00:16:25.519><c> remove</c>

00:16:26.790 --> 00:16:26.800 align:start position:0%
first we have to make sure we remove
 

00:16:26.800 --> 00:16:29.990 align:start position:0%
first we have to make sure we remove
all<00:16:27.360><c> invalid</c><00:16:28.560><c> queries</c><00:16:29.440><c> from</c>

00:16:29.990 --> 00:16:30.000 align:start position:0%
all invalid queries from
 

00:16:30.000 --> 00:16:33.590 align:start position:0%
all invalid queries from
or<00:16:30.320><c> rather</c><00:16:30.800><c> remove</c><00:16:31.440><c> all</c><00:16:31.839><c> invalid</c><00:16:32.880><c> intervals</c>

00:16:33.590 --> 00:16:33.600 align:start position:0%
or rather remove all invalid intervals
 

00:16:33.600 --> 00:16:35.110 align:start position:0%
or rather remove all invalid intervals
from<00:16:33.839><c> the</c><00:16:34.000><c> query</c><00:16:34.399><c> before</c><00:16:34.720><c> we</c><00:16:34.880><c> get</c><00:16:35.040><c> the</c>

00:16:35.110 --> 00:16:35.120 align:start position:0%
from the query before we get the
 

00:16:35.120 --> 00:16:37.269 align:start position:0%
from the query before we get the
smallest<00:16:35.680><c> one</c><00:16:36.160><c> for</c><00:16:36.399><c> a</c><00:16:36.560><c> query</c>

00:16:37.269 --> 00:16:37.279 align:start position:0%
smallest one for a query
 

00:16:37.279 --> 00:16:39.350 align:start position:0%
smallest one for a query
and<00:16:37.440><c> take</c><00:16:37.600><c> a</c><00:16:37.680><c> look</c><00:16:37.920><c> at</c><00:16:38.240><c> this</c><00:16:38.560><c> interval</c><00:16:38.959><c> right</c>

00:16:39.350 --> 00:16:39.360 align:start position:0%
and take a look at this interval right
 

00:16:39.360 --> 00:16:41.110 align:start position:0%
and take a look at this interval right
so<00:16:39.759><c> basically</c><00:16:40.240><c> what</c><00:16:40.399><c> we're</c><00:16:40.560><c> going</c><00:16:40.639><c> to</c><00:16:40.800><c> do</c>

00:16:41.110 --> 00:16:41.120 align:start position:0%
so basically what we're going to do
 

00:16:41.120 --> 00:16:42.949 align:start position:0%
so basically what we're going to do
is<00:16:41.440><c> for</c><00:16:41.600><c> this</c><00:16:41.839><c> min</c><00:16:42.079><c> heap</c><00:16:42.320><c> we're</c><00:16:42.480><c> going</c><00:16:42.560><c> to</c><00:16:42.720><c> get</c>

00:16:42.949 --> 00:16:42.959 align:start position:0%
is for this min heap we're going to get
 

00:16:42.959 --> 00:16:44.710 align:start position:0%
is for this min heap we're going to get
the<00:16:43.199><c> size</c><00:16:43.519><c> we're</c><00:16:43.680><c> going</c><00:16:43.759><c> to</c><00:16:43.839><c> get</c><00:16:43.920><c> the</c><00:16:44.079><c> smallest</c>

00:16:44.710 --> 00:16:44.720 align:start position:0%
the size we're going to get the smallest
 

00:16:44.720 --> 00:16:45.350 align:start position:0%
the size we're going to get the smallest
interval

00:16:45.350 --> 00:16:45.360 align:start position:0%
interval
 

00:16:45.360 --> 00:16:47.110 align:start position:0%
interval
from<00:16:45.600><c> that</c><00:16:45.759><c> min</c><00:16:46.000><c> heap</c><00:16:46.240><c> right</c><00:16:46.560><c> it</c><00:16:46.639><c> turns</c><00:16:46.959><c> out</c>

00:16:47.110 --> 00:16:47.120 align:start position:0%
from that min heap right it turns out
 

00:16:47.120 --> 00:16:48.870 align:start position:0%
from that min heap right it turns out
that<00:16:47.279><c> this</c><00:16:47.440><c> is</c><00:16:47.519><c> the</c><00:16:47.680><c> smallest</c><00:16:48.079><c> one</c><00:16:48.320><c> as</c><00:16:48.480><c> of</c><00:16:48.639><c> now</c>

00:16:48.870 --> 00:16:48.880 align:start position:0%
that this is the smallest one as of now
 

00:16:48.880 --> 00:16:51.110 align:start position:0%
that this is the smallest one as of now
let's<00:16:49.120><c> take</c><00:16:49.360><c> a</c><00:16:49.519><c> look</c><00:16:49.839><c> at</c><00:16:50.079><c> that</c><00:16:50.399><c> interval</c>

00:16:51.110 --> 00:16:51.120 align:start position:0%
let's take a look at that interval
 

00:16:51.120 --> 00:16:53.910 align:start position:0%
let's take a look at that interval
well<00:16:51.600><c> the</c><00:16:52.000><c> right</c><00:16:52.399><c> value</c><00:16:52.959><c> of</c><00:16:53.120><c> this</c><00:16:53.360><c> interval</c>

00:16:53.910 --> 00:16:53.920 align:start position:0%
well the right value of this interval
 

00:16:53.920 --> 00:16:54.230 align:start position:0%
well the right value of this interval
and

00:16:54.230 --> 00:16:54.240 align:start position:0%
and
 

00:16:54.240 --> 00:16:56.629 align:start position:0%
and
by<00:16:54.399><c> the</c><00:16:54.560><c> way</c><00:16:55.040><c> remember</c><00:16:55.440><c> we</c><00:16:55.759><c> added</c><00:16:56.240><c> the</c><00:16:56.399><c> right</c>

00:16:56.629 --> 00:16:56.639 align:start position:0%
by the way remember we added the right
 

00:16:56.639 --> 00:16:58.550 align:start position:0%
by the way remember we added the right
value<00:16:57.040><c> to</c><00:16:57.199><c> the</c><00:16:57.279><c> min</c><00:16:57.519><c> heap</c><00:16:57.759><c> there's</c><00:16:58.000><c> a</c><00:16:58.079><c> reason</c>

00:16:58.550 --> 00:16:58.560 align:start position:0%
value to the min heap there's a reason
 

00:16:58.560 --> 00:17:00.230 align:start position:0%
value to the min heap there's a reason
why<00:16:58.800><c> we</c><00:16:58.959><c> did</c><00:16:59.199><c> it</c><00:16:59.360><c> this</c><00:16:59.519><c> is</c><00:16:59.680><c> one</c><00:16:59.839><c> of</c><00:16:59.920><c> those</c>

00:17:00.230 --> 00:17:00.240 align:start position:0%
why we did it this is one of those
 

00:17:00.240 --> 00:17:02.389 align:start position:0%
why we did it this is one of those
reasons<00:17:00.800><c> we</c><00:17:01.120><c> added</c><00:17:01.360><c> the</c><00:17:01.600><c> right</c><00:17:01.839><c> value</c><00:17:02.160><c> to</c><00:17:02.320><c> the</c>

00:17:02.389 --> 00:17:02.399 align:start position:0%
reasons we added the right value to the
 

00:17:02.399 --> 00:17:03.590 align:start position:0%
reasons we added the right value to the
min<00:17:02.560><c> heap</c><00:17:02.880><c> it's</c><00:17:03.199><c> four</c>

00:17:03.590 --> 00:17:03.600 align:start position:0%
min heap it's four
 

00:17:03.600 --> 00:17:07.189 align:start position:0%
min heap it's four
right<00:17:04.240><c> four</c><00:17:04.880><c> is</c><00:17:05.280><c> less</c><00:17:05.919><c> than</c><00:17:06.400><c> five</c><00:17:06.799><c> right</c>

00:17:07.189 --> 00:17:07.199 align:start position:0%
right four is less than five right
 

00:17:07.199 --> 00:17:09.590 align:start position:0%
right four is less than five right
that<00:17:07.360><c> means</c><00:17:07.760><c> for</c><00:17:07.919><c> example</c><00:17:08.400><c> for</c><00:17:08.720><c> five</c><00:17:09.120><c> we</c><00:17:09.439><c> we</c>

00:17:09.590 --> 00:17:09.600 align:start position:0%
that means for example for five we we
 

00:17:09.600 --> 00:17:11.350 align:start position:0%
that means for example for five we we
might<00:17:09.760><c> have</c><00:17:09.919><c> like</c><00:17:10.079><c> an</c><00:17:10.240><c> interval</c><00:17:10.640><c> like</c><00:17:10.880><c> this</c>

00:17:11.350 --> 00:17:11.360 align:start position:0%
might have like an interval like this
 

00:17:11.360 --> 00:17:13.829 align:start position:0%
might have like an interval like this
where<00:17:11.679><c> the</c><00:17:11.919><c> interval</c><00:17:12.559><c> starts</c><00:17:13.039><c> and</c><00:17:13.280><c> ends</c>

00:17:13.829 --> 00:17:13.839 align:start position:0%
where the interval starts and ends
 

00:17:13.839 --> 00:17:14.949 align:start position:0%
where the interval starts and ends
before<00:17:14.319><c> we</c><00:17:14.559><c> even</c>

00:17:14.949 --> 00:17:14.959 align:start position:0%
before we even
 

00:17:14.959 --> 00:17:17.110 align:start position:0%
before we even
get<00:17:15.199><c> to</c><00:17:15.360><c> this</c><00:17:15.600><c> query</c><00:17:16.160><c> right</c><00:17:16.480><c> so</c><00:17:16.640><c> of</c><00:17:16.799><c> course</c>

00:17:17.110 --> 00:17:17.120 align:start position:0%
get to this query right so of course
 

00:17:17.120 --> 00:17:18.870 align:start position:0%
get to this query right so of course
we're<00:17:17.280><c> not</c><00:17:17.439><c> going</c><00:17:17.600><c> to</c><00:17:17.679><c> be</c><00:17:17.839><c> considering</c><00:17:18.559><c> this</c>

00:17:18.870 --> 00:17:18.880 align:start position:0%
we're not going to be considering this
 

00:17:18.880 --> 00:17:21.350 align:start position:0%
we're not going to be considering this
interval<00:17:19.760><c> so</c><00:17:20.000><c> now</c><00:17:20.480><c> we're</c><00:17:20.720><c> at</c><00:17:20.799><c> the</c><00:17:20.959><c> part</c><00:17:21.120><c> of</c><00:17:21.199><c> the</c>

00:17:21.350 --> 00:17:21.360 align:start position:0%
interval so now we're at the part of the
 

00:17:21.360 --> 00:17:22.870 align:start position:0%
interval so now we're at the part of the
algorithm<00:17:21.760><c> we're</c><00:17:21.919><c> going</c><00:17:22.000><c> to</c><00:17:22.240><c> loop</c>

00:17:22.870 --> 00:17:22.880 align:start position:0%
algorithm we're going to loop
 

00:17:22.880 --> 00:17:24.470 align:start position:0%
algorithm we're going to loop
for<00:17:23.120><c> every</c><00:17:23.679><c> we're</c><00:17:23.839><c> going</c><00:17:23.919><c> to</c><00:17:24.000><c> keep</c><00:17:24.240><c> getting</c>

00:17:24.470 --> 00:17:24.480 align:start position:0%
for every we're going to keep getting
 

00:17:24.480 --> 00:17:26.069 align:start position:0%
for every we're going to keep getting
the<00:17:24.720><c> smallest</c><00:17:25.199><c> interval</c><00:17:25.679><c> and</c>

00:17:26.069 --> 00:17:26.079 align:start position:0%
the smallest interval and
 

00:17:26.079 --> 00:17:28.470 align:start position:0%
the smallest interval and
while<00:17:26.720><c> the</c><00:17:27.039><c> right</c><00:17:27.360><c> value</c><00:17:27.760><c> of</c><00:17:27.839><c> that</c><00:17:28.079><c> interval</c>

00:17:28.470 --> 00:17:28.480 align:start position:0%
while the right value of that interval
 

00:17:28.480 --> 00:17:30.070 align:start position:0%
while the right value of that interval
is<00:17:28.799><c> less</c><00:17:29.120><c> than</c><00:17:29.280><c> the</c><00:17:29.520><c> query</c>

00:17:30.070 --> 00:17:30.080 align:start position:0%
is less than the query
 

00:17:30.080 --> 00:17:32.549 align:start position:0%
is less than the query
we're<00:17:30.240><c> going</c><00:17:30.400><c> to</c><00:17:30.480><c> be</c><00:17:30.640><c> removing</c><00:17:31.360><c> that</c><00:17:31.919><c> interval</c>

00:17:32.549 --> 00:17:32.559 align:start position:0%
we're going to be removing that interval
 

00:17:32.559 --> 00:17:33.990 align:start position:0%
we're going to be removing that interval
from<00:17:32.799><c> our</c><00:17:32.960><c> min</c><00:17:33.120><c> heap</c><00:17:33.360><c> so</c><00:17:33.520><c> right</c><00:17:33.679><c> now</c><00:17:33.840><c> we're</c>

00:17:33.990 --> 00:17:34.000 align:start position:0%
from our min heap so right now we're
 

00:17:34.000 --> 00:17:35.990 align:start position:0%
from our min heap so right now we're
going<00:17:34.080><c> to</c><00:17:34.160><c> be</c><00:17:34.320><c> removing</c><00:17:34.880><c> this</c><00:17:35.200><c> interval</c><00:17:35.679><c> right</c>

00:17:35.990 --> 00:17:36.000 align:start position:0%
going to be removing this interval right
 

00:17:36.000 --> 00:17:37.909 align:start position:0%
going to be removing this interval right
so<00:17:36.240><c> now</c><00:17:36.480><c> once</c><00:17:36.799><c> again</c><00:17:37.120><c> let's</c><00:17:37.360><c> find</c><00:17:37.679><c> the</c>

00:17:37.909 --> 00:17:37.919 align:start position:0%
so now once again let's find the
 

00:17:37.919 --> 00:17:39.909 align:start position:0%
so now once again let's find the
smallest<00:17:38.559><c> interval</c><00:17:39.039><c> in</c><00:17:39.200><c> our</c><00:17:39.280><c> min</c><00:17:39.520><c> heap</c>

00:17:39.909 --> 00:17:39.919 align:start position:0%
smallest interval in our min heap
 

00:17:39.919 --> 00:17:42.150 align:start position:0%
smallest interval in our min heap
it's<00:17:40.320><c> this</c><00:17:40.559><c> one</c><00:17:40.799><c> right</c><00:17:40.960><c> because</c><00:17:41.200><c> the</c><00:17:41.440><c> size</c><00:17:41.840><c> is</c>

00:17:42.150 --> 00:17:42.160 align:start position:0%
it's this one right because the size is
 

00:17:42.160 --> 00:17:44.310 align:start position:0%
it's this one right because the size is
3.<00:17:42.720><c> now</c><00:17:42.960><c> let's</c><00:17:43.120><c> take</c><00:17:43.280><c> a</c><00:17:43.360><c> look</c><00:17:43.600><c> at</c><00:17:43.760><c> the</c><00:17:44.080><c> right</c>

00:17:44.310 --> 00:17:44.320 align:start position:0%
3. now let's take a look at the right
 

00:17:44.320 --> 00:17:45.990 align:start position:0%
3. now let's take a look at the right
value<00:17:44.640><c> of</c><00:17:44.720><c> that</c><00:17:44.960><c> interval</c><00:17:45.280><c> once</c><00:17:45.520><c> again</c><00:17:45.760><c> it's</c>

00:17:45.990 --> 00:17:46.000 align:start position:0%
value of that interval once again it's
 

00:17:46.000 --> 00:17:49.830 align:start position:0%
value of that interval once again it's
4.<00:17:46.480><c> 4</c><00:17:46.880><c> is</c><00:17:47.200><c> less</c><00:17:47.440><c> than</c><00:17:47.760><c> 5</c><00:17:48.160><c> so</c><00:17:48.480><c> 5</c><00:17:48.799><c> does</c><00:17:49.039><c> not</c><00:17:49.280><c> belong</c>

00:17:49.830 --> 00:17:49.840 align:start position:0%
4. 4 is less than 5 so 5 does not belong
 

00:17:49.840 --> 00:17:51.029 align:start position:0%
4. 4 is less than 5 so 5 does not belong
to<00:17:50.000><c> this</c><00:17:50.240><c> interval</c><00:17:50.559><c> we're</c><00:17:50.720><c> going</c><00:17:50.799><c> to</c>

00:17:51.029 --> 00:17:51.039 align:start position:0%
to this interval we're going to
 

00:17:51.039 --> 00:17:53.830 align:start position:0%
to this interval we're going to
have<00:17:51.200><c> to</c><00:17:51.600><c> pop</c><00:17:52.240><c> from</c><00:17:52.559><c> this</c><00:17:52.880><c> interval</c><00:17:53.520><c> and</c><00:17:53.600><c> that</c>

00:17:53.830 --> 00:17:53.840 align:start position:0%
have to pop from this interval and that
 

00:17:53.840 --> 00:17:56.230 align:start position:0%
have to pop from this interval and that
makes<00:17:54.080><c> sense</c><00:17:54.400><c> right</c><00:17:54.640><c> because</c><00:17:54.960><c> this</c>

00:17:56.230 --> 00:17:56.240 align:start position:0%
makes sense right because this
 

00:17:56.240 --> 00:17:59.029 align:start position:0%
makes sense right because this
interval<00:17:56.799><c> is</c><00:17:56.960><c> size</c><00:17:57.360><c> 3</c><00:17:57.840><c> this</c><00:17:58.160><c> is</c><00:17:58.320><c> the</c><00:17:58.640><c> picture</c>

00:17:59.029 --> 00:17:59.039 align:start position:0%
interval is size 3 this is the picture
 

00:17:59.039 --> 00:18:00.150 align:start position:0%
interval is size 3 this is the picture
of<00:17:59.120><c> that</c><00:17:59.360><c> interval</c><00:17:59.760><c> right</c>

00:18:00.150 --> 00:18:00.160 align:start position:0%
of that interval right
 

00:18:00.160 --> 00:18:02.070 align:start position:0%
of that interval right
or<00:18:00.320><c> rather</c><00:18:00.640><c> this</c><00:18:00.960><c> is</c><00:18:01.039><c> the</c><00:18:01.200><c> picture</c><00:18:01.679><c> of</c><00:18:01.840><c> that</c>

00:18:02.070 --> 00:18:02.080 align:start position:0%
or rather this is the picture of that
 

00:18:02.080 --> 00:18:03.270 align:start position:0%
or rather this is the picture of that
interval<00:18:02.640><c> and</c><00:18:02.799><c> of</c><00:18:02.880><c> course</c>

00:18:03.270 --> 00:18:03.280 align:start position:0%
interval and of course
 

00:18:03.280 --> 00:18:04.710 align:start position:0%
interval and of course
five<00:18:03.520><c> does</c><00:18:03.679><c> not</c><00:18:03.840><c> belong</c><00:18:04.160><c> to</c><00:18:04.320><c> it</c><00:18:04.400><c> so</c><00:18:04.559><c> we're</c>

00:18:04.710 --> 00:18:04.720 align:start position:0%
five does not belong to it so we're
 

00:18:04.720 --> 00:18:06.390 align:start position:0%
five does not belong to it so we're
gonna<00:18:04.880><c> have</c><00:18:05.039><c> to</c><00:18:05.120><c> remove</c><00:18:05.520><c> this</c>

00:18:06.390 --> 00:18:06.400 align:start position:0%
gonna have to remove this
 

00:18:06.400 --> 00:18:08.950 align:start position:0%
gonna have to remove this
once<00:18:06.720><c> again</c><00:18:07.360><c> let's</c><00:18:07.760><c> get</c><00:18:07.919><c> the</c><00:18:08.160><c> smallest</c><00:18:08.799><c> from</c>

00:18:08.950 --> 00:18:08.960 align:start position:0%
once again let's get the smallest from
 

00:18:08.960 --> 00:18:09.909 align:start position:0%
once again let's get the smallest from
our<00:18:09.120><c> min</c><00:18:09.440><c> heap</c>

00:18:09.909 --> 00:18:09.919 align:start position:0%
our min heap
 

00:18:09.919 --> 00:18:12.310 align:start position:0%
our min heap
well<00:18:10.400><c> these</c><00:18:10.720><c> two</c><00:18:10.960><c> are</c><00:18:11.120><c> both</c><00:18:11.520><c> size</c><00:18:11.919><c> four</c><00:18:12.160><c> so</c>

00:18:12.310 --> 00:18:12.320 align:start position:0%
well these two are both size four so
 

00:18:12.320 --> 00:18:13.830 align:start position:0%
well these two are both size four so
which<00:18:12.480><c> one</c><00:18:12.640><c> are</c><00:18:12.720><c> we</c><00:18:12.880><c> gonna</c><00:18:13.120><c> pop</c><00:18:13.440><c> first</c>

00:18:13.830 --> 00:18:13.840 align:start position:0%
which one are we gonna pop first
 

00:18:13.840 --> 00:18:14.950 align:start position:0%
which one are we gonna pop first
remember<00:18:14.240><c> we</c><00:18:14.400><c> had</c><00:18:14.640><c> that</c>

00:18:14.950 --> 00:18:14.960 align:start position:0%
remember we had that
 

00:18:14.960 --> 00:18:16.870 align:start position:0%
remember we had that
tie<00:18:15.280><c> breaker</c><00:18:15.600><c> we</c><00:18:15.679><c> had</c><00:18:15.840><c> a</c><00:18:16.000><c> four</c><00:18:16.400><c> and</c><00:18:16.480><c> we</c><00:18:16.640><c> have</c><00:18:16.720><c> a</c>

00:18:16.870 --> 00:18:16.880 align:start position:0%
tie breaker we had a four and we have a
 

00:18:16.880 --> 00:18:18.470 align:start position:0%
tie breaker we had a four and we have a
six<00:18:17.200><c> which</c><00:18:17.360><c> one</c><00:18:17.520><c> are</c><00:18:17.600><c> we</c><00:18:17.760><c> gonna</c><00:18:17.919><c> pop</c><00:18:18.160><c> first</c><00:18:18.400><c> of</c>

00:18:18.470 --> 00:18:18.480 align:start position:0%
six which one are we gonna pop first of
 

00:18:18.480 --> 00:18:19.669 align:start position:0%
six which one are we gonna pop first of
course<00:18:18.720><c> the</c><00:18:18.880><c> smaller</c><00:18:19.360><c> one</c>

00:18:19.669 --> 00:18:19.679 align:start position:0%
course the smaller one
 

00:18:19.679 --> 00:18:22.150 align:start position:0%
course the smaller one
which<00:18:19.919><c> is</c><00:18:20.000><c> this</c><00:18:20.240><c> one</c><00:18:20.559><c> four</c><00:18:20.880><c> four</c><00:18:21.360><c> so</c><00:18:21.520><c> let's</c><00:18:21.919><c> pop</c>

00:18:22.150 --> 00:18:22.160 align:start position:0%
which is this one four four so let's pop
 

00:18:22.160 --> 00:18:23.830 align:start position:0%
which is this one four four so let's pop
it<00:18:22.400><c> we</c><00:18:22.559><c> see</c><00:18:22.720><c> the</c><00:18:22.960><c> right</c><00:18:23.200><c> value</c>

00:18:23.830 --> 00:18:23.840 align:start position:0%
it we see the right value
 

00:18:23.840 --> 00:18:25.830 align:start position:0%
it we see the right value
is<00:18:24.000><c> still</c><00:18:24.400><c> less</c><00:18:24.640><c> than</c><00:18:24.880><c> five</c><00:18:25.280><c> right</c><00:18:25.520><c> so</c><00:18:25.679><c> we're</c>

00:18:25.830 --> 00:18:25.840 align:start position:0%
is still less than five right so we're
 

00:18:25.840 --> 00:18:28.390 align:start position:0%
is still less than five right so we're
gonna<00:18:26.000><c> be</c><00:18:26.080><c> removing</c><00:18:26.720><c> this</c><00:18:27.039><c> from</c><00:18:27.280><c> our</c><00:18:27.440><c> min</c><00:18:27.679><c> heap</c>

00:18:28.390 --> 00:18:28.400 align:start position:0%
gonna be removing this from our min heap
 

00:18:28.400 --> 00:18:29.590 align:start position:0%
gonna be removing this from our min heap
right<00:18:28.559><c> so</c><00:18:28.720><c> when</c><00:18:28.960><c> you</c><00:18:29.039><c> take</c><00:18:29.200><c> a</c><00:18:29.280><c> look</c><00:18:29.440><c> at</c><00:18:29.520><c> the</c>

00:18:29.590 --> 00:18:29.600 align:start position:0%
right so when you take a look at the
 

00:18:29.600 --> 00:18:31.750 align:start position:0%
right so when you take a look at the
picture<00:18:30.000><c> at</c><00:18:30.160><c> this</c><00:18:30.400><c> point</c><00:18:30.640><c> we've</c><00:18:30.880><c> removed</c><00:18:31.520><c> this</c>

00:18:31.750 --> 00:18:31.760 align:start position:0%
picture at this point we've removed this
 

00:18:31.760 --> 00:18:33.270 align:start position:0%
picture at this point we've removed this
from<00:18:32.000><c> our</c><00:18:32.080><c> min</c><00:18:32.240><c> heap</c><00:18:32.480><c> we've</c><00:18:32.720><c> removed</c><00:18:33.120><c> this</c>

00:18:33.270 --> 00:18:33.280 align:start position:0%
from our min heap we've removed this
 

00:18:33.280 --> 00:18:34.230 align:start position:0%
from our min heap we've removed this
from<00:18:33.520><c> our</c><00:18:33.600><c> min</c><00:18:33.840><c> heap</c>

00:18:34.230 --> 00:18:34.240 align:start position:0%
from our min heap
 

00:18:34.240 --> 00:18:37.430 align:start position:0%
from our min heap
and<00:18:34.480><c> this</c><00:18:34.720><c> one</c><00:18:35.120><c> the</c><00:18:35.440><c> only</c><00:18:35.919><c> left</c><00:18:36.400><c> is</c><00:18:36.960><c> this</c>

00:18:37.430 --> 00:18:37.440 align:start position:0%
and this one the only left is this
 

00:18:37.440 --> 00:18:39.029 align:start position:0%
and this one the only left is this
interval<00:18:38.000><c> and</c><00:18:38.160><c> when</c><00:18:38.320><c> we</c><00:18:38.480><c> actually</c><00:18:38.720><c> take</c><00:18:38.960><c> a</c>

00:18:39.029 --> 00:18:39.039 align:start position:0%
interval and when we actually take a
 

00:18:39.039 --> 00:18:40.870 align:start position:0%
interval and when we actually take a
look<00:18:39.200><c> at</c><00:18:39.520><c> that</c><00:18:39.840><c> interval</c><00:18:40.400><c> 4</c>

00:18:40.870 --> 00:18:40.880 align:start position:0%
look at that interval 4
 

00:18:40.880 --> 00:18:42.789 align:start position:0%
look at that interval 4
6<00:18:41.280><c> we</c><00:18:41.440><c> see</c><00:18:41.600><c> the</c><00:18:41.919><c> right</c><00:18:42.240><c> value</c><00:18:42.559><c> of</c><00:18:42.640><c> that</c>

00:18:42.789 --> 00:18:42.799 align:start position:0%
6 we see the right value of that
 

00:18:42.799 --> 00:18:45.110 align:start position:0%
6 we see the right value of that
interval<00:18:43.200><c> is</c><00:18:43.360><c> 6</c><00:18:43.679><c> size</c><00:18:44.080><c> is</c><00:18:44.240><c> 4</c><00:18:44.559><c> but</c><00:18:44.720><c> the</c>

00:18:45.110 --> 00:18:45.120 align:start position:0%
interval is 6 size is 4 but the
 

00:18:45.120 --> 00:18:47.909 align:start position:0%
interval is 6 size is 4 but the
the<00:18:45.280><c> right</c><00:18:45.520><c> value</c><00:18:45.840><c> is</c><00:18:46.000><c> 6</c><00:18:46.480><c> and</c><00:18:46.640><c> that's</c><00:18:47.120><c> greater</c>

00:18:47.909 --> 00:18:47.919 align:start position:0%
the right value is 6 and that's greater
 

00:18:47.919 --> 00:18:48.230 align:start position:0%
the right value is 6 and that's greater
than

00:18:48.230 --> 00:18:48.240 align:start position:0%
than
 

00:18:48.240 --> 00:18:50.710 align:start position:0%
than
5<00:18:48.640><c> right</c><00:18:49.039><c> so</c><00:18:49.520><c> it's</c><00:18:49.760><c> greater</c><00:18:50.000><c> than</c><00:18:50.160><c> or</c><00:18:50.320><c> equal</c><00:18:50.559><c> to</c>

00:18:50.710 --> 00:18:50.720 align:start position:0%
5 right so it's greater than or equal to
 

00:18:50.720 --> 00:18:51.830 align:start position:0%
5 right so it's greater than or equal to
5.<00:18:50.960><c> so</c><00:18:51.200><c> of</c><00:18:51.360><c> course</c>

00:18:51.830 --> 00:18:51.840 align:start position:0%
5. so of course
 

00:18:51.840 --> 00:18:54.630 align:start position:0%
5. so of course
we're<00:18:52.080><c> going</c><00:18:52.240><c> to</c><00:18:52.320><c> be</c><00:18:53.440><c> this</c><00:18:53.679><c> inner</c><00:18:54.000><c> this</c><00:18:54.240><c> query</c>

00:18:54.630 --> 00:18:54.640 align:start position:0%
we're going to be this inner this query
 

00:18:54.640 --> 00:18:56.230 align:start position:0%
we're going to be this inner this query
does<00:18:54.880><c> belong</c><00:18:55.360><c> to</c><00:18:55.520><c> that</c><00:18:55.760><c> interval</c>

00:18:56.230 --> 00:18:56.240 align:start position:0%
does belong to that interval
 

00:18:56.240 --> 00:18:59.190 align:start position:0%
does belong to that interval
so<00:18:56.640><c> this</c><00:18:57.039><c> is</c><00:18:57.200><c> going</c><00:18:57.440><c> to</c><00:18:57.600><c> be</c><00:18:57.919><c> the</c><00:18:58.240><c> answer</c><00:18:59.039><c> for</c>

00:18:59.190 --> 00:18:59.200 align:start position:0%
so this is going to be the answer for
 

00:18:59.200 --> 00:19:00.630 align:start position:0%
so this is going to be the answer for
this<00:18:59.520><c> query</c><00:18:59.840><c> this</c><00:19:00.080><c> query</c>

00:19:00.630 --> 00:19:00.640 align:start position:0%
this query this query
 

00:19:00.640 --> 00:19:02.630 align:start position:0%
this query this query
the<00:19:00.880><c> smallest</c><00:19:01.360><c> interval</c><00:19:01.679><c> that</c><00:19:01.840><c> it</c><00:19:01.919><c> belongs</c><00:19:02.320><c> to</c>

00:19:02.630 --> 00:19:02.640 align:start position:0%
the smallest interval that it belongs to
 

00:19:02.640 --> 00:19:03.750 align:start position:0%
the smallest interval that it belongs to
is<00:19:02.799><c> of</c><00:19:03.039><c> size</c>

00:19:03.750 --> 00:19:03.760 align:start position:0%
is of size
 

00:19:03.760 --> 00:19:06.310 align:start position:0%
is of size
4<00:19:04.400><c> and</c><00:19:04.640><c> this</c><00:19:05.200><c> this</c><00:19:05.440><c> happens</c><00:19:05.840><c> to</c><00:19:05.919><c> be</c><00:19:06.080><c> that</c>

00:19:06.310 --> 00:19:06.320 align:start position:0%
4 and this this happens to be that
 

00:19:06.320 --> 00:19:08.070 align:start position:0%
4 and this this happens to be that
specific<00:19:06.960><c> interval</c><00:19:07.360><c> so</c><00:19:07.520><c> that's</c><00:19:07.840><c> what</c><00:19:07.919><c> we're</c>

00:19:08.070 --> 00:19:08.080 align:start position:0%
specific interval so that's what we're
 

00:19:08.080 --> 00:19:09.110 align:start position:0%
specific interval so that's what we're
going<00:19:08.160><c> to</c><00:19:08.240><c> be</c><00:19:08.400><c> ending</c><00:19:08.720><c> up</c>

00:19:09.110 --> 00:19:09.120 align:start position:0%
going to be ending up
 

00:19:09.120 --> 00:19:12.390 align:start position:0%
going to be ending up
adding<00:19:09.679><c> to</c><00:19:10.080><c> our</c><00:19:10.480><c> output</c><00:19:11.120><c> for</c><00:19:11.360><c> this</c><00:19:11.600><c> query</c>

00:19:12.390 --> 00:19:12.400 align:start position:0%
adding to our output for this query
 

00:19:12.400 --> 00:19:14.230 align:start position:0%
adding to our output for this query
so<00:19:12.640><c> this</c><00:19:12.799><c> really</c><00:19:13.120><c> isn't</c><00:19:13.360><c> that</c><00:19:13.679><c> easy</c><00:19:13.919><c> of</c><00:19:14.080><c> a</c>

00:19:14.230 --> 00:19:14.240 align:start position:0%
so this really isn't that easy of a
 

00:19:14.240 --> 00:19:15.990 align:start position:0%
so this really isn't that easy of a
problem<00:19:14.640><c> once</c><00:19:14.880><c> you</c><00:19:15.039><c> can</c><00:19:15.120><c> write</c><00:19:15.360><c> the</c><00:19:15.520><c> code</c><00:19:15.919><c> the</c>

00:19:15.990 --> 00:19:16.000 align:start position:0%
problem once you can write the code the
 

00:19:16.000 --> 00:19:18.070 align:start position:0%
problem once you can write the code the
code<00:19:16.320><c> isn't</c><00:19:16.559><c> too</c><00:19:16.720><c> bad</c><00:19:16.960><c> but</c><00:19:17.200><c> actually</c><00:19:17.600><c> figuring</c>

00:19:18.070 --> 00:19:18.080 align:start position:0%
code isn't too bad but actually figuring
 

00:19:18.080 --> 00:19:18.549 align:start position:0%
code isn't too bad but actually figuring
out

00:19:18.549 --> 00:19:18.559 align:start position:0%
out
 

00:19:18.559 --> 00:19:20.390 align:start position:0%
out
that<00:19:18.720><c> you</c><00:19:18.960><c> can</c><00:19:19.360><c> you</c><00:19:19.520><c> know</c><00:19:19.679><c> do</c><00:19:19.840><c> all</c><00:19:20.000><c> this</c><00:19:20.160><c> stuff</c>

00:19:20.390 --> 00:19:20.400 align:start position:0%
that you can you know do all this stuff
 

00:19:20.400 --> 00:19:22.230 align:start position:0%
that you can you know do all this stuff
there's<00:19:20.640><c> some</c><00:19:21.039><c> pretty</c>

00:19:22.230 --> 00:19:22.240 align:start position:0%
there's some pretty
 

00:19:22.240 --> 00:19:23.750 align:start position:0%
there's some pretty
neat<00:19:22.480><c> edge</c><00:19:22.720><c> cases</c><00:19:23.120><c> that</c><00:19:23.280><c> you</c><00:19:23.360><c> have</c><00:19:23.440><c> to</c><00:19:23.520><c> worry</c>

00:19:23.750 --> 00:19:23.760 align:start position:0%
neat edge cases that you have to worry
 

00:19:23.760 --> 00:19:24.870 align:start position:0%
neat edge cases that you have to worry
about<00:19:23.919><c> you</c><00:19:24.080><c> really</c><00:19:24.320><c> have</c><00:19:24.400><c> to</c><00:19:24.480><c> get</c><00:19:24.640><c> those</c>

00:19:24.870 --> 00:19:24.880 align:start position:0%
about you really have to get those
 

00:19:24.880 --> 00:19:25.830 align:start position:0%
about you really have to get those
conditions<00:19:25.440><c> right</c>

00:19:25.830 --> 00:19:25.840 align:start position:0%
conditions right
 

00:19:25.840 --> 00:19:27.430 align:start position:0%
conditions right
greater<00:19:26.080><c> than</c><00:19:26.240><c> or</c><00:19:26.400><c> equal</c><00:19:26.640><c> less</c><00:19:26.880><c> than</c><00:19:27.039><c> or</c><00:19:27.200><c> equal</c>

00:19:27.430 --> 00:19:27.440 align:start position:0%
greater than or equal less than or equal
 

00:19:27.440 --> 00:19:28.870 align:start position:0%
greater than or equal less than or equal
right<00:19:27.679><c> you</c><00:19:27.919><c> really</c><00:19:28.160><c> have</c><00:19:28.240><c> to</c><00:19:28.320><c> make</c><00:19:28.480><c> sure</c>

00:19:28.870 --> 00:19:28.880 align:start position:0%
right you really have to make sure
 

00:19:28.880 --> 00:19:31.990 align:start position:0%
right you really have to make sure
that<00:19:29.039><c> your</c><00:19:29.280><c> off</c><00:19:29.520><c> by</c><00:19:29.760><c> one</c><00:19:30.000><c> errors</c><00:19:30.799><c> are</c><00:19:31.120><c> correct</c>

00:19:31.990 --> 00:19:32.000 align:start position:0%
that your off by one errors are correct
 

00:19:32.000 --> 00:19:34.070 align:start position:0%
that your off by one errors are correct
so<00:19:32.240><c> that</c><00:19:32.400><c> was</c><00:19:32.559><c> a</c><00:19:32.799><c> pretty</c><00:19:33.120><c> long</c><00:19:33.440><c> explanation</c>

00:19:34.070 --> 00:19:34.080 align:start position:0%
so that was a pretty long explanation
 

00:19:34.080 --> 00:19:35.750 align:start position:0%
so that was a pretty long explanation
but<00:19:34.240><c> i</c><00:19:34.320><c> hope</c><00:19:34.480><c> that</c><00:19:34.640><c> it</c><00:19:34.799><c> does</c><00:19:35.039><c> provide</c><00:19:35.520><c> a</c><00:19:35.600><c> little</c>

00:19:35.750 --> 00:19:35.760 align:start position:0%
but i hope that it does provide a little
 

00:19:35.760 --> 00:19:37.510 align:start position:0%
but i hope that it does provide a little
bit<00:19:35.919><c> of</c><00:19:36.160><c> insight</c><00:19:36.720><c> i</c><00:19:36.799><c> would</c><00:19:37.039><c> kind</c><00:19:37.280><c> of</c>

00:19:37.510 --> 00:19:37.520 align:start position:0%
bit of insight i would kind of
 

00:19:37.520 --> 00:19:39.590 align:start position:0%
bit of insight i would kind of
walk<00:19:37.840><c> yourself</c><00:19:38.559><c> through</c><00:19:38.960><c> a</c><00:19:39.039><c> couple</c><00:19:39.360><c> more</c>

00:19:39.590 --> 00:19:39.600 align:start position:0%
walk yourself through a couple more
 

00:19:39.600 --> 00:19:41.029 align:start position:0%
walk yourself through a couple more
examples<00:19:40.080><c> if</c><00:19:40.160><c> you</c><00:19:40.320><c> need</c><00:19:40.559><c> to</c>

00:19:41.029 --> 00:19:41.039 align:start position:0%
examples if you need to
 

00:19:41.039 --> 00:19:42.870 align:start position:0%
examples if you need to
and<00:19:41.280><c> as</c><00:19:41.440><c> well</c><00:19:41.679><c> as</c><00:19:41.919><c> study</c><00:19:42.240><c> some</c><00:19:42.400><c> of</c><00:19:42.480><c> the</c><00:19:42.640><c> code</c>

00:19:42.870 --> 00:19:42.880 align:start position:0%
and as well as study some of the code
 

00:19:42.880 --> 00:19:45.029 align:start position:0%
and as well as study some of the code
that<00:19:43.039><c> i'm</c><00:19:43.120><c> about</c><00:19:43.360><c> to</c><00:19:43.520><c> show</c><00:19:43.679><c> you</c><00:19:43.919><c> right</c><00:19:44.160><c> now</c>

00:19:45.029 --> 00:19:45.039 align:start position:0%
that i'm about to show you right now
 

00:19:45.039 --> 00:19:46.870 align:start position:0%
that i'm about to show you right now
so<00:19:45.200><c> like</c><00:19:45.440><c> i</c><00:19:45.600><c> said</c><00:19:45.760><c> we're</c><00:19:45.919><c> going</c><00:19:46.000><c> to</c><00:19:46.080><c> be</c><00:19:46.320><c> sorting</c>

00:19:46.870 --> 00:19:46.880 align:start position:0%
so like i said we're going to be sorting
 

00:19:46.880 --> 00:19:48.630 align:start position:0%
so like i said we're going to be sorting
our<00:19:47.280><c> intervals</c><00:19:47.919><c> and</c><00:19:48.160><c> we're</c><00:19:48.320><c> going</c><00:19:48.400><c> to</c><00:19:48.480><c> be</c>

00:19:48.630 --> 00:19:48.640 align:start position:0%
our intervals and we're going to be
 

00:19:48.640 --> 00:19:49.110 align:start position:0%
our intervals and we're going to be
sorting

00:19:49.110 --> 00:19:49.120 align:start position:0%
sorting
 

00:19:49.120 --> 00:19:52.150 align:start position:0%
sorting
our<00:19:49.360><c> queries</c><00:19:50.400><c> but</c><00:19:50.720><c> i'm</c><00:19:50.960><c> going</c><00:19:51.200><c> to</c><00:19:51.440><c> be</c>

00:19:52.150 --> 00:19:52.160 align:start position:0%
our queries but i'm going to be
 

00:19:52.160 --> 00:19:54.710 align:start position:0%
our queries but i'm going to be
uh<00:19:52.720><c> remember</c><00:19:53.120><c> we</c><00:19:53.200><c> do</c><00:19:53.440><c> need</c><00:19:53.679><c> the</c><00:19:54.080><c> original</c>

00:19:54.710 --> 00:19:54.720 align:start position:0%
uh remember we do need the original
 

00:19:54.720 --> 00:19:56.710 align:start position:0%
uh remember we do need the original
relative<00:19:55.200><c> order</c><00:19:55.600><c> of</c><00:19:55.679><c> the</c><00:19:55.840><c> query</c><00:19:56.240><c> so</c><00:19:56.400><c> i'm</c><00:19:56.480><c> not</c>

00:19:56.710 --> 00:19:56.720 align:start position:0%
relative order of the query so i'm not
 

00:19:56.720 --> 00:19:57.990 align:start position:0%
relative order of the query so i'm not
actually<00:19:56.960><c> going</c><00:19:57.039><c> to</c><00:19:57.120><c> be</c><00:19:57.280><c> modifying</c><00:19:57.840><c> the</c>

00:19:57.990 --> 00:19:58.000 align:start position:0%
actually going to be modifying the
 

00:19:58.000 --> 00:20:00.230 align:start position:0%
actually going to be modifying the
queries<00:19:58.480><c> itself</c><00:19:58.960><c> i'm</c><00:19:59.120><c> just</c><00:19:59.360><c> going</c><00:19:59.520><c> to</c><00:19:59.600><c> be</c>

00:20:00.230 --> 00:20:00.240 align:start position:0%
queries itself i'm just going to be
 

00:20:00.240 --> 00:20:03.350 align:start position:0%
queries itself i'm just going to be
modifying<00:20:01.360><c> it</c><00:20:01.600><c> for</c><00:20:01.919><c> this</c><00:20:02.240><c> loop</c><00:20:02.559><c> so</c><00:20:02.799><c> when</c><00:20:02.960><c> i</c><00:20:03.039><c> do</c>

00:20:03.350 --> 00:20:03.360 align:start position:0%
modifying it for this loop so when i do
 

00:20:03.360 --> 00:20:05.909 align:start position:0%
modifying it for this loop so when i do
this<00:20:03.919><c> in</c><00:20:04.159><c> python</c><00:20:04.960><c> it's</c><00:20:05.200><c> not</c><00:20:05.440><c> actually</c>

00:20:05.909 --> 00:20:05.919 align:start position:0%
this in python it's not actually
 

00:20:05.919 --> 00:20:07.909 align:start position:0%
this in python it's not actually
updating<00:20:06.320><c> the</c><00:20:06.559><c> original</c><00:20:07.039><c> array</c><00:20:07.360><c> queries</c><00:20:07.760><c> it's</c>

00:20:07.909 --> 00:20:07.919 align:start position:0%
updating the original array queries it's
 

00:20:07.919 --> 00:20:09.909 align:start position:0%
updating the original array queries it's
just<00:20:08.080><c> that</c><00:20:08.240><c> it's</c><00:20:08.559><c> creating</c><00:20:08.960><c> a</c><00:20:09.200><c> copy</c><00:20:09.679><c> of</c>

00:20:09.909 --> 00:20:09.919 align:start position:0%
just that it's creating a copy of
 

00:20:09.919 --> 00:20:11.430 align:start position:0%
just that it's creating a copy of
queries<00:20:10.400><c> sorting</c><00:20:10.799><c> it</c><00:20:10.960><c> and</c><00:20:11.039><c> then</c><00:20:11.200><c> we're</c>

00:20:11.430 --> 00:20:11.440 align:start position:0%
queries sorting it and then we're
 

00:20:11.440 --> 00:20:12.710 align:start position:0%
queries sorting it and then we're
iterating<00:20:12.000><c> through</c><00:20:12.320><c> it</c>

00:20:12.710 --> 00:20:12.720 align:start position:0%
iterating through it
 

00:20:12.720 --> 00:20:15.590 align:start position:0%
iterating through it
like<00:20:13.200><c> this</c><00:20:14.080><c> so</c><00:20:14.240><c> there's</c><00:20:14.559><c> that</c><00:20:14.880><c> but</c><00:20:15.200><c> also</c>

00:20:15.590 --> 00:20:15.600 align:start position:0%
like this so there's that but also
 

00:20:15.600 --> 00:20:17.510 align:start position:0%
like this so there's that but also
remember<00:20:16.000><c> that</c><00:20:16.240><c> we</c><00:20:16.480><c> are</c><00:20:16.640><c> going</c><00:20:16.799><c> to</c><00:20:16.960><c> be</c><00:20:17.120><c> needing</c>

00:20:17.510 --> 00:20:17.520 align:start position:0%
remember that we are going to be needing
 

00:20:17.520 --> 00:20:17.830 align:start position:0%
remember that we are going to be needing
a

00:20:17.830 --> 00:20:17.840 align:start position:0%
a
 

00:20:17.840 --> 00:20:20.950 align:start position:0%
a
min<00:20:18.159><c> heap</c><00:20:18.559><c> as</c><00:20:18.799><c> i</c><00:20:18.960><c> mentioned</c><00:20:19.760><c> and</c><00:20:20.000><c> in</c><00:20:20.159><c> python</c><00:20:20.799><c> a</c>

00:20:20.950 --> 00:20:20.960 align:start position:0%
min heap as i mentioned and in python a
 

00:20:20.960 --> 00:20:22.870 align:start position:0%
min heap as i mentioned and in python a
min<00:20:21.120><c> heap</c><00:20:21.440><c> is</c><00:20:21.520><c> just</c><00:20:21.679><c> an</c><00:20:21.840><c> array</c><00:20:22.240><c> but</c><00:20:22.559><c> we</c><00:20:22.799><c> are</c>

00:20:22.870 --> 00:20:22.880 align:start position:0%
min heap is just an array but we are
 

00:20:22.880 --> 00:20:23.909 align:start position:0%
min heap is just an array but we are
going<00:20:23.039><c> to</c><00:20:23.200><c> have</c><00:20:23.520><c> a</c>

00:20:23.909 --> 00:20:23.919 align:start position:0%
going to have a
 

00:20:23.919 --> 00:20:26.870 align:start position:0%
going to have a
min<00:20:24.159><c> heap</c><00:20:24.480><c> class</c><00:20:25.280><c> that</c><00:20:25.520><c> is</c><00:20:25.600><c> going</c><00:20:25.760><c> to</c><00:20:25.840><c> help</c><00:20:26.080><c> us</c>

00:20:26.870 --> 00:20:26.880 align:start position:0%
min heap class that is going to help us
 

00:20:26.880 --> 00:20:29.430 align:start position:0%
min heap class that is going to help us
i'm<00:20:27.120><c> also</c><00:20:27.360><c> going</c><00:20:27.440><c> to</c><00:20:27.600><c> have</c><00:20:27.840><c> a</c><00:20:28.000><c> resulting</c>

00:20:29.430 --> 00:20:29.440 align:start position:0%
i'm also going to have a resulting
 

00:20:29.440 --> 00:20:32.630 align:start position:0%
i'm also going to have a resulting
uh<00:20:30.159><c> data</c><00:20:30.400><c> structure</c><00:20:30.960><c> and</c><00:20:31.200><c> an</c><00:20:31.440><c> index</c><00:20:32.000><c> i</c><00:20:32.400><c> i</c>

00:20:32.630 --> 00:20:32.640 align:start position:0%
uh data structure and an index i i
 

00:20:32.640 --> 00:20:33.909 align:start position:0%
uh data structure and an index i i
is<00:20:32.880><c> basically</c><00:20:33.280><c> going</c><00:20:33.360><c> to</c><00:20:33.440><c> tell</c><00:20:33.600><c> us</c><00:20:33.760><c> the</c>

00:20:33.909 --> 00:20:33.919 align:start position:0%
is basically going to tell us the
 

00:20:33.919 --> 00:20:35.830 align:start position:0%
is basically going to tell us the
position<00:20:34.320><c> that</c><00:20:34.480><c> we're</c><00:20:34.640><c> at</c><00:20:34.880><c> in</c><00:20:35.039><c> our</c><00:20:35.280><c> intervals</c>

00:20:35.830 --> 00:20:35.840 align:start position:0%
position that we're at in our intervals
 

00:20:35.840 --> 00:20:36.789 align:start position:0%
position that we're at in our intervals
array

00:20:36.789 --> 00:20:36.799 align:start position:0%
array
 

00:20:36.799 --> 00:20:38.710 align:start position:0%
array
but<00:20:37.120><c> result</c><00:20:37.679><c> is</c><00:20:37.840><c> actually</c><00:20:38.080><c> not</c><00:20:38.240><c> going</c><00:20:38.400><c> to</c><00:20:38.480><c> be</c>

00:20:38.710 --> 00:20:38.720 align:start position:0%
but result is actually not going to be
 

00:20:38.720 --> 00:20:40.470 align:start position:0%
but result is actually not going to be
an<00:20:38.880><c> array</c><00:20:39.360><c> it's</c><00:20:39.520><c> initially</c><00:20:39.919><c> going</c><00:20:40.080><c> to</c><00:20:40.159><c> be</c>

00:20:40.470 --> 00:20:40.480 align:start position:0%
an array it's initially going to be
 

00:20:40.480 --> 00:20:42.390 align:start position:0%
an array it's initially going to be
a<00:20:40.799><c> hash</c><00:20:41.120><c> map</c><00:20:41.600><c> and</c><00:20:41.840><c> then</c><00:20:42.000><c> we're</c><00:20:42.159><c> going</c><00:20:42.320><c> to</c>

00:20:42.390 --> 00:20:42.400 align:start position:0%
a hash map and then we're going to
 

00:20:42.400 --> 00:20:45.270 align:start position:0%
a hash map and then we're going to
convert<00:20:42.880><c> it</c><00:20:43.120><c> into</c><00:20:43.360><c> an</c><00:20:43.600><c> array</c><00:20:44.000><c> later</c><00:20:44.400><c> on</c>

00:20:45.270 --> 00:20:45.280 align:start position:0%
convert it into an array later on
 

00:20:45.280 --> 00:20:47.110 align:start position:0%
convert it into an array later on
and<00:20:45.600><c> i</c><00:20:46.000><c> is</c><00:20:46.080><c> going</c><00:20:46.159><c> to</c><00:20:46.240><c> be</c><00:20:46.400><c> initially</c><00:20:46.799><c> set</c><00:20:46.960><c> to</c>

00:20:47.110 --> 00:20:47.120 align:start position:0%
and i is going to be initially set to
 

00:20:47.120 --> 00:20:48.549 align:start position:0%
and i is going to be initially set to
the<00:20:47.200><c> beginning</c><00:20:47.440><c> of</c><00:20:47.679><c> intervals</c><00:20:48.159><c> of</c><00:20:48.240><c> course</c>

00:20:48.549 --> 00:20:48.559 align:start position:0%
the beginning of intervals of course
 

00:20:48.559 --> 00:20:49.510 align:start position:0%
the beginning of intervals of course
that's<00:20:48.799><c> the</c><00:20:49.039><c> index</c>

00:20:49.510 --> 00:20:49.520 align:start position:0%
that's the index
 

00:20:49.520 --> 00:20:52.549 align:start position:0%
that's the index
0.<00:20:50.480><c> and</c><00:20:50.559><c> the</c><00:20:50.720><c> way</c><00:20:50.960><c> we're</c><00:20:51.120><c> going</c><00:20:51.280><c> to</c><00:20:51.520><c> do</c><00:20:51.679><c> this</c><00:20:52.159><c> is</c>

00:20:52.549 --> 00:20:52.559 align:start position:0%
0. and the way we're going to do this is
 

00:20:52.559 --> 00:20:54.470 align:start position:0%
0. and the way we're going to do this is
for<00:20:52.720><c> every</c><00:20:53.039><c> query</c><00:20:53.360><c> we're</c><00:20:53.520><c> going</c><00:20:53.600><c> to</c><00:20:53.760><c> map</c><00:20:54.080><c> it</c><00:20:54.159><c> to</c>

00:20:54.470 --> 00:20:54.480 align:start position:0%
for every query we're going to map it to
 

00:20:54.480 --> 00:20:55.750 align:start position:0%
for every query we're going to map it to
its<00:20:54.720><c> smallest</c>

00:20:55.750 --> 00:20:55.760 align:start position:0%
its smallest
 

00:20:55.760 --> 00:20:57.270 align:start position:0%
its smallest
the<00:20:55.919><c> length</c><00:20:56.159><c> of</c><00:20:56.320><c> the</c><00:20:56.400><c> smallest</c><00:20:56.799><c> interval</c><00:20:57.120><c> that</c>

00:20:57.270 --> 00:20:57.280 align:start position:0%
the length of the smallest interval that
 

00:20:57.280 --> 00:20:59.350 align:start position:0%
the length of the smallest interval that
it<00:20:57.360><c> belongs</c><00:20:57.840><c> to</c><00:20:58.320><c> and</c><00:20:58.400><c> then</c><00:20:58.720><c> we're</c><00:20:58.880><c> going</c><00:20:58.960><c> to</c>

00:20:59.350 --> 00:20:59.360 align:start position:0%
it belongs to and then we're going to
 

00:20:59.360 --> 00:21:01.510 align:start position:0%
it belongs to and then we're going to
later<00:20:59.679><c> on</c><00:20:59.840><c> convert</c><00:21:00.320><c> that</c><00:21:00.559><c> into</c><00:21:00.880><c> an</c><00:21:01.039><c> array</c>

00:21:01.510 --> 00:21:01.520 align:start position:0%
later on convert that into an array
 

00:21:01.520 --> 00:21:03.909 align:start position:0%
later on convert that into an array
maintaining<00:21:02.159><c> the</c><00:21:02.320><c> original</c><00:21:02.880><c> relative</c><00:21:03.440><c> order</c>

00:21:03.909 --> 00:21:03.919 align:start position:0%
maintaining the original relative order
 

00:21:03.919 --> 00:21:04.149 align:start position:0%
maintaining the original relative order
of

00:21:04.149 --> 00:21:04.159 align:start position:0%
of
 

00:21:04.159 --> 00:21:06.070 align:start position:0%
of
queries<00:21:05.039><c> so</c><00:21:05.280><c> now</c><00:21:05.440><c> we're</c><00:21:05.600><c> going</c><00:21:05.679><c> to</c><00:21:05.760><c> start</c>

00:21:06.070 --> 00:21:06.080 align:start position:0%
queries so now we're going to start
 

00:21:06.080 --> 00:21:07.190 align:start position:0%
queries so now we're going to start
iterating<00:21:06.640><c> through</c>

00:21:07.190 --> 00:21:07.200 align:start position:0%
iterating through
 

00:21:07.200 --> 00:21:08.950 align:start position:0%
iterating through
the<00:21:07.440><c> intervals</c><00:21:08.000><c> and</c><00:21:08.240><c> of</c><00:21:08.320><c> course</c><00:21:08.640><c> we</c><00:21:08.799><c> have</c><00:21:08.880><c> to</c>

00:21:08.950 --> 00:21:08.960 align:start position:0%
the intervals and of course we have to
 

00:21:08.960 --> 00:21:10.390 align:start position:0%
the intervals and of course we have to
make<00:21:09.120><c> sure</c><00:21:09.280><c> that</c><00:21:09.520><c> our</c><00:21:09.760><c> index</c><00:21:10.159><c> is</c>

00:21:10.390 --> 00:21:10.400 align:start position:0%
make sure that our index is
 

00:21:10.400 --> 00:21:12.549 align:start position:0%
make sure that our index is
inbound<00:21:11.039><c> so</c><00:21:11.360><c> i'm</c><00:21:11.520><c> going</c><00:21:11.600><c> to</c><00:21:11.679><c> make</c><00:21:11.840><c> sure</c><00:21:12.080><c> that</c><00:21:12.320><c> i</c>

00:21:12.549 --> 00:21:12.559 align:start position:0%
inbound so i'm going to make sure that i
 

00:21:12.559 --> 00:21:14.470 align:start position:0%
inbound so i'm going to make sure that i
is<00:21:12.799><c> less</c><00:21:13.039><c> than</c><00:21:13.280><c> the</c><00:21:13.440><c> length</c><00:21:13.760><c> of</c><00:21:13.919><c> interval</c><00:21:14.320><c> so</c>

00:21:14.470 --> 00:21:14.480 align:start position:0%
is less than the length of interval so
 

00:21:14.480 --> 00:21:15.190 align:start position:0%
is less than the length of interval so
that's<00:21:14.799><c> 1</c>

00:21:15.190 --> 00:21:15.200 align:start position:0%
that's 1
 

00:21:15.200 --> 00:21:16.950 align:start position:0%
that's 1
and<00:21:15.360><c> the</c><00:21:15.520><c> second</c><00:21:15.840><c> thing</c><00:21:16.159><c> is</c><00:21:16.559><c> we're</c><00:21:16.720><c> going</c><00:21:16.799><c> to</c>

00:21:16.950 --> 00:21:16.960 align:start position:0%
and the second thing is we're going to
 

00:21:16.960 --> 00:21:18.310 align:start position:0%
and the second thing is we're going to
keep<00:21:17.200><c> adding</c><00:21:17.679><c> intervals</c>

00:21:18.310 --> 00:21:18.320 align:start position:0%
keep adding intervals
 

00:21:18.320 --> 00:21:21.750 align:start position:0%
keep adding intervals
to<00:21:18.640><c> our</c><00:21:18.880><c> min</c><00:21:19.120><c> heap</c><00:21:19.760><c> while</c><00:21:20.320><c> the</c><00:21:20.720><c> left</c><00:21:21.120><c> value</c><00:21:21.600><c> of</c>

00:21:21.750 --> 00:21:21.760 align:start position:0%
to our min heap while the left value of
 

00:21:21.760 --> 00:21:22.710 align:start position:0%
to our min heap while the left value of
that<00:21:22.000><c> interval</c>

00:21:22.710 --> 00:21:22.720 align:start position:0%
that interval
 

00:21:22.720 --> 00:21:26.390 align:start position:0%
that interval
is<00:21:23.120><c> less</c><00:21:23.440><c> than</c><00:21:23.919><c> or</c><00:21:24.240><c> equal</c><00:21:24.960><c> to</c><00:21:25.280><c> the</c><00:21:25.679><c> query</c><00:21:26.080><c> value</c>

00:21:26.390 --> 00:21:26.400 align:start position:0%
is less than or equal to the query value
 

00:21:26.400 --> 00:21:28.070 align:start position:0%
is less than or equal to the query value
that<00:21:26.480><c> we're</c><00:21:26.720><c> currently</c><00:21:27.280><c> iterating</c><00:21:27.840><c> through</c>

00:21:28.070 --> 00:21:28.080 align:start position:0%
that we're currently iterating through
 

00:21:28.080 --> 00:21:29.590 align:start position:0%
that we're currently iterating through
right<00:21:28.240><c> we're</c><00:21:28.480><c> only</c><00:21:28.720><c> adding</c><00:21:29.039><c> intervals</c><00:21:29.440><c> that</c>

00:21:29.590 --> 00:21:29.600 align:start position:0%
right we're only adding intervals that
 

00:21:29.600 --> 00:21:29.990 align:start position:0%
right we're only adding intervals that
the

00:21:29.990 --> 00:21:30.000 align:start position:0%
the
 

00:21:30.000 --> 00:21:32.230 align:start position:0%
the
that<00:21:30.159><c> this</c><00:21:30.400><c> query</c><00:21:30.720><c> could</c><00:21:30.880><c> possibly</c><00:21:31.440><c> belong</c><00:21:31.919><c> to</c>

00:21:32.230 --> 00:21:32.240 align:start position:0%
that this query could possibly belong to
 

00:21:32.240 --> 00:21:34.070 align:start position:0%
that this query could possibly belong to
so<00:21:32.400><c> we</c><00:21:32.559><c> can</c><00:21:32.720><c> get</c><00:21:32.960><c> the</c><00:21:33.200><c> left</c><00:21:33.520><c> value</c><00:21:33.919><c> of</c><00:21:34.000><c> the</c>

00:21:34.070 --> 00:21:34.080 align:start position:0%
so we can get the left value of the
 

00:21:34.080 --> 00:21:34.789 align:start position:0%
so we can get the left value of the
query

00:21:34.789 --> 00:21:34.799 align:start position:0%
query
 

00:21:34.799 --> 00:21:36.310 align:start position:0%
query
by<00:21:35.120><c> getting</c><00:21:35.440><c> first</c><00:21:35.679><c> of</c><00:21:35.760><c> all</c><00:21:35.840><c> getting</c><00:21:36.080><c> the</c>

00:21:36.310 --> 00:21:36.320 align:start position:0%
by getting first of all getting the
 

00:21:36.320 --> 00:21:37.990 align:start position:0%
by getting first of all getting the
interval<00:21:36.720><c> at</c><00:21:36.799><c> position</c><00:21:37.280><c> i</c><00:21:37.520><c> and</c><00:21:37.600><c> the</c><00:21:37.760><c> left</c>

00:21:37.990 --> 00:21:38.000 align:start position:0%
interval at position i and the left
 

00:21:38.000 --> 00:21:39.590 align:start position:0%
interval at position i and the left
value<00:21:38.320><c> is</c><00:21:38.400><c> going</c><00:21:38.480><c> to</c><00:21:38.559><c> be</c><00:21:38.640><c> the</c><00:21:38.720><c> first</c><00:21:39.039><c> value</c><00:21:39.360><c> at</c>

00:21:39.590 --> 00:21:39.600 align:start position:0%
value is going to be the first value at
 

00:21:39.600 --> 00:21:40.470 align:start position:0%
value is going to be the first value at
index<00:21:40.000><c> 0</c>

00:21:40.470 --> 00:21:40.480 align:start position:0%
index 0
 

00:21:40.480 --> 00:21:42.710 align:start position:0%
index 0
we're<00:21:40.720><c> making</c><00:21:41.039><c> sure</c><00:21:41.520><c> that</c><00:21:41.679><c> it's</c><00:21:42.000><c> less</c><00:21:42.240><c> than</c><00:21:42.480><c> or</c>

00:21:42.710 --> 00:21:42.720 align:start position:0%
we're making sure that it's less than or
 

00:21:42.720 --> 00:21:44.470 align:start position:0%
we're making sure that it's less than or
equal<00:21:43.200><c> to</c><00:21:43.360><c> the</c><00:21:43.600><c> query</c><00:21:43.919><c> value</c><00:21:44.240><c> that</c><00:21:44.320><c> we're</c>

00:21:44.470 --> 00:21:44.480 align:start position:0%
equal to the query value that we're
 

00:21:44.480 --> 00:21:45.029 align:start position:0%
equal to the query value that we're
currently

00:21:45.029 --> 00:21:45.039 align:start position:0%
currently
 

00:21:45.039 --> 00:21:46.870 align:start position:0%
currently
at<00:21:45.600><c> if</c><00:21:45.760><c> that's</c><00:21:46.000><c> the</c><00:21:46.159><c> case</c><00:21:46.400><c> we're</c><00:21:46.640><c> going</c><00:21:46.640><c> to</c><00:21:46.720><c> get</c>

00:21:46.870 --> 00:21:46.880 align:start position:0%
at if that's the case we're going to get
 

00:21:46.880 --> 00:21:48.789 align:start position:0%
at if that's the case we're going to get
the<00:21:47.039><c> left</c><00:21:47.360><c> and</c><00:21:47.520><c> right</c><00:21:47.760><c> value</c><00:21:48.159><c> from</c><00:21:48.480><c> that</c>

00:21:48.789 --> 00:21:48.799 align:start position:0%
the left and right value from that
 

00:21:48.799 --> 00:21:51.430 align:start position:0%
the left and right value from that
interval<00:21:49.600><c> and</c><00:21:50.000><c> of</c><00:21:50.159><c> course</c><00:21:50.559><c> we're</c><00:21:50.799><c> going</c><00:21:50.960><c> to</c>

00:21:51.430 --> 00:21:51.440 align:start position:0%
interval and of course we're going to
 

00:21:51.440 --> 00:21:51.990 align:start position:0%
interval and of course we're going to
push<00:21:51.760><c> it</c>

00:21:51.990 --> 00:21:52.000 align:start position:0%
push it
 

00:21:52.000 --> 00:21:54.870 align:start position:0%
push it
onto<00:21:52.480><c> our</c><00:21:52.799><c> heap</c><00:21:53.520><c> so</c><00:21:53.760><c> we</c><00:21:53.840><c> can</c><00:21:54.000><c> do</c><00:21:54.159><c> heap</c><00:21:54.400><c> q</c><00:21:54.640><c> dot</c>

00:21:54.870 --> 00:21:54.880 align:start position:0%
onto our heap so we can do heap q dot
 

00:21:54.880 --> 00:21:55.590 align:start position:0%
onto our heap so we can do heap q dot
heat<00:21:55.200><c> push</c>

00:21:55.590 --> 00:21:55.600 align:start position:0%
heat push
 

00:21:55.600 --> 00:21:57.909 align:start position:0%
heat push
to<00:21:55.840><c> our</c><00:21:56.080><c> min</c><00:21:56.400><c> heap</c><00:21:56.880><c> remember</c><00:21:57.280><c> we're</c><00:21:57.520><c> adding</c><00:21:57.760><c> a</c>

00:21:57.909 --> 00:21:57.919 align:start position:0%
to our min heap remember we're adding a
 

00:21:57.919 --> 00:21:59.750 align:start position:0%
to our min heap remember we're adding a
pair<00:21:58.159><c> of</c><00:21:58.320><c> values</c><00:21:58.720><c> we're</c><00:21:58.880><c> getting</c><00:21:59.120><c> the</c><00:21:59.280><c> size</c><00:21:59.679><c> of</c>

00:21:59.750 --> 00:21:59.760 align:start position:0%
pair of values we're getting the size of
 

00:21:59.760 --> 00:22:02.070 align:start position:0%
pair of values we're getting the size of
the<00:21:59.919><c> interval</c><00:22:00.240><c> right</c><00:22:00.480><c> minus</c><00:22:00.880><c> left</c><00:22:01.120><c> plus</c><00:22:01.520><c> one</c>

00:22:02.070 --> 00:22:02.080 align:start position:0%
the interval right minus left plus one
 

00:22:02.080 --> 00:22:04.310 align:start position:0%
the interval right minus left plus one
and<00:22:02.400><c> the</c><00:22:02.559><c> second</c><00:22:02.880><c> value</c><00:22:03.200><c> is</c><00:22:03.280><c> going</c><00:22:03.360><c> to</c><00:22:03.440><c> be</c><00:22:03.760><c> r</c>

00:22:04.310 --> 00:22:04.320 align:start position:0%
and the second value is going to be r
 

00:22:04.320 --> 00:22:06.230 align:start position:0%
and the second value is going to be r
the<00:22:04.559><c> just</c><00:22:04.720><c> the</c><00:22:04.880><c> right</c><00:22:05.039><c> value</c><00:22:05.440><c> for</c><00:22:05.679><c> our</c><00:22:06.000><c> tie</c>

00:22:06.230 --> 00:22:06.240 align:start position:0%
the just the right value for our tie
 

00:22:06.240 --> 00:22:07.110 align:start position:0%
the just the right value for our tie
breaker

00:22:07.110 --> 00:22:07.120 align:start position:0%
breaker
 

00:22:07.120 --> 00:22:08.630 align:start position:0%
breaker
and<00:22:07.360><c> of</c><00:22:07.440><c> course</c><00:22:07.600><c> since</c><00:22:07.840><c> we</c><00:22:08.000><c> just</c><00:22:08.159><c> iterated</c>

00:22:08.630 --> 00:22:08.640 align:start position:0%
and of course since we just iterated
 

00:22:08.640 --> 00:22:10.070 align:start position:0%
and of course since we just iterated
through<00:22:08.960><c> an</c><00:22:09.120><c> interval</c><00:22:09.520><c> we</c><00:22:09.600><c> have</c><00:22:09.760><c> to</c><00:22:09.840><c> make</c><00:22:09.919><c> sure</c>

00:22:10.070 --> 00:22:10.080 align:start position:0%
through an interval we have to make sure
 

00:22:10.080 --> 00:22:11.350 align:start position:0%
through an interval we have to make sure
we<00:22:10.320><c> increment</c><00:22:10.799><c> our</c><00:22:11.039><c> i</c>

00:22:11.350 --> 00:22:11.360 align:start position:0%
we increment our i
 

00:22:11.360 --> 00:22:13.909 align:start position:0%
we increment our i
plus<00:22:11.919><c> one</c><00:22:12.480><c> and</c><00:22:12.640><c> so</c><00:22:12.960><c> basically</c><00:22:13.440><c> this</c><00:22:13.600><c> loop</c><00:22:13.840><c> is</c>

00:22:13.909 --> 00:22:13.919 align:start position:0%
plus one and so basically this loop is
 

00:22:13.919 --> 00:22:15.350 align:start position:0%
plus one and so basically this loop is
just<00:22:14.080><c> going</c><00:22:14.159><c> to</c><00:22:14.240><c> keep</c><00:22:14.480><c> adding</c><00:22:14.799><c> intervals</c>

00:22:15.350 --> 00:22:15.360 align:start position:0%
just going to keep adding intervals
 

00:22:15.360 --> 00:22:17.590 align:start position:0%
just going to keep adding intervals
until<00:22:15.760><c> either</c><00:22:16.000><c> we</c><00:22:16.240><c> run</c><00:22:16.480><c> out</c><00:22:16.640><c> of</c><00:22:16.799><c> intervals</c><00:22:17.280><c> or</c>

00:22:17.590 --> 00:22:17.600 align:start position:0%
until either we run out of intervals or
 

00:22:17.600 --> 00:22:18.710 align:start position:0%
until either we run out of intervals or
the<00:22:17.840><c> interval</c><00:22:18.320><c> is</c>

00:22:18.710 --> 00:22:18.720 align:start position:0%
the interval is
 

00:22:18.720 --> 00:22:20.870 align:start position:0%
the interval is
too<00:22:19.039><c> far</c><00:22:19.280><c> to</c><00:22:19.440><c> the</c><00:22:19.679><c> right</c><00:22:20.000><c> for</c><00:22:20.159><c> this</c><00:22:20.400><c> query</c><00:22:20.640><c> to</c>

00:22:20.870 --> 00:22:20.880 align:start position:0%
too far to the right for this query to
 

00:22:20.880 --> 00:22:22.070 align:start position:0%
too far to the right for this query to
even<00:22:21.120><c> belong</c><00:22:21.600><c> to</c>

00:22:22.070 --> 00:22:22.080 align:start position:0%
even belong to
 

00:22:22.080 --> 00:22:23.590 align:start position:0%
even belong to
and<00:22:22.159><c> then</c><00:22:22.320><c> once</c><00:22:22.559><c> we've</c><00:22:22.720><c> done</c><00:22:22.960><c> that</c><00:22:23.440><c> we're</c>

00:22:23.590 --> 00:22:23.600 align:start position:0%
and then once we've done that we're
 

00:22:23.600 --> 00:22:25.750 align:start position:0%
and then once we've done that we're
gonna<00:22:23.919><c> go</c><00:22:24.159><c> on</c><00:22:24.240><c> to</c><00:22:24.480><c> our</c><00:22:24.720><c> second</c><00:22:25.120><c> part</c><00:22:25.440><c> of</c><00:22:25.520><c> the</c>

00:22:25.750 --> 00:22:25.760 align:start position:0%
gonna go on to our second part of the
 

00:22:25.760 --> 00:22:26.470 align:start position:0%
gonna go on to our second part of the
algorithm

00:22:26.470 --> 00:22:26.480 align:start position:0%
algorithm
 

00:22:26.480 --> 00:22:27.750 align:start position:0%
algorithm
now<00:22:26.799><c> is</c><00:22:26.880><c> the</c><00:22:27.039><c> part</c><00:22:27.200><c> where</c><00:22:27.360><c> we're</c><00:22:27.440><c> going</c><00:22:27.520><c> to</c>

00:22:27.750 --> 00:22:27.760 align:start position:0%
now is the part where we're going to
 

00:22:27.760 --> 00:22:30.470 align:start position:0%
now is the part where we're going to
continue<00:22:28.240><c> to</c><00:22:28.640><c> pop</c><00:22:29.120><c> from</c><00:22:29.440><c> our</c><00:22:29.600><c> min</c><00:22:29.919><c> heap</c>

00:22:30.470 --> 00:22:30.480 align:start position:0%
continue to pop from our min heap
 

00:22:30.480 --> 00:22:33.190 align:start position:0%
continue to pop from our min heap
we<00:22:30.720><c> want</c><00:22:30.960><c> to</c><00:22:31.120><c> remove</c><00:22:31.919><c> all</c><00:22:32.240><c> intervals</c><00:22:32.960><c> that</c>

00:22:33.190 --> 00:22:33.200 align:start position:0%
we want to remove all intervals that
 

00:22:33.200 --> 00:22:33.990 align:start position:0%
we want to remove all intervals that
this<00:22:33.520><c> query</c>

00:22:33.990 --> 00:22:34.000 align:start position:0%
this query
 

00:22:34.000 --> 00:22:37.029 align:start position:0%
this query
doesn't<00:22:34.480><c> even</c><00:22:34.799><c> belong</c><00:22:35.360><c> to</c><00:22:35.679><c> how</c><00:22:35.840><c> do</c><00:22:35.919><c> we</c><00:22:36.159><c> know</c><00:22:36.400><c> if</c>

00:22:37.029 --> 00:22:37.039 align:start position:0%
doesn't even belong to how do we know if
 

00:22:37.039 --> 00:22:38.310 align:start position:0%
doesn't even belong to how do we know if
there's<00:22:37.280><c> an</c><00:22:37.440><c> interval</c><00:22:37.760><c> that</c><00:22:37.840><c> this</c><00:22:38.000><c> query</c>

00:22:38.310 --> 00:22:38.320 align:start position:0%
there's an interval that this query
 

00:22:38.320 --> 00:22:40.549 align:start position:0%
there's an interval that this query
doesn't<00:22:38.640><c> belong</c><00:22:39.039><c> to</c><00:22:39.440><c> it</c><00:22:39.520><c> would</c><00:22:39.760><c> only</c><00:22:40.159><c> be</c><00:22:40.320><c> the</c>

00:22:40.549 --> 00:22:40.559 align:start position:0%
doesn't belong to it would only be the
 

00:22:40.559 --> 00:22:41.029 align:start position:0%
doesn't belong to it would only be the
case

00:22:41.029 --> 00:22:41.039 align:start position:0%
case
 

00:22:41.039 --> 00:22:43.830 align:start position:0%
case
if<00:22:41.200><c> this</c><00:22:41.520><c> interval</c><00:22:41.919><c> was</c><00:22:42.159><c> too</c><00:22:42.480><c> far</c><00:22:42.720><c> to</c><00:22:42.880><c> the</c><00:22:43.280><c> left</c>

00:22:43.830 --> 00:22:43.840 align:start position:0%
if this interval was too far to the left
 

00:22:43.840 --> 00:22:45.350 align:start position:0%
if this interval was too far to the left
how<00:22:44.000><c> do</c><00:22:44.080><c> we</c><00:22:44.159><c> know</c><00:22:44.320><c> if</c><00:22:44.480><c> it's</c><00:22:44.640><c> too</c><00:22:44.799><c> far</c><00:22:45.039><c> to</c><00:22:45.200><c> the</c>

00:22:45.350 --> 00:22:45.360 align:start position:0%
how do we know if it's too far to the
 

00:22:45.360 --> 00:22:45.830 align:start position:0%
how do we know if it's too far to the
left

00:22:45.830 --> 00:22:45.840 align:start position:0%
left
 

00:22:45.840 --> 00:22:48.470 align:start position:0%
left
basically<00:22:46.320><c> if</c><00:22:46.480><c> the</c><00:22:46.880><c> right</c><00:22:47.200><c> value</c><00:22:48.000><c> of</c><00:22:48.159><c> that</c>

00:22:48.470 --> 00:22:48.480 align:start position:0%
basically if the right value of that
 

00:22:48.480 --> 00:22:49.270 align:start position:0%
basically if the right value of that
interval

00:22:49.270 --> 00:22:49.280 align:start position:0%
interval
 

00:22:49.280 --> 00:22:52.710 align:start position:0%
interval
is<00:22:49.679><c> 2</c><00:22:50.000><c> is</c><00:22:50.480><c> less</c><00:22:50.799><c> than</c><00:22:51.280><c> the</c><00:22:51.520><c> query</c><00:22:51.919><c> value</c>

00:22:52.710 --> 00:22:52.720 align:start position:0%
is 2 is less than the query value
 

00:22:52.720 --> 00:22:55.669 align:start position:0%
is 2 is less than the query value
q<00:22:53.600><c> so</c><00:22:53.840><c> first</c><00:22:54.320><c> we're</c><00:22:54.640><c> we're</c><00:22:54.799><c> going</c><00:22:54.880><c> to</c><00:22:54.960><c> be</c><00:22:55.440><c> doing</c>

00:22:55.669 --> 00:22:55.679 align:start position:0%
q so first we're we're going to be doing
 

00:22:55.679 --> 00:22:57.190 align:start position:0%
q so first we're we're going to be doing
this<00:22:55.919><c> from</c><00:22:56.159><c> our</c><00:22:56.320><c> min</c><00:22:56.559><c> heap</c><00:22:56.720><c> so</c><00:22:56.880><c> we</c><00:22:56.960><c> want</c><00:22:57.120><c> to</c>

00:22:57.190 --> 00:22:57.200 align:start position:0%
this from our min heap so we want to
 

00:22:57.200 --> 00:22:59.029 align:start position:0%
this from our min heap so we want to
make<00:22:57.280><c> sure</c><00:22:57.440><c> our</c><00:22:57.520><c> min</c><00:22:57.760><c> heap</c><00:22:58.000><c> is</c><00:22:58.080><c> non-empty</c>

00:22:59.029 --> 00:22:59.039 align:start position:0%
make sure our min heap is non-empty
 

00:22:59.039 --> 00:23:02.310 align:start position:0%
make sure our min heap is non-empty
and<00:22:59.679><c> for</c><00:22:59.919><c> the</c><00:23:00.640><c> the</c><00:23:01.120><c> smallest</c><00:23:01.520><c> value</c><00:23:02.000><c> of</c><00:23:02.159><c> our</c>

00:23:02.310 --> 00:23:02.320 align:start position:0%
and for the the smallest value of our
 

00:23:02.320 --> 00:23:04.230 align:start position:0%
and for the the smallest value of our
min<00:23:02.559><c> heap</c><00:23:02.799><c> we</c><00:23:02.880><c> can</c><00:23:03.039><c> get</c><00:23:03.200><c> that</c><00:23:03.440><c> at</c><00:23:03.679><c> index</c>

00:23:04.230 --> 00:23:04.240 align:start position:0%
min heap we can get that at index
 

00:23:04.240 --> 00:23:07.350 align:start position:0%
min heap we can get that at index
0<00:23:04.799><c> in</c><00:23:05.039><c> python</c><00:23:06.080><c> so</c><00:23:06.240><c> now</c><00:23:06.640><c> we</c>

00:23:07.350 --> 00:23:07.360 align:start position:0%
0 in python so now we
 

00:23:07.360 --> 00:23:09.430 align:start position:0%
0 in python so now we
at<00:23:07.520><c> index</c><00:23:07.840><c> zero</c><00:23:08.080><c> we've</c><00:23:08.240><c> gotten</c><00:23:08.559><c> the</c><00:23:08.799><c> smallest</c>

00:23:09.430 --> 00:23:09.440 align:start position:0%
at index zero we've gotten the smallest
 

00:23:09.440 --> 00:23:11.590 align:start position:0%
at index zero we've gotten the smallest
interval<00:23:10.159><c> and</c><00:23:10.320><c> we</c><00:23:10.480><c> want</c><00:23:10.640><c> to</c><00:23:10.720><c> make</c><00:23:10.960><c> sure</c>

00:23:11.590 --> 00:23:11.600 align:start position:0%
interval and we want to make sure
 

00:23:11.600 --> 00:23:13.990 align:start position:0%
interval and we want to make sure
that<00:23:11.760><c> it's</c><00:23:12.559><c> right</c><00:23:12.880><c> value</c><00:23:13.200><c> which</c><00:23:13.440><c> we</c><00:23:13.520><c> can</c><00:23:13.760><c> get</c>

00:23:13.990 --> 00:23:14.000 align:start position:0%
that it's right value which we can get
 

00:23:14.000 --> 00:23:14.870 align:start position:0%
that it's right value which we can get
at<00:23:14.320><c> index</c>

00:23:14.870 --> 00:23:14.880 align:start position:0%
at index
 

00:23:14.880 --> 00:23:17.750 align:start position:0%
at index
one<00:23:15.679><c> and</c><00:23:15.919><c> if</c><00:23:16.320><c> this</c><00:23:16.640><c> right</c><00:23:16.880><c> value</c><00:23:17.200><c> happens</c><00:23:17.600><c> to</c>

00:23:17.750 --> 00:23:17.760 align:start position:0%
one and if this right value happens to
 

00:23:17.760 --> 00:23:18.149 align:start position:0%
one and if this right value happens to
be

00:23:18.149 --> 00:23:18.159 align:start position:0%
be
 

00:23:18.159 --> 00:23:20.470 align:start position:0%
be
too<00:23:18.480><c> far</c><00:23:18.720><c> to</c><00:23:18.880><c> the</c><00:23:19.200><c> left</c><00:23:19.520><c> meaning</c><00:23:19.840><c> it's</c><00:23:20.159><c> less</c>

00:23:20.470 --> 00:23:20.480 align:start position:0%
too far to the left meaning it's less
 

00:23:20.480 --> 00:23:22.070 align:start position:0%
too far to the left meaning it's less
than<00:23:20.640><c> the</c><00:23:20.880><c> query</c><00:23:21.280><c> value</c>

00:23:22.070 --> 00:23:22.080 align:start position:0%
than the query value
 

00:23:22.080 --> 00:23:24.230 align:start position:0%
than the query value
then<00:23:22.320><c> we</c><00:23:22.480><c> have</c><00:23:22.640><c> to</c><00:23:22.880><c> pop</c><00:23:23.280><c> from</c><00:23:23.520><c> our</c><00:23:23.679><c> min</c><00:23:23.919><c> heap</c><00:23:24.080><c> so</c>

00:23:24.230 --> 00:23:24.240 align:start position:0%
then we have to pop from our min heap so
 

00:23:24.240 --> 00:23:25.270 align:start position:0%
then we have to pop from our min heap so
we're<00:23:24.320><c> going</c><00:23:24.400><c> to</c><00:23:24.480><c> do</c><00:23:24.640><c> heap</c><00:23:24.960><c> q</c>

00:23:25.270 --> 00:23:25.280 align:start position:0%
we're going to do heap q
 

00:23:25.280 --> 00:23:28.710 align:start position:0%
we're going to do heap q
dot<00:23:25.600><c> heap</c><00:23:26.240><c> pop</c><00:23:26.880><c> from</c><00:23:27.280><c> the</c><00:23:27.440><c> min</c><00:23:27.679><c> heap</c><00:23:28.240><c> so</c><00:23:28.480><c> all</c>

00:23:28.710 --> 00:23:28.720 align:start position:0%
dot heap pop from the min heap so all
 

00:23:28.720 --> 00:23:29.590 align:start position:0%
dot heap pop from the min heap so all
this<00:23:28.960><c> is</c><00:23:29.120><c> doing</c>

00:23:29.590 --> 00:23:29.600 align:start position:0%
this is doing
 

00:23:29.600 --> 00:23:32.710 align:start position:0%
this is doing
is<00:23:29.919><c> popping</c><00:23:30.480><c> all</c><00:23:30.720><c> the</c><00:23:31.039><c> invalid</c><00:23:32.080><c> intervals</c>

00:23:32.710 --> 00:23:32.720 align:start position:0%
is popping all the invalid intervals
 

00:23:32.720 --> 00:23:34.549 align:start position:0%
is popping all the invalid intervals
from<00:23:32.960><c> our</c><00:23:33.120><c> min</c><00:23:33.440><c> heap</c><00:23:33.679><c> popping</c><00:23:34.000><c> the</c><00:23:34.159><c> intervals</c>

00:23:34.549 --> 00:23:34.559 align:start position:0%
from our min heap popping the intervals
 

00:23:34.559 --> 00:23:36.149 align:start position:0%
from our min heap popping the intervals
that<00:23:34.640><c> are</c><00:23:34.799><c> too</c><00:23:35.039><c> far</c><00:23:35.280><c> to</c><00:23:35.440><c> the</c><00:23:35.679><c> left</c>

00:23:36.149 --> 00:23:36.159 align:start position:0%
that are too far to the left
 

00:23:36.159 --> 00:23:37.909 align:start position:0%
that are too far to the left
so<00:23:36.400><c> once</c><00:23:36.640><c> this</c><00:23:36.880><c> loop</c><00:23:37.200><c> has</c><00:23:37.360><c> been</c><00:23:37.600><c> done</c>

00:23:37.909 --> 00:23:37.919 align:start position:0%
so once this loop has been done
 

00:23:37.919 --> 00:23:39.669 align:start position:0%
so once this loop has been done
executing<00:23:38.720><c> either</c>

00:23:39.669 --> 00:23:39.679 align:start position:0%
executing either
 

00:23:39.679 --> 00:23:41.990 align:start position:0%
executing either
then<00:23:40.159><c> we're</c><00:23:40.400><c> able</c><00:23:40.720><c> to</c><00:23:40.960><c> get</c><00:23:41.200><c> from</c><00:23:41.440><c> our</c><00:23:41.520><c> min</c><00:23:41.760><c> heap</c>

00:23:41.990 --> 00:23:42.000 align:start position:0%
then we're able to get from our min heap
 

00:23:42.000 --> 00:23:43.269 align:start position:0%
then we're able to get from our min heap
get<00:23:42.159><c> the</c><00:23:42.320><c> smallest</c>

00:23:43.269 --> 00:23:43.279 align:start position:0%
get the smallest
 

00:23:43.279 --> 00:23:45.190 align:start position:0%
get the smallest
uh<00:23:43.919><c> interval</c><00:23:44.400><c> which</c><00:23:44.640><c> is</c><00:23:44.720><c> going</c><00:23:44.799><c> to</c><00:23:44.880><c> be</c><00:23:45.039><c> at</c>

00:23:45.190 --> 00:23:45.200 align:start position:0%
uh interval which is going to be at
 

00:23:45.200 --> 00:23:47.110 align:start position:0%
uh interval which is going to be at
index<00:23:45.520><c> 0</c><00:23:45.840><c> and</c><00:23:45.919><c> then</c><00:23:46.159><c> we</c><00:23:46.320><c> want</c><00:23:46.480><c> the</c><00:23:46.720><c> size</c><00:23:47.039><c> of</c>

00:23:47.110 --> 00:23:47.120 align:start position:0%
index 0 and then we want the size of
 

00:23:47.120 --> 00:23:48.950 align:start position:0%
index 0 and then we want the size of
that<00:23:47.360><c> interval</c><00:23:47.679><c> so</c><00:23:47.840><c> we</c><00:23:48.000><c> can</c><00:23:48.159><c> get</c>

00:23:48.950 --> 00:23:48.960 align:start position:0%
that interval so we can get
 

00:23:48.960 --> 00:23:51.750 align:start position:0%
that interval so we can get
index<00:23:49.520><c> 0</c><00:23:50.080><c> get</c><00:23:50.240><c> the</c><00:23:50.400><c> size</c><00:23:50.720><c> of</c><00:23:50.799><c> that</c><00:23:51.039><c> interval</c>

00:23:51.750 --> 00:23:51.760 align:start position:0%
index 0 get the size of that interval
 

00:23:51.760 --> 00:23:52.310 align:start position:0%
index 0 get the size of that interval
and<00:23:51.919><c> that's</c>

00:23:52.310 --> 00:23:52.320 align:start position:0%
and that's
 

00:23:52.320 --> 00:23:54.870 align:start position:0%
and that's
only<00:23:52.799><c> if</c><00:23:53.200><c> our</c><00:23:53.360><c> min</c><00:23:53.600><c> heap</c><00:23:53.840><c> is</c><00:23:54.000><c> non-empty</c><00:23:54.640><c> right</c>

00:23:54.870 --> 00:23:54.880 align:start position:0%
only if our min heap is non-empty right
 

00:23:54.880 --> 00:23:56.230 align:start position:0%
only if our min heap is non-empty right
it's<00:23:55.200><c> possible</c><00:23:55.840><c> that</c>

00:23:56.230 --> 00:23:56.240 align:start position:0%
it's possible that
 

00:23:56.240 --> 00:23:58.230 align:start position:0%
it's possible that
for<00:23:56.559><c> one</c><00:23:56.720><c> of</c><00:23:56.880><c> these</c><00:23:57.360><c> queries</c><00:23:57.760><c> that</c><00:23:57.919><c> there's</c>

00:23:58.230 --> 00:23:58.240 align:start position:0%
for one of these queries that there's
 

00:23:58.240 --> 00:24:00.470 align:start position:0%
for one of these queries that there's
not<00:23:58.480><c> a</c><00:23:58.640><c> single</c><00:23:59.039><c> interval</c><00:23:59.440><c> that</c><00:23:59.600><c> it</c><00:23:59.679><c> belongs</c><00:24:00.159><c> to</c>

00:24:00.470 --> 00:24:00.480 align:start position:0%
not a single interval that it belongs to
 

00:24:00.480 --> 00:24:02.310 align:start position:0%
not a single interval that it belongs to
in<00:24:00.559><c> which</c><00:24:00.799><c> case</c><00:24:01.200><c> else</c><00:24:01.600><c> is</c><00:24:01.760><c> where</c><00:24:01.919><c> we</c><00:24:02.159><c> would</c>

00:24:02.310 --> 00:24:02.320 align:start position:0%
in which case else is where we would
 

00:24:02.320 --> 00:24:04.070 align:start position:0%
in which case else is where we would
want<00:24:02.640><c> the</c><00:24:02.880><c> negative</c><00:24:03.360><c> one</c><00:24:03.600><c> which</c><00:24:03.840><c> is</c><00:24:03.919><c> the</c>

00:24:04.070 --> 00:24:04.080 align:start position:0%
want the negative one which is the
 

00:24:04.080 --> 00:24:05.750 align:start position:0%
want the negative one which is the
default<00:24:04.480><c> value</c><00:24:04.799><c> that</c><00:24:04.960><c> they</c><00:24:05.120><c> told</c><00:24:05.440><c> us</c>

00:24:05.750 --> 00:24:05.760 align:start position:0%
default value that they told us
 

00:24:05.760 --> 00:24:07.990 align:start position:0%
default value that they told us
and<00:24:06.240><c> for</c><00:24:06.559><c> this</c><00:24:06.960><c> we're</c><00:24:07.120><c> going</c><00:24:07.200><c> to</c><00:24:07.279><c> be</c><00:24:07.440><c> assigning</c>

00:24:07.990 --> 00:24:08.000 align:start position:0%
and for this we're going to be assigning
 

00:24:08.000 --> 00:24:08.789 align:start position:0%
and for this we're going to be assigning
it<00:24:08.240><c> to</c>

00:24:08.789 --> 00:24:08.799 align:start position:0%
it to
 

00:24:08.799 --> 00:24:12.630 align:start position:0%
it to
result<00:24:09.760><c> of</c><00:24:10.080><c> that</c><00:24:10.400><c> query</c><00:24:11.120><c> so</c><00:24:11.760><c> in</c><00:24:11.919><c> our</c><00:24:12.000><c> hashmap</c>

00:24:12.630 --> 00:24:12.640 align:start position:0%
result of that query so in our hashmap
 

00:24:12.640 --> 00:24:13.350 align:start position:0%
result of that query so in our hashmap
result

00:24:13.350 --> 00:24:13.360 align:start position:0%
result
 

00:24:13.360 --> 00:24:15.029 align:start position:0%
result
of<00:24:13.520><c> that</c><00:24:13.760><c> query</c><00:24:14.159><c> we're</c><00:24:14.480><c> you</c><00:24:14.640><c> know</c><00:24:14.720><c> getting</c>

00:24:15.029 --> 00:24:15.039 align:start position:0%
of that query we're you know getting
 

00:24:15.039 --> 00:24:16.789 align:start position:0%
of that query we're you know getting
this<00:24:15.360><c> i</c><00:24:15.440><c> know</c><00:24:15.600><c> this</c><00:24:15.840><c> is</c><00:24:16.000><c> kind</c><00:24:16.159><c> of</c><00:24:16.320><c> a</c><00:24:16.480><c> lot</c>

00:24:16.789 --> 00:24:16.799 align:start position:0%
this i know this is kind of a lot
 

00:24:16.799 --> 00:24:18.310 align:start position:0%
this i know this is kind of a lot
even<00:24:16.960><c> though</c><00:24:17.120><c> that</c><00:24:17.360><c> this</c><00:24:17.520><c> is</c><00:24:17.679><c> not</c><00:24:17.919><c> a</c><00:24:18.000><c> lot</c><00:24:18.159><c> of</c>

00:24:18.310 --> 00:24:18.320 align:start position:0%
even though that this is not a lot of
 

00:24:18.320 --> 00:24:20.870 align:start position:0%
even though that this is not a lot of
code<00:24:19.120><c> these</c><00:24:19.360><c> are</c><00:24:19.520><c> a</c><00:24:19.679><c> lot</c><00:24:19.919><c> of</c><00:24:20.159><c> details</c><00:24:20.720><c> we're</c>

00:24:20.870 --> 00:24:20.880 align:start position:0%
code these are a lot of details we're
 

00:24:20.880 --> 00:24:22.710 align:start position:0%
code these are a lot of details we're
having<00:24:21.120><c> to</c><00:24:21.200><c> worry</c><00:24:21.520><c> about</c><00:24:21.679><c> it's</c><00:24:21.919><c> really</c><00:24:22.400><c> easy</c>

00:24:22.710 --> 00:24:22.720 align:start position:0%
having to worry about it's really easy
 

00:24:22.720 --> 00:24:24.789 align:start position:0%
having to worry about it's really easy
to<00:24:22.880><c> go</c><00:24:23.120><c> wrong</c><00:24:23.440><c> in</c><00:24:23.600><c> this</c><00:24:23.840><c> problem</c><00:24:24.159><c> it's</c><00:24:24.400><c> not</c><00:24:24.559><c> an</c>

00:24:24.789 --> 00:24:24.799 align:start position:0%
to go wrong in this problem it's not an
 

00:24:24.799 --> 00:24:25.909 align:start position:0%
to go wrong in this problem it's not an
easy<00:24:25.120><c> problem</c>

00:24:25.909 --> 00:24:25.919 align:start position:0%
easy problem
 

00:24:25.919 --> 00:24:28.149 align:start position:0%
easy problem
but<00:24:26.240><c> that</c><00:24:26.559><c> is</c><00:24:26.799><c> actually</c><00:24:27.200><c> it</c><00:24:27.440><c> right</c><00:24:27.600><c> remember</c>

00:24:28.149 --> 00:24:28.159 align:start position:0%
but that is actually it right remember
 

00:24:28.159 --> 00:24:30.230 align:start position:0%
but that is actually it right remember
if<00:24:28.320><c> you</c><00:24:28.559><c> remember</c><00:24:28.880><c> the</c><00:24:28.960><c> visual</c><00:24:29.360><c> explanation</c>

00:24:30.230 --> 00:24:30.240 align:start position:0%
if you remember the visual explanation
 

00:24:30.240 --> 00:24:31.350 align:start position:0%
if you remember the visual explanation
these<00:24:30.480><c> are</c><00:24:30.559><c> the</c><00:24:30.640><c> main</c><00:24:30.880><c> things</c><00:24:31.039><c> we</c><00:24:31.200><c> had</c><00:24:31.279><c> to</c>

00:24:31.350 --> 00:24:31.360 align:start position:0%
these are the main things we had to
 

00:24:31.360 --> 00:24:32.549 align:start position:0%
these are the main things we had to
worry<00:24:31.520><c> about</c><00:24:31.679><c> we're</c><00:24:31.919><c> going</c><00:24:32.080><c> through</c><00:24:32.320><c> every</c>

00:24:32.549 --> 00:24:32.559 align:start position:0%
worry about we're going through every
 

00:24:32.559 --> 00:24:35.029 align:start position:0%
worry about we're going through every
query<00:24:33.200><c> adding</c><00:24:33.600><c> all</c><00:24:33.760><c> possible</c><00:24:34.240><c> intervals</c><00:24:34.799><c> then</c>

00:24:35.029 --> 00:24:35.039 align:start position:0%
query adding all possible intervals then
 

00:24:35.039 --> 00:24:36.630 align:start position:0%
query adding all possible intervals then
popping<00:24:35.440><c> the</c><00:24:35.679><c> invalid</c>

00:24:36.630 --> 00:24:36.640 align:start position:0%
popping the invalid
 

00:24:36.640 --> 00:24:38.789 align:start position:0%
popping the invalid
intervals<00:24:37.039><c> and</c><00:24:37.120><c> then</c><00:24:37.360><c> getting</c><00:24:38.000><c> the</c><00:24:38.640><c> the</c>

00:24:38.789 --> 00:24:38.799 align:start position:0%
intervals and then getting the the
 

00:24:38.799 --> 00:24:40.310 align:start position:0%
intervals and then getting the the
smallest<00:24:39.279><c> interval</c><00:24:39.600><c> that's</c><00:24:39.919><c> left</c>

00:24:40.310 --> 00:24:40.320 align:start position:0%
smallest interval that's left
 

00:24:40.320 --> 00:24:42.870 align:start position:0%
smallest interval that's left
in<00:24:40.559><c> our</c><00:24:40.720><c> min</c><00:24:40.960><c> heap</c><00:24:41.279><c> once</c><00:24:41.600><c> that's</c><00:24:41.919><c> done</c><00:24:42.799><c> and</c>

00:24:42.870 --> 00:24:42.880 align:start position:0%
in our min heap once that's done and
 

00:24:42.880 --> 00:24:44.230 align:start position:0%
in our min heap once that's done and
once<00:24:43.120><c> we've</c><00:24:43.279><c> done</c><00:24:43.440><c> that</c><00:24:43.600><c> for</c><00:24:43.760><c> every</c><00:24:43.919><c> single</c>

00:24:44.230 --> 00:24:44.240 align:start position:0%
once we've done that for every single
 

00:24:44.240 --> 00:24:44.789 align:start position:0%
once we've done that for every single
query

00:24:44.789 --> 00:24:44.799 align:start position:0%
query
 

00:24:44.799 --> 00:24:47.750 align:start position:0%
query
we<00:24:45.039><c> are</c><00:24:45.360><c> done</c><00:24:45.840><c> and</c><00:24:46.320><c> so</c><00:24:46.480><c> then</c><00:24:46.640><c> we</c><00:24:46.799><c> can</c><00:24:46.960><c> return</c>

00:24:47.750 --> 00:24:47.760 align:start position:0%
we are done and so then we can return
 

00:24:47.760 --> 00:24:48.310 align:start position:0%
we are done and so then we can return
our

00:24:48.310 --> 00:24:48.320 align:start position:0%
our
 

00:24:48.320 --> 00:24:50.470 align:start position:0%
our
result<00:24:48.799><c> but</c><00:24:49.120><c> happens</c><00:24:49.440><c> to</c><00:24:49.600><c> be</c><00:24:49.760><c> that</c><00:24:49.919><c> our</c><00:24:50.080><c> result</c>

00:24:50.470 --> 00:24:50.480 align:start position:0%
result but happens to be that our result
 

00:24:50.480 --> 00:24:51.990 align:start position:0%
result but happens to be that our result
is<00:24:50.559><c> actually</c><00:24:50.880><c> a</c><00:24:50.960><c> hash</c><00:24:51.279><c> map</c><00:24:51.520><c> because</c><00:24:51.760><c> we</c>

00:24:51.990 --> 00:24:52.000 align:start position:0%
is actually a hash map because we
 

00:24:52.000 --> 00:24:52.950 align:start position:0%
is actually a hash map because we
remember<00:24:52.400><c> we</c><00:24:52.559><c> have</c><00:24:52.640><c> to</c>

00:24:52.950 --> 00:24:52.960 align:start position:0%
remember we have to
 

00:24:52.960 --> 00:24:54.630 align:start position:0%
remember we have to
we<00:24:53.120><c> have</c><00:24:53.200><c> to</c><00:24:53.279><c> return</c><00:24:53.600><c> the</c><00:24:53.760><c> result</c><00:24:54.159><c> such</c><00:24:54.400><c> that</c>

00:24:54.630 --> 00:24:54.640 align:start position:0%
we have to return the result such that
 

00:24:54.640 --> 00:24:56.710 align:start position:0%
we have to return the result such that
it<00:24:54.880><c> matches</c><00:24:55.279><c> the</c><00:24:55.440><c> original</c><00:24:56.000><c> order</c><00:24:56.400><c> of</c><00:24:56.559><c> the</c>

00:24:56.710 --> 00:24:56.720 align:start position:0%
it matches the original order of the
 

00:24:56.720 --> 00:24:57.269 align:start position:0%
it matches the original order of the
queries

00:24:57.269 --> 00:24:57.279 align:start position:0%
queries
 

00:24:57.279 --> 00:24:59.430 align:start position:0%
queries
so<00:24:57.440><c> how</c><00:24:57.600><c> can</c><00:24:57.760><c> we</c><00:24:57.919><c> do</c><00:24:58.080><c> that</c><00:24:58.480><c> well</c><00:24:58.960><c> for</c><00:24:59.200><c> every</c>

00:24:59.430 --> 00:24:59.440 align:start position:0%
so how can we do that well for every
 

00:24:59.440 --> 00:25:00.630 align:start position:0%
so how can we do that well for every
single<00:24:59.840><c> query</c>

00:25:00.630 --> 00:25:00.640 align:start position:0%
single query
 

00:25:00.640 --> 00:25:02.870 align:start position:0%
single query
in<00:25:01.039><c> our</c><00:25:01.279><c> queries</c><00:25:01.919><c> array</c><00:25:02.480><c> what</c><00:25:02.640><c> are</c><00:25:02.720><c> we</c><00:25:02.799><c> going</c>

00:25:02.870 --> 00:25:02.880 align:start position:0%
in our queries array what are we going
 

00:25:02.880 --> 00:25:04.950 align:start position:0%
in our queries array what are we going
to<00:25:03.039><c> do</c><00:25:03.440><c> for</c><00:25:03.600><c> every</c><00:25:03.760><c> single</c><00:25:04.080><c> query</c><00:25:04.400><c> we</c><00:25:04.559><c> just</c>

00:25:04.950 --> 00:25:04.960 align:start position:0%
to do for every single query we just
 

00:25:04.960 --> 00:25:08.230 align:start position:0%
to do for every single query we just
want<00:25:05.440><c> the</c><00:25:06.080><c> length</c><00:25:06.480><c> the</c><00:25:06.720><c> smallest</c><00:25:07.200><c> length</c><00:25:07.679><c> that</c>

00:25:08.230 --> 00:25:08.240 align:start position:0%
want the length the smallest length that
 

00:25:08.240 --> 00:25:10.310 align:start position:0%
want the length the smallest length that
this<00:25:08.480><c> query</c><00:25:09.440><c> the</c><00:25:09.600><c> length</c><00:25:09.840><c> of</c><00:25:09.919><c> the</c><00:25:10.000><c> smallest</c>

00:25:10.310 --> 00:25:10.320 align:start position:0%
this query the length of the smallest
 

00:25:10.320 --> 00:25:11.909 align:start position:0%
this query the length of the smallest
interval<00:25:10.640><c> that</c><00:25:10.799><c> the</c><00:25:10.880><c> query</c><00:25:11.200><c> belongs</c><00:25:11.520><c> to</c><00:25:11.760><c> we</c>

00:25:11.909 --> 00:25:11.919 align:start position:0%
interval that the query belongs to we
 

00:25:11.919 --> 00:25:13.269 align:start position:0%
interval that the query belongs to we
can<00:25:12.000><c> get</c><00:25:12.159><c> that</c><00:25:12.400><c> with</c><00:25:12.720><c> result</c>

00:25:13.269 --> 00:25:13.279 align:start position:0%
can get that with result
 

00:25:13.279 --> 00:25:16.710 align:start position:0%
can get that with result
of<00:25:13.760><c> q</c><00:25:14.559><c> for</c><00:25:14.880><c> every</c><00:25:15.200><c> query</c><00:25:15.679><c> in</c><00:25:15.919><c> our</c><00:25:16.080><c> queries</c>

00:25:16.710 --> 00:25:16.720 align:start position:0%
of q for every query in our queries
 

00:25:16.720 --> 00:25:18.950 align:start position:0%
of q for every query in our queries
and<00:25:17.039><c> with</c><00:25:17.279><c> python</c><00:25:17.760><c> at</c><00:25:17.840><c> least</c><00:25:18.080><c> you</c><00:25:18.159><c> can</c><00:25:18.320><c> do</c><00:25:18.640><c> list</c>

00:25:18.950 --> 00:25:18.960 align:start position:0%
and with python at least you can do list
 

00:25:18.960 --> 00:25:19.830 align:start position:0%
and with python at least you can do list
comprehension

00:25:19.830 --> 00:25:19.840 align:start position:0%
comprehension
 

00:25:19.840 --> 00:25:22.070 align:start position:0%
comprehension
so<00:25:20.000><c> we</c><00:25:20.159><c> can</c><00:25:20.320><c> create</c><00:25:20.720><c> a</c><00:25:20.880><c> list</c><00:25:21.200><c> like</c><00:25:21.360><c> this</c><00:25:21.679><c> on</c><00:25:21.840><c> the</c>

00:25:22.070 --> 00:25:22.080 align:start position:0%
so we can create a list like this on the
 

00:25:22.080 --> 00:25:23.350 align:start position:0%
so we can create a list like this on the
fly<00:25:22.799><c> but</c>

00:25:23.350 --> 00:25:23.360 align:start position:0%
fly but
 

00:25:23.360 --> 00:25:25.029 align:start position:0%
fly but
you<00:25:23.440><c> know</c><00:25:23.840><c> this</c><00:25:24.080><c> isn't</c><00:25:24.320><c> really</c><00:25:24.480><c> the</c><00:25:24.640><c> difficult</c>

00:25:25.029 --> 00:25:25.039 align:start position:0%
you know this isn't really the difficult
 

00:25:25.039 --> 00:25:26.710 align:start position:0%
you know this isn't really the difficult
part<00:25:25.279><c> of</c><00:25:25.360><c> this</c><00:25:25.600><c> algorithm</c><00:25:26.000><c> you</c><00:25:26.080><c> could</c><00:25:26.240><c> do</c><00:25:26.400><c> this</c>

00:25:26.710 --> 00:25:26.720 align:start position:0%
part of this algorithm you could do this
 

00:25:26.720 --> 00:25:28.950 align:start position:0%
part of this algorithm you could do this
with<00:25:26.880><c> a</c><00:25:26.960><c> few</c><00:25:27.200><c> extra</c><00:25:27.440><c> lines</c><00:25:27.679><c> of</c><00:25:27.840><c> code</c><00:25:28.559><c> in</c><00:25:28.799><c> other</c>

00:25:28.950 --> 00:25:28.960 align:start position:0%
with a few extra lines of code in other
 

00:25:28.960 --> 00:25:30.549 align:start position:0%
with a few extra lines of code in other
languages<00:25:29.440><c> if</c><00:25:29.600><c> you</c><00:25:29.679><c> needed</c><00:25:30.080><c> to</c>

00:25:30.549 --> 00:25:30.559 align:start position:0%
languages if you needed to
 

00:25:30.559 --> 00:25:32.870 align:start position:0%
languages if you needed to
okay<00:25:30.880><c> but</c><00:25:31.039><c> that</c><00:25:31.279><c> is</c><00:25:31.440><c> the</c><00:25:31.600><c> entire</c><00:25:32.080><c> code</c><00:25:32.480><c> it</c>

00:25:32.870 --> 00:25:32.880 align:start position:0%
okay but that is the entire code it
 

00:25:32.880 --> 00:25:34.870 align:start position:0%
okay but that is the entire code it
won't<00:25:33.120><c> be</c><00:25:33.440><c> super</c><00:25:33.919><c> different</c><00:25:34.400><c> if</c><00:25:34.480><c> you're</c>

00:25:34.870 --> 00:25:34.880 align:start position:0%
won't be super different if you're
 

00:25:34.880 --> 00:25:36.390 align:start position:0%
won't be super different if you're
doing<00:25:35.200><c> like</c><00:25:35.440><c> java</c><00:25:35.840><c> or</c><00:25:35.919><c> something</c><00:25:36.240><c> it's</c>

00:25:36.390 --> 00:25:36.400 align:start position:0%
doing like java or something it's
 

00:25:36.400 --> 00:25:38.230 align:start position:0%
doing like java or something it's
probably<00:25:36.640><c> just</c><00:25:36.799><c> going</c><00:25:36.880><c> to</c><00:25:36.960><c> be</c><00:25:37.279><c> a</c><00:25:37.360><c> different</c>

00:25:38.230 --> 00:25:38.240 align:start position:0%
probably just going to be a different
 

00:25:38.240 --> 00:25:40.070 align:start position:0%
probably just going to be a different
min<00:25:38.480><c> heap</c><00:25:38.720><c> library</c><00:25:39.279><c> as</c><00:25:39.440><c> well</c><00:25:39.600><c> as</c><00:25:39.760><c> probably</c>

00:25:40.070 --> 00:25:40.080 align:start position:0%
min heap library as well as probably
 

00:25:40.080 --> 00:25:41.510 align:start position:0%
min heap library as well as probably
this<00:25:40.400><c> line</c><00:25:40.640><c> is</c><00:25:40.799><c> going</c><00:25:40.880><c> to</c><00:25:40.960><c> be</c><00:25:41.039><c> different</c><00:25:41.360><c> but</c>

00:25:41.510 --> 00:25:41.520 align:start position:0%
this line is going to be different but
 

00:25:41.520 --> 00:25:42.470 align:start position:0%
this line is going to be different but
for<00:25:41.679><c> the</c><00:25:41.840><c> most</c><00:25:42.080><c> part</c>

00:25:42.470 --> 00:25:42.480 align:start position:0%
for the most part
 

00:25:42.480 --> 00:25:43.990 align:start position:0%
for the most part
you're<00:25:42.640><c> going</c><00:25:42.799><c> to</c><00:25:42.880><c> be</c><00:25:43.039><c> needing</c><00:25:43.360><c> a</c><00:25:43.440><c> hash</c><00:25:43.760><c> map</c>

00:25:43.990 --> 00:25:44.000 align:start position:0%
you're going to be needing a hash map
 

00:25:44.000 --> 00:25:45.510 align:start position:0%
you're going to be needing a hash map
probably<00:25:44.640><c> and</c><00:25:44.799><c> you're</c><00:25:44.960><c> going</c><00:25:45.039><c> to</c><00:25:45.120><c> be</c><00:25:45.200><c> needing</c>

00:25:45.510 --> 00:25:45.520 align:start position:0%
probably and you're going to be needing
 

00:25:45.520 --> 00:25:46.950 align:start position:0%
probably and you're going to be needing
a<00:25:45.600><c> min</c><00:25:45.840><c> heap</c><00:25:46.080><c> you're</c><00:25:46.159><c> going</c><00:25:46.240><c> to</c><00:25:46.320><c> need</c><00:25:46.480><c> to</c><00:25:46.640><c> sort</c>

00:25:46.950 --> 00:25:46.960 align:start position:0%
a min heap you're going to need to sort
 

00:25:46.960 --> 00:25:47.590 align:start position:0%
a min heap you're going to need to sort
these

00:25:47.590 --> 00:25:47.600 align:start position:0%
these
 

00:25:47.600 --> 00:25:50.149 align:start position:0%
these
input<00:25:48.000><c> arrays</c><00:25:48.960><c> and</c><00:25:49.440><c> remember</c><00:25:49.840><c> the</c><00:25:50.000><c> time</c>

00:25:50.149 --> 00:25:50.159 align:start position:0%
input arrays and remember the time
 

00:25:50.159 --> 00:25:51.590 align:start position:0%
input arrays and remember the time
complexity<00:25:50.640><c> is</c><00:25:50.720><c> just</c><00:25:50.880><c> going</c><00:25:50.880><c> to</c><00:25:50.960><c> be</c><00:25:51.120><c> big</c><00:25:51.360><c> o</c>

00:25:51.590 --> 00:25:51.600 align:start position:0%
complexity is just going to be big o
 

00:25:51.600 --> 00:25:54.070 align:start position:0%
complexity is just going to be big o
and<00:25:51.919><c> log</c><00:25:52.240><c> n</c><00:25:52.480><c> where</c><00:25:52.799><c> n</c><00:25:53.120><c> is</c><00:25:53.200><c> the</c><00:25:53.360><c> length</c><00:25:53.760><c> of</c><00:25:53.840><c> the</c>

00:25:54.070 --> 00:25:54.080 align:start position:0%
and log n where n is the length of the
 

00:25:54.080 --> 00:25:54.789 align:start position:0%
and log n where n is the length of the
intervals

00:25:54.789 --> 00:25:54.799 align:start position:0%
intervals
 

00:25:54.799 --> 00:25:58.630 align:start position:0%
intervals
and<00:25:55.200><c> q</c><00:25:55.760><c> log</c><00:25:56.159><c> q</c><00:25:56.720><c> where</c><00:25:57.039><c> q</c><00:25:57.600><c> is</c><00:25:57.760><c> the</c><00:25:57.919><c> length</c><00:25:58.400><c> of</c>

00:25:58.630 --> 00:25:58.640 align:start position:0%
and q log q where q is the length of
 

00:25:58.640 --> 00:26:01.110 align:start position:0%
and q log q where q is the length of
queries<00:25:59.440><c> because</c><00:25:59.840><c> the</c><00:25:59.919><c> main</c><00:26:00.159><c> time</c><00:26:00.400><c> complexity</c>

00:26:01.110 --> 00:26:01.120 align:start position:0%
queries because the main time complexity
 

00:26:01.120 --> 00:26:02.470 align:start position:0%
queries because the main time complexity
is<00:26:01.279><c> coming</c><00:26:01.520><c> from</c><00:26:01.760><c> the</c><00:26:01.840><c> fact</c><00:26:02.080><c> that</c><00:26:02.240><c> we're</c>

00:26:02.470 --> 00:26:02.480 align:start position:0%
is coming from the fact that we're
 

00:26:02.480 --> 00:26:04.149 align:start position:0%
is coming from the fact that we're
sorting<00:26:02.960><c> both</c><00:26:03.279><c> of</c><00:26:03.360><c> the</c><00:26:03.600><c> inputs</c>

00:26:04.149 --> 00:26:04.159 align:start position:0%
sorting both of the inputs
 

00:26:04.159 --> 00:26:05.990 align:start position:0%
sorting both of the inputs
but<00:26:04.320><c> other</c><00:26:04.559><c> than</c><00:26:04.720><c> that</c><00:26:05.200><c> i</c><00:26:05.360><c> hope</c><00:26:05.520><c> that</c><00:26:05.679><c> this</c><00:26:05.840><c> was</c>

00:26:05.990 --> 00:26:06.000 align:start position:0%
but other than that i hope that this was
 

00:26:06.000 --> 00:26:07.669 align:start position:0%
but other than that i hope that this was
helpful<00:26:06.320><c> for</c><00:26:06.480><c> you</c><00:26:06.640><c> this</c><00:26:06.880><c> is</c><00:26:06.960><c> not</c><00:26:07.200><c> an</c><00:26:07.360><c> easy</c>

00:26:07.669 --> 00:26:07.679 align:start position:0%
helpful for you this is not an easy
 

00:26:07.679 --> 00:26:08.549 align:start position:0%
helpful for you this is not an easy
problem

00:26:08.549 --> 00:26:08.559 align:start position:0%
problem
 

00:26:08.559 --> 00:26:09.909 align:start position:0%
problem
i<00:26:08.640><c> hope</c><00:26:08.880><c> that</c><00:26:09.039><c> you</c><00:26:09.200><c> did</c><00:26:09.360><c> gain</c><00:26:09.600><c> some</c>

00:26:09.909 --> 00:26:09.919 align:start position:0%
i hope that you did gain some
 

00:26:09.919 --> 00:26:11.750 align:start position:0%
i hope that you did gain some
understanding<00:26:10.559><c> if</c><00:26:10.640><c> this</c><00:26:10.799><c> was</c><00:26:10.960><c> helpful</c><00:26:11.440><c> please</c>

00:26:11.750 --> 00:26:11.760 align:start position:0%
understanding if this was helpful please
 

00:26:11.760 --> 00:26:13.269 align:start position:0%
understanding if this was helpful please
like<00:26:12.000><c> and</c><00:26:12.080><c> subscribe</c><00:26:12.559><c> it</c><00:26:12.720><c> supports</c><00:26:13.120><c> the</c>

00:26:13.269 --> 00:26:13.279 align:start position:0%
like and subscribe it supports the
 

00:26:13.279 --> 00:26:13.669 align:start position:0%
like and subscribe it supports the
channel

00:26:13.669 --> 00:26:13.679 align:start position:0%
channel
 

00:26:13.679 --> 00:26:16.070 align:start position:0%
channel
a<00:26:13.919><c> lot</c><00:26:14.320><c> and</c><00:26:14.480><c> i'll</c><00:26:14.720><c> hopefully</c><00:26:15.440><c> see</c><00:26:15.600><c> you</c><00:26:15.760><c> pretty</c>

00:26:16.070 --> 00:26:16.080 align:start position:0%
a lot and i'll hopefully see you pretty
 

00:26:16.080 --> 00:26:23.919 align:start position:0%
a lot and i'll hopefully see you pretty
soon<00:26:16.640><c> thanks</c><00:26:16.880><c> for</c><00:26:20.919><c> watching</c>

