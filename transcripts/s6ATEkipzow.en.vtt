WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:01.670 align:start position:0%
 
everyone<00:00:00.560><c> welcome</c><00:00:00.960><c> back</c><00:00:01.199><c> and</c><00:00:01.280><c> let's</c><00:00:01.520><c> write</c>

00:00:01.670 --> 00:00:01.680 align:start position:0%
everyone welcome back and let's write
 

00:00:01.680 --> 00:00:03.110 align:start position:0%
everyone welcome back and let's write
some<00:00:01.839><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.720><c> today</c>

00:00:03.110 --> 00:00:03.120 align:start position:0%
some more neat code today
 

00:00:03.120 --> 00:00:06.389 align:start position:0%
some more neat code today
solving<00:00:03.919><c> validate</c><00:00:04.640><c> binary</c><00:00:05.200><c> search</c><00:00:05.680><c> a</c><00:00:05.839><c> very</c>

00:00:06.389 --> 00:00:06.399 align:start position:0%
solving validate binary search a very
 

00:00:06.399 --> 00:00:09.589 align:start position:0%
solving validate binary search a very
good<00:00:07.040><c> question</c><00:00:07.680><c> for</c><00:00:07.919><c> practicing</c><00:00:08.720><c> binary</c>

00:00:09.589 --> 00:00:09.599 align:start position:0%
good question for practicing binary
 

00:00:09.599 --> 00:00:12.070 align:start position:0%
good question for practicing binary
search<00:00:09.920><c> tree</c><00:00:10.240><c> questions</c><00:00:10.800><c> we're</c><00:00:11.040><c> just</c><00:00:11.360><c> given</c><00:00:11.840><c> a</c>

00:00:12.070 --> 00:00:12.080 align:start position:0%
search tree questions we're just given a
 

00:00:12.080 --> 00:00:14.070 align:start position:0%
search tree questions we're just given a
root<00:00:12.480><c> of</c><00:00:12.639><c> a</c><00:00:12.719><c> binary</c><00:00:13.200><c> search</c><00:00:13.519><c> tree</c><00:00:13.679><c> and</c><00:00:13.759><c> we</c><00:00:13.920><c> just</c>

00:00:14.070 --> 00:00:14.080 align:start position:0%
root of a binary search tree and we just
 

00:00:14.080 --> 00:00:15.030 align:start position:0%
root of a binary search tree and we just
want<00:00:14.240><c> to</c><00:00:14.320><c> determine</c>

00:00:15.030 --> 00:00:15.040 align:start position:0%
want to determine
 

00:00:15.040 --> 00:00:18.230 align:start position:0%
want to determine
is<00:00:15.200><c> it</c><00:00:15.440><c> a</c><00:00:15.759><c> valid</c><00:00:16.240><c> binary</c><00:00:16.720><c> search</c><00:00:17.039><c> tree</c><00:00:17.440><c> or</c><00:00:17.680><c> not</c>

00:00:18.230 --> 00:00:18.240 align:start position:0%
is it a valid binary search tree or not
 

00:00:18.240 --> 00:00:20.550 align:start position:0%
is it a valid binary search tree or not
and<00:00:18.720><c> from</c><00:00:19.359><c> learning</c><00:00:19.680><c> data</c><00:00:19.920><c> structures</c><00:00:20.400><c> and</c>

00:00:20.550 --> 00:00:20.560 align:start position:0%
and from learning data structures and
 

00:00:20.560 --> 00:00:22.630 align:start position:0%
and from learning data structures and
algorithms<00:00:21.039><c> you</c><00:00:21.199><c> might</c><00:00:21.520><c> know</c><00:00:21.760><c> that</c><00:00:21.920><c> a</c><00:00:22.160><c> valid</c>

00:00:22.630 --> 00:00:22.640 align:start position:0%
algorithms you might know that a valid
 

00:00:22.640 --> 00:00:23.910 align:start position:0%
algorithms you might know that a valid
binary<00:00:23.119><c> search</c><00:00:23.439><c> tree</c>

00:00:23.910 --> 00:00:23.920 align:start position:0%
binary search tree
 

00:00:23.920 --> 00:00:27.109 align:start position:0%
binary search tree
is<00:00:24.480><c> such</c><00:00:24.960><c> that</c><00:00:25.599><c> we</c><00:00:25.840><c> have</c><00:00:26.160><c> a</c><00:00:26.560><c> node</c>

00:00:27.109 --> 00:00:27.119 align:start position:0%
is such that we have a node
 

00:00:27.119 --> 00:00:30.390 align:start position:0%
is such that we have a node
like<00:00:27.439><c> two</c><00:00:27.920><c> and</c><00:00:28.560><c> every</c><00:00:29.599><c> every</c>

00:00:30.390 --> 00:00:30.400 align:start position:0%
like two and every every
 

00:00:30.400 --> 00:00:33.670 align:start position:0%
like two and every every
single<00:00:31.199><c> node</c><00:00:31.679><c> in</c><00:00:31.840><c> the</c><00:00:32.079><c> left</c><00:00:32.399><c> subtree</c><00:00:33.120><c> one</c>

00:00:33.670 --> 00:00:33.680 align:start position:0%
single node in the left subtree one
 

00:00:33.680 --> 00:00:36.229 align:start position:0%
single node in the left subtree one
and<00:00:33.840><c> if</c><00:00:34.000><c> it</c><00:00:34.160><c> possibly</c><00:00:34.640><c> had</c><00:00:34.880><c> other</c><00:00:35.200><c> children</c><00:00:36.000><c> is</c>

00:00:36.229 --> 00:00:36.239 align:start position:0%
and if it possibly had other children is
 

00:00:36.239 --> 00:00:37.350 align:start position:0%
and if it possibly had other children is
going<00:00:36.480><c> to</c><00:00:36.640><c> be</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
going to be
 

00:00:37.360 --> 00:00:40.150 align:start position:0%
going to be
less<00:00:38.079><c> than</c><00:00:38.640><c> two</c><00:00:38.960><c> right</c><00:00:39.200><c> so</c><00:00:39.440><c> one</c><00:00:39.760><c> is</c><00:00:39.920><c> going</c><00:00:40.079><c> to</c>

00:00:40.150 --> 00:00:40.160 align:start position:0%
less than two right so one is going to
 

00:00:40.160 --> 00:00:40.470 align:start position:0%
less than two right so one is going to
be

00:00:40.470 --> 00:00:40.480 align:start position:0%
be
 

00:00:40.480 --> 00:00:44.470 align:start position:0%
be
less<00:00:40.800><c> than</c><00:00:41.360><c> two</c><00:00:41.760><c> and</c><00:00:42.239><c> similarly</c><00:00:43.040><c> every</c><00:00:43.600><c> single</c>

00:00:44.470 --> 00:00:44.480 align:start position:0%
less than two and similarly every single
 

00:00:44.480 --> 00:00:47.590 align:start position:0%
less than two and similarly every single
value<00:00:45.280><c> in</c><00:00:45.440><c> the</c><00:00:45.760><c> right</c><00:00:46.000><c> subtree</c><00:00:47.039><c> three</c>

00:00:47.590 --> 00:00:47.600 align:start position:0%
value in the right subtree three
 

00:00:47.600 --> 00:00:50.150 align:start position:0%
value in the right subtree three
including<00:00:48.480><c> three's</c><00:00:48.960><c> potential</c><00:00:49.520><c> children's</c>

00:00:50.150 --> 00:00:50.160 align:start position:0%
including three's potential children's
 

00:00:50.160 --> 00:00:51.350 align:start position:0%
including three's potential children's
if<00:00:50.320><c> it</c><00:00:50.480><c> had</c><00:00:50.800><c> any</c>

00:00:51.350 --> 00:00:51.360 align:start position:0%
if it had any
 

00:00:51.360 --> 00:00:54.709 align:start position:0%
if it had any
are<00:00:51.680><c> going</c><00:00:52.000><c> to</c><00:00:52.239><c> be</c><00:00:53.039><c> greater</c><00:00:53.920><c> than</c>

00:00:54.709 --> 00:00:54.719 align:start position:0%
are going to be greater than
 

00:00:54.719 --> 00:00:58.630 align:start position:0%
are going to be greater than
two<00:00:55.360><c> not</c><00:00:55.680><c> greater</c><00:00:56.160><c> or</c><00:00:56.480><c> equal</c><00:00:57.440><c> strictly</c>

00:00:58.630 --> 00:00:58.640 align:start position:0%
two not greater or equal strictly
 

00:00:58.640 --> 00:01:01.510 align:start position:0%
two not greater or equal strictly
greater<00:00:59.359><c> and</c><00:00:59.600><c> we</c><00:00:59.920><c> know</c><00:01:00.160><c> this</c><00:01:00.480><c> is</c><00:01:00.640><c> a</c><00:01:00.800><c> recursive</c>

00:01:01.510 --> 00:01:01.520 align:start position:0%
greater and we know this is a recursive
 

00:01:01.520 --> 00:01:03.029 align:start position:0%
greater and we know this is a recursive
definition<00:01:02.160><c> so</c><00:01:02.399><c> if</c>

00:01:03.029 --> 00:01:03.039 align:start position:0%
definition so if
 

00:01:03.039 --> 00:01:05.830 align:start position:0%
definition so if
we<00:01:03.199><c> had</c><00:01:03.440><c> three</c><00:01:04.000><c> and</c><00:01:04.159><c> it</c><00:01:04.239><c> had</c><00:01:04.559><c> some</c><00:01:04.879><c> children</c>

00:01:05.830 --> 00:01:05.840 align:start position:0%
we had three and it had some children
 

00:01:05.840 --> 00:01:06.550 align:start position:0%
we had three and it had some children
like

00:01:06.550 --> 00:01:06.560 align:start position:0%
like
 

00:01:06.560 --> 00:01:09.910 align:start position:0%
like
five<00:01:07.360><c> and</c><00:01:07.920><c> maybe</c><00:01:08.400><c> four</c><00:01:08.720><c> over</c><00:01:08.960><c> here</c><00:01:09.439><c> we</c><00:01:09.680><c> see</c>

00:01:09.910 --> 00:01:09.920 align:start position:0%
five and maybe four over here we see
 

00:01:09.920 --> 00:01:11.030 align:start position:0%
five and maybe four over here we see
that<00:01:10.240><c> it's</c><00:01:10.640><c> not</c>

00:01:11.030 --> 00:01:11.040 align:start position:0%
that it's not
 

00:01:11.040 --> 00:01:14.070 align:start position:0%
that it's not
a<00:01:11.200><c> binary</c><00:01:11.760><c> search</c><00:01:12.080><c> tree</c><00:01:12.640><c> because</c><00:01:13.280><c> four</c>

00:01:14.070 --> 00:01:14.080 align:start position:0%
a binary search tree because four
 

00:01:14.080 --> 00:01:16.789 align:start position:0%
a binary search tree because four
should<00:01:14.400><c> be</c><00:01:14.720><c> less</c><00:01:15.360><c> than</c><00:01:15.680><c> three</c><00:01:16.080><c> four</c><00:01:16.320><c> should</c><00:01:16.479><c> be</c>

00:01:16.789 --> 00:01:16.799 align:start position:0%
should be less than three four should be
 

00:01:16.799 --> 00:01:18.710 align:start position:0%
should be less than three four should be
less<00:01:17.040><c> than</c><00:01:17.280><c> three</c><00:01:17.520><c> but</c><00:01:17.680><c> it's</c><00:01:18.000><c> not</c>

00:01:18.710 --> 00:01:18.720 align:start position:0%
less than three but it's not
 

00:01:18.720 --> 00:01:21.190 align:start position:0%
less than three but it's not
so<00:01:18.960><c> this</c><00:01:19.200><c> is</c><00:01:19.280><c> not</c><00:01:19.520><c> a</c><00:01:19.680><c> binary</c><00:01:20.080><c> search</c><00:01:20.400><c> tree</c><00:01:20.880><c> so</c>

00:01:21.190 --> 00:01:21.200 align:start position:0%
so this is not a binary search tree so
 

00:01:21.200 --> 00:01:22.550 align:start position:0%
so this is not a binary search tree so
we<00:01:21.600><c> need</c><00:01:22.000><c> to</c><00:01:22.240><c> do</c>

00:01:22.550 --> 00:01:22.560 align:start position:0%
we need to do
 

00:01:22.560 --> 00:01:24.870 align:start position:0%
we need to do
a<00:01:22.799><c> recursive</c><00:01:23.600><c> depth</c><00:01:23.840><c> first</c><00:01:24.080><c> search</c><00:01:24.400><c> to</c><00:01:24.560><c> solve</c>

00:01:24.870 --> 00:01:24.880 align:start position:0%
a recursive depth first search to solve
 

00:01:24.880 --> 00:01:25.670 align:start position:0%
a recursive depth first search to solve
this<00:01:25.119><c> problem</c>

00:01:25.670 --> 00:01:25.680 align:start position:0%
this problem
 

00:01:25.680 --> 00:01:27.749 align:start position:0%
this problem
but<00:01:25.920><c> let</c><00:01:26.080><c> me</c><00:01:26.320><c> show</c><00:01:26.479><c> you</c><00:01:26.640><c> what</c><00:01:26.799><c> you</c><00:01:27.119><c> might</c><00:01:27.439><c> try</c>

00:01:27.749 --> 00:01:27.759 align:start position:0%
but let me show you what you might try
 

00:01:27.759 --> 00:01:29.190 align:start position:0%
but let me show you what you might try
you<00:01:28.080><c> might</c><00:01:28.400><c> just</c><00:01:28.720><c> try</c>

00:01:29.190 --> 00:01:29.200 align:start position:0%
you might just try
 

00:01:29.200 --> 00:01:31.749 align:start position:0%
you might just try
a<00:01:29.439><c> simple</c><00:01:29.840><c> solution</c><00:01:30.320><c> like</c><00:01:30.560><c> hey</c><00:01:30.880><c> five</c><00:01:31.360><c> we</c><00:01:31.520><c> have</c>

00:01:31.749 --> 00:01:31.759 align:start position:0%
a simple solution like hey five we have
 

00:01:31.759 --> 00:01:32.710 align:start position:0%
a simple solution like hey five we have
five<00:01:32.079><c> is</c><00:01:32.159><c> the</c><00:01:32.320><c> root</c>

00:01:32.710 --> 00:01:32.720 align:start position:0%
five is the root
 

00:01:32.720 --> 00:01:35.590 align:start position:0%
five is the root
let's<00:01:32.960><c> check</c><00:01:33.200><c> its</c><00:01:33.360><c> child</c><00:01:33.680><c> okay</c><00:01:34.000><c> three</c><00:01:34.880><c> is</c><00:01:35.360><c> less</c>

00:01:35.590 --> 00:01:35.600 align:start position:0%
let's check its child okay three is less
 

00:01:35.600 --> 00:01:37.190 align:start position:0%
let's check its child okay three is less
than<00:01:35.840><c> five</c><00:01:36.159><c> that's</c><00:01:36.479><c> good</c>

00:01:37.190 --> 00:01:37.200 align:start position:0%
than five that's good
 

00:01:37.200 --> 00:01:40.230 align:start position:0%
than five that's good
okay<00:01:37.600><c> let's</c><00:01:37.920><c> check</c><00:01:38.240><c> the</c><00:01:38.400><c> right</c><00:01:38.720><c> child</c><00:01:39.119><c> okay</c>

00:01:40.230 --> 00:01:40.240 align:start position:0%
okay let's check the right child okay
 

00:01:40.240 --> 00:01:43.830 align:start position:0%
okay let's check the right child okay
seven<00:01:40.799><c> is</c><00:01:41.360><c> greater</c><00:01:41.840><c> than</c><00:01:42.560><c> five</c><00:01:43.119><c> that's</c><00:01:43.520><c> good</c>

00:01:43.830 --> 00:01:43.840 align:start position:0%
seven is greater than five that's good
 

00:01:43.840 --> 00:01:44.310 align:start position:0%
seven is greater than five that's good
right

00:01:44.310 --> 00:01:44.320 align:start position:0%
right
 

00:01:44.320 --> 00:01:46.550 align:start position:0%
right
okay<00:01:44.560><c> let's</c><00:01:44.799><c> now</c><00:01:44.960><c> let's</c><00:01:45.520><c> check</c><00:01:45.920><c> seven</c><00:01:46.320><c> because</c>

00:01:46.550 --> 00:01:46.560 align:start position:0%
okay let's now let's check seven because
 

00:01:46.560 --> 00:01:47.510 align:start position:0%
okay let's now let's check seven because
we<00:01:46.720><c> see</c><00:01:47.040><c> three</c>

00:01:47.510 --> 00:01:47.520 align:start position:0%
we see three
 

00:01:47.520 --> 00:01:49.510 align:start position:0%
we see three
it<00:01:47.600><c> doesn't</c><00:01:47.920><c> have</c><00:01:48.079><c> any</c><00:01:48.320><c> children</c><00:01:49.040><c> that's</c><00:01:49.360><c> good</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
it doesn't have any children that's good
 

00:01:49.520 --> 00:01:50.950 align:start position:0%
it doesn't have any children that's good
for<00:01:49.680><c> us</c><00:01:49.840><c> we</c><00:01:50.000><c> don't</c><00:01:50.159><c> have</c><00:01:50.240><c> to</c><00:01:50.399><c> check</c><00:01:50.640><c> anything</c>

00:01:50.950 --> 00:01:50.960 align:start position:0%
for us we don't have to check anything
 

00:01:50.960 --> 00:01:51.270 align:start position:0%
for us we don't have to check anything
but

00:01:51.270 --> 00:01:51.280 align:start position:0%
but
 

00:01:51.280 --> 00:01:54.630 align:start position:0%
but
seven<00:01:51.680><c> has</c><00:01:52.240><c> a</c><00:01:52.479><c> left</c><00:01:52.799><c> child</c><00:01:53.520><c> it</c><00:01:53.759><c> has</c><00:01:54.159><c> four</c><00:01:54.399><c> as</c><00:01:54.560><c> a</c>

00:01:54.630 --> 00:01:54.640 align:start position:0%
seven has a left child it has four as a
 

00:01:54.640 --> 00:01:55.910 align:start position:0%
seven has a left child it has four as a
left<00:01:54.960><c> child</c><00:01:55.360><c> well</c>

00:01:55.910 --> 00:01:55.920 align:start position:0%
left child well
 

00:01:55.920 --> 00:01:58.950 align:start position:0%
left child well
that's<00:01:56.320><c> good</c><00:01:56.960><c> four</c><00:01:57.280><c> is</c><00:01:57.520><c> less</c><00:01:57.759><c> than</c><00:01:58.079><c> seven</c>

00:01:58.950 --> 00:01:58.960 align:start position:0%
that's good four is less than seven
 

00:01:58.960 --> 00:02:01.590 align:start position:0%
that's good four is less than seven
and<00:01:59.200><c> it</c><00:01:59.360><c> has</c><00:01:59.520><c> a</c><00:01:59.680><c> right</c><00:02:00.000><c> child</c><00:02:00.560><c> eight</c><00:02:01.040><c> that's</c>

00:02:01.590 --> 00:02:01.600 align:start position:0%
and it has a right child eight that's
 

00:02:01.600 --> 00:02:02.389 align:start position:0%
and it has a right child eight that's
good

00:02:02.389 --> 00:02:02.399 align:start position:0%
good
 

00:02:02.399 --> 00:02:05.590 align:start position:0%
good
eight<00:02:02.799><c> is</c><00:02:02.960><c> greater</c><00:02:03.439><c> than</c><00:02:03.759><c> seven</c><00:02:04.320><c> so</c><00:02:04.719><c> is</c><00:02:05.040><c> this</c><00:02:05.360><c> a</c>

00:02:05.590 --> 00:02:05.600 align:start position:0%
eight is greater than seven so is this a
 

00:02:05.600 --> 00:02:07.030 align:start position:0%
eight is greater than seven so is this a
binary<00:02:06.159><c> search</c><00:02:06.479><c> tree</c>

00:02:07.030 --> 00:02:07.040 align:start position:0%
binary search tree
 

00:02:07.040 --> 00:02:10.309 align:start position:0%
binary search tree
the<00:02:07.360><c> answer</c><00:02:08.000><c> is</c><00:02:08.720><c> no</c><00:02:09.440><c> because</c>

00:02:10.309 --> 00:02:10.319 align:start position:0%
the answer is no because
 

00:02:10.319 --> 00:02:12.949 align:start position:0%
the answer is no because
it's<00:02:10.560><c> really</c><00:02:10.959><c> easy</c><00:02:11.200><c> to</c><00:02:11.440><c> miss</c><00:02:11.920><c> we</c><00:02:12.080><c> have</c><00:02:12.239><c> a</c><00:02:12.480><c> 5</c><00:02:12.879><c> as</c>

00:02:12.949 --> 00:02:12.959 align:start position:0%
it's really easy to miss we have a 5 as
 

00:02:12.959 --> 00:02:13.750 align:start position:0%
it's really easy to miss we have a 5 as
the<00:02:13.200><c> root</c>

00:02:13.750 --> 00:02:13.760 align:start position:0%
the root
 

00:02:13.760 --> 00:02:17.110 align:start position:0%
the root
we<00:02:13.920><c> have</c><00:02:14.160><c> a</c><00:02:14.480><c> right</c><00:02:14.959><c> subtree</c><00:02:15.760><c> over</c><00:02:16.160><c> here</c><00:02:16.720><c> and</c><00:02:16.879><c> we</c>

00:02:17.110 --> 00:02:17.120 align:start position:0%
we have a right subtree over here and we
 

00:02:17.120 --> 00:02:17.830 align:start position:0%
we have a right subtree over here and we
have<00:02:17.360><c> a</c>

00:02:17.830 --> 00:02:17.840 align:start position:0%
have a
 

00:02:17.840 --> 00:02:20.949 align:start position:0%
have a
4<00:02:18.640><c> in</c><00:02:18.800><c> the</c><00:02:19.120><c> right</c><00:02:20.000><c> subtree</c>

00:02:20.949 --> 00:02:20.959 align:start position:0%
4 in the right subtree
 

00:02:20.959 --> 00:02:25.030 align:start position:0%
4 in the right subtree
but<00:02:21.200><c> we</c><00:02:21.520><c> know</c><00:02:22.400><c> 5</c><00:02:22.959><c> is</c><00:02:23.200><c> not</c><00:02:23.680><c> less</c><00:02:24.239><c> than</c><00:02:24.560><c> 4</c>

00:02:25.030 --> 00:02:25.040 align:start position:0%
but we know 5 is not less than 4
 

00:02:25.040 --> 00:02:27.750 align:start position:0%
but we know 5 is not less than 4
that's<00:02:25.440><c> not</c><00:02:25.760><c> true</c><00:02:26.319><c> so</c><00:02:26.560><c> we</c><00:02:26.720><c> need</c><00:02:26.959><c> a</c><00:02:27.280><c> better</c>

00:02:27.750 --> 00:02:27.760 align:start position:0%
that's not true so we need a better
 

00:02:27.760 --> 00:02:28.470 align:start position:0%
that's not true so we need a better
algorithm

00:02:28.470 --> 00:02:28.480 align:start position:0%
algorithm
 

00:02:28.480 --> 00:02:30.949 align:start position:0%
algorithm
and<00:02:28.640><c> it</c><00:02:28.959><c> requires</c><00:02:29.920><c> depth</c><00:02:30.239><c> first</c><00:02:30.480><c> search</c><00:02:30.800><c> we</c>

00:02:30.949 --> 00:02:30.959 align:start position:0%
and it requires depth first search we
 

00:02:30.959 --> 00:02:31.509 align:start position:0%
and it requires depth first search we
can't

00:02:31.509 --> 00:02:31.519 align:start position:0%
can't
 

00:02:31.519 --> 00:02:34.710 align:start position:0%
can't
just<00:02:32.000><c> check</c><00:02:32.480><c> the</c><00:02:32.800><c> neighbors</c><00:02:33.680><c> so</c><00:02:33.920><c> our</c><00:02:34.160><c> brute</c>

00:02:34.710 --> 00:02:34.720 align:start position:0%
just check the neighbors so our brute
 

00:02:34.720 --> 00:02:35.990 align:start position:0%
just check the neighbors so our brute
force<00:02:35.120><c> approach</c><00:02:35.599><c> would</c><00:02:35.760><c> be</c>

00:02:35.990 --> 00:02:36.000 align:start position:0%
force approach would be
 

00:02:36.000 --> 00:02:38.869 align:start position:0%
force approach would be
for<00:02:36.239><c> five</c><00:02:36.800><c> check</c><00:02:37.360><c> every</c><00:02:37.840><c> value</c><00:02:38.239><c> in</c><00:02:38.400><c> its</c><00:02:38.640><c> left</c>

00:02:38.869 --> 00:02:38.879 align:start position:0%
for five check every value in its left
 

00:02:38.879 --> 00:02:40.710 align:start position:0%
for five check every value in its left
subtree<00:02:39.360><c> make</c><00:02:39.599><c> sure</c><00:02:39.840><c> that</c><00:02:40.080><c> it's</c>

00:02:40.710 --> 00:02:40.720 align:start position:0%
subtree make sure that it's
 

00:02:40.720 --> 00:02:42.470 align:start position:0%
subtree make sure that it's
every<00:02:41.040><c> value</c><00:02:41.360><c> is</c><00:02:41.440><c> less</c><00:02:41.680><c> than</c><00:02:41.920><c> five</c><00:02:42.160><c> and</c><00:02:42.239><c> then</c>

00:02:42.470 --> 00:02:42.480 align:start position:0%
every value is less than five and then
 

00:02:42.480 --> 00:02:43.910 align:start position:0%
every value is less than five and then
check<00:02:42.879><c> every</c><00:02:43.280><c> value</c>

00:02:43.910 --> 00:02:43.920 align:start position:0%
check every value
 

00:02:43.920 --> 00:02:46.550 align:start position:0%
check every value
in<00:02:44.000><c> the</c><00:02:44.160><c> right</c><00:02:44.400><c> subtree</c><00:02:44.879><c> make</c><00:02:45.040><c> sure</c><00:02:45.280><c> five</c><00:02:46.000><c> is</c>

00:02:46.550 --> 00:02:46.560 align:start position:0%
in the right subtree make sure five is
 

00:02:46.560 --> 00:02:47.910 align:start position:0%
in the right subtree make sure five is
less<00:02:46.800><c> than</c><00:02:46.959><c> every</c><00:02:47.200><c> value</c><00:02:47.519><c> in</c><00:02:47.599><c> the</c><00:02:47.680><c> right</c>

00:02:47.910 --> 00:02:47.920 align:start position:0%
less than every value in the right
 

00:02:47.920 --> 00:02:48.710 align:start position:0%
less than every value in the right
subtree

00:02:48.710 --> 00:02:48.720 align:start position:0%
subtree
 

00:02:48.720 --> 00:02:51.430 align:start position:0%
subtree
and<00:02:48.879><c> so</c><00:02:49.040><c> we</c><00:02:49.200><c> would</c><00:02:49.440><c> need</c><00:02:49.840><c> n</c><00:02:50.319><c> comparisons</c><00:02:51.120><c> to</c><00:02:51.280><c> do</c>

00:02:51.430 --> 00:02:51.440 align:start position:0%
and so we would need n comparisons to do
 

00:02:51.440 --> 00:02:52.070 align:start position:0%
and so we would need n comparisons to do
that<00:02:51.760><c> right</c>

00:02:52.070 --> 00:02:52.080 align:start position:0%
that right
 

00:02:52.080 --> 00:02:54.550 align:start position:0%
that right
o<00:02:52.239><c> of</c><00:02:52.400><c> n</c><00:02:53.120><c> and</c><00:02:53.200><c> then</c><00:02:53.360><c> we'd</c><00:02:53.599><c> have</c><00:02:53.680><c> to</c><00:02:53.840><c> repeat</c><00:02:54.319><c> that</c>

00:02:54.550 --> 00:02:54.560 align:start position:0%
o of n and then we'd have to repeat that
 

00:02:54.560 --> 00:02:55.350 align:start position:0%
o of n and then we'd have to repeat that
process<00:02:55.040><c> for</c>

00:02:55.350 --> 00:02:55.360 align:start position:0%
process for
 

00:02:55.360 --> 00:02:57.670 align:start position:0%
process for
every<00:02:55.920><c> sub</c><00:02:56.160><c> tree</c><00:02:56.400><c> so</c><00:02:56.640><c> seven</c><00:02:56.959><c> we</c><00:02:57.040><c> got</c><00:02:57.200><c> to</c><00:02:57.280><c> repeat</c>

00:02:57.670 --> 00:02:57.680 align:start position:0%
every sub tree so seven we got to repeat
 

00:02:57.680 --> 00:02:58.790 align:start position:0%
every sub tree so seven we got to repeat
that<00:02:58.000><c> compare</c><00:02:58.319><c> it</c><00:02:58.400><c> to</c>

00:02:58.790 --> 00:02:58.800 align:start position:0%
that compare it to
 

00:02:58.800 --> 00:03:02.550 align:start position:0%
that compare it to
every<00:02:59.519><c> potential</c><00:03:00.560><c> descendant</c><00:03:01.599><c> of</c><00:03:01.760><c> itself</c>

00:03:02.550 --> 00:03:02.560 align:start position:0%
every potential descendant of itself
 

00:03:02.560 --> 00:03:04.790 align:start position:0%
every potential descendant of itself
which<00:03:02.800><c> is</c><00:03:02.959><c> going</c><00:03:03.040><c> to</c><00:03:03.120><c> be</c><00:03:03.280><c> o</c><00:03:03.519><c> of</c><00:03:03.680><c> n</c><00:03:04.239><c> and</c><00:03:04.400><c> the</c><00:03:04.560><c> time</c>

00:03:04.790 --> 00:03:04.800 align:start position:0%
which is going to be o of n and the time
 

00:03:04.800 --> 00:03:05.990 align:start position:0%
which is going to be o of n and the time
complexity<00:03:05.360><c> of</c><00:03:05.440><c> that</c>

00:03:05.990 --> 00:03:06.000 align:start position:0%
complexity of that
 

00:03:06.000 --> 00:03:08.630 align:start position:0%
complexity of that
overall<00:03:06.560><c> is</c><00:03:06.720><c> going</c><00:03:06.800><c> to</c><00:03:06.959><c> be</c><00:03:07.280><c> o</c><00:03:07.680><c> n</c><00:03:08.000><c> squared</c><00:03:08.480><c> so</c>

00:03:08.630 --> 00:03:08.640 align:start position:0%
overall is going to be o n squared so
 

00:03:08.640 --> 00:03:09.430 align:start position:0%
overall is going to be o n squared so
can<00:03:08.879><c> we</c><00:03:09.040><c> do</c>

00:03:09.430 --> 00:03:09.440 align:start position:0%
can we do
 

00:03:09.440 --> 00:03:12.470 align:start position:0%
can we do
better<00:03:10.080><c> than</c><00:03:10.400><c> o</c><00:03:10.560><c> of</c><00:03:10.720><c> n</c><00:03:10.959><c> squared</c><00:03:11.680><c> so</c><00:03:12.000><c> one</c>

00:03:12.470 --> 00:03:12.480 align:start position:0%
better than o of n squared so one
 

00:03:12.480 --> 00:03:15.750 align:start position:0%
better than o of n squared so one
thing<00:03:12.720><c> to</c><00:03:12.959><c> notice</c><00:03:13.440><c> is</c><00:03:14.000><c> the</c><00:03:14.239><c> root</c><00:03:14.640><c> value</c><00:03:15.120><c> can</c><00:03:15.360><c> be</c>

00:03:15.750 --> 00:03:15.760 align:start position:0%
thing to notice is the root value can be
 

00:03:15.760 --> 00:03:18.630 align:start position:0%
thing to notice is the root value can be
any<00:03:16.080><c> value</c><00:03:16.560><c> right</c><00:03:16.800><c> there's</c><00:03:17.120><c> no</c><00:03:17.440><c> restrictions</c>

00:03:18.630 --> 00:03:18.640 align:start position:0%
any value right there's no restrictions
 

00:03:18.640 --> 00:03:20.149 align:start position:0%
any value right there's no restrictions
on<00:03:18.879><c> what</c><00:03:19.040><c> the</c><00:03:19.200><c> value</c><00:03:19.599><c> can</c><00:03:19.840><c> be</c>

00:03:20.149 --> 00:03:20.159 align:start position:0%
on what the value can be
 

00:03:20.159 --> 00:03:22.390 align:start position:0%
on what the value can be
because<00:03:20.720><c> it</c><00:03:20.879><c> doesn't</c><00:03:21.120><c> have</c><00:03:21.280><c> any</c><00:03:21.440><c> parents</c><00:03:21.920><c> so</c>

00:03:22.390 --> 00:03:22.400 align:start position:0%
because it doesn't have any parents so
 

00:03:22.400 --> 00:03:23.670 align:start position:0%
because it doesn't have any parents so
we<00:03:22.560><c> can</c><00:03:22.879><c> say</c><00:03:23.200><c> that</c>

00:03:23.670 --> 00:03:23.680 align:start position:0%
we can say that
 

00:03:23.680 --> 00:03:26.550 align:start position:0%
we can say that
it<00:03:23.840><c> can</c><00:03:24.080><c> be</c><00:03:24.560><c> any</c><00:03:24.959><c> value</c><00:03:25.440><c> between</c><00:03:26.080><c> negative</c>

00:03:26.550 --> 00:03:26.560 align:start position:0%
it can be any value between negative
 

00:03:26.560 --> 00:03:27.509 align:start position:0%
it can be any value between negative
infinity

00:03:27.509 --> 00:03:27.519 align:start position:0%
infinity
 

00:03:27.519 --> 00:03:30.869 align:start position:0%
infinity
and<00:03:28.159><c> positive</c><00:03:28.640><c> infinity</c><00:03:29.599><c> and</c><00:03:30.159><c> as</c><00:03:30.319><c> long</c><00:03:30.560><c> as</c>

00:03:30.869 --> 00:03:30.879 align:start position:0%
and positive infinity and as long as
 

00:03:30.879 --> 00:03:33.350 align:start position:0%
and positive infinity and as long as
that's<00:03:31.120><c> the</c><00:03:31.280><c> case</c><00:03:31.760><c> five</c><00:03:32.080><c> is</c><00:03:32.319><c> okay</c><00:03:33.040><c> we</c><00:03:33.200><c> don't</c>

00:03:33.350 --> 00:03:33.360 align:start position:0%
that's the case five is okay we don't
 

00:03:33.360 --> 00:03:33.910 align:start position:0%
that's the case five is okay we don't
have<00:03:33.519><c> to</c><00:03:33.599><c> make</c>

00:03:33.910 --> 00:03:33.920 align:start position:0%
have to make
 

00:03:33.920 --> 00:03:37.509 align:start position:0%
have to make
any<00:03:34.159><c> other</c><00:03:34.400><c> comparisons</c><00:03:35.200><c> five</c><00:03:35.840><c> is</c><00:03:36.159><c> between</c>

00:03:37.509 --> 00:03:37.519 align:start position:0%
any other comparisons five is between
 

00:03:37.519 --> 00:03:40.390 align:start position:0%
any other comparisons five is between
negative<00:03:37.920><c> infinity</c><00:03:38.879><c> and</c><00:03:39.200><c> positive</c><00:03:39.680><c> infinity</c>

00:03:40.390 --> 00:03:40.400 align:start position:0%
negative infinity and positive infinity
 

00:03:40.400 --> 00:03:41.670 align:start position:0%
negative infinity and positive infinity
okay<00:03:40.879><c> and</c><00:03:41.120><c> then</c>

00:03:41.670 --> 00:03:41.680 align:start position:0%
okay and then
 

00:03:41.680 --> 00:03:44.229 align:start position:0%
okay and then
when<00:03:41.840><c> we</c><00:03:42.080><c> go</c><00:03:42.400><c> down</c><00:03:42.959><c> to</c><00:03:43.120><c> the</c><00:03:43.280><c> left</c><00:03:43.519><c> subtree</c><00:03:44.080><c> we</c>

00:03:44.229 --> 00:03:44.239 align:start position:0%
when we go down to the left subtree we
 

00:03:44.239 --> 00:03:46.229 align:start position:0%
when we go down to the left subtree we
know<00:03:44.560><c> five</c><00:03:44.879><c> is</c><00:03:45.040><c> good</c><00:03:45.440><c> we</c><00:03:45.599><c> don't</c><00:03:45.760><c> even</c><00:03:46.000><c> have</c><00:03:46.080><c> to</c>

00:03:46.229 --> 00:03:46.239 align:start position:0%
know five is good we don't even have to
 

00:03:46.239 --> 00:03:47.270 align:start position:0%
know five is good we don't even have to
check<00:03:46.480><c> it</c><00:03:46.560><c> anymore</c>

00:03:47.270 --> 00:03:47.280 align:start position:0%
check it anymore
 

00:03:47.280 --> 00:03:49.910 align:start position:0%
check it anymore
but<00:03:47.519><c> when</c><00:03:47.760><c> we</c><00:03:48.000><c> go</c><00:03:48.239><c> down</c><00:03:48.480><c> to</c><00:03:48.640><c> the</c><00:03:48.799><c> left</c><00:03:49.040><c> subtree</c>

00:03:49.910 --> 00:03:49.920 align:start position:0%
but when we go down to the left subtree
 

00:03:49.920 --> 00:03:50.949 align:start position:0%
but when we go down to the left subtree
what<00:03:50.080><c> do</c><00:03:50.319><c> we</c><00:03:50.480><c> have</c><00:03:50.640><c> to</c>

00:03:50.949 --> 00:03:50.959 align:start position:0%
what do we have to
 

00:03:50.959 --> 00:03:54.630 align:start position:0%
what do we have to
check<00:03:51.519><c> all</c><00:03:51.840><c> we</c><00:03:52.080><c> have</c><00:03:52.239><c> to</c><00:03:52.560><c> check</c><00:03:53.200><c> is</c><00:03:53.439><c> that</c><00:03:53.920><c> 3</c>

00:03:54.630 --> 00:03:54.640 align:start position:0%
check all we have to check is that 3
 

00:03:54.640 --> 00:03:57.990 align:start position:0%
check all we have to check is that 3
is<00:03:55.040><c> less</c><00:03:55.519><c> than</c><00:03:55.920><c> 5</c><00:03:56.560><c> so</c><00:03:56.879><c> in</c><00:03:57.120><c> other</c><00:03:57.439><c> words</c>

00:03:57.990 --> 00:03:58.000 align:start position:0%
is less than 5 so in other words
 

00:03:58.000 --> 00:04:01.110 align:start position:0%
is less than 5 so in other words
we<00:03:58.239><c> just</c><00:03:58.480><c> want</c><00:03:58.640><c> to</c><00:03:58.720><c> make</c><00:03:58.959><c> sure</c><00:03:59.760><c> three</c><00:04:00.400><c> is</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
we just want to make sure three is
 

00:04:01.120 --> 00:04:03.830 align:start position:0%
we just want to make sure three is
greater<00:04:01.680><c> than</c><00:04:02.239><c> a</c><00:04:02.400><c> negative</c><00:04:02.879><c> infinity</c><00:04:03.439><c> which</c>

00:04:03.830 --> 00:04:03.840 align:start position:0%
greater than a negative infinity which
 

00:04:03.840 --> 00:04:05.030 align:start position:0%
greater than a negative infinity which
of<00:04:04.000><c> course</c><00:04:04.319><c> it</c><00:04:04.480><c> is</c>

00:04:05.030 --> 00:04:05.040 align:start position:0%
of course it is
 

00:04:05.040 --> 00:04:07.830 align:start position:0%
of course it is
and<00:04:05.519><c> we're</c><00:04:05.760><c> adding</c><00:04:06.239><c> one</c><00:04:06.480><c> more</c><00:04:06.799><c> condition</c><00:04:07.599><c> we</c>

00:04:07.830 --> 00:04:07.840 align:start position:0%
and we're adding one more condition we
 

00:04:07.840 --> 00:04:09.030 align:start position:0%
and we're adding one more condition we
want<00:04:08.000><c> to</c><00:04:08.080><c> make</c><00:04:08.319><c> sure</c>

00:04:09.030 --> 00:04:09.040 align:start position:0%
want to make sure
 

00:04:09.040 --> 00:04:12.309 align:start position:0%
want to make sure
it's<00:04:09.680><c> less</c><00:04:10.400><c> than</c><00:04:11.120><c> five</c><00:04:11.840><c> so</c>

00:04:12.309 --> 00:04:12.319 align:start position:0%
it's less than five so
 

00:04:12.319 --> 00:04:14.630 align:start position:0%
it's less than five so
our<00:04:12.640><c> left</c><00:04:13.040><c> boundary</c><00:04:13.599><c> stayed</c><00:04:14.000><c> the</c><00:04:14.159><c> same</c><00:04:14.319><c> but</c><00:04:14.480><c> we</c>

00:04:14.630 --> 00:04:14.640 align:start position:0%
our left boundary stayed the same but we
 

00:04:14.640 --> 00:04:15.670 align:start position:0%
our left boundary stayed the same but we
had<00:04:14.799><c> to</c><00:04:15.120><c> update</c>

00:04:15.670 --> 00:04:15.680 align:start position:0%
had to update
 

00:04:15.680 --> 00:04:18.789 align:start position:0%
had to update
our<00:04:16.000><c> right</c><00:04:16.320><c> boundary</c><00:04:17.120><c> from</c><00:04:17.759><c> up</c><00:04:18.160><c> here</c>

00:04:18.789 --> 00:04:18.799 align:start position:0%
our right boundary from up here
 

00:04:18.799 --> 00:04:21.509 align:start position:0%
our right boundary from up here
right<00:04:19.519><c> and</c><00:04:19.680><c> so</c><00:04:19.840><c> we're</c><00:04:20.079><c> done</c><00:04:20.320><c> with</c><00:04:20.560><c> that</c><00:04:20.959><c> and</c><00:04:21.359><c> of</c>

00:04:21.509 --> 00:04:21.519 align:start position:0%
right and so we're done with that and of
 

00:04:21.519 --> 00:04:23.270 align:start position:0%
right and so we're done with that and of
course<00:04:21.840><c> we</c><00:04:22.000><c> don't</c><00:04:22.240><c> have</c><00:04:22.400><c> any</c><00:04:22.639><c> children</c>

00:04:23.270 --> 00:04:23.280 align:start position:0%
course we don't have any children
 

00:04:23.280 --> 00:04:25.590 align:start position:0%
course we don't have any children
for<00:04:23.759><c> three</c><00:04:24.000><c> and</c><00:04:24.240><c> five</c><00:04:24.880><c> of</c><00:04:25.040><c> course</c><00:04:25.280><c> we</c><00:04:25.440><c> don't</c>

00:04:25.590 --> 00:04:25.600 align:start position:0%
for three and five of course we don't
 

00:04:25.600 --> 00:04:27.590 align:start position:0%
for three and five of course we don't
have<00:04:25.680><c> any</c><00:04:25.919><c> children</c><00:04:26.320><c> for</c><00:04:26.560><c> three</c><00:04:26.960><c> so</c>

00:04:27.590 --> 00:04:27.600 align:start position:0%
have any children for three so
 

00:04:27.600 --> 00:04:30.790 align:start position:0%
have any children for three so
we<00:04:28.000><c> are</c><00:04:28.240><c> done</c><00:04:28.880><c> checking</c><00:04:29.520><c> three</c><00:04:30.240><c> next</c>

00:04:30.790 --> 00:04:30.800 align:start position:0%
we are done checking three next
 

00:04:30.800 --> 00:04:33.670 align:start position:0%
we are done checking three next
we<00:04:31.280><c> want</c><00:04:31.600><c> to</c><00:04:32.000><c> also</c><00:04:32.400><c> determine</c><00:04:32.880><c> that</c><00:04:33.040><c> the</c><00:04:33.280><c> right</c>

00:04:33.670 --> 00:04:33.680 align:start position:0%
we want to also determine that the right
 

00:04:33.680 --> 00:04:34.629 align:start position:0%
we want to also determine that the right
subtree

00:04:34.629 --> 00:04:34.639 align:start position:0%
subtree
 

00:04:34.639 --> 00:04:36.710 align:start position:0%
subtree
is<00:04:34.800><c> a</c><00:04:34.880><c> binary</c><00:04:35.360><c> search</c><00:04:35.680><c> tree</c><00:04:36.080><c> so</c><00:04:36.320><c> we</c><00:04:36.479><c> want</c><00:04:36.639><c> to</c>

00:04:36.710 --> 00:04:36.720 align:start position:0%
is a binary search tree so we want to
 

00:04:36.720 --> 00:04:37.830 align:start position:0%
is a binary search tree so we want to
make<00:04:36.960><c> sure</c><00:04:37.280><c> seven</c>

00:04:37.830 --> 00:04:37.840 align:start position:0%
make sure seven
 

00:04:37.840 --> 00:04:41.350 align:start position:0%
make sure seven
is<00:04:38.240><c> greater</c><00:04:39.040><c> than</c><00:04:39.680><c> five</c><00:04:40.400><c> but</c><00:04:40.720><c> is</c><00:04:40.880><c> there</c><00:04:41.120><c> an</c>

00:04:41.350 --> 00:04:41.360 align:start position:0%
is greater than five but is there an
 

00:04:41.360 --> 00:04:43.270 align:start position:0%
is greater than five but is there an
upper<00:04:41.680><c> boundary</c><00:04:42.160><c> for</c><00:04:42.320><c> seven</c><00:04:42.720><c> like</c><00:04:42.960><c> this</c><00:04:43.120><c> could</c>

00:04:43.270 --> 00:04:43.280 align:start position:0%
upper boundary for seven like this could
 

00:04:43.280 --> 00:04:44.550 align:start position:0%
upper boundary for seven like this could
have<00:04:43.360><c> been</c><00:04:43.840><c> a</c><00:04:44.000><c> hundred</c>

00:04:44.550 --> 00:04:44.560 align:start position:0%
have been a hundred
 

00:04:44.560 --> 00:04:46.469 align:start position:0%
have been a hundred
or<00:04:44.720><c> could</c><00:04:44.960><c> have</c><00:04:45.040><c> been</c><00:04:45.360><c> anything</c><00:04:46.000><c> so</c><00:04:46.160><c> there's</c>

00:04:46.469 --> 00:04:46.479 align:start position:0%
or could have been anything so there's
 

00:04:46.479 --> 00:04:48.070 align:start position:0%
or could have been anything so there's
no<00:04:46.800><c> upper</c><00:04:47.199><c> boundary</c><00:04:47.680><c> yet</c>

00:04:48.070 --> 00:04:48.080 align:start position:0%
no upper boundary yet
 

00:04:48.080 --> 00:04:51.030 align:start position:0%
no upper boundary yet
so<00:04:48.320><c> we</c><00:04:48.479><c> just</c><00:04:48.720><c> need</c><00:04:48.880><c> to</c><00:04:49.040><c> check</c><00:04:49.280><c> that</c><00:04:49.759><c> seven</c><00:04:50.320><c> is</c>

00:04:51.030 --> 00:04:51.040 align:start position:0%
so we just need to check that seven is
 

00:04:51.040 --> 00:04:52.310 align:start position:0%
so we just need to check that seven is
less<00:04:51.360><c> than</c><00:04:51.600><c> infinity</c>

00:04:52.310 --> 00:04:52.320 align:start position:0%
less than infinity
 

00:04:52.320 --> 00:04:54.790 align:start position:0%
less than infinity
meaning<00:04:52.800><c> that</c><00:04:52.960><c> this</c><00:04:53.199><c> is</c><00:04:53.280><c> the</c><00:04:53.440><c> right</c><00:04:53.680><c> boundary</c>

00:04:54.790 --> 00:04:54.800 align:start position:0%
meaning that this is the right boundary
 

00:04:54.800 --> 00:04:57.510 align:start position:0%
meaning that this is the right boundary
and<00:04:55.280><c> it's</c><00:04:55.840><c> greater</c><00:04:56.639><c> than</c>

00:04:57.510 --> 00:04:57.520 align:start position:0%
and it's greater than
 

00:04:57.520 --> 00:05:00.710 align:start position:0%
and it's greater than
5<00:04:58.160><c> so</c><00:04:58.400><c> we</c><00:04:58.560><c> had</c><00:04:58.720><c> to</c><00:04:58.960><c> update</c><00:04:59.360><c> the</c><00:04:59.759><c> left</c><00:05:00.160><c> boundary</c>

00:05:00.710 --> 00:05:00.720 align:start position:0%
5 so we had to update the left boundary
 

00:05:00.720 --> 00:05:02.070 align:start position:0%
5 so we had to update the left boundary
over<00:05:00.960><c> here</c><00:05:01.199><c> when</c><00:05:01.440><c> we</c><00:05:01.600><c> went</c>

00:05:02.070 --> 00:05:02.080 align:start position:0%
over here when we went
 

00:05:02.080 --> 00:05:04.710 align:start position:0%
over here when we went
here<00:05:02.400><c> we</c><00:05:02.639><c> only</c><00:05:02.880><c> had</c><00:05:03.120><c> to</c><00:05:03.280><c> update</c><00:05:04.000><c> the</c><00:05:04.320><c> right</c>

00:05:04.710 --> 00:05:04.720 align:start position:0%
here we only had to update the right
 

00:05:04.720 --> 00:05:05.590 align:start position:0%
here we only had to update the right
boundary

00:05:05.590 --> 00:05:05.600 align:start position:0%
boundary
 

00:05:05.600 --> 00:05:09.029 align:start position:0%
boundary
and<00:05:06.160><c> this</c><00:05:06.400><c> condition</c><00:05:07.199><c> is</c><00:05:07.600><c> true</c><00:05:08.400><c> so</c>

00:05:09.029 --> 00:05:09.039 align:start position:0%
and this condition is true so
 

00:05:09.039 --> 00:05:12.870 align:start position:0%
and this condition is true so
we<00:05:09.440><c> are</c><00:05:09.680><c> done</c><00:05:10.160><c> checking</c><00:05:10.720><c> 7</c><00:05:11.280><c> it</c><00:05:11.759><c> is</c><00:05:12.000><c> satisfied</c>

00:05:12.870 --> 00:05:12.880 align:start position:0%
we are done checking 7 it is satisfied
 

00:05:12.880 --> 00:05:15.270 align:start position:0%
we are done checking 7 it is satisfied
and<00:05:13.039><c> when</c><00:05:13.199><c> we</c><00:05:13.360><c> go</c><00:05:13.600><c> to</c><00:05:13.759><c> the</c><00:05:14.000><c> right</c><00:05:14.240><c> child</c><00:05:14.880><c> 8</c>

00:05:15.270 --> 00:05:15.280 align:start position:0%
and when we go to the right child 8
 

00:05:15.280 --> 00:05:16.950 align:start position:0%
and when we go to the right child 8
we're<00:05:15.440><c> going</c><00:05:15.520><c> to</c><00:05:15.600><c> do</c><00:05:15.759><c> the</c><00:05:15.919><c> same</c><00:05:16.240><c> thing</c><00:05:16.479><c> we</c><00:05:16.720><c> only</c>

00:05:16.950 --> 00:05:16.960 align:start position:0%
we're going to do the same thing we only
 

00:05:16.960 --> 00:05:17.510 align:start position:0%
we're going to do the same thing we only
have<00:05:17.120><c> to</c>

00:05:17.510 --> 00:05:17.520 align:start position:0%
have to
 

00:05:17.520 --> 00:05:19.590 align:start position:0%
have to
update<00:05:18.240><c> the</c><00:05:18.400><c> left</c><00:05:18.720><c> boundary</c><00:05:19.120><c> so</c><00:05:19.280><c> we</c><00:05:19.360><c> have</c><00:05:19.520><c> to</c>

00:05:19.590 --> 00:05:19.600 align:start position:0%
update the left boundary so we have to
 

00:05:19.600 --> 00:05:21.590 align:start position:0%
update the left boundary so we have to
make<00:05:19.759><c> sure</c><00:05:20.000><c> that</c><00:05:20.400><c> 8</c><00:05:20.720><c> is</c><00:05:20.880><c> at</c><00:05:21.120><c> least</c>

00:05:21.590 --> 00:05:21.600 align:start position:0%
make sure that 8 is at least
 

00:05:21.600 --> 00:05:24.629 align:start position:0%
make sure that 8 is at least
greater<00:05:22.000><c> than</c><00:05:22.320><c> 7</c><00:05:23.120><c> but</c><00:05:23.680><c> it</c><00:05:23.919><c> could</c><00:05:24.080><c> be</c>

00:05:24.629 --> 00:05:24.639 align:start position:0%
greater than 7 but it could be
 

00:05:24.639 --> 00:05:27.510 align:start position:0%
greater than 7 but it could be
anything<00:05:25.199><c> so</c><00:05:25.600><c> it's</c><00:05:25.919><c> less</c><00:05:26.240><c> than</c><00:05:26.560><c> infinity</c><00:05:27.360><c> so</c>

00:05:27.510 --> 00:05:27.520 align:start position:0%
anything so it's less than infinity so
 

00:05:27.520 --> 00:05:28.390 align:start position:0%
anything so it's less than infinity so
that's<00:05:27.840><c> good</c>

00:05:28.390 --> 00:05:28.400 align:start position:0%
that's good
 

00:05:28.400 --> 00:05:31.430 align:start position:0%
that's good
8<00:05:28.880><c> is</c><00:05:29.600><c> a</c><00:05:30.160><c> binary</c><00:05:30.639><c> search</c><00:05:30.960><c> tree</c>

00:05:31.430 --> 00:05:31.440 align:start position:0%
8 is a binary search tree
 

00:05:31.440 --> 00:05:34.390 align:start position:0%
8 is a binary search tree
but<00:05:31.680><c> now</c><00:05:32.080><c> we</c><00:05:32.400><c> get</c><00:05:32.720><c> to</c><00:05:33.039><c> the</c><00:05:33.840><c> value</c><00:05:34.160><c> that</c>

00:05:34.390 --> 00:05:34.400 align:start position:0%
but now we get to the value that
 

00:05:34.400 --> 00:05:34.870 align:start position:0%
but now we get to the value that
actually

00:05:34.870 --> 00:05:34.880 align:start position:0%
actually
 

00:05:34.880 --> 00:05:36.629 align:start position:0%
actually
breaks<00:05:35.280><c> our</c><00:05:35.440><c> binary</c><00:05:35.840><c> search</c><00:05:36.080><c> tree</c><00:05:36.320><c> and</c><00:05:36.400><c> let's</c>

00:05:36.629 --> 00:05:36.639 align:start position:0%
breaks our binary search tree and let's
 

00:05:36.639 --> 00:05:37.990 align:start position:0%
breaks our binary search tree and let's
see<00:05:36.880><c> what</c><00:05:37.120><c> our</c><00:05:37.280><c> algorithm</c>

00:05:37.990 --> 00:05:38.000 align:start position:0%
see what our algorithm
 

00:05:38.000 --> 00:05:41.189 align:start position:0%
see what our algorithm
does<00:05:38.560><c> so</c><00:05:38.880><c> we</c><00:05:39.199><c> know</c><00:05:39.600><c> since</c><00:05:39.919><c> set</c><00:05:40.320><c> four</c><00:05:40.639><c> is</c><00:05:40.800><c> the</c>

00:05:41.189 --> 00:05:41.199 align:start position:0%
does so we know since set four is the
 

00:05:41.199 --> 00:05:42.469 align:start position:0%
does so we know since set four is the
left<00:05:41.520><c> child</c><00:05:41.840><c> of</c><00:05:42.080><c> seven</c>

00:05:42.469 --> 00:05:42.479 align:start position:0%
left child of seven
 

00:05:42.479 --> 00:05:45.749 align:start position:0%
left child of seven
it<00:05:42.800><c> should</c><00:05:43.120><c> be</c><00:05:43.759><c> less</c><00:05:44.400><c> than</c><00:05:45.039><c> seven</c>

00:05:45.749 --> 00:05:45.759 align:start position:0%
it should be less than seven
 

00:05:45.759 --> 00:05:49.110 align:start position:0%
it should be less than seven
four<00:05:46.400><c> is</c><00:05:47.120><c> less</c><00:05:47.680><c> than</c><00:05:48.560><c> seven</c>

00:05:49.110 --> 00:05:49.120 align:start position:0%
four is less than seven
 

00:05:49.120 --> 00:05:52.230 align:start position:0%
four is less than seven
we<00:05:49.280><c> have</c><00:05:49.440><c> to</c><00:05:49.759><c> update</c><00:05:50.320><c> the</c><00:05:50.639><c> right</c><00:05:51.120><c> boundary</c><00:05:51.919><c> for</c>

00:05:52.230 --> 00:05:52.240 align:start position:0%
we have to update the right boundary for
 

00:05:52.240 --> 00:05:52.710 align:start position:0%
we have to update the right boundary for
four

00:05:52.710 --> 00:05:52.720 align:start position:0%
four
 

00:05:52.720 --> 00:05:55.830 align:start position:0%
four
but<00:05:53.199><c> the</c><00:05:53.600><c> left</c><00:05:54.000><c> boundary</c><00:05:54.720><c> stays</c><00:05:55.199><c> the</c><00:05:55.440><c> same</c>

00:05:55.830 --> 00:05:55.840 align:start position:0%
but the left boundary stays the same
 

00:05:55.840 --> 00:05:59.029 align:start position:0%
but the left boundary stays the same
so<00:05:56.000><c> we're</c><00:05:56.319><c> getting</c><00:05:57.039><c> the</c><00:05:57.440><c> left</c><00:05:57.919><c> boundary</c><00:05:58.720><c> from</c>

00:05:59.029 --> 00:05:59.039 align:start position:0%
so we're getting the left boundary from
 

00:05:59.039 --> 00:06:01.749 align:start position:0%
so we're getting the left boundary from
over<00:05:59.360><c> here</c><00:06:00.160><c> we're</c><00:06:00.479><c> borrowing</c><00:06:01.039><c> it</c><00:06:01.199><c> from</c><00:06:01.440><c> its</c>

00:06:01.749 --> 00:06:01.759 align:start position:0%
over here we're borrowing it from its
 

00:06:01.759 --> 00:06:02.390 align:start position:0%
over here we're borrowing it from its
parent

00:06:02.390 --> 00:06:02.400 align:start position:0%
parent
 

00:06:02.400 --> 00:06:05.670 align:start position:0%
parent
because<00:06:03.199><c> if</c><00:06:03.600><c> seven</c><00:06:04.160><c> is</c><00:06:04.400><c> greater</c><00:06:04.800><c> than</c><00:06:05.120><c> 5</c>

00:06:05.670 --> 00:06:05.680 align:start position:0%
because if seven is greater than 5
 

00:06:05.680 --> 00:06:08.629 align:start position:0%
because if seven is greater than 5
then<00:06:06.160><c> it's</c><00:06:06.560><c> left</c><00:06:06.880><c> child</c><00:06:07.520><c> and</c><00:06:07.840><c> 4</c><00:06:08.080><c> is</c><00:06:08.240><c> a</c><00:06:08.319><c> part</c><00:06:08.479><c> of</c>

00:06:08.629 --> 00:06:08.639 align:start position:0%
then it's left child and 4 is a part of
 

00:06:08.639 --> 00:06:10.070 align:start position:0%
then it's left child and 4 is a part of
the<00:06:08.720><c> sub</c><00:06:08.960><c> tree</c><00:06:09.280><c> 4</c><00:06:09.600><c> must</c>

00:06:10.070 --> 00:06:10.080 align:start position:0%
the sub tree 4 must
 

00:06:10.080 --> 00:06:13.350 align:start position:0%
the sub tree 4 must
also<00:06:10.479><c> be</c><00:06:10.639><c> greater</c><00:06:11.199><c> than</c><00:06:11.520><c> 5</c><00:06:12.240><c> so</c><00:06:12.880><c> the</c><00:06:13.039><c> left</c>

00:06:13.350 --> 00:06:13.360 align:start position:0%
also be greater than 5 so the left
 

00:06:13.360 --> 00:06:14.790 align:start position:0%
also be greater than 5 so the left
boundary<00:06:13.840><c> is</c><00:06:14.080><c> 5.</c><00:06:14.479><c> now</c>

00:06:14.790 --> 00:06:14.800 align:start position:0%
boundary is 5. now
 

00:06:14.800 --> 00:06:18.390 align:start position:0%
boundary is 5. now
does<00:06:15.680><c> this</c><00:06:16.000><c> condition</c><00:06:16.800><c> hold</c><00:06:17.520><c> it</c><00:06:17.759><c> does</c>

00:06:18.390 --> 00:06:18.400 align:start position:0%
does this condition hold it does
 

00:06:18.400 --> 00:06:21.430 align:start position:0%
does this condition hold it does
not<00:06:18.880><c> 4</c><00:06:19.360><c> is</c><00:06:19.840><c> not</c><00:06:20.319><c> between</c>

00:06:21.430 --> 00:06:21.440 align:start position:0%
not 4 is not between
 

00:06:21.440 --> 00:06:24.710 align:start position:0%
not 4 is not between
7<00:06:21.919><c> and</c><00:06:22.160><c> 5</c><00:06:22.560><c> so</c><00:06:23.280><c> this</c><00:06:23.520><c> value</c><00:06:24.160><c> breaks</c>

00:06:24.710 --> 00:06:24.720 align:start position:0%
7 and 5 so this value breaks
 

00:06:24.720 --> 00:06:27.270 align:start position:0%
7 and 5 so this value breaks
our<00:06:24.880><c> binary</c><00:06:25.440><c> search</c><00:06:25.759><c> tree</c><00:06:26.160><c> so</c><00:06:26.400><c> therefore</c><00:06:27.039><c> this</c>

00:06:27.270 --> 00:06:27.280 align:start position:0%
our binary search tree so therefore this
 

00:06:27.280 --> 00:06:29.110 align:start position:0%
our binary search tree so therefore this
is<00:06:27.520><c> not</c><00:06:27.759><c> a</c><00:06:27.919><c> binary</c><00:06:28.400><c> search</c><00:06:28.720><c> tree</c>

00:06:29.110 --> 00:06:29.120 align:start position:0%
is not a binary search tree
 

00:06:29.120 --> 00:06:31.990 align:start position:0%
is not a binary search tree
it's<00:06:29.440><c> false</c><00:06:29.919><c> we're</c><00:06:30.080><c> returning</c><00:06:31.280><c> false</c><00:06:31.759><c> and</c>

00:06:31.990 --> 00:06:32.000 align:start position:0%
it's false we're returning false and
 

00:06:32.000 --> 00:06:33.990 align:start position:0%
it's false we're returning false and
with<00:06:32.240><c> this</c><00:06:32.560><c> algorithm</c><00:06:33.120><c> since</c><00:06:33.440><c> for</c><00:06:33.600><c> each</c>

00:06:33.990 --> 00:06:34.000 align:start position:0%
with this algorithm since for each
 

00:06:34.000 --> 00:06:36.469 align:start position:0%
with this algorithm since for each
node<00:06:34.400><c> all</c><00:06:34.639><c> we're</c><00:06:34.880><c> really</c><00:06:35.280><c> doing</c><00:06:35.759><c> is</c><00:06:36.000><c> making</c><00:06:36.319><c> a</c>

00:06:36.469 --> 00:06:36.479 align:start position:0%
node all we're really doing is making a
 

00:06:36.479 --> 00:06:37.430 align:start position:0%
node all we're really doing is making a
comparison

00:06:37.430 --> 00:06:37.440 align:start position:0%
comparison
 

00:06:37.440 --> 00:06:39.430 align:start position:0%
comparison
we're<00:06:37.680><c> making</c><00:06:37.919><c> a</c><00:06:38.080><c> single</c><00:06:38.560><c> or</c><00:06:38.800><c> rather</c><00:06:39.199><c> two</c>

00:06:39.430 --> 00:06:39.440 align:start position:0%
we're making a single or rather two
 

00:06:39.440 --> 00:06:41.189 align:start position:0%
we're making a single or rather two
comparisons<00:06:40.160><c> this</c><00:06:40.400><c> is</c><00:06:40.479><c> going</c><00:06:40.560><c> to</c><00:06:40.639><c> be</c>

00:06:41.189 --> 00:06:41.199 align:start position:0%
comparisons this is going to be
 

00:06:41.199 --> 00:06:44.309 align:start position:0%
comparisons this is going to be
big<00:06:41.520><c> o</c><00:06:41.840><c> of</c><00:06:42.400><c> n</c><00:06:42.800><c> or</c><00:06:43.360><c> uh</c><00:06:43.759><c> 2n</c>

00:06:44.309 --> 00:06:44.319 align:start position:0%
big o of n or uh 2n
 

00:06:44.319 --> 00:06:46.629 align:start position:0%
big o of n or uh 2n
which<00:06:44.479><c> we</c><00:06:44.639><c> know</c><00:06:44.880><c> is</c><00:06:45.039><c> still</c><00:06:45.360><c> linear</c><00:06:45.840><c> so</c><00:06:46.400><c> we</c><00:06:46.560><c> can</c>

00:06:46.629 --> 00:06:46.639 align:start position:0%
which we know is still linear so we can
 

00:06:46.639 --> 00:06:47.590 align:start position:0%
which we know is still linear so we can
just<00:06:46.880><c> call</c><00:06:47.120><c> it</c><00:06:47.280><c> big</c>

00:06:47.590 --> 00:06:47.600 align:start position:0%
just call it big
 

00:06:47.600 --> 00:06:50.150 align:start position:0%
just call it big
o<00:06:47.919><c> of</c><00:06:48.160><c> n</c><00:06:48.639><c> so</c><00:06:48.800><c> now</c><00:06:49.039><c> it's</c><00:06:49.280><c> actually</c><00:06:49.680><c> time</c><00:06:49.919><c> to</c>

00:06:50.150 --> 00:06:50.160 align:start position:0%
o of n so now it's actually time to
 

00:06:50.160 --> 00:06:52.150 align:start position:0%
o of n so now it's actually time to
write<00:06:50.400><c> the</c><00:06:50.639><c> algorithm</c><00:06:51.199><c> and</c><00:06:51.280><c> the</c><00:06:51.440><c> best</c><00:06:51.759><c> way</c><00:06:51.919><c> to</c>

00:06:52.150 --> 00:06:52.160 align:start position:0%
write the algorithm and the best way to
 

00:06:52.160 --> 00:06:52.710 align:start position:0%
write the algorithm and the best way to
do<00:06:52.319><c> this</c>

00:06:52.710 --> 00:06:52.720 align:start position:0%
do this
 

00:06:52.720 --> 00:06:54.390 align:start position:0%
do this
is<00:06:53.039><c> recursively</c><00:06:53.680><c> so</c><00:06:53.840><c> that's</c><00:06:54.000><c> what</c><00:06:54.160><c> i'm</c><00:06:54.319><c> going</c>

00:06:54.390 --> 00:06:54.400 align:start position:0%
is recursively so that's what i'm going
 

00:06:54.400 --> 00:06:55.589 align:start position:0%
is recursively so that's what i'm going
to<00:06:54.479><c> do</c><00:06:54.639><c> i'm</c><00:06:54.720><c> going</c><00:06:54.800><c> to</c><00:06:54.880><c> write</c><00:06:55.120><c> a</c><00:06:55.199><c> helper</c>

00:06:55.589 --> 00:06:55.599 align:start position:0%
to do i'm going to write a helper
 

00:06:55.599 --> 00:06:56.150 align:start position:0%
to do i'm going to write a helper
function

00:06:56.150 --> 00:06:56.160 align:start position:0%
function
 

00:06:56.160 --> 00:06:58.790 align:start position:0%
function
nested<00:06:56.720><c> inside</c><00:06:57.120><c> of</c><00:06:57.199><c> this</c><00:06:57.440><c> helper</c><00:06:58.080><c> or</c><00:06:58.479><c> inside</c>

00:06:58.790 --> 00:06:58.800 align:start position:0%
nested inside of this helper or inside
 

00:06:58.800 --> 00:06:59.670 align:start position:0%
nested inside of this helper or inside
of<00:06:58.960><c> our</c><00:06:59.039><c> original</c>

00:06:59.670 --> 00:06:59.680 align:start position:0%
of our original
 

00:06:59.680 --> 00:07:02.230 align:start position:0%
of our original
function<00:07:00.319><c> we'll</c><00:07:00.560><c> call</c><00:07:00.800><c> it</c><00:07:01.039><c> valid</c><00:07:01.599><c> we</c><00:07:01.919><c> know</c><00:07:02.160><c> we</c>

00:07:02.230 --> 00:07:02.240 align:start position:0%
function we'll call it valid we know we
 

00:07:02.240 --> 00:07:03.110 align:start position:0%
function we'll call it valid we know we
need<00:07:02.400><c> to</c><00:07:02.639><c> pass</c>

00:07:03.110 --> 00:07:03.120 align:start position:0%
need to pass
 

00:07:03.120 --> 00:07:05.110 align:start position:0%
need to pass
in<00:07:03.599><c> the</c><00:07:03.840><c> node</c><00:07:04.240><c> since</c><00:07:04.479><c> we</c><00:07:04.639><c> are</c><00:07:04.800><c> going</c><00:07:04.880><c> to</c><00:07:04.960><c> do</c>

00:07:05.110 --> 00:07:05.120 align:start position:0%
in the node since we are going to do
 

00:07:05.120 --> 00:07:06.870 align:start position:0%
in the node since we are going to do
this<00:07:05.280><c> recursively</c><00:07:06.080><c> and</c><00:07:06.240><c> we're</c><00:07:06.400><c> going</c><00:07:06.479><c> to</c><00:07:06.560><c> have</c>

00:07:06.870 --> 00:07:06.880 align:start position:0%
this recursively and we're going to have
 

00:07:06.880 --> 00:07:07.909 align:start position:0%
this recursively and we're going to have
two<00:07:07.199><c> boundaries</c>

00:07:07.909 --> 00:07:07.919 align:start position:0%
two boundaries
 

00:07:07.919 --> 00:07:10.950 align:start position:0%
two boundaries
left<00:07:08.400><c> and</c><00:07:08.720><c> right</c><00:07:09.280><c> boundaries</c><00:07:10.319><c> like</c><00:07:10.639><c> any</c>

00:07:10.950 --> 00:07:10.960 align:start position:0%
left and right boundaries like any
 

00:07:10.960 --> 00:07:13.029 align:start position:0%
left and right boundaries like any
binary<00:07:11.520><c> search</c><00:07:11.840><c> recursive</c><00:07:12.400><c> function</c>

00:07:13.029 --> 00:07:13.039 align:start position:0%
binary search recursive function
 

00:07:13.039 --> 00:07:16.150 align:start position:0%
binary search recursive function
if<00:07:13.199><c> we</c><00:07:13.520><c> reach</c><00:07:14.080><c> a</c><00:07:14.479><c> null</c><00:07:14.800><c> node</c><00:07:15.440><c> we</c><00:07:15.599><c> can</c><00:07:15.919><c> just</c>

00:07:16.150 --> 00:07:16.160 align:start position:0%
if we reach a null node we can just
 

00:07:16.160 --> 00:07:17.749 align:start position:0%
if we reach a null node we can just
return<00:07:16.639><c> what</c><00:07:16.800><c> are</c><00:07:16.880><c> we</c><00:07:17.039><c> going</c><00:07:17.120><c> to</c><00:07:17.280><c> return</c>

00:07:17.749 --> 00:07:17.759 align:start position:0%
return what are we going to return
 

00:07:17.759 --> 00:07:19.430 align:start position:0%
return what are we going to return
we're<00:07:17.840><c> going</c><00:07:17.919><c> to</c><00:07:18.000><c> return</c><00:07:18.560><c> true</c><00:07:18.960><c> because</c>

00:07:19.430 --> 00:07:19.440 align:start position:0%
we're going to return true because
 

00:07:19.440 --> 00:07:22.150 align:start position:0%
we're going to return true because
technically<00:07:20.319><c> an</c><00:07:20.560><c> empty</c><00:07:20.960><c> binary</c><00:07:21.440><c> search</c><00:07:21.680><c> tree</c>

00:07:22.150 --> 00:07:22.160 align:start position:0%
technically an empty binary search tree
 

00:07:22.160 --> 00:07:24.710 align:start position:0%
technically an empty binary search tree
is<00:07:22.400><c> still</c><00:07:22.720><c> a</c><00:07:22.880><c> binary</c><00:07:23.360><c> search</c><00:07:23.680><c> tree</c><00:07:24.160><c> and</c><00:07:24.479><c> then</c>

00:07:24.710 --> 00:07:24.720 align:start position:0%
is still a binary search tree and then
 

00:07:24.720 --> 00:07:26.070 align:start position:0%
is still a binary search tree and then
we<00:07:24.960><c> want</c><00:07:25.120><c> to</c><00:07:25.360><c> check</c>

00:07:26.070 --> 00:07:26.080 align:start position:0%
we want to check
 

00:07:26.080 --> 00:07:30.870 align:start position:0%
we want to check
we<00:07:26.160><c> want</c><00:07:26.319><c> to</c><00:07:26.400><c> make</c><00:07:26.639><c> sure</c><00:07:27.199><c> that</c><00:07:28.240><c> node</c><00:07:28.960><c> value</c><00:07:29.919><c> is</c>

00:07:30.870 --> 00:07:30.880 align:start position:0%
we want to make sure that node value is
 

00:07:30.880 --> 00:07:33.990 align:start position:0%
we want to make sure that node value is
less<00:07:31.599><c> than</c><00:07:32.240><c> the</c><00:07:32.560><c> right</c><00:07:32.880><c> boundary</c>

00:07:33.990 --> 00:07:34.000 align:start position:0%
less than the right boundary
 

00:07:34.000 --> 00:07:37.830 align:start position:0%
less than the right boundary
and<00:07:34.800><c> node</c><00:07:35.440><c> value</c><00:07:36.080><c> is</c><00:07:36.400><c> greater</c><00:07:36.960><c> than</c><00:07:37.280><c> the</c><00:07:37.520><c> left</c>

00:07:37.830 --> 00:07:37.840 align:start position:0%
and node value is greater than the left
 

00:07:37.840 --> 00:07:38.710 align:start position:0%
and node value is greater than the left
boundary

00:07:38.710 --> 00:07:38.720 align:start position:0%
boundary
 

00:07:38.720 --> 00:07:41.749 align:start position:0%
boundary
but<00:07:38.880><c> we</c><00:07:39.199><c> know</c><00:07:39.520><c> if</c><00:07:39.680><c> this</c><00:07:40.000><c> is</c><00:07:40.319><c> not</c><00:07:40.720><c> true</c><00:07:41.440><c> if</c>

00:07:41.749 --> 00:07:41.759 align:start position:0%
but we know if this is not true if
 

00:07:41.759 --> 00:07:45.189 align:start position:0%
but we know if this is not true if
these<00:07:42.000><c> conditions</c><00:07:42.800><c> do</c><00:07:43.120><c> not</c><00:07:43.520><c> satisfy</c><00:07:44.639><c> then</c>

00:07:45.189 --> 00:07:45.199 align:start position:0%
these conditions do not satisfy then
 

00:07:45.199 --> 00:07:48.070 align:start position:0%
these conditions do not satisfy then
we<00:07:45.440><c> have</c><00:07:45.680><c> to</c><00:07:45.840><c> return</c><00:07:46.639><c> false</c><00:07:47.120><c> because</c><00:07:47.440><c> we</c><00:07:47.599><c> found</c>

00:07:48.070 --> 00:07:48.080 align:start position:0%
we have to return false because we found
 

00:07:48.080 --> 00:07:49.029 align:start position:0%
we have to return false because we found
a<00:07:48.319><c> node</c><00:07:48.639><c> that</c>

00:07:49.029 --> 00:07:49.039 align:start position:0%
a node that
 

00:07:49.039 --> 00:07:51.670 align:start position:0%
a node that
broke<00:07:49.520><c> our</c><00:07:49.680><c> binary</c><00:07:50.160><c> search</c><00:07:50.479><c> tree</c><00:07:50.960><c> and</c><00:07:51.440><c> now</c>

00:07:51.670 --> 00:07:51.680 align:start position:0%
broke our binary search tree and now
 

00:07:51.680 --> 00:07:52.869 align:start position:0%
broke our binary search tree and now
it's<00:07:51.919><c> time</c><00:07:52.240><c> to</c><00:07:52.479><c> make</c>

00:07:52.869 --> 00:07:52.879 align:start position:0%
it's time to make
 

00:07:52.879 --> 00:07:55.430 align:start position:0%
it's time to make
our<00:07:53.120><c> recursive</c><00:07:53.919><c> call</c><00:07:54.479><c> so</c><00:07:54.720><c> we</c><00:07:54.879><c> want</c><00:07:55.120><c> to</c><00:07:55.199><c> make</c>

00:07:55.430 --> 00:07:55.440 align:start position:0%
our recursive call so we want to make
 

00:07:55.440 --> 00:07:58.309 align:start position:0%
our recursive call so we want to make
sure<00:07:55.759><c> that</c><00:07:55.919><c> the</c><00:07:56.240><c> left</c><00:07:56.639><c> subtree</c><00:07:57.280><c> of</c><00:07:57.599><c> node</c>

00:07:58.309 --> 00:07:58.319 align:start position:0%
sure that the left subtree of node
 

00:07:58.319 --> 00:08:01.510 align:start position:0%
sure that the left subtree of node
is<00:07:58.560><c> valid</c><00:07:58.960><c> so</c><00:07:59.120><c> we</c><00:07:59.280><c> can</c><00:07:59.520><c> pass</c><00:08:00.120><c> node.left</c><00:08:01.280><c> and</c>

00:08:01.510 --> 00:08:01.520 align:start position:0%
is valid so we can pass node.left and
 

00:08:01.520 --> 00:08:03.350 align:start position:0%
is valid so we can pass node.left and
what's<00:08:01.840><c> going</c><00:08:01.919><c> to</c><00:08:02.080><c> be</c><00:08:02.319><c> the</c><00:08:02.639><c> boundary</c>

00:08:03.350 --> 00:08:03.360 align:start position:0%
what's going to be the boundary
 

00:08:03.360 --> 00:08:06.309 align:start position:0%
what's going to be the boundary
for<00:08:03.680><c> these</c><00:08:04.160><c> well</c><00:08:04.400><c> since</c><00:08:04.720><c> we</c><00:08:04.960><c> are</c><00:08:05.120><c> going</c><00:08:05.680><c> left</c>

00:08:06.309 --> 00:08:06.319 align:start position:0%
for these well since we are going left
 

00:08:06.319 --> 00:08:08.390 align:start position:0%
for these well since we are going left
we<00:08:06.479><c> can</c><00:08:06.720><c> leave</c><00:08:07.039><c> the</c><00:08:07.199><c> left</c><00:08:07.520><c> boundary</c><00:08:07.919><c> the</c><00:08:08.160><c> same</c>

00:08:08.390 --> 00:08:08.400 align:start position:0%
we can leave the left boundary the same
 

00:08:08.400 --> 00:08:09.110 align:start position:0%
we can leave the left boundary the same
but<00:08:08.560><c> we're</c><00:08:08.720><c> going</c><00:08:08.879><c> to</c>

00:08:09.110 --> 00:08:09.120 align:start position:0%
but we're going to
 

00:08:09.120 --> 00:08:11.670 align:start position:0%
but we're going to
update<00:08:09.599><c> the</c><00:08:09.840><c> right</c><00:08:10.240><c> boundary</c><00:08:10.720><c> to</c><00:08:10.960><c> the</c><00:08:11.199><c> node's</c>

00:08:11.670 --> 00:08:11.680 align:start position:0%
update the right boundary to the node's
 

00:08:11.680 --> 00:08:13.110 align:start position:0%
update the right boundary to the node's
value<00:08:12.160><c> because</c><00:08:12.479><c> we</c><00:08:12.720><c> know</c>

00:08:13.110 --> 00:08:13.120 align:start position:0%
value because we know
 

00:08:13.120 --> 00:08:16.629 align:start position:0%
value because we know
that<00:08:13.280><c> a</c><00:08:13.680><c> left</c><00:08:14.160><c> sub</c><00:08:14.479><c> tree</c><00:08:14.720><c> has</c><00:08:14.879><c> to</c><00:08:15.039><c> be</c><00:08:15.520><c> less</c><00:08:15.919><c> than</c>

00:08:16.629 --> 00:08:16.639 align:start position:0%
that a left sub tree has to be less than
 

00:08:16.639 --> 00:08:19.189 align:start position:0%
that a left sub tree has to be less than
every<00:08:17.120><c> value</c><00:08:17.840><c> we</c><00:08:18.000><c> know</c><00:08:18.240><c> every</c><00:08:18.560><c> value</c><00:08:18.960><c> in</c><00:08:19.039><c> the</c>

00:08:19.189 --> 00:08:19.199 align:start position:0%
every value we know every value in the
 

00:08:19.199 --> 00:08:20.710 align:start position:0%
every value we know every value in the
left<00:08:19.440><c> sub</c><00:08:19.680><c> tree</c><00:08:20.000><c> has</c><00:08:20.160><c> to</c><00:08:20.319><c> be</c>

00:08:20.710 --> 00:08:20.720 align:start position:0%
left sub tree has to be
 

00:08:20.720 --> 00:08:23.749 align:start position:0%
left sub tree has to be
less<00:08:21.120><c> than</c><00:08:21.680><c> the</c><00:08:21.919><c> parent</c><00:08:22.720><c> and</c><00:08:22.879><c> so</c><00:08:23.120><c> the</c><00:08:23.280><c> parent</c>

00:08:23.749 --> 00:08:23.759 align:start position:0%
less than the parent and so the parent
 

00:08:23.759 --> 00:08:24.790 align:start position:0%
less than the parent and so the parent
is<00:08:23.919><c> going</c><00:08:24.080><c> to</c><00:08:24.160><c> be</c><00:08:24.400><c> set</c>

00:08:24.790 --> 00:08:24.800 align:start position:0%
is going to be set
 

00:08:24.800 --> 00:08:27.749 align:start position:0%
is going to be set
to<00:08:25.039><c> the</c><00:08:25.520><c> right</c><00:08:26.000><c> boundary</c><00:08:26.560><c> because</c><00:08:26.800><c> we</c><00:08:27.039><c> need</c><00:08:27.599><c> we</c>

00:08:27.749 --> 00:08:27.759 align:start position:0%
to the right boundary because we need we
 

00:08:27.759 --> 00:08:28.950 align:start position:0%
to the right boundary because we need we
need<00:08:27.919><c> to</c><00:08:28.000><c> make</c><00:08:28.160><c> sure</c><00:08:28.319><c> that</c><00:08:28.479><c> this</c><00:08:28.720><c> is</c><00:08:28.800><c> going</c><00:08:28.879><c> to</c>

00:08:28.950 --> 00:08:28.960 align:start position:0%
need to make sure that this is going to
 

00:08:28.960 --> 00:08:29.270 align:start position:0%
need to make sure that this is going to
be

00:08:29.270 --> 00:08:29.280 align:start position:0%
be
 

00:08:29.280 --> 00:08:31.029 align:start position:0%
be
less<00:08:29.520><c> than</c><00:08:29.759><c> that</c><00:08:30.160><c> so</c><00:08:30.319><c> we</c><00:08:30.479><c> want</c><00:08:30.639><c> to</c><00:08:30.720><c> make</c><00:08:30.879><c> sure</c>

00:08:31.029 --> 00:08:31.039 align:start position:0%
less than that so we want to make sure
 

00:08:31.039 --> 00:08:33.190 align:start position:0%
less than that so we want to make sure
that<00:08:31.280><c> the</c><00:08:31.520><c> left</c><00:08:31.759><c> sub</c><00:08:32.000><c> tree</c><00:08:32.240><c> is</c><00:08:32.399><c> valid</c><00:08:32.880><c> we</c>

00:08:33.190 --> 00:08:33.200 align:start position:0%
that the left sub tree is valid we
 

00:08:33.200 --> 00:08:35.829 align:start position:0%
that the left sub tree is valid we
also<00:08:33.680><c> want</c><00:08:33.919><c> to</c><00:08:34.000><c> make</c><00:08:34.240><c> sure</c><00:08:34.800><c> that</c><00:08:35.039><c> the</c><00:08:35.440><c> right</c>

00:08:35.829 --> 00:08:35.839 align:start position:0%
also want to make sure that the right
 

00:08:35.839 --> 00:08:36.630 align:start position:0%
also want to make sure that the right
subtree

00:08:36.630 --> 00:08:36.640 align:start position:0%
subtree
 

00:08:36.640 --> 00:08:38.790 align:start position:0%
subtree
is<00:08:36.800><c> valid</c><00:08:37.440><c> and</c><00:08:37.680><c> in</c><00:08:37.760><c> this</c><00:08:38.000><c> case</c><00:08:38.399><c> we're</c><00:08:38.640><c> going</c><00:08:38.719><c> to</c>

00:08:38.790 --> 00:08:38.800 align:start position:0%
is valid and in this case we're going to
 

00:08:38.800 --> 00:08:40.790 align:start position:0%
is valid and in this case we're going to
do<00:08:38.959><c> the</c><00:08:39.200><c> opposite</c><00:08:39.599><c> of</c><00:08:39.680><c> what</c><00:08:39.919><c> we</c><00:08:40.080><c> just</c><00:08:40.399><c> did</c>

00:08:40.790 --> 00:08:40.800 align:start position:0%
do the opposite of what we just did
 

00:08:40.800 --> 00:08:43.509 align:start position:0%
do the opposite of what we just did
so<00:08:41.039><c> the</c><00:08:41.279><c> left</c><00:08:41.599><c> boundary</c><00:08:42.159><c> is</c><00:08:42.399><c> going</c><00:08:42.640><c> to</c><00:08:42.880><c> be</c>

00:08:43.509 --> 00:08:43.519 align:start position:0%
so the left boundary is going to be
 

00:08:43.519 --> 00:08:44.630 align:start position:0%
so the left boundary is going to be
updated

00:08:44.630 --> 00:08:44.640 align:start position:0%
updated
 

00:08:44.640 --> 00:08:46.710 align:start position:0%
updated
and<00:08:44.800><c> the</c><00:08:45.040><c> right</c><00:08:45.360><c> boundary</c><00:08:45.920><c> is</c><00:08:46.080><c> going</c><00:08:46.320><c> to</c><00:08:46.480><c> stay</c>

00:08:46.710 --> 00:08:46.720 align:start position:0%
and the right boundary is going to stay
 

00:08:46.720 --> 00:08:47.990 align:start position:0%
and the right boundary is going to stay
the<00:08:46.880><c> same</c><00:08:47.200><c> because</c><00:08:47.440><c> we</c><00:08:47.600><c> know</c>

00:08:47.990 --> 00:08:48.000 align:start position:0%
the same because we know
 

00:08:48.000 --> 00:08:51.590 align:start position:0%
the same because we know
every<00:08:48.800><c> value</c><00:08:49.200><c> in</c><00:08:49.279><c> a</c><00:08:49.519><c> right</c><00:08:49.760><c> subtree</c><00:08:50.640><c> has</c><00:08:50.880><c> to</c><00:08:51.040><c> be</c>

00:08:51.590 --> 00:08:51.600 align:start position:0%
every value in a right subtree has to be
 

00:08:51.600 --> 00:08:55.590 align:start position:0%
every value in a right subtree has to be
greater<00:08:52.560><c> than</c><00:08:53.040><c> the</c><00:08:53.440><c> root</c><00:08:54.080><c> or</c><00:08:54.480><c> the</c><00:08:54.640><c> parent</c><00:08:55.040><c> node</c>

00:08:55.590 --> 00:08:55.600 align:start position:0%
greater than the root or the parent node
 

00:08:55.600 --> 00:08:58.550 align:start position:0%
greater than the root or the parent node
which<00:08:55.839><c> is</c><00:08:56.080><c> the</c><00:08:56.240><c> left</c><00:08:56.560><c> boundary</c><00:08:57.279><c> and</c><00:08:57.680><c> if</c><00:08:58.240><c> both</c>

00:08:58.550 --> 00:08:58.560 align:start position:0%
which is the left boundary and if both
 

00:08:58.560 --> 00:09:00.230 align:start position:0%
which is the left boundary and if both
of<00:08:58.800><c> these</c><00:08:59.120><c> return</c><00:08:59.600><c> true</c>

00:09:00.230 --> 00:09:00.240 align:start position:0%
of these return true
 

00:09:00.240 --> 00:09:02.310 align:start position:0%
of these return true
then<00:09:00.480><c> we</c><00:09:00.640><c> can</c><00:09:00.800><c> return</c><00:09:01.279><c> true</c><00:09:01.600><c> if</c><00:09:01.760><c> they</c><00:09:02.000><c> both</c>

00:09:02.310 --> 00:09:02.320 align:start position:0%
then we can return true if they both
 

00:09:02.320 --> 00:09:03.590 align:start position:0%
then we can return true if they both
return<00:09:02.880><c> false</c>

00:09:03.590 --> 00:09:03.600 align:start position:0%
return false
 

00:09:03.600 --> 00:09:05.829 align:start position:0%
return false
then<00:09:03.839><c> we</c><00:09:04.000><c> can</c><00:09:04.240><c> return</c><00:09:04.720><c> false</c><00:09:05.040><c> so</c><00:09:05.279><c> what</c><00:09:05.440><c> we</c><00:09:05.600><c> can</c>

00:09:05.829 --> 00:09:05.839 align:start position:0%
then we can return false so what we can
 

00:09:05.839 --> 00:09:07.030 align:start position:0%
then we can return false so what we can
do<00:09:06.080><c> is</c><00:09:06.399><c> just</c>

00:09:07.030 --> 00:09:07.040 align:start position:0%
do is just
 

00:09:07.040 --> 00:09:10.550 align:start position:0%
do is just
return<00:09:08.000><c> the</c><00:09:08.160><c> result</c><00:09:09.200><c> of</c><00:09:09.519><c> this</c><00:09:10.000><c> so</c><00:09:10.240><c> whatever</c>

00:09:10.550 --> 00:09:10.560 align:start position:0%
return the result of this so whatever
 

00:09:10.560 --> 00:09:12.070 align:start position:0%
return the result of this so whatever
this<00:09:10.800><c> evaluates</c><00:09:11.600><c> to</c>

00:09:12.070 --> 00:09:12.080 align:start position:0%
this evaluates to
 

00:09:12.080 --> 00:09:14.389 align:start position:0%
this evaluates to
is<00:09:12.240><c> going</c><00:09:12.560><c> to</c><00:09:12.800><c> be</c><00:09:13.279><c> our</c><00:09:13.680><c> result</c><00:09:14.080><c> we</c><00:09:14.240><c> don't</c>

00:09:14.389 --> 00:09:14.399 align:start position:0%
is going to be our result we don't
 

00:09:14.399 --> 00:09:16.150 align:start position:0%
is going to be our result we don't
really<00:09:14.720><c> need</c><00:09:14.959><c> any</c><00:09:15.279><c> variables</c>

00:09:16.150 --> 00:09:16.160 align:start position:0%
really need any variables
 

00:09:16.160 --> 00:09:18.550 align:start position:0%
really need any variables
and<00:09:16.399><c> now</c><00:09:16.640><c> we</c><00:09:16.880><c> just</c><00:09:17.200><c> need</c><00:09:17.440><c> to</c><00:09:18.000><c> call</c><00:09:18.320><c> the</c>

00:09:18.550 --> 00:09:18.560 align:start position:0%
and now we just need to call the
 

00:09:18.560 --> 00:09:19.990 align:start position:0%
and now we just need to call the
function<00:09:18.959><c> that</c><00:09:19.040><c> we</c><00:09:19.200><c> just</c><00:09:19.440><c> defined</c>

00:09:19.990 --> 00:09:20.000 align:start position:0%
function that we just defined
 

00:09:20.000 --> 00:09:22.310 align:start position:0%
function that we just defined
valid<00:09:20.480><c> we'll</c><00:09:20.720><c> pass</c><00:09:21.200><c> in</c><00:09:21.360><c> the</c><00:09:21.600><c> root</c><00:09:21.920><c> we</c><00:09:22.080><c> want</c><00:09:22.240><c> to</c>

00:09:22.310 --> 00:09:22.320 align:start position:0%
valid we'll pass in the root we want to
 

00:09:22.320 --> 00:09:23.990 align:start position:0%
valid we'll pass in the root we want to
make<00:09:22.480><c> sure</c><00:09:22.720><c> that</c><00:09:22.880><c> this</c><00:09:23.040><c> is</c><00:09:23.200><c> a</c><00:09:23.279><c> binary</c><00:09:23.760><c> search</c>

00:09:23.990 --> 00:09:24.000 align:start position:0%
make sure that this is a binary search
 

00:09:24.000 --> 00:09:24.949 align:start position:0%
make sure that this is a binary search
tree

00:09:24.949 --> 00:09:24.959 align:start position:0%
tree
 

00:09:24.959 --> 00:09:27.910 align:start position:0%
tree
initially<00:09:26.000><c> the</c><00:09:26.240><c> left</c><00:09:26.640><c> boundary</c><00:09:27.200><c> can</c><00:09:27.360><c> be</c><00:09:27.600><c> set</c>

00:09:27.910 --> 00:09:27.920 align:start position:0%
initially the left boundary can be set
 

00:09:27.920 --> 00:09:29.350 align:start position:0%
initially the left boundary can be set
to<00:09:28.160><c> negative</c><00:09:28.640><c> infinity</c>

00:09:29.350 --> 00:09:29.360 align:start position:0%
to negative infinity
 

00:09:29.360 --> 00:09:32.150 align:start position:0%
to negative infinity
and<00:09:29.839><c> the</c><00:09:30.160><c> right</c><00:09:30.480><c> boundary</c><00:09:31.200><c> can</c><00:09:31.440><c> be</c><00:09:31.680><c> set</c><00:09:31.920><c> to</c>

00:09:32.150 --> 00:09:32.160 align:start position:0%
and the right boundary can be set to
 

00:09:32.160 --> 00:09:33.750 align:start position:0%
and the right boundary can be set to
positive<00:09:32.640><c> infinity</c><00:09:33.120><c> because</c>

00:09:33.750 --> 00:09:33.760 align:start position:0%
positive infinity because
 

00:09:33.760 --> 00:09:35.990 align:start position:0%
positive infinity because
the<00:09:34.000><c> root</c><00:09:34.320><c> value</c><00:09:34.800><c> could</c><00:09:35.040><c> be</c><00:09:35.360><c> anything</c><00:09:35.760><c> there's</c>

00:09:35.990 --> 00:09:36.000 align:start position:0%
the root value could be anything there's
 

00:09:36.000 --> 00:09:38.310 align:start position:0%
the root value could be anything there's
no<00:09:36.160><c> restrictions</c><00:09:37.040><c> on</c><00:09:37.200><c> what</c><00:09:37.360><c> the</c><00:09:37.600><c> root</c><00:09:37.839><c> value</c>

00:09:38.310 --> 00:09:38.320 align:start position:0%
no restrictions on what the root value
 

00:09:38.320 --> 00:09:39.190 align:start position:0%
no restrictions on what the root value
can<00:09:38.560><c> be</c>

00:09:39.190 --> 00:09:39.200 align:start position:0%
can be
 

00:09:39.200 --> 00:09:41.190 align:start position:0%
can be
and<00:09:39.360><c> as</c><00:09:39.519><c> you</c><00:09:39.600><c> can</c><00:09:39.839><c> see</c><00:09:40.160><c> this</c><00:09:40.399><c> is</c><00:09:40.560><c> a</c><00:09:40.720><c> super</c>

00:09:41.190 --> 00:09:41.200 align:start position:0%
and as you can see this is a super
 

00:09:41.200 --> 00:09:42.310 align:start position:0%
and as you can see this is a super
efficient<00:09:41.600><c> solution</c>

00:09:42.310 --> 00:09:42.320 align:start position:0%
efficient solution
 

00:09:42.320 --> 00:09:45.269 align:start position:0%
efficient solution
beats<00:09:42.640><c> 97</c><00:09:43.279><c> percent</c><00:09:44.240><c> and</c><00:09:44.560><c> it</c><00:09:44.720><c> doesn't</c><00:09:45.040><c> take</c>

00:09:45.269 --> 00:09:45.279 align:start position:0%
beats 97 percent and it doesn't take
 

00:09:45.279 --> 00:09:47.350 align:start position:0%
beats 97 percent and it doesn't take
very<00:09:45.440><c> much</c><00:09:45.680><c> code</c><00:09:46.080><c> either</c><00:09:46.480><c> so</c><00:09:46.720><c> i</c><00:09:46.800><c> hope</c><00:09:47.040><c> this</c><00:09:47.200><c> was</c>

00:09:47.350 --> 00:09:47.360 align:start position:0%
very much code either so i hope this was
 

00:09:47.360 --> 00:09:48.070 align:start position:0%
very much code either so i hope this was
helpful

00:09:48.070 --> 00:09:48.080 align:start position:0%
helpful
 

00:09:48.080 --> 00:09:50.310 align:start position:0%
helpful
if<00:09:48.240><c> you</c><00:09:48.480><c> enjoyed</c><00:09:49.040><c> please</c><00:09:49.360><c> like</c><00:09:49.600><c> and</c><00:09:49.760><c> subscribe</c>

00:09:50.310 --> 00:09:50.320 align:start position:0%
if you enjoyed please like and subscribe
 

00:09:50.320 --> 00:09:52.230 align:start position:0%
if you enjoyed please like and subscribe
and<00:09:50.399><c> support</c><00:09:50.800><c> the</c><00:09:50.959><c> channel</c><00:09:51.360><c> a</c><00:09:51.600><c> lot</c><00:09:51.920><c> and</c><00:09:52.080><c> i'll</c>

00:09:52.230 --> 00:09:52.240 align:start position:0%
and support the channel a lot and i'll
 

00:09:52.240 --> 00:09:52.870 align:start position:0%
and support the channel a lot and i'll
hopefully

00:09:52.870 --> 00:09:52.880 align:start position:0%
hopefully
 

00:09:52.880 --> 00:09:57.279 align:start position:0%
hopefully
see<00:09:53.040><c> you</c><00:09:53.200><c> pretty</c><00:09:54.279><c> soon</c>

