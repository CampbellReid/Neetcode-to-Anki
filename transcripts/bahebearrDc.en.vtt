WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:02.070 align:start position:0%
 
everyone<00:00:00.640><c> welcome</c><00:00:01.120><c> back</c><00:00:01.439><c> and</c><00:00:01.520><c> let's</c><00:00:01.839><c> write</c>

00:00:02.070 --> 00:00:02.080 align:start position:0%
everyone welcome back and let's write
 

00:00:02.080 --> 00:00:03.990 align:start position:0%
everyone welcome back and let's write
some<00:00:02.240><c> more</c><00:00:02.480><c> neat</c><00:00:02.720><c> code</c><00:00:03.040><c> today</c><00:00:03.360><c> so</c><00:00:03.520><c> today</c><00:00:03.760><c> let's</c>

00:00:03.990 --> 00:00:04.000 align:start position:0%
some more neat code today so today let's
 

00:00:04.000 --> 00:00:05.910 align:start position:0%
some more neat code today so today let's
solve<00:00:04.319><c> a</c><00:00:04.400><c> pretty</c><00:00:04.720><c> interesting</c><00:00:05.279><c> problem</c><00:00:05.759><c> from</c>

00:00:05.910 --> 00:00:05.920 align:start position:0%
solve a pretty interesting problem from
 

00:00:05.920 --> 00:00:09.030 align:start position:0%
solve a pretty interesting problem from
today's<00:00:06.319><c> leak</c><00:00:06.560><c> code</c><00:00:06.799><c> contest</c><00:00:07.520><c> detect</c><00:00:08.320><c> squares</c>

00:00:09.030 --> 00:00:09.040 align:start position:0%
today's leak code contest detect squares
 

00:00:09.040 --> 00:00:10.870 align:start position:0%
today's leak code contest detect squares
so<00:00:09.200><c> this</c><00:00:09.360><c> is</c><00:00:09.519><c> a</c><00:00:09.599><c> pretty</c><00:00:09.920><c> challenging</c><00:00:10.480><c> problem</c>

00:00:10.870 --> 00:00:10.880 align:start position:0%
so this is a pretty challenging problem
 

00:00:10.880 --> 00:00:12.629 align:start position:0%
so this is a pretty challenging problem
for<00:00:11.040><c> a</c><00:00:11.120><c> medium</c><00:00:11.519><c> but</c><00:00:11.759><c> it's</c><00:00:11.920><c> actually</c><00:00:12.320><c> pretty</c>

00:00:12.629 --> 00:00:12.639 align:start position:0%
for a medium but it's actually pretty
 

00:00:12.639 --> 00:00:15.190 align:start position:0%
for a medium but it's actually pretty
easy<00:00:13.120><c> once</c><00:00:13.360><c> you</c><00:00:13.599><c> know</c><00:00:14.000><c> the</c><00:00:14.240><c> trick</c><00:00:14.639><c> behind</c><00:00:15.040><c> it</c>

00:00:15.190 --> 00:00:15.200 align:start position:0%
easy once you know the trick behind it
 

00:00:15.200 --> 00:00:17.269 align:start position:0%
easy once you know the trick behind it
so<00:00:15.360><c> that's</c><00:00:15.599><c> what</c><00:00:15.679><c> i'll</c><00:00:15.759><c> be</c><00:00:15.920><c> explaining</c><00:00:16.480><c> to</c><00:00:16.640><c> you</c>

00:00:17.269 --> 00:00:17.279 align:start position:0%
so that's what i'll be explaining to you
 

00:00:17.279 --> 00:00:19.830 align:start position:0%
so that's what i'll be explaining to you
the<00:00:17.440><c> trick</c><00:00:17.840><c> for</c><00:00:18.160><c> detecting</c><00:00:18.800><c> squares</c><00:00:19.359><c> or</c><00:00:19.600><c> even</c>

00:00:19.830 --> 00:00:19.840 align:start position:0%
the trick for detecting squares or even
 

00:00:19.840 --> 00:00:22.950 align:start position:0%
the trick for detecting squares or even
generic<00:00:20.480><c> rectangles</c><00:00:21.520><c> within</c><00:00:22.160><c> a</c>

00:00:22.950 --> 00:00:22.960 align:start position:0%
generic rectangles within a
 

00:00:22.960 --> 00:00:25.349 align:start position:0%
generic rectangles within a
grid<00:00:23.760><c> so</c><00:00:24.000><c> we're</c><00:00:24.160><c> basically</c><00:00:24.560><c> designing</c><00:00:25.039><c> a</c><00:00:25.119><c> data</c>

00:00:25.349 --> 00:00:25.359 align:start position:0%
grid so we're basically designing a data
 

00:00:25.359 --> 00:00:27.429 align:start position:0%
grid so we're basically designing a data
structure<00:00:25.840><c> with</c><00:00:26.480><c> three</c>

00:00:27.429 --> 00:00:27.439 align:start position:0%
structure with three
 

00:00:27.439 --> 00:00:29.349 align:start position:0%
structure with three
methods<00:00:27.920><c> three</c><00:00:28.240><c> functions</c><00:00:29.039><c> we're</c><00:00:29.199><c> going</c><00:00:29.279><c> to</c>

00:00:29.349 --> 00:00:29.359 align:start position:0%
methods three functions we're going to
 

00:00:29.359 --> 00:00:32.709 align:start position:0%
methods three functions we're going to
be<00:00:29.599><c> given</c><00:00:30.240><c> a</c><00:00:30.480><c> stream</c><00:00:31.119><c> of</c><00:00:31.519><c> points</c><00:00:31.920><c> and</c><00:00:32.239><c> we</c><00:00:32.480><c> want</c>

00:00:32.709 --> 00:00:32.719 align:start position:0%
be given a stream of points and we want
 

00:00:32.719 --> 00:00:35.270 align:start position:0%
be given a stream of points and we want
to<00:00:33.280><c> store</c><00:00:33.760><c> these</c><00:00:34.079><c> points</c><00:00:34.480><c> that</c><00:00:34.559><c> we're</c><00:00:34.800><c> given</c>

00:00:35.270 --> 00:00:35.280 align:start position:0%
to store these points that we're given
 

00:00:35.280 --> 00:00:36.790 align:start position:0%
to store these points that we're given
they're<00:00:35.520><c> going</c><00:00:35.600><c> to</c><00:00:35.680><c> be</c><00:00:35.840><c> two-dimensional</c><00:00:36.559><c> they</c>

00:00:36.790 --> 00:00:36.800 align:start position:0%
they're going to be two-dimensional they
 

00:00:36.800 --> 00:00:39.030 align:start position:0%
they're going to be two-dimensional they
have<00:00:37.120><c> an</c><00:00:37.440><c> x</c><00:00:37.680><c> and</c><00:00:37.920><c> y-coordinate</c><00:00:38.640><c> you</c><00:00:38.719><c> can</c><00:00:38.879><c> see</c>

00:00:39.030 --> 00:00:39.040 align:start position:0%
have an x and y-coordinate you can see
 

00:00:39.040 --> 00:00:41.110 align:start position:0%
have an x and y-coordinate you can see
some<00:00:39.200><c> examples</c><00:00:39.760><c> down</c><00:00:40.000><c> here</c><00:00:40.559><c> and</c><00:00:40.800><c> we</c><00:00:40.879><c> could</c>

00:00:41.110 --> 00:00:41.120 align:start position:0%
some examples down here and we could
 

00:00:41.120 --> 00:00:43.350 align:start position:0%
some examples down here and we could
even<00:00:41.280><c> have</c><00:00:41.520><c> duplicate</c><00:00:42.320><c> points</c><00:00:42.719><c> in</c><00:00:42.879><c> the</c><00:00:43.040><c> exact</c>

00:00:43.350 --> 00:00:43.360 align:start position:0%
even have duplicate points in the exact
 

00:00:43.360 --> 00:00:45.750 align:start position:0%
even have duplicate points in the exact
same<00:00:43.600><c> spot</c><00:00:43.920><c> and</c><00:00:44.079><c> we</c><00:00:44.239><c> do</c><00:00:44.399><c> want</c><00:00:44.640><c> to</c><00:00:44.800><c> store</c><00:00:45.200><c> those</c>

00:00:45.750 --> 00:00:45.760 align:start position:0%
same spot and we do want to store those
 

00:00:45.760 --> 00:00:48.229 align:start position:0%
same spot and we do want to store those
so<00:00:46.079><c> a</c><00:00:46.160><c> good</c><00:00:46.640><c> data</c><00:00:46.960><c> structure</c><00:00:47.360><c> to</c><00:00:47.520><c> use</c><00:00:47.840><c> would</c><00:00:48.000><c> be</c>

00:00:48.229 --> 00:00:48.239 align:start position:0%
so a good data structure to use would be
 

00:00:48.239 --> 00:00:50.310 align:start position:0%
so a good data structure to use would be
a<00:00:48.480><c> list</c><00:00:48.879><c> so</c><00:00:49.039><c> that's</c><00:00:49.360><c> one</c><00:00:49.680><c> data</c><00:00:49.920><c> structure</c>

00:00:50.310 --> 00:00:50.320 align:start position:0%
a list so that's one data structure
 

00:00:50.320 --> 00:00:52.229 align:start position:0%
a list so that's one data structure
we're<00:00:50.480><c> going</c><00:00:50.559><c> to</c><00:00:50.640><c> be</c><00:00:50.800><c> using</c><00:00:51.280><c> a</c><00:00:51.520><c> list</c><00:00:51.840><c> or</c><00:00:52.079><c> an</c>

00:00:52.229 --> 00:00:52.239 align:start position:0%
we're going to be using a list or an
 

00:00:52.239 --> 00:00:54.470 align:start position:0%
we're going to be using a list or an
array<00:00:52.559><c> list</c><00:00:53.199><c> so</c><00:00:53.360><c> storing</c><00:00:53.760><c> the</c><00:00:53.840><c> points</c><00:00:54.239><c> is</c><00:00:54.320><c> the</c>

00:00:54.470 --> 00:00:54.480 align:start position:0%
array list so storing the points is the
 

00:00:54.480 --> 00:00:57.029 align:start position:0%
array list so storing the points is the
easy<00:00:54.800><c> part</c><00:00:55.120><c> but</c><00:00:55.360><c> we're</c><00:00:55.520><c> also</c><00:00:56.160><c> given</c><00:00:56.559><c> a</c><00:00:56.640><c> second</c>

00:00:57.029 --> 00:00:57.039 align:start position:0%
easy part but we're also given a second
 

00:00:57.039 --> 00:00:58.950 align:start position:0%
easy part but we're also given a second
requirement<00:00:57.520><c> to</c><00:00:57.680><c> implement</c><00:00:58.160><c> the</c><00:00:58.480><c> count</c>

00:00:58.950 --> 00:00:58.960 align:start position:0%
requirement to implement the count
 

00:00:58.960 --> 00:01:01.670 align:start position:0%
requirement to implement the count
method<00:00:59.840><c> and</c><00:01:00.320><c> this</c><00:01:00.719><c> count</c><00:01:00.960><c> method</c><00:01:01.280><c> will</c><00:01:01.440><c> take</c>

00:01:01.670 --> 00:01:01.680 align:start position:0%
method and this count method will take
 

00:01:01.680 --> 00:01:04.469 align:start position:0%
method and this count method will take
one<00:01:01.840><c> parameter</c><00:01:02.480><c> a</c><00:01:02.719><c> point</c><00:01:03.280><c> so</c><00:01:03.520><c> a</c><00:01:03.680><c> single</c><00:01:04.080><c> point</c>

00:01:04.469 --> 00:01:04.479 align:start position:0%
one parameter a point so a single point
 

00:01:04.479 --> 00:01:07.030 align:start position:0%
one parameter a point so a single point
that<00:01:04.960><c> may</c><00:01:05.119><c> or</c><00:01:05.280><c> may</c><00:01:05.439><c> not</c><00:01:05.680><c> already</c><00:01:06.000><c> be</c><00:01:06.240><c> in</c><00:01:06.560><c> the</c>

00:01:07.030 --> 00:01:07.040 align:start position:0%
that may or may not already be in the
 

00:01:07.040 --> 00:01:08.469 align:start position:0%
that may or may not already be in the
you<00:01:07.200><c> know</c><00:01:07.360><c> stored</c><00:01:07.680><c> list</c><00:01:07.920><c> of</c><00:01:08.080><c> points</c><00:01:08.320><c> but</c><00:01:08.400><c> it</c>

00:01:08.469 --> 00:01:08.479 align:start position:0%
you know stored list of points but it
 

00:01:08.479 --> 00:01:11.350 align:start position:0%
you know stored list of points but it
could<00:01:08.640><c> be</c><00:01:08.720><c> a</c><00:01:08.880><c> new</c><00:01:09.119><c> point</c><00:01:09.439><c> or</c><00:01:09.520><c> something</c><00:01:10.400><c> and</c>

00:01:11.350 --> 00:01:11.360 align:start position:0%
could be a new point or something and
 

00:01:11.360 --> 00:01:13.910 align:start position:0%
could be a new point or something and
given<00:01:11.760><c> that</c><00:01:12.000><c> we</c><00:01:12.320><c> want</c><00:01:12.479><c> to</c><00:01:12.640><c> be</c><00:01:12.799><c> able</c><00:01:12.960><c> to</c><00:01:13.200><c> count</c>

00:01:13.910 --> 00:01:13.920 align:start position:0%
given that we want to be able to count
 

00:01:13.920 --> 00:01:16.230 align:start position:0%
given that we want to be able to count
how<00:01:14.320><c> many</c><00:01:14.880><c> possible</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
how many possible
 

00:01:16.240 --> 00:01:19.590 align:start position:0%
how many possible
exact<00:01:16.880><c> perfect</c><00:01:17.520><c> squares</c><00:01:18.400><c> are</c><00:01:18.640><c> we</c><00:01:18.960><c> able</c><00:01:19.280><c> to</c>

00:01:19.590 --> 00:01:19.600 align:start position:0%
exact perfect squares are we able to
 

00:01:19.600 --> 00:01:23.830 align:start position:0%
exact perfect squares are we able to
make<00:01:20.320><c> with</c><00:01:20.799><c> this</c><00:01:21.200><c> new</c><00:01:21.840><c> input</c><00:01:22.320><c> query</c><00:01:22.880><c> point</c><00:01:23.360><c> and</c>

00:01:23.830 --> 00:01:23.840 align:start position:0%
make with this new input query point and
 

00:01:23.840 --> 00:01:26.070 align:start position:0%
make with this new input query point and
all<00:01:24.080><c> the</c><00:01:24.240><c> points</c><00:01:24.560><c> that</c><00:01:24.720><c> we</c><00:01:24.960><c> already</c><00:01:25.439><c> have</c>

00:01:26.070 --> 00:01:26.080 align:start position:0%
all the points that we already have
 

00:01:26.080 --> 00:01:29.830 align:start position:0%
all the points that we already have
stored<00:01:26.640><c> within</c><00:01:27.360><c> our</c><00:01:27.840><c> list</c><00:01:28.720><c> so</c><00:01:29.200><c> suppose</c><00:01:29.600><c> that</c>

00:01:29.830 --> 00:01:29.840 align:start position:0%
stored within our list so suppose that
 

00:01:29.840 --> 00:01:32.149 align:start position:0%
stored within our list so suppose that
this<00:01:30.079><c> was</c><00:01:30.320><c> the</c><00:01:30.479><c> query</c><00:01:30.880><c> point</c><00:01:31.439><c> then</c><00:01:31.680><c> we</c><00:01:31.920><c> want</c><00:01:32.079><c> to</c>

00:01:32.149 --> 00:01:32.159 align:start position:0%
this was the query point then we want to
 

00:01:32.159 --> 00:01:33.830 align:start position:0%
this was the query point then we want to
know<00:01:32.400><c> how</c><00:01:32.560><c> many</c><00:01:32.720><c> different</c><00:01:32.960><c> ways</c><00:01:33.200><c> can</c><00:01:33.360><c> we</c><00:01:33.520><c> make</c>

00:01:33.830 --> 00:01:33.840 align:start position:0%
know how many different ways can we make
 

00:01:33.840 --> 00:01:36.550 align:start position:0%
know how many different ways can we make
squares<00:01:34.560><c> if</c><00:01:35.119><c> we</c><00:01:35.360><c> are</c><00:01:35.439><c> allowed</c><00:01:35.759><c> to</c><00:01:36.000><c> choose</c><00:01:36.320><c> any</c>

00:01:36.550 --> 00:01:36.560 align:start position:0%
squares if we are allowed to choose any
 

00:01:36.560 --> 00:01:38.230 align:start position:0%
squares if we are allowed to choose any
of<00:01:36.640><c> the</c><00:01:36.799><c> points</c><00:01:37.040><c> that</c><00:01:37.200><c> we</c><00:01:37.360><c> already</c><00:01:37.600><c> had</c><00:01:37.840><c> stored</c>

00:01:38.230 --> 00:01:38.240 align:start position:0%
of the points that we already had stored
 

00:01:38.240 --> 00:01:40.870 align:start position:0%
of the points that we already had stored
let's<00:01:38.400><c> say</c><00:01:38.640><c> all</c><00:01:39.119><c> of</c><00:01:39.280><c> these</c><00:01:39.520><c> three</c><00:01:40.320><c> points</c><00:01:40.640><c> were</c>

00:01:40.870 --> 00:01:40.880 align:start position:0%
let's say all of these three points were
 

00:01:40.880 --> 00:01:42.870 align:start position:0%
let's say all of these three points were
already<00:01:41.280><c> stored</c><00:01:41.840><c> then</c><00:01:42.159><c> clearly</c><00:01:42.560><c> we</c><00:01:42.640><c> could</c>

00:01:42.870 --> 00:01:42.880 align:start position:0%
already stored then clearly we could
 

00:01:42.880 --> 00:01:46.230 align:start position:0%
already stored then clearly we could
make<00:01:43.439><c> uh</c><00:01:43.840><c> one</c><00:01:44.479><c> point</c><00:01:44.960><c> or</c><00:01:45.119><c> one</c><00:01:45.439><c> square</c><00:01:45.920><c> right</c>

00:01:46.230 --> 00:01:46.240 align:start position:0%
make uh one point or one square right
 

00:01:46.240 --> 00:01:48.389 align:start position:0%
make uh one point or one square right
what<00:01:46.399><c> if</c><00:01:46.479><c> we</c><00:01:46.640><c> had</c><00:01:46.960><c> two</c><00:01:47.360><c> duplicates</c><00:01:48.000><c> of</c><00:01:48.159><c> this</c>

00:01:48.389 --> 00:01:48.399 align:start position:0%
what if we had two duplicates of this
 

00:01:48.399 --> 00:01:50.710 align:start position:0%
what if we had two duplicates of this
point<00:01:48.720><c> on</c><00:01:48.960><c> the</c><00:01:49.200><c> top</c><00:01:49.680><c> left</c><00:01:50.159><c> then</c><00:01:50.399><c> how</c><00:01:50.560><c> many</c>

00:01:50.710 --> 00:01:50.720 align:start position:0%
point on the top left then how many
 

00:01:50.720 --> 00:01:52.310 align:start position:0%
point on the top left then how many
squares<00:01:51.040><c> would</c><00:01:51.200><c> be</c><00:01:51.360><c> able</c><00:01:51.600><c> to</c><00:01:51.759><c> make</c><00:01:52.079><c> well</c>

00:01:52.310 --> 00:01:52.320 align:start position:0%
squares would be able to make well
 

00:01:52.320 --> 00:01:53.749 align:start position:0%
squares would be able to make well
technically<00:01:52.799><c> we'd</c><00:01:53.040><c> be</c><00:01:53.119><c> able</c><00:01:53.200><c> to</c><00:01:53.360><c> make</c><00:01:53.520><c> two</c>

00:01:53.749 --> 00:01:53.759 align:start position:0%
technically we'd be able to make two
 

00:01:53.759 --> 00:01:56.389 align:start position:0%
technically we'd be able to make two
squares<00:01:54.159><c> right</c><00:01:54.479><c> we</c><00:01:54.640><c> could</c><00:01:55.040><c> swap</c><00:01:55.600><c> the</c><00:01:55.759><c> top</c><00:01:56.079><c> left</c>

00:01:56.389 --> 00:01:56.399 align:start position:0%
squares right we could swap the top left
 

00:01:56.399 --> 00:01:58.950 align:start position:0%
squares right we could swap the top left
point<00:01:57.119><c> if</c><00:01:57.200><c> we</c><00:01:57.360><c> had</c><00:01:57.600><c> two</c><00:01:57.920><c> uh</c><00:01:58.240><c> you</c><00:01:58.399><c> know</c><00:01:58.560><c> two</c>

00:01:58.950 --> 00:01:58.960 align:start position:0%
point if we had two uh you know two
 

00:01:58.960 --> 00:02:00.870 align:start position:0%
point if we had two uh you know two
copies<00:01:59.520><c> of</c><00:01:59.680><c> it</c><00:01:59.759><c> so</c><00:01:59.920><c> then</c><00:02:00.079><c> we</c><00:02:00.240><c> could</c><00:02:00.320><c> make</c><00:02:00.560><c> two</c>

00:02:00.870 --> 00:02:00.880 align:start position:0%
copies of it so then we could make two
 

00:02:00.880 --> 00:02:03.990 align:start position:0%
copies of it so then we could make two
what<00:02:01.119><c> if</c><00:02:01.200><c> we</c><00:02:01.360><c> had</c><00:02:02.000><c> two</c><00:02:02.320><c> copies</c><00:02:02.880><c> of</c><00:02:03.040><c> this</c><00:02:03.360><c> point</c>

00:02:03.990 --> 00:02:04.000 align:start position:0%
what if we had two copies of this point
 

00:02:04.000 --> 00:02:06.709 align:start position:0%
what if we had two copies of this point
and<00:02:04.320><c> we</c><00:02:04.479><c> had</c><00:02:04.799><c> two</c><00:02:05.119><c> copies</c><00:02:05.920><c> of</c><00:02:06.159><c> the</c><00:02:06.320><c> bottom</c>

00:02:06.709 --> 00:02:06.719 align:start position:0%
and we had two copies of the bottom
 

00:02:06.719 --> 00:02:08.469 align:start position:0%
and we had two copies of the bottom
right<00:02:07.040><c> point</c><00:02:07.439><c> how</c><00:02:07.600><c> many</c><00:02:07.840><c> squares</c><00:02:08.160><c> could</c><00:02:08.399><c> we</c>

00:02:08.469 --> 00:02:08.479 align:start position:0%
right point how many squares could we
 

00:02:08.479 --> 00:02:11.029 align:start position:0%
right point how many squares could we
make<00:02:09.039><c> then</c><00:02:09.840><c> in</c><00:02:09.920><c> that</c><00:02:10.080><c> case</c><00:02:10.319><c> we</c><00:02:10.479><c> could</c><00:02:10.560><c> make</c>

00:02:11.029 --> 00:02:11.039 align:start position:0%
make then in that case we could make
 

00:02:11.039 --> 00:02:13.190 align:start position:0%
make then in that case we could make
four<00:02:11.360><c> squares</c><00:02:12.080><c> where</c><00:02:12.239><c> i</c><00:02:12.400><c> got</c><00:02:12.560><c> this</c><00:02:12.800><c> for</c><00:02:13.040><c> is</c>

00:02:13.190 --> 00:02:13.200 align:start position:0%
four squares where i got this for is
 

00:02:13.200 --> 00:02:15.190 align:start position:0%
four squares where i got this for is
basically<00:02:13.680><c> by</c><00:02:13.920><c> multiplying</c><00:02:14.480><c> how</c><00:02:14.640><c> many</c><00:02:14.800><c> copies</c>

00:02:15.190 --> 00:02:15.200 align:start position:0%
basically by multiplying how many copies
 

00:02:15.200 --> 00:02:17.270 align:start position:0%
basically by multiplying how many copies
we<00:02:15.360><c> have</c><00:02:15.520><c> of</c><00:02:15.680><c> this</c><00:02:16.080><c> and</c><00:02:16.239><c> how</c><00:02:16.400><c> many</c><00:02:16.640><c> copies</c><00:02:17.120><c> we</c>

00:02:17.270 --> 00:02:17.280 align:start position:0%
we have of this and how many copies we
 

00:02:17.280 --> 00:02:19.510 align:start position:0%
we have of this and how many copies we
have<00:02:17.599><c> of</c><00:02:17.920><c> this</c><00:02:18.560><c> so</c><00:02:18.800><c> that's</c><00:02:19.040><c> going</c><00:02:19.120><c> to</c><00:02:19.280><c> be</c>

00:02:19.510 --> 00:02:19.520 align:start position:0%
have of this so that's going to be
 

00:02:19.520 --> 00:02:20.790 align:start position:0%
have of this so that's going to be
important<00:02:20.000><c> so</c>

00:02:20.790 --> 00:02:20.800 align:start position:0%
important so
 

00:02:20.800 --> 00:02:22.390 align:start position:0%
important so
uh<00:02:21.120><c> we're</c><00:02:21.280><c> gonna</c><00:02:21.599><c> since</c>

00:02:22.390 --> 00:02:22.400 align:start position:0%
uh we're gonna since
 

00:02:22.400 --> 00:02:24.150 align:start position:0%
uh we're gonna since
you<00:02:22.480><c> know</c><00:02:22.560><c> the</c><00:02:22.720><c> count</c><00:02:23.040><c> of</c><00:02:23.120><c> how</c><00:02:23.280><c> many</c><00:02:23.599><c> uh</c><00:02:23.840><c> each</c>

00:02:24.150 --> 00:02:24.160 align:start position:0%
you know the count of how many uh each
 

00:02:24.160 --> 00:02:26.150 align:start position:0%
you know the count of how many uh each
point<00:02:24.400><c> that</c><00:02:24.560><c> we</c><00:02:24.640><c> have</c><00:02:25.040><c> matters</c><00:02:25.599><c> i'm</c><00:02:25.840><c> gonna</c><00:02:26.000><c> be</c>

00:02:26.150 --> 00:02:26.160 align:start position:0%
point that we have matters i'm gonna be
 

00:02:26.160 --> 00:02:29.030 align:start position:0%
point that we have matters i'm gonna be
using<00:02:26.560><c> a</c><00:02:27.120><c> map</c><00:02:27.440><c> or</c><00:02:27.599><c> a</c><00:02:27.760><c> hash</c><00:02:28.080><c> map</c><00:02:28.400><c> to</c><00:02:28.480><c> basically</c>

00:02:29.030 --> 00:02:29.040 align:start position:0%
using a map or a hash map to basically
 

00:02:29.040 --> 00:02:32.150 align:start position:0%
using a map or a hash map to basically
count<00:02:29.360><c> the</c><00:02:29.599><c> number</c><00:02:29.840><c> of</c><00:02:30.000><c> occurrences</c><00:02:31.200><c> for</c><00:02:31.599><c> each</c>

00:02:32.150 --> 00:02:32.160 align:start position:0%
count the number of occurrences for each
 

00:02:32.160 --> 00:02:34.869 align:start position:0%
count the number of occurrences for each
point<00:02:32.720><c> so</c><00:02:32.959><c> now</c><00:02:33.200><c> for</c><00:02:33.440><c> the</c><00:02:33.599><c> actual</c><00:02:34.239><c> trick</c><00:02:34.640><c> the</c>

00:02:34.869 --> 00:02:34.879 align:start position:0%
point so now for the actual trick the
 

00:02:34.879 --> 00:02:37.589 align:start position:0%
point so now for the actual trick the
important<00:02:35.360><c> part</c><00:02:35.680><c> of</c><00:02:35.920><c> this</c><00:02:36.319><c> problem</c><00:02:37.200><c> the</c><00:02:37.360><c> most</c>

00:02:37.589 --> 00:02:37.599 align:start position:0%
important part of this problem the most
 

00:02:37.599 --> 00:02:39.990 align:start position:0%
important part of this problem the most
brute<00:02:38.000><c> force</c><00:02:38.319><c> way</c><00:02:38.640><c> is</c><00:02:38.879><c> going</c><00:02:38.959><c> to</c><00:02:39.120><c> be</c><00:02:39.440><c> an</c><00:02:39.680><c> n</c>

00:02:39.990 --> 00:02:40.000 align:start position:0%
brute force way is going to be an n
 

00:02:40.000 --> 00:02:42.869 align:start position:0%
brute force way is going to be an n
cubed<00:02:40.560><c> approach</c><00:02:41.360><c> why</c><00:02:41.599><c> exactly</c><00:02:42.160><c> is</c><00:02:42.319><c> that</c><00:02:42.560><c> well</c>

00:02:42.869 --> 00:02:42.879 align:start position:0%
cubed approach why exactly is that well
 

00:02:42.879 --> 00:02:44.949 align:start position:0%
cubed approach why exactly is that well
let's<00:02:43.120><c> say</c><00:02:43.360><c> we're</c><00:02:43.519><c> given</c><00:02:43.840><c> this</c><00:02:44.160><c> a</c><00:02:44.319><c> query</c><00:02:44.720><c> point</c>

00:02:44.949 --> 00:02:44.959 align:start position:0%
let's say we're given this a query point
 

00:02:44.959 --> 00:02:47.030 align:start position:0%
let's say we're given this a query point
then<00:02:45.120><c> we</c><00:02:45.360><c> want</c><00:02:45.519><c> to</c><00:02:45.599><c> run</c><00:02:45.920><c> through</c><00:02:46.319><c> all</c><00:02:46.560><c> possible</c>

00:02:47.030 --> 00:02:47.040 align:start position:0%
then we want to run through all possible
 

00:02:47.040 --> 00:02:49.750 align:start position:0%
then we want to run through all possible
combinations<00:02:48.239><c> of</c><00:02:48.720><c> the</c><00:02:48.879><c> remaining</c><00:02:49.360><c> points</c><00:02:49.680><c> we</c>

00:02:49.750 --> 00:02:49.760 align:start position:0%
combinations of the remaining points we
 

00:02:49.760 --> 00:02:51.990 align:start position:0%
combinations of the remaining points we
have<00:02:50.000><c> right</c><00:02:50.160><c> we</c><00:02:50.319><c> want</c><00:02:50.480><c> to</c><00:02:50.800><c> do</c><00:02:51.040><c> an</c><00:02:51.280><c> n</c>

00:02:51.990 --> 00:02:52.000 align:start position:0%
have right we want to do an n
 

00:02:52.000 --> 00:02:54.150 align:start position:0%
have right we want to do an n
an<00:02:52.160><c> entire</c><00:02:52.640><c> loop</c><00:02:53.120><c> uh</c><00:02:53.440><c> you</c><00:02:53.599><c> know</c><00:02:53.760><c> going</c><00:02:53.920><c> through</c>

00:02:54.150 --> 00:02:54.160 align:start position:0%
an entire loop uh you know going through
 

00:02:54.160 --> 00:02:55.990 align:start position:0%
an entire loop uh you know going through
every<00:02:54.319><c> single</c><00:02:54.640><c> point</c><00:02:54.959><c> suppose</c><00:02:55.440><c> that</c><00:02:55.680><c> point</c>

00:02:55.990 --> 00:02:56.000 align:start position:0%
every single point suppose that point
 

00:02:56.000 --> 00:02:57.910 align:start position:0%
every single point suppose that point
was<00:02:56.239><c> in</c><00:02:56.319><c> the</c><00:02:56.480><c> top</c><00:02:56.800><c> left</c><00:02:57.040><c> position</c><00:02:57.599><c> then</c><00:02:57.760><c> we</c>

00:02:57.910 --> 00:02:57.920 align:start position:0%
was in the top left position then we
 

00:02:57.920 --> 00:02:59.750 align:start position:0%
was in the top left position then we
want<00:02:58.080><c> to</c><00:02:58.159><c> do</c><00:02:58.319><c> another</c><00:02:58.720><c> end</c><00:02:58.959><c> loop</c><00:02:59.200><c> to</c><00:02:59.360><c> suppose</c>

00:02:59.750 --> 00:02:59.760 align:start position:0%
want to do another end loop to suppose
 

00:02:59.760 --> 00:03:02.229 align:start position:0%
want to do another end loop to suppose
every<00:03:00.000><c> point</c><00:03:00.239><c> was</c><00:03:00.480><c> in</c><00:03:00.640><c> the</c><00:03:00.879><c> bottom</c><00:03:01.280><c> left</c><00:03:01.840><c> and</c>

00:03:02.229 --> 00:03:02.239 align:start position:0%
every point was in the bottom left and
 

00:03:02.239 --> 00:03:04.229 align:start position:0%
every point was in the bottom left and
an<00:03:02.400><c> end</c><00:03:02.640><c> loop</c><00:03:02.879><c> for</c><00:03:03.040><c> every</c><00:03:03.360><c> bottom</c><00:03:03.680><c> right</c><00:03:04.000><c> point</c>

00:03:04.229 --> 00:03:04.239 align:start position:0%
an end loop for every bottom right point
 

00:03:04.239 --> 00:03:05.910 align:start position:0%
an end loop for every bottom right point
and<00:03:04.319><c> then</c><00:03:04.480><c> we</c><00:03:04.560><c> want</c><00:03:04.720><c> to</c><00:03:04.800><c> check</c><00:03:05.120><c> okay</c><00:03:05.440><c> does</c><00:03:05.680><c> this</c>

00:03:05.910 --> 00:03:05.920 align:start position:0%
and then we want to check okay does this
 

00:03:05.920 --> 00:03:07.990 align:start position:0%
and then we want to check okay does this
combination<00:03:06.480><c> of</c><00:03:06.640><c> four</c><00:03:06.879><c> points</c><00:03:07.280><c> actually</c><00:03:07.680><c> form</c>

00:03:07.990 --> 00:03:08.000 align:start position:0%
combination of four points actually form
 

00:03:08.000 --> 00:03:10.550 align:start position:0%
combination of four points actually form
a<00:03:08.080><c> perfect</c><00:03:08.480><c> square</c><00:03:09.120><c> or</c><00:03:09.440><c> not</c><00:03:09.680><c> so</c><00:03:09.840><c> that's</c><00:03:10.159><c> really</c>

00:03:10.550 --> 00:03:10.560 align:start position:0%
a perfect square or not so that's really
 

00:03:10.560 --> 00:03:12.710 align:start position:0%
a perfect square or not so that's really
not<00:03:10.879><c> efficient</c><00:03:11.760><c> right</c><00:03:12.000><c> and</c><00:03:12.159><c> it's</c><00:03:12.319><c> actually</c>

00:03:12.710 --> 00:03:12.720 align:start position:0%
not efficient right and it's actually
 

00:03:12.720 --> 00:03:15.910 align:start position:0%
not efficient right and it's actually
not<00:03:13.040><c> super</c><00:03:13.360><c> easy</c><00:03:13.599><c> to</c><00:03:13.760><c> code</c><00:03:14.239><c> either</c><00:03:15.040><c> so</c><00:03:15.599><c> what's</c>

00:03:15.910 --> 00:03:15.920 align:start position:0%
not super easy to code either so what's
 

00:03:15.920 --> 00:03:18.309 align:start position:0%
not super easy to code either so what's
an<00:03:16.159><c> easier</c><00:03:16.640><c> way</c><00:03:16.879><c> to</c><00:03:17.040><c> do</c><00:03:17.280><c> it</c><00:03:17.440><c> and</c><00:03:17.519><c> we</c><00:03:17.680><c> do</c><00:03:17.920><c> need</c><00:03:18.159><c> a</c>

00:03:18.309 --> 00:03:18.319 align:start position:0%
an easier way to do it and we do need a
 

00:03:18.319 --> 00:03:20.309 align:start position:0%
an easier way to do it and we do need a
tiny<00:03:18.720><c> bit</c><00:03:18.879><c> of</c><00:03:19.040><c> geometry</c><00:03:19.760><c> to</c><00:03:20.000><c> kind</c><00:03:20.159><c> of</c>

00:03:20.309 --> 00:03:20.319 align:start position:0%
tiny bit of geometry to kind of
 

00:03:20.319 --> 00:03:22.710 align:start position:0%
tiny bit of geometry to kind of
understand<00:03:21.280><c> how</c><00:03:21.519><c> we</c><00:03:21.680><c> can</c><00:03:21.840><c> make</c><00:03:22.080><c> it</c><00:03:22.239><c> more</c>

00:03:22.710 --> 00:03:22.720 align:start position:0%
understand how we can make it more
 

00:03:22.720 --> 00:03:25.030 align:start position:0%
understand how we can make it more
efficient<00:03:23.360><c> so</c><00:03:23.680><c> suppose</c><00:03:24.159><c> we're</c><00:03:24.319><c> given</c><00:03:24.560><c> a</c><00:03:24.640><c> query</c>

00:03:25.030 --> 00:03:25.040 align:start position:0%
efficient so suppose we're given a query
 

00:03:25.040 --> 00:03:27.670 align:start position:0%
efficient so suppose we're given a query
point<00:03:25.440><c> right</c><00:03:26.080><c> what's</c><00:03:26.400><c> an</c><00:03:26.720><c> easy</c><00:03:27.280><c> way</c><00:03:27.519><c> to</c>

00:03:27.670 --> 00:03:27.680 align:start position:0%
point right what's an easy way to
 

00:03:27.680 --> 00:03:28.949 align:start position:0%
point right what's an easy way to
determine

00:03:28.949 --> 00:03:28.959 align:start position:0%
determine
 

00:03:28.959 --> 00:03:32.390 align:start position:0%
determine
the<00:03:29.360><c> rectangle</c><00:03:30.159><c> of</c><00:03:30.640><c> this</c><00:03:31.040><c> point</c><00:03:31.360><c> or</c><00:03:31.599><c> of</c><00:03:32.319><c> you</c>

00:03:32.390 --> 00:03:32.400 align:start position:0%
the rectangle of this point or of you
 

00:03:32.400 --> 00:03:34.390 align:start position:0%
the rectangle of this point or of you
know<00:03:32.720><c> trying</c><00:03:33.040><c> to</c><00:03:33.120><c> make</c><00:03:33.360><c> a</c><00:03:33.519><c> square</c><00:03:33.920><c> what's</c><00:03:34.159><c> an</c>

00:03:34.390 --> 00:03:34.400 align:start position:0%
know trying to make a square what's an
 

00:03:34.400 --> 00:03:36.710 align:start position:0%
know trying to make a square what's an
easy<00:03:34.720><c> way</c><00:03:34.959><c> to</c><00:03:35.120><c> determine</c><00:03:35.680><c> that</c><00:03:35.920><c> well</c><00:03:36.480><c> since</c>

00:03:36.710 --> 00:03:36.720 align:start position:0%
easy way to determine that well since
 

00:03:36.720 --> 00:03:39.110 align:start position:0%
easy way to determine that well since
we're<00:03:36.959><c> actually</c><00:03:37.280><c> dealing</c><00:03:37.680><c> with</c><00:03:38.000><c> squares</c><00:03:38.879><c> it's</c>

00:03:39.110 --> 00:03:39.120 align:start position:0%
we're actually dealing with squares it's
 

00:03:39.120 --> 00:03:40.550 align:start position:0%
we're actually dealing with squares it's
a<00:03:39.200><c> little</c><00:03:39.360><c> bit</c><00:03:39.760><c> different</c><00:03:40.000><c> than</c><00:03:40.159><c> the</c><00:03:40.319><c> trick</c>

00:03:40.550 --> 00:03:40.560 align:start position:0%
a little bit different than the trick
 

00:03:40.560 --> 00:03:41.430 align:start position:0%
a little bit different than the trick
i'm<00:03:40.720><c> going</c><00:03:40.720><c> to</c><00:03:40.799><c> show</c><00:03:40.959><c> you</c><00:03:41.120><c> but</c><00:03:41.200><c> i'm</c><00:03:41.360><c> going</c><00:03:41.360><c> to</c>

00:03:41.430 --> 00:03:41.440 align:start position:0%
i'm going to show you but i'm going to
 

00:03:41.440 --> 00:03:43.910 align:start position:0%
i'm going to show you but i'm going to
show<00:03:41.599><c> you</c><00:03:41.760><c> a</c><00:03:41.840><c> trick</c><00:03:42.080><c> that</c><00:03:42.239><c> can</c><00:03:42.400><c> apply</c><00:03:42.799><c> to</c><00:03:43.120><c> all</c>

00:03:43.910 --> 00:03:43.920 align:start position:0%
show you a trick that can apply to all
 

00:03:43.920 --> 00:03:45.270 align:start position:0%
show you a trick that can apply to all
that's<00:03:44.159><c> a</c><00:03:44.159><c> little</c><00:03:44.319><c> bit</c><00:03:44.480><c> more</c><00:03:44.640><c> generic</c><00:03:45.120><c> and</c><00:03:45.200><c> it</c>

00:03:45.270 --> 00:03:45.280 align:start position:0%
that's a little bit more generic and it
 

00:03:45.280 --> 00:03:47.270 align:start position:0%
that's a little bit more generic and it
could<00:03:45.440><c> apply</c><00:03:45.680><c> to</c><00:03:45.920><c> rectangles</c><00:03:46.640><c> as</c><00:03:46.720><c> well</c><00:03:46.959><c> so</c><00:03:47.120><c> if</c>

00:03:47.270 --> 00:03:47.280 align:start position:0%
could apply to rectangles as well so if
 

00:03:47.280 --> 00:03:48.789 align:start position:0%
could apply to rectangles as well so if
instead<00:03:47.519><c> of</c><00:03:47.599><c> detecting</c><00:03:48.080><c> squares</c><00:03:48.480><c> we</c><00:03:48.560><c> wanted</c>

00:03:48.789 --> 00:03:48.799 align:start position:0%
instead of detecting squares we wanted
 

00:03:48.799 --> 00:03:50.710 align:start position:0%
instead of detecting squares we wanted
to<00:03:48.879><c> detect</c><00:03:49.280><c> rectangles</c><00:03:49.840><c> i'll</c><00:03:50.000><c> show</c><00:03:50.159><c> you</c><00:03:50.560><c> the</c>

00:03:50.710 --> 00:03:50.720 align:start position:0%
to detect rectangles i'll show you the
 

00:03:50.720 --> 00:03:53.429 align:start position:0%
to detect rectangles i'll show you the
way<00:03:50.959><c> that</c><00:03:51.040><c> we</c><00:03:51.200><c> could</c><00:03:51.360><c> do</c><00:03:51.599><c> that</c><00:03:52.000><c> so</c><00:03:52.640><c> we're</c><00:03:52.799><c> given</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
way that we could do that so we're given
 

00:03:53.439 --> 00:03:56.229 align:start position:0%
way that we could do that so we're given
a<00:03:53.680><c> point</c><00:03:54.080><c> right</c><00:03:54.400><c> this</c><00:03:54.640><c> point</c><00:03:55.120><c> we</c><00:03:55.280><c> want</c><00:03:55.439><c> to</c><00:03:55.599><c> find</c>

00:03:56.229 --> 00:03:56.239 align:start position:0%
a point right this point we want to find
 

00:03:56.239 --> 00:03:59.670 align:start position:0%
a point right this point we want to find
a<00:03:56.720><c> diagonal</c><00:03:57.519><c> point</c><00:03:58.080><c> from</c><00:03:58.640><c> this</c><00:03:59.040><c> one</c><00:03:59.439><c> so</c>

00:03:59.670 --> 00:03:59.680 align:start position:0%
a diagonal point from this one so
 

00:03:59.680 --> 00:04:02.149 align:start position:0%
a diagonal point from this one so
instead<00:04:00.000><c> of</c><00:04:00.159><c> doing</c><00:04:00.560><c> three</c><00:04:01.200><c> n</c><00:04:01.680><c> loops</c><00:04:01.920><c> like</c>

00:04:02.149 --> 00:04:02.159 align:start position:0%
instead of doing three n loops like
 

00:04:02.159 --> 00:04:03.990 align:start position:0%
instead of doing three n loops like
instead<00:04:02.400><c> of</c><00:04:02.480><c> doing</c><00:04:02.720><c> three</c><00:04:03.040><c> for</c><00:04:03.280><c> loops</c><00:04:03.599><c> to</c><00:04:03.680><c> find</c>

00:04:03.990 --> 00:04:04.000 align:start position:0%
instead of doing three for loops to find
 

00:04:04.000 --> 00:04:06.149 align:start position:0%
instead of doing three for loops to find
every<00:04:04.239><c> single</c><00:04:04.959><c> you</c><00:04:05.040><c> know</c><00:04:05.280><c> matching</c><00:04:05.760><c> pair</c><00:04:06.000><c> of</c>

00:04:06.149 --> 00:04:06.159 align:start position:0%
every single you know matching pair of
 

00:04:06.159 --> 00:04:07.830 align:start position:0%
every single you know matching pair of
three<00:04:06.400><c> points</c><00:04:06.720><c> we're</c><00:04:06.799><c> just</c><00:04:06.959><c> going</c><00:04:07.120><c> to</c><00:04:07.200><c> run</c><00:04:07.519><c> a</c>

00:04:07.830 --> 00:04:07.840 align:start position:0%
three points we're just going to run a
 

00:04:07.840 --> 00:04:10.149 align:start position:0%
three points we're just going to run a
single<00:04:08.319><c> loop</c><00:04:08.879><c> and</c><00:04:09.120><c> supposing</c><00:04:09.599><c> that</c><00:04:09.920><c> every</c>

00:04:10.149 --> 00:04:10.159 align:start position:0%
single loop and supposing that every
 

00:04:10.159 --> 00:04:12.710 align:start position:0%
single loop and supposing that every
single<00:04:10.560><c> point</c><00:04:10.799><c> we</c><00:04:10.959><c> have</c><00:04:11.120><c> available</c><00:04:11.599><c> to</c><00:04:11.760><c> us</c><00:04:12.239><c> was</c>

00:04:12.710 --> 00:04:12.720 align:start position:0%
single point we have available to us was
 

00:04:12.720 --> 00:04:15.509 align:start position:0%
single point we have available to us was
the<00:04:12.959><c> diagonal</c><00:04:13.680><c> point</c><00:04:14.319><c> from</c><00:04:14.640><c> the</c><00:04:14.879><c> query</c><00:04:15.280><c> point</c>

00:04:15.509 --> 00:04:15.519 align:start position:0%
the diagonal point from the query point
 

00:04:15.519 --> 00:04:19.110 align:start position:0%
the diagonal point from the query point
that<00:04:15.680><c> we're</c><00:04:15.920><c> given</c><00:04:16.799><c> now</c><00:04:17.359><c> we</c><00:04:17.600><c> want</c><00:04:17.840><c> to</c><00:04:18.079><c> verify</c>

00:04:19.110 --> 00:04:19.120 align:start position:0%
that we're given now we want to verify
 

00:04:19.120 --> 00:04:21.749 align:start position:0%
that we're given now we want to verify
if<00:04:19.519><c> it</c><00:04:19.600><c> could</c><00:04:19.840><c> actually</c><00:04:20.400><c> form</c><00:04:20.720><c> a</c><00:04:20.959><c> square</c><00:04:21.600><c> how</c>

00:04:21.749 --> 00:04:21.759 align:start position:0%
if it could actually form a square how
 

00:04:21.759 --> 00:04:25.350 align:start position:0%
if it could actually form a square how
do<00:04:21.919><c> we</c><00:04:22.160><c> know</c><00:04:22.639><c> if</c><00:04:23.120><c> this</c><00:04:23.440><c> diagonal</c><00:04:24.080><c> point</c><00:04:24.639><c> with</c>

00:04:25.350 --> 00:04:25.360 align:start position:0%
do we know if this diagonal point with
 

00:04:25.360 --> 00:04:27.590 align:start position:0%
do we know if this diagonal point with
this<00:04:25.600><c> query</c><00:04:26.000><c> point</c><00:04:26.240><c> could</c><00:04:26.560><c> actually</c><00:04:27.040><c> form</c><00:04:27.440><c> a</c>

00:04:27.590 --> 00:04:27.600 align:start position:0%
this query point could actually form a
 

00:04:27.600 --> 00:04:29.990 align:start position:0%
this query point could actually form a
square<00:04:28.240><c> well</c><00:04:28.479><c> of</c><00:04:28.720><c> course</c><00:04:29.360><c> the</c><00:04:29.680><c> height</c>

00:04:29.990 --> 00:04:30.000 align:start position:0%
square well of course the height
 

00:04:30.000 --> 00:04:32.469 align:start position:0%
square well of course the height
difference<00:04:30.479><c> of</c><00:04:30.639><c> them</c><00:04:30.880><c> or</c><00:04:31.040><c> the</c><00:04:31.280><c> y</c><00:04:31.680><c> difference</c>

00:04:32.469 --> 00:04:32.479 align:start position:0%
difference of them or the y difference
 

00:04:32.479 --> 00:04:35.990 align:start position:0%
difference of them or the y difference
of<00:04:32.639><c> them</c><00:04:33.040><c> has</c><00:04:33.280><c> to</c><00:04:33.520><c> be</c><00:04:33.680><c> the</c><00:04:33.840><c> exact</c><00:04:34.320><c> same</c><00:04:34.960><c> as</c><00:04:35.520><c> the</c>

00:04:35.990 --> 00:04:36.000 align:start position:0%
of them has to be the exact same as the
 

00:04:36.000 --> 00:04:39.430 align:start position:0%
of them has to be the exact same as the
width<00:04:36.479><c> distance</c><00:04:37.120><c> or</c><00:04:37.360><c> the</c><00:04:37.919><c> x</c><00:04:38.560><c> distance</c><00:04:39.040><c> between</c>

00:04:39.430 --> 00:04:39.440 align:start position:0%
width distance or the x distance between
 

00:04:39.440 --> 00:04:40.629 align:start position:0%
width distance or the x distance between
them<00:04:39.680><c> right</c>

00:04:40.629 --> 00:04:40.639 align:start position:0%
them right
 

00:04:40.639 --> 00:04:43.030 align:start position:0%
them right
so<00:04:41.120><c> that's</c><00:04:41.520><c> something</c><00:04:41.840><c> we</c><00:04:42.000><c> can</c><00:04:42.160><c> easily</c><00:04:42.639><c> verify</c>

00:04:43.030 --> 00:04:43.040 align:start position:0%
so that's something we can easily verify
 

00:04:43.040 --> 00:04:44.870 align:start position:0%
so that's something we can easily verify
by<00:04:43.199><c> just</c><00:04:43.440><c> taking</c><00:04:43.680><c> the</c><00:04:44.000><c> difference</c><00:04:44.560><c> of</c><00:04:44.639><c> the</c>

00:04:44.870 --> 00:04:44.880 align:start position:0%
by just taking the difference of the
 

00:04:44.880 --> 00:04:46.790 align:start position:0%
by just taking the difference of the
coordinates<00:04:45.520><c> of</c><00:04:45.680><c> these</c><00:04:46.000><c> two</c><00:04:46.240><c> points</c><00:04:46.479><c> right</c>

00:04:46.790 --> 00:04:46.800 align:start position:0%
coordinates of these two points right
 

00:04:46.800 --> 00:04:49.030 align:start position:0%
coordinates of these two points right
once<00:04:47.120><c> we</c><00:04:47.280><c> have</c><00:04:47.440><c> verified</c><00:04:47.919><c> that</c><00:04:48.320><c> we</c><00:04:48.479><c> know</c><00:04:48.720><c> it's</c>

00:04:49.030 --> 00:04:49.040 align:start position:0%
once we have verified that we know it's
 

00:04:49.040 --> 00:04:51.030 align:start position:0%
once we have verified that we know it's
possible<00:04:49.759><c> if</c><00:04:50.000><c> these</c><00:04:50.320><c> two</c><00:04:50.560><c> points</c><00:04:50.880><c> are</c>

00:04:51.030 --> 00:04:51.040 align:start position:0%
possible if these two points are
 

00:04:51.040 --> 00:04:53.110 align:start position:0%
possible if these two points are
diagonal<00:04:51.600><c> to</c><00:04:51.759><c> each</c><00:04:51.919><c> other</c><00:04:52.160><c> for</c><00:04:52.400><c> them</c><00:04:52.639><c> to</c><00:04:52.880><c> form</c>

00:04:53.110 --> 00:04:53.120 align:start position:0%
diagonal to each other for them to form
 

00:04:53.120 --> 00:04:56.390 align:start position:0%
diagonal to each other for them to form
a<00:04:53.280><c> square</c><00:04:54.000><c> and</c><00:04:54.560><c> once</c><00:04:54.960><c> we</c><00:04:55.199><c> have</c><00:04:55.520><c> that</c><00:04:55.919><c> we</c><00:04:56.080><c> have</c>

00:04:56.390 --> 00:04:56.400 align:start position:0%
a square and once we have that we have
 

00:04:56.400 --> 00:04:57.430 align:start position:0%
a square and once we have that we have
actually

00:04:57.430 --> 00:04:57.440 align:start position:0%
actually
 

00:04:57.440 --> 00:04:59.510 align:start position:0%
actually
uh<00:04:57.759><c> you</c><00:04:57.919><c> know</c><00:04:58.160><c> then</c><00:04:58.320><c> we</c><00:04:58.479><c> can</c><00:04:58.800><c> instantly</c><00:04:59.280><c> check</c>

00:04:59.510 --> 00:04:59.520 align:start position:0%
uh you know then we can instantly check
 

00:04:59.520 --> 00:05:01.909 align:start position:0%
uh you know then we can instantly check
an<00:04:59.680><c> o</c><00:04:59.840><c> of</c><00:05:00.000><c> one</c><00:05:00.400><c> if</c><00:05:00.560><c> it's</c><00:05:00.800><c> possible</c><00:05:01.440><c> that</c><00:05:01.680><c> these</c>

00:05:01.909 --> 00:05:01.919 align:start position:0%
an o of one if it's possible that these
 

00:05:01.919 --> 00:05:04.550 align:start position:0%
an o of one if it's possible that these
two<00:05:02.160><c> form</c><00:05:02.400><c> an</c><00:05:02.639><c> actual</c><00:05:03.120><c> square</c><00:05:04.000><c> given</c><00:05:04.400><c> the</c>

00:05:04.550 --> 00:05:04.560 align:start position:0%
two form an actual square given the
 

00:05:04.560 --> 00:05:05.990 align:start position:0%
two form an actual square given the
current<00:05:04.880><c> points</c><00:05:05.120><c> that</c><00:05:05.199><c> we</c><00:05:05.360><c> have</c><00:05:05.520><c> how</c><00:05:05.680><c> can</c><00:05:05.840><c> we</c>

00:05:05.990 --> 00:05:06.000 align:start position:0%
current points that we have how can we
 

00:05:06.000 --> 00:05:07.830 align:start position:0%
current points that we have how can we
check<00:05:06.160><c> it</c><00:05:06.320><c> with</c><00:05:06.400><c> o</c><00:05:06.639><c> of</c><00:05:06.800><c> one</c><00:05:07.039><c> well</c><00:05:07.280><c> remember</c><00:05:07.680><c> we</c>

00:05:07.830 --> 00:05:07.840 align:start position:0%
check it with o of one well remember we
 

00:05:07.840 --> 00:05:09.830 align:start position:0%
check it with o of one well remember we
do<00:05:08.080><c> have</c><00:05:08.240><c> a</c><00:05:08.320><c> hash</c><00:05:08.639><c> map</c><00:05:08.960><c> right</c><00:05:09.360><c> what</c><00:05:09.600><c> are</c><00:05:09.680><c> we</c>

00:05:09.830 --> 00:05:09.840 align:start position:0%
do have a hash map right what are we
 

00:05:09.840 --> 00:05:12.070 align:start position:0%
do have a hash map right what are we
going<00:05:10.000><c> to</c><00:05:10.160><c> say</c><00:05:10.800><c> suppose</c><00:05:11.199><c> the</c><00:05:11.360><c> coordinates</c><00:05:11.919><c> of</c>

00:05:12.070 --> 00:05:12.080 align:start position:0%
going to say suppose the coordinates of
 

00:05:12.080 --> 00:05:15.029 align:start position:0%
going to say suppose the coordinates of
this<00:05:12.320><c> point</c><00:05:12.639><c> are</c><00:05:12.800><c> p</c><00:05:13.199><c> x</c><00:05:13.600><c> and</c><00:05:14.080><c> p</c><00:05:14.400><c> y</c><00:05:14.639><c> or</c><00:05:14.800><c> you</c><00:05:14.960><c> could</c>

00:05:15.029 --> 00:05:15.039 align:start position:0%
this point are p x and p y or you could
 

00:05:15.039 --> 00:05:17.350 align:start position:0%
this point are p x and p y or you could
say<00:05:15.280><c> q</c><00:05:15.600><c> x</c><00:05:15.840><c> q</c><00:05:16.000><c> y</c><00:05:16.160><c> for</c><00:05:16.320><c> the</c><00:05:16.479><c> query</c><00:05:16.880><c> point</c><00:05:17.199><c> and</c>

00:05:17.350 --> 00:05:17.360 align:start position:0%
say q x q y for the query point and
 

00:05:17.360 --> 00:05:19.189 align:start position:0%
say q x q y for the query point and
suppose<00:05:17.919><c> the</c><00:05:18.080><c> coordinates</c><00:05:18.479><c> of</c><00:05:18.560><c> this</c><00:05:18.800><c> bottom</c>

00:05:19.189 --> 00:05:19.199 align:start position:0%
suppose the coordinates of this bottom
 

00:05:19.199 --> 00:05:22.550 align:start position:0%
suppose the coordinates of this bottom
point<00:05:19.520><c> are</c><00:05:19.759><c> x</c><00:05:20.160><c> and</c><00:05:20.320><c> y</c><00:05:20.960><c> we</c><00:05:21.199><c> want</c><00:05:21.440><c> to</c><00:05:21.600><c> know</c><00:05:22.240><c> does</c>

00:05:22.550 --> 00:05:22.560 align:start position:0%
point are x and y we want to know does
 

00:05:22.560 --> 00:05:25.749 align:start position:0%
point are x and y we want to know does
there<00:05:22.880><c> exist</c><00:05:23.520><c> a</c><00:05:23.680><c> top</c><00:05:24.240><c> left</c><00:05:24.639><c> point</c><00:05:25.120><c> how</c><00:05:25.360><c> can</c><00:05:25.520><c> we</c>

00:05:25.749 --> 00:05:25.759 align:start position:0%
there exist a top left point how can we
 

00:05:25.759 --> 00:05:29.029 align:start position:0%
there exist a top left point how can we
check<00:05:26.000><c> that</c><00:05:26.400><c> by</c><00:05:26.720><c> taking</c><00:05:27.600><c> the</c><00:05:27.919><c> x</c><00:05:28.240><c> coordinate</c><00:05:28.800><c> of</c>

00:05:29.029 --> 00:05:29.039 align:start position:0%
check that by taking the x coordinate of
 

00:05:29.039 --> 00:05:31.270 align:start position:0%
check that by taking the x coordinate of
this<00:05:29.360><c> point</c><00:05:29.680><c> and</c><00:05:29.840><c> the</c><00:05:30.080><c> y</c><00:05:30.400><c> coordinate</c><00:05:30.880><c> of</c><00:05:31.039><c> this</c>

00:05:31.270 --> 00:05:31.280 align:start position:0%
this point and the y coordinate of this
 

00:05:31.280 --> 00:05:33.430 align:start position:0%
this point and the y coordinate of this
point<00:05:31.759><c> and</c><00:05:31.919><c> checking</c><00:05:32.320><c> if</c><00:05:32.400><c> that</c><00:05:32.639><c> exists</c><00:05:33.199><c> in</c><00:05:33.360><c> our</c>

00:05:33.430 --> 00:05:33.440 align:start position:0%
point and checking if that exists in our
 

00:05:33.440 --> 00:05:35.510 align:start position:0%
point and checking if that exists in our
hash<00:05:33.759><c> map</c><00:05:34.000><c> in</c><00:05:34.160><c> other</c><00:05:34.320><c> words</c><00:05:34.560><c> we</c><00:05:34.720><c> could</c><00:05:34.880><c> check</c>

00:05:35.510 --> 00:05:35.520 align:start position:0%
hash map in other words we could check
 

00:05:35.520 --> 00:05:38.310 align:start position:0%
hash map in other words we could check
this<00:05:35.840><c> coordinate</c><00:05:36.479><c> x</c><00:05:36.880><c> and</c><00:05:37.039><c> p</c><00:05:37.360><c> y</c><00:05:37.840><c> how</c><00:05:38.000><c> do</c><00:05:38.160><c> we</c>

00:05:38.310 --> 00:05:38.320 align:start position:0%
this coordinate x and p y how do we
 

00:05:38.320 --> 00:05:40.150 align:start position:0%
this coordinate x and p y how do we
check<00:05:38.479><c> the</c><00:05:38.639><c> bottom</c><00:05:38.960><c> right</c><00:05:39.199><c> point</c><00:05:39.520><c> the</c><00:05:39.680><c> exact</c>

00:05:40.150 --> 00:05:40.160 align:start position:0%
check the bottom right point the exact
 

00:05:40.160 --> 00:05:43.510 align:start position:0%
check the bottom right point the exact
opposite<00:05:40.639><c> right</c><00:05:40.800><c> we</c><00:05:40.960><c> take</c><00:05:41.759><c> p</c><00:05:42.160><c> x</c><00:05:42.720><c> and</c>

00:05:43.510 --> 00:05:43.520 align:start position:0%
opposite right we take p x and
 

00:05:43.520 --> 00:05:46.150 align:start position:0%
opposite right we take p x and
y<00:05:44.240><c> and</c><00:05:44.479><c> check</c><00:05:44.800><c> does</c><00:05:45.039><c> this</c><00:05:45.280><c> exist</c><00:05:45.680><c> in</c><00:05:45.840><c> our</c><00:05:45.919><c> hash</c>

00:05:46.150 --> 00:05:46.160 align:start position:0%
y and check does this exist in our hash
 

00:05:46.160 --> 00:05:48.230 align:start position:0%
y and check does this exist in our hash
map<00:05:46.400><c> right</c><00:05:46.560><c> since</c><00:05:46.800><c> we're</c><00:05:47.039><c> using</c><00:05:47.360><c> a</c><00:05:47.520><c> hash</c><00:05:47.840><c> map</c>

00:05:48.230 --> 00:05:48.240 align:start position:0%
map right since we're using a hash map
 

00:05:48.240 --> 00:05:50.710 align:start position:0%
map right since we're using a hash map
that'll<00:05:48.560><c> be</c><00:05:48.720><c> an</c><00:05:48.960><c> o</c><00:05:49.120><c> of</c><00:05:49.360><c> one</c><00:05:49.919><c> lookup</c><00:05:50.400><c> right</c><00:05:50.560><c> so</c>

00:05:50.710 --> 00:05:50.720 align:start position:0%
that'll be an o of one lookup right so
 

00:05:50.720 --> 00:05:52.710 align:start position:0%
that'll be an o of one lookup right so
that's<00:05:51.120><c> really</c><00:05:51.440><c> easy</c><00:05:51.759><c> so</c><00:05:52.000><c> then</c><00:05:52.320><c> we</c><00:05:52.479><c> can</c>

00:05:52.710 --> 00:05:52.720 align:start position:0%
that's really easy so then we can
 

00:05:52.720 --> 00:05:54.870 align:start position:0%
that's really easy so then we can
instantly<00:05:53.280><c> check</c><00:05:53.600><c> if</c><00:05:53.759><c> we</c><00:05:53.919><c> can</c><00:05:54.160><c> form</c><00:05:54.400><c> a</c><00:05:54.479><c> square</c>

00:05:54.870 --> 00:05:54.880 align:start position:0%
instantly check if we can form a square
 

00:05:54.880 --> 00:05:56.790 align:start position:0%
instantly check if we can form a square
or<00:05:55.039><c> not</c><00:05:55.199><c> but</c><00:05:55.360><c> remember</c><00:05:55.919><c> we</c><00:05:56.080><c> could</c><00:05:56.319><c> maybe</c><00:05:56.560><c> have</c>

00:05:56.790 --> 00:05:56.800 align:start position:0%
or not but remember we could maybe have
 

00:05:56.800 --> 00:05:58.790 align:start position:0%
or not but remember we could maybe have
three<00:05:57.120><c> copies</c><00:05:57.600><c> of</c><00:05:57.680><c> this</c><00:05:57.919><c> top</c><00:05:58.160><c> left</c><00:05:58.400><c> and</c><00:05:58.479><c> maybe</c>

00:05:58.790 --> 00:05:58.800 align:start position:0%
three copies of this top left and maybe
 

00:05:58.800 --> 00:06:00.710 align:start position:0%
three copies of this top left and maybe
we<00:05:58.880><c> could</c><00:05:59.039><c> have</c><00:05:59.199><c> two</c><00:05:59.440><c> copies</c><00:06:00.080><c> of</c><00:06:00.240><c> the</c><00:06:00.319><c> bottom</c>

00:06:00.710 --> 00:06:00.720 align:start position:0%
we could have two copies of the bottom
 

00:06:00.720 --> 00:06:02.629 align:start position:0%
we could have two copies of the bottom
right<00:06:01.199><c> so</c><00:06:01.440><c> we</c><00:06:01.600><c> want</c><00:06:01.759><c> to</c><00:06:01.840><c> take</c><00:06:02.000><c> the</c><00:06:02.160><c> counts</c><00:06:02.560><c> of</c>

00:06:02.629 --> 00:06:02.639 align:start position:0%
right so we want to take the counts of
 

00:06:02.639 --> 00:06:05.110 align:start position:0%
right so we want to take the counts of
them<00:06:03.039><c> and</c><00:06:03.120><c> then</c><00:06:03.360><c> multiply</c><00:06:03.840><c> them</c><00:06:04.080><c> together</c><00:06:04.639><c> and</c>

00:06:05.110 --> 00:06:05.120 align:start position:0%
them and then multiply them together and
 

00:06:05.120 --> 00:06:07.350 align:start position:0%
them and then multiply them together and
we<00:06:05.440><c> can</c><00:06:05.919><c> do</c><00:06:06.080><c> that</c><00:06:06.240><c> easily</c><00:06:06.560><c> with</c><00:06:06.720><c> our</c><00:06:06.800><c> hash</c><00:06:07.039><c> map</c>

00:06:07.350 --> 00:06:07.360 align:start position:0%
we can do that easily with our hash map
 

00:06:07.360 --> 00:06:09.110 align:start position:0%
we can do that easily with our hash map
because<00:06:07.600><c> with</c><00:06:07.840><c> our</c><00:06:07.919><c> hashmap</c><00:06:08.400><c> we</c><00:06:08.560><c> are</c><00:06:08.720><c> storing</c>

00:06:09.110 --> 00:06:09.120 align:start position:0%
because with our hashmap we are storing
 

00:06:09.120 --> 00:06:11.830 align:start position:0%
because with our hashmap we are storing
the<00:06:09.440><c> counts</c><00:06:10.080><c> of</c><00:06:10.319><c> each</c><00:06:10.560><c> of</c><00:06:10.720><c> these</c><00:06:11.360><c> points</c><00:06:11.680><c> that</c>

00:06:11.830 --> 00:06:11.840 align:start position:0%
the counts of each of these points that
 

00:06:11.840 --> 00:06:14.309 align:start position:0%
the counts of each of these points that
we<00:06:12.000><c> have</c><00:06:12.319><c> in</c><00:06:12.479><c> our</c><00:06:12.720><c> input</c><00:06:13.440><c> and</c><00:06:13.600><c> remember</c><00:06:13.919><c> the</c><00:06:14.080><c> o</c>

00:06:14.309 --> 00:06:14.319 align:start position:0%
we have in our input and remember the o
 

00:06:14.319 --> 00:06:17.510 align:start position:0%
we have in our input and remember the o
of<00:06:14.479><c> n</c><00:06:14.720><c> loop</c><00:06:15.280><c> is</c><00:06:15.600><c> only</c><00:06:16.000><c> iterating</c><00:06:16.560><c> through</c><00:06:17.280><c> the</c>

00:06:17.510 --> 00:06:17.520 align:start position:0%
of n loop is only iterating through the
 

00:06:17.520 --> 00:06:20.230 align:start position:0%
of n loop is only iterating through the
diagonal<00:06:18.319><c> list</c><00:06:18.639><c> of</c><00:06:18.880><c> points</c><00:06:19.440><c> okay</c><00:06:19.680><c> so</c><00:06:19.919><c> now</c>

00:06:20.230 --> 00:06:20.240 align:start position:0%
diagonal list of points okay so now
 

00:06:20.240 --> 00:06:22.150 align:start position:0%
diagonal list of points okay so now
let's<00:06:20.560><c> get</c><00:06:20.800><c> into</c><00:06:21.120><c> the</c><00:06:21.280><c> code</c><00:06:21.600><c> and</c><00:06:21.680><c> i</c><00:06:21.759><c> think</c><00:06:22.000><c> i</c>

00:06:22.150 --> 00:06:22.160 align:start position:0%
let's get into the code and i think i
 

00:06:22.160 --> 00:06:24.390 align:start position:0%
let's get into the code and i think i
mentioned<00:06:22.560><c> at</c><00:06:22.720><c> the</c><00:06:22.880><c> beginning</c><00:06:23.520><c> that</c><00:06:24.000><c> we</c><00:06:24.319><c> are</c>

00:06:24.390 --> 00:06:24.400 align:start position:0%
mentioned at the beginning that we are
 

00:06:24.400 --> 00:06:26.070 align:start position:0%
mentioned at the beginning that we are
going<00:06:24.560><c> to</c><00:06:24.639><c> use</c><00:06:24.800><c> a</c><00:06:25.039><c> list</c><00:06:25.280><c> but</c><00:06:25.440><c> now</c><00:06:25.600><c> that</c><00:06:25.759><c> i</c><00:06:25.840><c> think</c>

00:06:26.070 --> 00:06:26.080 align:start position:0%
going to use a list but now that i think
 

00:06:26.080 --> 00:06:27.510 align:start position:0%
going to use a list but now that i think
about<00:06:26.319><c> it</c><00:06:26.400><c> the</c><00:06:26.560><c> list</c><00:06:26.880><c> is</c><00:06:26.960><c> actually</c><00:06:27.280><c> not</c>

00:06:27.510 --> 00:06:27.520 align:start position:0%
about it the list is actually not
 

00:06:27.520 --> 00:06:29.110 align:start position:0%
about it the list is actually not
necessary<00:06:28.160><c> so</c><00:06:28.319><c> we</c><00:06:28.479><c> can</c><00:06:28.560><c> actually</c><00:06:28.880><c> even</c>

00:06:29.110 --> 00:06:29.120 align:start position:0%
necessary so we can actually even
 

00:06:29.120 --> 00:06:30.390 align:start position:0%
necessary so we can actually even
shorten<00:06:29.440><c> up</c><00:06:29.600><c> the</c><00:06:29.680><c> code</c><00:06:29.919><c> from</c><00:06:30.080><c> what</c><00:06:30.240><c> i</c>

00:06:30.390 --> 00:06:30.400 align:start position:0%
shorten up the code from what i
 

00:06:30.400 --> 00:06:32.230 align:start position:0%
shorten up the code from what i
originally<00:06:30.800><c> had</c><00:06:31.120><c> so</c><00:06:31.600><c> we're</c><00:06:31.759><c> just</c><00:06:32.000><c> going</c><00:06:32.080><c> to</c>

00:06:32.230 --> 00:06:32.240 align:start position:0%
originally had so we're just going to
 

00:06:32.240 --> 00:06:34.390 align:start position:0%
originally had so we're just going to
use<00:06:32.560><c> a</c><00:06:32.800><c> map</c><00:06:33.360><c> so</c><00:06:33.600><c> this</c><00:06:33.840><c> map</c><00:06:34.080><c> is</c><00:06:34.160><c> going</c><00:06:34.240><c> to</c><00:06:34.319><c> be</c>

00:06:34.390 --> 00:06:34.400 align:start position:0%
use a map so this map is going to be
 

00:06:34.400 --> 00:06:36.230 align:start position:0%
use a map so this map is going to be
called<00:06:34.639><c> points</c><00:06:35.039><c> count</c><00:06:35.600><c> it's</c><00:06:35.840><c> going</c><00:06:35.919><c> to</c><00:06:36.000><c> be</c><00:06:36.080><c> a</c>

00:06:36.230 --> 00:06:36.240 align:start position:0%
called points count it's going to be a
 

00:06:36.240 --> 00:06:38.710 align:start position:0%
called points count it's going to be a
dictionary<00:06:36.960><c> in</c><00:06:37.120><c> python</c><00:06:37.759><c> or</c><00:06:38.160><c> you</c><00:06:38.240><c> know</c><00:06:38.400><c> a</c><00:06:38.479><c> hash</c>

00:06:38.710 --> 00:06:38.720 align:start position:0%
dictionary in python or you know a hash
 

00:06:38.720 --> 00:06:41.510 align:start position:0%
dictionary in python or you know a hash
map<00:06:39.199><c> and</c><00:06:39.600><c> if</c><00:06:39.759><c> you</c><00:06:39.919><c> use</c><00:06:40.240><c> default</c><00:06:40.720><c> dict</c><00:06:41.280><c> it'll</c>

00:06:41.510 --> 00:06:41.520 align:start position:0%
map and if you use default dict it'll
 

00:06:41.520 --> 00:06:43.029 align:start position:0%
map and if you use default dict it'll
just<00:06:41.680><c> make</c><00:06:41.919><c> things</c><00:06:42.160><c> a</c><00:06:42.160><c> little</c><00:06:42.319><c> bit</c><00:06:42.479><c> easier</c><00:06:42.880><c> for</c>

00:06:43.029 --> 00:06:43.039 align:start position:0%
just make things a little bit easier for
 

00:06:43.039 --> 00:06:44.469 align:start position:0%
just make things a little bit easier for
us<00:06:43.120><c> so</c><00:06:43.280><c> if</c><00:06:43.440><c> we</c><00:06:43.600><c> try</c><00:06:43.759><c> to</c>

00:06:44.469 --> 00:06:44.479 align:start position:0%
us so if we try to
 

00:06:44.479 --> 00:06:46.629 align:start position:0%
us so if we try to
retrieve<00:06:45.120><c> a</c><00:06:45.360><c> key</c><00:06:45.600><c> that</c><00:06:45.759><c> hasn't</c><00:06:46.080><c> already</c><00:06:46.400><c> been</c>

00:06:46.629 --> 00:06:46.639 align:start position:0%
retrieve a key that hasn't already been
 

00:06:46.639 --> 00:06:49.029 align:start position:0%
retrieve a key that hasn't already been
inserted<00:06:47.199><c> here</c><00:06:47.680><c> then</c><00:06:47.919><c> the</c><00:06:48.080><c> default</c><00:06:48.479><c> value</c><00:06:48.880><c> of</c>

00:06:49.029 --> 00:06:49.039 align:start position:0%
inserted here then the default value of
 

00:06:49.039 --> 00:06:50.870 align:start position:0%
inserted here then the default value of
that<00:06:49.199><c> will</c><00:06:49.440><c> be</c><00:06:49.599><c> zero</c><00:06:50.000><c> that's</c><00:06:50.240><c> what</c><00:06:50.479><c> basically</c>

00:06:50.870 --> 00:06:50.880 align:start position:0%
that will be zero that's what basically
 

00:06:50.880 --> 00:06:52.550 align:start position:0%
that will be zero that's what basically
this<00:06:51.120><c> provides</c><00:06:51.520><c> for</c><00:06:51.680><c> us</c><00:06:52.080><c> and</c><00:06:52.160><c> that's</c><00:06:52.400><c> just</c>

00:06:52.550 --> 00:06:52.560 align:start position:0%
this provides for us and that's just
 

00:06:52.560 --> 00:06:53.589 align:start position:0%
this provides for us and that's just
going<00:06:52.639><c> to</c><00:06:52.720><c> make</c><00:06:52.880><c> the</c><00:06:52.960><c> code</c><00:06:53.199><c> a</c><00:06:53.280><c> little</c><00:06:53.440><c> bit</c>

00:06:53.589 --> 00:06:53.599 align:start position:0%
going to make the code a little bit
 

00:06:53.599 --> 00:06:56.150 align:start position:0%
going to make the code a little bit
shorter<00:06:54.080><c> for</c><00:06:54.240><c> us</c><00:06:54.880><c> but</c><00:06:55.120><c> so</c><00:06:55.599><c> every</c><00:06:55.759><c> time</c><00:06:56.000><c> we're</c>

00:06:56.150 --> 00:06:56.160 align:start position:0%
shorter for us but so every time we're
 

00:06:56.160 --> 00:06:58.309 align:start position:0%
shorter for us but so every time we're
given<00:06:56.560><c> a</c><00:06:56.720><c> point</c><00:06:56.960><c> right</c><00:06:57.199><c> add</c><00:06:57.520><c> point</c><00:06:58.000><c> all</c><00:06:58.160><c> we</c>

00:06:58.309 --> 00:06:58.319 align:start position:0%
given a point right add point all we
 

00:06:58.319 --> 00:07:00.870 align:start position:0%
given a point right add point all we
want<00:06:58.479><c> to</c><00:06:58.639><c> say</c><00:06:59.039><c> is</c><00:06:59.599><c> the</c><00:07:00.080><c> you</c><00:07:00.240><c> know</c><00:07:00.319><c> the</c><00:07:00.479><c> count</c><00:07:00.800><c> of</c>

00:07:00.870 --> 00:07:00.880 align:start position:0%
want to say is the you know the count of
 

00:07:00.880 --> 00:07:02.870 align:start position:0%
want to say is the you know the count of
this<00:07:01.199><c> point</c><00:07:01.440><c> has</c><00:07:01.599><c> increased</c><00:07:02.160><c> by</c><00:07:02.400><c> one</c><00:07:02.720><c> right</c>

00:07:02.870 --> 00:07:02.880 align:start position:0%
this point has increased by one right
 

00:07:02.880 --> 00:07:04.870 align:start position:0%
this point has increased by one right
that's<00:07:03.120><c> very</c><00:07:03.440><c> easy</c><00:07:03.680><c> to</c><00:07:03.919><c> implement</c><00:07:04.400><c> with</c><00:07:04.720><c> a</c>

00:07:04.870 --> 00:07:04.880 align:start position:0%
that's very easy to implement with a
 

00:07:04.880 --> 00:07:07.909 align:start position:0%
that's very easy to implement with a
hash<00:07:05.199><c> map</c><00:07:05.360><c> we'll</c><00:07:05.599><c> just</c><00:07:05.840><c> say</c><00:07:06.560><c> uh</c><00:07:06.800><c> for</c><00:07:06.960><c> this</c><00:07:07.280><c> key</c>

00:07:07.909 --> 00:07:07.919 align:start position:0%
hash map we'll just say uh for this key
 

00:07:07.919 --> 00:07:10.309 align:start position:0%
hash map we'll just say uh for this key
uh<00:07:08.160><c> by</c><00:07:08.319><c> the</c><00:07:08.479><c> way</c><00:07:08.560><c> a</c><00:07:08.720><c> list</c><00:07:09.199><c> can't</c><00:07:09.520><c> be</c><00:07:09.840><c> a</c><00:07:10.080><c> key</c>

00:07:10.309 --> 00:07:10.319 align:start position:0%
uh by the way a list can't be a key
 

00:07:10.319 --> 00:07:12.550 align:start position:0%
uh by the way a list can't be a key
value<00:07:10.720><c> for</c><00:07:10.880><c> a</c><00:07:10.960><c> hashmap</c><00:07:11.440><c> in</c><00:07:11.520><c> python</c><00:07:12.160><c> so</c><00:07:12.400><c> we're</c>

00:07:12.550 --> 00:07:12.560 align:start position:0%
value for a hashmap in python so we're
 

00:07:12.560 --> 00:07:14.790 align:start position:0%
value for a hashmap in python so we're
gonna<00:07:12.800><c> have</c><00:07:12.960><c> to</c><00:07:13.120><c> transform</c><00:07:13.680><c> this</c><00:07:14.000><c> list</c><00:07:14.400><c> into</c><00:07:14.639><c> a</c>

00:07:14.790 --> 00:07:14.800 align:start position:0%
gonna have to transform this list into a
 

00:07:14.800 --> 00:07:17.510 align:start position:0%
gonna have to transform this list into a
tuple<00:07:15.599><c> so</c><00:07:16.160><c> this</c><00:07:16.479><c> point</c><00:07:16.720><c> will</c><00:07:16.880><c> be</c><00:07:17.039><c> converted</c>

00:07:17.510 --> 00:07:17.520 align:start position:0%
tuple so this point will be converted
 

00:07:17.520 --> 00:07:19.270 align:start position:0%
tuple so this point will be converted
into<00:07:17.759><c> a</c><00:07:17.840><c> tuple</c><00:07:18.319><c> and</c><00:07:18.479><c> then</c>

00:07:19.270 --> 00:07:19.280 align:start position:0%
into a tuple and then
 

00:07:19.280 --> 00:07:22.150 align:start position:0%
into a tuple and then
we<00:07:19.440><c> can</c><00:07:19.680><c> increment</c><00:07:20.160><c> that</c><00:07:20.479><c> count</c><00:07:20.880><c> by</c><00:07:21.280><c> one</c><00:07:21.840><c> so</c><00:07:22.000><c> if</c>

00:07:22.150 --> 00:07:22.160 align:start position:0%
we can increment that count by one so if
 

00:07:22.160 --> 00:07:23.909 align:start position:0%
we can increment that count by one so if
it<00:07:22.240><c> doesn't</c><00:07:22.560><c> already</c><00:07:22.880><c> exist</c><00:07:23.280><c> in</c><00:07:23.360><c> the</c><00:07:23.440><c> map</c><00:07:23.680><c> its</c>

00:07:23.909 --> 00:07:23.919 align:start position:0%
it doesn't already exist in the map its
 

00:07:23.919 --> 00:07:25.510 align:start position:0%
it doesn't already exist in the map its
default<00:07:24.400><c> count</c><00:07:24.639><c> will</c><00:07:24.800><c> be</c><00:07:24.960><c> zero</c><00:07:25.280><c> and</c><00:07:25.360><c> then</c>

00:07:25.510 --> 00:07:25.520 align:start position:0%
default count will be zero and then
 

00:07:25.520 --> 00:07:27.189 align:start position:0%
default count will be zero and then
we'll<00:07:25.680><c> add</c><00:07:26.000><c> one</c><00:07:26.240><c> to</c><00:07:26.479><c> it</c><00:07:26.720><c> so</c><00:07:26.960><c> pretty</c>

00:07:27.189 --> 00:07:27.199 align:start position:0%
we'll add one to it so pretty
 

00:07:27.199 --> 00:07:28.790 align:start position:0%
we'll add one to it so pretty
straightforward<00:07:27.840><c> here</c><00:07:28.319><c> now</c><00:07:28.479><c> for</c><00:07:28.639><c> the</c>

00:07:28.790 --> 00:07:28.800 align:start position:0%
straightforward here now for the
 

00:07:28.800 --> 00:07:31.430 align:start position:0%
straightforward here now for the
interesting<00:07:29.199><c> part</c><00:07:29.599><c> is</c><00:07:29.919><c> the</c><00:07:30.240><c> count</c><00:07:30.639><c> function</c>

00:07:31.430 --> 00:07:31.440 align:start position:0%
interesting part is the count function
 

00:07:31.440 --> 00:07:33.589 align:start position:0%
interesting part is the count function
so<00:07:32.000><c> we</c><00:07:32.160><c> want</c><00:07:32.319><c> to</c><00:07:32.479><c> count</c><00:07:32.800><c> you</c><00:07:32.960><c> know</c><00:07:33.120><c> the</c><00:07:33.199><c> number</c>

00:07:33.589 --> 00:07:33.599 align:start position:0%
so we want to count you know the number
 

00:07:33.599 --> 00:07:35.749 align:start position:0%
so we want to count you know the number
of<00:07:34.080><c> ways</c><00:07:34.479><c> we</c><00:07:34.560><c> can</c><00:07:34.720><c> create</c><00:07:34.960><c> a</c><00:07:35.039><c> square</c><00:07:35.360><c> initially</c>

00:07:35.749 --> 00:07:35.759 align:start position:0%
of ways we can create a square initially
 

00:07:35.759 --> 00:07:38.309 align:start position:0%
of ways we can create a square initially
we'll<00:07:35.919><c> say</c><00:07:36.240><c> set</c><00:07:36.400><c> that</c><00:07:36.639><c> result</c><00:07:37.039><c> to</c><00:07:37.199><c> zero</c><00:07:37.840><c> we'll</c>

00:07:38.309 --> 00:07:38.319 align:start position:0%
we'll say set that result to zero we'll
 

00:07:38.319 --> 00:07:41.430 align:start position:0%
we'll say set that result to zero we'll
extract<00:07:39.199><c> the</c><00:07:39.680><c> uh</c><00:07:40.080><c> x</c><00:07:40.319><c> and</c><00:07:40.479><c> y</c><00:07:40.720><c> coordinates</c><00:07:41.280><c> of</c>

00:07:41.430 --> 00:07:41.440 align:start position:0%
extract the uh x and y coordinates of
 

00:07:41.440 --> 00:07:43.430 align:start position:0%
extract the uh x and y coordinates of
the<00:07:41.599><c> query</c><00:07:42.000><c> point</c><00:07:42.240><c> that</c><00:07:42.400><c> we're</c><00:07:42.639><c> given</c><00:07:43.039><c> so</c>

00:07:43.430 --> 00:07:43.440 align:start position:0%
the query point that we're given so
 

00:07:43.440 --> 00:07:46.150 align:start position:0%
the query point that we're given so
point<00:07:43.840><c> can</c><00:07:44.160><c> be</c><00:07:44.720><c> you</c><00:07:44.800><c> know</c><00:07:45.440><c> we</c><00:07:45.599><c> can</c><00:07:45.680><c> easily</c><00:07:46.000><c> get</c>

00:07:46.150 --> 00:07:46.160 align:start position:0%
point can be you know we can easily get
 

00:07:46.160 --> 00:07:48.790 align:start position:0%
point can be you know we can easily get
the<00:07:46.240><c> x</c><00:07:46.479><c> and</c><00:07:46.560><c> y</c><00:07:46.800><c> coordinates</c><00:07:47.199><c> of</c><00:07:47.360><c> it</c><00:07:47.759><c> and</c><00:07:48.080><c> then</c>

00:07:48.790 --> 00:07:48.800 align:start position:0%
the x and y coordinates of it and then
 

00:07:48.800 --> 00:07:51.589 align:start position:0%
the x and y coordinates of it and then
we're<00:07:48.960><c> gonna</c><00:07:49.360><c> iterate</c><00:07:49.840><c> through</c><00:07:50.479><c> every</c><00:07:51.039><c> single</c>

00:07:51.589 --> 00:07:51.599 align:start position:0%
we're gonna iterate through every single
 

00:07:51.599 --> 00:07:54.390 align:start position:0%
we're gonna iterate through every single
point<00:07:52.240><c> in</c><00:07:52.960><c> the</c><00:07:53.360><c> list</c><00:07:53.599><c> of</c><00:07:53.680><c> points</c><00:07:54.000><c> that</c><00:07:54.080><c> we've</c>

00:07:54.390 --> 00:07:54.400 align:start position:0%
point in the list of points that we've
 

00:07:54.400 --> 00:07:58.390 align:start position:0%
point in the list of points that we've
saved<00:07:54.879><c> or</c><00:07:55.039><c> in</c><00:07:55.199><c> our</c><00:07:55.360><c> map</c><00:07:55.599><c> so</c><00:07:55.919><c> every</c><00:07:56.319><c> x</c><00:07:56.639><c> y</c><00:07:57.360><c> in</c>

00:07:58.390 --> 00:07:58.400 align:start position:0%
saved or in our map so every x y in
 

00:07:58.400 --> 00:08:01.510 align:start position:0%
saved or in our map so every x y in
the<00:07:58.639><c> points</c><00:07:59.440><c> count</c><00:07:59.759><c> we</c><00:07:59.840><c> don't</c><00:08:00.560><c> uh</c>

00:08:01.510 --> 00:08:01.520 align:start position:0%
the points count we don't uh
 

00:08:01.520 --> 00:08:03.670 align:start position:0%
the points count we don't uh
want<00:08:01.759><c> the</c><00:08:01.919><c> count</c><00:08:02.319><c> of</c><00:08:02.479><c> this</c><00:08:02.800><c> particular</c><00:08:03.280><c> point</c>

00:08:03.670 --> 00:08:03.680 align:start position:0%
want the count of this particular point
 

00:08:03.680 --> 00:08:06.390 align:start position:0%
want the count of this particular point
remember<00:08:04.240><c> this</c><00:08:04.879><c> loop</c><00:08:05.199><c> is</c><00:08:05.440><c> just</c><00:08:05.759><c> going</c><00:08:06.000><c> through</c>

00:08:06.390 --> 00:08:06.400 align:start position:0%
remember this loop is just going through
 

00:08:06.400 --> 00:08:10.469 align:start position:0%
remember this loop is just going through
all<00:08:06.720><c> possible</c><00:08:07.599><c> diagonal</c><00:08:08.479><c> values</c><00:08:09.280><c> to</c><00:08:10.000><c> the</c>

00:08:10.469 --> 00:08:10.479 align:start position:0%
all possible diagonal values to the
 

00:08:10.479 --> 00:08:11.990 align:start position:0%
all possible diagonal values to the
query<00:08:10.879><c> point</c><00:08:11.120><c> that</c><00:08:11.280><c> we're</c><00:08:11.440><c> given</c><00:08:11.680><c> in</c><00:08:11.759><c> the</c>

00:08:11.990 --> 00:08:12.000 align:start position:0%
query point that we're given in the
 

00:08:12.000 --> 00:08:13.990 align:start position:0%
query point that we're given in the
input<00:08:12.319><c> right</c><00:08:12.639><c> but</c><00:08:12.879><c> we</c><00:08:13.120><c> need</c><00:08:13.280><c> to</c><00:08:13.520><c> actually</c>

00:08:13.990 --> 00:08:14.000 align:start position:0%
input right but we need to actually
 

00:08:14.000 --> 00:08:16.550 align:start position:0%
input right but we need to actually
verify<00:08:14.479><c> that</c><00:08:14.720><c> this</c><00:08:15.039><c> is</c><00:08:15.280><c> a</c><00:08:15.360><c> diagonal</c><00:08:16.000><c> point</c><00:08:16.400><c> so</c>

00:08:16.550 --> 00:08:16.560 align:start position:0%
verify that this is a diagonal point so
 

00:08:16.560 --> 00:08:18.230 align:start position:0%
verify that this is a diagonal point so
how<00:08:16.720><c> can</c><00:08:16.879><c> we</c><00:08:17.039><c> do</c><00:08:17.280><c> that</c><00:08:17.520><c> well</c><00:08:17.759><c> we're</c><00:08:17.919><c> going</c><00:08:18.080><c> to</c>

00:08:18.230 --> 00:08:18.240 align:start position:0%
how can we do that well we're going to
 

00:08:18.240 --> 00:08:19.029 align:start position:0%
how can we do that well we're going to
say

00:08:19.029 --> 00:08:19.039 align:start position:0%
say
 

00:08:19.039 --> 00:08:21.029 align:start position:0%
say
is<00:08:19.199><c> the</c><00:08:19.360><c> absolute</c><00:08:19.759><c> value</c><00:08:20.240><c> of</c><00:08:20.400><c> the</c><00:08:20.560><c> difference</c>

00:08:21.029 --> 00:08:21.039 align:start position:0%
is the absolute value of the difference
 

00:08:21.039 --> 00:08:24.150 align:start position:0%
is the absolute value of the difference
between<00:08:21.360><c> the</c><00:08:21.599><c> y-coordinates</c><00:08:22.879><c> equal</c>

00:08:24.150 --> 00:08:24.160 align:start position:0%
between the y-coordinates equal
 

00:08:24.160 --> 00:08:25.749 align:start position:0%
between the y-coordinates equal
to<00:08:24.560><c> the</c>

00:08:25.749 --> 00:08:25.759 align:start position:0%
to the
 

00:08:25.759 --> 00:08:28.070 align:start position:0%
to the
absolute<00:08:26.160><c> value</c><00:08:26.560><c> of</c><00:08:26.639><c> the</c><00:08:26.800><c> difference</c><00:08:27.440><c> between</c>

00:08:28.070 --> 00:08:28.080 align:start position:0%
absolute value of the difference between
 

00:08:28.080 --> 00:08:31.589 align:start position:0%
absolute value of the difference between
the<00:08:28.400><c> x</c><00:08:28.800><c> coordinates</c><00:08:29.759><c> if</c><00:08:29.919><c> that's</c><00:08:30.479><c> true</c><00:08:31.199><c> then</c><00:08:31.440><c> we</c>

00:08:31.589 --> 00:08:31.599 align:start position:0%
the x coordinates if that's true then we
 

00:08:31.599 --> 00:08:34.469 align:start position:0%
the x coordinates if that's true then we
can<00:08:31.840><c> continue</c><00:08:32.800><c> if</c><00:08:33.039><c> it's</c><00:08:33.599><c> not</c><00:08:33.919><c> true</c><00:08:34.159><c> meaning</c>

00:08:34.469 --> 00:08:34.479 align:start position:0%
can continue if it's not true meaning
 

00:08:34.479 --> 00:08:36.469 align:start position:0%
can continue if it's not true meaning
these<00:08:34.719><c> are</c><00:08:34.959><c> not</c><00:08:35.279><c> equal</c><00:08:35.519><c> then</c><00:08:35.760><c> it's</c><00:08:35.919><c> not</c><00:08:36.159><c> really</c>

00:08:36.469 --> 00:08:36.479 align:start position:0%
these are not equal then it's not really
 

00:08:36.479 --> 00:08:39.430 align:start position:0%
these are not equal then it's not really
possible<00:08:37.039><c> for</c><00:08:37.279><c> these</c><00:08:37.839><c> to</c><00:08:38.000><c> form</c><00:08:38.320><c> a</c><00:08:38.560><c> square</c><00:08:39.120><c> at</c>

00:08:39.430 --> 00:08:39.440 align:start position:0%
possible for these to form a square at
 

00:08:39.440 --> 00:08:41.110 align:start position:0%
possible for these to form a square at
all<00:08:39.680><c> if</c><00:08:39.839><c> they're</c><00:08:40.000><c> diagonal</c><00:08:40.479><c> to</c><00:08:40.640><c> each</c><00:08:40.800><c> other</c><00:08:40.959><c> so</c>

00:08:41.110 --> 00:08:41.120 align:start position:0%
all if they're diagonal to each other so
 

00:08:41.120 --> 00:08:42.070 align:start position:0%
all if they're diagonal to each other so
in<00:08:41.200><c> that</c><00:08:41.360><c> case</c><00:08:41.519><c> we're</c><00:08:41.680><c> just</c><00:08:41.839><c> going</c><00:08:42.000><c> to</c>

00:08:42.070 --> 00:08:42.080 align:start position:0%
in that case we're just going to
 

00:08:42.080 --> 00:08:44.070 align:start position:0%
in that case we're just going to
continue<00:08:42.640><c> to</c><00:08:42.800><c> the</c><00:08:42.959><c> next</c><00:08:43.279><c> iteration</c><00:08:43.839><c> of</c><00:08:43.919><c> the</c>

00:08:44.070 --> 00:08:44.080 align:start position:0%
continue to the next iteration of the
 

00:08:44.080 --> 00:08:46.949 align:start position:0%
continue to the next iteration of the
loop<00:08:44.560><c> but</c><00:08:44.880><c> they</c><00:08:45.040><c> also</c><00:08:45.360><c> mentioned</c><00:08:45.839><c> in</c><00:08:46.000><c> the</c>

00:08:46.949 --> 00:08:46.959 align:start position:0%
loop but they also mentioned in the
 

00:08:46.959 --> 00:08:49.190 align:start position:0%
loop but they also mentioned in the
problem<00:08:47.279><c> description</c><00:08:47.839><c> that</c><00:08:48.399><c> the</c><00:08:48.720><c> squares</c>

00:08:49.190 --> 00:08:49.200 align:start position:0%
problem description that the squares
 

00:08:49.200 --> 00:08:51.910 align:start position:0%
problem description that the squares
have<00:08:49.360><c> to</c><00:08:49.440><c> have</c><00:08:49.600><c> a</c><00:08:49.760><c> positive</c><00:08:50.240><c> error</c><00:08:51.040><c> area</c>

00:08:51.910 --> 00:08:51.920 align:start position:0%
have to have a positive error area
 

00:08:51.920 --> 00:08:55.190 align:start position:0%
have to have a positive error area
basically<00:08:52.320><c> that</c><00:08:52.480><c> means</c><00:08:52.720><c> we</c><00:08:52.880><c> can't</c><00:08:53.200><c> just</c><00:08:53.680><c> use</c><00:08:54.480><c> a</c>

00:08:55.190 --> 00:08:55.200 align:start position:0%
basically that means we can't just use a
 

00:08:55.200 --> 00:08:57.590 align:start position:0%
basically that means we can't just use a
you<00:08:55.279><c> know</c><00:08:55.760><c> we</c><00:08:55.920><c> can't</c><00:08:56.160><c> just</c><00:08:56.320><c> stack</c><00:08:56.800><c> four</c><00:08:57.200><c> points</c>

00:08:57.590 --> 00:08:57.600 align:start position:0%
you know we can't just stack four points
 

00:08:57.600 --> 00:08:59.430 align:start position:0%
you know we can't just stack four points
at<00:08:57.680><c> the</c><00:08:57.839><c> exact</c><00:08:58.240><c> same</c><00:08:58.560><c> coordinate</c><00:08:59.120><c> and</c><00:08:59.200><c> call</c>

00:08:59.430 --> 00:08:59.440 align:start position:0%
at the exact same coordinate and call
 

00:08:59.440 --> 00:09:01.030 align:start position:0%
at the exact same coordinate and call
that<00:08:59.680><c> a</c><00:08:59.839><c> square</c><00:09:00.560><c> i</c><00:09:00.640><c> don't</c><00:09:00.800><c> know</c><00:09:00.880><c> if</c>

00:09:01.030 --> 00:09:01.040 align:start position:0%
that a square i don't know if
 

00:09:01.040 --> 00:09:03.110 align:start position:0%
that a square i don't know if
technically<00:09:01.440><c> that</c><00:09:01.680><c> is</c><00:09:01.839><c> a</c><00:09:01.920><c> square</c><00:09:02.160><c> or</c><00:09:02.240><c> not</c><00:09:02.560><c> but</c>

00:09:03.110 --> 00:09:03.120 align:start position:0%
technically that is a square or not but
 

00:09:03.120 --> 00:09:05.590 align:start position:0%
technically that is a square or not but
that<00:09:03.360><c> square</c><00:09:03.600><c> would</c><00:09:03.760><c> have</c><00:09:03.920><c> zero</c><00:09:04.399><c> area</c><00:09:05.040><c> so</c><00:09:05.440><c> what</c>

00:09:05.590 --> 00:09:05.600 align:start position:0%
that square would have zero area so what
 

00:09:05.600 --> 00:09:07.829 align:start position:0%
that square would have zero area so what
we<00:09:05.760><c> want</c><00:09:05.920><c> to</c><00:09:06.000><c> just</c><00:09:06.560><c> make</c><00:09:06.720><c> sure</c><00:09:07.040><c> to</c><00:09:07.279><c> avoid</c><00:09:07.600><c> that</c>

00:09:07.829 --> 00:09:07.839 align:start position:0%
we want to just make sure to avoid that
 

00:09:07.839 --> 00:09:10.389 align:start position:0%
we want to just make sure to avoid that
case<00:09:08.160><c> we</c><00:09:08.320><c> just</c><00:09:08.480><c> want</c><00:09:08.640><c> to</c><00:09:08.720><c> say</c><00:09:09.279><c> this</c><00:09:09.600><c> x</c><00:09:09.920><c> can't</c><00:09:10.160><c> be</c>

00:09:10.389 --> 00:09:10.399 align:start position:0%
case we just want to say this x can't be
 

00:09:10.399 --> 00:09:13.190 align:start position:0%
case we just want to say this x can't be
equal<00:09:10.720><c> to</c><00:09:11.040><c> the</c><00:09:11.360><c> query</c><00:09:11.839><c> point</c><00:09:12.399><c> you</c><00:09:12.480><c> know</c><00:09:12.720><c> or</c><00:09:12.959><c> if</c>

00:09:13.190 --> 00:09:13.200 align:start position:0%
equal to the query point you know or if
 

00:09:13.200 --> 00:09:15.990 align:start position:0%
equal to the query point you know or if
the<00:09:13.519><c> y</c><00:09:14.080><c> is</c><00:09:14.320><c> equal</c><00:09:14.560><c> to</c><00:09:14.640><c> the</c><00:09:14.800><c> query</c><00:09:15.120><c> point</c><00:09:15.760><c> then</c>

00:09:15.990 --> 00:09:16.000 align:start position:0%
the y is equal to the query point then
 

00:09:16.000 --> 00:09:17.829 align:start position:0%
the y is equal to the query point then
we're<00:09:16.240><c> also</c><00:09:16.560><c> going</c><00:09:16.640><c> to</c><00:09:16.800><c> continue</c><00:09:17.279><c> right</c><00:09:17.440><c> so</c><00:09:17.600><c> if</c>

00:09:17.829 --> 00:09:17.839 align:start position:0%
we're also going to continue right so if
 

00:09:17.839 --> 00:09:19.990 align:start position:0%
we're also going to continue right so if
if<00:09:18.320><c> these</c><00:09:18.720><c> points</c><00:09:19.040><c> are</c><00:09:19.200><c> stacked</c><00:09:19.600><c> on</c><00:09:19.680><c> top</c><00:09:19.920><c> of</c>

00:09:19.990 --> 00:09:20.000 align:start position:0%
if these points are stacked on top of
 

00:09:20.000 --> 00:09:21.269 align:start position:0%
if these points are stacked on top of
each<00:09:20.160><c> other</c><00:09:20.560><c> you</c><00:09:20.640><c> know</c><00:09:20.800><c> if</c><00:09:20.880><c> they're</c><00:09:21.040><c> not</c>

00:09:21.269 --> 00:09:21.279 align:start position:0%
each other you know if they're not
 

00:09:21.279 --> 00:09:23.590 align:start position:0%
each other you know if they're not
really<00:09:21.680><c> diagonal</c><00:09:22.240><c> to</c><00:09:22.399><c> each</c><00:09:22.560><c> other</c><00:09:23.120><c> then</c><00:09:23.360><c> we're</c>

00:09:23.590 --> 00:09:23.600 align:start position:0%
really diagonal to each other then we're
 

00:09:23.600 --> 00:09:26.550 align:start position:0%
really diagonal to each other then we're
going<00:09:23.760><c> to</c><00:09:23.839><c> continue</c><00:09:24.800><c> so</c><00:09:25.040><c> other</c><00:09:25.360><c> than</c><00:09:25.600><c> that</c><00:09:26.320><c> now</c>

00:09:26.550 --> 00:09:26.560 align:start position:0%
going to continue so other than that now
 

00:09:26.560 --> 00:09:27.829 align:start position:0%
going to continue so other than that now
we<00:09:26.640><c> know</c><00:09:26.800><c> that</c><00:09:26.959><c> these</c><00:09:27.200><c> two</c><00:09:27.440><c> points</c><00:09:27.760><c> are</c>

00:09:27.829 --> 00:09:27.839 align:start position:0%
we know that these two points are
 

00:09:27.839 --> 00:09:29.910 align:start position:0%
we know that these two points are
diagonal<00:09:28.320><c> to</c><00:09:28.480><c> each</c><00:09:28.640><c> other</c><00:09:29.120><c> so</c><00:09:29.360><c> now</c><00:09:29.519><c> we</c><00:09:29.680><c> want</c><00:09:29.839><c> to</c>

00:09:29.910 --> 00:09:29.920 align:start position:0%
diagonal to each other so now we want to
 

00:09:29.920 --> 00:09:31.829 align:start position:0%
diagonal to each other so now we want to
know<00:09:30.240><c> can</c><00:09:30.480><c> we</c><00:09:30.640><c> actually</c><00:09:31.040><c> create</c><00:09:31.440><c> a</c><00:09:31.519><c> square</c>

00:09:31.829 --> 00:09:31.839 align:start position:0%
know can we actually create a square
 

00:09:31.839 --> 00:09:34.630 align:start position:0%
know can we actually create a square
with<00:09:32.000><c> them</c><00:09:32.320><c> or</c><00:09:32.560><c> not</c><00:09:33.120><c> how</c><00:09:33.519><c> can</c><00:09:33.760><c> we</c><00:09:34.000><c> know</c><00:09:34.320><c> if</c><00:09:34.480><c> we</c>

00:09:34.630 --> 00:09:34.640 align:start position:0%
with them or not how can we know if we
 

00:09:34.640 --> 00:09:36.230 align:start position:0%
with them or not how can we know if we
can<00:09:34.800><c> create</c><00:09:35.120><c> a</c><00:09:35.200><c> square</c><00:09:35.440><c> with</c><00:09:35.600><c> them</c><00:09:35.839><c> well</c><00:09:36.080><c> we're</c>

00:09:36.230 --> 00:09:36.240 align:start position:0%
can create a square with them well we're
 

00:09:36.240 --> 00:09:37.670 align:start position:0%
can create a square with them well we're
going<00:09:36.320><c> to</c><00:09:36.480><c> say</c>

00:09:37.670 --> 00:09:37.680 align:start position:0%
going to say
 

00:09:37.680 --> 00:09:40.070 align:start position:0%
going to say
does<00:09:38.320><c> the</c><00:09:38.640><c> point</c><00:09:38.959><c> in</c><00:09:39.120><c> our</c><00:09:39.200><c> points</c><00:09:39.519><c> map</c><00:09:39.839><c> so</c>

00:09:40.070 --> 00:09:40.080 align:start position:0%
does the point in our points map so
 

00:09:40.080 --> 00:09:42.630 align:start position:0%
does the point in our points map so
points<00:09:40.560><c> count</c><00:09:41.120><c> does</c><00:09:41.440><c> that</c>

00:09:42.630 --> 00:09:42.640 align:start position:0%
points count does that
 

00:09:42.640 --> 00:09:44.150 align:start position:0%
points count does that
let's<00:09:42.880><c> say</c><00:09:43.200><c> you</c><00:09:43.279><c> know</c><00:09:43.440><c> one</c><00:09:43.600><c> of</c><00:09:43.680><c> those</c><00:09:43.920><c> points</c>

00:09:44.150 --> 00:09:44.160 align:start position:0%
let's say you know one of those points
 

00:09:44.160 --> 00:09:48.070 align:start position:0%
let's say you know one of those points
which<00:09:44.399><c> is</c><00:09:44.640><c> x</c><00:09:45.279><c> and</c><00:09:45.760><c> p</c><00:09:46.160><c> y</c><00:09:46.720><c> does</c><00:09:46.959><c> that</c><00:09:47.279><c> point</c><00:09:47.600><c> exist</c>

00:09:48.070 --> 00:09:48.080 align:start position:0%
which is x and p y does that point exist
 

00:09:48.080 --> 00:09:50.389 align:start position:0%
which is x and p y does that point exist
and<00:09:48.640><c> does</c><00:09:48.959><c> the</c><00:09:49.200><c> opposite</c><00:09:49.680><c> point</c>

00:09:50.389 --> 00:09:50.399 align:start position:0%
and does the opposite point
 

00:09:50.399 --> 00:09:51.990 align:start position:0%
and does the opposite point
exist<00:09:50.959><c> as</c><00:09:51.200><c> well</c>

00:09:51.990 --> 00:09:52.000 align:start position:0%
exist as well
 

00:09:52.000 --> 00:09:54.550 align:start position:0%
exist as well
both<00:09:52.320><c> of</c><00:09:52.399><c> these</c><00:09:52.640><c> points</c><00:09:52.959><c> have</c><00:09:53.120><c> to</c><00:09:53.360><c> exist</c><00:09:53.760><c> so</c>

00:09:54.550 --> 00:09:54.560 align:start position:0%
both of these points have to exist so
 

00:09:54.560 --> 00:09:55.990 align:start position:0%
both of these points have to exist so
you<00:09:54.640><c> know</c><00:09:54.800><c> just</c><00:09:54.959><c> copy</c><00:09:55.200><c> and</c><00:09:55.360><c> pasting</c><00:09:55.760><c> and</c>

00:09:55.990 --> 00:09:56.000 align:start position:0%
you know just copy and pasting and
 

00:09:56.000 --> 00:09:58.949 align:start position:0%
you know just copy and pasting and
updating<00:09:56.399><c> the</c><00:09:56.560><c> coordinates</c><00:09:57.040><c> so</c><00:09:57.680><c> this</c><00:09:58.160><c> will</c><00:09:58.720><c> be</c>

00:09:58.949 --> 00:09:58.959 align:start position:0%
updating the coordinates so this will be
 

00:09:58.959 --> 00:10:00.310 align:start position:0%
updating the coordinates so this will be
the<00:09:59.200><c> opposite</c>

00:10:00.310 --> 00:10:00.320 align:start position:0%
the opposite
 

00:10:00.320 --> 00:10:02.069 align:start position:0%
the opposite
so<00:10:00.720><c> as</c><00:10:00.959><c> i</c><00:10:01.040><c> mentioned</c><00:10:01.360><c> the</c><00:10:01.519><c> drawing</c><00:10:01.760><c> both</c><00:10:02.000><c> of</c>

00:10:02.069 --> 00:10:02.079 align:start position:0%
so as i mentioned the drawing both of
 

00:10:02.079 --> 00:10:04.470 align:start position:0%
so as i mentioned the drawing both of
these<00:10:02.320><c> points</c><00:10:02.640><c> have</c><00:10:02.800><c> to</c><00:10:02.959><c> exist</c><00:10:03.680><c> and</c><00:10:04.320><c> what</c>

00:10:04.470 --> 00:10:04.480 align:start position:0%
these points have to exist and what
 

00:10:04.480 --> 00:10:06.150 align:start position:0%
these points have to exist and what
we're<00:10:04.640><c> going</c><00:10:04.720><c> to</c><00:10:04.800><c> do</c><00:10:04.959><c> is</c><00:10:05.120><c> just</c><00:10:05.440><c> multiply</c><00:10:05.920><c> the</c>

00:10:06.150 --> 00:10:06.160 align:start position:0%
we're going to do is just multiply the
 

00:10:06.160 --> 00:10:07.990 align:start position:0%
we're going to do is just multiply the
counts<00:10:06.560><c> together</c><00:10:07.120><c> right</c><00:10:07.279><c> because</c><00:10:07.519><c> if</c><00:10:07.680><c> each</c><00:10:07.839><c> of</c>

00:10:07.990 --> 00:10:08.000 align:start position:0%
counts together right because if each of
 

00:10:08.000 --> 00:10:10.949 align:start position:0%
counts together right because if each of
these<00:10:08.240><c> is</c><00:10:08.480><c> one</c><00:10:09.200><c> then</c><00:10:09.600><c> one</c><00:10:09.839><c> times</c><00:10:10.160><c> one</c><00:10:10.399><c> is</c><00:10:10.560><c> one</c>

00:10:10.949 --> 00:10:10.959 align:start position:0%
these is one then one times one is one
 

00:10:10.959 --> 00:10:13.990 align:start position:0%
these is one then one times one is one
we<00:10:11.120><c> can</c><00:10:11.279><c> create</c><00:10:11.760><c> one</c><00:10:12.079><c> point</c><00:10:12.800><c> with</c><00:10:13.120><c> the</c><00:10:13.440><c> one</c><00:10:13.839><c> a</c>

00:10:13.990 --> 00:10:14.000 align:start position:0%
we can create one point with the one a
 

00:10:14.000 --> 00:10:15.430 align:start position:0%
we can create one point with the one a
perfect<00:10:14.399><c> square</c>

00:10:15.430 --> 00:10:15.440 align:start position:0%
perfect square
 

00:10:15.440 --> 00:10:18.069 align:start position:0%
perfect square
with<00:10:15.680><c> these</c><00:10:16.240><c> coordinates</c><00:10:16.959><c> right</c><00:10:17.200><c> if</c><00:10:17.360><c> it's</c><00:10:17.680><c> 2</c>

00:10:18.069 --> 00:10:18.079 align:start position:0%
with these coordinates right if it's 2
 

00:10:18.079 --> 00:10:19.829 align:start position:0%
with these coordinates right if it's 2
and<00:10:18.240><c> 2</c><00:10:18.560><c> then</c><00:10:18.720><c> we're</c><00:10:18.880><c> going</c><00:10:18.959><c> to</c><00:10:19.040><c> multiply</c><00:10:19.519><c> 2</c>

00:10:19.829 --> 00:10:19.839 align:start position:0%
and 2 then we're going to multiply 2
 

00:10:19.839 --> 00:10:21.509 align:start position:0%
and 2 then we're going to multiply 2
times<00:10:20.160><c> 2.</c><00:10:20.320><c> we're</c><00:10:20.480><c> going</c><00:10:20.560><c> to</c><00:10:20.640><c> say</c><00:10:20.959><c> there's</c><00:10:21.279><c> four</c>

00:10:21.509 --> 00:10:21.519 align:start position:0%
times 2. we're going to say there's four
 

00:10:21.519 --> 00:10:23.430 align:start position:0%
times 2. we're going to say there's four
possible<00:10:21.920><c> ways</c><00:10:22.240><c> we</c><00:10:22.399><c> can</c><00:10:22.480><c> create</c><00:10:22.959><c> a</c><00:10:23.120><c> perfect</c>

00:10:23.430 --> 00:10:23.440 align:start position:0%
possible ways we can create a perfect
 

00:10:23.440 --> 00:10:25.110 align:start position:0%
possible ways we can create a perfect
square<00:10:23.760><c> with</c><00:10:24.000><c> these</c>

00:10:25.110 --> 00:10:25.120 align:start position:0%
square with these
 

00:10:25.120 --> 00:10:26.389 align:start position:0%
square with these
and<00:10:25.600><c> we're</c><00:10:25.760><c> just</c><00:10:25.839><c> going</c><00:10:25.920><c> to</c><00:10:26.000><c> take</c><00:10:26.160><c> this</c>

00:10:26.389 --> 00:10:26.399 align:start position:0%
and we're just going to take this
 

00:10:26.399 --> 00:10:28.790 align:start position:0%
and we're just going to take this
multiplication<00:10:27.200><c> and</c><00:10:27.440><c> add</c><00:10:27.680><c> it</c><00:10:27.839><c> to</c><00:10:28.079><c> our</c><00:10:28.399><c> result</c>

00:10:28.790 --> 00:10:28.800 align:start position:0%
multiplication and add it to our result
 

00:10:28.800 --> 00:10:32.069 align:start position:0%
multiplication and add it to our result
which<00:10:28.959><c> we</c><00:10:29.200><c> declared</c><00:10:29.920><c> up</c><00:10:30.079><c> above</c><00:10:30.959><c> and</c><00:10:31.839><c> you</c><00:10:31.920><c> know</c>

00:10:32.069 --> 00:10:32.079 align:start position:0%
which we declared up above and you know
 

00:10:32.079 --> 00:10:33.509 align:start position:0%
which we declared up above and you know
that's<00:10:32.320><c> the</c><00:10:32.399><c> entire</c><00:10:32.720><c> thing</c><00:10:33.040><c> obviously</c><00:10:33.440><c> you</c>

00:10:33.509 --> 00:10:33.519 align:start position:0%
that's the entire thing obviously you
 

00:10:33.519 --> 00:10:35.670 align:start position:0%
that's the entire thing obviously you
can<00:10:33.760><c> tell</c><00:10:34.480><c> pretty</c><00:10:34.800><c> easily</c><00:10:35.120><c> that</c><00:10:35.200><c> this</c><00:10:35.360><c> is</c><00:10:35.519><c> a</c>

00:10:35.670 --> 00:10:35.680 align:start position:0%
can tell pretty easily that this is a
 

00:10:35.680 --> 00:10:38.150 align:start position:0%
can tell pretty easily that this is a
linear<00:10:36.160><c> time</c><00:10:36.640><c> function</c><00:10:37.120><c> right</c><00:10:37.760><c> once</c><00:10:38.000><c> we're</c>

00:10:38.150 --> 00:10:38.160 align:start position:0%
linear time function right once we're
 

00:10:38.160 --> 00:10:39.430 align:start position:0%
linear time function right once we're
done<00:10:38.320><c> with</c><00:10:38.480><c> that</c><00:10:38.640><c> we</c><00:10:38.800><c> can</c><00:10:38.959><c> actually</c><00:10:39.200><c> just</c><00:10:39.360><c> go</c>

00:10:39.430 --> 00:10:39.440 align:start position:0%
done with that we can actually just go
 

00:10:39.440 --> 00:10:41.590 align:start position:0%
done with that we can actually just go
ahead<00:10:39.680><c> and</c><00:10:39.760><c> return</c><00:10:40.079><c> the</c><00:10:40.160><c> result</c><00:10:40.800><c> okay</c><00:10:41.120><c> so</c><00:10:41.519><c> it</c>

00:10:41.590 --> 00:10:41.600 align:start position:0%
ahead and return the result okay so it
 

00:10:41.600 --> 00:10:43.269 align:start position:0%
ahead and return the result okay so it
looks<00:10:41.839><c> like</c><00:10:42.000><c> we</c><00:10:42.240><c> are</c><00:10:42.560><c> just</c><00:10:42.800><c> going</c><00:10:42.959><c> to</c>

00:10:43.269 --> 00:10:43.279 align:start position:0%
looks like we are just going to
 

00:10:43.279 --> 00:10:45.350 align:start position:0%
looks like we are just going to
implement<00:10:43.680><c> this</c><00:10:43.920><c> using</c><00:10:44.160><c> a</c><00:10:44.320><c> list</c><00:10:44.800><c> so</c><00:10:45.040><c> instead</c>

00:10:45.350 --> 00:10:45.360 align:start position:0%
implement this using a list so instead
 

00:10:45.360 --> 00:10:46.790 align:start position:0%
implement this using a list so instead
of<00:10:45.519><c> iterating</c><00:10:45.920><c> through</c><00:10:46.079><c> the</c><00:10:46.240><c> keys</c><00:10:46.560><c> of</c><00:10:46.640><c> that</c>

00:10:46.790 --> 00:10:46.800 align:start position:0%
of iterating through the keys of that
 

00:10:46.800 --> 00:10:47.990 align:start position:0%
of iterating through the keys of that
i'm<00:10:46.959><c> just</c><00:10:47.120><c> going</c><00:10:47.200><c> to</c><00:10:47.279><c> be</c><00:10:47.440><c> maintaining</c><00:10:47.920><c> a</c>

00:10:47.990 --> 00:10:48.000 align:start position:0%
i'm just going to be maintaining a
 

00:10:48.000 --> 00:10:50.230 align:start position:0%
i'm just going to be maintaining a
second<00:10:48.480><c> variable</c><00:10:48.880><c> i'm</c><00:10:49.040><c> sure</c><00:10:49.200><c> you</c><00:10:49.360><c> can</c><00:10:49.519><c> do</c><00:10:49.680><c> this</c>

00:10:50.230 --> 00:10:50.240 align:start position:0%
second variable i'm sure you can do this
 

00:10:50.240 --> 00:10:52.710 align:start position:0%
second variable i'm sure you can do this
without<00:10:50.640><c> that</c><00:10:51.040><c> but</c><00:10:51.440><c> i'm</c><00:10:51.839><c> tired</c><00:10:52.240><c> of</c><00:10:52.320><c> trying</c><00:10:52.640><c> to</c>

00:10:52.710 --> 00:10:52.720 align:start position:0%
without that but i'm tired of trying to
 

00:10:52.720 --> 00:10:54.470 align:start position:0%
without that but i'm tired of trying to
get<00:10:52.959><c> this</c><00:10:53.200><c> to</c><00:10:53.360><c> work</c><00:10:53.600><c> in</c><00:10:53.680><c> python</c><00:10:54.160><c> so</c><00:10:54.240><c> i'm</c><00:10:54.399><c> just</c>

00:10:54.470 --> 00:10:54.480 align:start position:0%
get this to work in python so i'm just
 

00:10:54.480 --> 00:10:56.389 align:start position:0%
get this to work in python so i'm just
going<00:10:54.560><c> to</c><00:10:54.640><c> go</c><00:10:54.800><c> back</c><00:10:55.040><c> to</c><00:10:55.200><c> the</c><00:10:55.760><c> first</c><00:10:56.000><c> solution</c>

00:10:56.389 --> 00:10:56.399 align:start position:0%
going to go back to the first solution
 

00:10:56.399 --> 00:10:58.389 align:start position:0%
going to go back to the first solution
that<00:10:56.560><c> i</c><00:10:56.720><c> implemented</c><00:10:57.279><c> so</c>

00:10:58.389 --> 00:10:58.399 align:start position:0%
that i implemented so
 

00:10:58.399 --> 00:10:59.590 align:start position:0%
that i implemented so
yeah<00:10:58.640><c> we're</c><00:10:58.800><c> just</c><00:10:58.880><c> going</c><00:10:58.959><c> to</c><00:10:59.040><c> be</c><00:10:59.200><c> maintaining</c>

00:10:59.590 --> 00:10:59.600 align:start position:0%
yeah we're just going to be maintaining
 

00:10:59.600 --> 00:11:01.190 align:start position:0%
yeah we're just going to be maintaining
a<00:10:59.680><c> list</c><00:11:00.000><c> as</c><00:11:00.079><c> well</c><00:11:00.240><c> as</c><00:11:00.320><c> the</c><00:11:00.399><c> hashmap</c><00:11:00.800><c> so</c><00:11:00.959><c> every</c>

00:11:01.190 --> 00:11:01.200 align:start position:0%
a list as well as the hashmap so every
 

00:11:01.200 --> 00:11:03.190 align:start position:0%
a list as well as the hashmap so every
time<00:11:01.360><c> we</c><00:11:01.440><c> get</c><00:11:01.680><c> a</c><00:11:01.760><c> point</c><00:11:02.320><c> uh</c><00:11:02.560><c> we're</c><00:11:02.720><c> going</c><00:11:02.880><c> to</c><00:11:02.959><c> be</c>

00:11:03.190 --> 00:11:03.200 align:start position:0%
time we get a point uh we're going to be
 

00:11:03.200 --> 00:11:05.990 align:start position:0%
time we get a point uh we're going to be
appending<00:11:03.680><c> that</c><00:11:03.920><c> point</c><00:11:04.560><c> onto</c><00:11:05.279><c> this</c><00:11:05.600><c> list</c><00:11:05.839><c> of</c>

00:11:05.990 --> 00:11:06.000 align:start position:0%
appending that point onto this list of
 

00:11:06.000 --> 00:11:07.110 align:start position:0%
appending that point onto this list of
points<00:11:06.240><c> that</c><00:11:06.320><c> we're</c><00:11:06.480><c> maintaining</c><00:11:06.959><c> and</c><00:11:07.040><c> then</c>

00:11:07.110 --> 00:11:07.120 align:start position:0%
points that we're maintaining and then
 

00:11:07.120 --> 00:11:09.030 align:start position:0%
points that we're maintaining and then
when<00:11:07.279><c> we</c><00:11:07.440><c> want</c><00:11:07.519><c> to</c><00:11:07.680><c> iterate</c><00:11:08.079><c> through</c><00:11:08.720><c> all</c><00:11:08.880><c> the</c>

00:11:09.030 --> 00:11:09.040 align:start position:0%
when we want to iterate through all the
 

00:11:09.040 --> 00:11:10.230 align:start position:0%
when we want to iterate through all the
points<00:11:09.360><c> that</c><00:11:09.440><c> we</c><00:11:09.600><c> have</c><00:11:09.760><c> we're</c><00:11:09.920><c> not</c><00:11:10.000><c> going</c><00:11:10.079><c> to</c>

00:11:10.230 --> 00:11:10.240 align:start position:0%
points that we have we're not going to
 

00:11:10.240 --> 00:11:11.509 align:start position:0%
points that we have we're not going to
iterate<00:11:10.560><c> through</c><00:11:10.800><c> the</c><00:11:10.880><c> map</c><00:11:11.120><c> we're</c><00:11:11.279><c> going</c><00:11:11.360><c> to</c>

00:11:11.509 --> 00:11:11.519 align:start position:0%
iterate through the map we're going to
 

00:11:11.519 --> 00:11:13.350 align:start position:0%
iterate through the map we're going to
iterate<00:11:11.839><c> through</c><00:11:12.000><c> the</c><00:11:12.160><c> list</c><00:11:12.399><c> of</c><00:11:12.560><c> points</c><00:11:13.200><c> that</c>

00:11:13.350 --> 00:11:13.360 align:start position:0%
iterate through the list of points that
 

00:11:13.360 --> 00:11:16.230 align:start position:0%
iterate through the list of points that
we<00:11:13.600><c> implemented</c><00:11:14.160><c> so</c><00:11:14.480><c> self.points</c>

00:11:16.230 --> 00:11:16.240 align:start position:0%
we implemented so self.points
 

00:11:16.240 --> 00:11:19.030 align:start position:0%
we implemented so self.points
and<00:11:16.399><c> then</c><00:11:16.640><c> we</c><00:11:16.880><c> are</c><00:11:17.120><c> good</c><00:11:17.920><c> to</c><00:11:18.240><c> go</c><00:11:18.480><c> the</c><00:11:18.640><c> solution</c>

00:11:19.030 --> 00:11:19.040 align:start position:0%
and then we are good to go the solution
 

00:11:19.040 --> 00:11:20.870 align:start position:0%
and then we are good to go the solution
will<00:11:19.200><c> work</c><00:11:19.519><c> but</c><00:11:19.680><c> one</c><00:11:19.920><c> thing</c><00:11:20.079><c> i</c><00:11:20.160><c> did</c><00:11:20.399><c> notice</c><00:11:20.720><c> is</c>

00:11:20.870 --> 00:11:20.880 align:start position:0%
will work but one thing i did notice is
 

00:11:20.880 --> 00:11:23.350 align:start position:0%
will work but one thing i did notice is
i<00:11:20.959><c> did</c><00:11:21.120><c> have</c><00:11:21.279><c> a</c><00:11:21.360><c> little</c><00:11:21.600><c> typo</c><00:11:22.000><c> here</c><00:11:22.320><c> so</c><00:11:22.560><c> the</c><00:11:23.120><c> x</c>

00:11:23.350 --> 00:11:23.360 align:start position:0%
i did have a little typo here so the x
 

00:11:23.360 --> 00:11:25.670 align:start position:0%
i did have a little typo here so the x
and<00:11:23.519><c> y</c><00:11:23.760><c> coordinates</c><00:11:24.720><c> uh</c>

00:11:25.670 --> 00:11:25.680 align:start position:0%
and y coordinates uh
 

00:11:25.680 --> 00:11:27.509 align:start position:0%
and y coordinates uh
it<00:11:25.760><c> needs</c><00:11:26.000><c> to</c><00:11:26.079><c> be</c><00:11:26.320><c> x</c><00:11:26.560><c> first</c><00:11:26.880><c> and</c><00:11:26.959><c> then</c><00:11:27.120><c> y</c><00:11:27.360><c> for</c>

00:11:27.509 --> 00:11:27.519 align:start position:0%
it needs to be x first and then y for
 

00:11:27.519 --> 00:11:29.430 align:start position:0%
it needs to be x first and then y for
some<00:11:27.680><c> reason</c><00:11:28.000><c> i</c><00:11:28.079><c> put</c><00:11:28.320><c> y</c><00:11:28.560><c> and</c><00:11:28.720><c> then</c><00:11:28.880><c> p</c><00:11:29.120><c> x</c><00:11:29.279><c> so</c>

00:11:29.430 --> 00:11:29.440 align:start position:0%
some reason i put y and then p x so
 

00:11:29.440 --> 00:11:32.310 align:start position:0%
some reason i put y and then p x so
let's<00:11:29.600><c> just</c><00:11:29.760><c> swap</c><00:11:30.079><c> these</c><00:11:30.320><c> around</c><00:11:30.720><c> p</c><00:11:31.120><c> x</c><00:11:31.600><c> y</c><00:11:32.079><c> so</c>

00:11:32.310 --> 00:11:32.320 align:start position:0%
let's just swap these around p x y so
 

00:11:32.320 --> 00:11:34.710 align:start position:0%
let's just swap these around p x y so
these<00:11:32.480><c> are</c><00:11:32.640><c> the</c><00:11:32.800><c> two</c><00:11:33.040><c> opposite</c><00:11:33.519><c> points</c><00:11:34.160><c> as</c><00:11:34.399><c> we</c>

00:11:34.710 --> 00:11:34.720 align:start position:0%
these are the two opposite points as we
 

00:11:34.720 --> 00:11:36.230 align:start position:0%
these are the two opposite points as we
showed<00:11:35.040><c> in</c><00:11:35.120><c> the</c><00:11:35.200><c> drawing</c><00:11:35.519><c> picture</c><00:11:35.920><c> and</c><00:11:36.079><c> we're</c>

00:11:36.230 --> 00:11:36.240 align:start position:0%
showed in the drawing picture and we're
 

00:11:36.240 --> 00:11:38.470 align:start position:0%
showed in the drawing picture and we're
just<00:11:36.480><c> iterating</c><00:11:37.040><c> through</c><00:11:37.360><c> the</c><00:11:37.600><c> list</c><00:11:38.000><c> of</c>

00:11:38.470 --> 00:11:38.480 align:start position:0%
just iterating through the list of
 

00:11:38.480 --> 00:11:40.870 align:start position:0%
just iterating through the list of
points<00:11:38.800><c> so</c><00:11:39.519><c> that</c><00:11:39.760><c> being</c><00:11:40.079><c> said</c><00:11:40.480><c> the</c><00:11:40.640><c> code</c>

00:11:40.870 --> 00:11:40.880 align:start position:0%
points so that being said the code
 

00:11:40.880 --> 00:11:42.389 align:start position:0%
points so that being said the code
should<00:11:41.120><c> work</c><00:11:41.360><c> hopefully</c><00:11:41.760><c> it</c><00:11:41.839><c> does</c><00:11:42.000><c> so</c><00:11:42.160><c> let's</c>

00:11:42.389 --> 00:11:42.399 align:start position:0%
should work hopefully it does so let's
 

00:11:42.399 --> 00:11:44.150 align:start position:0%
should work hopefully it does so let's
try<00:11:42.560><c> submitting</c><00:11:43.040><c> it</c><00:11:43.360><c> and</c><00:11:43.600><c> as</c><00:11:43.760><c> you</c><00:11:43.839><c> can</c><00:11:44.000><c> see</c>

00:11:44.150 --> 00:11:44.160 align:start position:0%
try submitting it and as you can see
 

00:11:44.160 --> 00:11:45.990 align:start position:0%
try submitting it and as you can see
below<00:11:44.560><c> it</c><00:11:44.720><c> does</c><00:11:44.959><c> work</c><00:11:45.279><c> i</c><00:11:45.360><c> hope</c><00:11:45.600><c> it's</c><00:11:45.760><c> pretty</c>

00:11:45.990 --> 00:11:46.000 align:start position:0%
below it does work i hope it's pretty
 

00:11:46.000 --> 00:11:48.150 align:start position:0%
below it does work i hope it's pretty
efficient<00:11:46.720><c> i</c><00:11:46.880><c> hope</c><00:11:47.040><c> this</c><00:11:47.200><c> was</c><00:11:47.440><c> helpful</c><00:11:47.839><c> if</c><00:11:48.000><c> it</c>

00:11:48.150 --> 00:11:48.160 align:start position:0%
efficient i hope this was helpful if it
 

00:11:48.160 --> 00:11:49.990 align:start position:0%
efficient i hope this was helpful if it
was<00:11:48.560><c> please</c><00:11:48.880><c> like</c><00:11:49.120><c> and</c><00:11:49.279><c> subscribe</c><00:11:49.839><c> it</c>

00:11:49.990 --> 00:11:50.000 align:start position:0%
was please like and subscribe it
 

00:11:50.000 --> 00:11:52.069 align:start position:0%
was please like and subscribe it
supports<00:11:50.399><c> the</c><00:11:50.560><c> channel</c><00:11:51.040><c> a</c><00:11:51.200><c> lot</c><00:11:51.680><c> consider</c>

00:11:52.069 --> 00:11:52.079 align:start position:0%
supports the channel a lot consider
 

00:11:52.079 --> 00:11:53.430 align:start position:0%
supports the channel a lot consider
checking<00:11:52.399><c> out</c><00:11:52.480><c> my</c><00:11:52.639><c> patreon</c><00:11:53.040><c> where</c><00:11:53.279><c> you</c><00:11:53.360><c> can</c>

00:11:53.430 --> 00:11:53.440 align:start position:0%
checking out my patreon where you can
 

00:11:53.440 --> 00:11:55.110 align:start position:0%
checking out my patreon where you can
further<00:11:53.839><c> support</c><00:11:54.160><c> the</c><00:11:54.320><c> channel</c><00:11:54.880><c> and</c>

00:11:55.110 --> 00:11:55.120 align:start position:0%
further support the channel and
 

00:11:55.120 --> 00:11:56.710 align:start position:0%
further support the channel and
hopefully<00:11:55.600><c> i'll</c><00:11:55.839><c> see</c><00:11:56.000><c> you</c><00:11:56.160><c> pretty</c><00:11:56.399><c> soon</c><00:11:56.639><c> i</c>

00:11:56.710 --> 00:11:56.720 align:start position:0%
hopefully i'll see you pretty soon i
 

00:11:56.720 --> 00:12:01.120 align:start position:0%
hopefully i'll see you pretty soon i
hope<00:11:56.959><c> this</c><00:11:57.120><c> video</c><00:11:57.839><c> taught</c><00:11:58.079><c> you</c><00:11:58.320><c> something</c><00:11:58.639><c> new</c>

