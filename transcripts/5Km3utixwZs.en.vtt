WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.589 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.360><c> let's</c>

00:00:01.589 --> 00:00:01.599 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.599 --> 00:00:03.350 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.760><c> some</c><00:00:02.000><c> more</c><00:00:02.159><c> neat</c><00:00:02.399><c> code</c><00:00:02.639><c> today</c><00:00:02.879><c> so</c><00:00:03.040><c> today</c>

00:00:03.350 --> 00:00:03.360 align:start position:0%
write some more neat code today so today
 

00:00:03.360 --> 00:00:06.230 align:start position:0%
write some more neat code today so today
let's<00:00:03.600><c> solve</c><00:00:04.000><c> number</c><00:00:04.480><c> of</c><00:00:04.720><c> one</c><00:00:05.120><c> bits</c><00:00:05.680><c> this</c><00:00:06.000><c> is</c>

00:00:06.230 --> 00:00:06.240 align:start position:0%
let's solve number of one bits this is
 

00:00:06.240 --> 00:00:09.350 align:start position:0%
let's solve number of one bits this is
actually<00:00:06.720><c> another</c><00:00:07.120><c> blind</c><00:00:07.520><c> 75</c><00:00:08.559><c> problem</c><00:00:09.200><c> and</c>

00:00:09.350 --> 00:00:09.360 align:start position:0%
actually another blind 75 problem and
 

00:00:09.360 --> 00:00:11.110 align:start position:0%
actually another blind 75 problem and
we've<00:00:09.599><c> been</c><00:00:09.760><c> tracking</c><00:00:10.160><c> all</c><00:00:10.240><c> blind</c><00:00:10.559><c> 75</c>

00:00:11.110 --> 00:00:11.120 align:start position:0%
we've been tracking all blind 75
 

00:00:11.120 --> 00:00:12.870 align:start position:0%
we've been tracking all blind 75
problems<00:00:11.599><c> on</c><00:00:11.759><c> this</c><00:00:11.920><c> spreadsheet</c><00:00:12.400><c> the</c><00:00:12.559><c> link</c><00:00:12.719><c> to</c>

00:00:12.870 --> 00:00:12.880 align:start position:0%
problems on this spreadsheet the link to
 

00:00:12.880 --> 00:00:14.310 align:start position:0%
problems on this spreadsheet the link to
that<00:00:13.040><c> will</c><00:00:13.200><c> be</c><00:00:13.360><c> in</c><00:00:13.440><c> the</c><00:00:13.519><c> description</c><00:00:14.000><c> today</c>

00:00:14.310 --> 00:00:14.320 align:start position:0%
that will be in the description today
 

00:00:14.320 --> 00:00:16.230 align:start position:0%
that will be in the description today
we'll<00:00:14.480><c> be</c><00:00:14.639><c> doing</c><00:00:14.960><c> number</c><00:00:15.280><c> of</c><00:00:15.440><c> one</c><00:00:15.679><c> bits</c><00:00:16.000><c> one</c><00:00:16.160><c> of</c>

00:00:16.230 --> 00:00:16.240 align:start position:0%
we'll be doing number of one bits one of
 

00:00:16.240 --> 00:00:17.910 align:start position:0%
we'll be doing number of one bits one of
the<00:00:16.400><c> last</c><00:00:16.720><c> problems</c><00:00:17.199><c> remaining</c><00:00:17.680><c> that</c><00:00:17.840><c> we</c>

00:00:17.910 --> 00:00:17.920 align:start position:0%
the last problems remaining that we
 

00:00:17.920 --> 00:00:20.630 align:start position:0%
the last problems remaining that we
haven't<00:00:18.240><c> done</c><00:00:18.880><c> and</c><00:00:19.119><c> i</c><00:00:19.359><c> also</c><00:00:19.680><c> have</c><00:00:20.080><c> a</c><00:00:20.240><c> youtube</c>

00:00:20.630 --> 00:00:20.640 align:start position:0%
haven't done and i also have a youtube
 

00:00:20.640 --> 00:00:23.189 align:start position:0%
haven't done and i also have a youtube
playlist<00:00:21.199><c> for</c><00:00:21.439><c> the</c><00:00:21.600><c> blind</c><00:00:21.920><c> 75</c><00:00:22.480><c> solutions</c><00:00:23.039><c> link</c>

00:00:23.189 --> 00:00:23.199 align:start position:0%
playlist for the blind 75 solutions link
 

00:00:23.199 --> 00:00:24.790 align:start position:0%
playlist for the blind 75 solutions link
to<00:00:23.359><c> that</c><00:00:23.519><c> will</c><00:00:23.680><c> also</c><00:00:23.920><c> be</c><00:00:24.080><c> in</c><00:00:24.160><c> the</c><00:00:24.320><c> description</c>

00:00:24.790 --> 00:00:24.800 align:start position:0%
to that will also be in the description
 

00:00:24.800 --> 00:00:26.550 align:start position:0%
to that will also be in the description
if<00:00:24.880><c> you</c><00:00:24.960><c> do</c><00:00:25.119><c> want</c><00:00:25.279><c> to</c><00:00:25.359><c> take</c><00:00:25.519><c> a</c><00:00:25.680><c> look</c><00:00:26.160><c> okay</c><00:00:26.400><c> so</c>

00:00:26.550 --> 00:00:26.560 align:start position:0%
if you do want to take a look okay so
 

00:00:26.560 --> 00:00:28.710 align:start position:0%
if you do want to take a look okay so
now<00:00:26.720><c> let's</c><00:00:26.960><c> get</c><00:00:27.199><c> into</c><00:00:27.519><c> it</c><00:00:27.920><c> we</c><00:00:28.160><c> are</c><00:00:28.320><c> told</c><00:00:28.560><c> to</c>

00:00:28.710 --> 00:00:28.720 align:start position:0%
now let's get into it we are told to
 

00:00:28.720 --> 00:00:30.630 align:start position:0%
now let's get into it we are told to
write<00:00:28.960><c> a</c><00:00:29.039><c> function</c><00:00:29.359><c> that</c><00:00:29.519><c> takes</c><00:00:30.000><c> in</c><00:00:30.320><c> an</c>

00:00:30.630 --> 00:00:30.640 align:start position:0%
write a function that takes in an
 

00:00:30.640 --> 00:00:32.470 align:start position:0%
write a function that takes in an
unsigned<00:00:31.359><c> integer</c><00:00:31.840><c> which</c><00:00:32.000><c> isn't</c><00:00:32.239><c> really</c>

00:00:32.470 --> 00:00:32.480 align:start position:0%
unsigned integer which isn't really
 

00:00:32.480 --> 00:00:34.549 align:start position:0%
unsigned integer which isn't really
important<00:00:32.880><c> for</c><00:00:33.040><c> this</c><00:00:33.280><c> problem</c><00:00:34.000><c> because</c><00:00:34.320><c> all</c>

00:00:34.549 --> 00:00:34.559 align:start position:0%
important for this problem because all
 

00:00:34.559 --> 00:00:37.510 align:start position:0%
important for this problem because all
we<00:00:34.719><c> want</c><00:00:34.880><c> to</c><00:00:34.960><c> do</c><00:00:35.280><c> is</c><00:00:35.680><c> count</c><00:00:36.000><c> the</c><00:00:36.239><c> number</c><00:00:36.719><c> of</c><00:00:37.040><c> one</c>

00:00:37.510 --> 00:00:37.520 align:start position:0%
we want to do is count the number of one
 

00:00:37.520 --> 00:00:40.150 align:start position:0%
we want to do is count the number of one
bits<00:00:38.000><c> that</c><00:00:38.239><c> it</c><00:00:38.480><c> has</c><00:00:39.120><c> so</c><00:00:39.280><c> the</c><00:00:39.520><c> concept</c><00:00:40.079><c> is</c>

00:00:40.150 --> 00:00:40.160 align:start position:0%
bits that it has so the concept is
 

00:00:40.160 --> 00:00:41.590 align:start position:0%
bits that it has so the concept is
pretty<00:00:40.399><c> simple</c><00:00:40.719><c> so</c><00:00:40.879><c> when</c><00:00:40.960><c> you</c><00:00:41.040><c> take</c><00:00:41.200><c> a</c><00:00:41.280><c> look</c><00:00:41.440><c> at</c>

00:00:41.590 --> 00:00:41.600 align:start position:0%
pretty simple so when you take a look at
 

00:00:41.600 --> 00:00:43.350 align:start position:0%
pretty simple so when you take a look at
this<00:00:41.840><c> number</c><00:00:42.399><c> we</c><00:00:42.559><c> can</c><00:00:42.640><c> see</c><00:00:42.800><c> it's</c><00:00:42.960><c> made</c><00:00:43.120><c> up</c><00:00:43.280><c> of</c>

00:00:43.350 --> 00:00:43.360 align:start position:0%
this number we can see it's made up of
 

00:00:43.360 --> 00:00:44.790 align:start position:0%
this number we can see it's made up of
zeros<00:00:43.680><c> and</c><00:00:43.840><c> ones</c><00:00:44.079><c> and</c><00:00:44.160><c> we</c><00:00:44.320><c> just</c><00:00:44.399><c> want</c><00:00:44.559><c> to</c><00:00:44.640><c> count</c>

00:00:44.790 --> 00:00:44.800 align:start position:0%
zeros and ones and we just want to count
 

00:00:44.800 --> 00:00:46.869 align:start position:0%
zeros and ones and we just want to count
how<00:00:44.960><c> many</c><00:00:45.120><c> ones</c><00:00:45.360><c> it</c><00:00:45.520><c> has</c><00:00:45.680><c> clearly</c><00:00:46.160><c> it</c><00:00:46.320><c> has</c><00:00:46.559><c> one</c>

00:00:46.869 --> 00:00:46.879 align:start position:0%
how many ones it has clearly it has one
 

00:00:46.879 --> 00:00:50.150 align:start position:0%
how many ones it has clearly it has one
two<00:00:47.600><c> three</c><00:00:48.000><c> so</c><00:00:48.239><c> we</c><00:00:48.399><c> can</c><00:00:48.559><c> return</c><00:00:49.280><c> three</c><00:00:49.680><c> but</c><00:00:49.920><c> how</c>

00:00:50.150 --> 00:00:50.160 align:start position:0%
two three so we can return three but how
 

00:00:50.160 --> 00:00:52.150 align:start position:0%
two three so we can return three but how
can<00:00:50.320><c> we</c><00:00:50.559><c> actually</c><00:00:51.039><c> count</c><00:00:51.280><c> the</c><00:00:51.440><c> bits</c><00:00:51.920><c> so</c>

00:00:52.150 --> 00:00:52.160 align:start position:0%
can we actually count the bits so
 

00:00:52.160 --> 00:00:53.590 align:start position:0%
can we actually count the bits so
obviously<00:00:52.559><c> we</c><00:00:52.719><c> need</c><00:00:52.879><c> to</c><00:00:52.960><c> do</c><00:00:53.120><c> a</c><00:00:53.199><c> little</c><00:00:53.360><c> bit</c><00:00:53.440><c> of</c>

00:00:53.590 --> 00:00:53.600 align:start position:0%
obviously we need to do a little bit of
 

00:00:53.600 --> 00:00:55.189 align:start position:0%
obviously we need to do a little bit of
bit<00:00:53.760><c> manipulation</c><00:00:54.559><c> i'm</c><00:00:54.640><c> going</c><00:00:54.719><c> to</c><00:00:54.879><c> be</c><00:00:54.960><c> showing</c>

00:00:55.189 --> 00:00:55.199 align:start position:0%
bit manipulation i'm going to be showing
 

00:00:55.199 --> 00:00:57.189 align:start position:0%
bit manipulation i'm going to be showing
you<00:00:55.360><c> two</c><00:00:55.600><c> different</c><00:00:55.920><c> solutions</c><00:00:56.719><c> one</c><00:00:56.960><c> of</c><00:00:57.039><c> the</c>

00:00:57.189 --> 00:00:57.199 align:start position:0%
you two different solutions one of the
 

00:00:57.199 --> 00:00:58.869 align:start position:0%
you two different solutions one of the
solutions<00:00:57.760><c> the</c><00:00:57.840><c> second</c><00:00:58.160><c> one</c><00:00:58.399><c> is</c><00:00:58.480><c> going</c><00:00:58.559><c> to</c><00:00:58.640><c> be</c>

00:00:58.869 --> 00:00:58.879 align:start position:0%
solutions the second one is going to be
 

00:00:58.879 --> 00:01:01.110 align:start position:0%
solutions the second one is going to be
slightly<00:00:59.600><c> faster</c><00:01:00.160><c> if</c><00:01:00.320><c> you're</c><00:01:00.480><c> interested</c><00:01:00.960><c> in</c>

00:01:01.110 --> 00:01:01.120 align:start position:0%
slightly faster if you're interested in
 

00:01:01.120 --> 00:01:03.189 align:start position:0%
slightly faster if you're interested in
it<00:01:01.600><c> and</c><00:01:01.760><c> it's</c><00:01:02.000><c> pretty</c><00:01:02.239><c> difficult</c><00:01:02.719><c> to</c><00:01:02.800><c> come</c><00:01:03.039><c> up</c>

00:01:03.189 --> 00:01:03.199 align:start position:0%
it and it's pretty difficult to come up
 

00:01:03.199 --> 00:01:05.270 align:start position:0%
it and it's pretty difficult to come up
with<00:01:03.920><c> but</c><00:01:04.239><c> the</c>

00:01:05.270 --> 00:01:05.280 align:start position:0%
with but the
 

00:01:05.280 --> 00:01:07.030 align:start position:0%
with but the
first<00:01:05.519><c> solution</c><00:01:06.240><c> is</c><00:01:06.400><c> a</c><00:01:06.479><c> little</c><00:01:06.640><c> bit</c><00:01:06.799><c> more</c>

00:01:07.030 --> 00:01:07.040 align:start position:0%
first solution is a little bit more
 

00:01:07.040 --> 00:01:08.950 align:start position:0%
first solution is a little bit more
straightforward<00:01:07.680><c> and</c><00:01:07.840><c> is</c><00:01:08.000><c> more</c><00:01:08.240><c> doable</c><00:01:08.799><c> so</c>

00:01:08.950 --> 00:01:08.960 align:start position:0%
straightforward and is more doable so
 

00:01:08.960 --> 00:01:10.630 align:start position:0%
straightforward and is more doable so
like<00:01:09.200><c> i</c><00:01:09.280><c> said</c><00:01:09.439><c> the</c><00:01:09.600><c> easiest</c><00:01:10.000><c> way</c><00:01:10.159><c> is</c><00:01:10.240><c> just</c><00:01:10.479><c> to</c>

00:01:10.630 --> 00:01:10.640 align:start position:0%
like i said the easiest way is just to
 

00:01:10.640 --> 00:01:13.670 align:start position:0%
like i said the easiest way is just to
count<00:01:10.960><c> manually</c><00:01:11.600><c> bit</c><00:01:11.920><c> by</c><00:01:12.240><c> bit</c><00:01:12.799><c> and</c><00:01:12.880><c> then</c><00:01:13.439><c> see</c>

00:01:13.670 --> 00:01:13.680 align:start position:0%
count manually bit by bit and then see
 

00:01:13.680 --> 00:01:15.910 align:start position:0%
count manually bit by bit and then see
which<00:01:13.840><c> one</c><00:01:14.000><c> of</c><00:01:14.159><c> them</c><00:01:14.320><c> is</c><00:01:14.400><c> our</c><00:01:14.640><c> ones</c><00:01:15.280><c> and</c><00:01:15.520><c> then</c>

00:01:15.910 --> 00:01:15.920 align:start position:0%
which one of them is our ones and then
 

00:01:15.920 --> 00:01:18.070 align:start position:0%
which one of them is our ones and then
increment<00:01:16.560><c> our</c><00:01:16.720><c> total</c><00:01:17.360><c> and</c><00:01:17.439><c> then</c><00:01:17.600><c> return</c><00:01:18.000><c> the</c>

00:01:18.070 --> 00:01:18.080 align:start position:0%
increment our total and then return the
 

00:01:18.080 --> 00:01:20.710 align:start position:0%
increment our total and then return the
total<00:01:18.880><c> but</c><00:01:19.119><c> let's</c><00:01:19.360><c> see</c><00:01:19.600><c> how</c><00:01:19.759><c> we</c><00:01:19.920><c> can</c><00:01:20.240><c> actually</c>

00:01:20.710 --> 00:01:20.720 align:start position:0%
total but let's see how we can actually
 

00:01:20.720 --> 00:01:22.789 align:start position:0%
total but let's see how we can actually
accomplish<00:01:21.280><c> that</c><00:01:21.520><c> so</c><00:01:21.759><c> how</c><00:01:21.920><c> do</c><00:01:22.080><c> we</c><00:01:22.320><c> know</c><00:01:22.640><c> let's</c>

00:01:22.789 --> 00:01:22.799 align:start position:0%
accomplish that so how do we know let's
 

00:01:22.799 --> 00:01:25.350 align:start position:0%
accomplish that so how do we know let's
say<00:01:22.960><c> we</c><00:01:23.119><c> want</c><00:01:23.280><c> to</c><00:01:23.360><c> look</c><00:01:23.680><c> at</c><00:01:23.920><c> the</c><00:01:24.159><c> first</c><00:01:24.960><c> a</c><00:01:25.119><c> bit</c>

00:01:25.350 --> 00:01:25.360 align:start position:0%
say we want to look at the first a bit
 

00:01:25.360 --> 00:01:27.270 align:start position:0%
say we want to look at the first a bit
on<00:01:25.520><c> the</c><00:01:25.600><c> right</c><00:01:25.920><c> side</c><00:01:26.320><c> how</c><00:01:26.479><c> do</c><00:01:26.560><c> we</c><00:01:26.720><c> know</c><00:01:26.880><c> if</c><00:01:27.119><c> it's</c>

00:01:27.270 --> 00:01:27.280 align:start position:0%
on the right side how do we know if it's
 

00:01:27.280 --> 00:01:29.670 align:start position:0%
on the right side how do we know if it's
a<00:01:27.439><c> one</c><00:01:27.759><c> or</c><00:01:27.920><c> a</c><00:01:28.080><c> zero</c><00:01:28.880><c> well</c><00:01:29.119><c> there's</c><00:01:29.360><c> actually</c>

00:01:29.670 --> 00:01:29.680 align:start position:0%
a one or a zero well there's actually
 

00:01:29.680 --> 00:01:31.990 align:start position:0%
a one or a zero well there's actually
two<00:01:29.840><c> different</c><00:01:30.159><c> ways</c><00:01:30.560><c> one</c><00:01:30.799><c> way</c><00:01:31.200><c> is</c><00:01:31.360><c> you</c><00:01:31.600><c> can</c>

00:01:31.990 --> 00:01:32.000 align:start position:0%
two different ways one way is you can
 

00:01:32.000 --> 00:01:34.950 align:start position:0%
two different ways one way is you can
and<00:01:32.400><c> it</c><00:01:32.560><c> with</c><00:01:33.040><c> the</c><00:01:33.200><c> integer</c><00:01:33.759><c> one</c><00:01:34.159><c> so</c>

00:01:34.950 --> 00:01:34.960 align:start position:0%
and it with the integer one so
 

00:01:34.960 --> 00:01:37.030 align:start position:0%
and it with the integer one so
since<00:01:35.200><c> the</c><00:01:35.360><c> integer</c><00:01:35.759><c> one</c><00:01:36.159><c> just</c><00:01:36.400><c> has</c><00:01:36.560><c> a</c><00:01:36.640><c> one</c>

00:01:37.030 --> 00:01:37.040 align:start position:0%
since the integer one just has a one
 

00:01:37.040 --> 00:01:38.870 align:start position:0%
since the integer one just has a one
here<00:01:37.360><c> and</c><00:01:37.439><c> then</c><00:01:37.600><c> the</c><00:01:37.680><c> rest</c><00:01:37.920><c> of</c><00:01:38.079><c> them</c><00:01:38.240><c> are</c><00:01:38.320><c> zeros</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
here and then the rest of them are zeros
 

00:01:38.880 --> 00:01:41.670 align:start position:0%
here and then the rest of them are zeros
when<00:01:39.040><c> we</c><00:01:39.200><c> do</c><00:01:39.360><c> a</c><00:01:39.680><c> logic</c><00:01:40.320><c> and</c><00:01:40.640><c> operation</c><00:01:41.280><c> logic</c>

00:01:41.670 --> 00:01:41.680 align:start position:0%
when we do a logic and operation logic
 

00:01:41.680 --> 00:01:44.069 align:start position:0%
when we do a logic and operation logic
and<00:01:41.920><c> is</c><00:01:42.000><c> basically</c><00:01:42.479><c> taking</c><00:01:42.799><c> the</c><00:01:43.040><c> and</c><00:01:43.439><c> of</c><00:01:43.680><c> every</c>

00:01:44.069 --> 00:01:44.079 align:start position:0%
and is basically taking the and of every
 

00:01:44.079 --> 00:01:47.030 align:start position:0%
and is basically taking the and of every
bit<00:01:44.479><c> but</c><00:01:44.640><c> we</c><00:01:44.880><c> know</c><00:01:45.119><c> that</c><00:01:45.680><c> every</c><00:01:46.159><c> bit</c><00:01:46.640><c> is</c><00:01:46.799><c> gonna</c>

00:01:47.030 --> 00:01:47.040 align:start position:0%
bit but we know that every bit is gonna
 

00:01:47.040 --> 00:01:49.830 align:start position:0%
bit but we know that every bit is gonna
be<00:01:47.280><c> zero</c><00:01:47.680><c> when</c><00:01:47.840><c> we</c><00:01:47.920><c> take</c><00:01:48.159><c> the</c><00:01:48.320><c> logic</c><00:01:48.799><c> and</c>

00:01:49.830 --> 00:01:49.840 align:start position:0%
be zero when we take the logic and
 

00:01:49.840 --> 00:01:52.389 align:start position:0%
be zero when we take the logic and
it's<00:01:50.000><c> gonna</c><00:01:50.159><c> be</c><00:01:50.320><c> zero</c><00:01:51.200><c> for</c><00:01:51.360><c> every</c><00:01:51.600><c> bit</c><00:01:51.920><c> except</c>

00:01:52.389 --> 00:01:52.399 align:start position:0%
it's gonna be zero for every bit except
 

00:01:52.399 --> 00:01:55.590 align:start position:0%
it's gonna be zero for every bit except
for<00:01:52.640><c> this</c><00:01:52.960><c> one</c><00:01:53.439><c> which</c><00:01:53.680><c> can</c><00:01:53.920><c> either</c><00:01:54.320><c> be</c><00:01:54.479><c> zero</c><00:01:55.040><c> or</c>

00:01:55.590 --> 00:01:55.600 align:start position:0%
for this one which can either be zero or
 

00:01:55.600 --> 00:01:59.350 align:start position:0%
for this one which can either be zero or
one<00:01:55.920><c> it'll</c><00:01:56.159><c> be</c><00:01:56.479><c> one</c><00:01:56.880><c> if</c><00:01:57.600><c> the</c><00:01:57.840><c> bit</c><00:01:58.399><c> in</c><00:01:58.799><c> the</c><00:01:58.960><c> input</c>

00:01:59.350 --> 00:01:59.360 align:start position:0%
one it'll be one if the bit in the input
 

00:01:59.360 --> 00:02:01.270 align:start position:0%
one it'll be one if the bit in the input
integer<00:01:59.840><c> is</c><00:02:00.000><c> one</c><00:02:00.240><c> then</c><00:02:00.479><c> we'll</c><00:02:00.640><c> get</c><00:02:00.799><c> a</c><00:02:00.880><c> one</c><00:02:01.119><c> in</c>

00:02:01.270 --> 00:02:01.280 align:start position:0%
integer is one then we'll get a one in
 

00:02:01.280 --> 00:02:03.990 align:start position:0%
integer is one then we'll get a one in
the<00:02:01.439><c> output</c><00:02:01.840><c> if</c><00:02:02.000><c> it's</c><00:02:02.240><c> a</c><00:02:02.399><c> zero</c><00:02:03.119><c> over</c><00:02:03.360><c> here</c><00:02:03.759><c> then</c>

00:02:03.990 --> 00:02:04.000 align:start position:0%
the output if it's a zero over here then
 

00:02:04.000 --> 00:02:06.069 align:start position:0%
the output if it's a zero over here then
we'll<00:02:04.159><c> get</c><00:02:04.320><c> a</c><00:02:04.399><c> zero</c><00:02:04.799><c> in</c><00:02:04.880><c> the</c><00:02:05.040><c> output</c><00:02:05.600><c> so</c><00:02:05.759><c> that</c>

00:02:06.069 --> 00:02:06.079 align:start position:0%
we'll get a zero in the output so that
 

00:02:06.079 --> 00:02:09.430 align:start position:0%
we'll get a zero in the output so that
can<00:02:06.320><c> tell</c><00:02:06.560><c> us</c><00:02:07.119><c> if</c><00:02:07.280><c> there's</c><00:02:07.439><c> a</c><00:02:07.600><c> 1</c><00:02:07.920><c> here</c><00:02:08.560><c> or</c><00:02:08.879><c> a</c><00:02:09.039><c> 0</c>

00:02:09.430 --> 00:02:09.440 align:start position:0%
can tell us if there's a 1 here or a 0
 

00:02:09.440 --> 00:02:10.469 align:start position:0%
can tell us if there's a 1 here or a 0
here

00:02:10.469 --> 00:02:10.479 align:start position:0%
here
 

00:02:10.479 --> 00:02:12.949 align:start position:0%
here
another<00:02:10.720><c> way</c><00:02:10.879><c> to</c><00:02:10.959><c> do</c><00:02:11.120><c> it</c><00:02:11.280><c> is</c><00:02:11.440><c> just</c><00:02:11.599><c> to</c><00:02:11.840><c> mod</c><00:02:12.239><c> this</c>

00:02:12.949 --> 00:02:12.959 align:start position:0%
another way to do it is just to mod this
 

00:02:12.959 --> 00:02:16.070 align:start position:0%
another way to do it is just to mod this
by<00:02:13.599><c> 2.</c><00:02:14.000><c> modding</c><00:02:14.480><c> is</c><00:02:14.560><c> basically</c><00:02:15.120><c> taking</c><00:02:15.520><c> this</c>

00:02:16.070 --> 00:02:16.080 align:start position:0%
by 2. modding is basically taking this
 

00:02:16.080 --> 00:02:17.589 align:start position:0%
by 2. modding is basically taking this
dividing<00:02:16.560><c> it</c><00:02:16.640><c> by</c><00:02:16.800><c> 2</c><00:02:16.959><c> and</c><00:02:17.120><c> getting</c><00:02:17.440><c> the</c>

00:02:17.589 --> 00:02:17.599 align:start position:0%
dividing it by 2 and getting the
 

00:02:17.599 --> 00:02:20.150 align:start position:0%
dividing it by 2 and getting the
remainder<00:02:18.319><c> since</c><00:02:18.640><c> this</c><00:02:18.800><c> is</c><00:02:18.959><c> the</c><00:02:19.200><c> ones</c><00:02:19.680><c> place</c>

00:02:20.150 --> 00:02:20.160 align:start position:0%
remainder since this is the ones place
 

00:02:20.160 --> 00:02:22.390 align:start position:0%
remainder since this is the ones place
if<00:02:20.319><c> we</c><00:02:20.480><c> mod</c><00:02:20.720><c> it</c><00:02:20.800><c> by</c><00:02:21.040><c> two</c><00:02:21.280><c> and</c><00:02:21.360><c> there</c><00:02:21.680><c> is</c><00:02:21.920><c> a</c><00:02:22.080><c> one</c>

00:02:22.390 --> 00:02:22.400 align:start position:0%
if we mod it by two and there is a one
 

00:02:22.400 --> 00:02:24.790 align:start position:0%
if we mod it by two and there is a one
here<00:02:22.879><c> we'll</c><00:02:23.120><c> get</c><00:02:23.360><c> a</c><00:02:23.599><c> one</c><00:02:24.000><c> in</c><00:02:24.080><c> the</c><00:02:24.319><c> output</c><00:02:24.720><c> if</c>

00:02:24.790 --> 00:02:24.800 align:start position:0%
here we'll get a one in the output if
 

00:02:24.800 --> 00:02:27.030 align:start position:0%
here we'll get a one in the output if
there's<00:02:24.959><c> a</c><00:02:25.120><c> zero</c><00:02:25.440><c> here</c><00:02:25.920><c> we'll</c><00:02:26.080><c> get</c><00:02:26.239><c> a</c><00:02:26.480><c> zero</c><00:02:26.959><c> in</c>

00:02:27.030 --> 00:02:27.040 align:start position:0%
there's a zero here we'll get a zero in
 

00:02:27.040 --> 00:02:29.030 align:start position:0%
there's a zero here we'll get a zero in
the<00:02:27.200><c> output</c><00:02:27.599><c> so</c><00:02:28.000><c> we</c><00:02:28.160><c> have</c><00:02:28.319><c> two</c><00:02:28.480><c> different</c><00:02:28.720><c> ways</c>

00:02:29.030 --> 00:02:29.040 align:start position:0%
the output so we have two different ways
 

00:02:29.040 --> 00:02:30.949 align:start position:0%
the output so we have two different ways
to<00:02:29.120><c> do</c><00:02:29.280><c> it</c><00:02:29.599><c> i</c><00:02:29.760><c> think</c><00:02:29.920><c> i'm</c><00:02:30.080><c> gonna</c><00:02:30.319><c> stick</c><00:02:30.640><c> with</c>

00:02:30.949 --> 00:02:30.959 align:start position:0%
to do it i think i'm gonna stick with
 

00:02:30.959 --> 00:02:33.190 align:start position:0%
to do it i think i'm gonna stick with
modding<00:02:31.680><c> but</c><00:02:31.920><c> you</c><00:02:32.000><c> can</c><00:02:32.160><c> do</c><00:02:32.239><c> it</c><00:02:32.400><c> either</c><00:02:32.640><c> way</c>

00:02:33.190 --> 00:02:33.200 align:start position:0%
modding but you can do it either way
 

00:02:33.200 --> 00:02:35.910 align:start position:0%
modding but you can do it either way
okay<00:02:33.519><c> so</c><00:02:33.920><c> we</c><00:02:34.160><c> have</c><00:02:34.319><c> a</c><00:02:34.400><c> way</c><00:02:34.720><c> to</c><00:02:34.879><c> detect</c><00:02:35.440><c> if</c><00:02:35.680><c> the</c>

00:02:35.910 --> 00:02:35.920 align:start position:0%
okay so we have a way to detect if the
 

00:02:35.920 --> 00:02:38.550 align:start position:0%
okay so we have a way to detect if the
first<00:02:36.319><c> bit</c><00:02:36.640><c> is</c><00:02:36.800><c> a</c><00:02:36.959><c> one</c><00:02:37.280><c> or</c><00:02:37.360><c> a</c><00:02:37.519><c> zero</c><00:02:38.000><c> but</c><00:02:38.239><c> what</c><00:02:38.400><c> if</c>

00:02:38.550 --> 00:02:38.560 align:start position:0%
first bit is a one or a zero but what if
 

00:02:38.560 --> 00:02:40.710 align:start position:0%
first bit is a one or a zero but what if
we<00:02:38.800><c> want</c><00:02:38.959><c> to</c><00:02:39.120><c> look</c><00:02:39.360><c> at</c><00:02:39.440><c> the</c><00:02:39.680><c> next</c><00:02:40.080><c> bit</c><00:02:40.480><c> and</c><00:02:40.560><c> the</c>

00:02:40.710 --> 00:02:40.720 align:start position:0%
we want to look at the next bit and the
 

00:02:40.720 --> 00:02:42.790 align:start position:0%
we want to look at the next bit and the
next<00:02:41.040><c> bit</c><00:02:41.280><c> and</c><00:02:41.440><c> the</c><00:02:41.519><c> next</c><00:02:41.840><c> bit</c><00:02:42.080><c> how</c><00:02:42.319><c> do</c><00:02:42.400><c> we</c><00:02:42.560><c> do</c>

00:02:42.790 --> 00:02:42.800 align:start position:0%
next bit and the next bit how do we do
 

00:02:42.800 --> 00:02:44.949 align:start position:0%
next bit and the next bit how do we do
that<00:02:43.280><c> well</c><00:02:43.519><c> the</c><00:02:43.760><c> easiest</c><00:02:44.239><c> way</c><00:02:44.400><c> would</c><00:02:44.560><c> just</c><00:02:44.800><c> be</c>

00:02:44.949 --> 00:02:44.959 align:start position:0%
that well the easiest way would just be
 

00:02:44.959 --> 00:02:47.430 align:start position:0%
that well the easiest way would just be
to<00:02:45.120><c> take</c><00:02:45.599><c> all</c><00:02:45.840><c> the</c><00:02:46.160><c> rest</c><00:02:46.480><c> of</c><00:02:46.560><c> the</c><00:02:46.800><c> bits</c><00:02:47.280><c> and</c>

00:02:47.430 --> 00:02:47.440 align:start position:0%
to take all the rest of the bits and
 

00:02:47.440 --> 00:02:50.790 align:start position:0%
to take all the rest of the bits and
then<00:02:47.760><c> shift</c><00:02:48.239><c> them</c><00:02:48.720><c> to</c><00:02:48.879><c> the</c><00:02:49.200><c> right</c><00:02:49.760><c> by</c><00:02:50.080><c> one</c><00:02:50.560><c> and</c>

00:02:50.790 --> 00:02:50.800 align:start position:0%
then shift them to the right by one and
 

00:02:50.800 --> 00:02:52.790 align:start position:0%
then shift them to the right by one and
luckily<00:02:51.360><c> most</c><00:02:51.599><c> languages</c><00:02:52.080><c> can</c><00:02:52.319><c> natively</c>

00:02:52.790 --> 00:02:52.800 align:start position:0%
luckily most languages can natively
 

00:02:52.800 --> 00:02:54.869 align:start position:0%
luckily most languages can natively
support<00:02:53.200><c> this</c><00:02:53.599><c> and</c><00:02:53.760><c> it's</c><00:02:53.920><c> a</c><00:02:54.000><c> very</c><00:02:54.319><c> efficient</c>

00:02:54.869 --> 00:02:54.879 align:start position:0%
support this and it's a very efficient
 

00:02:54.879 --> 00:02:57.350 align:start position:0%
support this and it's a very efficient
cpu<00:02:55.599><c> operation</c><00:02:56.640><c> this</c><00:02:56.879><c> is</c><00:02:56.959><c> kind</c><00:02:57.120><c> of</c><00:02:57.280><c> the</c>

00:02:57.350 --> 00:02:57.360 align:start position:0%
cpu operation this is kind of the
 

00:02:57.360 --> 00:02:59.190 align:start position:0%
cpu operation this is kind of the
preferred<00:02:57.840><c> way</c><00:02:58.000><c> to</c><00:02:58.159><c> usually</c><00:02:58.480><c> do</c><00:02:58.640><c> it</c><00:02:58.800><c> in</c><00:02:58.959><c> bit</c>

00:02:59.190 --> 00:02:59.200 align:start position:0%
preferred way to usually do it in bit
 

00:02:59.200 --> 00:03:01.430 align:start position:0%
preferred way to usually do it in bit
manipulation<00:02:59.920><c> just</c><00:03:00.159><c> shift</c><00:03:00.560><c> every</c><00:03:00.879><c> bit</c><00:03:01.200><c> to</c><00:03:01.360><c> the</c>

00:03:01.430 --> 00:03:01.440 align:start position:0%
manipulation just shift every bit to the
 

00:03:01.440 --> 00:03:02.949 align:start position:0%
manipulation just shift every bit to the
right<00:03:01.760><c> by</c><00:03:02.000><c> one</c>

00:03:02.949 --> 00:03:02.959 align:start position:0%
right by one
 

00:03:02.959 --> 00:03:04.790 align:start position:0%
right by one
we<00:03:03.120><c> can</c><00:03:03.360><c> achieve</c><00:03:03.680><c> basically</c><00:03:04.080><c> the</c><00:03:04.239><c> exact</c><00:03:04.560><c> same</c>

00:03:04.790 --> 00:03:04.800 align:start position:0%
we can achieve basically the exact same
 

00:03:04.800 --> 00:03:07.030 align:start position:0%
we can achieve basically the exact same
thing<00:03:05.040><c> by</c><00:03:05.280><c> taking</c><00:03:05.680><c> this</c><00:03:06.080><c> and</c><00:03:06.239><c> then</c><00:03:06.560><c> integer</c>

00:03:07.030 --> 00:03:07.040 align:start position:0%
thing by taking this and then integer
 

00:03:07.040 --> 00:03:09.750 align:start position:0%
thing by taking this and then integer
division<00:03:07.920><c> by</c><00:03:08.239><c> two</c><00:03:08.640><c> dividing</c><00:03:09.120><c> it</c><00:03:09.200><c> by</c><00:03:09.360><c> two</c><00:03:09.519><c> will</c>

00:03:09.750 --> 00:03:09.760 align:start position:0%
division by two dividing it by two will
 

00:03:09.760 --> 00:03:11.750 align:start position:0%
division by two dividing it by two will
basically<00:03:10.319><c> shift</c><00:03:10.720><c> all</c><00:03:10.800><c> the</c><00:03:11.040><c> bits</c><00:03:11.440><c> to</c><00:03:11.599><c> the</c>

00:03:11.750 --> 00:03:11.760 align:start position:0%
basically shift all the bits to the
 

00:03:11.760 --> 00:03:14.470 align:start position:0%
basically shift all the bits to the
right<00:03:12.000><c> by</c><00:03:12.239><c> one</c><00:03:12.720><c> as</c><00:03:12.879><c> well</c><00:03:13.120><c> but</c><00:03:13.360><c> usually</c><00:03:14.080><c> the</c><00:03:14.239><c> bit</c>

00:03:14.470 --> 00:03:14.480 align:start position:0%
right by one as well but usually the bit
 

00:03:14.480 --> 00:03:16.309 align:start position:0%
right by one as well but usually the bit
shift<00:03:14.879><c> operation</c><00:03:15.599><c> is</c><00:03:15.760><c> a</c><00:03:15.840><c> little</c><00:03:16.000><c> bit</c><00:03:16.159><c> more</c>

00:03:16.309 --> 00:03:16.319 align:start position:0%
shift operation is a little bit more
 

00:03:16.319 --> 00:03:18.070 align:start position:0%
shift operation is a little bit more
efficient<00:03:16.720><c> on</c><00:03:16.800><c> your</c><00:03:17.040><c> cpu</c><00:03:17.440><c> so</c><00:03:17.599><c> that's</c><00:03:17.760><c> what</c><00:03:17.920><c> i'm</c>

00:03:18.070 --> 00:03:18.080 align:start position:0%
efficient on your cpu so that's what i'm
 

00:03:18.080 --> 00:03:19.430 align:start position:0%
efficient on your cpu so that's what i'm
going<00:03:18.159><c> to</c><00:03:18.239><c> prefer</c><00:03:18.640><c> so</c><00:03:18.800><c> basically</c><00:03:19.200><c> we're</c><00:03:19.360><c> going</c>

00:03:19.430 --> 00:03:19.440 align:start position:0%
going to prefer so basically we're going
 

00:03:19.440 --> 00:03:21.589 align:start position:0%
going to prefer so basically we're going
to<00:03:19.519><c> take</c><00:03:19.760><c> these</c><00:03:20.239><c> shift</c><00:03:20.560><c> them</c><00:03:20.640><c> to</c><00:03:20.800><c> the</c><00:03:20.959><c> right</c><00:03:21.440><c> so</c>

00:03:21.589 --> 00:03:21.599 align:start position:0%
to take these shift them to the right so
 

00:03:21.599 --> 00:03:23.830 align:start position:0%
to take these shift them to the right so
now<00:03:21.840><c> we're</c><00:03:22.080><c> going</c><00:03:22.159><c> to</c><00:03:22.239><c> have</c><00:03:22.720><c> a</c><00:03:22.879><c> new</c><00:03:23.120><c> integer</c><00:03:23.599><c> 1</c>

00:03:23.830 --> 00:03:23.840 align:start position:0%
now we're going to have a new integer 1
 

00:03:23.840 --> 00:03:25.270 align:start position:0%
now we're going to have a new integer 1
0<00:03:24.319><c> 1.</c>

00:03:25.270 --> 00:03:25.280 align:start position:0%
0 1.
 

00:03:25.280 --> 00:03:27.350 align:start position:0%
0 1.
again<00:03:25.680><c> we</c><00:03:25.840><c> want</c><00:03:26.000><c> to</c><00:03:26.080><c> know</c><00:03:26.239><c> if</c><00:03:26.319><c> this</c><00:03:26.560><c> bit</c><00:03:26.879><c> is</c><00:03:27.040><c> 1</c>

00:03:27.350 --> 00:03:27.360 align:start position:0%
again we want to know if this bit is 1
 

00:03:27.360 --> 00:03:29.350 align:start position:0%
again we want to know if this bit is 1
or<00:03:27.680><c> 0.</c><00:03:28.000><c> we're</c><00:03:28.159><c> going</c><00:03:28.239><c> to</c><00:03:28.319><c> mod</c><00:03:28.640><c> it</c><00:03:28.720><c> by</c><00:03:28.959><c> 2</c><00:03:29.200><c> we're</c>

00:03:29.350 --> 00:03:29.360 align:start position:0%
or 0. we're going to mod it by 2 we're
 

00:03:29.360 --> 00:03:31.670 align:start position:0%
or 0. we're going to mod it by 2 we're
going<00:03:29.440><c> to</c><00:03:29.519><c> get</c><00:03:29.680><c> another</c><00:03:30.000><c> one</c><00:03:30.480><c> so</c><00:03:30.720><c> so</c><00:03:30.959><c> far</c><00:03:31.440><c> we</c>

00:03:31.670 --> 00:03:31.680 align:start position:0%
going to get another one so so far we
 

00:03:31.680 --> 00:03:33.990 align:start position:0%
going to get another one so so far we
have<00:03:32.159><c> counted</c><00:03:32.959><c> two</c>

00:03:33.990 --> 00:03:34.000 align:start position:0%
have counted two
 

00:03:34.000 --> 00:03:36.149 align:start position:0%
have counted two
two<00:03:34.319><c> ones</c><00:03:34.879><c> and</c><00:03:35.040><c> again</c><00:03:35.360><c> we</c><00:03:35.519><c> would</c><00:03:35.680><c> want</c><00:03:35.840><c> to</c><00:03:35.920><c> take</c>

00:03:36.149 --> 00:03:36.159 align:start position:0%
two ones and again we would want to take
 

00:03:36.159 --> 00:03:38.550 align:start position:0%
two ones and again we would want to take
these<00:03:36.720><c> shift</c><00:03:37.040><c> them</c><00:03:37.120><c> to</c><00:03:37.280><c> the</c><00:03:37.440><c> right</c><00:03:38.080><c> this</c><00:03:38.319><c> time</c>

00:03:38.550 --> 00:03:38.560 align:start position:0%
these shift them to the right this time
 

00:03:38.560 --> 00:03:41.910 align:start position:0%
these shift them to the right this time
we<00:03:38.720><c> get</c><00:03:38.959><c> a</c><00:03:39.200><c> one</c><00:03:39.519><c> zero</c><00:03:40.159><c> we</c><00:03:40.400><c> mod</c><00:03:40.640><c> this</c><00:03:40.879><c> by</c><00:03:41.200><c> two</c><00:03:41.760><c> we</c>

00:03:41.910 --> 00:03:41.920 align:start position:0%
we get a one zero we mod this by two we
 

00:03:41.920 --> 00:03:43.430 align:start position:0%
we get a one zero we mod this by two we
get<00:03:42.080><c> a</c><00:03:42.239><c> zero</c><00:03:42.480><c> in</c><00:03:42.560><c> the</c><00:03:42.720><c> output</c><00:03:43.120><c> that</c><00:03:43.280><c> means</c>

00:03:43.430 --> 00:03:43.440 align:start position:0%
get a zero in the output that means
 

00:03:43.440 --> 00:03:45.910 align:start position:0%
get a zero in the output that means
there's<00:03:43.680><c> a</c><00:03:43.760><c> zero</c><00:03:44.080><c> here</c><00:03:44.560><c> so</c><00:03:44.799><c> we</c><00:03:44.959><c> don't</c><00:03:45.280><c> add</c><00:03:45.680><c> to</c>

00:03:45.910 --> 00:03:45.920 align:start position:0%
there's a zero here so we don't add to
 

00:03:45.920 --> 00:03:48.550 align:start position:0%
there's a zero here so we don't add to
our<00:03:46.080><c> total</c><00:03:46.640><c> this</c><00:03:46.879><c> time</c><00:03:47.440><c> and</c><00:03:47.680><c> lastly</c><00:03:48.159><c> we</c><00:03:48.319><c> take</c>

00:03:48.550 --> 00:03:48.560 align:start position:0%
our total this time and lastly we take
 

00:03:48.560 --> 00:03:51.589 align:start position:0%
our total this time and lastly we take
this<00:03:49.120><c> shift</c><00:03:49.360><c> it</c><00:03:49.440><c> by</c><00:03:49.680><c> one</c><00:03:50.159><c> we</c><00:03:50.319><c> get</c><00:03:50.560><c> another</c><00:03:51.360><c> we</c>

00:03:51.589 --> 00:03:51.599 align:start position:0%
this shift it by one we get another we
 

00:03:51.599 --> 00:03:53.270 align:start position:0%
this shift it by one we get another we
basically<00:03:51.920><c> get</c><00:03:52.080><c> the</c><00:03:52.239><c> integer</c><00:03:52.560><c> one</c><00:03:52.799><c> we</c><00:03:52.959><c> mod</c><00:03:53.200><c> it</c>

00:03:53.270 --> 00:03:53.280 align:start position:0%
basically get the integer one we mod it
 

00:03:53.280 --> 00:03:56.550 align:start position:0%
basically get the integer one we mod it
by<00:03:53.599><c> two</c><00:03:54.239><c> one</c><00:03:54.640><c> divided</c><00:03:55.120><c> by</c><00:03:55.360><c> two</c><00:03:55.840><c> the</c><00:03:56.000><c> remainder</c>

00:03:56.550 --> 00:03:56.560 align:start position:0%
by two one divided by two the remainder
 

00:03:56.560 --> 00:03:58.949 align:start position:0%
by two one divided by two the remainder
after<00:03:56.720><c> that</c><00:03:56.959><c> is</c><00:03:57.120><c> just</c><00:03:57.439><c> one</c><00:03:57.920><c> so</c><00:03:58.319><c> we</c><00:03:58.480><c> got</c><00:03:58.720><c> our</c>

00:03:58.949 --> 00:03:58.959 align:start position:0%
after that is just one so we got our
 

00:03:58.959 --> 00:04:01.030 align:start position:0%
after that is just one so we got our
third<00:03:59.360><c> one</c><00:03:59.519><c> so</c><00:03:59.680><c> our</c><00:03:59.920><c> total</c><00:04:00.239><c> so</c><00:04:00.400><c> far</c><00:04:00.560><c> is</c><00:04:00.720><c> three</c>

00:04:01.030 --> 00:04:01.040 align:start position:0%
third one so our total so far is three
 

00:04:01.040 --> 00:04:03.110 align:start position:0%
third one so our total so far is three
ones<00:04:01.280><c> that</c><00:04:01.439><c> we</c><00:04:01.599><c> counted</c><00:04:02.239><c> and</c><00:04:02.480><c> lastly</c><00:04:02.959><c> we're</c>

00:04:03.110 --> 00:04:03.120 align:start position:0%
ones that we counted and lastly we're
 

00:04:03.120 --> 00:04:04.710 align:start position:0%
ones that we counted and lastly we're
going<00:04:03.200><c> to</c><00:04:03.280><c> take</c><00:04:03.599><c> this</c><00:04:03.920><c> and</c><00:04:04.000><c> then</c><00:04:04.159><c> shift</c><00:04:04.480><c> it</c><00:04:04.560><c> to</c>

00:04:04.710 --> 00:04:04.720 align:start position:0%
going to take this and then shift it to
 

00:04:04.720 --> 00:04:06.229 align:start position:0%
going to take this and then shift it to
the<00:04:04.799><c> right</c><00:04:05.200><c> but</c><00:04:05.360><c> what</c><00:04:05.599><c> exactly</c><00:04:05.920><c> is</c><00:04:06.080><c> going</c><00:04:06.159><c> to</c>

00:04:06.229 --> 00:04:06.239 align:start position:0%
the right but what exactly is going to
 

00:04:06.239 --> 00:04:08.149 align:start position:0%
the right but what exactly is going to
be<00:04:06.319><c> remaining</c><00:04:06.959><c> after</c><00:04:07.280><c> we</c><00:04:07.439><c> do</c><00:04:07.680><c> that</c><00:04:07.920><c> well</c>

00:04:08.149 --> 00:04:08.159 align:start position:0%
be remaining after we do that well
 

00:04:08.159 --> 00:04:11.030 align:start position:0%
be remaining after we do that well
basically<00:04:08.720><c> zero</c><00:04:09.360><c> and</c><00:04:09.760><c> once</c><00:04:10.080><c> we</c><00:04:10.239><c> have</c><00:04:10.480><c> a</c><00:04:10.640><c> zero</c>

00:04:11.030 --> 00:04:11.040 align:start position:0%
basically zero and once we have a zero
 

00:04:11.040 --> 00:04:12.789 align:start position:0%
basically zero and once we have a zero
it<00:04:11.120><c> basically</c><00:04:11.439><c> means</c><00:04:11.680><c> we</c><00:04:11.840><c> have</c><00:04:12.000><c> all</c><00:04:12.239><c> zeros</c>

00:04:12.789 --> 00:04:12.799 align:start position:0%
it basically means we have all zeros
 

00:04:12.799 --> 00:04:15.830 align:start position:0%
it basically means we have all zeros
right<00:04:13.040><c> 32</c><00:04:13.599><c> bit</c><00:04:13.920><c> integer</c><00:04:14.319><c> we'll</c><00:04:14.480><c> have</c><00:04:14.560><c> 32</c><00:04:15.120><c> zeros</c>

00:04:15.830 --> 00:04:15.840 align:start position:0%
right 32 bit integer we'll have 32 zeros
 

00:04:15.840 --> 00:04:17.670 align:start position:0%
right 32 bit integer we'll have 32 zeros
and<00:04:16.239><c> that</c><00:04:16.479><c> basically</c><00:04:16.880><c> means</c><00:04:17.120><c> that</c><00:04:17.280><c> we</c><00:04:17.440><c> can</c>

00:04:17.670 --> 00:04:17.680 align:start position:0%
and that basically means that we can
 

00:04:17.680 --> 00:04:19.990 align:start position:0%
and that basically means that we can
stop<00:04:18.079><c> our</c><00:04:18.239><c> algorithm</c><00:04:18.799><c> now</c><00:04:19.199><c> and</c><00:04:19.359><c> we're</c><00:04:19.600><c> done</c><00:04:19.840><c> so</c>

00:04:19.990 --> 00:04:20.000 align:start position:0%
stop our algorithm now and we're done so
 

00:04:20.000 --> 00:04:22.790 align:start position:0%
stop our algorithm now and we're done so
we<00:04:20.160><c> counted</c><00:04:20.560><c> in</c><00:04:20.720><c> total</c><00:04:21.199><c> three</c><00:04:21.919><c> ones</c><00:04:22.639><c> and</c>

00:04:22.790 --> 00:04:22.800 align:start position:0%
we counted in total three ones and
 

00:04:22.800 --> 00:04:24.710 align:start position:0%
we counted in total three ones and
that's<00:04:22.960><c> what</c><00:04:23.120><c> we</c><00:04:23.280><c> can</c><00:04:23.440><c> return</c><00:04:24.160><c> so</c><00:04:24.320><c> once</c><00:04:24.560><c> you're</c>

00:04:24.710 --> 00:04:24.720 align:start position:0%
that's what we can return so once you're
 

00:04:24.720 --> 00:04:26.950 align:start position:0%
that's what we can return so once you're
familiar<00:04:25.280><c> with</c><00:04:25.440><c> these</c><00:04:25.680><c> bit</c><00:04:26.000><c> operations</c><00:04:26.720><c> it's</c>

00:04:26.950 --> 00:04:26.960 align:start position:0%
familiar with these bit operations it's
 

00:04:26.960 --> 00:04:28.469 align:start position:0%
familiar with these bit operations it's
a<00:04:27.040><c> pretty</c><00:04:27.280><c> straightforward</c><00:04:27.919><c> problem</c><00:04:28.320><c> so</c>

00:04:28.469 --> 00:04:28.479 align:start position:0%
a pretty straightforward problem so
 

00:04:28.479 --> 00:04:31.030 align:start position:0%
a pretty straightforward problem so
let's<00:04:28.800><c> code</c><00:04:29.199><c> up</c><00:04:29.360><c> the</c><00:04:29.600><c> first</c><00:04:29.919><c> solution</c><00:04:30.639><c> okay</c><00:04:30.880><c> so</c>

00:04:31.030 --> 00:04:31.040 align:start position:0%
let's code up the first solution okay so
 

00:04:31.040 --> 00:04:32.469 align:start position:0%
let's code up the first solution okay so
now<00:04:31.199><c> let's</c><00:04:31.440><c> code</c><00:04:31.680><c> it</c><00:04:31.919><c> up</c><00:04:32.160><c> i'm</c><00:04:32.320><c> going</c><00:04:32.400><c> to</c>

00:04:32.469 --> 00:04:32.479 align:start position:0%
now let's code it up i'm going to
 

00:04:32.479 --> 00:04:34.310 align:start position:0%
now let's code it up i'm going to
declare<00:04:32.960><c> one</c><00:04:33.199><c> variable</c><00:04:33.680><c> for</c><00:04:33.840><c> the</c><00:04:34.000><c> result</c>

00:04:34.310 --> 00:04:34.320 align:start position:0%
declare one variable for the result
 

00:04:34.320 --> 00:04:35.990 align:start position:0%
declare one variable for the result
which<00:04:34.560><c> is</c><00:04:34.639><c> basically</c><00:04:35.040><c> the</c><00:04:35.199><c> total</c><00:04:35.520><c> account</c><00:04:35.919><c> the</c>

00:04:35.990 --> 00:04:36.000 align:start position:0%
which is basically the total account the
 

00:04:36.000 --> 00:04:37.430 align:start position:0%
which is basically the total account the
total<00:04:36.320><c> number</c><00:04:36.560><c> of</c><00:04:36.800><c> ones</c><00:04:37.040><c> that</c><00:04:37.120><c> we're</c><00:04:37.280><c> going</c><00:04:37.360><c> to</c>

00:04:37.430 --> 00:04:37.440 align:start position:0%
total number of ones that we're going to
 

00:04:37.440 --> 00:04:39.430 align:start position:0%
total number of ones that we're going to
have<00:04:37.840><c> and</c><00:04:38.000><c> i'm</c><00:04:38.080><c> going</c><00:04:38.160><c> to</c><00:04:38.320><c> continue</c>

00:04:39.430 --> 00:04:39.440 align:start position:0%
have and i'm going to continue
 

00:04:39.440 --> 00:04:42.950 align:start position:0%
have and i'm going to continue
counting<00:04:39.840><c> the</c><00:04:40.000><c> ones</c><00:04:40.720><c> while</c><00:04:41.360><c> n</c><00:04:41.840><c> is</c><00:04:42.479><c> greater</c>

00:04:42.950 --> 00:04:42.960 align:start position:0%
counting the ones while n is greater
 

00:04:42.960 --> 00:04:45.110 align:start position:0%
counting the ones while n is greater
than<00:04:43.199><c> zero</c><00:04:43.680><c> or</c><00:04:43.919><c> in</c><00:04:44.160><c> other</c><00:04:44.320><c> words</c><00:04:44.560><c> while</c><00:04:44.800><c> it's</c>

00:04:45.110 --> 00:04:45.120 align:start position:0%
than zero or in other words while it's
 

00:04:45.120 --> 00:04:47.510 align:start position:0%
than zero or in other words while it's
not<00:04:45.440><c> equal</c><00:04:45.759><c> to</c><00:04:46.000><c> zero</c><00:04:46.320><c> which</c><00:04:46.560><c> i</c><00:04:46.800><c> can</c><00:04:47.199><c> you</c><00:04:47.280><c> know</c>

00:04:47.510 --> 00:04:47.520 align:start position:0%
not equal to zero which i can you know
 

00:04:47.520 --> 00:04:49.830 align:start position:0%
not equal to zero which i can you know
do<00:04:47.840><c> just</c><00:04:48.080><c> like</c><00:04:48.320><c> this</c><00:04:48.960><c> and</c><00:04:49.120><c> that'll</c><00:04:49.440><c> work</c><00:04:49.680><c> in</c>

00:04:49.830 --> 00:04:49.840 align:start position:0%
do just like this and that'll work in
 

00:04:49.840 --> 00:04:51.830 align:start position:0%
do just like this and that'll work in
most<00:04:50.080><c> languages</c><00:04:50.560><c> i</c><00:04:50.720><c> think</c><00:04:51.040><c> and</c>

00:04:51.830 --> 00:04:51.840 align:start position:0%
most languages i think and
 

00:04:51.840 --> 00:04:54.230 align:start position:0%
most languages i think and
then<00:04:52.320><c> we</c><00:04:52.560><c> want</c><00:04:52.800><c> to</c><00:04:52.960><c> know</c><00:04:53.280><c> if</c><00:04:53.440><c> the</c><00:04:53.600><c> ones</c><00:04:53.919><c> place</c>

00:04:54.230 --> 00:04:54.240 align:start position:0%
then we want to know if the ones place
 

00:04:54.240 --> 00:04:56.629 align:start position:0%
then we want to know if the ones place
is<00:04:54.400><c> a</c><00:04:54.479><c> one</c><00:04:54.720><c> or</c><00:04:54.880><c> a</c><00:04:54.960><c> zero</c><00:04:55.280><c> so</c><00:04:55.440><c> we</c><00:04:55.520><c> can</c><00:04:55.680><c> take</c><00:04:56.160><c> n</c><00:04:56.479><c> and</c>

00:04:56.629 --> 00:04:56.639 align:start position:0%
is a one or a zero so we can take n and
 

00:04:56.639 --> 00:04:59.590 align:start position:0%
is a one or a zero so we can take n and
mod<00:04:56.960><c> it</c><00:04:57.120><c> by</c><00:04:57.759><c> two</c><00:04:58.240><c> now</c><00:04:58.479><c> this</c><00:04:58.639><c> will</c><00:04:58.800><c> either</c><00:04:59.120><c> be</c><00:04:59.360><c> a</c>

00:04:59.590 --> 00:04:59.600 align:start position:0%
mod it by two now this will either be a
 

00:04:59.600 --> 00:05:01.909 align:start position:0%
mod it by two now this will either be a
one<00:04:59.919><c> or</c><00:05:00.080><c> this</c><00:05:00.320><c> will</c><00:05:00.400><c> be</c><00:05:00.560><c> a</c><00:05:00.639><c> zero</c><00:05:01.120><c> if</c><00:05:01.280><c> it's</c><00:05:01.440><c> a</c><00:05:01.600><c> one</c>

00:05:01.909 --> 00:05:01.919 align:start position:0%
one or this will be a zero if it's a one
 

00:05:01.919 --> 00:05:03.909 align:start position:0%
one or this will be a zero if it's a one
then<00:05:02.080><c> we</c><00:05:02.240><c> wanna</c><00:05:02.560><c> increment</c><00:05:03.120><c> result</c><00:05:03.520><c> if</c><00:05:03.680><c> it's</c><00:05:03.840><c> a</c>

00:05:03.909 --> 00:05:03.919 align:start position:0%
then we wanna increment result if it's a
 

00:05:03.919 --> 00:05:06.310 align:start position:0%
then we wanna increment result if it's a
zero<00:05:04.320><c> we</c><00:05:04.479><c> don't</c><00:05:04.639><c> wanna</c><00:05:04.960><c> increment</c><00:05:05.440><c> result</c><00:05:05.759><c> so</c>

00:05:06.310 --> 00:05:06.320 align:start position:0%
zero we don't wanna increment result so
 

00:05:06.320 --> 00:05:09.029 align:start position:0%
zero we don't wanna increment result so
in<00:05:06.479><c> other</c><00:05:06.639><c> words</c><00:05:06.880><c> we</c><00:05:07.039><c> can</c><00:05:07.199><c> just</c><00:05:07.600><c> basically</c><00:05:08.240><c> add</c>

00:05:09.029 --> 00:05:09.039 align:start position:0%
in other words we can just basically add
 

00:05:09.039 --> 00:05:12.629 align:start position:0%
in other words we can just basically add
this<00:05:09.759><c> to</c><00:05:10.080><c> our</c><00:05:10.320><c> result</c><00:05:10.880><c> itself</c><00:05:12.000><c> and</c><00:05:12.160><c> then</c><00:05:12.479><c> we</c>

00:05:12.629 --> 00:05:12.639 align:start position:0%
this to our result itself and then we
 

00:05:12.639 --> 00:05:14.310 align:start position:0%
this to our result itself and then we
don't<00:05:12.800><c> want</c><00:05:12.960><c> to</c><00:05:13.039><c> forget</c><00:05:13.600><c> to</c>

00:05:14.310 --> 00:05:14.320 align:start position:0%
don't want to forget to
 

00:05:14.320 --> 00:05:16.469 align:start position:0%
don't want to forget to
shift<00:05:14.720><c> everything</c><00:05:15.120><c> to</c><00:05:15.280><c> the</c><00:05:15.440><c> right</c><00:05:15.680><c> by</c><00:05:15.919><c> one</c><00:05:16.240><c> so</c>

00:05:16.469 --> 00:05:16.479 align:start position:0%
shift everything to the right by one so
 

00:05:16.479 --> 00:05:19.270 align:start position:0%
shift everything to the right by one so
what<00:05:16.639><c> we</c><00:05:16.800><c> can</c><00:05:16.960><c> do</c><00:05:17.199><c> is</c><00:05:17.440><c> set</c><00:05:17.759><c> an</c><00:05:18.080><c> equal</c><00:05:18.320><c> to</c><00:05:18.560><c> itself</c>

00:05:19.270 --> 00:05:19.280 align:start position:0%
what we can do is set an equal to itself
 

00:05:19.280 --> 00:05:22.469 align:start position:0%
what we can do is set an equal to itself
bit<00:05:19.600><c> shifted</c><00:05:20.000><c> to</c><00:05:20.160><c> the</c><00:05:20.400><c> right</c><00:05:20.960><c> by</c><00:05:21.520><c> one</c><00:05:22.160><c> after</c>

00:05:22.469 --> 00:05:22.479 align:start position:0%
bit shifted to the right by one after
 

00:05:22.479 --> 00:05:24.150 align:start position:0%
bit shifted to the right by one after
that<00:05:23.039><c> last</c><00:05:23.280><c> thing</c><00:05:23.440><c> we</c><00:05:23.520><c> have</c><00:05:23.600><c> to</c><00:05:23.680><c> do</c><00:05:23.840><c> is</c><00:05:24.000><c> just</c>

00:05:24.150 --> 00:05:24.160 align:start position:0%
that last thing we have to do is just
 

00:05:24.160 --> 00:05:26.150 align:start position:0%
that last thing we have to do is just
return<00:05:24.479><c> the</c><00:05:24.639><c> result</c><00:05:24.960><c> so</c><00:05:25.120><c> now</c><00:05:25.360><c> let's</c><00:05:25.680><c> run</c><00:05:25.919><c> it</c><00:05:26.000><c> to</c>

00:05:26.150 --> 00:05:26.160 align:start position:0%
return the result so now let's run it to
 

00:05:26.160 --> 00:05:27.990 align:start position:0%
return the result so now let's run it to
make<00:05:26.320><c> sure</c><00:05:26.479><c> that</c><00:05:26.639><c> it</c><00:05:26.800><c> works</c><00:05:27.440><c> and</c><00:05:27.600><c> as</c><00:05:27.759><c> you</c><00:05:27.840><c> can</c>

00:05:27.990 --> 00:05:28.000 align:start position:0%
make sure that it works and as you can
 

00:05:28.000 --> 00:05:30.070 align:start position:0%
make sure that it works and as you can
see<00:05:28.320><c> it</c><00:05:28.560><c> does</c><00:05:28.880><c> work</c><00:05:29.199><c> and</c><00:05:29.280><c> it</c><00:05:29.520><c> is</c><00:05:29.759><c> pretty</c>

00:05:30.070 --> 00:05:30.080 align:start position:0%
see it does work and it is pretty
 

00:05:30.080 --> 00:05:32.150 align:start position:0%
see it does work and it is pretty
efficient<00:05:30.880><c> but</c><00:05:31.039><c> what</c><00:05:31.280><c> exactly</c><00:05:31.680><c> is</c><00:05:31.840><c> the</c><00:05:31.919><c> time</c>

00:05:32.150 --> 00:05:32.160 align:start position:0%
efficient but what exactly is the time
 

00:05:32.160 --> 00:05:34.070 align:start position:0%
efficient but what exactly is the time
complexity<00:05:32.720><c> of</c><00:05:32.880><c> the</c><00:05:33.039><c> solution</c>

00:05:34.070 --> 00:05:34.080 align:start position:0%
complexity of the solution
 

00:05:34.080 --> 00:05:35.830 align:start position:0%
complexity of the solution
well<00:05:34.320><c> the</c><00:05:34.560><c> good</c><00:05:34.800><c> thing</c><00:05:35.039><c> is</c><00:05:35.440><c> that</c><00:05:35.680><c> we're</c>

00:05:35.830 --> 00:05:35.840 align:start position:0%
well the good thing is that we're
 

00:05:35.840 --> 00:05:37.510 align:start position:0%
well the good thing is that we're
guaranteed<00:05:36.400><c> that</c><00:05:36.560><c> every</c><00:05:36.880><c> input</c><00:05:37.280><c> is</c><00:05:37.360><c> going</c><00:05:37.440><c> to</c>

00:05:37.510 --> 00:05:37.520 align:start position:0%
guaranteed that every input is going to
 

00:05:37.520 --> 00:05:40.310 align:start position:0%
guaranteed that every input is going to
be<00:05:37.680><c> a</c><00:05:37.759><c> 32-bit</c><00:05:38.880><c> integer</c><00:05:39.440><c> so</c><00:05:39.600><c> we</c><00:05:39.759><c> know</c><00:05:39.919><c> that</c><00:05:40.000><c> that</c>

00:05:40.310 --> 00:05:40.320 align:start position:0%
be a 32-bit integer so we know that that
 

00:05:40.320 --> 00:05:42.310 align:start position:0%
be a 32-bit integer so we know that that
while<00:05:40.639><c> loop</c><00:05:40.880><c> we</c><00:05:40.960><c> had</c><00:05:41.199><c> is</c><00:05:41.360><c> going</c><00:05:41.440><c> to</c><00:05:41.520><c> run</c><00:05:41.759><c> 32</c>

00:05:42.310 --> 00:05:42.320 align:start position:0%
while loop we had is going to run 32
 

00:05:42.320 --> 00:05:45.430 align:start position:0%
while loop we had is going to run 32
times<00:05:42.639><c> so</c><00:05:43.120><c> really</c><00:05:43.440><c> the</c><00:05:43.600><c> time</c><00:05:43.759><c> complexity</c><00:05:44.720><c> is</c>

00:05:45.430 --> 00:05:45.440 align:start position:0%
times so really the time complexity is
 

00:05:45.440 --> 00:05:49.270 align:start position:0%
times so really the time complexity is
big<00:05:45.840><c> o</c><00:05:46.479><c> of</c><00:05:46.880><c> 32</c><00:05:47.600><c> which</c><00:05:47.840><c> is</c><00:05:48.080><c> constant</c><00:05:48.639><c> time</c><00:05:48.960><c> right</c>

00:05:49.270 --> 00:05:49.280 align:start position:0%
big o of 32 which is constant time right
 

00:05:49.280 --> 00:05:51.189 align:start position:0%
big o of 32 which is constant time right
no<00:05:49.440><c> matter</c><00:05:49.680><c> what</c><00:05:49.840><c> the</c><00:05:50.080><c> input</c><00:05:50.479><c> is</c><00:05:50.880><c> the</c><00:05:51.039><c> time</c>

00:05:51.189 --> 00:05:51.199 align:start position:0%
no matter what the input is the time
 

00:05:51.199 --> 00:05:53.189 align:start position:0%
no matter what the input is the time
complexity<00:05:51.680><c> is</c><00:05:51.759><c> not</c><00:05:51.919><c> going</c><00:05:52.000><c> to</c><00:05:52.160><c> scale</c><00:05:52.639><c> up</c><00:05:52.880><c> so</c>

00:05:53.189 --> 00:05:53.199 align:start position:0%
complexity is not going to scale up so
 

00:05:53.199 --> 00:05:54.710 align:start position:0%
complexity is not going to scale up so
basically<00:05:53.600><c> the</c><00:05:53.680><c> time</c><00:05:53.919><c> complexity</c><00:05:54.479><c> is</c>

00:05:54.710 --> 00:05:54.720 align:start position:0%
basically the time complexity is
 

00:05:54.720 --> 00:05:57.029 align:start position:0%
basically the time complexity is
constant<00:05:55.280><c> we</c><00:05:55.440><c> can</c><00:05:55.600><c> say</c><00:05:55.759><c> it's</c><00:05:55.919><c> big</c><00:05:56.160><c> o</c><00:05:56.319><c> of</c><00:05:56.479><c> one</c>

00:05:57.029 --> 00:05:57.039 align:start position:0%
constant we can say it's big o of one
 

00:05:57.039 --> 00:05:58.469 align:start position:0%
constant we can say it's big o of one
and<00:05:57.199><c> there's</c><00:05:57.360><c> no</c><00:05:57.600><c> real</c><00:05:57.919><c> extra</c><00:05:58.160><c> memory</c>

00:05:58.469 --> 00:05:58.479 align:start position:0%
and there's no real extra memory
 

00:05:58.479 --> 00:06:00.309 align:start position:0%
and there's no real extra memory
complexity<00:05:59.039><c> needed</c><00:05:59.440><c> as</c><00:05:59.520><c> well</c><00:05:59.680><c> so</c><00:05:59.840><c> that's</c><00:06:00.000><c> also</c>

00:06:00.309 --> 00:06:00.319 align:start position:0%
complexity needed as well so that's also
 

00:06:00.319 --> 00:06:03.510 align:start position:0%
complexity needed as well so that's also
big<00:06:00.560><c> o</c><00:06:00.639><c> of</c><00:06:00.800><c> one</c><00:06:01.440><c> but</c><00:06:01.680><c> a</c><00:06:01.919><c> small</c><00:06:02.479><c> downside</c><00:06:03.199><c> of</c><00:06:03.440><c> our</c>

00:06:03.510 --> 00:06:03.520 align:start position:0%
big o of one but a small downside of our
 

00:06:03.520 --> 00:06:06.230 align:start position:0%
big o of one but a small downside of our
solution<00:06:04.240><c> is</c><00:06:04.800><c> it</c><00:06:04.960><c> has</c><00:06:05.199><c> to</c><00:06:05.360><c> count</c><00:06:05.759><c> it</c><00:06:05.919><c> has</c><00:06:06.000><c> to</c>

00:06:06.230 --> 00:06:06.240 align:start position:0%
solution is it has to count it has to
 

00:06:06.240 --> 00:06:08.390 align:start position:0%
solution is it has to count it has to
look<00:06:06.479><c> at</c><00:06:06.720><c> every</c><00:06:07.039><c> bit</c><00:06:07.360><c> even</c><00:06:07.680><c> the</c><00:06:07.840><c> ones</c><00:06:08.160><c> that</c>

00:06:08.390 --> 00:06:08.400 align:start position:0%
look at every bit even the ones that
 

00:06:08.400 --> 00:06:10.230 align:start position:0%
look at every bit even the ones that
aren't<00:06:08.800><c> ones</c><00:06:09.280><c> so</c><00:06:09.440><c> for</c><00:06:09.600><c> example</c><00:06:09.919><c> what</c><00:06:10.080><c> if</c><00:06:10.160><c> we</c>

00:06:10.230 --> 00:06:10.240 align:start position:0%
aren't ones so for example what if we
 

00:06:10.240 --> 00:06:12.070 align:start position:0%
aren't ones so for example what if we
had<00:06:10.400><c> a</c><00:06:10.479><c> number</c><00:06:10.720><c> like</c><00:06:11.039><c> this</c><00:06:11.440><c> in</c><00:06:11.520><c> this</c><00:06:11.759><c> case</c>

00:06:12.070 --> 00:06:12.080 align:start position:0%
had a number like this in this case
 

00:06:12.080 --> 00:06:14.070 align:start position:0%
had a number like this in this case
we're<00:06:12.240><c> gonna</c><00:06:12.560><c> look</c><00:06:12.800><c> at</c><00:06:12.960><c> this</c><00:06:13.199><c> bit</c><00:06:13.440><c> first</c><00:06:13.840><c> okay</c>

00:06:14.070 --> 00:06:14.080 align:start position:0%
we're gonna look at this bit first okay
 

00:06:14.080 --> 00:06:15.749 align:start position:0%
we're gonna look at this bit first okay
it's<00:06:14.240><c> a</c><00:06:14.400><c> one</c><00:06:14.960><c> we're</c><00:06:15.120><c> done</c><00:06:15.280><c> with</c><00:06:15.440><c> that</c><00:06:15.600><c> then</c>

00:06:15.749 --> 00:06:15.759 align:start position:0%
it's a one we're done with that then
 

00:06:15.759 --> 00:06:17.990 align:start position:0%
it's a one we're done with that then
we're<00:06:15.919><c> going</c><00:06:16.000><c> to</c><00:06:16.080><c> look</c><00:06:16.240><c> at</c><00:06:16.319><c> this</c><00:06:16.639><c> bit</c><00:06:17.280><c> this</c><00:06:17.520><c> bit</c>

00:06:17.990 --> 00:06:18.000 align:start position:0%
we're going to look at this bit this bit
 

00:06:18.000 --> 00:06:20.950 align:start position:0%
we're going to look at this bit this bit
this<00:06:18.319><c> bit</c><00:06:18.880><c> this</c><00:06:19.120><c> bit</c><00:06:19.360><c> every</c><00:06:20.000><c> bit</c><00:06:20.319><c> here</c><00:06:20.720><c> even</c>

00:06:20.950 --> 00:06:20.960 align:start position:0%
this bit this bit every bit here even
 

00:06:20.960 --> 00:06:22.870 align:start position:0%
this bit this bit every bit here even
though<00:06:21.120><c> they're</c><00:06:21.360><c> zeros</c><00:06:22.160><c> right</c><00:06:22.400><c> that</c><00:06:22.560><c> kind</c><00:06:22.720><c> of</c>

00:06:22.870 --> 00:06:22.880 align:start position:0%
though they're zeros right that kind of
 

00:06:22.880 --> 00:06:25.430 align:start position:0%
though they're zeros right that kind of
wastes<00:06:23.360><c> time</c><00:06:23.840><c> wouldn't</c><00:06:24.080><c> it</c><00:06:24.240><c> be</c><00:06:24.400><c> convenient</c><00:06:25.199><c> if</c>

00:06:25.430 --> 00:06:25.440 align:start position:0%
wastes time wouldn't it be convenient if
 

00:06:25.440 --> 00:06:27.749 align:start position:0%
wastes time wouldn't it be convenient if
we<00:06:25.759><c> only</c><00:06:26.160><c> had</c><00:06:26.479><c> to</c><00:06:26.720><c> look</c><00:06:26.960><c> at</c><00:06:27.039><c> the</c><00:06:27.199><c> bits</c><00:06:27.600><c> that</c>

00:06:27.749 --> 00:06:27.759 align:start position:0%
we only had to look at the bits that
 

00:06:27.759 --> 00:06:30.469 align:start position:0%
we only had to look at the bits that
were<00:06:28.080><c> one</c><00:06:28.560><c> that</c><00:06:29.039><c> meaning</c><00:06:29.360><c> our</c><00:06:29.600><c> algorithm</c><00:06:30.160><c> only</c>

00:06:30.469 --> 00:06:30.479 align:start position:0%
were one that meaning our algorithm only
 

00:06:30.479 --> 00:06:32.870 align:start position:0%
were one that meaning our algorithm only
has<00:06:30.639><c> to</c><00:06:30.800><c> run</c><00:06:31.120><c> as</c><00:06:31.280><c> many</c><00:06:31.680><c> times</c><00:06:32.160><c> as</c><00:06:32.319><c> how</c><00:06:32.479><c> many</c>

00:06:32.870 --> 00:06:32.880 align:start position:0%
has to run as many times as how many
 

00:06:32.880 --> 00:06:35.749 align:start position:0%
has to run as many times as how many
ones<00:06:33.280><c> are</c><00:06:33.440><c> actually</c><00:06:33.919><c> in</c><00:06:34.160><c> the</c><00:06:34.479><c> input</c><00:06:35.280><c> and</c><00:06:35.520><c> yes</c>

00:06:35.749 --> 00:06:35.759 align:start position:0%
ones are actually in the input and yes
 

00:06:35.759 --> 00:06:37.990 align:start position:0%
ones are actually in the input and yes
there<00:06:36.080><c> actually</c><00:06:36.560><c> is</c><00:06:36.720><c> a</c><00:06:36.880><c> way</c><00:06:37.039><c> we</c><00:06:37.199><c> can</c><00:06:37.360><c> do</c><00:06:37.600><c> this</c>

00:06:37.990 --> 00:06:38.000 align:start position:0%
there actually is a way we can do this
 

00:06:38.000 --> 00:06:40.550 align:start position:0%
there actually is a way we can do this
but<00:06:38.160><c> it's</c><00:06:38.479><c> not</c><00:06:38.880><c> very</c><00:06:39.280><c> easy</c><00:06:39.600><c> to</c><00:06:39.840><c> come</c><00:06:40.160><c> up</c><00:06:40.319><c> with</c>

00:06:40.550 --> 00:06:40.560 align:start position:0%
but it's not very easy to come up with
 

00:06:40.560 --> 00:06:42.309 align:start position:0%
but it's not very easy to come up with
and<00:06:40.720><c> it's</c><00:06:40.880><c> probably</c><00:06:41.280><c> not</c><00:06:41.440><c> even</c><00:06:41.680><c> worth</c><00:06:42.000><c> coming</c>

00:06:42.309 --> 00:06:42.319 align:start position:0%
and it's probably not even worth coming
 

00:06:42.319 --> 00:06:43.830 align:start position:0%
and it's probably not even worth coming
up<00:06:42.400><c> with</c><00:06:42.639><c> because</c><00:06:42.880><c> the</c><00:06:42.960><c> time</c><00:06:43.199><c> complexity</c><00:06:43.680><c> will</c>

00:06:43.830 --> 00:06:43.840 align:start position:0%
up with because the time complexity will
 

00:06:43.840 --> 00:06:46.309 align:start position:0%
up with because the time complexity will
be<00:06:44.000><c> the</c><00:06:44.240><c> same</c><00:06:44.479><c> it'll</c><00:06:44.800><c> still</c><00:06:45.039><c> be</c><00:06:45.280><c> constant</c><00:06:45.840><c> time</c>

00:06:46.309 --> 00:06:46.319 align:start position:0%
be the same it'll still be constant time
 

00:06:46.319 --> 00:06:48.390 align:start position:0%
be the same it'll still be constant time
and<00:06:46.479><c> constant</c><00:06:47.039><c> space</c><00:06:47.680><c> but</c>

00:06:48.390 --> 00:06:48.400 align:start position:0%
and constant space but
 

00:06:48.400 --> 00:06:50.469 align:start position:0%
and constant space but
it<00:06:48.560><c> might</c><00:06:48.720><c> be</c><00:06:48.880><c> good</c><00:06:49.120><c> to</c><00:06:49.280><c> just</c><00:06:49.759><c> you</c><00:06:49.840><c> know</c><00:06:50.240><c> get</c>

00:06:50.469 --> 00:06:50.479 align:start position:0%
it might be good to just you know get
 

00:06:50.479 --> 00:06:52.150 align:start position:0%
it might be good to just you know get
really<00:06:50.720><c> good</c><00:06:50.880><c> at</c><00:06:51.039><c> your</c><00:06:51.120><c> bit</c><00:06:51.360><c> manipulation</c>

00:06:52.150 --> 00:06:52.160 align:start position:0%
really good at your bit manipulation
 

00:06:52.160 --> 00:06:54.550 align:start position:0%
really good at your bit manipulation
tricks<00:06:52.560><c> and</c><00:06:52.639><c> stuff</c><00:06:53.199><c> and</c><00:06:53.360><c> maybe</c><00:06:54.080><c> you'll</c><00:06:54.400><c> see</c>

00:06:54.550 --> 00:06:54.560 align:start position:0%
tricks and stuff and maybe you'll see
 

00:06:54.560 --> 00:06:56.629 align:start position:0%
tricks and stuff and maybe you'll see
this<00:06:54.800><c> in</c><00:06:54.880><c> an</c><00:06:55.120><c> interview</c><00:06:55.840><c> so</c><00:06:56.000><c> the</c><00:06:56.240><c> main</c>

00:06:56.629 --> 00:06:56.639 align:start position:0%
this in an interview so the main
 

00:06:56.639 --> 00:06:58.950 align:start position:0%
this in an interview so the main
operation<00:06:57.280><c> we're</c><00:06:57.440><c> going</c><00:06:57.599><c> to</c><00:06:57.680><c> be</c><00:06:57.840><c> doing</c><00:06:58.319><c> in</c><00:06:58.479><c> our</c>

00:06:58.950 --> 00:06:58.960 align:start position:0%
operation we're going to be doing in our
 

00:06:58.960 --> 00:07:01.670 align:start position:0%
operation we're going to be doing in our
while<00:06:59.280><c> loop</c><00:06:59.520><c> with</c><00:06:59.759><c> this</c><00:07:00.080><c> trick</c><00:07:00.639><c> is</c><00:07:00.880><c> basically</c>

00:07:01.670 --> 00:07:01.680 align:start position:0%
while loop with this trick is basically
 

00:07:01.680 --> 00:07:05.350 align:start position:0%
while loop with this trick is basically
taking<00:07:02.319><c> n</c><00:07:02.800><c> and</c><00:07:03.120><c> setting</c><00:07:03.520><c> it</c><00:07:03.759><c> equal</c><00:07:04.240><c> to</c><00:07:04.639><c> n</c>

00:07:05.350 --> 00:07:05.360 align:start position:0%
taking n and setting it equal to n
 

00:07:05.360 --> 00:07:10.150 align:start position:0%
taking n and setting it equal to n
logic<00:07:06.080><c> ended</c><00:07:06.880><c> with</c><00:07:07.520><c> n</c><00:07:08.160><c> minus</c><00:07:09.039><c> one</c><00:07:09.680><c> and</c><00:07:09.840><c> this</c><00:07:10.080><c> is</c>

00:07:10.150 --> 00:07:10.160 align:start position:0%
logic ended with n minus one and this is
 

00:07:10.160 --> 00:07:11.430 align:start position:0%
logic ended with n minus one and this is
what<00:07:10.319><c> we're</c><00:07:10.479><c> going</c><00:07:10.560><c> to</c><00:07:10.639><c> do</c><00:07:10.880><c> in</c><00:07:11.120><c> every</c>

00:07:11.430 --> 00:07:11.440 align:start position:0%
what we're going to do in every
 

00:07:11.440 --> 00:07:13.110 align:start position:0%
what we're going to do in every
iteration<00:07:12.000><c> of</c><00:07:12.080><c> the</c><00:07:12.240><c> loop</c><00:07:12.479><c> and</c><00:07:12.639><c> each</c><00:07:12.800><c> time</c><00:07:12.960><c> we</c>

00:07:13.110 --> 00:07:13.120 align:start position:0%
iteration of the loop and each time we
 

00:07:13.120 --> 00:07:15.270 align:start position:0%
iteration of the loop and each time we
do<00:07:13.280><c> that</c><00:07:13.440><c> we're</c><00:07:13.599><c> going</c><00:07:13.680><c> to</c><00:07:14.080><c> increment</c><00:07:14.880><c> our</c>

00:07:15.270 --> 00:07:15.280 align:start position:0%
do that we're going to increment our
 

00:07:15.280 --> 00:07:19.270 align:start position:0%
do that we're going to increment our
result<00:07:16.160><c> by</c><00:07:16.960><c> one</c><00:07:17.360><c> but</c><00:07:17.520><c> the</c><00:07:17.759><c> question</c><00:07:18.240><c> is</c><00:07:18.800><c> why</c>

00:07:19.270 --> 00:07:19.280 align:start position:0%
result by one but the question is why
 

00:07:19.280 --> 00:07:21.670 align:start position:0%
result by one but the question is why
does<00:07:19.599><c> this</c><00:07:20.000><c> work</c><00:07:20.560><c> first</c><00:07:20.800><c> let's</c><00:07:21.039><c> see</c><00:07:21.280><c> what</c><00:07:21.440><c> will</c>

00:07:21.670 --> 00:07:21.680 align:start position:0%
does this work first let's see what will
 

00:07:21.680 --> 00:07:24.230 align:start position:0%
does this work first let's see what will
happen<00:07:22.319><c> so</c><00:07:22.960><c> okay</c><00:07:23.280><c> so</c><00:07:23.520><c> what's</c><00:07:23.759><c> gonna</c><00:07:23.919><c> happen</c>

00:07:24.230 --> 00:07:24.240 align:start position:0%
happen so okay so what's gonna happen
 

00:07:24.240 --> 00:07:26.870 align:start position:0%
happen so okay so what's gonna happen
let's<00:07:24.479><c> take</c><00:07:24.720><c> this</c><00:07:24.960><c> integer</c><00:07:25.680><c> and</c><00:07:26.080><c> subtract</c><00:07:26.639><c> one</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
let's take this integer and subtract one
 

00:07:26.880 --> 00:07:28.230 align:start position:0%
let's take this integer and subtract one
from<00:07:27.039><c> it</c><00:07:27.199><c> right</c><00:07:27.360><c> that's</c><00:07:27.520><c> what</c><00:07:27.680><c> we're</c><00:07:27.840><c> gonna</c><00:07:28.000><c> do</c>

00:07:28.230 --> 00:07:28.240 align:start position:0%
from it right that's what we're gonna do
 

00:07:28.240 --> 00:07:30.629 align:start position:0%
from it right that's what we're gonna do
over<00:07:28.479><c> here</c><00:07:28.720><c> so</c><00:07:28.960><c> n</c><00:07:29.199><c> minus</c><00:07:29.599><c> 1</c><00:07:29.840><c> which</c><00:07:30.080><c> is</c><00:07:30.319><c> going</c><00:07:30.479><c> to</c>

00:07:30.629 --> 00:07:30.639 align:start position:0%
over here so n minus 1 which is going to
 

00:07:30.639 --> 00:07:31.350 align:start position:0%
over here so n minus 1 which is going to
be

00:07:31.350 --> 00:07:31.360 align:start position:0%
be
 

00:07:31.360 --> 00:07:34.150 align:start position:0%
be
this<00:07:32.080><c> and</c><00:07:32.319><c> now</c><00:07:32.720><c> we're</c><00:07:32.960><c> going</c><00:07:33.120><c> to</c><00:07:33.440><c> logic</c><00:07:33.919><c> and</c>

00:07:34.150 --> 00:07:34.160 align:start position:0%
this and now we're going to logic and
 

00:07:34.160 --> 00:07:35.909 align:start position:0%
this and now we're going to logic and
them<00:07:34.479><c> together</c><00:07:35.120><c> what</c><00:07:35.280><c> are</c><00:07:35.440><c> we</c><00:07:35.520><c> going</c><00:07:35.680><c> to</c><00:07:35.759><c> get</c>

00:07:35.909 --> 00:07:35.919 align:start position:0%
them together what are we going to get
 

00:07:35.919 --> 00:07:37.589 align:start position:0%
them together what are we going to get
when<00:07:36.160><c> we</c><00:07:36.240><c> do</c><00:07:36.400><c> that</c><00:07:36.639><c> we're</c><00:07:36.800><c> basically</c><00:07:37.360><c> going</c><00:07:37.520><c> to</c>

00:07:37.589 --> 00:07:37.599 align:start position:0%
when we do that we're basically going to
 

00:07:37.599 --> 00:07:39.430 align:start position:0%
when we do that we're basically going to
be<00:07:37.759><c> removing</c><00:07:38.240><c> this</c><00:07:38.560><c> right</c><00:07:38.880><c> this</c><00:07:39.199><c> we're</c><00:07:39.360><c> going</c>

00:07:39.430 --> 00:07:39.440 align:start position:0%
be removing this right this we're going
 

00:07:39.440 --> 00:07:42.390 align:start position:0%
be removing this right this we're going
to<00:07:39.520><c> get</c><00:07:39.840><c> n</c><00:07:40.080><c> minus</c><00:07:40.479><c> 1</c><00:07:40.880><c> itself</c><00:07:41.759><c> and</c><00:07:41.840><c> we're</c><00:07:42.080><c> also</c>

00:07:42.390 --> 00:07:42.400 align:start position:0%
to get n minus 1 itself and we're also
 

00:07:42.400 --> 00:07:45.749 align:start position:0%
to get n minus 1 itself and we're also
going<00:07:42.479><c> to</c><00:07:42.720><c> increment</c><00:07:43.280><c> our</c><00:07:43.520><c> result</c><00:07:44.240><c> by</c><00:07:44.560><c> 1</c><00:07:45.280><c> now</c>

00:07:45.749 --> 00:07:45.759 align:start position:0%
going to increment our result by 1 now
 

00:07:45.759 --> 00:07:47.830 align:start position:0%
going to increment our result by 1 now
regardless<00:07:46.400><c> of</c><00:07:46.560><c> what</c><00:07:46.800><c> the</c><00:07:46.960><c> output</c><00:07:47.360><c> happens</c><00:07:47.680><c> to</c>

00:07:47.830 --> 00:07:47.840 align:start position:0%
regardless of what the output happens to
 

00:07:47.840 --> 00:07:50.309 align:start position:0%
regardless of what the output happens to
be<00:07:48.000><c> okay</c><00:07:48.240><c> so</c><00:07:48.479><c> now</c><00:07:48.800><c> our</c><00:07:49.120><c> n</c><00:07:49.360><c> value</c><00:07:50.000><c> is</c><00:07:50.160><c> going</c><00:07:50.240><c> to</c>

00:07:50.309 --> 00:07:50.319 align:start position:0%
be okay so now our n value is going to
 

00:07:50.319 --> 00:07:54.390 align:start position:0%
be okay so now our n value is going to
be<00:07:50.560><c> set</c><00:07:51.039><c> to</c><00:07:51.360><c> this</c><00:07:52.080><c> okay</c><00:07:52.319><c> so</c><00:07:52.560><c> now</c><00:07:52.879><c> our</c><00:07:53.199><c> new</c><00:07:53.759><c> value</c>

00:07:54.390 --> 00:07:54.400 align:start position:0%
be set to this okay so now our new value
 

00:07:54.400 --> 00:07:55.909 align:start position:0%
be set to this okay so now our new value
is<00:07:54.960><c> going</c><00:07:55.120><c> to</c><00:07:55.199><c> be</c>

00:07:55.909 --> 00:07:55.919 align:start position:0%
is going to be
 

00:07:55.919 --> 00:07:59.670 align:start position:0%
is going to be
1<00:07:56.240><c> 0</c><00:07:56.479><c> 0</c><00:07:57.120><c> and</c><00:07:57.599><c> all</c><00:07:58.000><c> zeros</c><00:07:58.879><c> okay</c><00:07:59.280><c> now</c><00:07:59.440><c> we're</c><00:07:59.599><c> going</c>

00:07:59.670 --> 00:07:59.680 align:start position:0%
1 0 0 and all zeros okay now we're going
 

00:07:59.680 --> 00:08:03.189 align:start position:0%
1 0 0 and all zeros okay now we're going
to<00:07:59.840><c> take</c><00:08:00.479><c> this</c><00:08:00.879><c> number</c><00:08:01.520><c> and</c><00:08:01.680><c> subtract</c><00:08:02.879><c> one</c>

00:08:03.189 --> 00:08:03.199 align:start position:0%
to take this number and subtract one
 

00:08:03.199 --> 00:08:05.749 align:start position:0%
to take this number and subtract one
from<00:08:03.520><c> it</c><00:08:04.000><c> what</c><00:08:04.479><c> what</c><00:08:04.720><c> is</c><00:08:04.960><c> that</c><00:08:05.199><c> going</c><00:08:05.360><c> to</c><00:08:05.520><c> look</c>

00:08:05.749 --> 00:08:05.759 align:start position:0%
from it what what is that going to look
 

00:08:05.759 --> 00:08:08.710 align:start position:0%
from it what what is that going to look
like<00:08:06.000><c> in</c><00:08:06.160><c> binary</c><00:08:06.639><c> well</c><00:08:06.800><c> it's</c><00:08:06.960><c> going</c><00:08:07.039><c> to</c><00:08:07.120><c> be</c><00:08:07.440><c> 0</c><00:08:08.240><c> 1</c>

00:08:08.710 --> 00:08:08.720 align:start position:0%
like in binary well it's going to be 0 1
 

00:08:08.720 --> 00:08:14.150 align:start position:0%
like in binary well it's going to be 0 1
1<00:08:09.120><c> 1</c><00:08:09.520><c> 1</c><00:08:09.919><c> 1</c><00:08:10.400><c> 1</c><00:08:10.800><c> 1.</c><00:08:11.520><c> okay</c><00:08:12.319><c> and</c><00:08:12.800><c> now</c><00:08:13.280><c> we</c><00:08:13.440><c> are</c><00:08:13.599><c> gonna</c>

00:08:14.150 --> 00:08:14.160 align:start position:0%
1 1 1 1 1 1. okay and now we are gonna
 

00:08:14.160 --> 00:08:17.110 align:start position:0%
1 1 1 1 1 1. okay and now we are gonna
logic<00:08:14.560><c> and</c><00:08:14.960><c> these</c><00:08:15.360><c> two</c><00:08:15.599><c> together</c><00:08:16.319><c> what's</c><00:08:16.800><c> that</c>

00:08:17.110 --> 00:08:17.120 align:start position:0%
logic and these two together what's that
 

00:08:17.120 --> 00:08:19.270 align:start position:0%
logic and these two together what's that
gonna<00:08:17.360><c> look</c><00:08:17.680><c> like</c><00:08:18.080><c> well</c><00:08:18.319><c> we're</c><00:08:18.560><c> logic</c><00:08:18.960><c> handing</c>

00:08:19.270 --> 00:08:19.280 align:start position:0%
gonna look like well we're logic handing
 

00:08:19.280 --> 00:08:21.430 align:start position:0%
gonna look like well we're logic handing
every<00:08:19.520><c> bit</c><00:08:19.840><c> this</c><00:08:20.160><c> one</c><00:08:20.400><c> is</c><00:08:20.560><c> gonna</c><00:08:20.800><c> turn</c><00:08:21.120><c> into</c>

00:08:21.430 --> 00:08:21.440 align:start position:0%
every bit this one is gonna turn into
 

00:08:21.440 --> 00:08:24.390 align:start position:0%
every bit this one is gonna turn into
zero<00:08:21.840><c> now</c><00:08:22.240><c> and</c><00:08:22.400><c> the</c><00:08:22.639><c> rest</c><00:08:22.960><c> of</c><00:08:23.039><c> these</c><00:08:23.599><c> are</c><00:08:23.919><c> also</c>

00:08:24.390 --> 00:08:24.400 align:start position:0%
zero now and the rest of these are also
 

00:08:24.400 --> 00:08:26.869 align:start position:0%
zero now and the rest of these are also
gonna<00:08:24.639><c> be</c><00:08:24.879><c> zero</c><00:08:25.520><c> even</c><00:08:25.759><c> though</c><00:08:25.919><c> we</c><00:08:26.080><c> have</c><00:08:26.240><c> ones</c>

00:08:26.869 --> 00:08:26.879 align:start position:0%
gonna be zero even though we have ones
 

00:08:26.879 --> 00:08:29.029 align:start position:0%
gonna be zero even though we have ones
in<00:08:27.039><c> the</c><00:08:27.199><c> bottom</c><00:08:27.599><c> number</c><00:08:27.840><c> we</c><00:08:28.000><c> have</c><00:08:28.240><c> all</c><00:08:28.560><c> zeros</c>

00:08:29.029 --> 00:08:29.039 align:start position:0%
in the bottom number we have all zeros
 

00:08:29.039 --> 00:08:31.589 align:start position:0%
in the bottom number we have all zeros
in<00:08:29.199><c> the</c><00:08:29.280><c> number</c><00:08:29.680><c> above</c><00:08:30.319><c> so</c><00:08:30.879><c> now</c><00:08:31.360><c> we're</c>

00:08:31.589 --> 00:08:31.599 align:start position:0%
in the number above so now we're
 

00:08:31.599 --> 00:08:33.829 align:start position:0%
in the number above so now we're
actually<00:08:32.240><c> done</c><00:08:32.560><c> with</c><00:08:32.719><c> our</c><00:08:32.880><c> entire</c><00:08:33.440><c> loop</c><00:08:33.680><c> now</c>

00:08:33.829 --> 00:08:33.839 align:start position:0%
actually done with our entire loop now
 

00:08:33.839 --> 00:08:35.909 align:start position:0%
actually done with our entire loop now
we<00:08:34.000><c> have</c><00:08:34.240><c> all</c><00:08:34.479><c> zeros</c><00:08:35.039><c> we</c><00:08:35.279><c> incremented</c><00:08:35.839><c> our</c>

00:08:35.909 --> 00:08:35.919 align:start position:0%
we have all zeros we incremented our
 

00:08:35.919 --> 00:08:39.110 align:start position:0%
we have all zeros we incremented our
result<00:08:36.320><c> by</c><00:08:36.640><c> two</c><00:08:37.200><c> so</c><00:08:37.440><c> now</c><00:08:38.000><c> our</c><00:08:38.240><c> result</c><00:08:38.719><c> is</c><00:08:38.880><c> two</c>

00:08:39.110 --> 00:08:39.120 align:start position:0%
result by two so now our result is two
 

00:08:39.120 --> 00:08:40.870 align:start position:0%
result by two so now our result is two
and<00:08:39.279><c> then</c><00:08:39.440><c> we</c><00:08:39.519><c> return</c><00:08:40.000><c> right</c><00:08:40.320><c> which</c><00:08:40.560><c> makes</c>

00:08:40.870 --> 00:08:40.880 align:start position:0%
and then we return right which makes
 

00:08:40.880 --> 00:08:41.990 align:start position:0%
and then we return right which makes
sense<00:08:41.200><c> because</c><00:08:41.360><c> when</c><00:08:41.519><c> you</c><00:08:41.599><c> look</c><00:08:41.760><c> at</c><00:08:41.919><c> the</c>

00:08:41.990 --> 00:08:42.000 align:start position:0%
sense because when you look at the
 

00:08:42.000 --> 00:08:44.149 align:start position:0%
sense because when you look at the
original<00:08:42.479><c> number</c><00:08:42.719><c> we</c><00:08:42.959><c> started</c><00:08:43.279><c> with</c><00:08:43.599><c> it</c><00:08:43.839><c> yes</c>

00:08:44.149 --> 00:08:44.159 align:start position:0%
original number we started with it yes
 

00:08:44.159 --> 00:08:46.710 align:start position:0%
original number we started with it yes
it<00:08:44.320><c> did</c><00:08:44.560><c> have</c><00:08:44.800><c> two</c><00:08:45.200><c> ones</c><00:08:45.519><c> in</c><00:08:45.680><c> it</c><00:08:45.920><c> but</c><00:08:46.160><c> how</c><00:08:46.480><c> did</c>

00:08:46.710 --> 00:08:46.720 align:start position:0%
it did have two ones in it but how did
 

00:08:46.720 --> 00:08:49.110 align:start position:0%
it did have two ones in it but how did
this<00:08:47.040><c> algorithm</c><00:08:47.680><c> work</c><00:08:48.240><c> well</c><00:08:48.480><c> it's</c><00:08:48.640><c> actually</c>

00:08:49.110 --> 00:08:49.120 align:start position:0%
this algorithm work well it's actually
 

00:08:49.120 --> 00:08:51.269 align:start position:0%
this algorithm work well it's actually
really<00:08:49.600><c> simple</c><00:08:50.240><c> but</c><00:08:50.399><c> it's</c><00:08:50.560><c> definitely</c><00:08:51.040><c> not</c>

00:08:51.269 --> 00:08:51.279 align:start position:0%
really simple but it's definitely not
 

00:08:51.279 --> 00:08:53.509 align:start position:0%
really simple but it's definitely not
easy<00:08:51.600><c> to</c><00:08:51.680><c> come</c><00:08:51.920><c> up</c><00:08:52.160><c> with</c><00:08:52.720><c> what</c><00:08:52.959><c> we're</c><00:08:53.200><c> doing</c>

00:08:53.509 --> 00:08:53.519 align:start position:0%
easy to come up with what we're doing
 

00:08:53.519 --> 00:08:56.310 align:start position:0%
easy to come up with what we're doing
when<00:08:53.680><c> we're</c><00:08:53.920><c> subtracting</c><00:08:54.959><c> one</c><00:08:55.279><c> from</c><00:08:55.519><c> itself</c>

00:08:56.310 --> 00:08:56.320 align:start position:0%
when we're subtracting one from itself
 

00:08:56.320 --> 00:08:58.949 align:start position:0%
when we're subtracting one from itself
is<00:08:56.480><c> we're</c><00:08:56.720><c> basically</c><00:08:57.279><c> getting</c><00:08:57.760><c> rid</c><00:08:58.240><c> of</c><00:08:58.480><c> a</c><00:08:58.640><c> bit</c>

00:08:58.949 --> 00:08:58.959 align:start position:0%
is we're basically getting rid of a bit
 

00:08:58.959 --> 00:09:00.949 align:start position:0%
is we're basically getting rid of a bit
right<00:08:59.200><c> when</c><00:08:59.360><c> we</c><00:08:59.519><c> took</c><00:08:59.920><c> this</c><00:09:00.240><c> number</c><00:09:00.800><c> and</c>

00:09:00.949 --> 00:09:00.959 align:start position:0%
right when we took this number and
 

00:09:00.959 --> 00:09:03.509 align:start position:0%
right when we took this number and
subtracted<00:09:01.680><c> one</c><00:09:01.920><c> from</c><00:09:02.160><c> it</c><00:09:02.399><c> we</c><00:09:02.560><c> got</c><00:09:02.959><c> rid</c><00:09:03.200><c> of</c>

00:09:03.509 --> 00:09:03.519 align:start position:0%
subtracted one from it we got rid of
 

00:09:03.519 --> 00:09:06.150 align:start position:0%
subtracted one from it we got rid of
this<00:09:04.240><c> one</c><00:09:04.640><c> bit</c><00:09:04.959><c> right</c><00:09:05.279><c> and</c><00:09:05.519><c> remember</c><00:09:05.839><c> we're</c>

00:09:06.150 --> 00:09:06.160 align:start position:0%
this one bit right and remember we're
 

00:09:06.160 --> 00:09:08.470 align:start position:0%
this one bit right and remember we're
counting<00:09:06.640><c> one</c><00:09:06.880><c> bits</c><00:09:07.200><c> so</c><00:09:07.360><c> when</c><00:09:07.600><c> we</c><00:09:07.760><c> did</c><00:09:08.000><c> that</c><00:09:08.240><c> we</c>

00:09:08.470 --> 00:09:08.480 align:start position:0%
counting one bits so when we did that we
 

00:09:08.480 --> 00:09:11.430 align:start position:0%
counting one bits so when we did that we
increment<00:09:08.959><c> our</c><00:09:09.120><c> result</c><00:09:09.600><c> by</c><00:09:09.839><c> one</c><00:09:10.320><c> but</c><00:09:10.640><c> then</c><00:09:11.200><c> why</c>

00:09:11.430 --> 00:09:11.440 align:start position:0%
increment our result by one but then why
 

00:09:11.440 --> 00:09:15.509 align:start position:0%
increment our result by one but then why
did<00:09:11.600><c> we</c><00:09:12.000><c> logic</c><00:09:12.640><c> and</c><00:09:12.959><c> it</c><00:09:13.440><c> together</c><00:09:14.399><c> with</c><00:09:14.640><c> itself</c>

00:09:15.509 --> 00:09:15.519 align:start position:0%
did we logic and it together with itself
 

00:09:15.519 --> 00:09:17.750 align:start position:0%
did we logic and it together with itself
well<00:09:15.760><c> basically</c><00:09:16.560><c> since</c><00:09:17.040><c> the</c><00:09:17.200><c> rest</c><00:09:17.519><c> of</c><00:09:17.600><c> the</c>

00:09:17.750 --> 00:09:17.760 align:start position:0%
well basically since the rest of the
 

00:09:17.760 --> 00:09:19.990 align:start position:0%
well basically since the rest of the
numbers<00:09:18.080><c> stayed</c><00:09:18.399><c> the</c><00:09:18.560><c> same</c><00:09:19.279><c> and</c><00:09:19.600><c> you</c><00:09:19.760><c> know</c><00:09:19.839><c> we</c>

00:09:19.990 --> 00:09:20.000 align:start position:0%
numbers stayed the same and you know we
 

00:09:20.000 --> 00:09:22.150 align:start position:0%
numbers stayed the same and you know we
took<00:09:20.240><c> this</c><00:09:20.480><c> one</c><00:09:20.720><c> away</c><00:09:21.519><c> here</c><00:09:21.760><c> and</c><00:09:21.839><c> then</c><00:09:22.000><c> we</c>

00:09:22.150 --> 00:09:22.160 align:start position:0%
took this one away here and then we
 

00:09:22.160 --> 00:09:23.990 align:start position:0%
took this one away here and then we
logic<00:09:22.560><c> and</c><00:09:22.720><c> them</c><00:09:22.959><c> together</c><00:09:23.279><c> we're</c><00:09:23.440><c> basically</c>

00:09:23.990 --> 00:09:24.000 align:start position:0%
logic and them together we're basically
 

00:09:24.000 --> 00:09:26.550 align:start position:0%
logic and them together we're basically
removing<00:09:24.720><c> that</c><00:09:25.120><c> one</c><00:09:25.360><c> bit</c><00:09:25.600><c> so</c><00:09:25.839><c> then</c><00:09:26.160><c> when</c><00:09:26.320><c> we</c>

00:09:26.550 --> 00:09:26.560 align:start position:0%
removing that one bit so then when we
 

00:09:26.560 --> 00:09:28.389 align:start position:0%
removing that one bit so then when we
when<00:09:26.720><c> we</c><00:09:26.880><c> logic</c><00:09:27.200><c> ended</c><00:09:27.440><c> these</c><00:09:27.680><c> two</c><00:09:27.839><c> together</c>

00:09:28.389 --> 00:09:28.399 align:start position:0%
when we logic ended these two together
 

00:09:28.399 --> 00:09:30.550 align:start position:0%
when we logic ended these two together
you<00:09:28.560><c> can</c><00:09:28.640><c> see</c><00:09:28.800><c> that</c><00:09:29.040><c> the</c><00:09:29.200><c> one</c><00:09:29.440><c> bit</c><00:09:29.680><c> was</c><00:09:29.920><c> removed</c>

00:09:30.550 --> 00:09:30.560 align:start position:0%
you can see that the one bit was removed
 

00:09:30.560 --> 00:09:32.630 align:start position:0%
you can see that the one bit was removed
but<00:09:30.720><c> the</c><00:09:30.959><c> rest</c><00:09:31.200><c> of</c><00:09:31.279><c> the</c><00:09:31.440><c> number</c><00:09:32.080><c> stayed</c><00:09:32.480><c> the</c>

00:09:32.630 --> 00:09:32.640 align:start position:0%
but the rest of the number stayed the
 

00:09:32.640 --> 00:09:35.509 align:start position:0%
but the rest of the number stayed the
exact<00:09:33.040><c> same</c><00:09:33.360><c> on</c><00:09:33.519><c> the</c><00:09:33.760><c> left</c><00:09:34.240><c> okay</c><00:09:34.560><c> that</c><00:09:34.880><c> works</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
exact same on the left okay that works
 

00:09:35.519 --> 00:09:38.630 align:start position:0%
exact same on the left okay that works
but<00:09:35.760><c> what</c><00:09:36.000><c> about</c><00:09:36.480><c> this</c><00:09:37.120><c> number</c><00:09:37.760><c> right</c><00:09:38.160><c> then</c><00:09:38.480><c> we</c>

00:09:38.630 --> 00:09:38.640 align:start position:0%
but what about this number right then we
 

00:09:38.640 --> 00:09:40.150 align:start position:0%
but what about this number right then we
were<00:09:38.880><c> left</c><00:09:39.200><c> with</c><00:09:39.440><c> this</c><00:09:39.680><c> and</c><00:09:39.760><c> then</c><00:09:40.000><c> we</c>

00:09:40.150 --> 00:09:40.160 align:start position:0%
were left with this and then we
 

00:09:40.160 --> 00:09:42.550 align:start position:0%
were left with this and then we
subtracted<00:09:41.040><c> one</c><00:09:41.279><c> from</c><00:09:41.519><c> it</c><00:09:41.839><c> then</c><00:09:42.080><c> what</c><00:09:42.240><c> did</c><00:09:42.399><c> we</c>

00:09:42.550 --> 00:09:42.560 align:start position:0%
subtracted one from it then what did we
 

00:09:42.560 --> 00:09:44.949 align:start position:0%
subtracted one from it then what did we
do<00:09:42.720><c> well</c><00:09:43.440><c> again</c><00:09:43.839><c> when</c><00:09:44.000><c> we</c><00:09:44.160><c> subtracted</c><00:09:44.800><c> one</c>

00:09:44.949 --> 00:09:44.959 align:start position:0%
do well again when we subtracted one
 

00:09:44.959 --> 00:09:47.990 align:start position:0%
do well again when we subtracted one
from<00:09:45.279><c> it</c><00:09:45.519><c> we</c><00:09:45.760><c> basically</c><00:09:46.320><c> got</c><00:09:46.640><c> rid</c><00:09:47.120><c> of</c><00:09:47.440><c> the</c><00:09:47.680><c> the</c>

00:09:47.990 --> 00:09:48.000 align:start position:0%
from it we basically got rid of the the
 

00:09:48.000 --> 00:09:51.190 align:start position:0%
from it we basically got rid of the the
next<00:09:48.640><c> one</c><00:09:49.279><c> bit</c><00:09:49.680><c> right</c><00:09:50.160><c> you</c><00:09:50.240><c> can</c><00:09:50.480><c> see</c><00:09:50.640><c> that</c><00:09:51.040><c> when</c>

00:09:51.190 --> 00:09:51.200 align:start position:0%
next one bit right you can see that when
 

00:09:51.200 --> 00:09:52.710 align:start position:0%
next one bit right you can see that when
we<00:09:51.279><c> subtracted</c><00:09:51.839><c> one</c><00:09:52.000><c> from</c><00:09:52.160><c> it</c><00:09:52.320><c> this</c><00:09:52.480><c> is</c><00:09:52.560><c> what</c>

00:09:52.710 --> 00:09:52.720 align:start position:0%
we subtracted one from it this is what
 

00:09:52.720 --> 00:09:54.310 align:start position:0%
we subtracted one from it this is what
the<00:09:52.800><c> number</c><00:09:53.120><c> looked</c><00:09:53.279><c> like</c><00:09:53.519><c> we</c><00:09:53.680><c> got</c><00:09:53.920><c> rid</c><00:09:54.080><c> of</c>

00:09:54.310 --> 00:09:54.320 align:start position:0%
the number looked like we got rid of
 

00:09:54.320 --> 00:09:57.590 align:start position:0%
the number looked like we got rid of
this<00:09:54.720><c> one</c><00:09:54.959><c> bit</c><00:09:55.440><c> but</c><00:09:55.680><c> we</c><00:09:56.000><c> introduced</c><00:09:57.120><c> a</c><00:09:57.279><c> bunch</c>

00:09:57.590 --> 00:09:57.600 align:start position:0%
this one bit but we introduced a bunch
 

00:09:57.600 --> 00:10:01.190 align:start position:0%
this one bit but we introduced a bunch
of<00:09:57.920><c> other</c><00:09:58.320><c> one</c><00:09:58.640><c> bits</c><00:09:59.120><c> but</c><00:09:59.360><c> these</c><00:09:59.680><c> are</c><00:09:59.920><c> all</c><00:10:00.399><c> okay</c>

00:10:01.190 --> 00:10:01.200 align:start position:0%
of other one bits but these are all okay
 

00:10:01.200 --> 00:10:03.750 align:start position:0%
of other one bits but these are all okay
because<00:10:01.519><c> we</c><00:10:01.839><c> know</c><00:10:02.320><c> they're</c><00:10:02.560><c> gonna</c><00:10:02.720><c> be</c><00:10:03.279><c> and</c><00:10:03.519><c> any</c>

00:10:03.750 --> 00:10:03.760 align:start position:0%
because we know they're gonna be and any
 

00:10:03.760 --> 00:10:05.350 align:start position:0%
because we know they're gonna be and any
one<00:10:04.079><c> bits</c><00:10:04.320><c> that</c><00:10:04.399><c> we</c><00:10:04.560><c> introduce</c><00:10:05.040><c> are</c><00:10:05.200><c> going</c><00:10:05.279><c> to</c>

00:10:05.350 --> 00:10:05.360 align:start position:0%
one bits that we introduce are going to
 

00:10:05.360 --> 00:10:07.509 align:start position:0%
one bits that we introduce are going to
be<00:10:05.519><c> on</c><00:10:05.600><c> the</c><00:10:05.839><c> right</c><00:10:06.240><c> side</c><00:10:06.640><c> and</c><00:10:06.880><c> we</c><00:10:07.040><c> know</c><00:10:07.279><c> that</c><00:10:07.440><c> if</c>

00:10:07.509 --> 00:10:07.519 align:start position:0%
be on the right side and we know that if
 

00:10:07.519 --> 00:10:10.069 align:start position:0%
be on the right side and we know that if
we<00:10:07.680><c> just</c><00:10:07.920><c> deleted</c><00:10:08.480><c> this</c><00:10:08.800><c> one</c><00:10:09.279><c> it</c><00:10:09.360><c> was</c><00:10:09.600><c> the</c><00:10:09.920><c> it</c>

00:10:10.069 --> 00:10:10.079 align:start position:0%
we just deleted this one it was the it
 

00:10:10.079 --> 00:10:12.470 align:start position:0%
we just deleted this one it was the it
was<00:10:10.240><c> the</c><00:10:10.480><c> right</c><00:10:10.800><c> most</c><00:10:11.440><c> one</c><00:10:11.680><c> bit</c><00:10:11.920><c> that</c><00:10:12.079><c> we</c><00:10:12.240><c> had</c>

00:10:12.470 --> 00:10:12.480 align:start position:0%
was the right most one bit that we had
 

00:10:12.480 --> 00:10:14.310 align:start position:0%
was the right most one bit that we had
so<00:10:12.720><c> any</c><00:10:13.040><c> ones</c><00:10:13.279><c> that</c><00:10:13.440><c> are</c><00:10:13.600><c> introduced</c><00:10:14.000><c> to</c><00:10:14.160><c> the</c>

00:10:14.310 --> 00:10:14.320 align:start position:0%
so any ones that are introduced to the
 

00:10:14.320 --> 00:10:18.150 align:start position:0%
so any ones that are introduced to the
right<00:10:14.560><c> side</c><00:10:15.120><c> won't</c><00:10:15.600><c> matter</c><00:10:16.399><c> in</c><00:10:17.040><c> this</c><00:10:17.360><c> number</c>

00:10:18.150 --> 00:10:18.160 align:start position:0%
right side won't matter in this number
 

00:10:18.160 --> 00:10:20.710 align:start position:0%
right side won't matter in this number
this<00:10:18.399><c> is</c><00:10:18.560><c> n</c><00:10:18.720><c> minus</c><00:10:19.040><c> 1</c><00:10:19.279><c> by</c><00:10:19.440><c> the</c><00:10:19.519><c> way</c><00:10:20.160><c> any</c><00:10:20.399><c> ones</c>

00:10:20.710 --> 00:10:20.720 align:start position:0%
this is n minus 1 by the way any ones
 

00:10:20.720 --> 00:10:22.870 align:start position:0%
this is n minus 1 by the way any ones
here<00:10:21.200><c> won't</c><00:10:21.519><c> matter</c><00:10:21.760><c> because</c><00:10:22.079><c> remember</c><00:10:22.640><c> every</c>

00:10:22.870 --> 00:10:22.880 align:start position:0%
here won't matter because remember every
 

00:10:22.880 --> 00:10:25.750 align:start position:0%
here won't matter because remember every
time<00:10:23.120><c> we</c><00:10:23.279><c> do</c><00:10:23.519><c> that</c><00:10:23.680><c> we're</c><00:10:24.240><c> logic</c><00:10:24.800><c> ending</c><00:10:25.519><c> them</c>

00:10:25.750 --> 00:10:25.760 align:start position:0%
time we do that we're logic ending them
 

00:10:25.760 --> 00:10:28.550 align:start position:0%
time we do that we're logic ending them
together<00:10:26.079><c> we're</c><00:10:26.320><c> logic</c><00:10:26.880><c> ending</c><00:10:27.600><c> n</c><00:10:28.000><c> with</c><00:10:28.320><c> n</c>

00:10:28.550 --> 00:10:28.560 align:start position:0%
together we're logic ending n with n
 

00:10:28.560 --> 00:10:31.110 align:start position:0%
together we're logic ending n with n
minus<00:10:28.880><c> 1</c><00:10:29.279><c> so</c><00:10:29.519><c> these</c><00:10:29.839><c> are</c><00:10:30.079><c> all</c><00:10:30.320><c> gonna</c><00:10:30.640><c> cancel</c>

00:10:31.110 --> 00:10:31.120 align:start position:0%
minus 1 so these are all gonna cancel
 

00:10:31.120 --> 00:10:33.430 align:start position:0%
minus 1 so these are all gonna cancel
out<00:10:31.600><c> and</c><00:10:32.079><c> this</c><00:10:32.320><c> is</c><00:10:32.480><c> going</c><00:10:32.560><c> to</c><00:10:32.720><c> cancel</c><00:10:33.120><c> out</c><00:10:33.279><c> as</c>

00:10:33.430 --> 00:10:33.440 align:start position:0%
out and this is going to cancel out as
 

00:10:33.440 --> 00:10:35.590 align:start position:0%
out and this is going to cancel out as
well<00:10:33.760><c> well</c><00:10:34.079><c> the</c><00:10:34.320><c> position</c><00:10:34.800><c> where</c><00:10:35.040><c> we</c><00:10:35.360><c> you</c><00:10:35.440><c> know</c>

00:10:35.590 --> 00:10:35.600 align:start position:0%
well well the position where we you know
 

00:10:35.600 --> 00:10:37.750 align:start position:0%
well well the position where we you know
remove<00:10:36.000><c> the</c><00:10:36.160><c> one</c><00:10:36.399><c> bit</c><00:10:36.959><c> so</c><00:10:37.200><c> basically</c><00:10:37.600><c> what</c>

00:10:37.750 --> 00:10:37.760 align:start position:0%
remove the one bit so basically what
 

00:10:37.760 --> 00:10:40.310 align:start position:0%
remove the one bit so basically what
we're<00:10:37.920><c> doing</c><00:10:38.240><c> here</c><00:10:38.800><c> is</c><00:10:39.200><c> we're</c><00:10:39.440><c> skipping</c><00:10:40.079><c> all</c>

00:10:40.310 --> 00:10:40.320 align:start position:0%
we're doing here is we're skipping all
 

00:10:40.320 --> 00:10:42.470 align:start position:0%
we're doing here is we're skipping all
the<00:10:40.560><c> zeros</c><00:10:41.040><c> in</c><00:10:41.200><c> between</c><00:10:41.600><c> we're</c><00:10:41.839><c> basically</c>

00:10:42.470 --> 00:10:42.480 align:start position:0%
the zeros in between we're basically
 

00:10:42.480 --> 00:10:45.190 align:start position:0%
the zeros in between we're basically
allowing<00:10:42.959><c> ourself</c><00:10:43.440><c> to</c><00:10:43.600><c> run</c><00:10:43.839><c> the</c><00:10:44.079><c> loop</c><00:10:44.560><c> as</c><00:10:44.800><c> many</c>

00:10:45.190 --> 00:10:45.200 align:start position:0%
allowing ourself to run the loop as many
 

00:10:45.200 --> 00:10:46.389 align:start position:0%
allowing ourself to run the loop as many
times<00:10:45.680><c> as</c>

00:10:46.389 --> 00:10:46.399 align:start position:0%
times as
 

00:10:46.399 --> 00:10:49.110 align:start position:0%
times as
as<00:10:46.560><c> basically</c><00:10:47.040><c> as</c><00:10:47.200><c> many</c><00:10:47.519><c> one</c><00:10:47.839><c> bits</c><00:10:48.240><c> exist</c><00:10:48.959><c> in</c>

00:10:49.110 --> 00:10:49.120 align:start position:0%
as basically as many one bits exist in
 

00:10:49.120 --> 00:10:51.350 align:start position:0%
as basically as many one bits exist in
the<00:10:49.440><c> input</c><00:10:49.920><c> integer</c><00:10:50.480><c> it's</c><00:10:50.640><c> kind</c><00:10:50.800><c> of</c><00:10:50.959><c> a</c><00:10:51.040><c> really</c>

00:10:51.350 --> 00:10:51.360 align:start position:0%
the input integer it's kind of a really
 

00:10:51.360 --> 00:10:53.829 align:start position:0%
the input integer it's kind of a really
weird<00:10:51.760><c> trick</c><00:10:52.160><c> but</c><00:10:52.320><c> it</c><00:10:52.480><c> definitely</c><00:10:53.040><c> works</c><00:10:53.600><c> and</c>

00:10:53.829 --> 00:10:53.839 align:start position:0%
weird trick but it definitely works and
 

00:10:53.839 --> 00:10:56.389 align:start position:0%
weird trick but it definitely works and
it<00:10:54.079><c> makes</c><00:10:54.320><c> sense</c><00:10:54.800><c> why</c><00:10:55.040><c> it</c><00:10:55.200><c> works</c><00:10:55.920><c> now</c><00:10:56.160><c> we</c><00:10:56.320><c> can</c>

00:10:56.389 --> 00:10:56.399 align:start position:0%
it makes sense why it works now we can
 

00:10:56.399 --> 00:10:58.949 align:start position:0%
it makes sense why it works now we can
code<00:10:56.720><c> it</c><00:10:56.880><c> up</c><00:10:57.040><c> and</c><00:10:57.120><c> it's</c><00:10:57.279><c> pretty</c><00:10:57.600><c> simple</c><00:10:58.480><c> so</c><00:10:58.800><c> you</c>

00:10:58.949 --> 00:10:58.959 align:start position:0%
code it up and it's pretty simple so you
 

00:10:58.959 --> 00:11:00.230 align:start position:0%
code it up and it's pretty simple so you
can<00:10:59.040><c> see</c><00:10:59.200><c> that</c><00:10:59.279><c> this</c><00:10:59.440><c> was</c><00:10:59.680><c> our</c><00:10:59.839><c> original</c>

00:11:00.230 --> 00:11:00.240 align:start position:0%
can see that this was our original
 

00:11:00.240 --> 00:11:02.470 align:start position:0%
can see that this was our original
solution<00:11:00.800><c> and</c><00:11:00.880><c> we</c><00:11:01.200><c> only</c><00:11:01.440><c> have</c><00:11:01.600><c> to</c><00:11:01.760><c> modify</c><00:11:02.160><c> this</c>

00:11:02.470 --> 00:11:02.480 align:start position:0%
solution and we only have to modify this
 

00:11:02.480 --> 00:11:05.030 align:start position:0%
solution and we only have to modify this
a<00:11:02.560><c> little</c><00:11:02.800><c> bit</c><00:11:03.120><c> so</c><00:11:03.839><c> what</c><00:11:04.079><c> we're</c><00:11:04.240><c> going</c><00:11:04.320><c> to</c><00:11:04.480><c> do</c>

00:11:05.030 --> 00:11:05.040 align:start position:0%
a little bit so what we're going to do
 

00:11:05.040 --> 00:11:07.269 align:start position:0%
a little bit so what we're going to do
is<00:11:05.600><c> get</c><00:11:05.760><c> rid</c><00:11:06.000><c> of</c><00:11:06.079><c> this</c><00:11:06.399><c> line</c><00:11:06.640><c> and</c><00:11:06.800><c> instead</c><00:11:07.120><c> of</c>

00:11:07.269 --> 00:11:07.279 align:start position:0%
is get rid of this line and instead of
 

00:11:07.279 --> 00:11:09.670 align:start position:0%
is get rid of this line and instead of
incrementing<00:11:07.760><c> our</c><00:11:07.920><c> result</c><00:11:08.320><c> by</c><00:11:08.800><c> n</c><00:11:08.959><c> mod</c><00:11:09.279><c> 2</c><00:11:09.519><c> we're</c>

00:11:09.670 --> 00:11:09.680 align:start position:0%
incrementing our result by n mod 2 we're
 

00:11:09.680 --> 00:11:10.870 align:start position:0%
incrementing our result by n mod 2 we're
actually<00:11:09.920><c> going</c><00:11:10.000><c> to</c><00:11:10.079><c> increment</c><00:11:10.480><c> our</c><00:11:10.640><c> result</c>

00:11:10.870 --> 00:11:10.880 align:start position:0%
actually going to increment our result
 

00:11:10.880 --> 00:11:13.829 align:start position:0%
actually going to increment our result
by<00:11:11.120><c> one</c><00:11:11.600><c> each</c><00:11:11.920><c> time</c><00:11:12.560><c> because</c><00:11:13.040><c> each</c><00:11:13.279><c> time</c><00:11:13.519><c> we</c>

00:11:13.829 --> 00:11:13.839 align:start position:0%
by one each time because each time we
 

00:11:13.839 --> 00:11:16.630 align:start position:0%
by one each time because each time we
increment<00:11:14.320><c> this</c><00:11:14.959><c> we</c><00:11:15.279><c> are</c><00:11:15.600><c> going</c><00:11:15.839><c> to</c><00:11:16.079><c> be</c>

00:11:16.630 --> 00:11:16.640 align:start position:0%
increment this we are going to be
 

00:11:16.640 --> 00:11:19.350 align:start position:0%
increment this we are going to be
setting<00:11:17.040><c> n</c><00:11:17.440><c> equal</c><00:11:17.839><c> to</c><00:11:18.640><c> n</c>

00:11:19.350 --> 00:11:19.360 align:start position:0%
setting n equal to n
 

00:11:19.360 --> 00:11:21.509 align:start position:0%
setting n equal to n
anded<00:11:19.839><c> with</c><00:11:20.160><c> n</c><00:11:20.480><c> minus</c><00:11:20.880><c> one</c><00:11:21.040><c> so</c><00:11:21.200><c> we're</c><00:11:21.360><c> going</c><00:11:21.440><c> to</c>

00:11:21.509 --> 00:11:21.519 align:start position:0%
anded with n minus one so we're going to
 

00:11:21.519 --> 00:11:23.509 align:start position:0%
anded with n minus one so we're going to
be<00:11:21.680><c> counting</c><00:11:22.079><c> the</c><00:11:22.240><c> number</c><00:11:22.560><c> of</c><00:11:22.800><c> one</c><00:11:23.120><c> bits</c>

00:11:23.509 --> 00:11:23.519 align:start position:0%
be counting the number of one bits
 

00:11:23.519 --> 00:11:25.990 align:start position:0%
be counting the number of one bits
exactly<00:11:24.560><c> and</c><00:11:24.880><c> this</c><00:11:25.120><c> line</c><00:11:25.360><c> can</c><00:11:25.519><c> actually</c><00:11:25.839><c> be</c>

00:11:25.990 --> 00:11:26.000 align:start position:0%
exactly and this line can actually be
 

00:11:26.000 --> 00:11:27.509 align:start position:0%
exactly and this line can actually be
slightly<00:11:26.399><c> shortened</c>

00:11:27.509 --> 00:11:27.519 align:start position:0%
slightly shortened
 

00:11:27.519 --> 00:11:31.750 align:start position:0%
slightly shortened
by<00:11:28.079><c> doing</c><00:11:28.640><c> this</c><00:11:29.519><c> in</c><00:11:29.680><c> most</c><00:11:30.000><c> languages</c><00:11:30.880><c> and</c><00:11:31.519><c> yeah</c>

00:11:31.750 --> 00:11:31.760 align:start position:0%
by doing this in most languages and yeah
 

00:11:31.760 --> 00:11:33.590 align:start position:0%
by doing this in most languages and yeah
so<00:11:31.920><c> this</c><00:11:32.079><c> is</c><00:11:32.240><c> about</c><00:11:32.560><c> as</c><00:11:32.800><c> efficient</c><00:11:33.200><c> as</c><00:11:33.279><c> we</c><00:11:33.440><c> can</c>

00:11:33.590 --> 00:11:33.600 align:start position:0%
so this is about as efficient as we can
 

00:11:33.600 --> 00:11:36.310 align:start position:0%
so this is about as efficient as we can
get<00:11:34.320><c> we</c><00:11:34.560><c> won't</c><00:11:34.800><c> run</c><00:11:35.120><c> any</c><00:11:35.360><c> extra</c><00:11:35.680><c> iterations</c><00:11:36.240><c> of</c>

00:11:36.310 --> 00:11:36.320 align:start position:0%
get we won't run any extra iterations of
 

00:11:36.320 --> 00:11:37.990 align:start position:0%
get we won't run any extra iterations of
this<00:11:36.560><c> loop</c><00:11:36.720><c> when</c><00:11:36.880><c> we</c><00:11:37.040><c> have</c><00:11:37.200><c> zero</c><00:11:37.519><c> so</c><00:11:37.680><c> let's</c><00:11:37.839><c> run</c>

00:11:37.990 --> 00:11:38.000 align:start position:0%
this loop when we have zero so let's run
 

00:11:38.000 --> 00:11:39.990 align:start position:0%
this loop when we have zero so let's run
it<00:11:38.160><c> to</c><00:11:38.240><c> make</c><00:11:38.399><c> sure</c><00:11:38.560><c> that</c><00:11:38.720><c> it</c><00:11:38.880><c> works</c><00:11:39.600><c> and</c><00:11:39.839><c> you</c>

00:11:39.990 --> 00:11:40.000 align:start position:0%
it to make sure that it works and you
 

00:11:40.000 --> 00:11:41.590 align:start position:0%
it to make sure that it works and you
can<00:11:40.079><c> see</c><00:11:40.240><c> yes</c><00:11:40.560><c> on</c><00:11:40.640><c> the</c><00:11:40.720><c> left</c><00:11:40.959><c> side</c><00:11:41.120><c> it</c><00:11:41.279><c> works</c>

00:11:41.590 --> 00:11:41.600 align:start position:0%
can see yes on the left side it works
 

00:11:41.600 --> 00:11:43.350 align:start position:0%
can see yes on the left side it works
yeah<00:11:41.760><c> the</c><00:11:41.920><c> run</c><00:11:42.160><c> time</c><00:11:42.399><c> is</c><00:11:42.480><c> about</c><00:11:42.800><c> the</c><00:11:42.959><c> same</c>

00:11:43.350 --> 00:11:43.360 align:start position:0%
yeah the run time is about the same
 

00:11:43.360 --> 00:11:45.829 align:start position:0%
yeah the run time is about the same
because<00:11:43.839><c> it's</c><00:11:44.079><c> still</c><00:11:44.240><c> the</c><00:11:44.399><c> same</c><00:11:44.720><c> exact</c><00:11:45.279><c> big</c><00:11:45.519><c> o</c>

00:11:45.829 --> 00:11:45.839 align:start position:0%
because it's still the same exact big o
 

00:11:45.839 --> 00:11:47.829 align:start position:0%
because it's still the same exact big o
time<00:11:46.079><c> complexity</c><00:11:46.959><c> but</c><00:11:47.120><c> i</c><00:11:47.200><c> hope</c><00:11:47.360><c> that</c><00:11:47.519><c> this</c><00:11:47.680><c> was</c>

00:11:47.829 --> 00:11:47.839 align:start position:0%
time complexity but i hope that this was
 

00:11:47.839 --> 00:11:49.670 align:start position:0%
time complexity but i hope that this was
helpful<00:11:48.399><c> if</c><00:11:48.560><c> it</c><00:11:48.720><c> was</c><00:11:49.040><c> please</c><00:11:49.360><c> like</c><00:11:49.600><c> and</c>

00:11:49.670 --> 00:11:49.680 align:start position:0%
helpful if it was please like and
 

00:11:49.680 --> 00:11:51.670 align:start position:0%
helpful if it was please like and
subscribe<00:11:50.240><c> it</c><00:11:50.399><c> really</c><00:11:50.639><c> supports</c><00:11:51.120><c> the</c><00:11:51.279><c> channel</c>

00:11:51.670 --> 00:11:51.680 align:start position:0%
subscribe it really supports the channel
 

00:11:51.680 --> 00:11:53.590 align:start position:0%
subscribe it really supports the channel
a<00:11:51.839><c> lot</c><00:11:52.079><c> consider</c><00:11:52.560><c> checking</c><00:11:52.880><c> out</c><00:11:52.959><c> my</c><00:11:53.120><c> patreon</c>

00:11:53.590 --> 00:11:53.600 align:start position:0%
a lot consider checking out my patreon
 

00:11:53.600 --> 00:11:54.629 align:start position:0%
a lot consider checking out my patreon
where<00:11:53.760><c> you</c><00:11:53.839><c> can</c><00:11:53.920><c> further</c><00:11:54.160><c> support</c><00:11:54.480><c> the</c>

00:11:54.629 --> 00:11:54.639 align:start position:0%
where you can further support the
 

00:11:54.639 --> 00:11:56.230 align:start position:0%
where you can further support the
channel<00:11:54.959><c> and</c><00:11:55.200><c> hopefully</c><00:11:55.680><c> i'll</c><00:11:55.920><c> see</c><00:11:56.079><c> you</c>

00:11:56.230 --> 00:11:56.240 align:start position:0%
channel and hopefully i'll see you
 

00:11:56.240 --> 00:11:59.920 align:start position:0%
channel and hopefully i'll see you
pretty<00:11:56.480><c> soon</c><00:11:56.880><c> thanks</c><00:11:57.120><c> for</c><00:11:57.279><c> watching</c>

