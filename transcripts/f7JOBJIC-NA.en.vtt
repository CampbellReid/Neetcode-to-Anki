WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.829 align:start position:0%
 
hey<00:00:00.240><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.199><c> back</c><00:00:01.439><c> and</c><00:00:01.599><c> let's</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.839 --> 00:00:03.750 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.000><c> some</c><00:00:02.240><c> more</c><00:00:02.480><c> neat</c><00:00:02.720><c> code</c><00:00:02.960><c> today</c><00:00:03.199><c> so</c><00:00:03.439><c> today</c>

00:00:03.750 --> 00:00:03.760 align:start position:0%
write some more neat code today so today
 

00:00:03.760 --> 00:00:04.470 align:start position:0%
write some more neat code today so today
let's<00:00:04.000><c> solve</c>

00:00:04.470 --> 00:00:04.480 align:start position:0%
let's solve
 

00:00:04.480 --> 00:00:07.670 align:start position:0%
let's solve
minimum<00:00:05.040><c> cost</c><00:00:05.440><c> to</c><00:00:05.600><c> connect</c><00:00:06.399><c> all</c><00:00:06.720><c> points</c><00:00:07.440><c> and</c>

00:00:07.670 --> 00:00:07.680 align:start position:0%
minimum cost to connect all points and
 

00:00:07.680 --> 00:00:10.310 align:start position:0%
minimum cost to connect all points and
surprise<00:00:08.320><c> this</c><00:00:08.559><c> actually</c><00:00:09.040><c> is</c><00:00:09.280><c> not</c><00:00:09.599><c> a</c><00:00:09.840><c> problem</c>

00:00:10.310 --> 00:00:10.320 align:start position:0%
surprise this actually is not a problem
 

00:00:10.320 --> 00:00:12.390 align:start position:0%
surprise this actually is not a problem
from<00:00:10.480><c> the</c><00:00:10.639><c> blind</c><00:00:11.040><c> 75</c><00:00:11.679><c> list</c><00:00:11.920><c> that</c><00:00:12.080><c> we've</c><00:00:12.240><c> been</c>

00:00:12.390 --> 00:00:12.400 align:start position:0%
from the blind 75 list that we've been
 

00:00:12.400 --> 00:00:13.749 align:start position:0%
from the blind 75 list that we've been
working<00:00:12.719><c> on</c><00:00:12.960><c> recently</c>

00:00:13.749 --> 00:00:13.759 align:start position:0%
working on recently
 

00:00:13.759 --> 00:00:15.589 align:start position:0%
working on recently
and<00:00:13.840><c> the</c><00:00:14.000><c> reason</c><00:00:14.320><c> i'm</c><00:00:14.480><c> solving</c><00:00:14.799><c> this</c><00:00:15.040><c> problem</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
and the reason i'm solving this problem
 

00:00:15.599 --> 00:00:17.430 align:start position:0%
and the reason i'm solving this problem
is<00:00:15.759><c> because</c><00:00:16.160><c> honestly</c><00:00:16.720><c> it</c><00:00:16.880><c> actually</c>

00:00:17.430 --> 00:00:17.440 align:start position:0%
is because honestly it actually
 

00:00:17.440 --> 00:00:19.109 align:start position:0%
is because honestly it actually
should<00:00:17.680><c> be</c><00:00:17.920><c> a</c><00:00:18.000><c> part</c><00:00:18.240><c> of</c><00:00:18.320><c> that</c><00:00:18.480><c> list</c><00:00:18.720><c> like</c><00:00:18.880><c> this</c>

00:00:19.109 --> 00:00:19.119 align:start position:0%
should be a part of that list like this
 

00:00:19.119 --> 00:00:20.790 align:start position:0%
should be a part of that list like this
is<00:00:19.199><c> one</c><00:00:19.359><c> of</c><00:00:19.439><c> those</c><00:00:19.760><c> problems</c><00:00:20.160><c> i</c><00:00:20.240><c> think</c><00:00:20.400><c> that's</c>

00:00:20.790 --> 00:00:20.800 align:start position:0%
is one of those problems i think that's
 

00:00:20.800 --> 00:00:23.509 align:start position:0%
is one of those problems i think that's
missing<00:00:21.199><c> from</c><00:00:21.359><c> the</c><00:00:21.439><c> blind</c><00:00:21.760><c> 75</c><00:00:22.400><c> list</c><00:00:23.119><c> reason</c>

00:00:23.509 --> 00:00:23.519 align:start position:0%
missing from the blind 75 list reason
 

00:00:23.519 --> 00:00:24.150 align:start position:0%
missing from the blind 75 list reason
being

00:00:24.150 --> 00:00:24.160 align:start position:0%
being
 

00:00:24.160 --> 00:00:27.670 align:start position:0%
being
is<00:00:24.400><c> this</c><00:00:24.720><c> is</c><00:00:24.880><c> a</c><00:00:25.039><c> problem</c><00:00:25.519><c> related</c><00:00:26.400><c> to</c><00:00:26.800><c> minimum</c>

00:00:27.670 --> 00:00:27.680 align:start position:0%
is this is a problem related to minimum
 

00:00:27.680 --> 00:00:30.870 align:start position:0%
is this is a problem related to minimum
spanning<00:00:28.640><c> trees</c><00:00:29.199><c> a</c><00:00:29.359><c> concept</c><00:00:30.320><c> that</c><00:00:30.560><c> a</c><00:00:30.640><c> lot</c><00:00:30.800><c> of</c>

00:00:30.870 --> 00:00:30.880 align:start position:0%
spanning trees a concept that a lot of
 

00:00:30.880 --> 00:00:32.790 align:start position:0%
spanning trees a concept that a lot of
people<00:00:31.199><c> skip</c><00:00:31.599><c> over</c><00:00:31.840><c> i</c><00:00:32.000><c> think</c><00:00:32.239><c> when</c><00:00:32.399><c> they</c>

00:00:32.790 --> 00:00:32.800 align:start position:0%
people skip over i think when they
 

00:00:32.800 --> 00:00:35.190 align:start position:0%
people skip over i think when they
grind<00:00:33.200><c> leak</c><00:00:33.520><c> code</c><00:00:34.320><c> so</c><00:00:34.559><c> this</c><00:00:34.800><c> is</c><00:00:34.880><c> what</c><00:00:35.040><c> we're</c>

00:00:35.190 --> 00:00:35.200 align:start position:0%
grind leak code so this is what we're
 

00:00:35.200 --> 00:00:36.950 align:start position:0%
grind leak code so this is what we're
going<00:00:35.280><c> to</c><00:00:35.360><c> be</c><00:00:35.680><c> doing</c><00:00:36.000><c> today</c><00:00:36.480><c> and</c><00:00:36.640><c> you</c><00:00:36.719><c> might</c>

00:00:36.950 --> 00:00:36.960 align:start position:0%
going to be doing today and you might
 

00:00:36.960 --> 00:00:39.110 align:start position:0%
going to be doing today and you might
have<00:00:37.040><c> heard</c><00:00:37.360><c> of</c><00:00:37.520><c> an</c><00:00:37.680><c> algorithm</c><00:00:38.320><c> for</c><00:00:38.640><c> minimum</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
have heard of an algorithm for minimum
 

00:00:39.120 --> 00:00:40.869 align:start position:0%
have heard of an algorithm for minimum
spanning<00:00:39.520><c> trees</c><00:00:39.760><c> there's</c><00:00:40.000><c> actually</c><00:00:40.239><c> a</c><00:00:40.399><c> couple</c>

00:00:40.869 --> 00:00:40.879 align:start position:0%
spanning trees there's actually a couple
 

00:00:40.879 --> 00:00:43.430 align:start position:0%
spanning trees there's actually a couple
prims<00:00:41.520><c> algorithm</c><00:00:42.320><c> and</c><00:00:42.399><c> there's</c><00:00:42.640><c> also</c><00:00:43.040><c> crust</c>

00:00:43.430 --> 00:00:43.440 align:start position:0%
prims algorithm and there's also crust
 

00:00:43.440 --> 00:00:44.069 align:start position:0%
prims algorithm and there's also crust
goals

00:00:44.069 --> 00:00:44.079 align:start position:0%
goals
 

00:00:44.079 --> 00:00:45.750 align:start position:0%
goals
we're<00:00:44.239><c> going</c><00:00:44.320><c> to</c><00:00:44.399><c> be</c><00:00:44.640><c> doing</c><00:00:44.960><c> prims</c><00:00:45.360><c> algorithm</c>

00:00:45.750 --> 00:00:45.760 align:start position:0%
we're going to be doing prims algorithm
 

00:00:45.760 --> 00:00:47.110 align:start position:0%
we're going to be doing prims algorithm
because<00:00:45.920><c> i</c><00:00:46.000><c> think</c><00:00:46.160><c> it's</c><00:00:46.320><c> easier</c><00:00:46.640><c> to</c><00:00:46.719><c> implement</c>

00:00:47.110 --> 00:00:47.120 align:start position:0%
because i think it's easier to implement
 

00:00:47.120 --> 00:00:48.790 align:start position:0%
because i think it's easier to implement
and<00:00:47.280><c> it's</c><00:00:47.440><c> actually</c><00:00:47.760><c> more</c><00:00:47.920><c> efficient</c><00:00:48.399><c> most</c><00:00:48.719><c> of</c>

00:00:48.790 --> 00:00:48.800 align:start position:0%
and it's actually more efficient most of
 

00:00:48.800 --> 00:00:49.510 align:start position:0%
and it's actually more efficient most of
the<00:00:48.960><c> time</c>

00:00:49.510 --> 00:00:49.520 align:start position:0%
the time
 

00:00:49.520 --> 00:00:51.430 align:start position:0%
the time
and<00:00:49.760><c> you</c><00:00:50.079><c> might</c><00:00:50.320><c> remember</c><00:00:50.719><c> this</c><00:00:50.960><c> algorithm</c>

00:00:51.430 --> 00:00:51.440 align:start position:0%
and you might remember this algorithm
 

00:00:51.440 --> 00:00:53.029 align:start position:0%
and you might remember this algorithm
from<00:00:51.680><c> college</c><00:00:52.239><c> most</c>

00:00:53.029 --> 00:00:53.039 align:start position:0%
from college most
 

00:00:53.039 --> 00:00:54.950 align:start position:0%
from college most
most<00:00:53.440><c> computer</c><00:00:53.840><c> science</c><00:00:54.160><c> curriculums</c><00:00:54.719><c> do</c>

00:00:54.950 --> 00:00:54.960 align:start position:0%
most computer science curriculums do
 

00:00:54.960 --> 00:00:56.389 align:start position:0%
most computer science curriculums do
teach<00:00:55.280><c> it</c><00:00:55.360><c> but</c><00:00:55.520><c> if</c><00:00:55.600><c> you're</c><00:00:55.760><c> anything</c><00:00:56.079><c> like</c><00:00:56.239><c> me</c>

00:00:56.389 --> 00:00:56.399 align:start position:0%
teach it but if you're anything like me
 

00:00:56.399 --> 00:00:57.990 align:start position:0%
teach it but if you're anything like me
you<00:00:56.559><c> probably</c><00:00:56.879><c> forgot</c><00:00:57.280><c> it</c><00:00:57.440><c> the</c><00:00:57.600><c> instant</c>

00:00:57.990 --> 00:00:58.000 align:start position:0%
you probably forgot it the instant
 

00:00:58.000 --> 00:00:59.910 align:start position:0%
you probably forgot it the instant
that<00:00:58.239><c> you</c><00:00:58.719><c> you</c><00:00:58.879><c> know</c><00:00:59.039><c> finished</c><00:00:59.359><c> the</c><00:00:59.520><c> class</c>

00:00:59.910 --> 00:00:59.920 align:start position:0%
that you you know finished the class
 

00:00:59.920 --> 00:01:01.270 align:start position:0%
that you you know finished the class
that<00:01:00.079><c> you</c><00:01:00.320><c> learned</c><00:01:00.559><c> it</c><00:01:00.719><c> in</c>

00:01:01.270 --> 00:01:01.280 align:start position:0%
that you learned it in
 

00:01:01.280 --> 00:01:03.029 align:start position:0%
that you learned it in
but<00:01:01.440><c> that's</c><00:01:01.760><c> okay</c><00:01:02.320><c> and</c><00:01:02.399><c> this</c><00:01:02.640><c> algorithm</c>

00:01:03.029 --> 00:01:03.039 align:start position:0%
but that's okay and this algorithm
 

00:01:03.039 --> 00:01:04.630 align:start position:0%
but that's okay and this algorithm
prim's<00:01:03.440><c> algorithm</c><00:01:03.840><c> is</c><00:01:04.000><c> actually</c><00:01:04.320><c> not</c><00:01:04.559><c> as</c>

00:01:04.630 --> 00:01:04.640 align:start position:0%
prim's algorithm is actually not as
 

00:01:04.640 --> 00:01:06.550 align:start position:0%
prim's algorithm is actually not as
complicated<00:01:05.199><c> as</c><00:01:05.360><c> you</c><00:01:05.519><c> might</c><00:01:05.760><c> expect</c>

00:01:06.550 --> 00:01:06.560 align:start position:0%
complicated as you might expect
 

00:01:06.560 --> 00:01:08.950 align:start position:0%
complicated as you might expect
so<00:01:06.720><c> we're</c><00:01:06.880><c> just</c><00:01:07.200><c> given</c><00:01:07.600><c> a</c><00:01:07.920><c> list</c><00:01:08.320><c> of</c><00:01:08.560><c> points</c>

00:01:08.950 --> 00:01:08.960 align:start position:0%
so we're just given a list of points
 

00:01:08.960 --> 00:01:11.510 align:start position:0%
so we're just given a list of points
that<00:01:09.200><c> represent</c><00:01:09.840><c> some</c><00:01:10.159><c> coordinates</c><00:01:10.799><c> on</c><00:01:10.960><c> a</c><00:01:11.119><c> 2d</c>

00:01:11.510 --> 00:01:11.520 align:start position:0%
that represent some coordinates on a 2d
 

00:01:11.520 --> 00:01:11.990 align:start position:0%
that represent some coordinates on a 2d
plane<00:01:11.760><c> so</c>

00:01:11.990 --> 00:01:12.000 align:start position:0%
plane so
 

00:01:12.000 --> 00:01:13.750 align:start position:0%
plane so
we're<00:01:12.400><c> for</c><00:01:12.560><c> each</c><00:01:12.799><c> point</c><00:01:13.040><c> we're</c><00:01:13.200><c> given</c><00:01:13.520><c> two</c>

00:01:13.750 --> 00:01:13.760 align:start position:0%
we're for each point we're given two
 

00:01:13.760 --> 00:01:15.350 align:start position:0%
we're for each point we're given two
values<00:01:14.159><c> the</c><00:01:14.320><c> x-coordinate</c><00:01:15.119><c> and</c><00:01:15.200><c> the</c>

00:01:15.350 --> 00:01:15.360 align:start position:0%
values the x-coordinate and the
 

00:01:15.360 --> 00:01:17.910 align:start position:0%
values the x-coordinate and the
y-coordinate<00:01:16.400><c> so</c><00:01:16.560><c> the</c><00:01:16.799><c> cost</c><00:01:17.200><c> of</c><00:01:17.360><c> connecting</c>

00:01:17.910 --> 00:01:17.920 align:start position:0%
y-coordinate so the cost of connecting
 

00:01:17.920 --> 00:01:20.070 align:start position:0%
y-coordinate so the cost of connecting
any<00:01:18.240><c> two</c><00:01:18.479><c> particular</c><00:01:19.119><c> points</c><00:01:19.439><c> like</c><00:01:19.680><c> let's</c><00:01:19.840><c> say</c>

00:01:20.070 --> 00:01:20.080 align:start position:0%
any two particular points like let's say
 

00:01:20.080 --> 00:01:21.670 align:start position:0%
any two particular points like let's say
these<00:01:20.400><c> two</c><00:01:20.720><c> points</c><00:01:21.040><c> circled</c>

00:01:21.670 --> 00:01:21.680 align:start position:0%
these two points circled
 

00:01:21.680 --> 00:01:23.749 align:start position:0%
these two points circled
down<00:01:22.000><c> there</c><00:01:22.479><c> the</c><00:01:22.640><c> cost</c><00:01:22.960><c> of</c><00:01:23.040><c> connecting</c><00:01:23.520><c> them</c>

00:01:23.749 --> 00:01:23.759 align:start position:0%
down there the cost of connecting them
 

00:01:23.759 --> 00:01:25.590 align:start position:0%
down there the cost of connecting them
is<00:01:23.840><c> just</c><00:01:24.000><c> going</c><00:01:24.080><c> to</c><00:01:24.159><c> be</c><00:01:24.400><c> the</c><00:01:24.560><c> absolute</c><00:01:25.200><c> value</c>

00:01:25.590 --> 00:01:25.600 align:start position:0%
is just going to be the absolute value
 

00:01:25.600 --> 00:01:25.990 align:start position:0%
is just going to be the absolute value
of<00:01:25.759><c> the</c>

00:01:25.990 --> 00:01:26.000 align:start position:0%
of the
 

00:01:26.000 --> 00:01:28.550 align:start position:0%
of the
x<00:01:26.320><c> difference</c><00:01:27.200><c> plus</c><00:01:27.600><c> the</c><00:01:27.759><c> absolute</c><00:01:28.159><c> value</c><00:01:28.479><c> of</c>

00:01:28.550 --> 00:01:28.560 align:start position:0%
x difference plus the absolute value of
 

00:01:28.560 --> 00:01:30.310 align:start position:0%
x difference plus the absolute value of
the<00:01:28.720><c> y</c><00:01:28.960><c> difference</c><00:01:29.280><c> so</c><00:01:29.360><c> it's</c><00:01:29.520><c> actually</c><00:01:29.840><c> not</c>

00:01:30.310 --> 00:01:30.320 align:start position:0%
the y difference so it's actually not
 

00:01:30.320 --> 00:01:31.830 align:start position:0%
the y difference so it's actually not
you<00:01:30.400><c> know</c><00:01:30.560><c> the</c><00:01:30.799><c> the</c><00:01:30.960><c> cost</c><00:01:31.200><c> of</c><00:01:31.280><c> connecting</c><00:01:31.680><c> them</c>

00:01:31.830 --> 00:01:31.840 align:start position:0%
you know the the cost of connecting them
 

00:01:31.840 --> 00:01:33.350 align:start position:0%
you know the the cost of connecting them
is<00:01:32.000><c> not</c><00:01:32.079><c> going</c><00:01:32.240><c> to</c><00:01:32.320><c> be</c><00:01:32.400><c> like</c><00:01:32.560><c> the</c><00:01:32.720><c> diagonal</c>

00:01:33.350 --> 00:01:33.360 align:start position:0%
is not going to be like the diagonal
 

00:01:33.360 --> 00:01:34.230 align:start position:0%
is not going to be like the diagonal
it's<00:01:33.520><c> going</c><00:01:33.600><c> to</c><00:01:33.680><c> be</c><00:01:33.920><c> the</c>

00:01:34.230 --> 00:01:34.240 align:start position:0%
it's going to be the
 

00:01:34.240 --> 00:01:36.550 align:start position:0%
it's going to be the
x<00:01:34.479><c> distance</c><00:01:35.040><c> and</c><00:01:35.119><c> the</c><00:01:35.360><c> y</c><00:01:35.600><c> distance</c><00:01:36.159><c> in</c><00:01:36.320><c> other</c>

00:01:36.550 --> 00:01:36.560 align:start position:0%
x distance and the y distance in other
 

00:01:36.560 --> 00:01:38.469 align:start position:0%
x distance and the y distance in other
words<00:01:36.799><c> the</c><00:01:36.960><c> manhattan</c><00:01:37.680><c> distance</c><00:01:38.159><c> if</c><00:01:38.320><c> you've</c>

00:01:38.469 --> 00:01:38.479 align:start position:0%
words the manhattan distance if you've
 

00:01:38.479 --> 00:01:39.429 align:start position:0%
words the manhattan distance if you've
heard<00:01:38.720><c> of</c><00:01:38.799><c> that</c><00:01:39.040><c> term</c>

00:01:39.429 --> 00:01:39.439 align:start position:0%
heard of that term
 

00:01:39.439 --> 00:01:41.429 align:start position:0%
heard of that term
that's<00:01:39.680><c> pretty</c><00:01:40.000><c> easy</c><00:01:40.159><c> to</c><00:01:40.320><c> calculate</c><00:01:40.960><c> good</c><00:01:41.200><c> for</c>

00:01:41.429 --> 00:01:41.439 align:start position:0%
that's pretty easy to calculate good for
 

00:01:41.439 --> 00:01:43.270 align:start position:0%
that's pretty easy to calculate good for
us<00:01:41.840><c> and</c><00:01:42.159><c> for</c><00:01:42.399><c> the</c><00:01:42.640><c> entire</c>

00:01:43.270 --> 00:01:43.280 align:start position:0%
us and for the entire
 

00:01:43.280 --> 00:01:45.030 align:start position:0%
us and for the entire
set<00:01:43.520><c> of</c><00:01:43.759><c> points</c><00:01:44.079><c> in</c><00:01:44.159><c> this</c><00:01:44.320><c> case</c><00:01:44.560><c> we're</c><00:01:44.720><c> given</c>

00:01:45.030 --> 00:01:45.040 align:start position:0%
set of points in this case we're given
 

00:01:45.040 --> 00:01:47.030 align:start position:0%
set of points in this case we're given
five<00:01:45.360><c> points</c><00:01:45.759><c> we</c><00:01:45.920><c> want</c><00:01:46.079><c> to</c><00:01:46.240><c> know</c><00:01:46.479><c> what's</c><00:01:46.720><c> the</c>

00:01:47.030 --> 00:01:47.040 align:start position:0%
five points we want to know what's the
 

00:01:47.040 --> 00:01:47.749 align:start position:0%
five points we want to know what's the
minimum

00:01:47.749 --> 00:01:47.759 align:start position:0%
minimum
 

00:01:47.759 --> 00:01:51.429 align:start position:0%
minimum
possible<00:01:48.560><c> cost</c><00:01:48.960><c> to</c><00:01:49.200><c> connect</c><00:01:50.159><c> all</c><00:01:50.560><c> points</c>

00:01:51.429 --> 00:01:51.439 align:start position:0%
possible cost to connect all points
 

00:01:51.439 --> 00:01:53.190 align:start position:0%
possible cost to connect all points
and<00:01:51.520><c> they</c><00:01:51.680><c> also</c><00:01:51.920><c> say</c><00:01:52.159><c> that</c><00:01:52.479><c> any</c><00:01:52.720><c> pair</c><00:01:53.040><c> of</c>

00:01:53.190 --> 00:01:53.200 align:start position:0%
and they also say that any pair of
 

00:01:53.200 --> 00:01:54.550 align:start position:0%
and they also say that any pair of
points<00:01:53.520><c> is</c><00:01:53.600><c> going</c><00:01:53.680><c> to</c><00:01:53.759><c> be</c><00:01:53.920><c> connected</c><00:01:54.399><c> by</c>

00:01:54.550 --> 00:01:54.560 align:start position:0%
points is going to be connected by
 

00:01:54.560 --> 00:01:55.590 align:start position:0%
points is going to be connected by
exactly<00:01:55.200><c> one</c>

00:01:55.590 --> 00:01:55.600 align:start position:0%
exactly one
 

00:01:55.600 --> 00:01:57.590 align:start position:0%
exactly one
simple<00:01:56.079><c> path</c><00:01:56.719><c> i</c><00:01:56.799><c> think</c><00:01:56.960><c> that's</c><00:01:57.360><c> that</c>

00:01:57.590 --> 00:01:57.600 align:start position:0%
simple path i think that's that
 

00:01:57.600 --> 00:01:59.429 align:start position:0%
simple path i think that's that
information<00:01:58.079><c> is</c><00:01:58.240><c> actually</c><00:01:58.560><c> redundant</c><00:01:59.200><c> just</c>

00:01:59.429 --> 00:01:59.439 align:start position:0%
information is actually redundant just
 

00:01:59.439 --> 00:02:01.109 align:start position:0%
information is actually redundant just
saying<00:01:59.680><c> that</c><00:01:59.840><c> we</c><00:02:00.000><c> want</c><00:02:00.159><c> the</c><00:02:00.320><c> minimum</c><00:02:00.719><c> cost</c><00:02:01.040><c> to</c>

00:02:01.109 --> 00:02:01.119 align:start position:0%
saying that we want the minimum cost to
 

00:02:01.119 --> 00:02:02.069 align:start position:0%
saying that we want the minimum cost to
connect<00:02:01.439><c> all</c><00:02:01.680><c> points</c>

00:02:02.069 --> 00:02:02.079 align:start position:0%
connect all points
 

00:02:02.079 --> 00:02:03.590 align:start position:0%
connect all points
pretty<00:02:02.320><c> much</c><00:02:02.560><c> tells</c><00:02:02.799><c> you</c><00:02:03.040><c> this</c><00:02:03.200><c> is</c><00:02:03.360><c> going</c><00:02:03.520><c> to</c>

00:02:03.590 --> 00:02:03.600 align:start position:0%
pretty much tells you this is going to
 

00:02:03.600 --> 00:02:06.469 align:start position:0%
pretty much tells you this is going to
be<00:02:04.079><c> a</c><00:02:04.240><c> minimum</c><00:02:04.719><c> spanning</c><00:02:05.200><c> tree</c><00:02:05.600><c> problem</c>

00:02:06.469 --> 00:02:06.479 align:start position:0%
be a minimum spanning tree problem
 

00:02:06.479 --> 00:02:08.469 align:start position:0%
be a minimum spanning tree problem
so<00:02:06.640><c> the</c><00:02:06.799><c> only</c><00:02:07.040><c> question</c><00:02:07.439><c> is</c><00:02:07.840><c> where</c><00:02:08.000><c> the</c><00:02:08.160><c> heck</c>

00:02:08.469 --> 00:02:08.479 align:start position:0%
so the only question is where the heck
 

00:02:08.479 --> 00:02:10.469 align:start position:0%
so the only question is where the heck
are<00:02:08.720><c> the</c><00:02:08.959><c> edges</c><00:02:09.440><c> for</c><00:02:09.599><c> this</c><00:02:09.840><c> graph</c><00:02:10.080><c> we're</c><00:02:10.239><c> only</c>

00:02:10.469 --> 00:02:10.479 align:start position:0%
are the edges for this graph we're only
 

00:02:10.479 --> 00:02:11.110 align:start position:0%
are the edges for this graph we're only
given

00:02:11.110 --> 00:02:11.120 align:start position:0%
given
 

00:02:11.120 --> 00:02:13.190 align:start position:0%
given
points<00:02:11.520><c> right</c><00:02:11.840><c> so</c><00:02:12.239><c> but</c><00:02:12.400><c> they</c><00:02:12.560><c> do</c><00:02:12.720><c> tell</c><00:02:12.959><c> us</c>

00:02:13.190 --> 00:02:13.200 align:start position:0%
points right so but they do tell us
 

00:02:13.200 --> 00:02:14.869 align:start position:0%
points right so but they do tell us
pretty<00:02:13.360><c> much</c><00:02:13.599><c> what</c><00:02:13.840><c> an</c><00:02:14.000><c> edge</c><00:02:14.239><c> is</c><00:02:14.319><c> going</c><00:02:14.480><c> to</c><00:02:14.640><c> be</c>

00:02:14.869 --> 00:02:14.879 align:start position:0%
pretty much what an edge is going to be
 

00:02:14.879 --> 00:02:15.910 align:start position:0%
pretty much what an edge is going to be
right<00:02:15.120><c> with</c><00:02:15.280><c> the</c><00:02:15.440><c> cost</c>

00:02:15.910 --> 00:02:15.920 align:start position:0%
right with the cost
 

00:02:15.920 --> 00:02:18.070 align:start position:0%
right with the cost
of<00:02:16.160><c> each</c><00:02:16.800><c> uh</c><00:02:17.120><c> connection</c><00:02:17.599><c> is</c><00:02:17.760><c> just</c><00:02:17.920><c> going</c><00:02:18.000><c> to</c>

00:02:18.070 --> 00:02:18.080 align:start position:0%
of each uh connection is just going to
 

00:02:18.080 --> 00:02:20.150 align:start position:0%
of each uh connection is just going to
be<00:02:18.239><c> the</c><00:02:18.319><c> distance</c><00:02:18.720><c> so</c><00:02:18.879><c> we</c><00:02:19.040><c> have</c><00:02:19.200><c> to</c><00:02:19.360><c> create</c><00:02:19.920><c> our</c>

00:02:20.150 --> 00:02:20.160 align:start position:0%
be the distance so we have to create our
 

00:02:20.160 --> 00:02:20.790 align:start position:0%
be the distance so we have to create our
edges

00:02:20.790 --> 00:02:20.800 align:start position:0%
edges
 

00:02:20.800 --> 00:02:23.830 align:start position:0%
edges
ourselves<00:02:21.520><c> so</c><00:02:21.760><c> basically</c><00:02:22.959><c> all</c><00:02:23.280><c> possible</c>

00:02:23.830 --> 00:02:23.840 align:start position:0%
ourselves so basically all possible
 

00:02:23.840 --> 00:02:25.670 align:start position:0%
ourselves so basically all possible
edges<00:02:24.319><c> could</c><00:02:24.560><c> be</c><00:02:24.800><c> you</c><00:02:24.879><c> know</c><00:02:25.040><c> every</c><00:02:25.280><c> single</c>

00:02:25.670 --> 00:02:25.680 align:start position:0%
edges could be you know every single
 

00:02:25.680 --> 00:02:26.309 align:start position:0%
edges could be you know every single
point

00:02:26.309 --> 00:02:26.319 align:start position:0%
point
 

00:02:26.319 --> 00:02:29.589 align:start position:0%
point
to<00:02:26.480><c> connect</c><00:02:26.879><c> it</c><00:02:27.040><c> to</c><00:02:27.280><c> every</c><00:02:27.760><c> other</c><00:02:28.080><c> point</c><00:02:28.800><c> right</c>

00:02:29.589 --> 00:02:29.599 align:start position:0%
to connect it to every other point right
 

00:02:29.599 --> 00:02:31.350 align:start position:0%
to connect it to every other point right
that's<00:02:29.920><c> going</c><00:02:30.000><c> to</c><00:02:30.080><c> be</c><00:02:30.319><c> a</c><00:02:30.480><c> set</c><00:02:30.640><c> of</c><00:02:30.800><c> edges</c><00:02:31.200><c> and</c><00:02:31.280><c> we</c>

00:02:31.350 --> 00:02:31.360 align:start position:0%
that's going to be a set of edges and we
 

00:02:31.360 --> 00:02:33.190 align:start position:0%
that's going to be a set of edges and we
can<00:02:31.519><c> continue</c><00:02:32.000><c> that</c><00:02:32.239><c> so</c><00:02:32.400><c> for</c><00:02:32.640><c> example</c><00:02:33.040><c> you</c>

00:02:33.190 --> 00:02:33.200 align:start position:0%
can continue that so for example you
 

00:02:33.200 --> 00:02:34.470 align:start position:0%
can continue that so for example you
know<00:02:33.360><c> this</c><00:02:33.599><c> point</c><00:02:33.840><c> to</c><00:02:34.000><c> connect</c>

00:02:34.470 --> 00:02:34.480 align:start position:0%
know this point to connect
 

00:02:34.480 --> 00:02:37.589 align:start position:0%
know this point to connect
all<00:02:34.720><c> the</c><00:02:35.120><c> other</c><00:02:35.920><c> uh</c><00:02:36.480><c> points</c><00:02:36.959><c> as</c><00:02:37.120><c> well</c><00:02:37.280><c> so</c><00:02:37.440><c> we're</c>

00:02:37.589 --> 00:02:37.599 align:start position:0%
all the other uh points as well so we're
 

00:02:37.599 --> 00:02:39.270 align:start position:0%
all the other uh points as well so we're
gonna<00:02:37.760><c> have</c><00:02:37.920><c> to</c><00:02:38.000><c> kind</c><00:02:38.160><c> of</c><00:02:38.319><c> manually</c><00:02:38.800><c> create</c>

00:02:39.270 --> 00:02:39.280 align:start position:0%
gonna have to kind of manually create
 

00:02:39.280 --> 00:02:39.990 align:start position:0%
gonna have to kind of manually create
the<00:02:39.440><c> points</c>

00:02:39.990 --> 00:02:40.000 align:start position:0%
the points
 

00:02:40.000 --> 00:02:42.150 align:start position:0%
the points
so<00:02:40.239><c> for</c><00:02:40.480><c> each</c><00:02:40.720><c> pair</c><00:02:41.040><c> of</c><00:02:41.200><c> points</c><00:02:41.519><c> in</c><00:02:41.599><c> the</c><00:02:41.760><c> entire</c>

00:02:42.150 --> 00:02:42.160 align:start position:0%
so for each pair of points in the entire
 

00:02:42.160 --> 00:02:43.270 align:start position:0%
so for each pair of points in the entire
graph<00:02:42.480><c> we're</c><00:02:42.640><c> just</c><00:02:42.800><c> gonna</c><00:02:43.040><c> take</c><00:02:43.200><c> the</c>

00:02:43.270 --> 00:02:43.280 align:start position:0%
graph we're just gonna take the
 

00:02:43.280 --> 00:02:45.190 align:start position:0%
graph we're just gonna take the
manhattan<00:02:43.840><c> distance</c><00:02:44.319><c> between</c><00:02:44.640><c> them</c><00:02:44.879><c> and</c><00:02:44.959><c> just</c>

00:02:45.190 --> 00:02:45.200 align:start position:0%
manhattan distance between them and just
 

00:02:45.200 --> 00:02:45.990 align:start position:0%
manhattan distance between them and just
call<00:02:45.519><c> that</c><00:02:45.760><c> an</c>

00:02:45.990 --> 00:02:46.000 align:start position:0%
call that an
 

00:02:46.000 --> 00:02:47.910 align:start position:0%
call that an
edge<00:02:46.239><c> and</c><00:02:46.400><c> then</c><00:02:46.720><c> you</c><00:02:46.879><c> know</c><00:02:47.040><c> have</c><00:02:47.280><c> our</c><00:02:47.519><c> list</c><00:02:47.760><c> of</c>

00:02:47.910 --> 00:02:47.920 align:start position:0%
edge and then you know have our list of
 

00:02:47.920 --> 00:02:49.750 align:start position:0%
edge and then you know have our list of
edges<00:02:48.400><c> or</c><00:02:48.800><c> basically</c><00:02:49.200><c> we're</c><00:02:49.360><c> going</c><00:02:49.440><c> to</c><00:02:49.519><c> create</c>

00:02:49.750 --> 00:02:49.760 align:start position:0%
edges or basically we're going to create
 

00:02:49.760 --> 00:02:51.270 align:start position:0%
edges or basically we're going to create
an<00:02:49.920><c> adjacency</c><00:02:50.720><c> list</c>

00:02:51.270 --> 00:02:51.280 align:start position:0%
an adjacency list
 

00:02:51.280 --> 00:02:53.190 align:start position:0%
an adjacency list
so<00:02:51.519><c> that</c><00:02:51.760><c> is</c><00:02:51.920><c> kind</c><00:02:52.080><c> of</c><00:02:52.239><c> like</c><00:02:52.400><c> the</c><00:02:52.560><c> pre-work</c><00:02:53.040><c> we</c>

00:02:53.190 --> 00:02:53.200 align:start position:0%
so that is kind of like the pre-work we
 

00:02:53.200 --> 00:02:54.710 align:start position:0%
so that is kind of like the pre-work we
have<00:02:53.360><c> to</c><00:02:53.440><c> do</c><00:02:53.599><c> that's</c><00:02:53.840><c> step</c><00:02:54.239><c> one</c>

00:02:54.710 --> 00:02:54.720 align:start position:0%
have to do that's step one
 

00:02:54.720 --> 00:02:56.550 align:start position:0%
have to do that's step one
in<00:02:54.800><c> this</c><00:02:55.040><c> problem</c><00:02:55.519><c> creating</c><00:02:55.920><c> the</c><00:02:56.080><c> edges</c><00:02:56.400><c> but</c>

00:02:56.550 --> 00:02:56.560 align:start position:0%
in this problem creating the edges but
 

00:02:56.560 --> 00:02:58.229 align:start position:0%
in this problem creating the edges but
as<00:02:56.720><c> soon</c><00:02:56.959><c> as</c><00:02:57.120><c> you</c><00:02:57.280><c> create</c><00:02:57.519><c> the</c><00:02:57.760><c> edges</c>

00:02:58.229 --> 00:02:58.239 align:start position:0%
as soon as you create the edges
 

00:02:58.239 --> 00:03:00.949 align:start position:0%
as soon as you create the edges
this<00:02:58.480><c> is</c><00:02:58.800><c> literally</c><00:02:59.440><c> just</c><00:02:59.920><c> a</c><00:03:00.480><c> problem</c><00:03:00.800><c> that</c>

00:03:00.949 --> 00:03:00.959 align:start position:0%
this is literally just a problem that
 

00:03:00.959 --> 00:03:02.070 align:start position:0%
this is literally just a problem that
you<00:03:01.120><c> can</c><00:03:01.200><c> go</c><00:03:01.440><c> ahead</c><00:03:01.680><c> and</c><00:03:01.760><c> take</c>

00:03:02.070 --> 00:03:02.080 align:start position:0%
you can go ahead and take
 

00:03:02.080 --> 00:03:04.550 align:start position:0%
you can go ahead and take
prim's<00:03:02.560><c> algorithm</c><00:03:03.200><c> and</c><00:03:03.360><c> just</c><00:03:03.840><c> apply</c><00:03:04.239><c> the</c>

00:03:04.550 --> 00:03:04.560 align:start position:0%
prim's algorithm and just apply the
 

00:03:04.560 --> 00:03:07.270 align:start position:0%
prim's algorithm and just apply the
textbook<00:03:05.280><c> definition</c><00:03:05.920><c> of</c><00:03:06.080><c> prim's</c><00:03:06.560><c> algorithm</c>

00:03:07.270 --> 00:03:07.280 align:start position:0%
textbook definition of prim's algorithm
 

00:03:07.280 --> 00:03:09.110 align:start position:0%
textbook definition of prim's algorithm
to<00:03:07.440><c> this</c><00:03:07.760><c> problem</c><00:03:08.239><c> and</c><00:03:08.400><c> you</c><00:03:08.560><c> will</c><00:03:08.720><c> get</c><00:03:08.879><c> the</c>

00:03:09.110 --> 00:03:09.120 align:start position:0%
to this problem and you will get the
 

00:03:09.120 --> 00:03:11.190 align:start position:0%
to this problem and you will get the
optimal<00:03:09.519><c> solution</c><00:03:10.000><c> and</c><00:03:10.080><c> the</c><00:03:10.239><c> time</c><00:03:10.400><c> complexity</c>

00:03:11.190 --> 00:03:11.200 align:start position:0%
optimal solution and the time complexity
 

00:03:11.200 --> 00:03:14.390 align:start position:0%
optimal solution and the time complexity
of<00:03:11.360><c> that</c><00:03:11.599><c> is</c><00:03:11.760><c> going</c><00:03:11.920><c> to</c><00:03:12.159><c> be</c><00:03:12.640><c> n</c><00:03:12.879><c> squared</c><00:03:13.599><c> log</c><00:03:14.000><c> n</c>

00:03:14.390 --> 00:03:14.400 align:start position:0%
of that is going to be n squared log n
 

00:03:14.400 --> 00:03:16.710 align:start position:0%
of that is going to be n squared log n
because<00:03:15.360><c> n</c><00:03:15.519><c> squared</c><00:03:15.840><c> is</c><00:03:15.920><c> going</c><00:03:16.000><c> to</c><00:03:16.080><c> be</c><00:03:16.560><c> the</c>

00:03:16.710 --> 00:03:16.720 align:start position:0%
because n squared is going to be the
 

00:03:16.720 --> 00:03:18.070 align:start position:0%
because n squared is going to be the
number<00:03:17.040><c> of</c><00:03:17.200><c> edges</c><00:03:17.519><c> we're</c><00:03:17.680><c> going</c><00:03:17.760><c> to</c><00:03:17.840><c> have</c>

00:03:18.070 --> 00:03:18.080 align:start position:0%
number of edges we're going to have
 

00:03:18.080 --> 00:03:18.710 align:start position:0%
number of edges we're going to have
right<00:03:18.319><c> because</c>

00:03:18.710 --> 00:03:18.720 align:start position:0%
right because
 

00:03:18.720 --> 00:03:20.390 align:start position:0%
right because
to<00:03:18.879><c> connect</c><00:03:19.280><c> each</c><00:03:19.519><c> pair</c><00:03:19.680><c> of</c><00:03:19.840><c> points</c><00:03:20.159><c> we</c><00:03:20.239><c> could</c>

00:03:20.390 --> 00:03:20.400 align:start position:0%
to connect each pair of points we could
 

00:03:20.400 --> 00:03:22.550 align:start position:0%
to connect each pair of points we could
potentially<00:03:20.879><c> have</c><00:03:21.120><c> n</c><00:03:21.280><c> squared</c><00:03:21.680><c> edges</c><00:03:22.000><c> where</c><00:03:22.239><c> n</c>

00:03:22.550 --> 00:03:22.560 align:start position:0%
potentially have n squared edges where n
 

00:03:22.560 --> 00:03:24.869 align:start position:0%
potentially have n squared edges where n
is<00:03:22.640><c> the</c><00:03:22.959><c> number</c><00:03:23.280><c> of</c><00:03:23.599><c> points</c><00:03:23.920><c> that</c><00:03:24.080><c> we're</c><00:03:24.319><c> given</c>

00:03:24.869 --> 00:03:24.879 align:start position:0%
is the number of points that we're given
 

00:03:24.879 --> 00:03:25.990 align:start position:0%
is the number of points that we're given
and<00:03:25.200><c> login</c>

00:03:25.990 --> 00:03:26.000 align:start position:0%
and login
 

00:03:26.000 --> 00:03:28.229 align:start position:0%
and login
is<00:03:26.159><c> going</c><00:03:26.239><c> to</c><00:03:26.400><c> come</c><00:03:26.720><c> from</c><00:03:27.280><c> prem's</c><00:03:27.760><c> algorithm</c>

00:03:28.229 --> 00:03:28.239 align:start position:0%
is going to come from prem's algorithm
 

00:03:28.239 --> 00:03:29.350 align:start position:0%
is going to come from prem's algorithm
because<00:03:28.480><c> we're</c><00:03:28.640><c> going</c><00:03:28.720><c> to</c><00:03:28.799><c> be</c><00:03:28.959><c> using</c>

00:03:29.350 --> 00:03:29.360 align:start position:0%
because we're going to be using
 

00:03:29.360 --> 00:03:32.710 align:start position:0%
because we're going to be using
a<00:03:29.599><c> min</c><00:03:30.400><c> heap</c><00:03:31.120><c> in</c><00:03:31.599><c> this</c><00:03:31.920><c> problem</c><00:03:32.319><c> so</c><00:03:32.480><c> it's</c>

00:03:32.710 --> 00:03:32.720 align:start position:0%
a min heap in this problem so it's
 

00:03:32.720 --> 00:03:35.030 align:start position:0%
a min heap in this problem so it's
pretty<00:03:33.040><c> similar</c><00:03:33.599><c> in</c><00:03:33.760><c> a</c><00:03:33.840><c> way</c><00:03:34.080><c> to</c><00:03:34.319><c> jigstra's</c>

00:03:35.030 --> 00:03:35.040 align:start position:0%
pretty similar in a way to jigstra's
 

00:03:35.040 --> 00:03:35.750 align:start position:0%
pretty similar in a way to jigstra's
algorithm

00:03:35.750 --> 00:03:35.760 align:start position:0%
algorithm
 

00:03:35.760 --> 00:03:38.789 align:start position:0%
algorithm
digixtra's<00:03:37.120><c> minimum</c><00:03:37.519><c> path</c><00:03:37.920><c> algorithm</c>

00:03:38.789 --> 00:03:38.799 align:start position:0%
digixtra's minimum path algorithm
 

00:03:38.799 --> 00:03:40.789 align:start position:0%
digixtra's minimum path algorithm
if<00:03:38.959><c> you</c><00:03:39.599><c> if</c><00:03:39.760><c> you</c><00:03:39.840><c> are</c><00:03:40.000><c> familiar</c><00:03:40.400><c> with</c><00:03:40.560><c> that</c>

00:03:40.789 --> 00:03:40.799 align:start position:0%
if you if you are familiar with that
 

00:03:40.799 --> 00:03:42.550 align:start position:0%
if you if you are familiar with that
prim's<00:03:41.200><c> algorithm</c><00:03:41.599><c> is</c><00:03:41.760><c> pretty</c><00:03:42.080><c> similar</c><00:03:42.400><c> to</c>

00:03:42.550 --> 00:03:42.560 align:start position:0%
prim's algorithm is pretty similar to
 

00:03:42.560 --> 00:03:43.190 align:start position:0%
prim's algorithm is pretty similar to
that<00:03:42.720><c> so</c><00:03:42.879><c> let's</c>

00:03:43.190 --> 00:03:43.200 align:start position:0%
that so let's
 

00:03:43.200 --> 00:03:46.229 align:start position:0%
that so let's
jump<00:03:43.599><c> into</c><00:03:43.920><c> it</c><00:03:44.239><c> so</c><00:03:44.560><c> prim's</c><00:03:45.200><c> algorithm</c><00:03:45.920><c> is</c><00:03:46.080><c> an</c>

00:03:46.229 --> 00:03:46.239 align:start position:0%
jump into it so prim's algorithm is an
 

00:03:46.239 --> 00:03:48.309 align:start position:0%
jump into it so prim's algorithm is an
algorithm<00:03:46.640><c> to</c><00:03:46.879><c> find</c><00:03:47.200><c> minimum</c><00:03:47.680><c> spanning</c><00:03:48.080><c> trees</c>

00:03:48.309 --> 00:03:48.319 align:start position:0%
algorithm to find minimum spanning trees
 

00:03:48.319 --> 00:03:50.390 align:start position:0%
algorithm to find minimum spanning trees
so<00:03:48.480><c> there's</c><00:03:48.720><c> a</c><00:03:48.799><c> few</c><00:03:49.120><c> concepts</c><00:03:49.680><c> you</c><00:03:49.840><c> have</c><00:03:50.000><c> to</c><00:03:50.159><c> be</c>

00:03:50.390 --> 00:03:50.400 align:start position:0%
so there's a few concepts you have to be
 

00:03:50.400 --> 00:03:52.149 align:start position:0%
so there's a few concepts you have to be
familiar<00:03:50.879><c> with</c><00:03:51.120><c> to</c><00:03:51.280><c> understand</c><00:03:51.760><c> prim's</c>

00:03:52.149 --> 00:03:52.159 align:start position:0%
familiar with to understand prim's
 

00:03:52.159 --> 00:03:54.390 align:start position:0%
familiar with to understand prim's
algorithm<00:03:53.120><c> to</c><00:03:53.360><c> obviously</c>

00:03:54.390 --> 00:03:54.400 align:start position:0%
algorithm to obviously
 

00:03:54.400 --> 00:03:56.149 align:start position:0%
algorithm to obviously
you<00:03:54.560><c> need</c><00:03:54.720><c> prim's</c><00:03:55.120><c> algorithm</c><00:03:55.519><c> to</c><00:03:55.760><c> solve</c><00:03:56.000><c> this</c>

00:03:56.149 --> 00:03:56.159 align:start position:0%
you need prim's algorithm to solve this
 

00:03:56.159 --> 00:03:57.589 align:start position:0%
you need prim's algorithm to solve this
problem<00:03:56.480><c> efficiently</c><00:03:56.959><c> so</c><00:03:57.120><c> i'm</c><00:03:57.200><c> just</c><00:03:57.280><c> gonna</c>

00:03:57.589 --> 00:03:57.599 align:start position:0%
problem efficiently so i'm just gonna
 

00:03:57.599 --> 00:03:59.270 align:start position:0%
problem efficiently so i'm just gonna
give<00:03:57.840><c> some</c><00:03:58.000><c> of</c><00:03:58.080><c> the</c><00:03:58.239><c> background</c><00:03:58.720><c> in</c><00:03:58.799><c> case</c><00:03:59.120><c> you</c>

00:03:59.270 --> 00:03:59.280 align:start position:0%
give some of the background in case you
 

00:03:59.280 --> 00:04:00.070 align:start position:0%
give some of the background in case you
don't<00:03:59.519><c> know</c><00:03:59.760><c> it</c>

00:04:00.070 --> 00:04:00.080 align:start position:0%
don't know it
 

00:04:00.080 --> 00:04:02.390 align:start position:0%
don't know it
so<00:04:00.319><c> basically</c><00:04:00.879><c> let's</c><00:04:01.040><c> say</c><00:04:01.280><c> you</c><00:04:01.439><c> have</c><00:04:01.680><c> a</c><00:04:01.840><c> graph</c>

00:04:02.390 --> 00:04:02.400 align:start position:0%
so basically let's say you have a graph
 

00:04:02.400 --> 00:04:03.350 align:start position:0%
so basically let's say you have a graph
and<00:04:02.640><c> in</c><00:04:02.720><c> this</c><00:04:02.959><c> case</c>

00:04:03.350 --> 00:04:03.360 align:start position:0%
and in this case
 

00:04:03.360 --> 00:04:05.830 align:start position:0%
and in this case
we<00:04:03.519><c> have</c><00:04:03.680><c> a</c><00:04:03.840><c> graph</c><00:04:04.159><c> with</c><00:04:04.480><c> five</c><00:04:05.120><c> nodes</c><00:04:05.599><c> or</c>

00:04:05.830 --> 00:04:05.840 align:start position:0%
we have a graph with five nodes or
 

00:04:05.840 --> 00:04:07.030 align:start position:0%
we have a graph with five nodes or
vertices<00:04:06.560><c> right</c>

00:04:07.030 --> 00:04:07.040 align:start position:0%
vertices right
 

00:04:07.040 --> 00:04:10.470 align:start position:0%
vertices right
and<00:04:07.439><c> to</c><00:04:07.680><c> connect</c><00:04:08.720><c> all</c><00:04:09.120><c> of</c><00:04:09.439><c> these</c><00:04:10.000><c> nodes</c>

00:04:10.470 --> 00:04:10.480 align:start position:0%
and to connect all of these nodes
 

00:04:10.480 --> 00:04:11.589 align:start position:0%
and to connect all of these nodes
together

00:04:11.589 --> 00:04:11.599 align:start position:0%
together
 

00:04:11.599 --> 00:04:15.190 align:start position:0%
together
without<00:04:12.640><c> forming</c><00:04:13.200><c> a</c><00:04:13.519><c> cycle</c><00:04:14.400><c> so</c><00:04:14.560><c> we</c><00:04:14.799><c> want</c>

00:04:15.190 --> 00:04:15.200 align:start position:0%
without forming a cycle so we want
 

00:04:15.200 --> 00:04:17.349 align:start position:0%
without forming a cycle so we want
every<00:04:15.599><c> node</c><00:04:15.840><c> to</c><00:04:16.000><c> be</c><00:04:16.320><c> connected</c><00:04:16.799><c> together</c><00:04:17.199><c> but</c>

00:04:17.349 --> 00:04:17.359 align:start position:0%
every node to be connected together but
 

00:04:17.359 --> 00:04:19.990 align:start position:0%
every node to be connected together but
we<00:04:17.600><c> don't</c><00:04:18.000><c> want</c><00:04:18.239><c> to</c><00:04:18.479><c> form</c><00:04:18.720><c> a</c><00:04:18.959><c> cycle</c><00:04:19.359><c> how</c><00:04:19.600><c> many</c>

00:04:19.990 --> 00:04:20.000 align:start position:0%
we don't want to form a cycle how many
 

00:04:20.000 --> 00:04:21.430 align:start position:0%
we don't want to form a cycle how many
edges<00:04:20.400><c> is</c><00:04:20.560><c> it</c><00:04:20.639><c> going</c><00:04:20.720><c> to</c><00:04:20.880><c> take</c><00:04:21.120><c> us</c><00:04:21.280><c> to</c>

00:04:21.430 --> 00:04:21.440 align:start position:0%
edges is it going to take us to
 

00:04:21.440 --> 00:04:23.510 align:start position:0%
edges is it going to take us to
accomplish<00:04:22.079><c> that</c><00:04:22.560><c> it's</c><00:04:22.800><c> going</c><00:04:22.960><c> to</c><00:04:23.120><c> take</c>

00:04:23.510 --> 00:04:23.520 align:start position:0%
accomplish that it's going to take
 

00:04:23.520 --> 00:04:27.430 align:start position:0%
accomplish that it's going to take
exactly<00:04:24.639><c> n</c><00:04:25.280><c> minus</c><00:04:26.080><c> 1</c><00:04:26.479><c> edges</c><00:04:26.800><c> so</c><00:04:26.960><c> if</c><00:04:27.040><c> we</c><00:04:27.199><c> have</c>

00:04:27.430 --> 00:04:27.440 align:start position:0%
exactly n minus 1 edges so if we have
 

00:04:27.440 --> 00:04:29.590 align:start position:0%
exactly n minus 1 edges so if we have
five<00:04:27.840><c> nodes</c><00:04:28.160><c> it's</c><00:04:28.320><c> going</c><00:04:28.400><c> to</c><00:04:28.479><c> take</c><00:04:28.720><c> exactly</c>

00:04:29.590 --> 00:04:29.600 align:start position:0%
five nodes it's going to take exactly
 

00:04:29.600 --> 00:04:32.469 align:start position:0%
five nodes it's going to take exactly
four<00:04:30.160><c> edges</c><00:04:30.880><c> to</c><00:04:31.120><c> connect</c><00:04:31.840><c> all</c><00:04:32.080><c> of</c><00:04:32.240><c> them</c>

00:04:32.469 --> 00:04:32.479 align:start position:0%
four edges to connect all of them
 

00:04:32.479 --> 00:04:33.110 align:start position:0%
four edges to connect all of them
together

00:04:33.110 --> 00:04:33.120 align:start position:0%
together
 

00:04:33.120 --> 00:04:35.350 align:start position:0%
together
without<00:04:33.840><c> creating</c><00:04:34.320><c> a</c><00:04:34.479><c> cycle</c><00:04:34.800><c> because</c><00:04:35.120><c> take</c><00:04:35.280><c> a</c>

00:04:35.350 --> 00:04:35.360 align:start position:0%
without creating a cycle because take a
 

00:04:35.360 --> 00:04:37.350 align:start position:0%
without creating a cycle because take a
look<00:04:35.600><c> right</c><00:04:35.759><c> now</c><00:04:35.919><c> i</c><00:04:36.080><c> have</c><00:04:36.320><c> four</c><00:04:36.720><c> edges</c>

00:04:37.350 --> 00:04:37.360 align:start position:0%
look right now i have four edges
 

00:04:37.360 --> 00:04:40.230 align:start position:0%
look right now i have four edges
right<00:04:37.759><c> if</c><00:04:37.919><c> i</c><00:04:38.160><c> add</c><00:04:38.479><c> another</c><00:04:39.120><c> edge</c><00:04:39.600><c> that's</c><00:04:39.919><c> not</c><00:04:40.160><c> a</c>

00:04:40.230 --> 00:04:40.240 align:start position:0%
right if i add another edge that's not a
 

00:04:40.240 --> 00:04:41.670 align:start position:0%
right if i add another edge that's not a
duplicate<00:04:40.720><c> if</c><00:04:40.800><c> i</c><00:04:40.880><c> add</c><00:04:41.040><c> an</c><00:04:41.199><c> edge</c><00:04:41.360><c> here</c><00:04:41.520><c> we</c>

00:04:41.670 --> 00:04:41.680 align:start position:0%
duplicate if i add an edge here we
 

00:04:41.680 --> 00:04:41.990 align:start position:0%
duplicate if i add an edge here we
create

00:04:41.990 --> 00:04:42.000 align:start position:0%
create
 

00:04:42.000 --> 00:04:44.150 align:start position:0%
create
a<00:04:42.080><c> cycle</c><00:04:42.639><c> if</c><00:04:42.800><c> i</c><00:04:42.960><c> add</c><00:04:43.120><c> an</c><00:04:43.280><c> edge</c><00:04:43.440><c> here</c><00:04:43.680><c> we</c><00:04:43.840><c> create</c>

00:04:44.150 --> 00:04:44.160 align:start position:0%
a cycle if i add an edge here we create
 

00:04:44.160 --> 00:04:45.990 align:start position:0%
a cycle if i add an edge here we create
a<00:04:44.240><c> cycle</c><00:04:44.560><c> if</c><00:04:44.720><c> i</c><00:04:44.800><c> add</c><00:04:44.960><c> an</c><00:04:45.120><c> edge</c><00:04:45.280><c> here</c><00:04:45.520><c> we</c><00:04:45.680><c> create</c>

00:04:45.990 --> 00:04:46.000 align:start position:0%
a cycle if i add an edge here we create
 

00:04:46.000 --> 00:04:46.710 align:start position:0%
a cycle if i add an edge here we create
a<00:04:46.080><c> cycle</c><00:04:46.400><c> right</c>

00:04:46.710 --> 00:04:46.720 align:start position:0%
a cycle right
 

00:04:46.720 --> 00:04:48.390 align:start position:0%
a cycle right
that's<00:04:46.960><c> just</c><00:04:47.120><c> kind</c><00:04:47.280><c> of</c><00:04:47.440><c> something</c><00:04:48.000><c> you</c><00:04:48.160><c> know</c>

00:04:48.390 --> 00:04:48.400 align:start position:0%
that's just kind of something you know
 

00:04:48.400 --> 00:04:50.390 align:start position:0%
that's just kind of something you know
and<00:04:48.560><c> i</c><00:04:48.639><c> think</c><00:04:48.800><c> it</c><00:04:49.040><c> intuitively</c><00:04:49.759><c> does</c><00:04:50.080><c> make</c>

00:04:50.390 --> 00:04:50.400 align:start position:0%
and i think it intuitively does make
 

00:04:50.400 --> 00:04:50.950 align:start position:0%
and i think it intuitively does make
sense

00:04:50.950 --> 00:04:50.960 align:start position:0%
sense
 

00:04:50.960 --> 00:04:52.310 align:start position:0%
sense
because<00:04:51.280><c> you</c><00:04:51.360><c> know</c><00:04:51.520><c> if</c><00:04:51.600><c> you</c><00:04:51.680><c> start</c><00:04:52.000><c> out</c><00:04:52.080><c> with</c>

00:04:52.310 --> 00:04:52.320 align:start position:0%
because you know if you start out with
 

00:04:52.320 --> 00:04:54.390 align:start position:0%
because you know if you start out with
five<00:04:52.560><c> nodes</c><00:04:53.040><c> you</c><00:04:53.199><c> add</c><00:04:53.520><c> one</c><00:04:53.840><c> edge</c>

00:04:54.390 --> 00:04:54.400 align:start position:0%
five nodes you add one edge
 

00:04:54.400 --> 00:04:56.790 align:start position:0%
five nodes you add one edge
now<00:04:54.639><c> we</c><00:04:54.800><c> have</c><00:04:55.360><c> four</c><00:04:55.919><c> different</c><00:04:56.479><c> you</c><00:04:56.560><c> know</c>

00:04:56.790 --> 00:04:56.800 align:start position:0%
now we have four different you know
 

00:04:56.800 --> 00:04:58.790 align:start position:0%
now we have four different you know
connected<00:04:57.280><c> components</c><00:04:57.680><c> we</c><00:04:57.840><c> have</c><00:04:57.919><c> one</c><00:04:58.160><c> here</c>

00:04:58.790 --> 00:04:58.800 align:start position:0%
connected components we have one here
 

00:04:58.800 --> 00:05:00.390 align:start position:0%
connected components we have one here
one<00:04:59.040><c> here</c><00:04:59.199><c> and</c><00:04:59.280><c> then</c><00:04:59.440><c> a</c><00:04:59.520><c> couple</c><00:04:59.759><c> here</c><00:05:00.160><c> every</c>

00:05:00.390 --> 00:05:00.400 align:start position:0%
one here and then a couple here every
 

00:05:00.400 --> 00:05:02.070 align:start position:0%
one here and then a couple here every
time<00:05:00.560><c> you</c><00:05:00.800><c> add</c><00:05:00.960><c> an</c><00:05:01.120><c> edge</c><00:05:01.280><c> you're</c><00:05:01.520><c> decreasing</c>

00:05:02.070 --> 00:05:02.080 align:start position:0%
time you add an edge you're decreasing
 

00:05:02.080 --> 00:05:03.909 align:start position:0%
time you add an edge you're decreasing
the<00:05:02.240><c> total</c><00:05:02.560><c> number</c><00:05:02.880><c> of</c><00:05:02.960><c> connected</c><00:05:03.440><c> components</c>

00:05:03.909 --> 00:05:03.919 align:start position:0%
the total number of connected components
 

00:05:03.919 --> 00:05:04.710 align:start position:0%
the total number of connected components
by<00:05:04.240><c> one</c>

00:05:04.710 --> 00:05:04.720 align:start position:0%
by one
 

00:05:04.720 --> 00:05:06.870 align:start position:0%
by one
so<00:05:04.880><c> if</c><00:05:04.960><c> we</c><00:05:05.360><c> start</c><00:05:05.600><c> out</c><00:05:05.680><c> with</c><00:05:05.919><c> five</c><00:05:06.160><c> nodes</c><00:05:06.639><c> we</c>

00:05:06.870 --> 00:05:06.880 align:start position:0%
so if we start out with five nodes we
 

00:05:06.880 --> 00:05:08.550 align:start position:0%
so if we start out with five nodes we
add<00:05:07.280><c> four</c><00:05:07.600><c> edges</c><00:05:08.000><c> we</c><00:05:08.240><c> de</c>

00:05:08.550 --> 00:05:08.560 align:start position:0%
add four edges we de
 

00:05:08.560 --> 00:05:10.710 align:start position:0%
add four edges we de
we<00:05:09.039><c> decrease</c><00:05:09.440><c> the</c><00:05:09.520><c> number</c><00:05:09.840><c> of</c><00:05:10.320><c> connected</c>

00:05:10.710 --> 00:05:10.720 align:start position:0%
we decrease the number of connected
 

00:05:10.720 --> 00:05:11.909 align:start position:0%
we decrease the number of connected
components<00:05:11.120><c> by</c><00:05:11.280><c> four</c><00:05:11.520><c> then</c><00:05:11.680><c> we're</c><00:05:11.840><c> going</c><00:05:11.840><c> to</c>

00:05:11.909 --> 00:05:11.919 align:start position:0%
components by four then we're going to
 

00:05:11.919 --> 00:05:13.590 align:start position:0%
components by four then we're going to
be<00:05:12.000><c> left</c><00:05:12.240><c> with</c><00:05:12.479><c> one</c><00:05:12.720><c> connected</c><00:05:13.120><c> component</c><00:05:13.520><c> so</c>

00:05:13.590 --> 00:05:13.600 align:start position:0%
be left with one connected component so
 

00:05:13.600 --> 00:05:15.430 align:start position:0%
be left with one connected component so
if<00:05:13.759><c> we</c><00:05:13.840><c> add</c><00:05:14.160><c> another</c><00:05:14.560><c> edge</c><00:05:14.880><c> on</c><00:05:14.960><c> top</c><00:05:15.199><c> of</c><00:05:15.280><c> that</c>

00:05:15.430 --> 00:05:15.440 align:start position:0%
if we add another edge on top of that
 

00:05:15.440 --> 00:05:16.629 align:start position:0%
if we add another edge on top of that
we're<00:05:15.600><c> going</c><00:05:15.680><c> to</c><00:05:15.759><c> get</c><00:05:15.919><c> a</c><00:05:16.080><c> cycle</c>

00:05:16.629 --> 00:05:16.639 align:start position:0%
we're going to get a cycle
 

00:05:16.639 --> 00:05:18.469 align:start position:0%
we're going to get a cycle
so<00:05:16.800><c> we</c><00:05:17.039><c> want</c><00:05:17.199><c> to</c><00:05:17.360><c> connect</c><00:05:17.840><c> all</c><00:05:18.000><c> of</c><00:05:18.080><c> these</c>

00:05:18.469 --> 00:05:18.479 align:start position:0%
so we want to connect all of these
 

00:05:18.479 --> 00:05:20.230 align:start position:0%
so we want to connect all of these
without<00:05:18.960><c> creating</c><00:05:19.440><c> a</c><00:05:19.520><c> cycle</c><00:05:19.840><c> because</c><00:05:20.080><c> that's</c>

00:05:20.230 --> 00:05:20.240 align:start position:0%
without creating a cycle because that's
 

00:05:20.240 --> 00:05:22.150 align:start position:0%
without creating a cycle because that's
what<00:05:20.400><c> a</c><00:05:20.479><c> minimum</c><00:05:20.880><c> spanning</c><00:05:21.280><c> tree</c><00:05:21.680><c> is</c>

00:05:22.150 --> 00:05:22.160 align:start position:0%
what a minimum spanning tree is
 

00:05:22.160 --> 00:05:24.870 align:start position:0%
what a minimum spanning tree is
so<00:05:22.400><c> our</c><00:05:22.639><c> goal</c><00:05:22.960><c> is</c><00:05:23.120><c> to</c><00:05:23.280><c> connect</c><00:05:23.840><c> all</c><00:05:24.080><c> of</c><00:05:24.320><c> these</c>

00:05:24.870 --> 00:05:24.880 align:start position:0%
so our goal is to connect all of these
 

00:05:24.880 --> 00:05:25.189 align:start position:0%
so our goal is to connect all of these
with

00:05:25.189 --> 00:05:25.199 align:start position:0%
with
 

00:05:25.199 --> 00:05:28.230 align:start position:0%
with
exactly<00:05:25.919><c> four</c><00:05:26.400><c> edges</c><00:05:26.960><c> but</c><00:05:27.280><c> prim's</c><00:05:27.759><c> algorithm</c>

00:05:28.230 --> 00:05:28.240 align:start position:0%
exactly four edges but prim's algorithm
 

00:05:28.240 --> 00:05:28.550 align:start position:0%
exactly four edges but prim's algorithm
or

00:05:28.550 --> 00:05:28.560 align:start position:0%
or
 

00:05:28.560 --> 00:05:30.390 align:start position:0%
or
the<00:05:28.720><c> definition</c><00:05:29.199><c> of</c><00:05:29.360><c> a</c><00:05:29.520><c> minimum</c><00:05:30.000><c> spanning</c>

00:05:30.390 --> 00:05:30.400 align:start position:0%
the definition of a minimum spanning
 

00:05:30.400 --> 00:05:31.590 align:start position:0%
the definition of a minimum spanning
tree<00:05:30.639><c> is</c><00:05:30.960><c> also</c>

00:05:31.590 --> 00:05:31.600 align:start position:0%
tree is also
 

00:05:31.600 --> 00:05:34.230 align:start position:0%
tree is also
one<00:05:31.840><c> more</c><00:05:32.080><c> condition</c><00:05:32.560><c> we</c><00:05:32.720><c> want</c><00:05:32.960><c> to</c><00:05:33.360><c> minimize</c>

00:05:34.230 --> 00:05:34.240 align:start position:0%
one more condition we want to minimize
 

00:05:34.240 --> 00:05:35.110 align:start position:0%
one more condition we want to minimize
the<00:05:34.479><c> total</c>

00:05:35.110 --> 00:05:35.120 align:start position:0%
the total
 

00:05:35.120 --> 00:05:38.550 align:start position:0%
the total
cost<00:05:35.840><c> of</c><00:05:36.320><c> the</c><00:05:36.639><c> edges</c><00:05:37.199><c> now</c><00:05:37.680><c> i</c><00:05:37.840><c> didn't</c><00:05:38.080><c> actually</c>

00:05:38.550 --> 00:05:38.560 align:start position:0%
cost of the edges now i didn't actually
 

00:05:38.560 --> 00:05:40.870 align:start position:0%
cost of the edges now i didn't actually
draw<00:05:39.039><c> all</c><00:05:39.280><c> of</c><00:05:39.360><c> the</c><00:05:39.520><c> edges</c><00:05:40.080><c> all</c><00:05:40.240><c> the</c><00:05:40.400><c> possible</c>

00:05:40.870 --> 00:05:40.880 align:start position:0%
draw all of the edges all the possible
 

00:05:40.880 --> 00:05:42.230 align:start position:0%
draw all of the edges all the possible
edges<00:05:41.280><c> out</c><00:05:41.520><c> right</c><00:05:41.680><c> now</c><00:05:41.840><c> it</c><00:05:41.919><c> would</c><00:05:42.000><c> look</c>

00:05:42.230 --> 00:05:42.240 align:start position:0%
edges out right now it would look
 

00:05:42.240 --> 00:05:44.070 align:start position:0%
edges out right now it would look
something<00:05:42.560><c> like</c><00:05:42.880><c> this</c><00:05:43.199><c> right</c><00:05:43.440><c> basically</c><00:05:43.840><c> for</c>

00:05:44.070 --> 00:05:44.080 align:start position:0%
something like this right basically for
 

00:05:44.080 --> 00:05:45.189 align:start position:0%
something like this right basically for
every<00:05:44.400><c> single</c><00:05:44.720><c> node</c>

00:05:45.189 --> 00:05:45.199 align:start position:0%
every single node
 

00:05:45.199 --> 00:05:46.950 align:start position:0%
every single node
it<00:05:45.280><c> could</c><00:05:45.520><c> possibly</c><00:05:46.000><c> be</c><00:05:46.160><c> connected</c><00:05:46.560><c> to</c><00:05:46.720><c> every</c>

00:05:46.950 --> 00:05:46.960 align:start position:0%
it could possibly be connected to every
 

00:05:46.960 --> 00:05:48.870 align:start position:0%
it could possibly be connected to every
other<00:05:47.280><c> single</c><00:05:47.600><c> node</c><00:05:47.919><c> and</c><00:05:48.000><c> the</c><00:05:48.160><c> reason</c><00:05:48.560><c> i'm</c><00:05:48.639><c> not</c>

00:05:48.870 --> 00:05:48.880 align:start position:0%
other single node and the reason i'm not
 

00:05:48.880 --> 00:05:50.469 align:start position:0%
other single node and the reason i'm not
drawing<00:05:49.199><c> it</c><00:05:49.360><c> is</c><00:05:49.600><c> as</c><00:05:49.759><c> you</c><00:05:49.840><c> can</c><00:05:50.080><c> see</c>

00:05:50.469 --> 00:05:50.479 align:start position:0%
drawing it is as you can see
 

00:05:50.479 --> 00:05:52.870 align:start position:0%
drawing it is as you can see
it's<00:05:50.720><c> going</c><00:05:50.880><c> to</c><00:05:50.960><c> get</c><00:05:51.360><c> really</c><00:05:51.759><c> complicated</c>

00:05:52.870 --> 00:05:52.880 align:start position:0%
it's going to get really complicated
 

00:05:52.880 --> 00:05:54.070 align:start position:0%
it's going to get really complicated
really<00:05:53.280><c> quickly</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
really quickly
 

00:05:54.080 --> 00:05:55.510 align:start position:0%
really quickly
so<00:05:54.400><c> this</c><00:05:54.639><c> is</c><00:05:54.800><c> pretty</c><00:05:54.960><c> much</c><00:05:55.120><c> what</c><00:05:55.280><c> it</c><00:05:55.360><c> would</c>

00:05:55.510 --> 00:05:55.520 align:start position:0%
so this is pretty much what it would
 

00:05:55.520 --> 00:05:57.430 align:start position:0%
so this is pretty much what it would
look<00:05:55.680><c> like</c><00:05:55.840><c> if</c><00:05:56.000><c> i</c><00:05:56.080><c> drew</c><00:05:56.319><c> every</c><00:05:56.639><c> possible</c><00:05:57.199><c> edge</c>

00:05:57.430 --> 00:05:57.440 align:start position:0%
look like if i drew every possible edge
 

00:05:57.440 --> 00:05:58.469 align:start position:0%
look like if i drew every possible edge
that<00:05:57.680><c> could</c><00:05:57.919><c> exist</c>

00:05:58.469 --> 00:05:58.479 align:start position:0%
that could exist
 

00:05:58.479 --> 00:06:00.230 align:start position:0%
that could exist
in<00:05:58.639><c> this</c><00:05:58.880><c> graph</c><00:05:59.520><c> and</c><00:05:59.680><c> i</c><00:05:59.759><c> think</c><00:05:59.919><c> that's</c><00:06:00.160><c> going</c>

00:06:00.230 --> 00:06:00.240 align:start position:0%
in this graph and i think that's going
 

00:06:00.240 --> 00:06:01.670 align:start position:0%
in this graph and i think that's going
to<00:06:00.319><c> make</c><00:06:00.400><c> it</c><00:06:00.560><c> a</c><00:06:00.639><c> little</c><00:06:00.800><c> bit</c><00:06:01.039><c> too</c><00:06:01.199><c> messy</c><00:06:01.520><c> but</c>

00:06:01.670 --> 00:06:01.680 align:start position:0%
to make it a little bit too messy but
 

00:06:01.680 --> 00:06:02.790 align:start position:0%
to make it a little bit too messy but
let's<00:06:01.840><c> just</c><00:06:02.080><c> assume</c>

00:06:02.790 --> 00:06:02.800 align:start position:0%
let's just assume
 

00:06:02.800 --> 00:06:05.430 align:start position:0%
let's just assume
that<00:06:03.039><c> those</c><00:06:03.360><c> edges</c><00:06:03.919><c> do</c><00:06:04.240><c> exist</c><00:06:04.720><c> that</c><00:06:04.880><c> for</c><00:06:05.199><c> any</c>

00:06:05.430 --> 00:06:05.440 align:start position:0%
that those edges do exist that for any
 

00:06:05.440 --> 00:06:07.670 align:start position:0%
that those edges do exist that for any
point<00:06:05.919><c> we</c><00:06:06.160><c> could</c><00:06:06.400><c> possibly</c><00:06:06.960><c> connect</c><00:06:07.360><c> it</c>

00:06:07.670 --> 00:06:07.680 align:start position:0%
point we could possibly connect it
 

00:06:07.680 --> 00:06:10.710 align:start position:0%
point we could possibly connect it
to<00:06:08.240><c> another</c><00:06:09.120><c> point</c><00:06:09.680><c> so</c><00:06:09.840><c> the</c><00:06:10.000><c> way</c><00:06:10.240><c> prim's</c>

00:06:10.710 --> 00:06:10.720 align:start position:0%
to another point so the way prim's
 

00:06:10.720 --> 00:06:12.710 align:start position:0%
to another point so the way prim's
algorithm<00:06:11.199><c> works</c><00:06:11.520><c> is</c><00:06:11.759><c> we</c><00:06:11.919><c> can</c><00:06:12.080><c> choose</c><00:06:12.479><c> to</c>

00:06:12.710 --> 00:06:12.720 align:start position:0%
algorithm works is we can choose to
 

00:06:12.720 --> 00:06:13.350 align:start position:0%
algorithm works is we can choose to
start<00:06:13.039><c> at</c>

00:06:13.350 --> 00:06:13.360 align:start position:0%
start at
 

00:06:13.360 --> 00:06:16.790 align:start position:0%
start at
any<00:06:14.000><c> single</c><00:06:14.720><c> node</c><00:06:15.199><c> in</c><00:06:15.280><c> the</c><00:06:15.520><c> entire</c><00:06:16.160><c> graph</c>

00:06:16.790 --> 00:06:16.800 align:start position:0%
any single node in the entire graph
 

00:06:16.800 --> 00:06:19.510 align:start position:0%
any single node in the entire graph
and<00:06:17.039><c> then</c><00:06:17.759><c> very</c><00:06:18.160><c> simple</c><00:06:18.720><c> we're</c><00:06:19.039><c> just</c><00:06:19.280><c> gonna</c>

00:06:19.510 --> 00:06:19.520 align:start position:0%
and then very simple we're just gonna
 

00:06:19.520 --> 00:06:20.070 align:start position:0%
and then very simple we're just gonna
perform

00:06:20.070 --> 00:06:20.080 align:start position:0%
perform
 

00:06:20.080 --> 00:06:23.590 align:start position:0%
perform
a<00:06:20.400><c> bfs</c><00:06:21.199><c> a</c><00:06:21.440><c> breath</c><00:06:21.840><c> first</c><00:06:22.160><c> search</c><00:06:22.800><c> on</c>

00:06:23.590 --> 00:06:23.600 align:start position:0%
a bfs a breath first search on
 

00:06:23.600 --> 00:06:25.830 align:start position:0%
a bfs a breath first search on
that<00:06:24.000><c> node</c><00:06:24.720><c> where</c><00:06:25.199><c> we</c><00:06:25.440><c> are</c><00:06:25.600><c> gonna</c>

00:06:25.830 --> 00:06:25.840 align:start position:0%
that node where we are gonna
 

00:06:25.840 --> 00:06:26.870 align:start position:0%
that node where we are gonna
continuously<00:06:26.639><c> be</c>

00:06:26.870 --> 00:06:26.880 align:start position:0%
continuously be
 

00:06:26.880 --> 00:06:28.629 align:start position:0%
continuously be
for<00:06:27.039><c> every</c><00:06:27.280><c> node</c><00:06:27.520><c> that</c><00:06:27.680><c> we're</c><00:06:27.919><c> adding</c><00:06:28.479><c> we're</c>

00:06:28.629 --> 00:06:28.639 align:start position:0%
for every node that we're adding we're
 

00:06:28.639 --> 00:06:30.150 align:start position:0%
for every node that we're adding we're
gonna<00:06:28.800><c> have</c><00:06:29.039><c> two</c><00:06:29.280><c> data</c><00:06:29.520><c> structures</c><00:06:30.000><c> we're</c>

00:06:30.150 --> 00:06:30.160 align:start position:0%
gonna have two data structures we're
 

00:06:30.160 --> 00:06:30.790 align:start position:0%
gonna have two data structures we're
gonna<00:06:30.319><c> have</c><00:06:30.479><c> a</c>

00:06:30.790 --> 00:06:30.800 align:start position:0%
gonna have a
 

00:06:30.800 --> 00:06:32.710 align:start position:0%
gonna have a
visit<00:06:31.199><c> data</c><00:06:31.520><c> structure</c><00:06:31.840><c> to</c><00:06:32.160><c> to</c><00:06:32.319><c> make</c><00:06:32.560><c> sure</c>

00:06:32.710 --> 00:06:32.720 align:start position:0%
visit data structure to to make sure
 

00:06:32.720 --> 00:06:33.990 align:start position:0%
visit data structure to to make sure
that<00:06:32.880><c> we</c><00:06:33.120><c> don't</c><00:06:33.600><c> add</c>

00:06:33.990 --> 00:06:34.000 align:start position:0%
that we don't add
 

00:06:34.000 --> 00:06:36.950 align:start position:0%
that we don't add
the<00:06:34.319><c> same</c><00:06:34.880><c> node</c><00:06:35.360><c> twice</c><00:06:36.000><c> because</c><00:06:36.319><c> if</c><00:06:36.479><c> we</c><00:06:36.720><c> add</c>

00:06:36.950 --> 00:06:36.960 align:start position:0%
the same node twice because if we add
 

00:06:36.960 --> 00:06:38.390 align:start position:0%
the same node twice because if we add
the<00:06:37.199><c> same</c><00:06:37.520><c> node</c><00:06:37.840><c> twice</c>

00:06:38.390 --> 00:06:38.400 align:start position:0%
the same node twice
 

00:06:38.400 --> 00:06:39.990 align:start position:0%
the same node twice
that's<00:06:38.720><c> how</c><00:06:38.880><c> you</c><00:06:39.120><c> know</c><00:06:39.280><c> we're</c><00:06:39.440><c> gonna</c><00:06:39.680><c> get</c><00:06:39.840><c> a</c>

00:06:39.990 --> 00:06:40.000 align:start position:0%
that's how you know we're gonna get a
 

00:06:40.000 --> 00:06:41.909 align:start position:0%
that's how you know we're gonna get a
cycle<00:06:40.560><c> we</c><00:06:40.800><c> want</c><00:06:40.960><c> to</c><00:06:41.199><c> avoid</c>

00:06:41.909 --> 00:06:41.919 align:start position:0%
cycle we want to avoid
 

00:06:41.919 --> 00:06:43.990 align:start position:0%
cycle we want to avoid
cycles<00:06:42.560><c> the</c><00:06:42.800><c> second</c><00:06:43.120><c> data</c><00:06:43.440><c> structure</c><00:06:43.840><c> we're</c>

00:06:43.990 --> 00:06:44.000 align:start position:0%
cycles the second data structure we're
 

00:06:44.000 --> 00:06:46.070 align:start position:0%
cycles the second data structure we're
gonna<00:06:44.240><c> use</c><00:06:44.720><c> is</c><00:06:44.880><c> a</c><00:06:45.039><c> minimum</c><00:06:45.520><c> heat</c>

00:06:46.070 --> 00:06:46.080 align:start position:0%
gonna use is a minimum heat
 

00:06:46.080 --> 00:06:47.830 align:start position:0%
gonna use is a minimum heat
which<00:06:46.319><c> is</c><00:06:46.400><c> gonna</c><00:06:46.720><c> keep</c><00:06:46.960><c> track</c><00:06:47.280><c> of</c><00:06:47.520><c> our</c>

00:06:47.830 --> 00:06:47.840 align:start position:0%
which is gonna keep track of our
 

00:06:47.840 --> 00:06:49.110 align:start position:0%
which is gonna keep track of our
frontier

00:06:49.110 --> 00:06:49.120 align:start position:0%
frontier
 

00:06:49.120 --> 00:06:51.350 align:start position:0%
frontier
of<00:06:49.440><c> our</c><00:06:49.680><c> breadth</c><00:06:50.000><c> first</c><00:06:50.240><c> search</c><00:06:50.560><c> now</c><00:06:50.800><c> what</c><00:06:51.199><c> is</c>

00:06:51.350 --> 00:06:51.360 align:start position:0%
of our breadth first search now what is
 

00:06:51.360 --> 00:06:52.390 align:start position:0%
of our breadth first search now what is
a<00:06:51.599><c> frontier</c>

00:06:52.390 --> 00:06:52.400 align:start position:0%
a frontier
 

00:06:52.400 --> 00:06:54.629 align:start position:0%
a frontier
well<00:06:52.720><c> you</c><00:06:52.880><c> might</c><00:06:53.199><c> know</c><00:06:53.759><c> that</c><00:06:54.080><c> let's</c><00:06:54.240><c> say</c><00:06:54.479><c> we</c>

00:06:54.629 --> 00:06:54.639 align:start position:0%
well you might know that let's say we
 

00:06:54.639 --> 00:06:56.070 align:start position:0%
well you might know that let's say we
had<00:06:55.039><c> a</c><00:06:55.199><c> single</c><00:06:55.599><c> node</c>

00:06:56.070 --> 00:06:56.080 align:start position:0%
had a single node
 

00:06:56.080 --> 00:06:58.790 align:start position:0%
had a single node
so<00:06:56.720><c> we</c><00:06:56.880><c> visited</c><00:06:57.280><c> this</c><00:06:57.599><c> this</c><00:06:57.840><c> is</c><00:06:58.080><c> in</c><00:06:58.240><c> our</c><00:06:58.479><c> graph</c>

00:06:58.790 --> 00:06:58.800 align:start position:0%
so we visited this this is in our graph
 

00:06:58.800 --> 00:07:00.230 align:start position:0%
so we visited this this is in our graph
right<00:06:59.039><c> this</c><00:06:59.199><c> is</c><00:06:59.280><c> part</c><00:06:59.520><c> of</c><00:06:59.680><c> our</c>

00:07:00.230 --> 00:07:00.240 align:start position:0%
right this is part of our
 

00:07:00.240 --> 00:07:01.670 align:start position:0%
right this is part of our
minimum<00:07:00.639><c> spanning</c><00:07:01.039><c> tree</c><00:07:01.280><c> what's</c><00:07:01.520><c> the</c>

00:07:01.670 --> 00:07:01.680 align:start position:0%
minimum spanning tree what's the
 

00:07:01.680 --> 00:07:04.469 align:start position:0%
minimum spanning tree what's the
frontier<00:07:02.240><c> then</c><00:07:02.479><c> basically</c><00:07:03.199><c> every</c><00:07:03.840><c> possible</c>

00:07:04.469 --> 00:07:04.479 align:start position:0%
frontier then basically every possible
 

00:07:04.479 --> 00:07:04.950 align:start position:0%
frontier then basically every possible
node

00:07:04.950 --> 00:07:04.960 align:start position:0%
node
 

00:07:04.960 --> 00:07:07.909 align:start position:0%
node
that<00:07:05.199><c> could</c><00:07:05.440><c> be</c><00:07:05.759><c> added</c><00:07:06.560><c> from</c><00:07:07.199><c> this</c><00:07:07.440><c> position</c>

00:07:07.909 --> 00:07:07.919 align:start position:0%
that could be added from this position
 

00:07:07.919 --> 00:07:08.710 align:start position:0%
that could be added from this position
right<00:07:08.080><c> so</c>

00:07:08.710 --> 00:07:08.720 align:start position:0%
right so
 

00:07:08.720 --> 00:07:11.189 align:start position:0%
right so
initially<00:07:09.199><c> if</c><00:07:09.360><c> we</c><00:07:09.440><c> just</c><00:07:09.680><c> had</c><00:07:09.919><c> one</c><00:07:10.160><c> node</c><00:07:10.720><c> these</c>

00:07:11.189 --> 00:07:11.199 align:start position:0%
initially if we just had one node these
 

00:07:11.199 --> 00:07:12.070 align:start position:0%
initially if we just had one node these
four<00:07:11.520><c> nodes</c>

00:07:12.070 --> 00:07:12.080 align:start position:0%
four nodes
 

00:07:12.080 --> 00:07:14.629 align:start position:0%
four nodes
would<00:07:12.319><c> be</c><00:07:12.639><c> in</c><00:07:12.960><c> our</c><00:07:13.280><c> frontier</c><00:07:14.000><c> but</c><00:07:14.160><c> we're</c><00:07:14.400><c> not</c>

00:07:14.629 --> 00:07:14.639 align:start position:0%
would be in our frontier but we're not
 

00:07:14.639 --> 00:07:15.350 align:start position:0%
would be in our frontier but we're not
just<00:07:14.880><c> gonna</c><00:07:15.039><c> have</c>

00:07:15.350 --> 00:07:15.360 align:start position:0%
just gonna have
 

00:07:15.360 --> 00:07:17.110 align:start position:0%
just gonna have
each<00:07:15.680><c> node</c><00:07:16.160><c> in</c><00:07:16.240><c> the</c><00:07:16.400><c> front</c><00:07:16.639><c> here</c><00:07:16.800><c> so</c><00:07:16.960><c> we're</c>

00:07:17.110 --> 00:07:17.120 align:start position:0%
each node in the front here so we're
 

00:07:17.120 --> 00:07:19.270 align:start position:0%
each node in the front here so we're
gonna<00:07:17.360><c> have</c><00:07:17.840><c> you</c><00:07:18.000><c> know</c><00:07:18.160><c> let's</c><00:07:18.319><c> say</c>

00:07:19.270 --> 00:07:19.280 align:start position:0%
gonna have you know let's say
 

00:07:19.280 --> 00:07:22.469 align:start position:0%
gonna have you know let's say
node<00:07:19.759><c> one</c><00:07:20.479><c> and</c><00:07:20.639><c> we're</c><00:07:20.880><c> also</c><00:07:21.120><c> gonna</c><00:07:21.440><c> add</c><00:07:22.000><c> the</c>

00:07:22.469 --> 00:07:22.479 align:start position:0%
node one and we're also gonna add the
 

00:07:22.479 --> 00:07:24.790 align:start position:0%
node one and we're also gonna add the
weight<00:07:23.120><c> of</c><00:07:23.440><c> connecting</c><00:07:24.000><c> node</c><00:07:24.240><c> one</c><00:07:24.479><c> so</c><00:07:24.639><c> let's</c>

00:07:24.790 --> 00:07:24.800 align:start position:0%
weight of connecting node one so let's
 

00:07:24.800 --> 00:07:26.390 align:start position:0%
weight of connecting node one so let's
say<00:07:24.960><c> the</c><00:07:25.120><c> weight</c><00:07:25.440><c> of</c><00:07:25.520><c> the</c><00:07:25.680><c> edge</c><00:07:25.919><c> was</c><00:07:26.080><c> something</c>

00:07:26.390 --> 00:07:26.400 align:start position:0%
say the weight of the edge was something
 

00:07:26.400 --> 00:07:27.110 align:start position:0%
say the weight of the edge was something
like<00:07:26.639><c> five</c>

00:07:27.110 --> 00:07:27.120 align:start position:0%
like five
 

00:07:27.120 --> 00:07:30.629 align:start position:0%
like five
then<00:07:27.360><c> we'd</c><00:07:27.599><c> add</c><00:07:28.080><c> one</c><00:07:28.639><c> five</c><00:07:29.199><c> in</c><00:07:29.520><c> our</c><00:07:29.680><c> min</c><00:07:30.000><c> heap</c>

00:07:30.629 --> 00:07:30.639 align:start position:0%
then we'd add one five in our min heap
 

00:07:30.639 --> 00:07:32.390 align:start position:0%
then we'd add one five in our min heap
but<00:07:31.039><c> we're</c><00:07:31.280><c> not</c><00:07:31.440><c> going</c><00:07:31.520><c> to</c><00:07:31.680><c> add</c><00:07:31.919><c> it</c><00:07:32.080><c> in</c><00:07:32.160><c> this</c>

00:07:32.390 --> 00:07:32.400 align:start position:0%
but we're not going to add it in this
 

00:07:32.400 --> 00:07:34.309 align:start position:0%
but we're not going to add it in this
order<00:07:32.720><c> we're</c><00:07:32.880><c> gonna</c><00:07:33.039><c> add</c><00:07:33.280><c> it</c><00:07:33.599><c> in</c><00:07:33.680><c> the</c><00:07:33.919><c> opposite</c>

00:07:34.309 --> 00:07:34.319 align:start position:0%
order we're gonna add it in the opposite
 

00:07:34.319 --> 00:07:34.790 align:start position:0%
order we're gonna add it in the opposite
order

00:07:34.790 --> 00:07:34.800 align:start position:0%
order
 

00:07:34.800 --> 00:07:37.830 align:start position:0%
order
five<00:07:35.680><c> one</c><00:07:36.240><c> because</c><00:07:36.800><c> when</c><00:07:36.960><c> we're</c><00:07:37.199><c> popping</c><00:07:37.680><c> from</c>

00:07:37.830 --> 00:07:37.840 align:start position:0%
five one because when we're popping from
 

00:07:37.840 --> 00:07:38.710 align:start position:0%
five one because when we're popping from
the<00:07:38.080><c> min</c><00:07:38.319><c> heap</c>

00:07:38.710 --> 00:07:38.720 align:start position:0%
the min heap
 

00:07:38.720 --> 00:07:41.670 align:start position:0%
the min heap
we're<00:07:38.960><c> gonna</c><00:07:39.199><c> be</c><00:07:39.440><c> wanting</c><00:07:39.840><c> to</c><00:07:40.080><c> pop</c><00:07:40.720><c> whatever</c>

00:07:41.670 --> 00:07:41.680 align:start position:0%
we're gonna be wanting to pop whatever
 

00:07:41.680 --> 00:07:43.350 align:start position:0%
we're gonna be wanting to pop whatever
node<00:07:42.080><c> we</c><00:07:42.240><c> can</c><00:07:42.479><c> connect</c>

00:07:43.350 --> 00:07:43.360 align:start position:0%
node we can connect
 

00:07:43.360 --> 00:07:46.629 align:start position:0%
node we can connect
next<00:07:44.000><c> with</c><00:07:44.240><c> the</c><00:07:44.560><c> minimum</c><00:07:45.360><c> possible</c><00:07:46.080><c> cost</c>

00:07:46.629 --> 00:07:46.639 align:start position:0%
next with the minimum possible cost
 

00:07:46.639 --> 00:07:49.749 align:start position:0%
next with the minimum possible cost
so<00:07:46.879><c> let's</c><00:07:47.039><c> say</c><00:07:47.199><c> we</c><00:07:47.360><c> had</c><00:07:47.759><c> five</c><00:07:48.400><c> you</c><00:07:48.479><c> know</c><00:07:48.879><c> three</c>

00:07:49.749 --> 00:07:49.759 align:start position:0%
so let's say we had five you know three
 

00:07:49.759 --> 00:07:52.230 align:start position:0%
so let's say we had five you know three
two<00:07:50.560><c> and</c><00:07:50.879><c> you</c><00:07:51.039><c> know</c><00:07:51.199><c> up</c><00:07:51.280><c> here</c><00:07:51.520><c> we</c><00:07:51.680><c> have</c><00:07:51.759><c> a</c><00:07:51.919><c> six</c>

00:07:52.230 --> 00:07:52.240 align:start position:0%
two and you know up here we have a six
 

00:07:52.240 --> 00:07:53.029 align:start position:0%
two and you know up here we have a six
or<00:07:52.400><c> something</c>

00:07:53.029 --> 00:07:53.039 align:start position:0%
or something
 

00:07:53.039 --> 00:07:55.909 align:start position:0%
or something
out<00:07:53.280><c> of</c><00:07:53.599><c> all</c><00:07:53.919><c> these</c><00:07:54.479><c> four</c><00:07:54.879><c> nodes</c><00:07:55.440><c> which</c><00:07:55.759><c> of</c>

00:07:55.909 --> 00:07:55.919 align:start position:0%
out of all these four nodes which of
 

00:07:55.919 --> 00:07:57.990 align:start position:0%
out of all these four nodes which of
them<00:07:56.160><c> can</c><00:07:56.319><c> we</c><00:07:56.560><c> connect</c><00:07:57.039><c> with</c><00:07:57.280><c> the</c><00:07:57.440><c> minimum</c>

00:07:57.990 --> 00:07:58.000 align:start position:0%
them can we connect with the minimum
 

00:07:58.000 --> 00:07:59.749 align:start position:0%
them can we connect with the minimum
possible<00:07:58.560><c> cost</c><00:07:59.120><c> that's</c><00:07:59.360><c> what</c><00:07:59.440><c> we're</c><00:07:59.599><c> going</c><00:07:59.680><c> to</c>

00:07:59.749 --> 00:07:59.759 align:start position:0%
possible cost that's what we're going to
 

00:07:59.759 --> 00:08:01.270 align:start position:0%
possible cost that's what we're going to
use<00:08:00.000><c> our</c><00:08:00.160><c> min</c><00:08:00.400><c> heap</c><00:08:00.720><c> for</c>

00:08:01.270 --> 00:08:01.280 align:start position:0%
use our min heap for
 

00:08:01.280 --> 00:08:02.869 align:start position:0%
use our min heap for
looking<00:08:01.599><c> at</c><00:08:01.680><c> it</c><00:08:01.759><c> you</c><00:08:01.919><c> can</c><00:08:02.000><c> tell</c><00:08:02.240><c> okay</c><00:08:02.479><c> this</c><00:08:02.639><c> one</c>

00:08:02.869 --> 00:08:02.879 align:start position:0%
looking at it you can tell okay this one
 

00:08:02.879 --> 00:08:04.309 align:start position:0%
looking at it you can tell okay this one
because<00:08:03.120><c> it</c><00:08:03.199><c> has</c><00:08:03.440><c> a</c><00:08:03.599><c> cost</c><00:08:04.000><c> of</c>

00:08:04.309 --> 00:08:04.319 align:start position:0%
because it has a cost of
 

00:08:04.319 --> 00:08:06.230 align:start position:0%
because it has a cost of
2<00:08:04.800><c> so</c><00:08:04.960><c> then</c><00:08:05.120><c> we're</c><00:08:05.280><c> going</c><00:08:05.360><c> to</c><00:08:05.440><c> connect</c><00:08:05.919><c> that</c>

00:08:06.230 --> 00:08:06.240 align:start position:0%
2 so then we're going to connect that
 

00:08:06.240 --> 00:08:07.670 align:start position:0%
2 so then we're going to connect that
that<00:08:06.479><c> so</c><00:08:06.639><c> then</c><00:08:06.800><c> that's</c><00:08:07.120><c> going</c><00:08:07.199><c> to</c><00:08:07.280><c> be</c><00:08:07.440><c> a</c><00:08:07.520><c> part</c>

00:08:07.670 --> 00:08:07.680 align:start position:0%
that so then that's going to be a part
 

00:08:07.680 --> 00:08:08.869 align:start position:0%
that so then that's going to be a part
of<00:08:07.840><c> our</c><00:08:08.000><c> frontier</c>

00:08:08.869 --> 00:08:08.879 align:start position:0%
of our frontier
 

00:08:08.879 --> 00:08:11.270 align:start position:0%
of our frontier
so<00:08:09.199><c> next</c><00:08:09.680><c> we're</c><00:08:09.840><c> going</c><00:08:09.919><c> to</c><00:08:10.000><c> say</c><00:08:10.240><c> okay</c><00:08:10.720><c> we</c><00:08:10.879><c> have</c>

00:08:11.270 --> 00:08:11.280 align:start position:0%
so next we're going to say okay we have
 

00:08:11.280 --> 00:08:12.070 align:start position:0%
so next we're going to say okay we have
two<00:08:11.599><c> nodes</c>

00:08:12.070 --> 00:08:12.080 align:start position:0%
two nodes
 

00:08:12.080 --> 00:08:14.309 align:start position:0%
two nodes
a<00:08:12.240><c> part</c><00:08:12.479><c> of</c><00:08:12.560><c> our</c><00:08:12.720><c> frontier</c><00:08:13.680><c> next</c><00:08:14.000><c> what</c><00:08:14.160><c> we're</c>

00:08:14.309 --> 00:08:14.319 align:start position:0%
a part of our frontier next what we're
 

00:08:14.319 --> 00:08:15.430 align:start position:0%
a part of our frontier next what we're
gonna<00:08:14.479><c> do</c><00:08:14.720><c> is</c><00:08:14.960><c> add</c>

00:08:15.430 --> 00:08:15.440 align:start position:0%
gonna do is add
 

00:08:15.440 --> 00:08:17.670 align:start position:0%
gonna do is add
more<00:08:15.840><c> nodes</c><00:08:16.319><c> to</c><00:08:16.479><c> our</c><00:08:16.639><c> frontier</c><00:08:17.280><c> even</c><00:08:17.440><c> though</c>

00:08:17.670 --> 00:08:17.680 align:start position:0%
more nodes to our frontier even though
 

00:08:17.680 --> 00:08:18.790 align:start position:0%
more nodes to our frontier even though
we<00:08:17.840><c> already</c><00:08:18.240><c> had</c>

00:08:18.790 --> 00:08:18.800 align:start position:0%
we already had
 

00:08:18.800 --> 00:08:20.950 align:start position:0%
we already had
all<00:08:19.120><c> three</c><00:08:19.360><c> of</c><00:08:19.520><c> these</c><00:08:19.840><c> nodes</c><00:08:20.240><c> we're</c><00:08:20.400><c> gonna</c><00:08:20.720><c> add</c>

00:08:20.950 --> 00:08:20.960 align:start position:0%
all three of these nodes we're gonna add
 

00:08:20.960 --> 00:08:22.390 align:start position:0%
all three of these nodes we're gonna add
them<00:08:21.199><c> again</c>

00:08:22.390 --> 00:08:22.400 align:start position:0%
them again
 

00:08:22.400 --> 00:08:26.710 align:start position:0%
them again
to<00:08:23.039><c> our</c><00:08:24.080><c> frontier</c><00:08:24.879><c> because</c><00:08:25.360><c> now</c><00:08:25.919><c> possibly</c><00:08:26.560><c> if</c>

00:08:26.710 --> 00:08:26.720 align:start position:0%
to our frontier because now possibly if
 

00:08:26.720 --> 00:08:28.629 align:start position:0%
to our frontier because now possibly if
we're<00:08:26.960><c> if</c><00:08:27.039><c> we're</c><00:08:27.280><c> starting</c><00:08:27.680><c> from</c><00:08:27.919><c> node</c><00:08:28.319><c> four</c>

00:08:28.629 --> 00:08:28.639 align:start position:0%
we're if we're starting from node four
 

00:08:28.639 --> 00:08:30.230 align:start position:0%
we're if we're starting from node four
and<00:08:28.800><c> we're</c><00:08:28.960><c> trying</c><00:08:29.199><c> to</c><00:08:29.280><c> connect</c><00:08:29.599><c> to</c><00:08:29.840><c> three</c>

00:08:30.230 --> 00:08:30.240 align:start position:0%
and we're trying to connect to three
 

00:08:30.240 --> 00:08:32.790 align:start position:0%
and we're trying to connect to three
one<00:08:30.560><c> or</c><00:08:30.879><c> two</c><00:08:31.520><c> it's</c><00:08:31.759><c> possible</c><00:08:32.479><c> that</c><00:08:32.640><c> the</c>

00:08:32.790 --> 00:08:32.800 align:start position:0%
one or two it's possible that the
 

00:08:32.800 --> 00:08:33.589 align:start position:0%
one or two it's possible that the
connection

00:08:33.589 --> 00:08:33.599 align:start position:0%
connection
 

00:08:33.599 --> 00:08:36.389 align:start position:0%
connection
from<00:08:34.080><c> four</c><00:08:34.320><c> to</c><00:08:34.560><c> three</c><00:08:34.880><c> or</c><00:08:35.120><c> four</c><00:08:35.440><c> to</c><00:08:35.760><c> two</c><00:08:36.080><c> or</c>

00:08:36.389 --> 00:08:36.399 align:start position:0%
from four to three or four to two or
 

00:08:36.399 --> 00:08:37.430 align:start position:0%
from four to three or four to two or
four<00:08:36.640><c> to</c><00:08:36.880><c> one</c>

00:08:37.430 --> 00:08:37.440 align:start position:0%
four to one
 

00:08:37.440 --> 00:08:39.589 align:start position:0%
four to one
could<00:08:37.680><c> be</c><00:08:38.000><c> smaller</c><00:08:38.640><c> than</c><00:08:38.880><c> the</c><00:08:38.959><c> connection</c>

00:08:39.589 --> 00:08:39.599 align:start position:0%
could be smaller than the connection
 

00:08:39.599 --> 00:08:40.870 align:start position:0%
could be smaller than the connection
from<00:08:40.399><c> one</c>

00:08:40.870 --> 00:08:40.880 align:start position:0%
from one
 

00:08:40.880 --> 00:08:43.029 align:start position:0%
from one
to<00:08:41.120><c> those</c><00:08:41.440><c> respective</c><00:08:42.000><c> nodes</c><00:08:42.240><c> so</c><00:08:42.399><c> we</c><00:08:42.640><c> always</c>

00:08:43.029 --> 00:08:43.039 align:start position:0%
to those respective nodes so we always
 

00:08:43.039 --> 00:08:44.389 align:start position:0%
to those respective nodes so we always
want<00:08:43.200><c> to</c><00:08:43.360><c> connect</c><00:08:43.760><c> a</c><00:08:43.919><c> node</c>

00:08:44.389 --> 00:08:44.399 align:start position:0%
want to connect a node
 

00:08:44.399 --> 00:08:46.470 align:start position:0%
want to connect a node
with<00:08:44.560><c> the</c><00:08:44.720><c> minimum</c><00:08:45.200><c> possible</c><00:08:45.839><c> cost</c><00:08:46.240><c> that</c><00:08:46.399><c> it</c>

00:08:46.470 --> 00:08:46.480 align:start position:0%
with the minimum possible cost that it
 

00:08:46.480 --> 00:08:48.310 align:start position:0%
with the minimum possible cost that it
takes<00:08:46.800><c> us</c><00:08:47.200><c> if</c><00:08:47.360><c> it</c><00:08:47.519><c> costs</c>

00:08:48.310 --> 00:08:48.320 align:start position:0%
takes us if it costs
 

00:08:48.320 --> 00:08:50.630 align:start position:0%
takes us if it costs
less<00:08:48.800><c> to</c><00:08:48.959><c> connect</c><00:08:49.360><c> it</c><00:08:49.440><c> to</c><00:08:49.760><c> four</c><00:08:50.240><c> then</c><00:08:50.480><c> to</c>

00:08:50.630 --> 00:08:50.640 align:start position:0%
less to connect it to four then to
 

00:08:50.640 --> 00:08:51.829 align:start position:0%
less to connect it to four then to
connect<00:08:50.959><c> it</c><00:08:51.120><c> to</c><00:08:51.360><c> one</c>

00:08:51.829 --> 00:08:51.839 align:start position:0%
connect it to one
 

00:08:51.839 --> 00:08:53.350 align:start position:0%
connect it to one
we're<00:08:52.080><c> going</c><00:08:52.160><c> to</c><00:08:52.320><c> take</c><00:08:52.720><c> the</c><00:08:52.880><c> one</c><00:08:53.040><c> with</c><00:08:53.200><c> the</c>

00:08:53.350 --> 00:08:53.360 align:start position:0%
we're going to take the one with the
 

00:08:53.360 --> 00:08:55.590 align:start position:0%
we're going to take the one with the
smaller<00:08:53.839><c> cost</c><00:08:54.640><c> and</c><00:08:54.800><c> of</c><00:08:54.959><c> course</c>

00:08:55.590 --> 00:08:55.600 align:start position:0%
smaller cost and of course
 

00:08:55.600 --> 00:08:57.910 align:start position:0%
smaller cost and of course
as<00:08:55.760><c> we</c><00:08:56.000><c> visit</c><00:08:56.320><c> nodes</c><00:08:56.640><c> we</c><00:08:56.800><c> visit</c><00:08:57.120><c> zero</c><00:08:57.440><c> we</c><00:08:57.600><c> visit</c>

00:08:57.910 --> 00:08:57.920 align:start position:0%
as we visit nodes we visit zero we visit
 

00:08:57.920 --> 00:08:59.190 align:start position:0%
as we visit nodes we visit zero we visit
four<00:08:58.080><c> we're</c><00:08:58.240><c> gonna</c><00:08:58.399><c> add</c><00:08:58.560><c> them</c><00:08:58.720><c> to</c><00:08:58.880><c> our</c><00:08:58.959><c> hash</c>

00:08:59.190 --> 00:08:59.200 align:start position:0%
four we're gonna add them to our hash
 

00:08:59.200 --> 00:08:59.670 align:start position:0%
four we're gonna add them to our hash
set<00:08:59.360><c> so</c>

00:08:59.670 --> 00:08:59.680 align:start position:0%
set so
 

00:08:59.680 --> 00:09:01.110 align:start position:0%
set so
that<00:08:59.839><c> we</c><00:09:00.000><c> don't</c><00:09:00.240><c> you</c><00:09:00.399><c> know</c><00:09:00.560><c> starting</c><00:09:00.880><c> from</c>

00:09:01.110 --> 00:09:01.120 align:start position:0%
that we don't you know starting from
 

00:09:01.120 --> 00:09:03.509 align:start position:0%
that we don't you know starting from
four<00:09:01.600><c> we're</c><00:09:01.760><c> not</c><00:09:01.920><c> gonna</c><00:09:02.080><c> go</c><00:09:02.480><c> back</c><00:09:02.800><c> to</c><00:09:03.040><c> one</c><00:09:03.279><c> and</c>

00:09:03.509 --> 00:09:03.519 align:start position:0%
four we're not gonna go back to one and
 

00:09:03.519 --> 00:09:04.310 align:start position:0%
four we're not gonna go back to one and
add<00:09:03.920><c> one</c>

00:09:04.310 --> 00:09:04.320 align:start position:0%
add one
 

00:09:04.320 --> 00:09:07.190 align:start position:0%
add one
again<00:09:05.120><c> because</c><00:09:05.440><c> that</c><00:09:05.600><c> would</c><00:09:05.839><c> create</c><00:09:06.320><c> a</c><00:09:06.560><c> loop</c>

00:09:07.190 --> 00:09:07.200 align:start position:0%
again because that would create a loop
 

00:09:07.200 --> 00:09:08.870 align:start position:0%
again because that would create a loop
and<00:09:07.440><c> how</c><00:09:07.600><c> do</c><00:09:07.760><c> you</c><00:09:07.920><c> know</c><00:09:08.240><c> that</c><00:09:08.399><c> we</c><00:09:08.560><c> can</c>

00:09:08.870 --> 00:09:08.880 align:start position:0%
and how do you know that we can
 

00:09:08.880 --> 00:09:11.190 align:start position:0%
and how do you know that we can
stop<00:09:09.279><c> the</c><00:09:09.519><c> execution</c><00:09:10.080><c> of</c><00:09:10.240><c> prim's</c><00:09:10.640><c> algorithm</c>

00:09:11.190 --> 00:09:11.200 align:start position:0%
stop the execution of prim's algorithm
 

00:09:11.200 --> 00:09:12.310 align:start position:0%
stop the execution of prim's algorithm
well<00:09:11.600><c> once</c><00:09:11.920><c> the</c>

00:09:12.310 --> 00:09:12.320 align:start position:0%
well once the
 

00:09:12.320 --> 00:09:14.710 align:start position:0%
well once the
length<00:09:12.800><c> of</c><00:09:12.959><c> our</c><00:09:13.200><c> visit</c><00:09:13.600><c> set</c><00:09:13.920><c> the</c><00:09:14.399><c> the</c><00:09:14.560><c> number</c>

00:09:14.710 --> 00:09:14.720 align:start position:0%
length of our visit set the the number
 

00:09:14.720 --> 00:09:16.070 align:start position:0%
length of our visit set the the number
of<00:09:14.880><c> nodes</c><00:09:15.120><c> that</c><00:09:15.279><c> we've</c><00:09:15.519><c> added</c>

00:09:16.070 --> 00:09:16.080 align:start position:0%
of nodes that we've added
 

00:09:16.080 --> 00:09:18.389 align:start position:0%
of nodes that we've added
is<00:09:16.399><c> equal</c><00:09:16.880><c> to</c><00:09:17.279><c> 5</c><00:09:17.600><c> which</c><00:09:17.839><c> is</c><00:09:17.920><c> the</c><00:09:18.080><c> number</c><00:09:18.320><c> of</c>

00:09:18.389 --> 00:09:18.399 align:start position:0%
is equal to 5 which is the number of
 

00:09:18.399 --> 00:09:19.509 align:start position:0%
is equal to 5 which is the number of
nodes<00:09:18.720><c> that</c><00:09:18.800><c> we</c><00:09:18.959><c> started</c>

00:09:19.509 --> 00:09:19.519 align:start position:0%
nodes that we started
 

00:09:19.519 --> 00:09:22.150 align:start position:0%
nodes that we started
out<00:09:19.760><c> with</c><00:09:20.399><c> so</c><00:09:20.560><c> with</c><00:09:20.800><c> all</c><00:09:20.959><c> that</c><00:09:21.200><c> being</c><00:09:21.519><c> said</c><00:09:22.000><c> you</c>

00:09:22.150 --> 00:09:22.160 align:start position:0%
out with so with all that being said you
 

00:09:22.160 --> 00:09:23.670 align:start position:0%
out with so with all that being said you
just<00:09:22.320><c> have</c><00:09:22.480><c> to</c><00:09:22.560><c> understand</c><00:09:22.959><c> how</c><00:09:23.200><c> these</c><00:09:23.440><c> data</c>

00:09:23.670 --> 00:09:23.680 align:start position:0%
just have to understand how these data
 

00:09:23.680 --> 00:09:25.030 align:start position:0%
just have to understand how these data
structures<00:09:24.160><c> are</c><00:09:24.240><c> contributing</c><00:09:24.800><c> to</c><00:09:24.959><c> the</c>

00:09:25.030 --> 00:09:25.040 align:start position:0%
structures are contributing to the
 

00:09:25.040 --> 00:09:26.310 align:start position:0%
structures are contributing to the
solution<00:09:25.440><c> and</c><00:09:25.519><c> then</c><00:09:25.680><c> we</c><00:09:25.760><c> can</c><00:09:25.839><c> go</c><00:09:26.000><c> ahead</c><00:09:26.160><c> and</c>

00:09:26.310 --> 00:09:26.320 align:start position:0%
solution and then we can go ahead and
 

00:09:26.320 --> 00:09:28.230 align:start position:0%
solution and then we can go ahead and
walk<00:09:26.640><c> through</c><00:09:26.800><c> it</c><00:09:26.880><c> so</c><00:09:27.040><c> let's</c><00:09:27.360><c> start</c><00:09:27.680><c> at</c><00:09:27.920><c> zero</c>

00:09:28.230 --> 00:09:28.240 align:start position:0%
walk through it so let's start at zero
 

00:09:28.240 --> 00:09:29.750 align:start position:0%
walk through it so let's start at zero
you<00:09:28.320><c> can</c><00:09:28.480><c> start</c><00:09:28.720><c> at</c><00:09:28.880><c> any</c><00:09:29.120><c> node</c><00:09:29.360><c> you</c><00:09:29.440><c> can</c><00:09:29.600><c> start</c>

00:09:29.750 --> 00:09:29.760 align:start position:0%
you can start at any node you can start
 

00:09:29.760 --> 00:09:30.550 align:start position:0%
you can start at any node you can start
at<00:09:29.920><c> three</c>

00:09:30.550 --> 00:09:30.560 align:start position:0%
at three
 

00:09:30.560 --> 00:09:32.550 align:start position:0%
at three
two<00:09:31.200><c> four</c><00:09:31.600><c> but</c><00:09:31.839><c> in</c><00:09:31.920><c> this</c><00:09:32.080><c> case</c><00:09:32.240><c> we're</c><00:09:32.399><c> gonna</c>

00:09:32.550 --> 00:09:32.560 align:start position:0%
two four but in this case we're gonna
 

00:09:32.560 --> 00:09:34.150 align:start position:0%
two four but in this case we're gonna
start<00:09:32.880><c> at</c><00:09:33.040><c> zero</c><00:09:33.360><c> just</c><00:09:33.519><c> because</c><00:09:33.760><c> it</c><00:09:33.839><c> makes</c>

00:09:34.150 --> 00:09:34.160 align:start position:0%
start at zero just because it makes
 

00:09:34.160 --> 00:09:34.630 align:start position:0%
start at zero just because it makes
sense

00:09:34.630 --> 00:09:34.640 align:start position:0%
sense
 

00:09:34.640 --> 00:09:36.150 align:start position:0%
sense
so<00:09:34.800><c> when</c><00:09:35.040><c> we</c><00:09:35.200><c> start</c><00:09:35.519><c> at</c><00:09:35.680><c> zero</c><00:09:35.920><c> what</c><00:09:36.080><c> we're</c>

00:09:36.150 --> 00:09:36.160 align:start position:0%
so when we start at zero what we're
 

00:09:36.160 --> 00:09:37.829 align:start position:0%
so when we start at zero what we're
doing<00:09:36.399><c> is</c><00:09:36.560><c> we're</c><00:09:36.800><c> adding</c><00:09:37.040><c> it</c><00:09:37.120><c> to</c><00:09:37.279><c> visit</c><00:09:37.680><c> and</c>

00:09:37.829 --> 00:09:37.839 align:start position:0%
doing is we're adding it to visit and
 

00:09:37.839 --> 00:09:39.350 align:start position:0%
doing is we're adding it to visit and
we're<00:09:38.080><c> adding</c><00:09:38.399><c> it</c><00:09:38.480><c> to</c><00:09:38.560><c> the</c><00:09:38.720><c> frontier</c><00:09:39.200><c> so</c>

00:09:39.350 --> 00:09:39.360 align:start position:0%
we're adding it to the frontier so
 

00:09:39.360 --> 00:09:39.990 align:start position:0%
we're adding it to the frontier so
what's<00:09:39.680><c> the</c>

00:09:39.990 --> 00:09:40.000 align:start position:0%
what's the
 

00:09:40.000 --> 00:09:42.949 align:start position:0%
what's the
cost<00:09:40.640><c> of</c><00:09:40.880><c> connecting</c><00:09:41.519><c> zero</c><00:09:42.320><c> well</c><00:09:42.640><c> if</c><00:09:42.800><c> we're</c>

00:09:42.949 --> 00:09:42.959 align:start position:0%
cost of connecting zero well if we're
 

00:09:42.959 --> 00:09:44.389 align:start position:0%
cost of connecting zero well if we're
just<00:09:43.120><c> connecting</c><00:09:43.600><c> a</c><00:09:43.680><c> single</c><00:09:43.920><c> node</c><00:09:44.160><c> to</c><00:09:44.240><c> the</c>

00:09:44.389 --> 00:09:44.399 align:start position:0%
just connecting a single node to the
 

00:09:44.399 --> 00:09:45.829 align:start position:0%
just connecting a single node to the
graph<00:09:44.560><c> we're</c><00:09:44.720><c> not</c><00:09:44.880><c> actually</c><00:09:45.200><c> including</c><00:09:45.600><c> any</c>

00:09:45.829 --> 00:09:45.839 align:start position:0%
graph we're not actually including any
 

00:09:45.839 --> 00:09:47.509 align:start position:0%
graph we're not actually including any
edges<00:09:46.160><c> so</c><00:09:46.320><c> the</c><00:09:46.399><c> cost</c><00:09:46.720><c> is</c><00:09:46.800><c> going</c><00:09:46.880><c> to</c><00:09:46.959><c> be</c><00:09:47.120><c> zero</c>

00:09:47.509 --> 00:09:47.519 align:start position:0%
edges so the cost is going to be zero
 

00:09:47.519 --> 00:09:49.750 align:start position:0%
edges so the cost is going to be zero
and<00:09:47.600><c> the</c><00:09:47.760><c> node</c><00:09:48.080><c> value</c><00:09:48.399><c> is</c><00:09:48.560><c> going</c><00:09:48.640><c> to</c><00:09:48.720><c> be</c><00:09:48.880><c> zero</c>

00:09:49.750 --> 00:09:49.760 align:start position:0%
and the node value is going to be zero
 

00:09:49.760 --> 00:09:51.509 align:start position:0%
and the node value is going to be zero
and<00:09:49.839><c> so</c><00:09:50.000><c> the</c><00:09:50.080><c> way</c><00:09:50.240><c> this</c><00:09:50.480><c> algorithm</c><00:09:50.959><c> works</c><00:09:51.200><c> is</c>

00:09:51.509 --> 00:09:51.519 align:start position:0%
and so the way this algorithm works is
 

00:09:51.519 --> 00:09:53.030 align:start position:0%
and so the way this algorithm works is
at<00:09:51.760><c> each</c><00:09:52.000><c> step</c><00:09:52.320><c> we're</c><00:09:52.480><c> just</c><00:09:52.640><c> going</c><00:09:52.800><c> to</c>

00:09:53.030 --> 00:09:53.040 align:start position:0%
at each step we're just going to
 

00:09:53.040 --> 00:09:55.350 align:start position:0%
at each step we're just going to
pop<00:09:53.600><c> from</c><00:09:53.839><c> the</c><00:09:54.080><c> min</c><00:09:54.320><c> heap</c><00:09:54.560><c> so</c><00:09:54.640><c> let's</c><00:09:54.880><c> pop</c><00:09:55.200><c> the</c>

00:09:55.350 --> 00:09:55.360 align:start position:0%
pop from the min heap so let's pop the
 

00:09:55.360 --> 00:09:56.230 align:start position:0%
pop from the min heap so let's pop the
first<00:09:55.680><c> value</c>

00:09:56.230 --> 00:09:56.240 align:start position:0%
first value
 

00:09:56.240 --> 00:09:58.949 align:start position:0%
first value
this<00:09:56.640><c> right</c><00:09:56.800><c> so</c><00:09:57.279><c> the</c><00:09:57.440><c> total</c><00:09:57.920><c> cost</c><00:09:58.240><c> so</c><00:09:58.560><c> far</c><00:09:58.800><c> is</c>

00:09:58.949 --> 00:09:58.959 align:start position:0%
this right so the total cost so far is
 

00:09:58.959 --> 00:10:00.470 align:start position:0%
this right so the total cost so far is
zero<00:09:59.279><c> right</c><00:09:59.440><c> we</c><00:09:59.600><c> don't</c><00:09:59.760><c> actually</c><00:10:00.000><c> have</c><00:10:00.160><c> to</c><00:10:00.240><c> add</c>

00:10:00.470 --> 00:10:00.480 align:start position:0%
zero right we don't actually have to add
 

00:10:00.480 --> 00:10:01.670 align:start position:0%
zero right we don't actually have to add
any<00:10:00.800><c> cost</c>

00:10:01.670 --> 00:10:01.680 align:start position:0%
any cost
 

00:10:01.680 --> 00:10:03.350 align:start position:0%
any cost
and<00:10:01.760><c> that's</c><00:10:02.000><c> actually</c><00:10:02.399><c> one</c><00:10:02.640><c> other</c><00:10:02.880><c> variable</c>

00:10:03.350 --> 00:10:03.360 align:start position:0%
and that's actually one other variable
 

00:10:03.360 --> 00:10:04.710 align:start position:0%
and that's actually one other variable
we're<00:10:03.519><c> going</c><00:10:03.600><c> to</c><00:10:03.680><c> be</c><00:10:03.760><c> maintaining</c><00:10:04.480><c> let</c><00:10:04.640><c> me</c>

00:10:04.710 --> 00:10:04.720 align:start position:0%
we're going to be maintaining let me
 

00:10:04.720 --> 00:10:06.310 align:start position:0%
we're going to be maintaining let me
just<00:10:04.880><c> write</c><00:10:05.040><c> it</c><00:10:05.120><c> down</c><00:10:05.440><c> down</c><00:10:05.760><c> here</c>

00:10:06.310 --> 00:10:06.320 align:start position:0%
just write it down down here
 

00:10:06.320 --> 00:10:08.470 align:start position:0%
just write it down down here
so<00:10:06.720><c> so</c><00:10:06.959><c> far</c><00:10:07.120><c> the</c><00:10:07.279><c> cost</c><00:10:07.760><c> is</c><00:10:07.920><c> zero</c><00:10:08.240><c> we're</c><00:10:08.399><c> going</c>

00:10:08.470 --> 00:10:08.480 align:start position:0%
so so far the cost is zero we're going
 

00:10:08.480 --> 00:10:10.550 align:start position:0%
so so far the cost is zero we're going
to<00:10:08.560><c> continuously</c><00:10:09.120><c> be</c><00:10:09.360><c> adding</c><00:10:09.680><c> to</c><00:10:09.839><c> it</c><00:10:10.000><c> though</c>

00:10:10.550 --> 00:10:10.560 align:start position:0%
to continuously be adding to it though
 

00:10:10.560 --> 00:10:13.430 align:start position:0%
to continuously be adding to it though
but<00:10:10.880><c> next</c><00:10:11.519><c> for</c><00:10:11.839><c> zero</c><00:10:12.240><c> we're</c><00:10:12.480><c> now</c><00:10:12.720><c> going</c><00:10:12.800><c> to</c><00:10:13.040><c> add</c>

00:10:13.430 --> 00:10:13.440 align:start position:0%
but next for zero we're now going to add
 

00:10:13.440 --> 00:10:14.470 align:start position:0%
but next for zero we're now going to add
every<00:10:13.839><c> one</c><00:10:14.000><c> of</c><00:10:14.160><c> its</c>

00:10:14.470 --> 00:10:14.480 align:start position:0%
every one of its
 

00:10:14.480 --> 00:10:18.230 align:start position:0%
every one of its
neighbors<00:10:15.279><c> to</c><00:10:15.760><c> the</c><00:10:16.079><c> frontier</c><00:10:17.360><c> and</c><00:10:17.920><c> the</c><00:10:18.079><c> way</c>

00:10:18.230 --> 00:10:18.240 align:start position:0%
neighbors to the frontier and the way
 

00:10:18.240 --> 00:10:19.829 align:start position:0%
neighbors to the frontier and the way
we're<00:10:18.399><c> gonna</c><00:10:18.640><c> add</c><00:10:18.800><c> it</c><00:10:18.959><c> i</c><00:10:19.120><c> haven't</c><00:10:19.360><c> drawn</c><00:10:19.680><c> it</c>

00:10:19.829 --> 00:10:19.839 align:start position:0%
we're gonna add it i haven't drawn it
 

00:10:19.839 --> 00:10:21.190 align:start position:0%
we're gonna add it i haven't drawn it
out<00:10:19.920><c> but</c><00:10:20.079><c> there</c><00:10:20.320><c> is</c><00:10:20.399><c> gonna</c><00:10:20.640><c> be</c><00:10:20.880><c> like</c><00:10:21.040><c> an</c>

00:10:21.190 --> 00:10:21.200 align:start position:0%
out but there is gonna be like an
 

00:10:21.200 --> 00:10:22.550 align:start position:0%
out but there is gonna be like an
adjacency<00:10:21.920><c> list</c>

00:10:22.550 --> 00:10:22.560 align:start position:0%
adjacency list
 

00:10:22.560 --> 00:10:24.550 align:start position:0%
adjacency list
so<00:10:22.800><c> we</c><00:10:22.959><c> will</c><00:10:23.200><c> have</c><00:10:23.360><c> a</c><00:10:23.440><c> list</c><00:10:23.760><c> of</c><00:10:23.920><c> neighbors</c><00:10:24.320><c> for</c>

00:10:24.550 --> 00:10:24.560 align:start position:0%
so we will have a list of neighbors for
 

00:10:24.560 --> 00:10:26.630 align:start position:0%
so we will have a list of neighbors for
zero<00:10:25.200><c> of</c><00:10:25.279><c> course</c><00:10:25.600><c> it</c><00:10:25.680><c> could</c><00:10:25.839><c> be</c><00:10:26.000><c> connected</c><00:10:26.399><c> to</c>

00:10:26.630 --> 00:10:26.640 align:start position:0%
zero of course it could be connected to
 

00:10:26.640 --> 00:10:28.550 align:start position:0%
zero of course it could be connected to
every<00:10:26.880><c> single</c><00:10:27.360><c> point</c><00:10:27.680><c> in</c><00:10:27.760><c> the</c><00:10:27.920><c> entire</c><00:10:28.320><c> graph</c>

00:10:28.550 --> 00:10:28.560 align:start position:0%
every single point in the entire graph
 

00:10:28.560 --> 00:10:29.590 align:start position:0%
every single point in the entire graph
that's<00:10:28.800><c> just</c><00:10:28.959><c> how</c><00:10:29.200><c> this</c>

00:10:29.590 --> 00:10:29.600 align:start position:0%
that's just how this
 

00:10:29.600 --> 00:10:31.750 align:start position:0%
that's just how this
problem<00:10:30.000><c> is</c><00:10:30.160><c> defined</c><00:10:31.040><c> now</c><00:10:31.279><c> i'm</c><00:10:31.360><c> not</c><00:10:31.519><c> going</c><00:10:31.680><c> to</c>

00:10:31.750 --> 00:10:31.760 align:start position:0%
problem is defined now i'm not going to
 

00:10:31.760 --> 00:10:33.030 align:start position:0%
problem is defined now i'm not going to
write<00:10:32.160><c> the</c><00:10:32.320><c> exact</c>

00:10:33.030 --> 00:10:33.040 align:start position:0%
write the exact
 

00:10:33.040 --> 00:10:35.590 align:start position:0%
write the exact
cost<00:10:33.360><c> of</c><00:10:33.600><c> each</c><00:10:33.839><c> of</c><00:10:34.000><c> these</c><00:10:34.959><c> edges</c><00:10:35.360><c> because</c><00:10:35.519><c> i</c>

00:10:35.590 --> 00:10:35.600 align:start position:0%
cost of each of these edges because i
 

00:10:35.600 --> 00:10:36.310 align:start position:0%
cost of each of these edges because i
think<00:10:35.760><c> it's</c><00:10:35.920><c> pretty</c>

00:10:36.310 --> 00:10:36.320 align:start position:0%
think it's pretty
 

00:10:36.320 --> 00:10:37.910 align:start position:0%
think it's pretty
obvious<00:10:36.720><c> from</c><00:10:36.880><c> the</c><00:10:36.959><c> picture</c><00:10:37.279><c> that</c><00:10:37.440><c> this</c><00:10:37.760><c> is</c>

00:10:37.910 --> 00:10:37.920 align:start position:0%
obvious from the picture that this is
 

00:10:37.920 --> 00:10:39.430 align:start position:0%
obvious from the picture that this is
going<00:10:38.000><c> to</c><00:10:38.079><c> be</c><00:10:38.240><c> the</c><00:10:38.320><c> one</c><00:10:38.480><c> that's</c><00:10:38.720><c> closest</c><00:10:39.279><c> and</c>

00:10:39.430 --> 00:10:39.440 align:start position:0%
going to be the one that's closest and
 

00:10:39.440 --> 00:10:41.030 align:start position:0%
going to be the one that's closest and
the<00:10:39.519><c> cost</c><00:10:39.839><c> of</c><00:10:40.000><c> connecting</c><00:10:40.399><c> to</c><00:10:40.560><c> that</c><00:10:40.800><c> is</c><00:10:40.880><c> going</c>

00:10:41.030 --> 00:10:41.040 align:start position:0%
the cost of connecting to that is going
 

00:10:41.040 --> 00:10:42.790 align:start position:0%
the cost of connecting to that is going
to<00:10:41.120><c> be</c><00:10:41.360><c> 4</c><00:10:41.680><c> based</c><00:10:42.000><c> on</c><00:10:42.240><c> the</c>

00:10:42.790 --> 00:10:42.800 align:start position:0%
to be 4 based on the
 

00:10:42.800 --> 00:10:44.389 align:start position:0%
to be 4 based on the
point<00:10:43.120><c> values</c><00:10:43.519><c> that</c><00:10:43.680><c> we</c><00:10:43.760><c> were</c><00:10:43.920><c> given</c><00:10:44.160><c> in</c><00:10:44.320><c> the</c>

00:10:44.389 --> 00:10:44.399 align:start position:0%
point values that we were given in the
 

00:10:44.399 --> 00:10:45.990 align:start position:0%
point values that we were given in the
previous<00:10:44.880><c> picture</c><00:10:45.760><c> so</c>

00:10:45.990 --> 00:10:46.000 align:start position:0%
previous picture so
 

00:10:46.000 --> 00:10:48.069 align:start position:0%
previous picture so
out<00:10:46.160><c> of</c><00:10:46.320><c> all</c><00:10:46.560><c> these</c><00:10:46.880><c> four</c><00:10:47.360><c> these</c><00:10:47.680><c> are</c><00:10:47.839><c> going</c><00:10:47.920><c> to</c>

00:10:48.069 --> 00:10:48.079 align:start position:0%
out of all these four these are going to
 

00:10:48.079 --> 00:10:49.590 align:start position:0%
out of all these four these are going to
be<00:10:48.320><c> in</c><00:10:48.560><c> our</c><00:10:48.720><c> frontier</c>

00:10:49.590 --> 00:10:49.600 align:start position:0%
be in our frontier
 

00:10:49.600 --> 00:10:51.110 align:start position:0%
be in our frontier
so<00:10:49.920><c> all</c><00:10:50.160><c> of</c><00:10:50.240><c> these</c><00:10:50.480><c> are</c><00:10:50.560><c> going</c><00:10:50.640><c> to</c><00:10:50.720><c> be</c><00:10:50.880><c> in</c><00:10:50.959><c> our</c>

00:10:51.110 --> 00:10:51.120 align:start position:0%
so all of these are going to be in our
 

00:10:51.120 --> 00:10:52.550 align:start position:0%
so all of these are going to be in our
frontier<00:10:51.519><c> and</c><00:10:51.600><c> you</c><00:10:51.760><c> can</c><00:10:51.839><c> see</c><00:10:52.000><c> i</c><00:10:52.160><c> drew</c><00:10:52.399><c> them</c>

00:10:52.550 --> 00:10:52.560 align:start position:0%
frontier and you can see i drew them
 

00:10:52.560 --> 00:10:54.949 align:start position:0%
frontier and you can see i drew them
here<00:10:52.720><c> i</c><00:10:52.800><c> didn't</c><00:10:53.120><c> specify</c><00:10:53.600><c> the</c><00:10:53.760><c> actual</c><00:10:54.160><c> cost</c>

00:10:54.949 --> 00:10:54.959 align:start position:0%
here i didn't specify the actual cost
 

00:10:54.959 --> 00:10:58.069 align:start position:0%
here i didn't specify the actual cost
of<00:10:55.519><c> 2</c><00:10:55.920><c> 3</c><00:10:56.320><c> and</c><00:10:56.560><c> 4</c><00:10:57.360><c> because</c><00:10:57.600><c> i</c><00:10:57.680><c> don't</c><00:10:57.839><c> want</c><00:10:58.000><c> to</c>

00:10:58.069 --> 00:10:58.079 align:start position:0%
of 2 3 and 4 because i don't want to
 

00:10:58.079 --> 00:10:59.509 align:start position:0%
of 2 3 and 4 because i don't want to
focus<00:10:58.399><c> too</c><00:10:58.560><c> much</c><00:10:58.800><c> on</c><00:10:58.880><c> that</c><00:10:59.040><c> because</c><00:10:59.200><c> we</c><00:10:59.360><c> know</c>

00:10:59.509 --> 00:10:59.519 align:start position:0%
focus too much on that because we know
 

00:10:59.519 --> 00:11:01.110 align:start position:0%
focus too much on that because we know
that<00:10:59.680><c> this</c><00:10:59.920><c> is</c><00:11:00.079><c> going</c><00:11:00.160><c> to</c><00:11:00.240><c> be</c><00:11:00.399><c> the</c><00:11:00.480><c> minimum</c><00:11:00.880><c> so</c>

00:11:01.110 --> 00:11:01.120 align:start position:0%
that this is going to be the minimum so
 

00:11:01.120 --> 00:11:01.590 align:start position:0%
that this is going to be the minimum so
this

00:11:01.590 --> 00:11:01.600 align:start position:0%
this
 

00:11:01.600 --> 00:11:03.030 align:start position:0%
this
is<00:11:01.760><c> the</c><00:11:01.920><c> one</c><00:11:02.079><c> that</c><00:11:02.160><c> we</c><00:11:02.320><c> care</c><00:11:02.480><c> about</c><00:11:02.720><c> right</c><00:11:02.880><c> now</c>

00:11:03.030 --> 00:11:03.040 align:start position:0%
is the one that we care about right now
 

00:11:03.040 --> 00:11:04.550 align:start position:0%
is the one that we care about right now
because<00:11:03.279><c> we</c><00:11:03.519><c> already</c><00:11:03.839><c> can</c><00:11:04.000><c> tell</c><00:11:04.240><c> from</c><00:11:04.399><c> the</c>

00:11:04.550 --> 00:11:04.560 align:start position:0%
because we already can tell from the
 

00:11:04.560 --> 00:11:05.990 align:start position:0%
because we already can tell from the
picture<00:11:04.800><c> that</c><00:11:04.959><c> it's</c><00:11:05.120><c> the</c><00:11:05.279><c> smallest</c>

00:11:05.990 --> 00:11:06.000 align:start position:0%
picture that it's the smallest
 

00:11:06.000 --> 00:11:07.670 align:start position:0%
picture that it's the smallest
and<00:11:06.079><c> so</c><00:11:06.240><c> that's</c><00:11:06.480><c> the</c><00:11:06.640><c> step</c><00:11:06.959><c> right</c><00:11:07.120><c> so</c><00:11:07.360><c> you</c><00:11:07.519><c> take</c>

00:11:07.670 --> 00:11:07.680 align:start position:0%
and so that's the step right so you take
 

00:11:07.680 --> 00:11:09.990 align:start position:0%
and so that's the step right so you take
the<00:11:07.839><c> entire</c><00:11:08.160><c> frontier</c><00:11:08.959><c> add</c><00:11:09.200><c> it</c><00:11:09.360><c> to</c><00:11:09.600><c> the</c><00:11:09.760><c> min</c>

00:11:09.990 --> 00:11:10.000 align:start position:0%
the entire frontier add it to the min
 

00:11:10.000 --> 00:11:10.790 align:start position:0%
the entire frontier add it to the min
heap

00:11:10.790 --> 00:11:10.800 align:start position:0%
heap
 

00:11:10.800 --> 00:11:12.630 align:start position:0%
heap
next<00:11:11.120><c> step</c><00:11:11.519><c> we're</c><00:11:11.680><c> just</c><00:11:11.839><c> going</c><00:11:12.000><c> to</c><00:11:12.079><c> repeat</c><00:11:12.480><c> the</c>

00:11:12.630 --> 00:11:12.640 align:start position:0%
next step we're just going to repeat the
 

00:11:12.640 --> 00:11:13.910 align:start position:0%
next step we're just going to repeat the
same<00:11:12.880><c> thing</c><00:11:13.120><c> that</c><00:11:13.200><c> we</c><00:11:13.360><c> just</c><00:11:13.519><c> did</c><00:11:13.680><c> we're</c><00:11:13.839><c> going</c>

00:11:13.910 --> 00:11:13.920 align:start position:0%
same thing that we just did we're going
 

00:11:13.920 --> 00:11:15.590 align:start position:0%
same thing that we just did we're going
to<00:11:14.079><c> take</c><00:11:14.320><c> a</c><00:11:14.399><c> look</c><00:11:14.560><c> at</c><00:11:14.720><c> our</c><00:11:14.880><c> frontier</c>

00:11:15.590 --> 00:11:15.600 align:start position:0%
to take a look at our frontier
 

00:11:15.600 --> 00:11:17.350 align:start position:0%
to take a look at our frontier
pop<00:11:15.920><c> the</c><00:11:16.079><c> minimum</c><00:11:16.640><c> from</c><00:11:16.800><c> it</c><00:11:16.959><c> we</c><00:11:17.040><c> know</c><00:11:17.200><c> that</c>

00:11:17.350 --> 00:11:17.360 align:start position:0%
pop the minimum from it we know that
 

00:11:17.360 --> 00:11:18.870 align:start position:0%
pop the minimum from it we know that
this<00:11:17.600><c> is</c><00:11:17.680><c> the</c><00:11:17.839><c> minimum</c><00:11:18.240><c> so</c><00:11:18.560><c> pop</c>

00:11:18.870 --> 00:11:18.880 align:start position:0%
this is the minimum so pop
 

00:11:18.880 --> 00:11:21.509 align:start position:0%
this is the minimum so pop
it<00:11:19.120><c> when</c><00:11:19.360><c> you</c><00:11:19.600><c> pop</c><00:11:19.920><c> a</c><00:11:20.079><c> node</c><00:11:20.640><c> we</c><00:11:20.800><c> have</c><00:11:20.959><c> to</c><00:11:21.120><c> add</c><00:11:21.360><c> it</c>

00:11:21.509 --> 00:11:21.519 align:start position:0%
it when you pop a node we have to add it
 

00:11:21.519 --> 00:11:24.069 align:start position:0%
it when you pop a node we have to add it
to<00:11:21.839><c> visited</c><00:11:22.320><c> so</c><00:11:22.560><c> we</c><00:11:22.720><c> popped</c><00:11:23.120><c> the</c><00:11:23.360><c> one</c><00:11:23.680><c> node</c>

00:11:24.069 --> 00:11:24.079 align:start position:0%
to visited so we popped the one node
 

00:11:24.079 --> 00:11:24.630 align:start position:0%
to visited so we popped the one node
right

00:11:24.630 --> 00:11:24.640 align:start position:0%
right
 

00:11:24.640 --> 00:11:26.470 align:start position:0%
right
and<00:11:25.200><c> so</c><00:11:25.519><c> we're</c><00:11:25.680><c> going</c><00:11:25.760><c> to</c><00:11:25.839><c> add</c><00:11:26.000><c> it</c><00:11:26.079><c> to</c><00:11:26.160><c> visit</c>

00:11:26.470 --> 00:11:26.480 align:start position:0%
and so we're going to add it to visit
 

00:11:26.480 --> 00:11:27.990 align:start position:0%
and so we're going to add it to visit
and<00:11:26.560><c> the</c><00:11:26.800><c> cost</c><00:11:27.120><c> of</c><00:11:27.200><c> that</c><00:11:27.440><c> one</c><00:11:27.680><c> was</c>

00:11:27.990 --> 00:11:28.000 align:start position:0%
and the cost of that one was
 

00:11:28.000 --> 00:11:30.150 align:start position:0%
and the cost of that one was
four<00:11:28.240><c> right</c><00:11:28.399><c> so</c><00:11:28.560><c> let's</c><00:11:28.720><c> just</c><00:11:28.959><c> add</c><00:11:29.360><c> four</c><00:11:29.680><c> to</c><00:11:30.000><c> our</c>

00:11:30.150 --> 00:11:30.160 align:start position:0%
four right so let's just add four to our
 

00:11:30.160 --> 00:11:31.670 align:start position:0%
four right so let's just add four to our
total<00:11:30.640><c> cost</c><00:11:30.959><c> so</c><00:11:31.200><c> far</c>

00:11:31.670 --> 00:11:31.680 align:start position:0%
total cost so far
 

00:11:31.680 --> 00:11:33.110 align:start position:0%
total cost so far
and<00:11:31.839><c> since</c><00:11:32.079><c> this</c><00:11:32.240><c> one</c><00:11:32.399><c> was</c><00:11:32.640><c> popped</c><00:11:32.880><c> let</c><00:11:33.040><c> me</c>

00:11:33.110 --> 00:11:33.120 align:start position:0%
and since this one was popped let me
 

00:11:33.120 --> 00:11:35.190 align:start position:0%
and since this one was popped let me
just<00:11:33.360><c> draw</c><00:11:33.760><c> that</c><00:11:34.079><c> that</c><00:11:34.399><c> is</c><00:11:34.560><c> definitely</c><00:11:35.040><c> going</c>

00:11:35.190 --> 00:11:35.200 align:start position:0%
just draw that that is definitely going
 

00:11:35.200 --> 00:11:35.670 align:start position:0%
just draw that that is definitely going
to<00:11:35.279><c> be</c><00:11:35.440><c> an</c>

00:11:35.670 --> 00:11:35.680 align:start position:0%
to be an
 

00:11:35.680 --> 00:11:37.990 align:start position:0%
to be an
edge<00:11:36.160><c> inside</c><00:11:36.480><c> of</c><00:11:36.640><c> our</c><00:11:36.720><c> minimum</c><00:11:37.120><c> spanning</c><00:11:37.519><c> tree</c>

00:11:37.990 --> 00:11:38.000 align:start position:0%
edge inside of our minimum spanning tree
 

00:11:38.000 --> 00:11:39.030 align:start position:0%
edge inside of our minimum spanning tree
so<00:11:38.240><c> now</c><00:11:38.640><c> we</c>

00:11:39.030 --> 00:11:39.040 align:start position:0%
so now we
 

00:11:39.040 --> 00:11:41.269 align:start position:0%
so now we
are<00:11:39.200><c> at</c><00:11:39.519><c> one</c><00:11:39.839><c> and</c><00:11:40.000><c> now</c><00:11:40.160><c> we're</c><00:11:40.320><c> going</c><00:11:40.480><c> to</c><00:11:40.640><c> add</c>

00:11:41.269 --> 00:11:41.279 align:start position:0%
are at one and now we're going to add
 

00:11:41.279 --> 00:11:43.910 align:start position:0%
are at one and now we're going to add
every<00:11:42.000><c> adjacent</c><00:11:42.560><c> node</c><00:11:42.800><c> or</c><00:11:42.959><c> every</c><00:11:43.200><c> neighbor</c><00:11:43.600><c> of</c>

00:11:43.910 --> 00:11:43.920 align:start position:0%
every adjacent node or every neighbor of
 

00:11:43.920 --> 00:11:44.389 align:start position:0%
every adjacent node or every neighbor of
this

00:11:44.389 --> 00:11:44.399 align:start position:0%
this
 

00:11:44.399 --> 00:11:46.630 align:start position:0%
this
to<00:11:44.720><c> our</c><00:11:44.880><c> frontier</c><00:11:45.519><c> as</c><00:11:45.760><c> well</c><00:11:46.000><c> so</c><00:11:46.160><c> you</c><00:11:46.320><c> can</c><00:11:46.399><c> see</c>

00:11:46.630 --> 00:11:46.640 align:start position:0%
to our frontier as well so you can see
 

00:11:46.640 --> 00:11:48.230 align:start position:0%
to our frontier as well so you can see
that<00:11:46.800><c> that</c><00:11:47.120><c> this</c><00:11:47.360><c> is</c><00:11:47.440><c> kind</c><00:11:47.600><c> of</c><00:11:47.680><c> what</c><00:11:47.839><c> the</c><00:11:47.920><c> graph</c>

00:11:48.230 --> 00:11:48.240 align:start position:0%
that that this is kind of what the graph
 

00:11:48.240 --> 00:11:48.949 align:start position:0%
that that this is kind of what the graph
is<00:11:48.320><c> going</c><00:11:48.399><c> to</c><00:11:48.480><c> look</c><00:11:48.640><c> like</c>

00:11:48.949 --> 00:11:48.959 align:start position:0%
is going to look like
 

00:11:48.959 --> 00:11:51.829 align:start position:0%
is going to look like
we're<00:11:49.120><c> not</c><00:11:49.279><c> going</c><00:11:49.360><c> to</c><00:11:49.519><c> add</c><00:11:50.000><c> 1</c><00:11:50.639><c> to</c><00:11:50.880><c> our</c><00:11:51.040><c> frontier</c>

00:11:51.829 --> 00:11:51.839 align:start position:0%
we're not going to add 1 to our frontier
 

00:11:51.839 --> 00:11:53.430 align:start position:0%
we're not going to add 1 to our frontier
because<00:11:52.160><c> it's</c><00:11:52.399><c> actually</c><00:11:52.800><c> already</c><00:11:53.200><c> been</c>

00:11:53.430 --> 00:11:53.440 align:start position:0%
because it's actually already been
 

00:11:53.440 --> 00:11:53.990 align:start position:0%
because it's actually already been
visited

00:11:53.990 --> 00:11:54.000 align:start position:0%
visited
 

00:11:54.000 --> 00:11:56.790 align:start position:0%
visited
but<00:11:54.240><c> we</c><00:11:54.480><c> are</c><00:11:54.639><c> going</c><00:11:54.720><c> to</c><00:11:54.880><c> add</c><00:11:55.200><c> 2</c><00:11:55.680><c> 3</c><00:11:56.000><c> and</c><00:11:56.240><c> 4</c><00:11:56.480><c> to</c><00:11:56.639><c> our</c>

00:11:56.790 --> 00:11:56.800 align:start position:0%
but we are going to add 2 3 and 4 to our
 

00:11:56.800 --> 00:11:59.350 align:start position:0%
but we are going to add 2 3 and 4 to our
frontier<00:11:57.279><c> now</c><00:11:57.519><c> notice</c><00:11:57.920><c> they</c><00:11:58.160><c> already</c><00:11:58.800><c> exist</c>

00:11:59.350 --> 00:11:59.360 align:start position:0%
frontier now notice they already exist
 

00:11:59.360 --> 00:12:00.790 align:start position:0%
frontier now notice they already exist
in<00:11:59.519><c> our</c><00:11:59.680><c> frontier</c><00:12:00.160><c> right</c><00:12:00.320><c> so</c><00:12:00.480><c> we're</c><00:12:00.639><c> going</c><00:12:00.720><c> to</c>

00:12:00.790 --> 00:12:00.800 align:start position:0%
in our frontier right so we're going to
 

00:12:00.800 --> 00:12:01.590 align:start position:0%
in our frontier right so we're going to
be<00:12:00.959><c> adding</c><00:12:01.279><c> them</c>

00:12:01.590 --> 00:12:01.600 align:start position:0%
be adding them
 

00:12:01.600 --> 00:12:04.310 align:start position:0%
be adding them
multiple<00:12:02.240><c> times</c><00:12:02.880><c> that's</c><00:12:03.200><c> kind</c><00:12:03.360><c> of</c><00:12:03.519><c> how</c><00:12:03.760><c> the</c><00:12:04.000><c> n</c>

00:12:04.310 --> 00:12:04.320 align:start position:0%
multiple times that's kind of how the n
 

00:12:04.320 --> 00:12:05.990 align:start position:0%
multiple times that's kind of how the n
squared<00:12:04.720><c> is</c><00:12:04.800><c> going</c><00:12:04.959><c> to</c><00:12:05.040><c> come</c><00:12:05.279><c> from</c><00:12:05.519><c> right</c><00:12:05.760><c> we</c>

00:12:05.990 --> 00:12:06.000 align:start position:0%
squared is going to come from right we
 

00:12:06.000 --> 00:12:07.190 align:start position:0%
squared is going to come from right we
could<00:12:06.160><c> possibly</c><00:12:06.720><c> add</c>

00:12:07.190 --> 00:12:07.200 align:start position:0%
could possibly add
 

00:12:07.200 --> 00:12:10.550 align:start position:0%
could possibly add
n<00:12:07.519><c> squared</c><00:12:07.920><c> nodes</c><00:12:08.320><c> to</c><00:12:08.560><c> this</c><00:12:08.880><c> min</c><00:12:09.200><c> heap</c><00:12:10.160><c> because</c>

00:12:10.550 --> 00:12:10.560 align:start position:0%
n squared nodes to this min heap because
 

00:12:10.560 --> 00:12:11.990 align:start position:0%
n squared nodes to this min heap because
we're<00:12:10.720><c> going</c><00:12:10.800><c> to</c><00:12:10.880><c> be</c><00:12:11.040><c> adding</c><00:12:11.360><c> it</c><00:12:11.440><c> for</c><00:12:11.680><c> every</c>

00:12:11.990 --> 00:12:12.000 align:start position:0%
we're going to be adding it for every
 

00:12:12.000 --> 00:12:12.550 align:start position:0%
we're going to be adding it for every
possible

00:12:12.550 --> 00:12:12.560 align:start position:0%
possible
 

00:12:12.560 --> 00:12:14.150 align:start position:0%
possible
edge<00:12:12.800><c> that</c><00:12:13.040><c> exists</c><00:12:13.440><c> in</c><00:12:13.519><c> our</c><00:12:13.680><c> graph</c><00:12:13.920><c> and</c><00:12:14.000><c> every</c>

00:12:14.150 --> 00:12:14.160 align:start position:0%
edge that exists in our graph and every
 

00:12:14.160 --> 00:12:15.910 align:start position:0%
edge that exists in our graph and every
time<00:12:14.320><c> we</c><00:12:14.560><c> pop</c><00:12:14.800><c> from</c><00:12:14.959><c> the</c><00:12:15.120><c> min</c><00:12:15.360><c> heap</c><00:12:15.600><c> it's</c><00:12:15.760><c> going</c>

00:12:15.910 --> 00:12:15.920 align:start position:0%
time we pop from the min heap it's going
 

00:12:15.920 --> 00:12:16.310 align:start position:0%
time we pop from the min heap it's going
to<00:12:16.000><c> be</c>

00:12:16.310 --> 00:12:16.320 align:start position:0%
to be
 

00:12:16.320 --> 00:12:18.949 align:start position:0%
to be
log<00:12:17.120><c> n</c><00:12:17.440><c> so</c><00:12:17.680><c> basically</c><00:12:18.160><c> the</c><00:12:18.240><c> time</c><00:12:18.480><c> complexity</c>

00:12:18.949 --> 00:12:18.959 align:start position:0%
log n so basically the time complexity
 

00:12:18.959 --> 00:12:20.470 align:start position:0%
log n so basically the time complexity
is<00:12:19.120><c> n</c><00:12:19.279><c> squared</c><00:12:19.600><c> multiplied</c>

00:12:20.470 --> 00:12:20.480 align:start position:0%
is n squared multiplied
 

00:12:20.480 --> 00:12:23.269 align:start position:0%
is n squared multiplied
by<00:12:20.800><c> log</c><00:12:21.200><c> n</c><00:12:21.760><c> so</c><00:12:21.920><c> i'm</c><00:12:22.079><c> not</c><00:12:22.160><c> going</c><00:12:22.320><c> to</c><00:12:22.480><c> redraw</c><00:12:23.120><c> all</c>

00:12:23.269 --> 00:12:23.279 align:start position:0%
by log n so i'm not going to redraw all
 

00:12:23.279 --> 00:12:24.389 align:start position:0%
by log n so i'm not going to redraw all
three<00:12:23.519><c> of</c><00:12:23.680><c> these</c>

00:12:24.389 --> 00:12:24.399 align:start position:0%
three of these
 

00:12:24.399 --> 00:12:26.069 align:start position:0%
three of these
nodes<00:12:24.800><c> but</c><00:12:24.959><c> you</c><00:12:25.120><c> can</c><00:12:25.200><c> assume</c><00:12:25.519><c> that</c><00:12:25.680><c> yes</c><00:12:25.920><c> there</c>

00:12:26.069 --> 00:12:26.079 align:start position:0%
nodes but you can assume that yes there
 

00:12:26.079 --> 00:12:28.069 align:start position:0%
nodes but you can assume that yes there
could<00:12:26.240><c> be</c><00:12:26.440><c> duplicates</c><00:12:27.519><c> of</c><00:12:27.760><c> them</c>

00:12:28.069 --> 00:12:28.079 align:start position:0%
could be duplicates of them
 

00:12:28.079 --> 00:12:30.870 align:start position:0%
could be duplicates of them
inside<00:12:28.480><c> of</c><00:12:28.639><c> our</c><00:12:28.720><c> min</c><00:12:28.959><c> heap</c><00:12:29.680><c> now</c><00:12:30.000><c> looking</c><00:12:30.399><c> at</c><00:12:30.639><c> 1</c>

00:12:30.870 --> 00:12:30.880 align:start position:0%
inside of our min heap now looking at 1
 

00:12:30.880 --> 00:12:31.269 align:start position:0%
inside of our min heap now looking at 1
which

00:12:31.269 --> 00:12:31.279 align:start position:0%
which
 

00:12:31.279 --> 00:12:33.990 align:start position:0%
which
node<00:12:31.680><c> is</c><00:12:31.839><c> the</c><00:12:32.000><c> closest</c><00:12:32.560><c> to</c><00:12:32.800><c> it</c><00:12:32.959><c> now</c><00:12:33.360><c> of</c><00:12:33.519><c> course</c>

00:12:33.990 --> 00:12:34.000 align:start position:0%
node is the closest to it now of course
 

00:12:34.000 --> 00:12:35.430 align:start position:0%
node is the closest to it now of course
3<00:12:34.320><c> is</c><00:12:34.399><c> the</c><00:12:34.560><c> closest</c><00:12:34.959><c> node</c>

00:12:35.430 --> 00:12:35.440 align:start position:0%
3 is the closest node
 

00:12:35.440 --> 00:12:37.350 align:start position:0%
3 is the closest node
to<00:12:35.680><c> our</c><00:12:35.839><c> entire</c><00:12:36.160><c> graph</c><00:12:36.480><c> this</c><00:12:36.720><c> is</c><00:12:36.800><c> our</c><00:12:36.959><c> entire</c>

00:12:37.350 --> 00:12:37.360 align:start position:0%
to our entire graph this is our entire
 

00:12:37.360 --> 00:12:39.110 align:start position:0%
to our entire graph this is our entire
graph<00:12:37.600><c> right</c><00:12:37.760><c> we</c><00:12:37.920><c> have</c><00:12:38.160><c> two</c><00:12:38.560><c> nodes</c><00:12:38.880><c> right</c>

00:12:39.110 --> 00:12:39.120 align:start position:0%
graph right we have two nodes right
 

00:12:39.120 --> 00:12:40.870 align:start position:0%
graph right we have two nodes right
what's<00:12:39.360><c> the</c><00:12:39.440><c> closest</c><00:12:39.920><c> node</c><00:12:40.160><c> that</c><00:12:40.240><c> we</c><00:12:40.320><c> can</c><00:12:40.560><c> add</c>

00:12:40.870 --> 00:12:40.880 align:start position:0%
what's the closest node that we can add
 

00:12:40.880 --> 00:12:42.389 align:start position:0%
what's the closest node that we can add
to<00:12:41.120><c> this</c><00:12:41.360><c> graph</c><00:12:41.600><c> right</c><00:12:41.760><c> we</c><00:12:41.920><c> could</c><00:12:42.000><c> add</c><00:12:42.240><c> it</c>

00:12:42.389 --> 00:12:42.399 align:start position:0%
to this graph right we could add it
 

00:12:42.399 --> 00:12:43.110 align:start position:0%
to this graph right we could add it
anywhere<00:12:42.720><c> we</c><00:12:42.800><c> could</c>

00:12:43.110 --> 00:12:43.120 align:start position:0%
anywhere we could
 

00:12:43.120 --> 00:12:44.470 align:start position:0%
anywhere we could
say<00:12:43.360><c> okay</c><00:12:43.600><c> this</c><00:12:43.760><c> is</c><00:12:43.839><c> going</c><00:12:43.920><c> to</c><00:12:44.000><c> be</c><00:12:44.160><c> connected</c>

00:12:44.470 --> 00:12:44.480 align:start position:0%
say okay this is going to be connected
 

00:12:44.480 --> 00:12:46.310 align:start position:0%
say okay this is going to be connected
to<00:12:44.639><c> zero</c><00:12:45.040><c> right</c><00:12:45.360><c> or</c><00:12:45.680><c> three</c><00:12:45.920><c> is</c><00:12:46.079><c> going</c><00:12:46.160><c> to</c><00:12:46.240><c> be</c>

00:12:46.310 --> 00:12:46.320 align:start position:0%
to zero right or three is going to be
 

00:12:46.320 --> 00:12:47.829 align:start position:0%
to zero right or three is going to be
connected<00:12:46.720><c> to</c><00:12:46.800><c> zero</c><00:12:47.120><c> or</c><00:12:47.279><c> three</c><00:12:47.600><c> is</c><00:12:47.680><c> going</c><00:12:47.760><c> to</c>

00:12:47.829 --> 00:12:47.839 align:start position:0%
connected to zero or three is going to
 

00:12:47.839 --> 00:12:49.190 align:start position:0%
connected to zero or three is going to
be<00:12:47.920><c> connected</c><00:12:48.320><c> to</c><00:12:48.399><c> one</c><00:12:48.639><c> we</c><00:12:48.720><c> could</c><00:12:48.880><c> add</c>

00:12:49.190 --> 00:12:49.200 align:start position:0%
be connected to one we could add
 

00:12:49.200 --> 00:12:51.509 align:start position:0%
be connected to one we could add
any<00:12:49.440><c> node</c><00:12:50.000><c> but</c><00:12:50.160><c> we</c><00:12:50.399><c> know</c><00:12:50.800><c> just</c><00:12:50.959><c> by</c><00:12:51.200><c> looking</c><00:12:51.440><c> at</c>

00:12:51.509 --> 00:12:51.519 align:start position:0%
any node but we know just by looking at
 

00:12:51.519 --> 00:12:52.949 align:start position:0%
any node but we know just by looking at
the<00:12:51.600><c> picture</c><00:12:52.000><c> that</c><00:12:52.160><c> this</c><00:12:52.399><c> is</c><00:12:52.560><c> what's</c><00:12:52.800><c> the</c>

00:12:52.949 --> 00:12:52.959 align:start position:0%
the picture that this is what's the
 

00:12:52.959 --> 00:12:53.509 align:start position:0%
the picture that this is what's the
closest

00:12:53.509 --> 00:12:53.519 align:start position:0%
closest
 

00:12:53.519 --> 00:12:55.829 align:start position:0%
closest
is<00:12:53.680><c> gonna</c><00:12:53.839><c> be</c><00:12:54.480><c> and</c><00:12:54.720><c> i'll</c><00:12:54.880><c> just</c><00:12:55.040><c> tell</c><00:12:55.279><c> you</c><00:12:55.519><c> okay</c>

00:12:55.829 --> 00:12:55.839 align:start position:0%
is gonna be and i'll just tell you okay
 

00:12:55.839 --> 00:12:58.069 align:start position:0%
is gonna be and i'll just tell you okay
for<00:12:56.079><c> that</c><00:12:56.240><c> node</c><00:12:56.560><c> three</c><00:12:56.800><c> the</c><00:12:56.959><c> cost</c><00:12:57.360><c> is</c><00:12:57.519><c> gonna</c><00:12:57.680><c> be</c>

00:12:58.069 --> 00:12:58.079 align:start position:0%
for that node three the cost is gonna be
 

00:12:58.079 --> 00:13:00.310 align:start position:0%
for that node three the cost is gonna be
three<00:12:59.040><c> so</c><00:12:59.200><c> now</c><00:12:59.360><c> we</c><00:12:59.519><c> continue</c><00:13:00.000><c> another</c>

00:13:00.310 --> 00:13:00.320 align:start position:0%
three so now we continue another
 

00:13:00.320 --> 00:13:01.590 align:start position:0%
three so now we continue another
iteration<00:13:00.800><c> of</c><00:13:00.959><c> our</c><00:13:01.120><c> loop</c>

00:13:01.590 --> 00:13:01.600 align:start position:0%
iteration of our loop
 

00:13:01.600 --> 00:13:03.509 align:start position:0%
iteration of our loop
let's<00:13:01.920><c> pop</c><00:13:02.160><c> the</c><00:13:02.240><c> minimum</c><00:13:02.639><c> from</c><00:13:02.880><c> the</c><00:13:02.959><c> frontier</c>

00:13:03.509 --> 00:13:03.519 align:start position:0%
let's pop the minimum from the frontier
 

00:13:03.519 --> 00:13:05.190 align:start position:0%
let's pop the minimum from the frontier
this<00:13:03.760><c> is</c><00:13:03.920><c> gonna</c><00:13:04.079><c> be</c><00:13:04.240><c> the</c><00:13:04.320><c> minimum</c><00:13:04.800><c> three</c><00:13:05.040><c> has</c>

00:13:05.190 --> 00:13:05.200 align:start position:0%
this is gonna be the minimum three has
 

00:13:05.200 --> 00:13:06.150 align:start position:0%
this is gonna be the minimum three has
been<00:13:05.440><c> popped</c>

00:13:06.150 --> 00:13:06.160 align:start position:0%
been popped
 

00:13:06.160 --> 00:13:08.629 align:start position:0%
been popped
so<00:13:06.399><c> let's</c><00:13:06.720><c> add</c><00:13:06.959><c> an</c><00:13:07.279><c> edge</c><00:13:07.680><c> connecting</c><00:13:08.240><c> it</c><00:13:08.399><c> to</c>

00:13:08.629 --> 00:13:08.639 align:start position:0%
so let's add an edge connecting it to
 

00:13:08.639 --> 00:13:11.030 align:start position:0%
so let's add an edge connecting it to
our<00:13:08.800><c> graph</c><00:13:09.040><c> so</c><00:13:09.279><c> so</c><00:13:09.519><c> far</c><00:13:09.760><c> this</c><00:13:10.000><c> is</c><00:13:10.160><c> what</c><00:13:10.399><c> our</c>

00:13:11.030 --> 00:13:11.040 align:start position:0%
our graph so so far this is what our
 

00:13:11.040 --> 00:13:13.269 align:start position:0%
our graph so so far this is what our
graph<00:13:11.360><c> looks</c><00:13:11.680><c> like</c><00:13:12.000><c> since</c><00:13:12.240><c> we</c><00:13:12.399><c> popped</c><00:13:12.720><c> 3</c><00:13:13.040><c> add</c>

00:13:13.269 --> 00:13:13.279 align:start position:0%
graph looks like since we popped 3 add
 

00:13:13.279 --> 00:13:15.509 align:start position:0%
graph looks like since we popped 3 add
it<00:13:13.360><c> to</c><00:13:13.519><c> visit</c><00:13:14.000><c> and</c><00:13:14.240><c> let's</c><00:13:14.480><c> add</c><00:13:14.720><c> the</c><00:13:14.959><c> cost</c>

00:13:15.509 --> 00:13:15.519 align:start position:0%
it to visit and let's add the cost
 

00:13:15.519 --> 00:13:18.550 align:start position:0%
it to visit and let's add the cost
of<00:13:15.680><c> it</c><00:13:15.839><c> so</c><00:13:16.160><c> 3</c><00:13:16.560><c> was</c><00:13:16.800><c> the</c><00:13:17.040><c> cost</c><00:13:17.519><c> of</c><00:13:17.680><c> adding</c><00:13:18.000><c> node</c><00:13:18.320><c> 3</c>

00:13:18.550 --> 00:13:18.560 align:start position:0%
of it so 3 was the cost of adding node 3
 

00:13:18.560 --> 00:13:19.829 align:start position:0%
of it so 3 was the cost of adding node 3
so<00:13:18.800><c> total</c><00:13:19.200><c> our</c><00:13:19.360><c> cost</c>

00:13:19.829 --> 00:13:19.839 align:start position:0%
so total our cost
 

00:13:19.839 --> 00:13:22.230 align:start position:0%
so total our cost
is<00:13:20.000><c> going</c><00:13:20.079><c> to</c><00:13:20.160><c> be</c><00:13:20.320><c> seven</c><00:13:20.639><c> so</c><00:13:20.880><c> far</c><00:13:21.279><c> so</c><00:13:21.519><c> now</c><00:13:21.839><c> three</c>

00:13:22.230 --> 00:13:22.240 align:start position:0%
is going to be seven so far so now three
 

00:13:22.240 --> 00:13:24.069 align:start position:0%
is going to be seven so far so now three
has<00:13:22.480><c> been</c><00:13:22.720><c> visited</c><00:13:23.120><c> now</c><00:13:23.279><c> let's</c><00:13:23.600><c> add</c><00:13:23.839><c> the</c>

00:13:24.069 --> 00:13:24.079 align:start position:0%
has been visited now let's add the
 

00:13:24.079 --> 00:13:25.110 align:start position:0%
has been visited now let's add the
frontier

00:13:25.110 --> 00:13:25.120 align:start position:0%
frontier
 

00:13:25.120 --> 00:13:27.990 align:start position:0%
frontier
of<00:13:25.519><c> the</c><00:13:25.760><c> neighbors</c><00:13:26.240><c> of</c><00:13:26.480><c> three</c><00:13:26.880><c> of</c><00:13:26.959><c> course</c><00:13:27.519><c> one</c>

00:13:27.990 --> 00:13:28.000 align:start position:0%
of the neighbors of three of course one
 

00:13:28.000 --> 00:13:28.550 align:start position:0%
of the neighbors of three of course one
and

00:13:28.550 --> 00:13:28.560 align:start position:0%
and
 

00:13:28.560 --> 00:13:30.069 align:start position:0%
and
zero<00:13:28.880><c> have</c><00:13:29.120><c> already</c><00:13:29.279><c> been</c><00:13:29.440><c> visited</c><00:13:29.760><c> so</c><00:13:29.920><c> we're</c>

00:13:30.069 --> 00:13:30.079 align:start position:0%
zero have already been visited so we're
 

00:13:30.079 --> 00:13:31.750 align:start position:0%
zero have already been visited so we're
just<00:13:30.240><c> focusing</c><00:13:30.720><c> on</c><00:13:31.279><c> two</c>

00:13:31.750 --> 00:13:31.760 align:start position:0%
just focusing on two
 

00:13:31.760 --> 00:13:33.990 align:start position:0%
just focusing on two
and<00:13:32.560><c> four</c><00:13:32.959><c> we're</c><00:13:33.120><c> going</c><00:13:33.200><c> to</c><00:13:33.279><c> add</c><00:13:33.440><c> those</c><00:13:33.680><c> to</c><00:13:33.920><c> our</c>

00:13:33.990 --> 00:13:34.000 align:start position:0%
and four we're going to add those to our
 

00:13:34.000 --> 00:13:36.150 align:start position:0%
and four we're going to add those to our
frontier<00:13:34.639><c> they're</c><00:13:34.959><c> already</c><00:13:35.440><c> in</c><00:13:35.680><c> our</c><00:13:35.760><c> frontier</c>

00:13:36.150 --> 00:13:36.160 align:start position:0%
frontier they're already in our frontier
 

00:13:36.160 --> 00:13:37.509 align:start position:0%
frontier they're already in our frontier
but<00:13:36.320><c> yes</c><00:13:36.560><c> we're</c><00:13:36.720><c> going</c><00:13:36.800><c> to</c><00:13:36.880><c> be</c><00:13:37.040><c> ending</c><00:13:37.360><c> up</c>

00:13:37.509 --> 00:13:37.519 align:start position:0%
but yes we're going to be ending up
 

00:13:37.519 --> 00:13:38.629 align:start position:0%
but yes we're going to be ending up
adding<00:13:37.839><c> duplicates</c>

00:13:38.629 --> 00:13:38.639 align:start position:0%
adding duplicates
 

00:13:38.639 --> 00:13:40.550 align:start position:0%
adding duplicates
to<00:13:38.800><c> the</c><00:13:38.959><c> frontier</c><00:13:39.440><c> right</c><00:13:39.680><c> so</c><00:13:40.079><c> i'm</c><00:13:40.240><c> not</c><00:13:40.399><c> going</c>

00:13:40.550 --> 00:13:40.560 align:start position:0%
to the frontier right so i'm not going
 

00:13:40.560 --> 00:13:42.550 align:start position:0%
to the frontier right so i'm not going
to<00:13:40.720><c> you</c><00:13:40.880><c> know</c><00:13:41.519><c> actually</c><00:13:41.839><c> focus</c><00:13:42.079><c> too</c><00:13:42.240><c> much</c><00:13:42.399><c> on</c>

00:13:42.550 --> 00:13:42.560 align:start position:0%
to you know actually focus too much on
 

00:13:42.560 --> 00:13:43.430 align:start position:0%
to you know actually focus too much on
the<00:13:42.720><c> drawing</c><00:13:43.040><c> but</c>

00:13:43.430 --> 00:13:43.440 align:start position:0%
the drawing but
 

00:13:43.440 --> 00:13:45.350 align:start position:0%
the drawing but
there<00:13:43.600><c> could</c><00:13:43.760><c> be</c><00:13:43.920><c> multiples</c><00:13:44.560><c> of</c><00:13:44.800><c> these</c><00:13:45.120><c> in</c><00:13:45.199><c> the</c>

00:13:45.350 --> 00:13:45.360 align:start position:0%
there could be multiples of these in the
 

00:13:45.360 --> 00:13:47.110 align:start position:0%
there could be multiples of these in the
frontier<00:13:46.160><c> and</c><00:13:46.480><c> now</c>

00:13:47.110 --> 00:13:47.120 align:start position:0%
frontier and now
 

00:13:47.120 --> 00:13:49.269 align:start position:0%
frontier and now
well<00:13:47.360><c> which</c><00:13:47.680><c> of</c><00:13:47.839><c> these</c><00:13:48.240><c> edges</c><00:13:48.720><c> that</c><00:13:48.959><c> are</c><00:13:49.120><c> in</c>

00:13:49.269 --> 00:13:49.279 align:start position:0%
well which of these edges that are in
 

00:13:49.279 --> 00:13:51.030 align:start position:0%
well which of these edges that are in
our<00:13:49.360><c> front</c><00:13:49.600><c> here</c><00:13:50.079><c> or</c><00:13:50.240><c> the</c><00:13:50.480><c> nodes</c><00:13:50.800><c> in</c><00:13:50.959><c> our</c>

00:13:51.030 --> 00:13:51.040 align:start position:0%
our front here or the nodes in our
 

00:13:51.040 --> 00:13:52.790 align:start position:0%
our front here or the nodes in our
frontier<00:13:51.440><c> what's</c><00:13:51.680><c> the</c><00:13:51.839><c> minimum</c><00:13:52.240><c> cost</c><00:13:52.560><c> that</c><00:13:52.639><c> we</c>

00:13:52.790 --> 00:13:52.800 align:start position:0%
frontier what's the minimum cost that we
 

00:13:52.800 --> 00:13:53.750 align:start position:0%
frontier what's the minimum cost that we
could<00:13:53.040><c> pop</c>

00:13:53.750 --> 00:13:53.760 align:start position:0%
could pop
 

00:13:53.760 --> 00:13:55.590 align:start position:0%
could pop
i'm<00:13:53.920><c> just</c><00:13:54.079><c> gonna</c><00:13:54.240><c> tell</c><00:13:54.480><c> you</c><00:13:54.639><c> that</c><00:13:55.040><c> for</c><00:13:55.279><c> the</c>

00:13:55.590 --> 00:13:55.600 align:start position:0%
i'm just gonna tell you that for the
 

00:13:55.600 --> 00:13:57.590 align:start position:0%
i'm just gonna tell you that for the
cost<00:13:56.160><c> of</c><00:13:56.480><c> node</c><00:13:56.880><c> four</c>

00:13:57.590 --> 00:13:57.600 align:start position:0%
cost of node four
 

00:13:57.600 --> 00:13:59.269 align:start position:0%
cost of node four
it's<00:13:57.839><c> going</c><00:13:58.079><c> to</c><00:13:58.240><c> be</c><00:13:58.480><c> four</c><00:13:58.800><c> and</c><00:13:58.959><c> it's</c><00:13:59.120><c> going</c><00:13:59.199><c> to</c>

00:13:59.269 --> 00:13:59.279 align:start position:0%
it's going to be four and it's going to
 

00:13:59.279 --> 00:14:01.030 align:start position:0%
it's going to be four and it's going to
be<00:13:59.680><c> this</c><00:14:00.000><c> right</c><00:14:00.399><c> you</c><00:14:00.560><c> can</c><00:14:00.639><c> tell</c><00:14:00.800><c> by</c><00:14:00.959><c> the</c>

00:14:01.030 --> 00:14:01.040 align:start position:0%
be this right you can tell by the
 

00:14:01.040 --> 00:14:02.230 align:start position:0%
be this right you can tell by the
picture<00:14:01.360><c> that's</c><00:14:01.519><c> pretty</c><00:14:01.760><c> obvious</c>

00:14:02.230 --> 00:14:02.240 align:start position:0%
picture that's pretty obvious
 

00:14:02.240 --> 00:14:03.750 align:start position:0%
picture that's pretty obvious
this<00:14:02.480><c> is</c><00:14:02.560><c> going</c><00:14:02.639><c> to</c><00:14:02.720><c> be</c><00:14:02.800><c> the</c><00:14:02.959><c> shortest</c><00:14:03.360><c> way</c><00:14:03.519><c> to</c>

00:14:03.750 --> 00:14:03.760 align:start position:0%
this is going to be the shortest way to
 

00:14:03.760 --> 00:14:05.590 align:start position:0%
this is going to be the shortest way to
include<00:14:04.160><c> the</c><00:14:04.320><c> node</c><00:14:04.800><c> 4.</c>

00:14:05.590 --> 00:14:05.600 align:start position:0%
include the node 4.
 

00:14:05.600 --> 00:14:08.949 align:start position:0%
include the node 4.
so<00:14:05.760><c> let's</c><00:14:06.000><c> pop</c><00:14:06.320><c> this</c><00:14:06.560><c> node</c><00:14:07.440><c> add</c><00:14:07.680><c> it</c><00:14:07.839><c> to</c>

00:14:08.949 --> 00:14:08.959 align:start position:0%
so let's pop this node add it to
 

00:14:08.959 --> 00:14:12.310 align:start position:0%
so let's pop this node add it to
the<00:14:09.279><c> edges</c><00:14:09.760><c> list</c><00:14:10.079><c> so</c><00:14:10.880><c> 1</c><00:14:11.360><c> or</c><00:14:11.760><c> 3</c>

00:14:12.310 --> 00:14:12.320 align:start position:0%
the edges list so 1 or 3
 

00:14:12.320 --> 00:14:15.030 align:start position:0%
the edges list so 1 or 3
and<00:14:12.880><c> 4</c><00:14:13.279><c> are</c><00:14:13.440><c> going</c><00:14:13.600><c> to</c><00:14:13.680><c> be</c><00:14:13.839><c> connected</c><00:14:14.720><c> and</c><00:14:14.880><c> the</c>

00:14:15.030 --> 00:14:15.040 align:start position:0%
and 4 are going to be connected and the
 

00:14:15.040 --> 00:14:16.790 align:start position:0%
and 4 are going to be connected and the
cost<00:14:15.440><c> of</c><00:14:15.600><c> that</c><00:14:15.839><c> one</c><00:14:16.160><c> was</c>

00:14:16.790 --> 00:14:16.800 align:start position:0%
cost of that one was
 

00:14:16.800 --> 00:14:19.430 align:start position:0%
cost of that one was
four<00:14:17.040><c> so</c><00:14:17.199><c> let's</c><00:14:17.519><c> add</c><00:14:17.920><c> four</c><00:14:18.639><c> and</c><00:14:18.880><c> let's</c><00:14:19.120><c> add</c><00:14:19.360><c> it</c>

00:14:19.430 --> 00:14:19.440 align:start position:0%
four so let's add four and let's add it
 

00:14:19.440 --> 00:14:20.629 align:start position:0%
four so let's add four and let's add it
to<00:14:19.680><c> the</c><00:14:19.920><c> visit</c><00:14:20.240><c> now</c>

00:14:20.629 --> 00:14:20.639 align:start position:0%
to the visit now
 

00:14:20.639 --> 00:14:22.470 align:start position:0%
to the visit now
just<00:14:20.800><c> so</c><00:14:20.959><c> you</c><00:14:21.120><c> know</c><00:14:21.360><c> that</c><00:14:21.519><c> let's</c><00:14:21.680><c> say</c><00:14:21.839><c> we</c><00:14:22.079><c> did</c>

00:14:22.470 --> 00:14:22.480 align:start position:0%
just so you know that let's say we did
 

00:14:22.480 --> 00:14:24.470 align:start position:0%
just so you know that let's say we did
end<00:14:22.639><c> up</c><00:14:22.880><c> popping</c><00:14:23.279><c> the</c><00:14:23.440><c> same</c><00:14:23.760><c> node</c><00:14:24.000><c> multiple</c>

00:14:24.470 --> 00:14:24.480 align:start position:0%
end up popping the same node multiple
 

00:14:24.480 --> 00:14:25.829 align:start position:0%
end up popping the same node multiple
times<00:14:24.800><c> because</c><00:14:25.040><c> technically</c><00:14:25.519><c> that's</c>

00:14:25.829 --> 00:14:25.839 align:start position:0%
times because technically that's
 

00:14:25.839 --> 00:14:26.629 align:start position:0%
times because technically that's
possible<00:14:26.320><c> right</c>

00:14:26.629 --> 00:14:26.639 align:start position:0%
possible right
 

00:14:26.639 --> 00:14:28.710 align:start position:0%
possible right
we<00:14:26.880><c> pop</c><00:14:27.199><c> one</c><00:14:27.440><c> four</c><00:14:27.680><c> but</c><00:14:27.760><c> we</c><00:14:27.920><c> still</c><00:14:28.079><c> have</c><00:14:28.240><c> a</c><00:14:28.399><c> four</c>

00:14:28.710 --> 00:14:28.720 align:start position:0%
we pop one four but we still have a four
 

00:14:28.720 --> 00:14:29.670 align:start position:0%
we pop one four but we still have a four
remaining

00:14:29.670 --> 00:14:29.680 align:start position:0%
remaining
 

00:14:29.680 --> 00:14:32.790 align:start position:0%
remaining
in<00:14:30.320><c> the</c><00:14:31.040><c> frontier</c><00:14:31.600><c> so</c><00:14:31.760><c> we</c><00:14:31.920><c> what</c><00:14:32.079><c> if</c><00:14:32.160><c> we</c><00:14:32.320><c> popped</c>

00:14:32.790 --> 00:14:32.800 align:start position:0%
in the frontier so we what if we popped
 

00:14:32.800 --> 00:14:34.790 align:start position:0%
in the frontier so we what if we popped
four<00:14:33.120><c> again</c><00:14:33.600><c> what</c><00:14:33.760><c> would</c><00:14:33.920><c> we</c><00:14:34.079><c> do</c><00:14:34.320><c> well</c><00:14:34.639><c> we</c>

00:14:34.790 --> 00:14:34.800 align:start position:0%
four again what would we do well we
 

00:14:34.800 --> 00:14:36.629 align:start position:0%
four again what would we do well we
would<00:14:34.959><c> actually</c><00:14:35.440><c> see</c><00:14:35.680><c> that</c><00:14:36.000><c> okay</c><00:14:36.240><c> let's</c><00:14:36.480><c> take</c>

00:14:36.629 --> 00:14:36.639 align:start position:0%
would actually see that okay let's take
 

00:14:36.639 --> 00:14:37.829 align:start position:0%
would actually see that okay let's take
a look<00:14:36.800><c> at</c><00:14:36.880><c> our</c><00:14:37.040><c> visit</c><00:14:37.279><c> well</c><00:14:37.519><c> four</c>

00:14:37.829 --> 00:14:37.839 align:start position:0%
a look at our visit well four
 

00:14:37.839 --> 00:14:39.430 align:start position:0%
a look at our visit well four
is<00:14:38.000><c> already</c><00:14:38.320><c> been</c><00:14:38.480><c> visited</c><00:14:38.880><c> right</c><00:14:39.040><c> so</c><00:14:39.199><c> there's</c>

00:14:39.430 --> 00:14:39.440 align:start position:0%
is already been visited right so there's
 

00:14:39.440 --> 00:14:41.269 align:start position:0%
is already been visited right so there's
no<00:14:39.680><c> need</c><00:14:39.839><c> to</c><00:14:40.000><c> add</c><00:14:40.240><c> this</c><00:14:40.399><c> to</c><00:14:40.560><c> visit</c><00:14:40.880><c> again</c><00:14:41.199><c> and</c>

00:14:41.269 --> 00:14:41.279 align:start position:0%
no need to add this to visit again and
 

00:14:41.279 --> 00:14:43.269 align:start position:0%
no need to add this to visit again and
there's<00:14:41.519><c> no</c><00:14:41.680><c> need</c><00:14:41.920><c> to</c><00:14:42.000><c> add</c><00:14:42.240><c> the</c><00:14:42.399><c> frontier</c>

00:14:43.269 --> 00:14:43.279 align:start position:0%
there's no need to add the frontier
 

00:14:43.279 --> 00:14:44.790 align:start position:0%
there's no need to add the frontier
of<00:14:43.440><c> that</c><00:14:43.680><c> again</c><00:14:44.000><c> and</c><00:14:44.079><c> there's</c><00:14:44.320><c> no</c><00:14:44.480><c> need</c><00:14:44.720><c> to</c>

00:14:44.790 --> 00:14:44.800 align:start position:0%
of that again and there's no need to
 

00:14:44.800 --> 00:14:46.629 align:start position:0%
of that again and there's no need to
take<00:14:44.959><c> the</c><00:14:45.279><c> cost</c><00:14:46.000><c> of</c><00:14:46.240><c> that</c>

00:14:46.629 --> 00:14:46.639 align:start position:0%
take the cost of that
 

00:14:46.639 --> 00:14:49.030 align:start position:0%
take the cost of that
and<00:14:46.880><c> add</c><00:14:47.120><c> it</c><00:14:47.199><c> to</c><00:14:47.360><c> our</c><00:14:47.440><c> total</c><00:14:47.839><c> cost</c><00:14:48.480><c> because</c>

00:14:49.030 --> 00:14:49.040 align:start position:0%
and add it to our total cost because
 

00:14:49.040 --> 00:14:50.949 align:start position:0%
and add it to our total cost because
four<00:14:49.279><c> was</c><00:14:49.519><c> already</c><00:14:50.000><c> connected</c><00:14:50.399><c> to</c><00:14:50.560><c> the</c><00:14:50.720><c> graph</c>

00:14:50.949 --> 00:14:50.959 align:start position:0%
four was already connected to the graph
 

00:14:50.959 --> 00:14:52.790 align:start position:0%
four was already connected to the graph
we<00:14:51.040><c> don't</c><00:14:51.199><c> wanna</c><00:14:51.519><c> you</c><00:14:51.600><c> know</c><00:14:51.839><c> add</c><00:14:52.079><c> a</c><00:14:52.160><c> redundant</c>

00:14:52.790 --> 00:14:52.800 align:start position:0%
we don't wanna you know add a redundant
 

00:14:52.800 --> 00:14:53.509 align:start position:0%
we don't wanna you know add a redundant
cost

00:14:53.509 --> 00:14:53.519 align:start position:0%
cost
 

00:14:53.519 --> 00:14:55.829 align:start position:0%
cost
okay<00:14:53.760><c> but</c><00:14:53.920><c> so</c><00:14:54.079><c> now</c><00:14:54.320><c> you</c><00:14:54.399><c> can</c><00:14:54.639><c> see</c><00:14:55.120><c> that</c><00:14:55.519><c> four</c>

00:14:55.829 --> 00:14:55.839 align:start position:0%
okay but so now you can see that four
 

00:14:55.839 --> 00:14:57.269 align:start position:0%
okay but so now you can see that four
has<00:14:56.000><c> been</c><00:14:56.240><c> added</c><00:14:56.480><c> to</c><00:14:56.639><c> our</c><00:14:56.800><c> graph</c>

00:14:57.269 --> 00:14:57.279 align:start position:0%
has been added to our graph
 

00:14:57.279 --> 00:14:59.110 align:start position:0%
has been added to our graph
now<00:14:57.519><c> what's</c><00:14:57.920><c> the</c><00:14:58.079><c> remaining</c><00:14:58.560><c> neighbors</c><00:14:59.040><c> of</c>

00:14:59.110 --> 00:14:59.120 align:start position:0%
now what's the remaining neighbors of
 

00:14:59.120 --> 00:15:00.949 align:start position:0%
now what's the remaining neighbors of
four<00:14:59.440><c> of</c><00:14:59.519><c> course</c><00:15:00.079><c> these</c><00:15:00.320><c> three</c><00:15:00.560><c> nodes</c><00:15:00.880><c> have</c>

00:15:00.949 --> 00:15:00.959 align:start position:0%
four of course these three nodes have
 

00:15:00.959 --> 00:15:02.550 align:start position:0%
four of course these three nodes have
already<00:15:01.199><c> been</c><00:15:01.360><c> visited</c><00:15:01.680><c> so</c><00:15:01.839><c> the</c><00:15:02.000><c> only</c><00:15:02.240><c> edge</c><00:15:02.480><c> we</c>

00:15:02.550 --> 00:15:02.560 align:start position:0%
already been visited so the only edge we
 

00:15:02.560 --> 00:15:04.470 align:start position:0%
already been visited so the only edge we
could<00:15:02.720><c> possibly</c><00:15:03.199><c> add</c><00:15:03.440><c> that</c><00:15:03.600><c> would</c><00:15:03.760><c> be</c><00:15:04.000><c> useful</c>

00:15:04.470 --> 00:15:04.480 align:start position:0%
could possibly add that would be useful
 

00:15:04.480 --> 00:15:05.189 align:start position:0%
could possibly add that would be useful
would<00:15:04.639><c> be</c>

00:15:05.189 --> 00:15:05.199 align:start position:0%
would be
 

00:15:05.199 --> 00:15:06.550 align:start position:0%
would be
this<00:15:05.519><c> to</c><00:15:05.680><c> there</c><00:15:05.920><c> but</c><00:15:06.079><c> you</c><00:15:06.240><c> can</c><00:15:06.320><c> see</c><00:15:06.480><c> that</c>

00:15:06.550 --> 00:15:06.560 align:start position:0%
this to there but you can see that
 

00:15:06.560 --> 00:15:08.470 align:start position:0%
this to there but you can see that
that's<00:15:06.800><c> a</c><00:15:06.880><c> pretty</c><00:15:07.199><c> long</c><00:15:07.600><c> path</c><00:15:07.920><c> right</c><00:15:08.079><c> surely</c>

00:15:08.470 --> 00:15:08.480 align:start position:0%
that's a pretty long path right surely
 

00:15:08.480 --> 00:15:10.470 align:start position:0%
that's a pretty long path right surely
we<00:15:08.639><c> have</c><00:15:08.720><c> a</c><00:15:08.880><c> shorter</c><00:15:09.279><c> path</c><00:15:09.680><c> in</c><00:15:09.760><c> our</c><00:15:09.920><c> graph</c>

00:15:10.470 --> 00:15:10.480 align:start position:0%
we have a shorter path in our graph
 

00:15:10.480 --> 00:15:13.350 align:start position:0%
we have a shorter path in our graph
to<00:15:10.720><c> the</c><00:15:10.880><c> two</c><00:15:11.120><c> node</c><00:15:11.680><c> so</c><00:15:12.320><c> so</c><00:15:12.480><c> you</c><00:15:12.560><c> can</c><00:15:12.720><c> see</c><00:15:12.959><c> four</c>

00:15:13.350 --> 00:15:13.360 align:start position:0%
to the two node so so you can see four
 

00:15:13.360 --> 00:15:14.949 align:start position:0%
to the two node so so you can see four
of<00:15:13.519><c> them</c><00:15:13.760><c> are</c><00:15:14.000><c> already</c><00:15:14.399><c> connected</c><00:15:14.720><c> we</c><00:15:14.880><c> just</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
of them are already connected we just
 

00:15:14.959 --> 00:15:16.470 align:start position:0%
of them are already connected we just
need<00:15:15.120><c> to</c><00:15:15.199><c> connect</c><00:15:15.440><c> one</c><00:15:15.600><c> last</c><00:15:15.920><c> one</c><00:15:16.079><c> so</c><00:15:16.240><c> let's</c>

00:15:16.470 --> 00:15:16.480 align:start position:0%
need to connect one last one so let's
 

00:15:16.480 --> 00:15:18.150 align:start position:0%
need to connect one last one so let's
pop<00:15:16.639><c> from</c><00:15:16.880><c> our</c><00:15:16.959><c> frontier</c><00:15:17.440><c> again</c>

00:15:18.150 --> 00:15:18.160 align:start position:0%
pop from our frontier again
 

00:15:18.160 --> 00:15:19.910 align:start position:0%
pop from our frontier again
this<00:15:18.480><c> is</c><00:15:18.560><c> gonna</c><00:15:18.720><c> be</c><00:15:18.959><c> obviously</c><00:15:19.440><c> two</c><00:15:19.680><c> is</c><00:15:19.760><c> gonna</c>

00:15:19.910 --> 00:15:19.920 align:start position:0%
this is gonna be obviously two is gonna
 

00:15:19.920 --> 00:15:21.110 align:start position:0%
this is gonna be obviously two is gonna
be<00:15:20.000><c> the</c><00:15:20.079><c> one</c><00:15:20.240><c> that's</c><00:15:20.480><c> popped</c><00:15:20.720><c> but</c><00:15:20.880><c> what</c>

00:15:21.110 --> 00:15:21.120 align:start position:0%
be the one that's popped but what
 

00:15:21.120 --> 00:15:22.949 align:start position:0%
be the one that's popped but what
exactly<00:15:21.519><c> is</c><00:15:21.600><c> gonna</c><00:15:21.760><c> be</c><00:15:21.920><c> the</c><00:15:22.079><c> cost</c><00:15:22.480><c> of</c><00:15:22.639><c> it</c>

00:15:22.949 --> 00:15:22.959 align:start position:0%
exactly is gonna be the cost of it
 

00:15:22.959 --> 00:15:24.550 align:start position:0%
exactly is gonna be the cost of it
well<00:15:23.199><c> i'll</c><00:15:23.360><c> just</c><00:15:23.600><c> tell</c><00:15:23.760><c> you</c><00:15:23.920><c> the</c><00:15:24.079><c> cost</c><00:15:24.399><c> is</c>

00:15:24.550 --> 00:15:24.560 align:start position:0%
well i'll just tell you the cost is
 

00:15:24.560 --> 00:15:26.790 align:start position:0%
well i'll just tell you the cost is
gonna<00:15:24.720><c> be</c><00:15:24.959><c> nine</c><00:15:25.600><c> and</c><00:15:25.760><c> which</c><00:15:26.079><c> edge</c><00:15:26.399><c> is</c><00:15:26.480><c> it</c><00:15:26.560><c> gonna</c>

00:15:26.790 --> 00:15:26.800 align:start position:0%
gonna be nine and which edge is it gonna
 

00:15:26.800 --> 00:15:28.389 align:start position:0%
gonna be nine and which edge is it gonna
be<00:15:27.040><c> well</c><00:15:27.279><c> by</c><00:15:27.519><c> looking</c><00:15:27.760><c> at</c><00:15:27.839><c> the</c><00:15:27.920><c> picture</c><00:15:28.240><c> we'd</c>

00:15:28.389 --> 00:15:28.399 align:start position:0%
be well by looking at the picture we'd
 

00:15:28.399 --> 00:15:30.230 align:start position:0%
be well by looking at the picture we'd
probably<00:15:28.720><c> think</c><00:15:28.959><c> one</c><00:15:29.120><c> of</c><00:15:29.279><c> these</c><00:15:29.600><c> two</c><00:15:29.920><c> is</c><00:15:30.079><c> gonna</c>

00:15:30.230 --> 00:15:30.240 align:start position:0%
probably think one of these two is gonna
 

00:15:30.240 --> 00:15:31.829 align:start position:0%
probably think one of these two is gonna
be<00:15:30.399><c> connected</c><00:15:30.880><c> to</c><00:15:31.040><c> two</c><00:15:31.360><c> either</c>

00:15:31.829 --> 00:15:31.839 align:start position:0%
be connected to two either
 

00:15:31.839 --> 00:15:33.990 align:start position:0%
be connected to two either
like<00:15:32.000><c> this</c><00:15:32.320><c> or</c><00:15:32.560><c> like</c><00:15:32.880><c> this</c><00:15:33.360><c> and</c><00:15:33.519><c> i'll</c><00:15:33.680><c> tell</c><00:15:33.839><c> you</c>

00:15:33.990 --> 00:15:34.000 align:start position:0%
like this or like this and i'll tell you
 

00:15:34.000 --> 00:15:35.829 align:start position:0%
like this or like this and i'll tell you
that<00:15:34.480><c> the</c><00:15:34.720><c> paths</c><00:15:35.040><c> are</c><00:15:35.199><c> actually</c><00:15:35.519><c> not</c>

00:15:35.829 --> 00:15:35.839 align:start position:0%
that the paths are actually not
 

00:15:35.839 --> 00:15:37.749 align:start position:0%
that the paths are actually not
of<00:15:36.160><c> equal</c><00:15:36.639><c> length</c><00:15:36.959><c> if</c><00:15:37.040><c> they</c><00:15:37.199><c> were</c><00:15:37.440><c> equal</c>

00:15:37.749 --> 00:15:37.759 align:start position:0%
of equal length if they were equal
 

00:15:37.759 --> 00:15:39.189 align:start position:0%
of equal length if they were equal
length<00:15:38.000><c> it</c><00:15:38.079><c> wouldn't</c><00:15:38.320><c> really</c><00:15:38.639><c> matter</c><00:15:38.959><c> what</c>

00:15:39.189 --> 00:15:39.199 align:start position:0%
length it wouldn't really matter what
 

00:15:39.199 --> 00:15:40.790 align:start position:0%
length it wouldn't really matter what
which<00:15:39.440><c> one</c><00:15:39.600><c> we</c><00:15:39.839><c> chose</c><00:15:40.160><c> right</c>

00:15:40.790 --> 00:15:40.800 align:start position:0%
which one we chose right
 

00:15:40.800 --> 00:15:42.949 align:start position:0%
which one we chose right
it<00:15:40.880><c> would</c><00:15:41.440><c> it</c><00:15:41.600><c> would</c><00:15:41.759><c> lead</c><00:15:41.920><c> to</c><00:15:42.079><c> the</c><00:15:42.160><c> same</c><00:15:42.480><c> cost</c>

00:15:42.949 --> 00:15:42.959 align:start position:0%
it would it would lead to the same cost
 

00:15:42.959 --> 00:15:44.629 align:start position:0%
it would it would lead to the same cost
anyway<00:15:43.440><c> but</c><00:15:43.680><c> in</c><00:15:43.759><c> this</c><00:15:43.920><c> case</c><00:15:44.160><c> i'll</c><00:15:44.320><c> tell</c><00:15:44.480><c> you</c>

00:15:44.629 --> 00:15:44.639 align:start position:0%
anyway but in this case i'll tell you
 

00:15:44.639 --> 00:15:46.069 align:start position:0%
anyway but in this case i'll tell you
this<00:15:44.880><c> is</c><00:15:44.959><c> the</c><00:15:45.120><c> shorter</c><00:15:45.600><c> one</c>

00:15:46.069 --> 00:15:46.079 align:start position:0%
this is the shorter one
 

00:15:46.079 --> 00:15:48.710 align:start position:0%
this is the shorter one
so<00:15:46.639><c> and</c><00:15:47.519><c> yes</c><00:15:47.759><c> the</c><00:15:47.920><c> cost</c><00:15:48.240><c> of</c><00:15:48.320><c> that</c><00:15:48.480><c> is</c><00:15:48.560><c> going</c><00:15:48.639><c> to</c>

00:15:48.710 --> 00:15:48.720 align:start position:0%
so and yes the cost of that is going to
 

00:15:48.720 --> 00:15:50.470 align:start position:0%
so and yes the cost of that is going to
be<00:15:48.880><c> nine</c><00:15:49.120><c> so</c><00:15:49.279><c> we</c><00:15:49.360><c> can</c><00:15:49.519><c> pop</c><00:15:49.759><c> this</c><00:15:49.920><c> so</c><00:15:50.079><c> we</c><00:15:50.160><c> can</c><00:15:50.240><c> say</c>

00:15:50.470 --> 00:15:50.480 align:start position:0%
be nine so we can pop this so we can say
 

00:15:50.480 --> 00:15:50.870 align:start position:0%
be nine so we can pop this so we can say
okay

00:15:50.870 --> 00:15:50.880 align:start position:0%
okay
 

00:15:50.880 --> 00:15:53.030 align:start position:0%
okay
two<00:15:51.120><c> has</c><00:15:51.279><c> now</c><00:15:51.440><c> been</c><00:15:51.680><c> added</c><00:15:52.320><c> two</c><00:15:52.560><c> has</c><00:15:52.800><c> been</c>

00:15:53.030 --> 00:15:53.040 align:start position:0%
two has now been added two has been
 

00:15:53.040 --> 00:15:54.389 align:start position:0%
two has now been added two has been
visited<00:15:53.360><c> now</c><00:15:53.600><c> it</c><00:15:53.920><c> wasn't</c>

00:15:54.389 --> 00:15:54.399 align:start position:0%
visited now it wasn't
 

00:15:54.399 --> 00:15:56.230 align:start position:0%
visited now it wasn't
previously<00:15:54.880><c> visited</c><00:15:55.279><c> but</c><00:15:55.440><c> now</c><00:15:55.600><c> it's</c><00:15:55.839><c> visited</c>

00:15:56.230 --> 00:15:56.240 align:start position:0%
previously visited but now it's visited
 

00:15:56.240 --> 00:15:58.230 align:start position:0%
previously visited but now it's visited
and<00:15:56.320><c> the</c><00:15:56.399><c> cost</c><00:15:56.720><c> of</c><00:15:56.880><c> adding</c><00:15:57.120><c> it</c><00:15:57.199><c> was</c><00:15:57.440><c> 9.</c><00:15:57.759><c> so</c><00:15:57.920><c> the</c>

00:15:58.230 --> 00:15:58.240 align:start position:0%
and the cost of adding it was 9. so the
 

00:15:58.240 --> 00:15:59.269 align:start position:0%
and the cost of adding it was 9. so the
total<00:15:58.720><c> cost</c>

00:15:59.269 --> 00:15:59.279 align:start position:0%
total cost
 

00:15:59.279 --> 00:16:02.629 align:start position:0%
total cost
that<00:15:59.440><c> we</c><00:15:59.600><c> ended</c><00:15:59.920><c> up</c><00:16:00.079><c> getting</c><00:16:00.639><c> was</c><00:16:01.360><c> 20</c><00:16:02.000><c> 20</c><00:16:02.480><c> was</c>

00:16:02.629 --> 00:16:02.639 align:start position:0%
that we ended up getting was 20 20 was
 

00:16:02.639 --> 00:16:03.749 align:start position:0%
that we ended up getting was 20 20 was
the<00:16:02.800><c> total</c><00:16:03.279><c> cost</c>

00:16:03.749 --> 00:16:03.759 align:start position:0%
the total cost
 

00:16:03.759 --> 00:16:06.150 align:start position:0%
the total cost
and<00:16:04.000><c> now</c><00:16:04.240><c> we</c><00:16:04.480><c> know</c><00:16:04.720><c> we're</c><00:16:04.959><c> done</c><00:16:05.199><c> because</c><00:16:05.680><c> every</c>

00:16:06.150 --> 00:16:06.160 align:start position:0%
and now we know we're done because every
 

00:16:06.160 --> 00:16:08.629 align:start position:0%
and now we know we're done because every
node<00:16:06.560><c> in</c><00:16:06.720><c> our</c><00:16:06.959><c> graph</c><00:16:07.360><c> has</c><00:16:07.600><c> been</c><00:16:07.920><c> connected</c><00:16:08.560><c> you</c>

00:16:08.629 --> 00:16:08.639 align:start position:0%
node in our graph has been connected you
 

00:16:08.639 --> 00:16:09.910 align:start position:0%
node in our graph has been connected you
can<00:16:08.800><c> tell</c><00:16:09.040><c> by</c><00:16:09.199><c> the</c><00:16:09.440><c> red</c>

00:16:09.910 --> 00:16:09.920 align:start position:0%
can tell by the red
 

00:16:09.920 --> 00:16:12.710 align:start position:0%
can tell by the red
edges<00:16:10.720><c> all</c><00:16:10.959><c> of</c><00:16:11.040><c> the</c><00:16:11.279><c> nodes</c><00:16:11.680><c> are</c><00:16:11.839><c> connected</c><00:16:12.480><c> we</c>

00:16:12.710 --> 00:16:12.720 align:start position:0%
edges all of the nodes are connected we
 

00:16:12.720 --> 00:16:13.189 align:start position:0%
edges all of the nodes are connected we
added

00:16:13.189 --> 00:16:13.199 align:start position:0%
added
 

00:16:13.199 --> 00:16:16.150 align:start position:0%
added
four<00:16:13.600><c> edges</c><00:16:14.560><c> and</c><00:16:14.720><c> we</c><00:16:14.959><c> visited</c><00:16:15.440><c> every</c><00:16:15.759><c> single</c>

00:16:16.150 --> 00:16:16.160 align:start position:0%
four edges and we visited every single
 

00:16:16.160 --> 00:16:17.030 align:start position:0%
four edges and we visited every single
of<00:16:16.320><c> the</c><00:16:16.560><c> five</c>

00:16:17.030 --> 00:16:17.040 align:start position:0%
of the five
 

00:16:17.040 --> 00:16:19.509 align:start position:0%
of the five
nodes<00:16:17.680><c> so</c><00:16:18.000><c> the</c><00:16:18.160><c> algorithm</c><00:16:18.639><c> prim's</c><00:16:19.040><c> algorithm</c>

00:16:19.509 --> 00:16:19.519 align:start position:0%
nodes so the algorithm prim's algorithm
 

00:16:19.519 --> 00:16:21.269 align:start position:0%
nodes so the algorithm prim's algorithm
is<00:16:19.600><c> just</c><00:16:19.920><c> that</c><00:16:20.240><c> simple</c><00:16:20.639><c> i</c><00:16:20.720><c> mean</c><00:16:20.880><c> it's</c><00:16:21.040><c> not</c>

00:16:21.269 --> 00:16:21.279 align:start position:0%
is just that simple i mean it's not
 

00:16:21.279 --> 00:16:22.949 align:start position:0%
is just that simple i mean it's not
really<00:16:21.600><c> simple</c><00:16:21.920><c> until</c><00:16:22.160><c> you've</c><00:16:22.399><c> actually</c><00:16:22.720><c> done</c>

00:16:22.949 --> 00:16:22.959 align:start position:0%
really simple until you've actually done
 

00:16:22.959 --> 00:16:24.550 align:start position:0%
really simple until you've actually done
it<00:16:23.120><c> a</c><00:16:23.199><c> few</c><00:16:23.360><c> times</c><00:16:23.680><c> you've</c><00:16:23.839><c> practiced</c><00:16:24.320><c> it</c><00:16:24.480><c> and</c>

00:16:24.550 --> 00:16:24.560 align:start position:0%
it a few times you've practiced it and
 

00:16:24.560 --> 00:16:26.310 align:start position:0%
it a few times you've practiced it and
learned<00:16:24.880><c> these</c><00:16:25.120><c> concepts</c><00:16:25.680><c> of</c>

00:16:26.310 --> 00:16:26.320 align:start position:0%
learned these concepts of
 

00:16:26.320 --> 00:16:28.710 align:start position:0%
learned these concepts of
visit<00:16:27.040><c> minheep</c><00:16:27.839><c> and</c><00:16:28.079><c> now</c><00:16:28.240><c> we're</c><00:16:28.480><c> actually</c>

00:16:28.710 --> 00:16:28.720 align:start position:0%
visit minheep and now we're actually
 

00:16:28.720 --> 00:16:30.470 align:start position:0%
visit minheep and now we're actually
going<00:16:28.800><c> to</c><00:16:28.959><c> jump</c><00:16:29.199><c> into</c><00:16:29.440><c> the</c><00:16:29.600><c> code</c><00:16:29.920><c> it's</c><00:16:30.160><c> about</c>

00:16:30.470 --> 00:16:30.480 align:start position:0%
going to jump into the code it's about
 

00:16:30.480 --> 00:16:32.230 align:start position:0%
going to jump into the code it's about
20<00:16:30.800><c> to</c><00:16:30.959><c> 30</c><00:16:31.360><c> lines</c>

00:16:32.230 --> 00:16:32.240 align:start position:0%
20 to 30 lines
 

00:16:32.240 --> 00:16:34.150 align:start position:0%
20 to 30 lines
okay<00:16:32.560><c> so</c><00:16:32.720><c> let's</c><00:16:33.040><c> write</c><00:16:33.279><c> it</c><00:16:33.440><c> out</c><00:16:33.680><c> and</c><00:16:33.839><c> like</c><00:16:34.000><c> i</c>

00:16:34.150 --> 00:16:34.160 align:start position:0%
okay so let's write it out and like i
 

00:16:34.160 --> 00:16:35.670 align:start position:0%
okay so let's write it out and like i
said<00:16:34.399><c> so</c><00:16:34.560><c> the</c><00:16:34.800><c> first</c><00:16:35.120><c> thing</c><00:16:35.360><c> we're</c><00:16:35.519><c> going</c><00:16:35.600><c> to</c>

00:16:35.670 --> 00:16:35.680 align:start position:0%
said so the first thing we're going to
 

00:16:35.680 --> 00:16:36.550 align:start position:0%
said so the first thing we're going to
be<00:16:35.920><c> doing</c>

00:16:36.550 --> 00:16:36.560 align:start position:0%
be doing
 

00:16:36.560 --> 00:16:39.509 align:start position:0%
be doing
is<00:16:37.199><c> actually</c><00:16:37.680><c> creating</c><00:16:38.320><c> the</c><00:16:38.560><c> adjacency</c><00:16:39.279><c> list</c>

00:16:39.509 --> 00:16:39.519 align:start position:0%
is actually creating the adjacency list
 

00:16:39.519 --> 00:16:40.870 align:start position:0%
is actually creating the adjacency list
because<00:16:39.759><c> that's</c><00:16:40.000><c> not</c><00:16:40.160><c> given</c><00:16:40.480><c> to</c><00:16:40.560><c> us</c><00:16:40.720><c> we're</c>

00:16:40.870 --> 00:16:40.880 align:start position:0%
because that's not given to us we're
 

00:16:40.880 --> 00:16:42.470 align:start position:0%
because that's not given to us we're
just<00:16:41.120><c> given</c><00:16:41.360><c> a</c><00:16:41.440><c> list</c><00:16:41.759><c> of</c><00:16:41.920><c> points</c><00:16:42.240><c> so</c><00:16:42.320><c> i'm</c><00:16:42.399><c> going</c>

00:16:42.470 --> 00:16:42.480 align:start position:0%
just given a list of points so i'm going
 

00:16:42.480 --> 00:16:44.230 align:start position:0%
just given a list of points so i'm going
to<00:16:42.560><c> get</c><00:16:42.639><c> the</c><00:16:42.800><c> number</c><00:16:43.040><c> of</c><00:16:43.199><c> points</c><00:16:43.600><c> we</c><00:16:43.759><c> have</c>

00:16:44.230 --> 00:16:44.240 align:start position:0%
to get the number of points we have
 

00:16:44.240 --> 00:16:45.509 align:start position:0%
to get the number of points we have
and<00:16:44.399><c> then</c><00:16:44.560><c> i'm</c><00:16:44.720><c> going</c><00:16:44.800><c> to</c><00:16:44.880><c> start</c><00:16:45.120><c> creating</c>

00:16:45.509 --> 00:16:45.519 align:start position:0%
and then i'm going to start creating
 

00:16:45.519 --> 00:16:47.430 align:start position:0%
and then i'm going to start creating
that<00:16:45.759><c> adjacency</c><00:16:46.480><c> list</c><00:16:46.800><c> so</c>

00:16:47.430 --> 00:16:47.440 align:start position:0%
that adjacency list so
 

00:16:47.440 --> 00:16:49.430 align:start position:0%
that adjacency list so
and<00:16:47.600><c> basically</c><00:16:48.079><c> i'm</c><00:16:48.240><c> going</c><00:16:48.320><c> to</c><00:16:48.480><c> refer</c><00:16:48.959><c> to</c><00:16:49.120><c> each</c>

00:16:49.430 --> 00:16:49.440 align:start position:0%
and basically i'm going to refer to each
 

00:16:49.440 --> 00:16:51.749 align:start position:0%
and basically i'm going to refer to each
point<00:16:49.839><c> in</c><00:16:50.079><c> our</c><00:16:50.399><c> list</c><00:16:50.800><c> as</c>

00:16:51.749 --> 00:16:51.759 align:start position:0%
point in our list as
 

00:16:51.759 --> 00:16:54.310 align:start position:0%
point in our list as
basically<00:16:52.399><c> the</c><00:16:52.720><c> index</c><00:16:53.199><c> of</c><00:16:53.360><c> that</c><00:16:53.680><c> point</c><00:16:53.920><c> so</c><00:16:54.160><c> the</c>

00:16:54.310 --> 00:16:54.320 align:start position:0%
basically the index of that point so the
 

00:16:54.320 --> 00:16:55.829 align:start position:0%
basically the index of that point so the
first<00:16:54.639><c> point</c><00:16:54.880><c> in</c><00:16:54.959><c> our</c><00:16:55.120><c> points</c><00:16:55.360><c> list</c><00:16:55.680><c> is</c><00:16:55.759><c> going</c>

00:16:55.829 --> 00:16:55.839 align:start position:0%
first point in our points list is going
 

00:16:55.839 --> 00:16:56.949 align:start position:0%
first point in our points list is going
to<00:16:55.920><c> be</c><00:16:56.079><c> point</c><00:16:56.320><c> zero</c>

00:16:56.949 --> 00:16:56.959 align:start position:0%
to be point zero
 

00:16:56.959 --> 00:17:00.150 align:start position:0%
to be point zero
the<00:16:57.120><c> next</c><00:16:57.360><c> one</c><00:16:57.519><c> is</c><00:16:57.680><c> going</c><00:16:57.759><c> to</c><00:16:57.839><c> be</c><00:16:58.000><c> 0.1</c><00:16:58.639><c> etc</c><00:16:59.199><c> etc</c>

00:17:00.150 --> 00:17:00.160 align:start position:0%
the next one is going to be 0.1 etc etc
 

00:17:00.160 --> 00:17:03.509 align:start position:0%
the next one is going to be 0.1 etc etc
so<00:17:00.399><c> we</c><00:17:00.560><c> can</c><00:17:00.639><c> just</c><00:17:00.880><c> say</c><00:17:01.279><c> for</c><00:17:02.240><c> i</c><00:17:03.120><c> in</c>

00:17:03.509 --> 00:17:03.519 align:start position:0%
so we can just say for i in
 

00:17:03.519 --> 00:17:05.590 align:start position:0%
so we can just say for i in
range<00:17:04.160><c> of</c><00:17:04.319><c> the</c><00:17:04.480><c> number</c><00:17:04.720><c> of</c><00:17:04.799><c> points</c><00:17:05.120><c> we</c><00:17:05.280><c> have</c><00:17:05.439><c> so</c>

00:17:05.590 --> 00:17:05.600 align:start position:0%
range of the number of points we have so
 

00:17:05.600 --> 00:17:06.789 align:start position:0%
range of the number of points we have so
for<00:17:05.839><c> i</c><00:17:06.160><c> in</c>

00:17:06.789 --> 00:17:06.799 align:start position:0%
for i in
 

00:17:06.799 --> 00:17:09.429 align:start position:0%
for i in
range<00:17:07.600><c> of</c><00:17:08.160><c> n</c><00:17:08.480><c> the</c><00:17:08.640><c> number</c><00:17:08.880><c> of</c><00:17:08.959><c> points</c><00:17:09.280><c> we're</c>

00:17:09.429 --> 00:17:09.439 align:start position:0%
range of n the number of points we're
 

00:17:09.439 --> 00:17:11.189 align:start position:0%
range of n the number of points we're
basically<00:17:09.839><c> going</c><00:17:09.919><c> to</c><00:17:10.000><c> take</c><00:17:10.319><c> each</c><00:17:10.559><c> point</c><00:17:10.880><c> i</c>

00:17:11.189 --> 00:17:11.199 align:start position:0%
basically going to take each point i
 

00:17:11.199 --> 00:17:14.150 align:start position:0%
basically going to take each point i
map<00:17:11.520><c> it</c><00:17:11.679><c> to</c><00:17:11.919><c> a</c><00:17:12.240><c> empty</c><00:17:12.799><c> list</c><00:17:13.280><c> so</c><00:17:13.520><c> far</c><00:17:13.760><c> now</c><00:17:13.919><c> we're</c>

00:17:14.150 --> 00:17:14.160 align:start position:0%
map it to a empty list so far now we're
 

00:17:14.160 --> 00:17:15.829 align:start position:0%
map it to a empty list so far now we're
actually<00:17:14.400><c> going</c><00:17:14.480><c> to</c><00:17:14.559><c> build</c><00:17:14.880><c> out</c><00:17:15.039><c> that</c><00:17:15.280><c> list</c><00:17:15.520><c> so</c>

00:17:15.829 --> 00:17:15.839 align:start position:0%
actually going to build out that list so
 

00:17:15.839 --> 00:17:18.870 align:start position:0%
actually going to build out that list so
for<00:17:16.079><c> i</c><00:17:16.480><c> in</c><00:17:17.120><c> range</c><00:17:17.600><c> of</c><00:17:18.000><c> n</c>

00:17:18.870 --> 00:17:18.880 align:start position:0%
for i in range of n
 

00:17:18.880 --> 00:17:20.710 align:start position:0%
for i in range of n
so<00:17:19.039><c> for</c><00:17:19.280><c> every</c><00:17:19.439><c> single</c><00:17:19.760><c> point</c><00:17:20.079><c> we</c><00:17:20.240><c> want</c><00:17:20.480><c> to</c>

00:17:20.710 --> 00:17:20.720 align:start position:0%
so for every single point we want to
 

00:17:20.720 --> 00:17:22.230 align:start position:0%
so for every single point we want to
compare<00:17:21.280><c> it</c><00:17:21.360><c> to</c><00:17:21.679><c> every</c>

00:17:22.230 --> 00:17:22.240 align:start position:0%
compare it to every
 

00:17:22.240 --> 00:17:25.429 align:start position:0%
compare it to every
other<00:17:22.640><c> point</c><00:17:23.039><c> in</c><00:17:23.199><c> the</c><00:17:23.439><c> graph</c><00:17:23.760><c> so</c><00:17:24.319><c> for</c><00:17:24.640><c> j</c><00:17:25.199><c> in</c>

00:17:25.429 --> 00:17:25.439 align:start position:0%
other point in the graph so for j in
 

00:17:25.439 --> 00:17:27.990 align:start position:0%
other point in the graph so for j in
range<00:17:25.919><c> i</c><00:17:26.240><c> plus</c><00:17:26.559><c> 1</c><00:17:26.880><c> all</c><00:17:27.039><c> the</c><00:17:27.120><c> way</c><00:17:27.360><c> to</c><00:17:27.600><c> n</c><00:17:27.760><c> so</c><00:17:27.919><c> we</c>

00:17:27.990 --> 00:17:28.000 align:start position:0%
range i plus 1 all the way to n so we
 

00:17:28.000 --> 00:17:29.590 align:start position:0%
range i plus 1 all the way to n so we
don't<00:17:28.160><c> want</c><00:17:28.319><c> to</c><00:17:28.400><c> compare</c><00:17:28.799><c> each</c><00:17:29.120><c> point</c><00:17:29.360><c> to</c>

00:17:29.590 --> 00:17:29.600 align:start position:0%
don't want to compare each point to
 

00:17:29.600 --> 00:17:30.710 align:start position:0%
don't want to compare each point to
itself

00:17:30.710 --> 00:17:30.720 align:start position:0%
itself
 

00:17:30.720 --> 00:17:32.470 align:start position:0%
itself
we<00:17:30.880><c> just</c><00:17:31.039><c> want</c><00:17:31.200><c> to</c><00:17:31.440><c> compare</c><00:17:31.760><c> it</c><00:17:31.919><c> to</c><00:17:32.160><c> every</c>

00:17:32.470 --> 00:17:32.480 align:start position:0%
we just want to compare it to every
 

00:17:32.480 --> 00:17:34.310 align:start position:0%
we just want to compare it to every
other<00:17:32.799><c> point</c><00:17:33.120><c> in</c><00:17:33.200><c> the</c><00:17:33.360><c> entire</c><00:17:33.760><c> graph</c>

00:17:34.310 --> 00:17:34.320 align:start position:0%
other point in the entire graph
 

00:17:34.320 --> 00:17:36.789 align:start position:0%
other point in the entire graph
and<00:17:34.480><c> when</c><00:17:34.640><c> we</c><00:17:34.880><c> do</c><00:17:35.120><c> that</c><00:17:35.520><c> we</c><00:17:35.760><c> want</c><00:17:35.919><c> to</c><00:17:36.240><c> get</c><00:17:36.480><c> the</c>

00:17:36.789 --> 00:17:36.799 align:start position:0%
and when we do that we want to get the
 

00:17:36.799 --> 00:17:37.669 align:start position:0%
and when we do that we want to get the
coordinates<00:17:37.360><c> so</c>

00:17:37.669 --> 00:17:37.679 align:start position:0%
coordinates so
 

00:17:37.679 --> 00:17:39.430 align:start position:0%
coordinates so
for<00:17:38.000><c> the</c><00:17:38.160><c> point</c><00:17:38.480><c> at</c><00:17:38.720><c> i</c><00:17:38.960><c> we're</c><00:17:39.120><c> just</c><00:17:39.280><c> going</c><00:17:39.360><c> to</c>

00:17:39.430 --> 00:17:39.440 align:start position:0%
for the point at i we're just going to
 

00:17:39.440 --> 00:17:40.710 align:start position:0%
for the point at i we're just going to
get<00:17:39.679><c> the</c><00:17:39.840><c> x</c><00:17:40.160><c> and</c><00:17:40.400><c> y</c>

00:17:40.710 --> 00:17:40.720 align:start position:0%
get the x and y
 

00:17:40.720 --> 00:17:43.909 align:start position:0%
get the x and y
coordinates<00:17:41.440><c> so</c><00:17:42.160><c> points</c><00:17:42.640><c> at</c><00:17:42.880><c> index</c><00:17:43.440><c> i</c>

00:17:43.909 --> 00:17:43.919 align:start position:0%
coordinates so points at index i
 

00:17:43.919 --> 00:17:45.430 align:start position:0%
coordinates so points at index i
and<00:17:44.160><c> we're</c><00:17:44.320><c> going</c><00:17:44.400><c> to</c><00:17:44.480><c> do</c><00:17:44.640><c> the</c><00:17:44.799><c> exact</c><00:17:45.120><c> same</c>

00:17:45.430 --> 00:17:45.440 align:start position:0%
and we're going to do the exact same
 

00:17:45.440 --> 00:17:47.830 align:start position:0%
and we're going to do the exact same
thing<00:17:46.160><c> for</c><00:17:46.400><c> the</c><00:17:46.640><c> point</c><00:17:46.960><c> at</c><00:17:47.200><c> index</c>

00:17:47.830 --> 00:17:47.840 align:start position:0%
thing for the point at index
 

00:17:47.840 --> 00:17:49.990 align:start position:0%
thing for the point at index
j<00:17:48.400><c> inside</c><00:17:48.880><c> of</c><00:17:49.039><c> our</c><00:17:49.200><c> loop</c><00:17:49.440><c> we're</c><00:17:49.600><c> going</c><00:17:49.679><c> to</c><00:17:49.760><c> get</c>

00:17:49.990 --> 00:17:50.000 align:start position:0%
j inside of our loop we're going to get
 

00:17:50.000 --> 00:17:51.029 align:start position:0%
j inside of our loop we're going to get
each<00:17:50.400><c> point</c>

00:17:51.029 --> 00:17:51.039 align:start position:0%
each point
 

00:17:51.039 --> 00:17:53.110 align:start position:0%
each point
that<00:17:51.200><c> we're</c><00:17:51.440><c> comparing</c><00:17:52.000><c> it</c><00:17:52.160><c> to</c><00:17:52.799><c> and</c><00:17:52.960><c> then</c>

00:17:53.110 --> 00:17:53.120 align:start position:0%
that we're comparing it to and then
 

00:17:53.120 --> 00:17:54.390 align:start position:0%
that we're comparing it to and then
we're<00:17:53.360><c> just</c><00:17:53.520><c> going</c><00:17:53.600><c> to</c><00:17:53.760><c> take</c>

00:17:54.390 --> 00:17:54.400 align:start position:0%
we're just going to take
 

00:17:54.400 --> 00:17:56.470 align:start position:0%
we're just going to take
the<00:17:54.720><c> distance</c><00:17:55.280><c> the</c><00:17:55.520><c> manhattan</c><00:17:56.000><c> distance</c>

00:17:56.470 --> 00:17:56.480 align:start position:0%
the distance the manhattan distance
 

00:17:56.480 --> 00:17:57.750 align:start position:0%
the distance the manhattan distance
between<00:17:56.720><c> them</c><00:17:56.960><c> and</c><00:17:57.039><c> we</c><00:17:57.200><c> can</c><00:17:57.280><c> get</c><00:17:57.440><c> that</c><00:17:57.600><c> by</c>

00:17:57.750 --> 00:17:57.760 align:start position:0%
between them and we can get that by
 

00:17:57.760 --> 00:18:00.870 align:start position:0%
between them and we can get that by
taking<00:17:58.000><c> the</c><00:17:58.160><c> absolute</c><00:17:58.480><c> value</c><00:17:58.880><c> of</c><00:17:59.039><c> x1</c><00:17:59.440><c> minus</c><00:17:59.919><c> x2</c>

00:18:00.870 --> 00:18:00.880 align:start position:0%
taking the absolute value of x1 minus x2
 

00:18:00.880 --> 00:18:04.710 align:start position:0%
taking the absolute value of x1 minus x2
the<00:18:01.200><c> absolute</c><00:18:01.679><c> value</c><00:18:02.240><c> of</c><00:18:02.880><c> y1</c><00:18:03.520><c> minus</c><00:18:03.919><c> y2</c>

00:18:04.710 --> 00:18:04.720 align:start position:0%
the absolute value of y1 minus y2
 

00:18:04.720 --> 00:18:06.230 align:start position:0%
the absolute value of y1 minus y2
and<00:18:04.880><c> so</c><00:18:05.120><c> i'm</c><00:18:05.280><c> going</c><00:18:05.360><c> to</c><00:18:05.440><c> just</c><00:18:05.679><c> comment</c><00:18:06.080><c> up</c>

00:18:06.230 --> 00:18:06.240 align:start position:0%
and so i'm going to just comment up
 

00:18:06.240 --> 00:18:08.230 align:start position:0%
and so i'm going to just comment up
above<00:18:06.640><c> that</c><00:18:06.799><c> for</c><00:18:07.039><c> each</c><00:18:07.360><c> node</c><00:18:07.760><c> work</c>

00:18:08.230 --> 00:18:08.240 align:start position:0%
above that for each node work
 

00:18:08.240 --> 00:18:11.430 align:start position:0%
above that for each node work
we're<00:18:08.480><c> mapping</c><00:18:08.880><c> it</c><00:18:09.039><c> to</c><00:18:09.280><c> a</c><00:18:09.520><c> list</c><00:18:10.160><c> of</c><00:18:10.799><c> points</c>

00:18:11.430 --> 00:18:11.440 align:start position:0%
we're mapping it to a list of points
 

00:18:11.440 --> 00:18:13.190 align:start position:0%
we're mapping it to a list of points
and<00:18:11.600><c> for</c><00:18:11.840><c> each</c><00:18:12.160><c> point</c><00:18:12.400><c> we're</c><00:18:12.559><c> basically</c><00:18:13.039><c> going</c>

00:18:13.190 --> 00:18:13.200 align:start position:0%
and for each point we're basically going
 

00:18:13.200 --> 00:18:14.549 align:start position:0%
and for each point we're basically going
to<00:18:13.280><c> have</c><00:18:14.160><c> the</c>

00:18:14.549 --> 00:18:14.559 align:start position:0%
to have the
 

00:18:14.559 --> 00:18:18.150 align:start position:0%
to have the
cost<00:18:15.520><c> and</c><00:18:16.000><c> the</c><00:18:16.400><c> node</c><00:18:16.880><c> or</c><00:18:17.039><c> the</c><00:18:17.360><c> neighbor</c>

00:18:18.150 --> 00:18:18.160 align:start position:0%
cost and the node or the neighbor
 

00:18:18.160 --> 00:18:19.669 align:start position:0%
cost and the node or the neighbor
each<00:18:18.400><c> neighbor</c><00:18:18.799><c> is</c><00:18:18.880><c> going</c><00:18:18.960><c> to</c><00:18:19.039><c> be</c><00:18:19.200><c> a</c><00:18:19.360><c> pair</c>

00:18:19.669 --> 00:18:19.679 align:start position:0%
each neighbor is going to be a pair
 

00:18:19.679 --> 00:18:21.590 align:start position:0%
each neighbor is going to be a pair
right<00:18:19.919><c> so</c><00:18:20.160><c> each</c><00:18:20.400><c> edge</c><00:18:20.720><c> is</c><00:18:20.799><c> basically</c><00:18:21.280><c> a</c>

00:18:21.590 --> 00:18:21.600 align:start position:0%
right so each edge is basically a
 

00:18:21.600 --> 00:18:23.510 align:start position:0%
right so each edge is basically a
weighted<00:18:22.080><c> edge</c><00:18:22.400><c> don't</c><00:18:22.559><c> forget</c><00:18:22.799><c> about</c><00:18:23.120><c> that</c>

00:18:23.510 --> 00:18:23.520 align:start position:0%
weighted edge don't forget about that
 

00:18:23.520 --> 00:18:26.710 align:start position:0%
weighted edge don't forget about that
so<00:18:23.679><c> we're</c><00:18:23.840><c> going</c><00:18:23.840><c> to</c><00:18:23.919><c> say</c><00:18:24.160><c> adjacency</c><00:18:25.039><c> for</c><00:18:25.440><c> i</c>

00:18:26.710 --> 00:18:26.720 align:start position:0%
so we're going to say adjacency for i
 

00:18:26.720 --> 00:18:30.390 align:start position:0%
so we're going to say adjacency for i
append<00:18:27.440><c> to</c><00:18:27.679><c> it</c><00:18:28.160><c> the</c><00:18:28.480><c> cost</c><00:18:29.039><c> or</c><00:18:29.200><c> the</c><00:18:29.520><c> distance</c>

00:18:30.390 --> 00:18:30.400 align:start position:0%
append to it the cost or the distance
 

00:18:30.400 --> 00:18:33.190 align:start position:0%
append to it the cost or the distance
right<00:18:31.200><c> and</c><00:18:31.679><c> the</c><00:18:31.919><c> node</c><00:18:32.240><c> itself</c><00:18:32.559><c> which</c><00:18:32.799><c> is</c><00:18:32.880><c> node</c>

00:18:33.190 --> 00:18:33.200 align:start position:0%
right and the node itself which is node
 

00:18:33.200 --> 00:18:34.470 align:start position:0%
right and the node itself which is node
j<00:18:33.360><c> and</c><00:18:33.440><c> we're</c><00:18:33.600><c> going</c><00:18:33.679><c> to</c><00:18:33.760><c> do</c><00:18:33.919><c> the</c><00:18:34.000><c> exact</c>

00:18:34.470 --> 00:18:34.480 align:start position:0%
j and we're going to do the exact
 

00:18:34.480 --> 00:18:36.150 align:start position:0%
j and we're going to do the exact
opposite<00:18:34.880><c> because</c><00:18:35.120><c> technically</c><00:18:35.600><c> these</c><00:18:35.919><c> are</c>

00:18:36.150 --> 00:18:36.160 align:start position:0%
opposite because technically these are
 

00:18:36.160 --> 00:18:38.390 align:start position:0%
opposite because technically these are
undirected<00:18:36.880><c> edges</c><00:18:37.200><c> they</c><00:18:37.360><c> go</c><00:18:37.600><c> both</c><00:18:37.919><c> ways</c><00:18:38.240><c> so</c>

00:18:38.390 --> 00:18:38.400 align:start position:0%
undirected edges they go both ways so
 

00:18:38.400 --> 00:18:40.390 align:start position:0%
undirected edges they go both ways so
let's<00:18:38.559><c> just</c><00:18:38.720><c> do</c><00:18:38.880><c> the</c><00:18:39.039><c> exact</c><00:18:39.440><c> opposite</c><00:18:39.840><c> so</c>

00:18:40.390 --> 00:18:40.400 align:start position:0%
let's just do the exact opposite so
 

00:18:40.400 --> 00:18:43.270 align:start position:0%
let's just do the exact opposite so
adjacency<00:18:41.120><c> of</c><00:18:41.360><c> j</c><00:18:41.919><c> append</c><00:18:42.400><c> to</c><00:18:42.559><c> it</c><00:18:42.640><c> the</c><00:18:42.799><c> distance</c>

00:18:43.270 --> 00:18:43.280 align:start position:0%
adjacency of j append to it the distance
 

00:18:43.280 --> 00:18:45.029 align:start position:0%
adjacency of j append to it the distance
same<00:18:43.600><c> distance</c><00:18:44.080><c> but</c><00:18:44.320><c> instead</c><00:18:44.799><c> we're</c>

00:18:45.029 --> 00:18:45.039 align:start position:0%
same distance but instead we're
 

00:18:45.039 --> 00:18:47.350 align:start position:0%
same distance but instead we're
appending<00:18:45.600><c> i</c><00:18:45.919><c> because</c><00:18:46.240><c> that's</c><00:18:46.480><c> its</c><00:18:46.720><c> neighbor</c>

00:18:47.350 --> 00:18:47.360 align:start position:0%
appending i because that's its neighbor
 

00:18:47.360 --> 00:18:49.350 align:start position:0%
appending i because that's its neighbor
so<00:18:47.520><c> this</c><00:18:47.760><c> is</c><00:18:47.840><c> how</c><00:18:48.000><c> you</c><00:18:48.160><c> build</c><00:18:48.480><c> that</c><00:18:48.720><c> adjacency</c>

00:18:49.350 --> 00:18:49.360 align:start position:0%
so this is how you build that adjacency
 

00:18:49.360 --> 00:18:50.950 align:start position:0%
so this is how you build that adjacency
list<00:18:49.520><c> and</c><00:18:49.679><c> technically</c><00:18:50.080><c> we</c><00:18:50.240><c> could</c><00:18:50.480><c> actually</c>

00:18:50.950 --> 00:18:50.960 align:start position:0%
list and technically we could actually
 

00:18:50.960 --> 00:18:53.029 align:start position:0%
list and technically we could actually
not<00:18:51.200><c> have</c><00:18:51.360><c> to</c><00:18:51.520><c> write</c><00:18:51.760><c> this</c><00:18:52.000><c> for</c><00:18:52.320><c> loop</c><00:18:52.640><c> out</c><00:18:52.880><c> we</c>

00:18:53.029 --> 00:18:53.039 align:start position:0%
not have to write this for loop out we
 

00:18:53.039 --> 00:18:54.310 align:start position:0%
not have to write this for loop out we
could<00:18:53.200><c> actually</c><00:18:53.840><c> you</c><00:18:54.000><c> know</c>

00:18:54.310 --> 00:18:54.320 align:start position:0%
could actually you know
 

00:18:54.320 --> 00:18:56.950 align:start position:0%
could actually you know
compute<00:18:54.720><c> these</c><00:18:54.960><c> calculations</c><00:18:56.160><c> while</c><00:18:56.559><c> we</c><00:18:56.799><c> are</c>

00:18:56.950 --> 00:18:56.960 align:start position:0%
compute these calculations while we are
 

00:18:56.960 --> 00:18:58.950 align:start position:0%
compute these calculations while we are
running<00:18:57.360><c> prim's</c><00:18:57.840><c> algorithm</c><00:18:58.400><c> but</c><00:18:58.559><c> the</c><00:18:58.720><c> reason</c>

00:18:58.950 --> 00:18:58.960 align:start position:0%
running prim's algorithm but the reason
 

00:18:58.960 --> 00:19:00.470 align:start position:0%
running prim's algorithm but the reason
i'm<00:18:59.120><c> doing</c><00:18:59.360><c> it</c><00:18:59.440><c> before</c><00:18:59.840><c> is</c><00:19:00.000><c> just</c><00:19:00.160><c> to</c>

00:19:00.470 --> 00:19:00.480 align:start position:0%
i'm doing it before is just to
 

00:19:00.480 --> 00:19:02.630 align:start position:0%
i'm doing it before is just to
give<00:19:00.720><c> a</c><00:19:00.799><c> clear</c><00:19:01.120><c> distinction</c><00:19:01.919><c> this</c><00:19:02.240><c> is</c><00:19:02.400><c> the</c>

00:19:02.630 --> 00:19:02.640 align:start position:0%
give a clear distinction this is the
 

00:19:02.640 --> 00:19:04.310 align:start position:0%
give a clear distinction this is the
edge<00:19:03.039><c> portion</c><00:19:03.360><c> this</c><00:19:03.520><c> is</c><00:19:03.679><c> like</c><00:19:03.760><c> the</c><00:19:04.000><c> extra</c>

00:19:04.310 --> 00:19:04.320 align:start position:0%
edge portion this is like the extra
 

00:19:04.320 --> 00:19:05.669 align:start position:0%
edge portion this is like the extra
portion<00:19:04.720><c> of</c><00:19:04.880><c> this</c><00:19:05.200><c> problem</c>

00:19:05.669 --> 00:19:05.679 align:start position:0%
portion of this problem
 

00:19:05.679 --> 00:19:08.070 align:start position:0%
portion of this problem
the<00:19:06.000><c> following</c><00:19:06.559><c> part</c><00:19:06.880><c> is</c><00:19:07.120><c> literally</c><00:19:07.600><c> just</c><00:19:07.919><c> an</c>

00:19:08.070 --> 00:19:08.080 align:start position:0%
the following part is literally just an
 

00:19:08.080 --> 00:19:08.710 align:start position:0%
the following part is literally just an
exact

00:19:08.710 --> 00:19:08.720 align:start position:0%
exact
 

00:19:08.720 --> 00:19:10.870 align:start position:0%
exact
implementation<00:19:09.520><c> of</c><00:19:09.679><c> prem's</c><00:19:10.080><c> algorithm</c>

00:19:10.870 --> 00:19:10.880 align:start position:0%
implementation of prem's algorithm
 

00:19:10.880 --> 00:19:12.150 align:start position:0%
implementation of prem's algorithm
nothing<00:19:11.360><c> fancy</c>

00:19:12.150 --> 00:19:12.160 align:start position:0%
nothing fancy
 

00:19:12.160 --> 00:19:13.750 align:start position:0%
nothing fancy
so<00:19:12.480><c> let's</c><00:19:12.720><c> define</c><00:19:13.120><c> our</c><00:19:13.200><c> variables</c><00:19:13.679><c> we're</c>

00:19:13.750 --> 00:19:13.760 align:start position:0%
so let's define our variables we're
 

00:19:13.760 --> 00:19:14.950 align:start position:0%
so let's define our variables we're
going<00:19:13.840><c> to</c><00:19:13.919><c> have</c><00:19:14.080><c> a</c><00:19:14.240><c> result</c><00:19:14.559><c> which</c><00:19:14.720><c> is</c><00:19:14.880><c> of</c>

00:19:14.950 --> 00:19:14.960 align:start position:0%
going to have a result which is of
 

00:19:14.960 --> 00:19:16.549 align:start position:0%
going to have a result which is of
course<00:19:15.280><c> going</c><00:19:15.360><c> to</c><00:19:15.440><c> be</c><00:19:15.600><c> the</c><00:19:15.760><c> total</c><00:19:16.160><c> cost</c>

00:19:16.549 --> 00:19:16.559 align:start position:0%
course going to be the total cost
 

00:19:16.559 --> 00:19:18.070 align:start position:0%
course going to be the total cost
initially<00:19:16.880><c> it's</c><00:19:17.039><c> going</c><00:19:17.120><c> to</c><00:19:17.200><c> be</c><00:19:17.360><c> 0.</c><00:19:17.679><c> we're</c><00:19:17.840><c> also</c>

00:19:18.070 --> 00:19:18.080 align:start position:0%
initially it's going to be 0. we're also
 

00:19:18.080 --> 00:19:19.190 align:start position:0%
initially it's going to be 0. we're also
going<00:19:18.160><c> to</c><00:19:18.240><c> have</c><00:19:18.400><c> a</c><00:19:18.640><c> visit</c>

00:19:19.190 --> 00:19:19.200 align:start position:0%
going to have a visit
 

00:19:19.200 --> 00:19:21.430 align:start position:0%
going to have a visit
set<00:19:19.760><c> so</c><00:19:19.919><c> it's</c><00:19:20.080><c> going</c><00:19:20.160><c> to</c><00:19:20.320><c> tell</c><00:19:20.480><c> us</c><00:19:20.640><c> the</c><00:19:21.039><c> the</c>

00:19:21.430 --> 00:19:21.440 align:start position:0%
set so it's going to tell us the the
 

00:19:21.440 --> 00:19:23.270 align:start position:0%
set so it's going to tell us the the
points<00:19:21.760><c> that</c><00:19:21.919><c> have</c><00:19:22.080><c> already</c><00:19:22.400><c> been</c><00:19:22.559><c> visited</c>

00:19:23.270 --> 00:19:23.280 align:start position:0%
points that have already been visited
 

00:19:23.280 --> 00:19:25.750 align:start position:0%
points that have already been visited
we're<00:19:23.440><c> also</c><00:19:23.679><c> going</c><00:19:23.840><c> to</c><00:19:23.919><c> have</c><00:19:24.160><c> a</c><00:19:24.400><c> min</c><00:19:25.200><c> heap</c>

00:19:25.750 --> 00:19:25.760 align:start position:0%
we're also going to have a min heap
 

00:19:25.760 --> 00:19:27.430 align:start position:0%
we're also going to have a min heap
which<00:19:26.000><c> is</c><00:19:26.160><c> initially</c><00:19:26.640><c> not</c><00:19:26.799><c> going</c><00:19:26.880><c> to</c><00:19:27.039><c> be</c><00:19:27.200><c> empty</c>

00:19:27.430 --> 00:19:27.440 align:start position:0%
which is initially not going to be empty
 

00:19:27.440 --> 00:19:28.950 align:start position:0%
which is initially not going to be empty
we're<00:19:27.600><c> going</c><00:19:27.679><c> to</c><00:19:27.760><c> be</c><00:19:27.919><c> starting</c><00:19:28.320><c> at</c><00:19:28.480><c> point</c>

00:19:28.950 --> 00:19:28.960 align:start position:0%
we're going to be starting at point
 

00:19:28.960 --> 00:19:31.270 align:start position:0%
we're going to be starting at point
zero<00:19:29.679><c> and</c><00:19:29.919><c> the</c><00:19:30.080><c> cost</c><00:19:30.400><c> of</c><00:19:30.559><c> it</c><00:19:30.720><c> is</c><00:19:30.880><c> also</c><00:19:31.120><c> going</c><00:19:31.200><c> to</c>

00:19:31.270 --> 00:19:31.280 align:start position:0%
zero and the cost of it is also going to
 

00:19:31.280 --> 00:19:33.510 align:start position:0%
zero and the cost of it is also going to
be<00:19:31.520><c> zero</c><00:19:31.840><c> so</c><00:19:32.000><c> let</c><00:19:32.160><c> me</c><00:19:32.320><c> just</c><00:19:32.559><c> put</c><00:19:32.799><c> in</c><00:19:32.880><c> a</c><00:19:33.039><c> comment</c>

00:19:33.510 --> 00:19:33.520 align:start position:0%
be zero so let me just put in a comment
 

00:19:33.520 --> 00:19:35.909 align:start position:0%
be zero so let me just put in a comment
that<00:19:33.760><c> each</c><00:19:34.080><c> pair</c><00:19:34.400><c> is</c><00:19:34.559><c> going</c><00:19:34.640><c> to</c><00:19:34.720><c> be</c><00:19:34.880><c> the</c><00:19:35.120><c> cost</c>

00:19:35.909 --> 00:19:35.919 align:start position:0%
that each pair is going to be the cost
 

00:19:35.919 --> 00:19:39.029 align:start position:0%
that each pair is going to be the cost
and<00:19:36.559><c> the</c><00:19:36.799><c> point</c><00:19:37.440><c> cost</c><00:19:37.840><c> goes</c><00:19:38.160><c> first</c><00:19:38.480><c> the</c><00:19:38.640><c> order</c>

00:19:39.029 --> 00:19:39.039 align:start position:0%
and the point cost goes first the order
 

00:19:39.039 --> 00:19:40.630 align:start position:0%
and the point cost goes first the order
is<00:19:39.280><c> important</c><00:19:39.679><c> because</c><00:19:39.919><c> that's</c><00:19:40.160><c> what</c><00:19:40.240><c> the</c><00:19:40.400><c> min</c>

00:19:40.630 --> 00:19:40.640 align:start position:0%
is important because that's what the min
 

00:19:40.640 --> 00:19:42.710 align:start position:0%
is important because that's what the min
heap<00:19:40.960><c> is</c><00:19:41.039><c> going</c><00:19:41.200><c> to</c><00:19:41.280><c> be</c><00:19:41.520><c> minimizing</c><00:19:42.160><c> it</c><00:19:42.320><c> based</c>

00:19:42.710 --> 00:19:42.720 align:start position:0%
heap is going to be minimizing it based
 

00:19:42.720 --> 00:19:43.190 align:start position:0%
heap is going to be minimizing it based
on

00:19:43.190 --> 00:19:43.200 align:start position:0%
on
 

00:19:43.200 --> 00:19:44.470 align:start position:0%
on
and<00:19:43.360><c> so</c><00:19:43.600><c> now</c><00:19:43.760><c> we're</c><00:19:43.919><c> actually</c><00:19:44.160><c> going</c><00:19:44.240><c> to</c><00:19:44.320><c> do</c>

00:19:44.470 --> 00:19:44.480 align:start position:0%
and so now we're actually going to do
 

00:19:44.480 --> 00:19:45.669 align:start position:0%
and so now we're actually going to do
the<00:19:44.640><c> loop</c><00:19:44.880><c> and</c><00:19:45.039><c> remember</c><00:19:45.360><c> we're</c><00:19:45.520><c> going</c><00:19:45.600><c> to</c>

00:19:45.669 --> 00:19:45.679 align:start position:0%
the loop and remember we're going to
 

00:19:45.679 --> 00:19:48.070 align:start position:0%
the loop and remember we're going to
keep<00:19:45.919><c> going</c><00:19:46.240><c> while</c><00:19:46.559><c> the</c><00:19:46.799><c> length</c><00:19:47.200><c> of</c><00:19:47.360><c> visit</c><00:19:47.760><c> is</c>

00:19:48.070 --> 00:19:48.080 align:start position:0%
keep going while the length of visit is
 

00:19:48.080 --> 00:19:49.590 align:start position:0%
keep going while the length of visit is
less<00:19:48.320><c> than</c><00:19:48.480><c> the</c><00:19:48.640><c> total</c><00:19:48.960><c> number</c><00:19:49.200><c> of</c><00:19:49.280><c> points</c>

00:19:49.590 --> 00:19:49.600 align:start position:0%
less than the total number of points
 

00:19:49.600 --> 00:19:50.710 align:start position:0%
less than the total number of points
which<00:19:49.840><c> is</c><00:19:50.080><c> n</c>

00:19:50.710 --> 00:19:50.720 align:start position:0%
which is n
 

00:19:50.720 --> 00:19:52.549 align:start position:0%
which is n
and<00:19:50.960><c> on</c><00:19:51.120><c> each</c><00:19:51.440><c> iteration</c><00:19:52.000><c> we're</c><00:19:52.240><c> going</c><00:19:52.320><c> to</c><00:19:52.400><c> be</c>

00:19:52.549 --> 00:19:52.559 align:start position:0%
and on each iteration we're going to be
 

00:19:52.559 --> 00:19:54.470 align:start position:0%
and on each iteration we're going to be
popping<00:19:52.880><c> from</c><00:19:53.039><c> the</c><00:19:53.200><c> min</c><00:19:53.440><c> heap</c><00:19:53.760><c> in</c><00:19:53.919><c> python</c><00:19:54.400><c> we</c>

00:19:54.470 --> 00:19:54.480 align:start position:0%
popping from the min heap in python we
 

00:19:54.480 --> 00:19:55.510 align:start position:0%
popping from the min heap in python we
can<00:19:54.559><c> say</c><00:19:54.880><c> heap</c><00:19:55.200><c> q</c>

00:19:55.510 --> 00:19:55.520 align:start position:0%
can say heap q
 

00:19:55.520 --> 00:19:57.990 align:start position:0%
can say heap q
dot<00:19:55.760><c> heap</c><00:19:56.240><c> pop</c><00:19:56.880><c> and</c><00:19:57.120><c> from</c><00:19:57.360><c> it</c><00:19:57.440><c> we'll</c><00:19:57.600><c> get</c><00:19:57.840><c> a</c>

00:19:57.990 --> 00:19:58.000 align:start position:0%
dot heap pop and from it we'll get a
 

00:19:58.000 --> 00:19:59.270 align:start position:0%
dot heap pop and from it we'll get a
pair<00:19:58.320><c> of</c><00:19:58.480><c> values</c>

00:19:59.270 --> 00:19:59.280 align:start position:0%
pair of values
 

00:19:59.280 --> 00:20:01.029 align:start position:0%
pair of values
okay<00:19:59.520><c> we</c><00:19:59.679><c> have</c><00:19:59.760><c> to</c><00:19:59.919><c> specify</c><00:20:00.320><c> which</c><00:20:00.559><c> heap</c><00:20:00.799><c> we're</c>

00:20:01.029 --> 00:20:01.039 align:start position:0%
okay we have to specify which heap we're
 

00:20:01.039 --> 00:20:02.470 align:start position:0%
okay we have to specify which heap we're
popping<00:20:01.360><c> from</c><00:20:01.679><c> min</c><00:20:02.000><c> heap</c>

00:20:02.470 --> 00:20:02.480 align:start position:0%
popping from min heap
 

00:20:02.480 --> 00:20:04.310 align:start position:0%
popping from min heap
min<00:20:02.880><c> h</c><00:20:03.280><c> and</c><00:20:03.440><c> we're</c><00:20:03.600><c> going</c><00:20:03.679><c> to</c><00:20:03.760><c> get</c><00:20:03.919><c> a</c><00:20:04.000><c> pair</c><00:20:04.159><c> of</c>

00:20:04.310 --> 00:20:04.320 align:start position:0%
min h and we're going to get a pair of
 

00:20:04.320 --> 00:20:07.270 align:start position:0%
min h and we're going to get a pair of
values<00:20:05.120><c> the</c><00:20:05.919><c> we</c><00:20:06.080><c> can</c><00:20:06.240><c> call</c><00:20:06.480><c> it</c><00:20:06.640><c> cost</c>

00:20:07.270 --> 00:20:07.280 align:start position:0%
values the we can call it cost
 

00:20:07.280 --> 00:20:10.230 align:start position:0%
values the we can call it cost
and<00:20:07.760><c> the</c><00:20:08.080><c> point</c><00:20:08.480><c> let's</c><00:20:08.720><c> call</c><00:20:08.960><c> it</c><00:20:09.200><c> i</c><00:20:09.840><c> and</c>

00:20:10.230 --> 00:20:10.240 align:start position:0%
and the point let's call it i and
 

00:20:10.240 --> 00:20:11.029 align:start position:0%
and the point let's call it i and
remember

00:20:11.029 --> 00:20:11.039 align:start position:0%
remember
 

00:20:11.039 --> 00:20:12.950 align:start position:0%
remember
we<00:20:11.200><c> are</c><00:20:11.280><c> adding</c><00:20:11.600><c> duplicates</c><00:20:12.159><c> to</c><00:20:12.320><c> our</c><00:20:12.480><c> min</c><00:20:12.720><c> heap</c>

00:20:12.950 --> 00:20:12.960 align:start position:0%
we are adding duplicates to our min heap
 

00:20:12.960 --> 00:20:14.470 align:start position:0%
we are adding duplicates to our min heap
so<00:20:13.120><c> if</c><00:20:13.280><c> we</c><00:20:13.520><c> popped</c><00:20:13.840><c> it</c><00:20:13.919><c> this</c><00:20:14.080><c> could</c><00:20:14.320><c> have</c>

00:20:14.470 --> 00:20:14.480 align:start position:0%
so if we popped it this could have
 

00:20:14.480 --> 00:20:15.990 align:start position:0%
so if we popped it this could have
already<00:20:14.799><c> been</c><00:20:14.960><c> visited</c><00:20:15.280><c> so</c><00:20:15.440><c> let's</c><00:20:15.600><c> just</c><00:20:15.760><c> check</c>

00:20:15.990 --> 00:20:16.000 align:start position:0%
already been visited so let's just check
 

00:20:16.000 --> 00:20:16.230 align:start position:0%
already been visited so let's just check
if

00:20:16.230 --> 00:20:16.240 align:start position:0%
if
 

00:20:16.240 --> 00:20:18.310 align:start position:0%
if
i<00:20:16.480><c> is</c><00:20:16.799><c> in</c><00:20:17.039><c> visit</c><00:20:17.600><c> then</c><00:20:17.760><c> we're</c><00:20:17.919><c> just</c><00:20:18.080><c> going</c><00:20:18.159><c> to</c>

00:20:18.310 --> 00:20:18.320 align:start position:0%
i is in visit then we're just going to
 

00:20:18.320 --> 00:20:19.990 align:start position:0%
i is in visit then we're just going to
skip<00:20:18.640><c> this</c><00:20:18.880><c> iteration</c><00:20:19.360><c> of</c><00:20:19.440><c> the</c><00:20:19.600><c> loop</c><00:20:19.760><c> we</c>

00:20:19.990 --> 00:20:20.000 align:start position:0%
skip this iteration of the loop we
 

00:20:20.000 --> 00:20:21.830 align:start position:0%
skip this iteration of the loop we
don't<00:20:20.159><c> want</c><00:20:20.320><c> to</c><00:20:20.400><c> have</c><00:20:20.559><c> to</c><00:20:20.720><c> process</c><00:20:21.280><c> this</c><00:20:21.520><c> same</c>

00:20:21.830 --> 00:20:21.840 align:start position:0%
don't want to have to process this same
 

00:20:21.840 --> 00:20:23.909 align:start position:0%
don't want to have to process this same
node<00:20:22.080><c> that's</c><00:20:22.320><c> already</c><00:20:22.720><c> been</c><00:20:22.960><c> popped</c><00:20:23.280><c> before</c>

00:20:23.909 --> 00:20:23.919 align:start position:0%
node that's already been popped before
 

00:20:23.919 --> 00:20:26.070 align:start position:0%
node that's already been popped before
but<00:20:24.159><c> if</c><00:20:24.320><c> it</c><00:20:24.559><c> hasn't</c><00:20:24.960><c> been</c><00:20:25.200><c> popped</c><00:20:25.760><c> then</c><00:20:25.919><c> we're</c>

00:20:26.070 --> 00:20:26.080 align:start position:0%
but if it hasn't been popped then we're
 

00:20:26.080 --> 00:20:27.909 align:start position:0%
but if it hasn't been popped then we're
going<00:20:26.159><c> to</c><00:20:26.320><c> take</c><00:20:26.799><c> the</c><00:20:27.039><c> cost</c><00:20:27.360><c> of</c><00:20:27.520><c> it</c>

00:20:27.909 --> 00:20:27.919 align:start position:0%
going to take the cost of it
 

00:20:27.919 --> 00:20:29.750 align:start position:0%
going to take the cost of it
add<00:20:28.159><c> it</c><00:20:28.240><c> to</c><00:20:28.400><c> the</c><00:20:28.480><c> result</c><00:20:28.880><c> so</c><00:20:29.200><c> we're</c><00:20:29.440><c> adding</c>

00:20:29.750 --> 00:20:29.760 align:start position:0%
add it to the result so we're adding
 

00:20:29.760 --> 00:20:31.270 align:start position:0%
add it to the result so we're adding
this<00:20:30.240><c> fresh</c><00:20:30.799><c> new</c>

00:20:31.270 --> 00:20:31.280 align:start position:0%
this fresh new
 

00:20:31.280 --> 00:20:33.190 align:start position:0%
this fresh new
node<00:20:31.600><c> that</c><00:20:31.760><c> we</c><00:20:31.840><c> haven't</c><00:20:32.159><c> visited</c><00:20:32.640><c> yet</c><00:20:33.039><c> and</c>

00:20:33.190 --> 00:20:33.200 align:start position:0%
node that we haven't visited yet and
 

00:20:33.200 --> 00:20:34.789 align:start position:0%
node that we haven't visited yet and
we're<00:20:33.360><c> also</c><00:20:33.600><c> going</c><00:20:33.679><c> to</c><00:20:33.840><c> add</c><00:20:34.000><c> it</c><00:20:34.080><c> to</c><00:20:34.240><c> visit</c><00:20:34.559><c> now</c>

00:20:34.789 --> 00:20:34.799 align:start position:0%
we're also going to add it to visit now
 

00:20:34.799 --> 00:20:36.549 align:start position:0%
we're also going to add it to visit now
to<00:20:34.960><c> make</c><00:20:35.039><c> sure</c><00:20:35.200><c> that</c><00:20:35.360><c> it</c><00:20:35.520><c> never</c><00:20:35.760><c> gets</c><00:20:36.080><c> visited</c>

00:20:36.549 --> 00:20:36.559 align:start position:0%
to make sure that it never gets visited
 

00:20:36.559 --> 00:20:37.270 align:start position:0%
to make sure that it never gets visited
again

00:20:37.270 --> 00:20:37.280 align:start position:0%
again
 

00:20:37.280 --> 00:20:39.029 align:start position:0%
again
and<00:20:37.440><c> then</c><00:20:37.679><c> we're</c><00:20:37.840><c> going</c><00:20:37.919><c> to</c><00:20:38.000><c> go</c><00:20:38.240><c> through</c><00:20:38.559><c> every</c>

00:20:39.029 --> 00:20:39.039 align:start position:0%
and then we're going to go through every
 

00:20:39.039 --> 00:20:41.510 align:start position:0%
and then we're going to go through every
neighbor<00:20:39.600><c> in</c><00:20:39.840><c> its</c><00:20:40.080><c> adjacency</c><00:20:40.880><c> list</c>

00:20:41.510 --> 00:20:41.520 align:start position:0%
neighbor in its adjacency list
 

00:20:41.520 --> 00:20:44.630 align:start position:0%
neighbor in its adjacency list
so<00:20:41.760><c> the</c><00:20:41.919><c> adjacency</c><00:20:42.559><c> list</c><00:20:42.960><c> of</c><00:20:43.440><c> i</c><00:20:44.080><c> and</c><00:20:44.320><c> remember</c>

00:20:44.630 --> 00:20:44.640 align:start position:0%
so the adjacency list of i and remember
 

00:20:44.640 --> 00:20:46.149 align:start position:0%
so the adjacency list of i and remember
each<00:20:44.960><c> neighbor</c><00:20:45.280><c> actually</c><00:20:45.600><c> isn't</c><00:20:45.840><c> just</c>

00:20:46.149 --> 00:20:46.159 align:start position:0%
each neighbor actually isn't just
 

00:20:46.159 --> 00:20:48.470 align:start position:0%
each neighbor actually isn't just
one<00:20:46.400><c> value</c><00:20:46.799><c> it's</c><00:20:46.960><c> going</c><00:20:47.039><c> to</c><00:20:47.200><c> be</c><00:20:47.679><c> the</c><00:20:47.919><c> cost</c><00:20:48.320><c> so</c>

00:20:48.470 --> 00:20:48.480 align:start position:0%
one value it's going to be the cost so
 

00:20:48.480 --> 00:20:49.590 align:start position:0%
one value it's going to be the cost so
let's<00:20:48.640><c> call</c><00:20:48.799><c> it</c><00:20:49.039><c> neighbor</c>

00:20:49.590 --> 00:20:49.600 align:start position:0%
let's call it neighbor
 

00:20:49.600 --> 00:20:52.149 align:start position:0%
let's call it neighbor
cost<00:20:50.320><c> as</c><00:20:50.559><c> well</c><00:20:50.720><c> as</c><00:20:50.880><c> the</c><00:20:51.120><c> neighbor</c><00:20:51.760><c> right</c><00:20:52.000><c> up</c>

00:20:52.149 --> 00:20:52.159 align:start position:0%
cost as well as the neighbor right up
 

00:20:52.159 --> 00:20:53.990 align:start position:0%
cost as well as the neighbor right up
above<00:20:52.480><c> you</c><00:20:52.720><c> remember</c><00:20:53.039><c> that</c><00:20:53.200><c> in</c><00:20:53.360><c> our</c><00:20:53.440><c> adjacency</c>

00:20:53.990 --> 00:20:54.000 align:start position:0%
above you remember that in our adjacency
 

00:20:54.000 --> 00:20:56.070 align:start position:0%
above you remember that in our adjacency
list<00:20:54.240><c> we</c><00:20:54.400><c> added</c><00:20:54.720><c> a</c><00:20:54.799><c> pair</c><00:20:55.120><c> of</c><00:20:55.280><c> values</c><00:20:55.760><c> in</c><00:20:55.919><c> that</c>

00:20:56.070 --> 00:20:56.080 align:start position:0%
list we added a pair of values in that
 

00:20:56.080 --> 00:20:58.149 align:start position:0%
list we added a pair of values in that
list<00:20:56.400><c> cost</c><00:20:56.880><c> and</c><00:20:57.120><c> the</c><00:20:57.280><c> node</c><00:20:57.600><c> itself</c>

00:20:58.149 --> 00:20:58.159 align:start position:0%
list cost and the node itself
 

00:20:58.159 --> 00:21:00.710 align:start position:0%
list cost and the node itself
so<00:20:58.320><c> now</c><00:20:58.480><c> for</c><00:20:58.720><c> each</c><00:20:58.960><c> neighbor</c><00:20:59.280><c> so</c><00:20:59.520><c> for</c><00:20:59.760><c> nay</c><00:21:00.480><c> if</c>

00:21:00.710 --> 00:21:00.720 align:start position:0%
so now for each neighbor so for nay if
 

00:21:00.720 --> 00:21:01.430 align:start position:0%
so now for each neighbor so for nay if
the<00:21:00.880><c> neighbor</c>

00:21:01.430 --> 00:21:01.440 align:start position:0%
the neighbor
 

00:21:01.440 --> 00:21:04.390 align:start position:0%
the neighbor
is<00:21:02.159><c> not</c><00:21:02.640><c> in</c><00:21:03.120><c> visit</c><00:21:03.679><c> then</c><00:21:03.919><c> we're</c><00:21:04.080><c> going</c><00:21:04.159><c> to</c><00:21:04.240><c> be</c>

00:21:04.390 --> 00:21:04.400 align:start position:0%
is not in visit then we're going to be
 

00:21:04.400 --> 00:21:05.750 align:start position:0%
is not in visit then we're going to be
adding<00:21:04.720><c> it</c><00:21:04.799><c> to</c><00:21:04.960><c> our</c><00:21:05.120><c> min</c><00:21:05.360><c> heap</c>

00:21:05.750 --> 00:21:05.760 align:start position:0%
adding it to our min heap
 

00:21:05.760 --> 00:21:09.029 align:start position:0%
adding it to our min heap
so<00:21:05.919><c> then</c><00:21:06.080><c> we</c><00:21:06.240><c> can</c><00:21:06.320><c> say</c><00:21:06.559><c> heap</c><00:21:06.960><c> q</c><00:21:07.360><c> dot</c><00:21:07.679><c> heap</c><00:21:08.320><c> push</c>

00:21:09.029 --> 00:21:09.039 align:start position:0%
so then we can say heap q dot heap push
 

00:21:09.039 --> 00:21:10.630 align:start position:0%
so then we can say heap q dot heap push
to<00:21:09.280><c> the</c><00:21:09.440><c> min</c><00:21:09.760><c> heap</c><00:21:10.159><c> we're</c><00:21:10.320><c> going</c><00:21:10.400><c> to</c><00:21:10.480><c> be</c>

00:21:10.630 --> 00:21:10.640 align:start position:0%
to the min heap we're going to be
 

00:21:10.640 --> 00:21:12.230 align:start position:0%
to the min heap we're going to be
pushing<00:21:10.960><c> a</c><00:21:11.039><c> pair</c><00:21:11.280><c> of</c><00:21:11.360><c> values</c><00:21:11.760><c> remember</c><00:21:12.080><c> we're</c>

00:21:12.230 --> 00:21:12.240 align:start position:0%
pushing a pair of values remember we're
 

00:21:12.240 --> 00:21:15.110 align:start position:0%
pushing a pair of values remember we're
pushing<00:21:12.559><c> the</c><00:21:12.880><c> cost</c><00:21:13.280><c> first</c><00:21:13.600><c> so</c><00:21:13.840><c> neighbor</c><00:21:14.320><c> cost</c>

00:21:15.110 --> 00:21:15.120 align:start position:0%
pushing the cost first so neighbor cost
 

00:21:15.120 --> 00:21:17.270 align:start position:0%
pushing the cost first so neighbor cost
and<00:21:15.440><c> then</c><00:21:15.600><c> the</c><00:21:15.840><c> neighbor</c><00:21:16.559><c> and</c><00:21:16.720><c> that's</c><00:21:17.039><c> it</c>

00:21:17.270 --> 00:21:17.280 align:start position:0%
and then the neighbor and that's it
 

00:21:17.280 --> 00:21:18.870 align:start position:0%
and then the neighbor and that's it
right<00:21:17.520><c> so</c><00:21:17.679><c> we're</c><00:21:17.919><c> just</c><00:21:18.159><c> for</c><00:21:18.400><c> every</c><00:21:18.559><c> neighbor</c>

00:21:18.870 --> 00:21:18.880 align:start position:0%
right so we're just for every neighbor
 

00:21:18.880 --> 00:21:20.470 align:start position:0%
right so we're just for every neighbor
all<00:21:19.039><c> we're</c><00:21:19.280><c> having</c><00:21:19.520><c> to</c><00:21:19.600><c> do</c><00:21:19.760><c> is</c><00:21:19.919><c> just</c><00:21:20.080><c> add</c><00:21:20.320><c> it</c><00:21:20.400><c> to</c>

00:21:20.470 --> 00:21:20.480 align:start position:0%
all we're having to do is just add it to
 

00:21:20.480 --> 00:21:21.909 align:start position:0%
all we're having to do is just add it to
the<00:21:20.559><c> min</c><00:21:20.799><c> heap</c><00:21:21.120><c> right</c><00:21:21.360><c> and</c><00:21:21.520><c> then</c><00:21:21.679><c> we're</c><00:21:21.840><c> going</c>

00:21:21.909 --> 00:21:21.919 align:start position:0%
the min heap right and then we're going
 

00:21:21.919 --> 00:21:23.510 align:start position:0%
the min heap right and then we're going
to<00:21:22.000><c> go</c><00:21:22.080><c> to</c><00:21:22.240><c> the</c><00:21:22.320><c> next</c><00:21:22.559><c> iteration</c><00:21:23.039><c> of</c><00:21:23.120><c> the</c><00:21:23.200><c> loop</c>

00:21:23.510 --> 00:21:23.520 align:start position:0%
to go to the next iteration of the loop
 

00:21:23.520 --> 00:21:25.350 align:start position:0%
to go to the next iteration of the loop
repeat<00:21:23.919><c> the</c><00:21:24.080><c> exact</c><00:21:24.480><c> same</c><00:21:24.720><c> thing</c><00:21:24.880><c> until</c><00:21:25.200><c> we</c>

00:21:25.350 --> 00:21:25.360 align:start position:0%
repeat the exact same thing until we
 

00:21:25.360 --> 00:21:26.630 align:start position:0%
repeat the exact same thing until we
visit<00:21:25.679><c> every</c><00:21:25.919><c> single</c><00:21:26.240><c> node</c>

00:21:26.630 --> 00:21:26.640 align:start position:0%
visit every single node
 

00:21:26.640 --> 00:21:28.230 align:start position:0%
visit every single node
once<00:21:26.880><c> we've</c><00:21:27.039><c> done</c><00:21:27.200><c> that</c><00:21:27.440><c> we</c><00:21:27.600><c> know</c><00:21:27.840><c> for</c><00:21:28.000><c> sure</c>

00:21:28.230 --> 00:21:28.240 align:start position:0%
once we've done that we know for sure
 

00:21:28.240 --> 00:21:30.149 align:start position:0%
once we've done that we know for sure
the<00:21:28.400><c> result</c><00:21:28.880><c> has</c><00:21:29.120><c> the</c><00:21:29.280><c> total</c><00:21:29.600><c> cost</c>

00:21:30.149 --> 00:21:30.159 align:start position:0%
the result has the total cost
 

00:21:30.159 --> 00:21:31.990 align:start position:0%
the result has the total cost
that<00:21:30.400><c> it</c><00:21:30.559><c> took</c><00:21:30.880><c> so</c><00:21:31.039><c> then</c><00:21:31.280><c> at</c><00:21:31.360><c> the</c><00:21:31.520><c> end</c><00:21:31.679><c> all</c><00:21:31.840><c> we</c>

00:21:31.990 --> 00:21:32.000 align:start position:0%
that it took so then at the end all we
 

00:21:32.000 --> 00:21:33.430 align:start position:0%
that it took so then at the end all we
have<00:21:32.080><c> to</c><00:21:32.159><c> do</c><00:21:32.320><c> is</c><00:21:32.400><c> return</c><00:21:32.880><c> that</c>

00:21:33.430 --> 00:21:33.440 align:start position:0%
have to do is return that
 

00:21:33.440 --> 00:21:35.110 align:start position:0%
have to do is return that
cost<00:21:33.760><c> let</c><00:21:33.919><c> me</c><00:21:34.080><c> make</c><00:21:34.240><c> sure</c><00:21:34.400><c> i</c><00:21:34.480><c> don't</c><00:21:34.720><c> have</c><00:21:34.960><c> a</c>

00:21:35.110 --> 00:21:35.120 align:start position:0%
cost let me make sure i don't have a
 

00:21:35.120 --> 00:21:37.190 align:start position:0%
cost let me make sure i don't have a
space<00:21:35.760><c> and</c><00:21:35.840><c> yeah</c><00:21:36.080><c> that's</c><00:21:36.320><c> the</c><00:21:36.480><c> exact</c><00:21:36.799><c> thing</c><00:21:37.039><c> so</c>

00:21:37.190 --> 00:21:37.200 align:start position:0%
space and yeah that's the exact thing so
 

00:21:37.200 --> 00:21:38.789 align:start position:0%
space and yeah that's the exact thing so
you<00:21:37.360><c> can</c><00:21:37.440><c> see</c><00:21:37.679><c> this</c><00:21:37.919><c> is</c><00:21:38.080><c> the</c><00:21:38.240><c> portion</c><00:21:38.559><c> that's</c>

00:21:38.789 --> 00:21:38.799 align:start position:0%
you can see this is the portion that's
 

00:21:38.799 --> 00:21:40.789 align:start position:0%
you can see this is the portion that's
prim's<00:21:39.200><c> algorithm</c><00:21:39.760><c> everything</c><00:21:40.240><c> else</c><00:21:40.480><c> is</c><00:21:40.640><c> just</c>

00:21:40.789 --> 00:21:40.799 align:start position:0%
prim's algorithm everything else is just
 

00:21:40.799 --> 00:21:42.710 align:start position:0%
prim's algorithm everything else is just
some<00:21:41.120><c> pre-work</c><00:21:41.679><c> that</c><00:21:41.840><c> we</c><00:21:41.919><c> had</c><00:21:42.080><c> to</c><00:21:42.159><c> do</c><00:21:42.400><c> yes</c><00:21:42.559><c> we</c>

00:21:42.710 --> 00:21:42.720 align:start position:0%
some pre-work that we had to do yes we
 

00:21:42.720 --> 00:21:44.390 align:start position:0%
some pre-work that we had to do yes we
could<00:21:42.880><c> have</c><00:21:42.960><c> taken</c><00:21:43.200><c> this</c><00:21:43.440><c> pre-work</c><00:21:43.919><c> and</c><00:21:44.080><c> mixed</c>

00:21:44.390 --> 00:21:44.400 align:start position:0%
could have taken this pre-work and mixed
 

00:21:44.400 --> 00:21:45.990 align:start position:0%
could have taken this pre-work and mixed
it<00:21:44.559><c> up</c><00:21:44.799><c> into</c><00:21:45.039><c> here</c><00:21:45.200><c> but</c><00:21:45.360><c> i</c><00:21:45.440><c> just</c><00:21:45.600><c> want</c><00:21:45.760><c> to</c><00:21:45.840><c> give</c>

00:21:45.990 --> 00:21:46.000 align:start position:0%
it up into here but i just want to give
 

00:21:46.000 --> 00:21:46.789 align:start position:0%
it up into here but i just want to give
a<00:21:46.159><c> clear</c>

00:21:46.789 --> 00:21:46.799 align:start position:0%
a clear
 

00:21:46.799 --> 00:21:49.029 align:start position:0%
a clear
understanding<00:21:47.440><c> to</c><00:21:47.600><c> you</c><00:21:47.840><c> all</c><00:21:48.159><c> of</c><00:21:48.320><c> what</c><00:21:48.559><c> exactly</c>

00:21:49.029 --> 00:21:49.039 align:start position:0%
understanding to you all of what exactly
 

00:21:49.039 --> 00:21:51.350 align:start position:0%
understanding to you all of what exactly
prim's<00:21:49.520><c> algorithm</c><00:21:50.080><c> entails</c><00:21:50.640><c> this</c><00:21:50.880><c> is</c><00:21:51.039><c> just</c>

00:21:51.350 --> 00:21:51.360 align:start position:0%
prim's algorithm entails this is just
 

00:21:51.360 --> 00:21:53.430 align:start position:0%
prim's algorithm entails this is just
stuff<00:21:51.679><c> that's</c><00:21:52.000><c> not</c><00:21:52.159><c> necessarily</c><00:21:52.799><c> related</c><00:21:53.280><c> to</c>

00:21:53.430 --> 00:21:53.440 align:start position:0%
stuff that's not necessarily related to
 

00:21:53.440 --> 00:21:54.549 align:start position:0%
stuff that's not necessarily related to
prim's<00:21:53.840><c> algorithm</c>

00:21:54.549 --> 00:21:54.559 align:start position:0%
prim's algorithm
 

00:21:54.559 --> 00:21:57.190 align:start position:0%
prim's algorithm
we<00:21:54.799><c> do</c><00:21:55.039><c> need</c><00:21:55.200><c> an</c><00:21:55.360><c> adjacency</c><00:21:56.080><c> list</c><00:21:56.480><c> though</c><00:21:56.960><c> to</c>

00:21:57.190 --> 00:21:57.200 align:start position:0%
we do need an adjacency list though to
 

00:21:57.200 --> 00:21:59.270 align:start position:0%
we do need an adjacency list though to
perform<00:21:57.600><c> this</c><00:21:57.840><c> algorithm</c><00:21:58.400><c> efficiently</c>

00:21:59.270 --> 00:21:59.280 align:start position:0%
perform this algorithm efficiently
 

00:21:59.280 --> 00:22:01.110 align:start position:0%
perform this algorithm efficiently
so<00:21:59.440><c> i</c><00:21:59.520><c> hope</c><00:21:59.679><c> that</c><00:21:59.919><c> this</c><00:22:00.080><c> was</c><00:22:00.240><c> helpful</c><00:22:00.799><c> if</c><00:22:00.960><c> it</c>

00:22:01.110 --> 00:22:01.120 align:start position:0%
so i hope that this was helpful if it
 

00:22:01.120 --> 00:22:02.950 align:start position:0%
so i hope that this was helpful if it
was<00:22:01.600><c> please</c><00:22:01.919><c> like</c><00:22:02.159><c> and</c><00:22:02.320><c> subscribe</c><00:22:02.880><c> it</c>

00:22:02.950 --> 00:22:02.960 align:start position:0%
was please like and subscribe it
 

00:22:02.960 --> 00:22:04.870 align:start position:0%
was please like and subscribe it
supports<00:22:03.360><c> the</c><00:22:03.520><c> channel</c><00:22:03.919><c> a</c><00:22:04.159><c> lot</c><00:22:04.480><c> and</c><00:22:04.640><c> i'll</c>

00:22:04.870 --> 00:22:04.880 align:start position:0%
supports the channel a lot and i'll
 

00:22:04.880 --> 00:22:05.510 align:start position:0%
supports the channel a lot and i'll
hopefully

00:22:05.510 --> 00:22:05.520 align:start position:0%
hopefully
 

00:22:05.520 --> 00:22:09.440 align:start position:0%
hopefully
see<00:22:05.679><c> you</c><00:22:05.840><c> pretty</c><00:22:06.159><c> soon</c><00:22:06.559><c> thanks</c><00:22:06.799><c> for</c><00:22:06.960><c> watching</c>

