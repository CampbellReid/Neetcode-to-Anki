WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.750 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.120><c> back</c><00:00:01.360><c> and</c><00:00:01.520><c> let's</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.760 --> 00:00:03.669 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.920><c> some</c><00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.560><c> code</c><00:00:02.879><c> today</c><00:00:03.120><c> so</c><00:00:03.360><c> today</c>

00:00:03.669 --> 00:00:03.679 align:start position:0%
write some more neat code today so today
 

00:00:03.679 --> 00:00:04.309 align:start position:0%
write some more neat code today so today
let's<00:00:03.919><c> solve</c>

00:00:04.309 --> 00:00:04.319 align:start position:0%
let's solve
 

00:00:04.319 --> 00:00:07.430 align:start position:0%
let's solve
product<00:00:04.799><c> of</c><00:00:04.960><c> array</c><00:00:05.440><c> except</c><00:00:06.080><c> itself</c><00:00:07.040><c> so</c><00:00:07.200><c> this</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
product of array except itself so this
 

00:00:07.440 --> 00:00:10.070 align:start position:0%
product of array except itself so this
is<00:00:07.600><c> another</c><00:00:08.080><c> problem</c><00:00:08.480><c> from</c><00:00:08.720><c> the</c><00:00:08.880><c> blind</c><00:00:09.360><c> 75</c>

00:00:10.070 --> 00:00:10.080 align:start position:0%
is another problem from the blind 75
 

00:00:10.080 --> 00:00:11.669 align:start position:0%
is another problem from the blind 75
list<00:00:10.400><c> as</c><00:00:10.559><c> you</c><00:00:10.719><c> can</c><00:00:10.800><c> see</c><00:00:10.960><c> it's</c><00:00:11.120><c> over</c><00:00:11.360><c> here</c>

00:00:11.669 --> 00:00:11.679 align:start position:0%
list as you can see it's over here
 

00:00:11.679 --> 00:00:13.509 align:start position:0%
list as you can see it's over here
product<00:00:12.000><c> breaks</c><00:00:12.559><c> itself</c><00:00:12.960><c> so</c><00:00:13.120><c> i'm</c><00:00:13.200><c> going</c><00:00:13.280><c> to</c><00:00:13.360><c> be</c>

00:00:13.509 --> 00:00:13.519 align:start position:0%
product breaks itself so i'm going to be
 

00:00:13.519 --> 00:00:15.589 align:start position:0%
product breaks itself so i'm going to be
adding<00:00:13.840><c> that</c><00:00:14.000><c> video</c><00:00:14.320><c> solution</c><00:00:14.799><c> today</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
adding that video solution today
 

00:00:15.599 --> 00:00:17.269 align:start position:0%
adding that video solution today
and<00:00:15.759><c> we're</c><00:00:15.920><c> getting</c><00:00:16.240><c> one</c><00:00:16.480><c> step</c><00:00:16.800><c> closer</c><00:00:17.119><c> to</c>

00:00:17.269 --> 00:00:17.279 align:start position:0%
and we're getting one step closer to
 

00:00:17.279 --> 00:00:19.670 align:start position:0%
and we're getting one step closer to
having<00:00:17.520><c> every</c><00:00:17.840><c> problem</c><00:00:18.320><c> in</c><00:00:18.480><c> this</c><00:00:18.800><c> entire</c><00:00:19.279><c> list</c>

00:00:19.670 --> 00:00:19.680 align:start position:0%
having every problem in this entire list
 

00:00:19.680 --> 00:00:20.550 align:start position:0%
having every problem in this entire list
filled<00:00:20.000><c> out</c>

00:00:20.550 --> 00:00:20.560 align:start position:0%
filled out
 

00:00:20.560 --> 00:00:22.790 align:start position:0%
filled out
so<00:00:20.800><c> for</c><00:00:21.039><c> this</c><00:00:21.279><c> problem</c><00:00:21.680><c> we're</c><00:00:21.840><c> given</c><00:00:22.240><c> an</c><00:00:22.400><c> input</c>

00:00:22.790 --> 00:00:22.800 align:start position:0%
so for this problem we're given an input
 

00:00:22.800 --> 00:00:24.230 align:start position:0%
so for this problem we're given an input
array<00:00:23.279><c> of</c><00:00:23.519><c> integers</c>

00:00:24.230 --> 00:00:24.240 align:start position:0%
array of integers
 

00:00:24.240 --> 00:00:26.710 align:start position:0%
array of integers
nums<00:00:24.800><c> and</c><00:00:25.039><c> we</c><00:00:25.199><c> want</c><00:00:25.439><c> to</c><00:00:25.519><c> return</c><00:00:26.000><c> an</c><00:00:26.320><c> output</c>

00:00:26.710 --> 00:00:26.720 align:start position:0%
nums and we want to return an output
 

00:00:26.720 --> 00:00:28.550 align:start position:0%
nums and we want to return an output
array<00:00:27.039><c> for</c><00:00:27.199><c> every</c><00:00:27.439><c> single</c><00:00:27.760><c> number</c><00:00:28.080><c> that</c><00:00:28.240><c> we're</c>

00:00:28.550 --> 00:00:28.560 align:start position:0%
array for every single number that we're
 

00:00:28.560 --> 00:00:29.269 align:start position:0%
array for every single number that we're
given

00:00:29.269 --> 00:00:29.279 align:start position:0%
given
 

00:00:29.279 --> 00:00:31.750 align:start position:0%
given
where<00:00:29.519><c> for</c><00:00:29.679><c> each</c><00:00:30.080><c> value</c><00:00:30.720><c> in</c><00:00:30.880><c> the</c><00:00:31.119><c> input</c><00:00:31.439><c> array</c>

00:00:31.750 --> 00:00:31.760 align:start position:0%
where for each value in the input array
 

00:00:31.760 --> 00:00:33.750 align:start position:0%
where for each value in the input array
nums<00:00:32.160><c> we're</c><00:00:32.399><c> basically</c><00:00:32.960><c> multiplying</c>

00:00:33.750 --> 00:00:33.760 align:start position:0%
nums we're basically multiplying
 

00:00:33.760 --> 00:00:36.709 align:start position:0%
nums we're basically multiplying
every<00:00:34.079><c> single</c><00:00:34.480><c> number</c><00:00:34.960><c> except</c><00:00:35.760><c> that</c><00:00:36.160><c> value</c>

00:00:36.709 --> 00:00:36.719 align:start position:0%
every single number except that value
 

00:00:36.719 --> 00:00:38.950 align:start position:0%
every single number except that value
and<00:00:36.800><c> then</c><00:00:37.040><c> returning</c><00:00:37.520><c> that</c><00:00:37.840><c> as</c><00:00:38.000><c> the</c><00:00:38.160><c> result</c>

00:00:38.950 --> 00:00:38.960 align:start position:0%
and then returning that as the result
 

00:00:38.960 --> 00:00:41.990 align:start position:0%
and then returning that as the result
for<00:00:39.200><c> example</c><00:00:40.160><c> in</c><00:00:40.640><c> this</c><00:00:41.120><c> example</c><00:00:41.600><c> you</c><00:00:41.760><c> can</c><00:00:41.840><c> see</c>

00:00:41.990 --> 00:00:42.000 align:start position:0%
for example in this example you can see
 

00:00:42.000 --> 00:00:42.549 align:start position:0%
for example in this example you can see
we're<00:00:42.160><c> given</c>

00:00:42.549 --> 00:00:42.559 align:start position:0%
we're given
 

00:00:42.559 --> 00:00:45.590 align:start position:0%
we're given
1<00:00:43.040><c> two</c><00:00:43.440><c> three</c><00:00:43.760><c> four</c><00:00:44.239><c> so</c><00:00:44.399><c> for</c><00:00:44.559><c> example</c><00:00:45.039><c> for</c><00:00:45.360><c> this</c>

00:00:45.590 --> 00:00:45.600 align:start position:0%
1 two three four so for example for this
 

00:00:45.600 --> 00:00:46.150 align:start position:0%
1 two three four so for example for this
value

00:00:46.150 --> 00:00:46.160 align:start position:0%
value
 

00:00:46.160 --> 00:00:47.910 align:start position:0%
value
one<00:00:46.719><c> we</c><00:00:46.879><c> would</c><00:00:47.039><c> want</c><00:00:47.200><c> to</c><00:00:47.360><c> return</c><00:00:47.760><c> the</c>

00:00:47.910 --> 00:00:47.920 align:start position:0%
one we would want to return the
 

00:00:47.920 --> 00:00:49.910 align:start position:0%
one we would want to return the
multiplication<00:00:48.800><c> the</c><00:00:49.039><c> product</c><00:00:49.600><c> of</c>

00:00:49.910 --> 00:00:49.920 align:start position:0%
multiplication the product of
 

00:00:49.920 --> 00:00:51.910 align:start position:0%
multiplication the product of
every<00:00:50.320><c> other</c><00:00:50.640><c> value</c><00:00:51.039><c> so</c><00:00:51.199><c> for</c><00:00:51.360><c> these</c><00:00:51.680><c> three</c>

00:00:51.910 --> 00:00:51.920 align:start position:0%
every other value so for these three
 

00:00:51.920 --> 00:00:53.750 align:start position:0%
every other value so for these three
values<00:00:52.320><c> the</c><00:00:52.480><c> product</c><00:00:52.800><c> would</c><00:00:53.039><c> be</c><00:00:53.199><c> two</c><00:00:53.440><c> times</c>

00:00:53.750 --> 00:00:53.760 align:start position:0%
values the product would be two times
 

00:00:53.760 --> 00:00:54.869 align:start position:0%
values the product would be two times
three<00:00:54.000><c> times</c><00:00:54.399><c> four</c>

00:00:54.869 --> 00:00:54.879 align:start position:0%
three times four
 

00:00:54.879 --> 00:00:57.110 align:start position:0%
three times four
that's<00:00:55.120><c> going</c><00:00:55.199><c> to</c><00:00:55.280><c> be</c><00:00:55.520><c> 24</c><00:00:56.239><c> so</c><00:00:56.399><c> for</c><00:00:56.640><c> the</c><00:00:56.719><c> first</c>

00:00:57.110 --> 00:00:57.120 align:start position:0%
that's going to be 24 so for the first
 

00:00:57.120 --> 00:00:58.950 align:start position:0%
that's going to be 24 so for the first
value<00:00:57.520><c> in</c><00:00:57.600><c> the</c><00:00:57.760><c> output</c><00:00:58.320><c> we're</c><00:00:58.559><c> going</c><00:00:58.640><c> to</c><00:00:58.719><c> put</c>

00:00:58.950 --> 00:00:58.960 align:start position:0%
value in the output we're going to put
 

00:00:58.960 --> 00:00:59.830 align:start position:0%
value in the output we're going to put
24.

00:00:59.830 --> 00:00:59.840 align:start position:0%
24.
 

00:00:59.840 --> 00:01:01.910 align:start position:0%
24.
similarly<00:01:00.399><c> for</c><00:01:00.559><c> the</c><00:01:00.719><c> second</c><00:01:01.039><c> value</c><00:01:01.600><c> we</c><00:01:01.760><c> want</c>

00:01:01.910 --> 00:01:01.920 align:start position:0%
similarly for the second value we want
 

00:01:01.920 --> 00:01:04.390 align:start position:0%
similarly for the second value we want
to<00:01:02.000><c> multiply</c><00:01:02.640><c> every</c><00:01:02.879><c> value</c><00:01:03.280><c> in</c><00:01:03.520><c> nums</c><00:01:03.920><c> except</c>

00:01:04.390 --> 00:01:04.400 align:start position:0%
to multiply every value in nums except
 

00:01:04.400 --> 00:01:06.230 align:start position:0%
to multiply every value in nums except
for<00:01:04.640><c> this</c><00:01:04.960><c> value</c><00:01:05.280><c> so</c><00:01:05.439><c> that's</c><00:01:05.600><c> going</c><00:01:05.680><c> to</c><00:01:05.840><c> be</c><00:01:06.000><c> 1</c>

00:01:06.230 --> 00:01:06.240 align:start position:0%
for this value so that's going to be 1
 

00:01:06.240 --> 00:01:08.710 align:start position:0%
for this value so that's going to be 1
times<00:01:06.640><c> 3</c><00:01:06.880><c> times</c><00:01:07.200><c> 4</c><00:01:07.520><c> that's</c><00:01:07.760><c> going</c><00:01:07.840><c> to</c><00:01:07.920><c> be</c><00:01:08.159><c> 12</c>

00:01:08.710 --> 00:01:08.720 align:start position:0%
times 3 times 4 that's going to be 12
 

00:01:08.720 --> 00:01:11.109 align:start position:0%
times 3 times 4 that's going to be 12
so<00:01:08.880><c> the</c><00:01:09.040><c> second</c><00:01:09.360><c> value</c><00:01:10.080><c> in</c><00:01:10.159><c> the</c><00:01:10.320><c> output</c><00:01:10.720><c> array</c>

00:01:11.109 --> 00:01:11.119 align:start position:0%
so the second value in the output array
 

00:01:11.119 --> 00:01:11.830 align:start position:0%
so the second value in the output array
is<00:01:11.200><c> going</c><00:01:11.439><c> to</c><00:01:11.520><c> be</c>

00:01:11.830 --> 00:01:11.840 align:start position:0%
is going to be
 

00:01:11.840 --> 00:01:14.630 align:start position:0%
is going to be
12.<00:01:12.720><c> now</c><00:01:12.880><c> the</c><00:01:13.040><c> hard</c><00:01:13.360><c> part</c><00:01:13.680><c> about</c><00:01:14.000><c> this</c><00:01:14.240><c> problem</c>

00:01:14.630 --> 00:01:14.640 align:start position:0%
12. now the hard part about this problem
 

00:01:14.640 --> 00:01:16.710 align:start position:0%
12. now the hard part about this problem
is<00:01:14.880><c> basically</c><00:01:15.360><c> the</c><00:01:15.520><c> restrictions</c><00:01:16.400><c> that</c><00:01:16.479><c> they</c>

00:01:16.710 --> 00:01:16.720 align:start position:0%
is basically the restrictions that they
 

00:01:16.720 --> 00:01:17.429 align:start position:0%
is basically the restrictions that they
give<00:01:17.040><c> us</c>

00:01:17.429 --> 00:01:17.439 align:start position:0%
give us
 

00:01:17.439 --> 00:01:20.230 align:start position:0%
give us
so<00:01:18.080><c> we</c><00:01:18.320><c> have</c><00:01:18.479><c> to</c><00:01:18.640><c> solve</c><00:01:18.960><c> this</c><00:01:19.200><c> problem</c><00:01:19.680><c> in</c><00:01:19.920><c> big</c>

00:01:20.230 --> 00:01:20.240 align:start position:0%
so we have to solve this problem in big
 

00:01:20.240 --> 00:01:20.550 align:start position:0%
so we have to solve this problem in big
o

00:01:20.550 --> 00:01:20.560 align:start position:0%
o
 

00:01:20.560 --> 00:01:22.870 align:start position:0%
o
of<00:01:20.880><c> n</c><00:01:21.200><c> time</c><00:01:21.520><c> and</c><00:01:21.680><c> we</c><00:01:21.840><c> have</c><00:01:22.000><c> to</c><00:01:22.080><c> do</c><00:01:22.240><c> it</c><00:01:22.320><c> without</c>

00:01:22.870 --> 00:01:22.880 align:start position:0%
of n time and we have to do it without
 

00:01:22.880 --> 00:01:24.149 align:start position:0%
of n time and we have to do it without
using<00:01:23.200><c> the</c><00:01:23.360><c> division</c>

00:01:24.149 --> 00:01:24.159 align:start position:0%
using the division
 

00:01:24.159 --> 00:01:26.469 align:start position:0%
using the division
operator<00:01:24.880><c> it</c><00:01:24.960><c> would</c><00:01:25.119><c> be</c><00:01:25.360><c> really</c><00:01:25.759><c> easy</c><00:01:26.080><c> if</c><00:01:26.240><c> we</c>

00:01:26.469 --> 00:01:26.479 align:start position:0%
operator it would be really easy if we
 

00:01:26.479 --> 00:01:28.230 align:start position:0%
operator it would be really easy if we
could<00:01:26.720><c> use</c><00:01:26.960><c> the</c><00:01:27.040><c> division</c><00:01:27.520><c> operator</c>

00:01:28.230 --> 00:01:28.240 align:start position:0%
could use the division operator
 

00:01:28.240 --> 00:01:30.149 align:start position:0%
could use the division operator
because<00:01:28.560><c> what</c><00:01:28.720><c> we</c><00:01:28.880><c> could</c><00:01:29.119><c> basically</c><00:01:29.680><c> do</c><00:01:29.920><c> is</c>

00:01:30.149 --> 00:01:30.159 align:start position:0%
because what we could basically do is
 

00:01:30.159 --> 00:01:31.510 align:start position:0%
because what we could basically do is
take<00:01:30.400><c> the</c><00:01:30.640><c> product</c><00:01:31.119><c> of</c>

00:01:31.510 --> 00:01:31.520 align:start position:0%
take the product of
 

00:01:31.520 --> 00:01:34.870 align:start position:0%
take the product of
all<00:01:31.840><c> of</c><00:01:32.000><c> these</c><00:01:32.240><c> values</c><00:01:33.200><c> and</c><00:01:33.360><c> then</c><00:01:34.400><c> and</c><00:01:34.560><c> we</c><00:01:34.720><c> know</c>

00:01:34.870 --> 00:01:34.880 align:start position:0%
all of these values and then and we know
 

00:01:34.880 --> 00:01:36.710 align:start position:0%
all of these values and then and we know
that<00:01:35.040><c> would</c><00:01:35.200><c> basically</c><00:01:35.600><c> be</c><00:01:35.759><c> 24</c><00:01:36.240><c> so</c><00:01:36.400><c> if</c><00:01:36.479><c> we</c>

00:01:36.710 --> 00:01:36.720 align:start position:0%
that would basically be 24 so if we
 

00:01:36.720 --> 00:01:37.590 align:start position:0%
that would basically be 24 so if we
wanted

00:01:37.590 --> 00:01:37.600 align:start position:0%
wanted
 

00:01:37.600 --> 00:01:40.230 align:start position:0%
wanted
the<00:01:37.920><c> first</c><00:01:38.240><c> value</c><00:01:38.799><c> so</c><00:01:39.119><c> if</c><00:01:39.280><c> we</c><00:01:39.360><c> wanted</c><00:01:39.600><c> 24</c><00:01:40.079><c> we</c>

00:01:40.230 --> 00:01:40.240 align:start position:0%
the first value so if we wanted 24 we
 

00:01:40.240 --> 00:01:40.870 align:start position:0%
the first value so if we wanted 24 we
would<00:01:40.400><c> take</c>

00:01:40.870 --> 00:01:40.880 align:start position:0%
would take
 

00:01:40.880 --> 00:01:43.270 align:start position:0%
would take
this<00:01:41.280><c> total</c><00:01:41.680><c> product</c><00:01:42.079><c> and</c><00:01:42.159><c> divide</c><00:01:42.560><c> it</c><00:01:42.720><c> by</c><00:01:42.960><c> one</c>

00:01:43.270 --> 00:01:43.280 align:start position:0%
this total product and divide it by one
 

00:01:43.280 --> 00:01:45.109 align:start position:0%
this total product and divide it by one
right<00:01:43.439><c> that</c><00:01:43.600><c> would</c><00:01:43.680><c> give</c><00:01:43.920><c> us</c><00:01:44.079><c> 24</c><00:01:44.640><c> if</c><00:01:44.720><c> we</c><00:01:44.799><c> wanted</c>

00:01:45.109 --> 00:01:45.119 align:start position:0%
right that would give us 24 if we wanted
 

00:01:45.119 --> 00:01:46.469 align:start position:0%
right that would give us 24 if we wanted
what<00:01:45.280><c> the</c><00:01:45.360><c> second</c><00:01:45.680><c> value</c><00:01:46.000><c> would</c><00:01:46.159><c> be</c>

00:01:46.469 --> 00:01:46.479 align:start position:0%
what the second value would be
 

00:01:46.479 --> 00:01:48.469 align:start position:0%
what the second value would be
we<00:01:46.640><c> would</c><00:01:46.880><c> take</c><00:01:47.040><c> the</c><00:01:47.200><c> entire</c><00:01:47.600><c> product</c><00:01:47.920><c> 24</c>

00:01:48.469 --> 00:01:48.479 align:start position:0%
we would take the entire product 24
 

00:01:48.479 --> 00:01:49.670 align:start position:0%
we would take the entire product 24
which<00:01:48.640><c> would</c><00:01:48.799><c> be</c><00:01:48.960><c> all</c><00:01:49.200><c> of</c><00:01:49.280><c> this</c>

00:01:49.670 --> 00:01:49.680 align:start position:0%
which would be all of this
 

00:01:49.680 --> 00:01:52.630 align:start position:0%
which would be all of this
and<00:01:49.759><c> then</c><00:01:50.000><c> divide</c><00:01:50.560><c> it</c><00:01:50.960><c> by</c><00:01:51.360><c> 2</c><00:01:52.079><c> which</c><00:01:52.240><c> would</c><00:01:52.399><c> give</c>

00:01:52.630 --> 00:01:52.640 align:start position:0%
and then divide it by 2 which would give
 

00:01:52.640 --> 00:01:53.590 align:start position:0%
and then divide it by 2 which would give
us<00:01:52.880><c> 12</c>

00:01:53.590 --> 00:01:53.600 align:start position:0%
us 12
 

00:01:53.600 --> 00:01:55.350 align:start position:0%
us 12
which<00:01:53.920><c> would</c><00:01:54.240><c> be</c><00:01:54.399><c> over</c><00:01:54.560><c> here</c><00:01:54.880><c> right</c><00:01:55.119><c> because</c>

00:01:55.350 --> 00:01:55.360 align:start position:0%
which would be over here right because
 

00:01:55.360 --> 00:01:56.950 align:start position:0%
which would be over here right because
the<00:01:55.520><c> division</c><00:01:56.000><c> is</c><00:01:56.159><c> basically</c>

00:01:56.950 --> 00:01:56.960 align:start position:0%
the division is basically
 

00:01:56.960 --> 00:01:59.429 align:start position:0%
the division is basically
taking<00:01:57.600><c> the</c><00:01:57.840><c> entire</c><00:01:58.240><c> product</c><00:01:58.719><c> of</c><00:01:58.880><c> the</c><00:01:59.119><c> entire</c>

00:01:59.429 --> 00:01:59.439 align:start position:0%
taking the entire product of the entire
 

00:01:59.439 --> 00:02:00.630 align:start position:0%
taking the entire product of the entire
thing

00:02:00.630 --> 00:02:00.640 align:start position:0%
thing
 

00:02:00.640 --> 00:02:03.190 align:start position:0%
thing
without<00:02:01.280><c> multiplying</c><00:02:01.840><c> by</c><00:02:02.159><c> this</c><00:02:02.719><c> dividing</c>

00:02:03.190 --> 00:02:03.200 align:start position:0%
without multiplying by this dividing
 

00:02:03.200 --> 00:02:03.830 align:start position:0%
without multiplying by this dividing
this

00:02:03.830 --> 00:02:03.840 align:start position:0%
this
 

00:02:03.840 --> 00:02:06.630 align:start position:0%
this
would<00:02:04.000><c> do</c><00:02:04.240><c> exactly</c><00:02:04.719><c> that</c><00:02:05.600><c> but</c><00:02:05.840><c> we</c><00:02:06.079><c> are</c><00:02:06.320><c> not</c>

00:02:06.630 --> 00:02:06.640 align:start position:0%
would do exactly that but we are not
 

00:02:06.640 --> 00:02:09.190 align:start position:0%
would do exactly that but we are not
allowed<00:02:07.119><c> to</c><00:02:07.360><c> use</c><00:02:07.600><c> the</c><00:02:07.759><c> division</c><00:02:08.239><c> operator</c>

00:02:09.190 --> 00:02:09.200 align:start position:0%
allowed to use the division operator
 

00:02:09.200 --> 00:02:12.070 align:start position:0%
allowed to use the division operator
so<00:02:09.440><c> if</c><00:02:09.759><c> we</c><00:02:10.160><c> wanted</c><00:02:10.800><c> the</c><00:02:11.039><c> product</c><00:02:11.520><c> of</c><00:02:11.760><c> every</c>

00:02:12.070 --> 00:02:12.080 align:start position:0%
so if we wanted the product of every
 

00:02:12.080 --> 00:02:13.510 align:start position:0%
so if we wanted the product of every
value<00:02:12.480><c> in</c><00:02:12.560><c> here</c><00:02:12.879><c> except</c>

00:02:13.510 --> 00:02:13.520 align:start position:0%
value in here except
 

00:02:13.520 --> 00:02:15.830 align:start position:0%
value in here except
the<00:02:13.840><c> three</c><00:02:14.319><c> one</c><00:02:14.560><c> way</c><00:02:14.800><c> we</c><00:02:14.959><c> can</c><00:02:15.200><c> break</c><00:02:15.440><c> it</c><00:02:15.599><c> down</c>

00:02:15.830 --> 00:02:15.840 align:start position:0%
the three one way we can break it down
 

00:02:15.840 --> 00:02:17.670 align:start position:0%
the three one way we can break it down
is<00:02:16.000><c> basically</c><00:02:16.560><c> get</c><00:02:16.800><c> the</c><00:02:17.040><c> product</c><00:02:17.440><c> of</c>

00:02:17.670 --> 00:02:17.680 align:start position:0%
is basically get the product of
 

00:02:17.680 --> 00:02:20.150 align:start position:0%
is basically get the product of
every<00:02:18.000><c> value</c><00:02:18.400><c> before</c><00:02:19.120><c> three</c><00:02:19.520><c> in</c><00:02:19.599><c> the</c><00:02:19.760><c> input</c>

00:02:20.150 --> 00:02:20.160 align:start position:0%
every value before three in the input
 

00:02:20.160 --> 00:02:20.710 align:start position:0%
every value before three in the input
array

00:02:20.710 --> 00:02:20.720 align:start position:0%
array
 

00:02:20.720 --> 00:02:22.949 align:start position:0%
array
and<00:02:21.040><c> get</c><00:02:21.280><c> every</c><00:02:22.000><c> and</c><00:02:22.160><c> get</c><00:02:22.319><c> the</c><00:02:22.480><c> product</c><00:02:22.800><c> of</c>

00:02:22.949 --> 00:02:22.959 align:start position:0%
and get every and get the product of
 

00:02:22.959 --> 00:02:23.750 align:start position:0%
and get every and get the product of
every<00:02:23.200><c> value</c>

00:02:23.750 --> 00:02:23.760 align:start position:0%
every value
 

00:02:23.760 --> 00:02:25.350 align:start position:0%
every value
after<00:02:24.239><c> three</c><00:02:24.560><c> in</c><00:02:24.640><c> the</c><00:02:24.800><c> array</c><00:02:25.040><c> and</c><00:02:25.120><c> then</c>

00:02:25.350 --> 00:02:25.360 align:start position:0%
after three in the array and then
 

00:02:25.360 --> 00:02:26.949 align:start position:0%
after three in the array and then
multiply<00:02:26.400><c> these</c>

00:02:26.949 --> 00:02:26.959 align:start position:0%
multiply these
 

00:02:26.959 --> 00:02:29.510 align:start position:0%
multiply these
two<00:02:27.440><c> values</c><00:02:28.000><c> together</c><00:02:28.879><c> and</c><00:02:28.959><c> then</c><00:02:29.200><c> that's</c>

00:02:29.510 --> 00:02:29.520 align:start position:0%
two values together and then that's
 

00:02:29.520 --> 00:02:30.470 align:start position:0%
two values together and then that's
going<00:02:29.599><c> to</c><00:02:29.680><c> give</c><00:02:29.920><c> us</c>

00:02:30.470 --> 00:02:30.480 align:start position:0%
going to give us
 

00:02:30.480 --> 00:02:31.990 align:start position:0%
going to give us
uh<00:02:30.720><c> the</c><00:02:30.879><c> value</c><00:02:31.200><c> that</c><00:02:31.280><c> we</c><00:02:31.360><c> would</c><00:02:31.519><c> want</c><00:02:31.680><c> to</c><00:02:31.760><c> put</c>

00:02:31.990 --> 00:02:32.000 align:start position:0%
uh the value that we would want to put
 

00:02:32.000 --> 00:02:33.990 align:start position:0%
uh the value that we would want to put
in<00:02:32.080><c> this</c><00:02:32.319><c> position</c><00:02:32.959><c> in</c><00:02:33.360><c> our</c>

00:02:33.990 --> 00:02:34.000 align:start position:0%
in this position in our
 

00:02:34.000 --> 00:02:36.550 align:start position:0%
in this position in our
result<00:02:34.800><c> so</c><00:02:35.040><c> it</c><00:02:35.120><c> would</c><00:02:35.360><c> be</c><00:02:35.599><c> helpful</c><00:02:36.080><c> for</c><00:02:36.319><c> us</c><00:02:36.480><c> if</c>

00:02:36.550 --> 00:02:36.560 align:start position:0%
result so it would be helpful for us if
 

00:02:36.560 --> 00:02:37.910 align:start position:0%
result so it would be helpful for us if
we<00:02:36.720><c> want</c><00:02:36.800><c> to</c><00:02:36.879><c> do</c><00:02:37.040><c> that</c><00:02:37.200><c> for</c><00:02:37.360><c> every</c><00:02:37.599><c> single</c>

00:02:37.910 --> 00:02:37.920 align:start position:0%
we want to do that for every single
 

00:02:37.920 --> 00:02:39.990 align:start position:0%
we want to do that for every single
value<00:02:38.400><c> in</c><00:02:38.480><c> the</c><00:02:38.720><c> input</c><00:02:38.959><c> array</c><00:02:39.280><c> if</c><00:02:39.360><c> we</c><00:02:39.519><c> basically</c>

00:02:39.990 --> 00:02:40.000 align:start position:0%
value in the input array if we basically
 

00:02:40.000 --> 00:02:40.790 align:start position:0%
value in the input array if we basically
just<00:02:40.160><c> compute</c><00:02:40.560><c> the</c>

00:02:40.790 --> 00:02:40.800 align:start position:0%
just compute the
 

00:02:40.800 --> 00:02:42.790 align:start position:0%
just compute the
the<00:02:41.040><c> prefix</c><00:02:41.680><c> product</c><00:02:42.080><c> for</c><00:02:42.319><c> every</c><00:02:42.480><c> single</c>

00:02:42.790 --> 00:02:42.800 align:start position:0%
the prefix product for every single
 

00:02:42.800 --> 00:02:44.869 align:start position:0%
the prefix product for every single
position<00:02:43.519><c> in</c><00:02:43.680><c> the</c><00:02:43.920><c> input</c><00:02:44.319><c> array</c><00:02:44.640><c> right</c><00:02:44.800><c> and</c>

00:02:44.869 --> 00:02:44.879 align:start position:0%
position in the input array right and
 

00:02:44.879 --> 00:02:45.589 align:start position:0%
position in the input array right and
then<00:02:45.040><c> put</c><00:02:45.200><c> it</c>

00:02:45.589 --> 00:02:45.599 align:start position:0%
then put it
 

00:02:45.599 --> 00:02:47.670 align:start position:0%
then put it
in<00:02:45.760><c> a</c><00:02:45.920><c> prefix</c><00:02:46.480><c> array</c><00:02:46.800><c> and</c><00:02:46.879><c> since</c><00:02:47.120><c> we're</c><00:02:47.360><c> also</c>

00:02:47.670 --> 00:02:47.680 align:start position:0%
in a prefix array and since we're also
 

00:02:47.680 --> 00:02:49.110 align:start position:0%
in a prefix array and since we're also
going<00:02:47.760><c> to</c><00:02:47.840><c> be</c><00:02:47.920><c> wanting</c><00:02:48.480><c> the</c><00:02:48.640><c> product</c><00:02:49.040><c> of</c>

00:02:49.110 --> 00:02:49.120 align:start position:0%
going to be wanting the product of
 

00:02:49.120 --> 00:02:49.670 align:start position:0%
going to be wanting the product of
values

00:02:49.670 --> 00:02:49.680 align:start position:0%
values
 

00:02:49.680 --> 00:02:51.509 align:start position:0%
values
after<00:02:50.239><c> it</c><00:02:50.319><c> would</c><00:02:50.560><c> also</c><00:02:50.720><c> be</c><00:02:50.879><c> helpful</c><00:02:51.280><c> if</c><00:02:51.360><c> we</c>

00:02:51.509 --> 00:02:51.519 align:start position:0%
after it would also be helpful if we
 

00:02:51.519 --> 00:02:53.430 align:start position:0%
after it would also be helpful if we
computed<00:02:52.080><c> the</c><00:02:52.319><c> postfix</c>

00:02:53.430 --> 00:02:53.440 align:start position:0%
computed the postfix
 

00:02:53.440 --> 00:02:56.630 align:start position:0%
computed the postfix
product<00:02:54.239><c> of</c><00:02:54.480><c> every</c><00:02:54.720><c> single</c><00:02:55.040><c> position</c><00:02:55.840><c> in</c><00:02:56.319><c> the</c>

00:02:56.630 --> 00:02:56.640 align:start position:0%
product of every single position in the
 

00:02:56.640 --> 00:02:58.390 align:start position:0%
product of every single position in the
entire<00:02:57.120><c> input</c><00:02:57.440><c> array</c><00:02:57.760><c> right</c><00:02:57.920><c> and</c><00:02:58.080><c> we</c><00:02:58.239><c> can</c>

00:02:58.390 --> 00:02:58.400 align:start position:0%
entire input array right and we can
 

00:02:58.400 --> 00:02:59.910 align:start position:0%
entire input array right and we can
compute<00:02:58.879><c> both</c><00:02:59.200><c> of</c><00:02:59.360><c> these</c>

00:02:59.910 --> 00:02:59.920 align:start position:0%
compute both of these
 

00:02:59.920 --> 00:03:02.630 align:start position:0%
compute both of these
in<00:03:00.159><c> big</c><00:03:00.480><c> o</c><00:03:00.720><c> of</c><00:03:00.959><c> n</c><00:03:01.280><c> time</c><00:03:01.680><c> it's</c><00:03:01.840><c> a</c><00:03:01.920><c> pretty</c><00:03:02.239><c> simple</c>

00:03:02.630 --> 00:03:02.640 align:start position:0%
in big o of n time it's a pretty simple
 

00:03:02.640 --> 00:03:03.990 align:start position:0%
in big o of n time it's a pretty simple
algorithm<00:03:03.040><c> right</c><00:03:03.200><c> we</c><00:03:03.360><c> basically</c><00:03:03.680><c> start</c>

00:03:03.990 --> 00:03:04.000 align:start position:0%
algorithm right we basically start
 

00:03:04.000 --> 00:03:05.270 align:start position:0%
algorithm right we basically start
at<00:03:04.080><c> the</c><00:03:04.159><c> first</c><00:03:04.319><c> position</c><00:03:04.720><c> okay</c><00:03:04.959><c> this</c><00:03:05.120><c> is</c><00:03:05.200><c> going</c>

00:03:05.270 --> 00:03:05.280 align:start position:0%
at the first position okay this is going
 

00:03:05.280 --> 00:03:07.030 align:start position:0%
at the first position okay this is going
to<00:03:05.440><c> be</c><00:03:05.920><c> one</c><00:03:06.480><c> so</c>

00:03:07.030 --> 00:03:07.040 align:start position:0%
to be one so
 

00:03:07.040 --> 00:03:08.309 align:start position:0%
to be one so
if<00:03:07.120><c> we're</c><00:03:07.360><c> adding</c><00:03:07.599><c> this</c><00:03:07.760><c> value</c><00:03:08.000><c> we're</c><00:03:08.159><c> just</c>

00:03:08.309 --> 00:03:08.319 align:start position:0%
if we're adding this value we're just
 

00:03:08.319 --> 00:03:09.589 align:start position:0%
if we're adding this value we're just
going<00:03:08.400><c> to</c><00:03:08.480><c> take</c><00:03:08.640><c> the</c><00:03:08.720><c> previous</c><00:03:09.120><c> value</c><00:03:09.519><c> and</c>

00:03:09.589 --> 00:03:09.599 align:start position:0%
going to take the previous value and
 

00:03:09.599 --> 00:03:11.190 align:start position:0%
going to take the previous value and
multiply<00:03:10.080><c> it</c><00:03:10.159><c> by</c><00:03:10.400><c> two</c><00:03:10.560><c> so</c><00:03:10.720><c> this</c><00:03:10.879><c> is</c><00:03:10.959><c> going</c><00:03:11.120><c> to</c>

00:03:11.190 --> 00:03:11.200 align:start position:0%
multiply it by two so this is going to
 

00:03:11.200 --> 00:03:12.149 align:start position:0%
multiply it by two so this is going to
be<00:03:11.360><c> two</c>

00:03:12.149 --> 00:03:12.159 align:start position:0%
be two
 

00:03:12.159 --> 00:03:13.910 align:start position:0%
be two
similarly<00:03:12.640><c> we're</c><00:03:12.800><c> gonna</c><00:03:12.879><c> take</c><00:03:13.120><c> two</c><00:03:13.440><c> multiply</c>

00:03:13.910 --> 00:03:13.920 align:start position:0%
similarly we're gonna take two multiply
 

00:03:13.920 --> 00:03:16.149 align:start position:0%
similarly we're gonna take two multiply
it<00:03:14.000><c> by</c><00:03:14.239><c> three</c><00:03:14.640><c> we're</c><00:03:14.800><c> gonna</c><00:03:14.959><c> get</c><00:03:15.200><c> six</c><00:03:15.440><c> here</c>

00:03:16.149 --> 00:03:16.159 align:start position:0%
it by three we're gonna get six here
 

00:03:16.159 --> 00:03:18.149 align:start position:0%
it by three we're gonna get six here
four<00:03:16.640><c> multiply</c><00:03:17.120><c> it</c><00:03:17.200><c> by</c><00:03:17.519><c> six</c><00:03:17.920><c> we're</c><00:03:18.080><c> going</c><00:03:18.080><c> to</c>

00:03:18.149 --> 00:03:18.159 align:start position:0%
four multiply it by six we're going to
 

00:03:18.159 --> 00:03:19.270 align:start position:0%
four multiply it by six we're going to
get<00:03:18.319><c> 24</c><00:03:18.879><c> here</c>

00:03:19.270 --> 00:03:19.280 align:start position:0%
get 24 here
 

00:03:19.280 --> 00:03:21.110 align:start position:0%
get 24 here
and<00:03:19.519><c> for</c><00:03:19.760><c> post</c><00:03:20.159><c> fix</c><00:03:20.400><c> we're</c><00:03:20.640><c> basically</c><00:03:21.040><c> going</c>

00:03:21.110 --> 00:03:21.120 align:start position:0%
and for post fix we're basically going
 

00:03:21.120 --> 00:03:22.630 align:start position:0%
and for post fix we're basically going
to<00:03:21.200><c> do</c><00:03:21.360><c> the</c><00:03:21.440><c> exact</c><00:03:21.760><c> same</c><00:03:21.920><c> thing</c><00:03:22.080><c> and</c><00:03:22.159><c> do</c><00:03:22.319><c> it</c><00:03:22.400><c> in</c>

00:03:22.630 --> 00:03:22.640 align:start position:0%
to do the exact same thing and do it in
 

00:03:22.640 --> 00:03:24.710 align:start position:0%
to do the exact same thing and do it in
reverse<00:03:23.040><c> order</c><00:03:23.280><c> so</c><00:03:23.440><c> here</c><00:03:23.599><c> we</c><00:03:23.760><c> would</c><00:03:23.920><c> get</c><00:03:24.159><c> four</c>

00:03:24.710 --> 00:03:24.720 align:start position:0%
reverse order so here we would get four
 

00:03:24.720 --> 00:03:26.550 align:start position:0%
reverse order so here we would get four
here<00:03:24.959><c> we</c><00:03:25.040><c> would</c><00:03:25.200><c> get</c><00:03:25.519><c> three</c><00:03:25.760><c> times</c><00:03:26.080><c> four</c><00:03:26.400><c> here</c>

00:03:26.550 --> 00:03:26.560 align:start position:0%
here we would get three times four here
 

00:03:26.560 --> 00:03:28.630 align:start position:0%
here we would get three times four here
we<00:03:26.720><c> would</c><00:03:26.799><c> get</c><00:03:27.040><c> two</c><00:03:27.280><c> times</c><00:03:27.599><c> 12</c>

00:03:28.630 --> 00:03:28.640 align:start position:0%
we would get two times 12
 

00:03:28.640 --> 00:03:30.869 align:start position:0%
we would get two times 12
and<00:03:28.720><c> then</c><00:03:29.040><c> here</c><00:03:29.200><c> we</c><00:03:29.360><c> just</c><00:03:29.519><c> get</c><00:03:29.760><c> one</c><00:03:30.000><c> times</c><00:03:30.319><c> 24</c>

00:03:30.869 --> 00:03:30.879 align:start position:0%
and then here we just get one times 24
 

00:03:30.879 --> 00:03:33.270 align:start position:0%
and then here we just get one times 24
which<00:03:31.120><c> is</c><00:03:31.519><c> just</c><00:03:31.760><c> going</c><00:03:31.840><c> to</c><00:03:32.000><c> still</c><00:03:32.159><c> be</c><00:03:32.400><c> 24.</c>

00:03:33.270 --> 00:03:33.280 align:start position:0%
which is just going to still be 24.
 

00:03:33.280 --> 00:03:35.509 align:start position:0%
which is just going to still be 24.
now<00:03:33.519><c> for</c><00:03:33.680><c> every</c><00:03:33.920><c> single</c><00:03:34.159><c> values</c><00:03:34.720><c> for</c><00:03:34.879><c> example</c>

00:03:35.509 --> 00:03:35.519 align:start position:0%
now for every single values for example
 

00:03:35.519 --> 00:03:36.869 align:start position:0%
now for every single values for example
1<00:03:35.920><c> we</c><00:03:36.080><c> would</c><00:03:36.239><c> want</c>

00:03:36.869 --> 00:03:36.879 align:start position:0%
1 we would want
 

00:03:36.879 --> 00:03:39.589 align:start position:0%
1 we would want
the<00:03:37.120><c> prefix</c><00:03:37.760><c> of</c><00:03:38.159><c> every</c><00:03:38.480><c> value</c><00:03:38.799><c> before</c><00:03:39.280><c> it</c><00:03:39.360><c> now</c>

00:03:39.589 --> 00:03:39.599 align:start position:0%
the prefix of every value before it now
 

00:03:39.599 --> 00:03:39.990 align:start position:0%
the prefix of every value before it now
since

00:03:39.990 --> 00:03:40.000 align:start position:0%
since
 

00:03:40.000 --> 00:03:41.750 align:start position:0%
since
there<00:03:40.239><c> are</c><00:03:40.400><c> no</c><00:03:40.640><c> values</c><00:03:41.040><c> before</c><00:03:41.360><c> we</c><00:03:41.519><c> can</c><00:03:41.599><c> just</c>

00:03:41.750 --> 00:03:41.760 align:start position:0%
there are no values before we can just
 

00:03:41.760 --> 00:03:43.350 align:start position:0%
there are no values before we can just
say<00:03:42.000><c> okay</c><00:03:42.239><c> the</c><00:03:42.400><c> prefix</c><00:03:42.799><c> for</c><00:03:42.879><c> that</c><00:03:43.120><c> is</c><00:03:43.200><c> just</c>

00:03:43.350 --> 00:03:43.360 align:start position:0%
say okay the prefix for that is just
 

00:03:43.360 --> 00:03:45.509 align:start position:0%
say okay the prefix for that is just
going<00:03:43.440><c> to</c><00:03:43.519><c> be</c><00:03:43.599><c> a</c><00:03:43.680><c> default</c><00:03:44.080><c> value</c><00:03:44.560><c> of</c><00:03:44.799><c> 1</c><00:03:45.120><c> to</c><00:03:45.280><c> keep</c>

00:03:45.509 --> 00:03:45.519 align:start position:0%
going to be a default value of 1 to keep
 

00:03:45.519 --> 00:03:46.550 align:start position:0%
going to be a default value of 1 to keep
it<00:03:45.680><c> neutral</c>

00:03:46.550 --> 00:03:46.560 align:start position:0%
it neutral
 

00:03:46.560 --> 00:03:48.630 align:start position:0%
it neutral
and<00:03:46.720><c> so</c><00:03:46.959><c> we'd</c><00:03:47.200><c> also</c><00:03:47.440><c> want</c><00:03:47.599><c> the</c><00:03:47.760><c> postfix</c><00:03:48.480><c> of</c>

00:03:48.630 --> 00:03:48.640 align:start position:0%
and so we'd also want the postfix of
 

00:03:48.640 --> 00:03:50.309 align:start position:0%
and so we'd also want the postfix of
every<00:03:48.879><c> value</c><00:03:49.200><c> that</c><00:03:49.280><c> comes</c><00:03:49.599><c> after</c><00:03:50.000><c> it</c>

00:03:50.309 --> 00:03:50.319 align:start position:0%
every value that comes after it
 

00:03:50.319 --> 00:03:52.789 align:start position:0%
every value that comes after it
we<00:03:50.480><c> can</c><00:03:50.640><c> get</c><00:03:50.799><c> that</c><00:03:51.280><c> in</c><00:03:51.440><c> the</c><00:03:51.599><c> position</c><00:03:52.319><c> to</c><00:03:52.480><c> the</c>

00:03:52.789 --> 00:03:52.799 align:start position:0%
we can get that in the position to the
 

00:03:52.799 --> 00:03:53.350 align:start position:0%
we can get that in the position to the
right

00:03:53.350 --> 00:03:53.360 align:start position:0%
right
 

00:03:53.360 --> 00:03:55.350 align:start position:0%
right
of<00:03:53.680><c> 1.</c><00:03:54.159><c> so</c><00:03:54.319><c> we'd</c><00:03:54.480><c> want</c><00:03:54.640><c> to</c><00:03:54.720><c> multiply</c><00:03:55.120><c> those</c>

00:03:55.350 --> 00:03:55.360 align:start position:0%
of 1. so we'd want to multiply those
 

00:03:55.360 --> 00:03:58.070 align:start position:0%
of 1. so we'd want to multiply those
together<00:03:55.680><c> so</c><00:03:55.840><c> 1</c><00:03:56.080><c> times</c><00:03:56.400><c> 24.</c><00:03:57.040><c> so</c><00:03:57.200><c> in</c><00:03:57.280><c> the</c><00:03:57.439><c> output</c>

00:03:58.070 --> 00:03:58.080 align:start position:0%
together so 1 times 24. so in the output
 

00:03:58.080 --> 00:03:59.830 align:start position:0%
together so 1 times 24. so in the output
for<00:03:58.319><c> this</c><00:03:58.560><c> we</c><00:03:58.640><c> would</c><00:03:58.799><c> get</c><00:03:58.959><c> 24.</c><00:03:59.439><c> that</c><00:03:59.599><c> makes</c>

00:03:59.830 --> 00:03:59.840 align:start position:0%
for this we would get 24. that makes
 

00:03:59.840 --> 00:04:01.190 align:start position:0%
for this we would get 24. that makes
sense<00:04:00.159><c> because</c><00:04:00.319><c> if</c><00:04:00.480><c> you</c><00:04:00.560><c> multiply</c>

00:04:01.190 --> 00:04:01.200 align:start position:0%
sense because if you multiply
 

00:04:01.200 --> 00:04:03.509 align:start position:0%
sense because if you multiply
all<00:04:01.439><c> these</c><00:04:01.680><c> together</c><00:04:02.400><c> except</c><00:04:02.799><c> for</c><00:04:02.959><c> this</c><00:04:03.200><c> one</c>

00:04:03.509 --> 00:04:03.519 align:start position:0%
all these together except for this one
 

00:04:03.519 --> 00:04:05.750 align:start position:0%
all these together except for this one
we<00:04:03.760><c> do</c><00:04:03.920><c> get</c><00:04:04.159><c> 24</c><00:04:04.560><c> and</c><00:04:04.640><c> then</c><00:04:04.799><c> we</c><00:04:04.959><c> just</c><00:04:05.200><c> repeat</c><00:04:05.599><c> the</c>

00:04:05.750 --> 00:04:05.760 align:start position:0%
we do get 24 and then we just repeat the
 

00:04:05.760 --> 00:04:07.030 align:start position:0%
we do get 24 and then we just repeat the
exact<00:04:06.080><c> same</c><00:04:06.400><c> process</c>

00:04:07.030 --> 00:04:07.040 align:start position:0%
exact same process
 

00:04:07.040 --> 00:04:09.030 align:start position:0%
exact same process
for<00:04:07.200><c> every</c><00:04:07.439><c> value</c><00:04:07.760><c> so</c><00:04:08.000><c> over</c><00:04:08.239><c> here</c><00:04:08.640><c> we'd</c><00:04:08.879><c> want</c>

00:04:09.030 --> 00:04:09.040 align:start position:0%
for every value so over here we'd want
 

00:04:09.040 --> 00:04:10.949 align:start position:0%
for every value so over here we'd want
the<00:04:09.200><c> prefix</c><00:04:09.920><c> of</c><00:04:10.080><c> the</c><00:04:10.239><c> values</c><00:04:10.640><c> that</c><00:04:10.720><c> come</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
the prefix of the values that come
 

00:04:10.959 --> 00:04:11.589 align:start position:0%
the prefix of the values that come
before<00:04:11.360><c> it</c>

00:04:11.589 --> 00:04:11.599 align:start position:0%
before it
 

00:04:11.599 --> 00:04:13.750 align:start position:0%
before it
and<00:04:11.840><c> we'd</c><00:04:12.000><c> want</c><00:04:12.239><c> the</c><00:04:12.400><c> postfix</c><00:04:13.040><c> of</c><00:04:13.200><c> the</c><00:04:13.360><c> values</c>

00:04:13.750 --> 00:04:13.760 align:start position:0%
and we'd want the postfix of the values
 

00:04:13.760 --> 00:04:15.030 align:start position:0%
and we'd want the postfix of the values
that<00:04:13.920><c> come</c><00:04:14.319><c> after</c><00:04:14.720><c> it</c>

00:04:15.030 --> 00:04:15.040 align:start position:0%
that come after it
 

00:04:15.040 --> 00:04:17.270 align:start position:0%
that come after it
so<00:04:15.200><c> 1</c><00:04:15.519><c> times</c><00:04:15.840><c> 12</c><00:04:16.320><c> is</c><00:04:16.400><c> just</c><00:04:16.560><c> going</c><00:04:16.639><c> to</c><00:04:16.720><c> be</c><00:04:16.959><c> 12</c>

00:04:17.270 --> 00:04:17.280 align:start position:0%
so 1 times 12 is just going to be 12
 

00:04:17.280 --> 00:04:18.870 align:start position:0%
so 1 times 12 is just going to be 12
that's<00:04:17.519><c> going</c><00:04:17.600><c> to</c><00:04:17.680><c> be</c><00:04:17.759><c> the</c><00:04:17.919><c> output</c>

00:04:18.870 --> 00:04:18.880 align:start position:0%
that's going to be the output
 

00:04:18.880 --> 00:04:20.789 align:start position:0%
that's going to be the output
again<00:04:19.280><c> repeat</c><00:04:19.600><c> the</c><00:04:19.680><c> same</c><00:04:19.919><c> thing</c><00:04:20.079><c> for</c><00:04:20.239><c> here</c><00:04:20.639><c> the</c>

00:04:20.789 --> 00:04:20.799 align:start position:0%
again repeat the same thing for here the
 

00:04:20.799 --> 00:04:22.310 align:start position:0%
again repeat the same thing for here the
prefix<00:04:21.519><c> is</c><00:04:21.680><c> 2</c>

00:04:22.310 --> 00:04:22.320 align:start position:0%
prefix is 2
 

00:04:22.320 --> 00:04:24.790 align:start position:0%
prefix is 2
postfix<00:04:23.040><c> is</c><00:04:23.199><c> 4.</c><00:04:23.680><c> we're</c><00:04:23.840><c> going</c><00:04:23.919><c> to</c><00:04:24.000><c> get</c><00:04:24.240><c> 8</c><00:04:24.639><c> as</c>

00:04:24.790 --> 00:04:24.800 align:start position:0%
postfix is 4. we're going to get 8 as
 

00:04:24.800 --> 00:04:26.390 align:start position:0%
postfix is 4. we're going to get 8 as
the<00:04:24.960><c> output</c><00:04:25.280><c> that</c><00:04:25.440><c> makes</c><00:04:25.680><c> sense</c><00:04:26.000><c> if</c><00:04:26.080><c> you</c><00:04:26.160><c> take</c>

00:04:26.390 --> 00:04:26.400 align:start position:0%
the output that makes sense if you take
 

00:04:26.400 --> 00:04:27.670 align:start position:0%
the output that makes sense if you take
24

00:04:27.670 --> 00:04:27.680 align:start position:0%
24
 

00:04:27.680 --> 00:04:29.510 align:start position:0%
24
if<00:04:27.840><c> you</c><00:04:27.919><c> take</c><00:04:28.160><c> every</c><00:04:28.400><c> value</c><00:04:28.720><c> in</c><00:04:28.800><c> here</c><00:04:29.120><c> multiply</c>

00:04:29.510 --> 00:04:29.520 align:start position:0%
if you take every value in here multiply
 

00:04:29.520 --> 00:04:31.670 align:start position:0%
if you take every value in here multiply
it<00:04:29.600><c> except</c><00:04:29.919><c> for</c><00:04:30.160><c> three</c><00:04:30.400><c> we</c><00:04:30.560><c> do</c><00:04:30.800><c> get</c><00:04:31.040><c> eight</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
it except for three we do get eight
 

00:04:31.680 --> 00:04:33.670 align:start position:0%
it except for three we do get eight
and<00:04:31.919><c> similarly</c><00:04:32.479><c> for</c><00:04:32.720><c> this</c><00:04:32.880><c> four</c><00:04:33.199><c> we'd</c><00:04:33.440><c> want</c>

00:04:33.670 --> 00:04:33.680 align:start position:0%
and similarly for this four we'd want
 

00:04:33.680 --> 00:04:36.230 align:start position:0%
and similarly for this four we'd want
the<00:04:33.840><c> prefix</c><00:04:34.560><c> six</c><00:04:34.960><c> and</c><00:04:35.120><c> the</c><00:04:35.280><c> postfix</c><00:04:35.840><c> there</c><00:04:36.080><c> are</c>

00:04:36.230 --> 00:04:36.240 align:start position:0%
the prefix six and the postfix there are
 

00:04:36.240 --> 00:04:36.710 align:start position:0%
the prefix six and the postfix there are
no

00:04:36.710 --> 00:04:36.720 align:start position:0%
no
 

00:04:36.720 --> 00:04:38.550 align:start position:0%
no
so<00:04:36.960><c> we</c><00:04:37.280><c> just</c><00:04:37.520><c> assume</c><00:04:37.759><c> that</c><00:04:37.919><c> there's</c><00:04:38.080><c> a</c><00:04:38.240><c> one</c>

00:04:38.550 --> 00:04:38.560 align:start position:0%
so we just assume that there's a one
 

00:04:38.560 --> 00:04:40.230 align:start position:0%
so we just assume that there's a one
over<00:04:38.800><c> here</c><00:04:38.960><c> so</c><00:04:39.199><c> six</c><00:04:39.440><c> times</c><00:04:39.759><c> one</c>

00:04:40.230 --> 00:04:40.240 align:start position:0%
over here so six times one
 

00:04:40.240 --> 00:04:42.070 align:start position:0%
over here so six times one
this<00:04:40.479><c> would</c><00:04:40.639><c> be</c><00:04:40.720><c> the</c><00:04:40.880><c> output</c><00:04:41.360><c> so</c><00:04:41.600><c> this</c><00:04:41.840><c> is</c><00:04:42.000><c> a</c>

00:04:42.070 --> 00:04:42.080 align:start position:0%
this would be the output so this is a
 

00:04:42.080 --> 00:04:44.469 align:start position:0%
this would be the output so this is a
very<00:04:42.479><c> valid</c><00:04:42.880><c> solution</c><00:04:43.280><c> this</c><00:04:43.520><c> is</c><00:04:43.680><c> a</c><00:04:43.759><c> big</c><00:04:44.000><c> of</c><00:04:44.320><c> n</c>

00:04:44.469 --> 00:04:44.479 align:start position:0%
very valid solution this is a big of n
 

00:04:44.479 --> 00:04:46.150 align:start position:0%
very valid solution this is a big of n
time<00:04:44.800><c> solution</c><00:04:45.199><c> we're</c><00:04:45.360><c> not</c><00:04:45.600><c> using</c><00:04:45.919><c> any</c>

00:04:46.150 --> 00:04:46.160 align:start position:0%
time solution we're not using any
 

00:04:46.160 --> 00:04:47.350 align:start position:0%
time solution we're not using any
division<00:04:46.639><c> operator</c>

00:04:47.350 --> 00:04:47.360 align:start position:0%
division operator
 

00:04:47.360 --> 00:04:49.510 align:start position:0%
division operator
but<00:04:47.520><c> the</c><00:04:47.680><c> downside</c><00:04:48.240><c> is</c><00:04:48.320><c> this</c><00:04:48.560><c> is</c><00:04:48.720><c> also</c><00:04:49.040><c> big</c><00:04:49.280><c> o</c>

00:04:49.510 --> 00:04:49.520 align:start position:0%
but the downside is this is also big o
 

00:04:49.520 --> 00:04:50.790 align:start position:0%
but the downside is this is also big o
of<00:04:49.759><c> n</c><00:04:50.160><c> memory</c>

00:04:50.790 --> 00:04:50.800 align:start position:0%
of n memory
 

00:04:50.800 --> 00:04:53.110 align:start position:0%
of n memory
but<00:04:51.040><c> we</c><00:04:51.199><c> can</c><00:04:51.600><c> actually</c><00:04:52.160><c> use</c><00:04:52.479><c> this</c><00:04:52.720><c> idea</c>

00:04:53.110 --> 00:04:53.120 align:start position:0%
but we can actually use this idea
 

00:04:53.120 --> 00:04:54.790 align:start position:0%
but we can actually use this idea
because<00:04:53.440><c> what</c><00:04:53.600><c> they</c><00:04:53.840><c> tell</c><00:04:54.000><c> us</c><00:04:54.240><c> is</c><00:04:54.320><c> the</c><00:04:54.479><c> output</c>

00:04:54.790 --> 00:04:54.800 align:start position:0%
because what they tell us is the output
 

00:04:54.800 --> 00:04:55.990 align:start position:0%
because what they tell us is the output
array<00:04:55.120><c> does</c><00:04:55.360><c> not</c><00:04:55.600><c> count</c>

00:04:55.990 --> 00:04:56.000 align:start position:0%
array does not count
 

00:04:56.000 --> 00:04:58.390 align:start position:0%
array does not count
as<00:04:56.400><c> extra</c><00:04:56.880><c> memory</c><00:04:57.280><c> so</c><00:04:57.440><c> we</c><00:04:57.680><c> actually</c><00:04:58.000><c> don't</c>

00:04:58.390 --> 00:04:58.400 align:start position:0%
as extra memory so we actually don't
 

00:04:58.400 --> 00:04:59.430 align:start position:0%
as extra memory so we actually don't
need<00:04:58.880><c> these</c>

00:04:59.430 --> 00:04:59.440 align:start position:0%
need these
 

00:04:59.440 --> 00:05:02.390 align:start position:0%
need these
prefix<00:05:00.000><c> and</c><00:05:00.160><c> postfix</c><00:05:00.800><c> arrays</c><00:05:01.680><c> because</c><00:05:02.000><c> we</c><00:05:02.160><c> can</c>

00:05:02.390 --> 00:05:02.400 align:start position:0%
prefix and postfix arrays because we can
 

00:05:02.400 --> 00:05:03.430 align:start position:0%
prefix and postfix arrays because we can
compute<00:05:02.960><c> these</c>

00:05:03.430 --> 00:05:03.440 align:start position:0%
compute these
 

00:05:03.440 --> 00:05:05.830 align:start position:0%
compute these
and<00:05:04.000><c> we</c><00:05:04.160><c> can</c><00:05:04.320><c> compute</c><00:05:04.800><c> these</c><00:05:05.120><c> prefixes</c><00:05:05.759><c> and</c>

00:05:05.830 --> 00:05:05.840 align:start position:0%
and we can compute these prefixes and
 

00:05:05.840 --> 00:05:06.790 align:start position:0%
and we can compute these prefixes and
postfixes

00:05:06.790 --> 00:05:06.800 align:start position:0%
postfixes
 

00:05:06.800 --> 00:05:09.670 align:start position:0%
postfixes
and<00:05:06.880><c> then</c><00:05:07.199><c> store</c><00:05:07.520><c> them</c><00:05:07.840><c> in</c><00:05:08.160><c> our</c><00:05:08.479><c> output</c><00:05:08.880><c> array</c>

00:05:09.670 --> 00:05:09.680 align:start position:0%
and then store them in our output array
 

00:05:09.680 --> 00:05:10.629 align:start position:0%
and then store them in our output array
and

00:05:10.629 --> 00:05:10.639 align:start position:0%
and
 

00:05:10.639 --> 00:05:12.950 align:start position:0%
and
that<00:05:10.960><c> is</c><00:05:11.120><c> going</c><00:05:11.280><c> to</c><00:05:11.440><c> end</c><00:05:11.600><c> up</c><00:05:11.759><c> making</c><00:05:12.080><c> things</c>

00:05:12.950 --> 00:05:12.960 align:start position:0%
that is going to end up making things
 

00:05:12.960 --> 00:05:14.230 align:start position:0%
that is going to end up making things
easier<00:05:13.280><c> for</c><00:05:13.440><c> us</c><00:05:13.600><c> because</c><00:05:13.759><c> we're</c><00:05:13.919><c> not</c><00:05:14.080><c> going</c><00:05:14.160><c> to</c>

00:05:14.230 --> 00:05:14.240 align:start position:0%
easier for us because we're not going to
 

00:05:14.240 --> 00:05:16.870 align:start position:0%
easier for us because we're not going to
have<00:05:14.320><c> to</c><00:05:14.479><c> use</c><00:05:14.800><c> this</c><00:05:15.120><c> extra</c><00:05:15.600><c> postfix</c><00:05:16.160><c> prefix</c>

00:05:16.870 --> 00:05:16.880 align:start position:0%
have to use this extra postfix prefix
 

00:05:16.880 --> 00:05:18.790 align:start position:0%
have to use this extra postfix prefix
memory<00:05:17.680><c> so</c><00:05:17.840><c> what</c><00:05:18.000><c> we're</c><00:05:18.160><c> going</c><00:05:18.240><c> to</c><00:05:18.400><c> do</c><00:05:18.639><c> is</c>

00:05:18.790 --> 00:05:18.800 align:start position:0%
memory so what we're going to do is
 

00:05:18.800 --> 00:05:20.710 align:start position:0%
memory so what we're going to do is
we're<00:05:18.960><c> going</c><00:05:19.039><c> to</c><00:05:19.120><c> do</c><00:05:19.360><c> two</c><00:05:19.759><c> passes</c><00:05:20.320><c> on</c><00:05:20.560><c> our</c>

00:05:20.710 --> 00:05:20.720 align:start position:0%
we're going to do two passes on our
 

00:05:20.720 --> 00:05:21.990 align:start position:0%
we're going to do two passes on our
input<00:05:21.120><c> array</c><00:05:21.520><c> nums</c>

00:05:21.990 --> 00:05:22.000 align:start position:0%
input array nums
 

00:05:22.000 --> 00:05:22.950 align:start position:0%
input array nums
first<00:05:22.320><c> we're</c><00:05:22.479><c> going</c><00:05:22.560><c> to</c><00:05:22.639><c> start</c><00:05:22.800><c> at</c><00:05:22.880><c> the</c>

00:05:22.950 --> 00:05:22.960 align:start position:0%
first we're going to start at the
 

00:05:22.960 --> 00:05:24.710 align:start position:0%
first we're going to start at the
beginning<00:05:23.360><c> and</c><00:05:23.440><c> then</c><00:05:23.600><c> go</c><00:05:23.919><c> all</c><00:05:24.080><c> the</c><00:05:24.160><c> way</c><00:05:24.320><c> to</c><00:05:24.479><c> the</c>

00:05:24.710 --> 00:05:24.720 align:start position:0%
beginning and then go all the way to the
 

00:05:24.720 --> 00:05:25.189 align:start position:0%
beginning and then go all the way to the
end

00:05:25.189 --> 00:05:25.199 align:start position:0%
end
 

00:05:25.199 --> 00:05:27.749 align:start position:0%
end
basically<00:05:25.680><c> computing</c><00:05:26.240><c> every</c><00:05:26.479><c> single</c><00:05:26.880><c> prefix</c>

00:05:27.749 --> 00:05:27.759 align:start position:0%
basically computing every single prefix
 

00:05:27.759 --> 00:05:30.150 align:start position:0%
basically computing every single prefix
for<00:05:28.000><c> the</c><00:05:28.240><c> input</c><00:05:28.479><c> array</c><00:05:28.800><c> and</c><00:05:28.880><c> then</c><00:05:29.120><c> storing</c>

00:05:30.150 --> 00:05:30.160 align:start position:0%
for the input array and then storing
 

00:05:30.160 --> 00:05:32.310 align:start position:0%
for the input array and then storing
the<00:05:30.320><c> prefix</c><00:05:30.800><c> so</c><00:05:30.960><c> for</c><00:05:31.120><c> example</c><00:05:31.360><c> the</c><00:05:31.520><c> prefix</c><00:05:32.080><c> of</c>

00:05:32.310 --> 00:05:32.320 align:start position:0%
the prefix so for example the prefix of
 

00:05:32.320 --> 00:05:34.310 align:start position:0%
the prefix so for example the prefix of
this<00:05:33.039><c> is</c><00:05:33.199><c> going</c><00:05:33.360><c> to</c><00:05:33.440><c> be</c><00:05:33.680><c> stored</c>

00:05:34.310 --> 00:05:34.320 align:start position:0%
this is going to be stored
 

00:05:34.320 --> 00:05:37.749 align:start position:0%
this is going to be stored
over<00:05:34.880><c> here</c><00:05:35.680><c> right</c><00:05:36.080><c> because</c><00:05:36.639><c> that</c><00:05:37.120><c> that</c><00:05:37.280><c> prefix</c>

00:05:37.749 --> 00:05:37.759 align:start position:0%
over here right because that that prefix
 

00:05:37.759 --> 00:05:39.029 align:start position:0%
over here right because that that prefix
is<00:05:37.919><c> needed</c><00:05:38.240><c> to</c><00:05:38.320><c> compute</c>

00:05:39.029 --> 00:05:39.039 align:start position:0%
is needed to compute
 

00:05:39.039 --> 00:05:41.749 align:start position:0%
is needed to compute
uh<00:05:39.360><c> the</c><00:05:39.520><c> result</c><00:05:39.919><c> for</c><00:05:40.160><c> this</c><00:05:40.400><c> position</c><00:05:41.280><c> and</c><00:05:41.520><c> so</c>

00:05:41.749 --> 00:05:41.759 align:start position:0%
uh the result for this position and so
 

00:05:41.759 --> 00:05:43.189 align:start position:0%
uh the result for this position and so
at<00:05:41.919><c> that</c><00:05:42.160><c> point</c><00:05:42.400><c> what</c><00:05:42.560><c> we're</c><00:05:42.720><c> going</c><00:05:42.800><c> to</c><00:05:42.880><c> say</c><00:05:43.039><c> is</c>

00:05:43.189 --> 00:05:43.199 align:start position:0%
at that point what we're going to say is
 

00:05:43.199 --> 00:05:44.710 align:start position:0%
at that point what we're going to say is
every<00:05:43.520><c> prefix</c><00:05:44.080><c> is</c><00:05:44.160><c> going</c><00:05:44.320><c> to</c><00:05:44.400><c> be</c>

00:05:44.710 --> 00:05:44.720 align:start position:0%
every prefix is going to be
 

00:05:44.720 --> 00:05:47.350 align:start position:0%
every prefix is going to be
in<00:05:44.880><c> the</c><00:05:45.199><c> output</c><00:05:45.680><c> basically</c><00:05:46.479><c> the</c><00:05:46.639><c> prefix</c><00:05:47.120><c> over</c>

00:05:47.350 --> 00:05:47.360 align:start position:0%
in the output basically the prefix over
 

00:05:47.360 --> 00:05:48.790 align:start position:0%
in the output basically the prefix over
here<00:05:47.600><c> is</c><00:05:47.759><c> going</c><00:05:47.919><c> to</c><00:05:48.000><c> be</c><00:05:48.160><c> stored</c>

00:05:48.790 --> 00:05:48.800 align:start position:0%
here is going to be stored
 

00:05:48.800 --> 00:05:50.469 align:start position:0%
here is going to be stored
in<00:05:49.039><c> the</c><00:05:49.199><c> second</c><00:05:49.440><c> position</c><00:05:49.759><c> the</c><00:05:49.919><c> prefix</c><00:05:50.320><c> over</c>

00:05:50.469 --> 00:05:50.479 align:start position:0%
in the second position the prefix over
 

00:05:50.479 --> 00:05:52.070 align:start position:0%
in the second position the prefix over
here<00:05:50.720><c> is</c><00:05:50.800><c> going</c><00:05:50.880><c> to</c><00:05:50.960><c> be</c><00:05:51.120><c> stored</c><00:05:51.520><c> here</c><00:05:51.919><c> the</c>

00:05:52.070 --> 00:05:52.080 align:start position:0%
here is going to be stored here the
 

00:05:52.080 --> 00:05:53.990 align:start position:0%
here is going to be stored here the
prefix<00:05:52.560><c> from</c><00:05:52.800><c> this</c><00:05:53.039><c> is</c><00:05:53.199><c> going</c><00:05:53.280><c> to</c><00:05:53.360><c> be</c><00:05:53.440><c> stored</c>

00:05:53.990 --> 00:05:54.000 align:start position:0%
prefix from this is going to be stored
 

00:05:54.000 --> 00:05:56.230 align:start position:0%
prefix from this is going to be stored
here<00:05:54.720><c> and</c><00:05:54.960><c> remember</c><00:05:55.360><c> how</c><00:05:55.520><c> for</c><00:05:55.759><c> the</c><00:05:55.919><c> first</c>

00:05:56.230 --> 00:05:56.240 align:start position:0%
here and remember how for the first
 

00:05:56.240 --> 00:05:57.909 align:start position:0%
here and remember how for the first
position<00:05:56.639><c> there</c><00:05:56.800><c> is</c><00:05:56.960><c> no</c><00:05:57.199><c> prefix</c><00:05:57.600><c> so</c><00:05:57.759><c> we're</c>

00:05:57.909 --> 00:05:57.919 align:start position:0%
position there is no prefix so we're
 

00:05:57.919 --> 00:06:00.230 align:start position:0%
position there is no prefix so we're
going<00:05:58.000><c> to</c><00:05:58.080><c> put</c><00:05:58.240><c> a</c><00:05:58.319><c> default</c><00:05:58.800><c> value</c><00:05:59.280><c> of</c><00:05:59.520><c> 1</c><00:05:59.919><c> over</c>

00:06:00.230 --> 00:06:00.240 align:start position:0%
going to put a default value of 1 over
 

00:06:00.240 --> 00:06:00.950 align:start position:0%
going to put a default value of 1 over
here

00:06:00.950 --> 00:06:00.960 align:start position:0%
here
 

00:06:00.960 --> 00:06:03.110 align:start position:0%
here
and<00:06:01.120><c> then</c><00:06:01.520><c> after</c><00:06:01.919><c> that</c><00:06:02.400><c> we're</c><00:06:02.560><c> going</c><00:06:02.639><c> to</c><00:06:02.720><c> do</c><00:06:02.960><c> a</c>

00:06:03.110 --> 00:06:03.120 align:start position:0%
and then after that we're going to do a
 

00:06:03.120 --> 00:06:04.950 align:start position:0%
and then after that we're going to do a
pass<00:06:03.440><c> going</c><00:06:03.680><c> from</c><00:06:03.840><c> the</c><00:06:04.080><c> end</c><00:06:04.240><c> to</c><00:06:04.400><c> the</c><00:06:04.479><c> beginning</c>

00:06:04.950 --> 00:06:04.960 align:start position:0%
pass going from the end to the beginning
 

00:06:04.960 --> 00:06:07.350 align:start position:0%
pass going from the end to the beginning
computing<00:06:05.440><c> every</c><00:06:05.919><c> post</c><00:06:06.400><c> fix</c><00:06:06.639><c> so</c><00:06:06.800><c> for</c><00:06:06.960><c> example</c>

00:06:07.350 --> 00:06:07.360 align:start position:0%
computing every post fix so for example
 

00:06:07.360 --> 00:06:08.629 align:start position:0%
computing every post fix so for example
this<00:06:07.600><c> post</c><00:06:07.919><c> fix</c>

00:06:08.629 --> 00:06:08.639 align:start position:0%
this post fix
 

00:06:08.639 --> 00:06:10.469 align:start position:0%
this post fix
and<00:06:08.720><c> then</c><00:06:08.960><c> in</c><00:06:09.039><c> the</c><00:06:09.280><c> result</c><00:06:09.840><c> we're</c><00:06:10.160><c> already</c>

00:06:10.469 --> 00:06:10.479 align:start position:0%
and then in the result we're already
 

00:06:10.479 --> 00:06:12.309 align:start position:0%
and then in the result we're already
going<00:06:10.639><c> to</c><00:06:10.720><c> have</c><00:06:10.880><c> the</c><00:06:11.039><c> prefix</c><00:06:11.600><c> stored</c><00:06:12.000><c> over</c>

00:06:12.309 --> 00:06:12.319 align:start position:0%
going to have the prefix stored over
 

00:06:12.319 --> 00:06:13.350 align:start position:0%
going to have the prefix stored over
here

00:06:13.350 --> 00:06:13.360 align:start position:0%
here
 

00:06:13.360 --> 00:06:15.830 align:start position:0%
here
this<00:06:13.680><c> prefix</c><00:06:14.240><c> right</c><00:06:14.479><c> the</c><00:06:14.880><c> first</c><00:06:15.199><c> two</c><00:06:15.360><c> values</c>

00:06:15.830 --> 00:06:15.840 align:start position:0%
this prefix right the first two values
 

00:06:15.840 --> 00:06:17.270 align:start position:0%
this prefix right the first two values
is<00:06:15.919><c> going</c><00:06:16.000><c> to</c><00:06:16.080><c> be</c><00:06:16.240><c> stored</c><00:06:16.479><c> over</c><00:06:16.720><c> here</c><00:06:16.960><c> so</c><00:06:17.120><c> what</c>

00:06:17.270 --> 00:06:17.280 align:start position:0%
is going to be stored over here so what
 

00:06:17.280 --> 00:06:18.550 align:start position:0%
is going to be stored over here so what
we're<00:06:17.360><c> going</c><00:06:17.440><c> to</c><00:06:17.520><c> do</c><00:06:17.680><c> is</c><00:06:17.840><c> we're</c><00:06:18.000><c> going</c><00:06:18.080><c> to</c><00:06:18.160><c> take</c>

00:06:18.550 --> 00:06:18.560 align:start position:0%
we're going to do is we're going to take
 

00:06:18.560 --> 00:06:21.990 align:start position:0%
we're going to do is we're going to take
this<00:06:18.960><c> prefix</c><00:06:19.840><c> and</c><00:06:20.240><c> multiply</c><00:06:20.880><c> it</c><00:06:21.360><c> by</c><00:06:21.520><c> whatever</c>

00:06:21.990 --> 00:06:22.000 align:start position:0%
this prefix and multiply it by whatever
 

00:06:22.000 --> 00:06:23.350 align:start position:0%
this prefix and multiply it by whatever
is<00:06:22.240><c> in</c><00:06:22.479><c> this</c><00:06:22.720><c> position</c>

00:06:23.350 --> 00:06:23.360 align:start position:0%
is in this position
 

00:06:23.360 --> 00:06:24.390 align:start position:0%
is in this position
that's<00:06:23.600><c> what's</c><00:06:23.840><c> going</c><00:06:23.919><c> to</c><00:06:24.000><c> give</c><00:06:24.160><c> us</c><00:06:24.240><c> the</c>

00:06:24.390 --> 00:06:24.400 align:start position:0%
that's what's going to give us the
 

00:06:24.400 --> 00:06:26.790 align:start position:0%
that's what's going to give us the
result<00:06:24.800><c> that</c><00:06:24.880><c> we</c><00:06:25.120><c> want</c><00:06:25.440><c> for</c><00:06:25.680><c> this</c><00:06:25.919><c> position</c>

00:06:26.790 --> 00:06:26.800 align:start position:0%
result that we want for this position
 

00:06:26.800 --> 00:06:29.670 align:start position:0%
result that we want for this position
so<00:06:26.960><c> let's</c><00:06:27.199><c> start</c><00:06:27.520><c> off</c><00:06:27.840><c> so</c><00:06:28.400><c> so</c><00:06:28.639><c> far</c><00:06:28.960><c> the</c><00:06:29.120><c> prefix</c>

00:06:29.670 --> 00:06:29.680 align:start position:0%
so let's start off so so far the prefix
 

00:06:29.680 --> 00:06:30.710 align:start position:0%
so let's start off so so far the prefix
that<00:06:29.840><c> we're</c><00:06:30.000><c> going</c><00:06:30.160><c> to</c><00:06:30.240><c> be</c>

00:06:30.710 --> 00:06:30.720 align:start position:0%
that we're going to be
 

00:06:30.720 --> 00:06:32.550 align:start position:0%
that we're going to be
at<00:06:31.039><c> is</c><00:06:31.199><c> just</c><00:06:31.360><c> going</c><00:06:31.440><c> to</c><00:06:31.520><c> be</c><00:06:31.680><c> the</c><00:06:31.759><c> default</c><00:06:32.400><c> the</c>

00:06:32.550 --> 00:06:32.560 align:start position:0%
at is just going to be the default the
 

00:06:32.560 --> 00:06:34.230 align:start position:0%
at is just going to be the default the
default<00:06:32.960><c> value</c><00:06:33.360><c> of</c><00:06:33.520><c> one</c><00:06:33.759><c> so</c><00:06:33.919><c> we're</c><00:06:34.080><c> going</c><00:06:34.160><c> to</c>

00:06:34.230 --> 00:06:34.240 align:start position:0%
default value of one so we're going to
 

00:06:34.240 --> 00:06:35.670 align:start position:0%
default value of one so we're going to
put<00:06:34.479><c> a</c><00:06:34.639><c> one</c><00:06:34.960><c> over</c><00:06:35.280><c> here</c>

00:06:35.670 --> 00:06:35.680 align:start position:0%
put a one over here
 

00:06:35.680 --> 00:06:37.430 align:start position:0%
put a one over here
then<00:06:35.919><c> we're</c><00:06:36.080><c> going</c><00:06:36.160><c> to</c><00:06:36.319><c> multiply</c><00:06:36.880><c> it</c><00:06:36.960><c> by</c><00:06:37.199><c> what</c>

00:06:37.430 --> 00:06:37.440 align:start position:0%
then we're going to multiply it by what
 

00:06:37.440 --> 00:06:38.710 align:start position:0%
then we're going to multiply it by what
value<00:06:37.759><c> comes</c><00:06:38.080><c> over</c><00:06:38.319><c> here</c>

00:06:38.710 --> 00:06:38.720 align:start position:0%
value comes over here
 

00:06:38.720 --> 00:06:40.629 align:start position:0%
value comes over here
one<00:06:38.960><c> times</c><00:06:39.280><c> one</c><00:06:39.520><c> is</c><00:06:39.600><c> going</c><00:06:39.680><c> to</c><00:06:39.840><c> stay</c><00:06:40.240><c> one</c><00:06:40.479><c> so</c>

00:06:40.629 --> 00:06:40.639 align:start position:0%
one times one is going to stay one so
 

00:06:40.639 --> 00:06:42.390 align:start position:0%
one times one is going to stay one so
we're<00:06:40.800><c> going</c><00:06:40.880><c> to</c><00:06:40.960><c> leave</c><00:06:41.199><c> our</c><00:06:41.280><c> prefix</c><00:06:41.840><c> as</c><00:06:42.080><c> it</c>

00:06:42.390 --> 00:06:42.400 align:start position:0%
we're going to leave our prefix as it
 

00:06:42.400 --> 00:06:44.150 align:start position:0%
we're going to leave our prefix as it
is<00:06:43.039><c> now</c><00:06:43.199><c> we're</c><00:06:43.360><c> going</c><00:06:43.440><c> to</c><00:06:43.520><c> be</c><00:06:43.600><c> at</c><00:06:43.680><c> the</c><00:06:43.840><c> second</c>

00:06:44.150 --> 00:06:44.160 align:start position:0%
is now we're going to be at the second
 

00:06:44.160 --> 00:06:45.670 align:start position:0%
is now we're going to be at the second
position<00:06:44.639><c> so</c><00:06:44.800><c> what</c><00:06:44.960><c> we're</c><00:06:45.120><c> going</c><00:06:45.199><c> to</c><00:06:45.280><c> do</c><00:06:45.520><c> is</c>

00:06:45.670 --> 00:06:45.680 align:start position:0%
position so what we're going to do is
 

00:06:45.680 --> 00:06:46.950 align:start position:0%
position so what we're going to do is
take<00:06:45.919><c> our</c><00:06:46.160><c> prefix</c>

00:06:46.950 --> 00:06:46.960 align:start position:0%
take our prefix
 

00:06:46.960 --> 00:06:48.710 align:start position:0%
take our prefix
of<00:06:47.360><c> which</c><00:06:47.600><c> it</c><00:06:47.759><c> basically</c><00:06:48.160><c> tells</c><00:06:48.400><c> us</c><00:06:48.560><c> the</c>

00:06:48.710 --> 00:06:48.720 align:start position:0%
of which it basically tells us the
 

00:06:48.720 --> 00:06:50.390 align:start position:0%
of which it basically tells us the
prefix<00:06:49.199><c> up</c><00:06:49.360><c> until</c><00:06:49.680><c> this</c><00:06:49.919><c> point</c><00:06:50.160><c> we're</c><00:06:50.319><c> going</c>

00:06:50.390 --> 00:06:50.400 align:start position:0%
prefix up until this point we're going
 

00:06:50.400 --> 00:06:51.990 align:start position:0%
prefix up until this point we're going
to<00:06:50.560><c> take</c><00:06:50.800><c> that</c><00:06:50.960><c> and</c><00:06:51.120><c> then</c><00:06:51.360><c> put</c><00:06:51.520><c> it</c><00:06:51.680><c> in</c><00:06:51.840><c> the</c>

00:06:51.990 --> 00:06:52.000 align:start position:0%
to take that and then put it in the
 

00:06:52.000 --> 00:06:52.710 align:start position:0%
to take that and then put it in the
output

00:06:52.710 --> 00:06:52.720 align:start position:0%
output
 

00:06:52.720 --> 00:06:54.390 align:start position:0%
output
so<00:06:52.960><c> 1</c><00:06:53.199><c> is</c><00:06:53.280><c> going</c><00:06:53.360><c> to</c><00:06:53.440><c> be</c><00:06:53.599><c> here</c><00:06:53.840><c> and</c><00:06:54.000><c> then</c><00:06:54.240><c> we're</c>

00:06:54.390 --> 00:06:54.400 align:start position:0%
so 1 is going to be here and then we're
 

00:06:54.400 --> 00:06:56.070 align:start position:0%
so 1 is going to be here and then we're
going<00:06:54.560><c> to</c><00:06:54.639><c> take</c><00:06:54.800><c> the</c><00:06:54.960><c> value</c><00:06:55.280><c> that</c><00:06:55.360><c> we</c><00:06:55.520><c> just</c>

00:06:56.070 --> 00:06:56.080 align:start position:0%
going to take the value that we just
 

00:06:56.080 --> 00:06:58.710 align:start position:0%
going to take the value that we just
reached<00:06:56.720><c> multiply</c><00:06:57.440><c> by</c><00:06:57.680><c> the</c><00:06:57.840><c> prefix</c><00:06:58.400><c> so</c><00:06:58.560><c> now</c>

00:06:58.710 --> 00:06:58.720 align:start position:0%
reached multiply by the prefix so now
 

00:06:58.720 --> 00:07:00.150 align:start position:0%
reached multiply by the prefix so now
the<00:06:58.880><c> prefix</c><00:06:59.360><c> is</c><00:06:59.520><c> going</c><00:06:59.680><c> to</c><00:06:59.840><c> be</c>

00:07:00.150 --> 00:07:00.160 align:start position:0%
the prefix is going to be
 

00:07:00.160 --> 00:07:02.710 align:start position:0%
the prefix is going to be
a<00:07:00.479><c> 2.</c><00:07:01.280><c> so</c><00:07:01.440><c> now</c><00:07:01.840><c> we're</c><00:07:02.000><c> going</c><00:07:02.080><c> to</c><00:07:02.160><c> be</c><00:07:02.319><c> at</c><00:07:02.479><c> the</c>

00:07:02.710 --> 00:07:02.720 align:start position:0%
a 2. so now we're going to be at the
 

00:07:02.720 --> 00:07:04.070 align:start position:0%
a 2. so now we're going to be at the
third<00:07:03.039><c> position</c><00:07:03.440><c> so</c><00:07:03.599><c> what</c><00:07:03.680><c> we're</c><00:07:03.840><c> going</c><00:07:03.919><c> to</c><00:07:04.000><c> do</c>

00:07:04.070 --> 00:07:04.080 align:start position:0%
third position so what we're going to do
 

00:07:04.080 --> 00:07:05.670 align:start position:0%
third position so what we're going to do
is<00:07:04.240><c> take</c><00:07:04.479><c> our</c><00:07:04.560><c> prefix</c><00:07:05.120><c> up</c><00:07:05.280><c> until</c>

00:07:05.670 --> 00:07:05.680 align:start position:0%
is take our prefix up until
 

00:07:05.680 --> 00:07:07.830 align:start position:0%
is take our prefix up until
this<00:07:05.919><c> point</c><00:07:06.240><c> and</c><00:07:06.319><c> go</c><00:07:06.479><c> ahead</c><00:07:06.800><c> and</c><00:07:06.960><c> put</c><00:07:07.199><c> it</c><00:07:07.680><c> in</c>

00:07:07.830 --> 00:07:07.840 align:start position:0%
this point and go ahead and put it in
 

00:07:07.840 --> 00:07:08.950 align:start position:0%
this point and go ahead and put it in
the<00:07:08.080><c> output</c>

00:07:08.950 --> 00:07:08.960 align:start position:0%
the output
 

00:07:08.960 --> 00:07:11.029 align:start position:0%
the output
so<00:07:09.360><c> 2</c><00:07:09.680><c> is</c><00:07:09.840><c> going</c><00:07:10.000><c> to</c><00:07:10.080><c> be</c><00:07:10.319><c> placed</c><00:07:10.560><c> in</c><00:07:10.639><c> the</c><00:07:10.800><c> output</c>

00:07:11.029 --> 00:07:11.039 align:start position:0%
so 2 is going to be placed in the output
 

00:07:11.039 --> 00:07:12.629 align:start position:0%
so 2 is going to be placed in the output
then<00:07:11.199><c> we're</c><00:07:11.360><c> going</c><00:07:11.440><c> to</c><00:07:11.520><c> take</c><00:07:11.680><c> the</c><00:07:11.919><c> 3</c><00:07:12.319><c> and</c><00:07:12.400><c> then</c>

00:07:12.629 --> 00:07:12.639 align:start position:0%
then we're going to take the 3 and then
 

00:07:12.639 --> 00:07:14.469 align:start position:0%
then we're going to take the 3 and then
multiply<00:07:13.120><c> it</c><00:07:13.199><c> by</c><00:07:13.440><c> 2</c><00:07:13.680><c> that's</c><00:07:13.919><c> going</c><00:07:14.000><c> to</c><00:07:14.080><c> give</c><00:07:14.240><c> us</c>

00:07:14.469 --> 00:07:14.479 align:start position:0%
multiply it by 2 that's going to give us
 

00:07:14.479 --> 00:07:15.510 align:start position:0%
multiply it by 2 that's going to give us
a<00:07:14.880><c> 6</c>

00:07:15.510 --> 00:07:15.520 align:start position:0%
a 6
 

00:07:15.520 --> 00:07:18.230 align:start position:0%
a 6
for<00:07:15.680><c> the</c><00:07:15.919><c> prefix</c><00:07:16.720><c> so</c><00:07:16.960><c> far</c><00:07:17.440><c> so</c><00:07:17.599><c> at</c><00:07:17.759><c> this</c><00:07:18.000><c> point</c>

00:07:18.230 --> 00:07:18.240 align:start position:0%
for the prefix so far so at this point
 

00:07:18.240 --> 00:07:19.749 align:start position:0%
for the prefix so far so at this point
we're<00:07:18.400><c> going</c><00:07:18.479><c> to</c><00:07:18.560><c> take</c><00:07:18.720><c> our</c><00:07:18.880><c> prefix</c>

00:07:19.749 --> 00:07:19.759 align:start position:0%
we're going to take our prefix
 

00:07:19.759 --> 00:07:21.670 align:start position:0%
we're going to take our prefix
6<00:07:20.080><c> it</c><00:07:20.160><c> tells</c><00:07:20.479><c> us</c><00:07:20.639><c> the</c><00:07:20.720><c> prefix</c><00:07:21.120><c> up</c><00:07:21.280><c> until</c><00:07:21.520><c> this</c>

00:07:21.670 --> 00:07:21.680 align:start position:0%
6 it tells us the prefix up until this
 

00:07:21.680 --> 00:07:22.950 align:start position:0%
6 it tells us the prefix up until this
point<00:07:21.919><c> so</c><00:07:22.080><c> we're</c><00:07:22.160><c> going</c><00:07:22.240><c> to</c><00:07:22.319><c> take</c><00:07:22.560><c> it</c><00:07:22.639><c> put</c><00:07:22.880><c> it</c>

00:07:22.950 --> 00:07:22.960 align:start position:0%
point so we're going to take it put it
 

00:07:22.960 --> 00:07:23.909 align:start position:0%
point so we're going to take it put it
in<00:07:23.039><c> the</c><00:07:23.199><c> output</c>

00:07:23.909 --> 00:07:23.919 align:start position:0%
in the output
 

00:07:23.919 --> 00:07:25.270 align:start position:0%
in the output
6<00:07:24.160><c> is</c><00:07:24.319><c> going</c><00:07:24.400><c> to</c><00:07:24.479><c> be</c><00:07:24.639><c> put</c><00:07:24.800><c> in</c><00:07:24.880><c> the</c><00:07:25.039><c> last</c>

00:07:25.270 --> 00:07:25.280 align:start position:0%
6 is going to be put in the last
 

00:07:25.280 --> 00:07:27.029 align:start position:0%
6 is going to be put in the last
position<00:07:25.680><c> then</c><00:07:25.919><c> we're</c><00:07:26.080><c> going</c><00:07:26.160><c> to</c><00:07:26.240><c> multiply</c><00:07:26.720><c> 4</c>

00:07:27.029 --> 00:07:27.039 align:start position:0%
position then we're going to multiply 4
 

00:07:27.039 --> 00:07:28.950 align:start position:0%
position then we're going to multiply 4
by<00:07:27.280><c> 6</c><00:07:27.520><c> which</c><00:07:27.680><c> is</c><00:07:27.759><c> going</c><00:07:27.840><c> to</c><00:07:27.919><c> give</c><00:07:28.080><c> us</c><00:07:28.319><c> 24</c>

00:07:28.950 --> 00:07:28.960 align:start position:0%
by 6 which is going to give us 24
 

00:07:28.960 --> 00:07:31.029 align:start position:0%
by 6 which is going to give us 24
but<00:07:29.199><c> that</c><00:07:29.360><c> value</c><00:07:29.759><c> 24</c><00:07:30.240><c> is</c><00:07:30.319><c> not</c><00:07:30.479><c> going</c><00:07:30.560><c> to</c><00:07:30.639><c> be</c><00:07:30.800><c> put</c>

00:07:31.029 --> 00:07:31.039 align:start position:0%
but that value 24 is not going to be put
 

00:07:31.039 --> 00:07:32.309 align:start position:0%
but that value 24 is not going to be put
anywhere<00:07:31.440><c> because</c>

00:07:32.309 --> 00:07:32.319 align:start position:0%
anywhere because
 

00:07:32.319 --> 00:07:34.550 align:start position:0%
anywhere because
clearly<00:07:32.720><c> we</c><00:07:32.880><c> have</c><00:07:33.039><c> run</c><00:07:33.280><c> out</c><00:07:33.440><c> of</c><00:07:33.599><c> room</c><00:07:34.160><c> to</c><00:07:34.319><c> put</c>

00:07:34.550 --> 00:07:34.560 align:start position:0%
clearly we have run out of room to put
 

00:07:34.560 --> 00:07:36.230 align:start position:0%
clearly we have run out of room to put
it<00:07:34.720><c> so</c><00:07:34.880><c> we</c><00:07:34.960><c> don't</c><00:07:35.199><c> need</c><00:07:35.360><c> to</c><00:07:35.520><c> store</c><00:07:35.840><c> it</c><00:07:36.000><c> in</c><00:07:36.080><c> the</c>

00:07:36.230 --> 00:07:36.240 align:start position:0%
it so we don't need to store it in the
 

00:07:36.240 --> 00:07:37.029 align:start position:0%
it so we don't need to store it in the
output

00:07:37.029 --> 00:07:37.039 align:start position:0%
output
 

00:07:37.039 --> 00:07:39.270 align:start position:0%
output
so<00:07:37.199><c> now</c><00:07:37.440><c> we've</c><00:07:37.680><c> visited</c><00:07:38.160><c> every</c><00:07:38.400><c> single</c><00:07:38.720><c> value</c>

00:07:39.270 --> 00:07:39.280 align:start position:0%
so now we've visited every single value
 

00:07:39.280 --> 00:07:40.950 align:start position:0%
so now we've visited every single value
from<00:07:39.520><c> the</c><00:07:39.599><c> beginning</c><00:07:40.000><c> to</c><00:07:40.160><c> the</c><00:07:40.319><c> end</c><00:07:40.479><c> computing</c>

00:07:40.950 --> 00:07:40.960 align:start position:0%
from the beginning to the end computing
 

00:07:40.960 --> 00:07:42.870 align:start position:0%
from the beginning to the end computing
the<00:07:41.120><c> prefixes</c><00:07:41.919><c> and</c><00:07:42.000><c> then</c><00:07:42.240><c> putting</c><00:07:42.560><c> them</c><00:07:42.800><c> in</c>

00:07:42.870 --> 00:07:42.880 align:start position:0%
the prefixes and then putting them in
 

00:07:42.880 --> 00:07:44.070 align:start position:0%
the prefixes and then putting them in
the<00:07:43.120><c> output</c><00:07:43.520><c> array</c>

00:07:44.070 --> 00:07:44.080 align:start position:0%
the output array
 

00:07:44.080 --> 00:07:45.909 align:start position:0%
the output array
so<00:07:44.319><c> now</c><00:07:44.479><c> we're</c><00:07:44.639><c> going</c><00:07:44.720><c> to</c><00:07:44.879><c> start</c><00:07:45.280><c> at</c><00:07:45.360><c> the</c><00:07:45.599><c> end</c>

00:07:45.909 --> 00:07:45.919 align:start position:0%
so now we're going to start at the end
 

00:07:45.919 --> 00:07:47.270 align:start position:0%
so now we're going to start at the end
and<00:07:46.080><c> go</c><00:07:46.319><c> to</c><00:07:46.479><c> the</c><00:07:46.639><c> beginning</c>

00:07:47.270 --> 00:07:47.280 align:start position:0%
and go to the beginning
 

00:07:47.280 --> 00:07:49.589 align:start position:0%
and go to the beginning
and<00:07:47.840><c> do</c><00:07:48.080><c> the</c><00:07:48.240><c> exact</c><00:07:48.560><c> same</c><00:07:48.800><c> thing</c><00:07:49.120><c> except</c><00:07:49.440><c> we're</c>

00:07:49.589 --> 00:07:49.599 align:start position:0%
and do the exact same thing except we're
 

00:07:49.599 --> 00:07:51.589 align:start position:0%
and do the exact same thing except we're
going<00:07:49.680><c> to</c><00:07:49.759><c> be</c><00:07:49.919><c> doing</c><00:07:50.240><c> post</c><00:07:50.639><c> fixes</c><00:07:51.199><c> which</c><00:07:51.440><c> are</c>

00:07:51.589 --> 00:07:51.599 align:start position:0%
going to be doing post fixes which are
 

00:07:51.599 --> 00:07:52.869 align:start position:0%
going to be doing post fixes which are
basically

00:07:52.869 --> 00:07:52.879 align:start position:0%
basically
 

00:07:52.879 --> 00:07:54.950 align:start position:0%
basically
starting<00:07:53.280><c> from</c><00:07:53.520><c> the</c><00:07:53.759><c> end</c><00:07:54.000><c> of</c><00:07:54.080><c> the</c><00:07:54.240><c> input</c><00:07:54.560><c> array</c>

00:07:54.950 --> 00:07:54.960 align:start position:0%
starting from the end of the input array
 

00:07:54.960 --> 00:07:56.710 align:start position:0%
starting from the end of the input array
and<00:07:55.120><c> computing</c><00:07:55.599><c> the</c><00:07:55.840><c> products</c>

00:07:56.710 --> 00:07:56.720 align:start position:0%
and computing the products
 

00:07:56.720 --> 00:07:58.469 align:start position:0%
and computing the products
once<00:07:56.960><c> again</c><00:07:57.199><c> the</c><00:07:57.440><c> post</c><00:07:57.680><c> fix</c><00:07:58.000><c> is</c><00:07:58.080><c> initially</c>

00:07:58.469 --> 00:07:58.479 align:start position:0%
once again the post fix is initially
 

00:07:58.479 --> 00:08:00.070 align:start position:0%
once again the post fix is initially
going<00:07:58.560><c> to</c><00:07:58.720><c> be</c><00:07:59.199><c> set</c><00:07:59.440><c> to</c><00:07:59.680><c> 1</c>

00:08:00.070 --> 00:08:00.080 align:start position:0%
going to be set to 1
 

00:08:00.080 --> 00:08:02.150 align:start position:0%
going to be set to 1
so<00:08:00.240><c> what</c><00:08:00.319><c> we're</c><00:08:00.479><c> going</c><00:08:00.560><c> to</c><00:08:00.720><c> do</c><00:08:01.199><c> is</c><00:08:01.440><c> take</c><00:08:01.680><c> the</c><00:08:01.840><c> 1</c>

00:08:02.150 --> 00:08:02.160 align:start position:0%
so what we're going to do is take the 1
 

00:08:02.160 --> 00:08:03.909 align:start position:0%
so what we're going to do is take the 1
which<00:08:02.319><c> tells</c><00:08:02.639><c> us</c><00:08:02.720><c> the</c><00:08:02.879><c> post</c><00:08:03.199><c> fix</c><00:08:03.520><c> up</c><00:08:03.680><c> until</c>

00:08:03.909 --> 00:08:03.919 align:start position:0%
which tells us the post fix up until
 

00:08:03.919 --> 00:08:05.189 align:start position:0%
which tells us the post fix up until
this<00:08:04.080><c> point</c><00:08:04.319><c> basically</c><00:08:04.879><c> an</c>

00:08:05.189 --> 00:08:05.199 align:start position:0%
this point basically an
 

00:08:05.199 --> 00:08:08.790 align:start position:0%
this point basically an
empty<00:08:06.000><c> thing</c><00:08:06.639><c> and</c><00:08:07.280><c> that</c><00:08:07.520><c> makes</c><00:08:07.759><c> sense</c><00:08:08.000><c> because</c>

00:08:08.790 --> 00:08:08.800 align:start position:0%
empty thing and that makes sense because
 

00:08:08.800 --> 00:08:10.710 align:start position:0%
empty thing and that makes sense because
for<00:08:09.120><c> this</c><00:08:09.360><c> value</c><00:08:09.759><c> 4</c><00:08:10.000><c> we</c><00:08:10.160><c> would</c><00:08:10.319><c> want</c><00:08:10.560><c> the</c>

00:08:10.710 --> 00:08:10.720 align:start position:0%
for this value 4 we would want the
 

00:08:10.720 --> 00:08:13.189 align:start position:0%
for this value 4 we would want the
prefix<00:08:11.280><c> of</c><00:08:11.440><c> it</c><00:08:11.520><c> as</c><00:08:11.599><c> well</c><00:08:11.840><c> as</c><00:08:12.000><c> the</c><00:08:12.160><c> postfix</c>

00:08:13.189 --> 00:08:13.199 align:start position:0%
prefix of it as well as the postfix
 

00:08:13.199 --> 00:08:14.710 align:start position:0%
prefix of it as well as the postfix
but<00:08:13.360><c> there</c><00:08:13.599><c> is</c><00:08:13.680><c> no</c><00:08:13.840><c> postfix</c><00:08:14.319><c> so</c><00:08:14.479><c> that's</c><00:08:14.639><c> just</c>

00:08:14.710 --> 00:08:14.720 align:start position:0%
but there is no postfix so that's just
 

00:08:14.720 --> 00:08:16.469 align:start position:0%
but there is no postfix so that's just
going<00:08:14.800><c> to</c><00:08:14.879><c> be</c><00:08:14.960><c> a</c><00:08:15.120><c> one</c><00:08:15.680><c> so</c><00:08:15.840><c> we</c><00:08:16.000><c> can</c><00:08:16.080><c> take</c><00:08:16.319><c> that</c>

00:08:16.469 --> 00:08:16.479 align:start position:0%
going to be a one so we can take that
 

00:08:16.479 --> 00:08:16.790 align:start position:0%
going to be a one so we can take that
one

00:08:16.790 --> 00:08:16.800 align:start position:0%
one
 

00:08:16.800 --> 00:08:18.629 align:start position:0%
one
multiply<00:08:17.280><c> it</c><00:08:17.360><c> by</c><00:08:17.599><c> six</c><00:08:17.840><c> so</c><00:08:18.080><c> six</c><00:08:18.319><c> is</c><00:08:18.479><c> going</c><00:08:18.560><c> to</c>

00:08:18.629 --> 00:08:18.639 align:start position:0%
multiply it by six so six is going to
 

00:08:18.639 --> 00:08:20.230 align:start position:0%
multiply it by six so six is going to
stay<00:08:18.879><c> the</c><00:08:19.120><c> same</c><00:08:19.360><c> so</c><00:08:19.520><c> that's</c><00:08:19.759><c> gonna</c><00:08:19.919><c> be</c><00:08:20.080><c> the</c>

00:08:20.230 --> 00:08:20.240 align:start position:0%
stay the same so that's gonna be the
 

00:08:20.240 --> 00:08:21.270 align:start position:0%
stay the same so that's gonna be the
result<00:08:20.639><c> value</c>

00:08:21.270 --> 00:08:21.280 align:start position:0%
result value
 

00:08:21.280 --> 00:08:23.189 align:start position:0%
result value
for<00:08:21.440><c> this</c><00:08:21.680><c> position</c><00:08:22.479><c> but</c><00:08:22.639><c> then</c><00:08:22.879><c> we're</c><00:08:23.039><c> gonna</c>

00:08:23.189 --> 00:08:23.199 align:start position:0%
for this position but then we're gonna
 

00:08:23.199 --> 00:08:25.749 align:start position:0%
for this position but then we're gonna
take<00:08:23.520><c> four</c><00:08:23.919><c> and</c><00:08:24.160><c> multiply</c><00:08:24.720><c> it</c><00:08:24.879><c> by</c><00:08:25.120><c> the</c><00:08:25.360><c> one</c><00:08:25.680><c> in</c>

00:08:25.749 --> 00:08:25.759 align:start position:0%
take four and multiply it by the one in
 

00:08:25.759 --> 00:08:26.790 align:start position:0%
take four and multiply it by the one in
our<00:08:25.919><c> postfix</c><00:08:26.479><c> so</c>

00:08:26.790 --> 00:08:26.800 align:start position:0%
our postfix so
 

00:08:26.800 --> 00:08:29.029 align:start position:0%
our postfix so
four<00:08:27.199><c> four</c><00:08:27.440><c> so</c><00:08:27.599><c> our</c><00:08:27.759><c> postfix</c><00:08:28.319><c> is</c><00:08:28.479><c> now</c><00:08:28.639><c> going</c><00:08:28.879><c> to</c>

00:08:29.029 --> 00:08:29.039 align:start position:0%
four four so our postfix is now going to
 

00:08:29.039 --> 00:08:30.070 align:start position:0%
four four so our postfix is now going to
be<00:08:29.280><c> four</c>

00:08:30.070 --> 00:08:30.080 align:start position:0%
be four
 

00:08:30.080 --> 00:08:31.670 align:start position:0%
be four
so<00:08:30.240><c> we</c><00:08:30.400><c> visited</c><00:08:30.800><c> this</c><00:08:30.960><c> position</c><00:08:31.440><c> now</c><00:08:31.599><c> we're</c>

00:08:31.670 --> 00:08:31.680 align:start position:0%
so we visited this position now we're
 

00:08:31.680 --> 00:08:33.589 align:start position:0%
so we visited this position now we're
going<00:08:31.840><c> to</c><00:08:31.919><c> be</c><00:08:32.080><c> at</c><00:08:32.320><c> this</c><00:08:32.800><c> second</c><00:08:33.120><c> position</c><00:08:33.440><c> so</c>

00:08:33.589 --> 00:08:33.599 align:start position:0%
going to be at this second position so
 

00:08:33.599 --> 00:08:34.949 align:start position:0%
going to be at this second position so
we're<00:08:33.680><c> going</c><00:08:33.760><c> to</c><00:08:33.839><c> take</c><00:08:34.000><c> our</c><00:08:34.159><c> postfix</c>

00:08:34.949 --> 00:08:34.959 align:start position:0%
we're going to take our postfix
 

00:08:34.959 --> 00:08:36.709 align:start position:0%
we're going to take our postfix
which<00:08:35.120><c> tells</c><00:08:35.440><c> us</c><00:08:35.519><c> the</c><00:08:35.680><c> postfix</c><00:08:36.159><c> up</c><00:08:36.320><c> until</c><00:08:36.560><c> this</c>

00:08:36.709 --> 00:08:36.719 align:start position:0%
which tells us the postfix up until this
 

00:08:36.719 --> 00:08:38.070 align:start position:0%
which tells us the postfix up until this
point<00:08:37.120><c> and</c><00:08:37.200><c> then</c><00:08:37.440><c> multiply</c>

00:08:38.070 --> 00:08:38.080 align:start position:0%
point and then multiply
 

00:08:38.080 --> 00:08:40.310 align:start position:0%
point and then multiply
by<00:08:38.320><c> the</c><00:08:38.479><c> two</c><00:08:38.719><c> that's</c><00:08:39.039><c> in</c><00:08:39.200><c> this</c><00:08:39.360><c> position</c><00:08:39.760><c> so</c><00:08:40.000><c> 4</c>

00:08:40.310 --> 00:08:40.320 align:start position:0%
by the two that's in this position so 4
 

00:08:40.320 --> 00:08:41.430 align:start position:0%
by the two that's in this position so 4
times<00:08:40.719><c> 2</c>

00:08:41.430 --> 00:08:41.440 align:start position:0%
times 2
 

00:08:41.440 --> 00:08:44.550 align:start position:0%
times 2
is<00:08:41.680><c> going</c><00:08:41.839><c> to</c><00:08:42.000><c> give</c><00:08:42.240><c> us</c><00:08:42.800><c> an</c><00:08:43.200><c> 8</c><00:08:43.680><c> for</c><00:08:43.919><c> the</c><00:08:44.159><c> output</c>

00:08:44.550 --> 00:08:44.560 align:start position:0%
is going to give us an 8 for the output
 

00:08:44.560 --> 00:08:45.430 align:start position:0%
is going to give us an 8 for the output
value

00:08:45.430 --> 00:08:45.440 align:start position:0%
value
 

00:08:45.440 --> 00:08:48.389 align:start position:0%
value
then<00:08:45.680><c> we</c><00:08:45.839><c> can</c><00:08:46.000><c> take</c><00:08:46.560><c> this</c><00:08:46.800><c> value</c><00:08:47.279><c> 3</c><00:08:47.839><c> multiply</c>

00:08:48.389 --> 00:08:48.399 align:start position:0%
then we can take this value 3 multiply
 

00:08:48.399 --> 00:08:48.949 align:start position:0%
then we can take this value 3 multiply
it<00:08:48.560><c> by</c>

00:08:48.949 --> 00:08:48.959 align:start position:0%
it by
 

00:08:48.959 --> 00:08:51.750 align:start position:0%
it by
our<00:08:49.200><c> 4</c><00:08:49.519><c> which</c><00:08:49.760><c> is</c><00:08:49.839><c> going</c><00:08:50.000><c> to</c><00:08:50.080><c> give</c><00:08:50.320><c> us</c><00:08:50.560><c> a</c><00:08:50.800><c> 12.</c><00:08:51.600><c> so</c>

00:08:51.750 --> 00:08:51.760 align:start position:0%
our 4 which is going to give us a 12. so
 

00:08:51.760 --> 00:08:53.269 align:start position:0%
our 4 which is going to give us a 12. so
now<00:08:51.920><c> we</c><00:08:52.080><c> visited</c><00:08:52.399><c> this</c><00:08:52.640><c> value</c>

00:08:53.269 --> 00:08:53.279 align:start position:0%
now we visited this value
 

00:08:53.279 --> 00:08:54.870 align:start position:0%
now we visited this value
now<00:08:53.440><c> we're</c><00:08:53.519><c> at</c><00:08:53.600><c> the</c><00:08:53.680><c> next</c><00:08:53.920><c> value</c><00:08:54.320><c> two</c><00:08:54.560><c> so</c><00:08:54.720><c> we're</c>

00:08:54.870 --> 00:08:54.880 align:start position:0%
now we're at the next value two so we're
 

00:08:54.880 --> 00:08:56.949 align:start position:0%
now we're at the next value two so we're
going<00:08:54.959><c> to</c><00:08:55.040><c> take</c><00:08:55.279><c> our</c><00:08:55.680><c> postfix</c><00:08:56.399><c> up</c><00:08:56.560><c> until</c>

00:08:56.949 --> 00:08:56.959 align:start position:0%
going to take our postfix up until
 

00:08:56.959 --> 00:08:59.430 align:start position:0%
going to take our postfix up until
this<00:08:57.200><c> point</c><00:08:57.839><c> multiply</c><00:08:58.399><c> it</c><00:08:58.560><c> by</c><00:08:58.800><c> the</c><00:08:58.959><c> one</c><00:08:59.200><c> that's</c>

00:08:59.430 --> 00:08:59.440 align:start position:0%
this point multiply it by the one that's
 

00:08:59.440 --> 00:09:01.110 align:start position:0%
this point multiply it by the one that's
here<00:08:59.680><c> so</c><00:08:59.839><c> this</c><00:09:00.080><c> is</c><00:09:00.160><c> now</c><00:09:00.399><c> going</c><00:09:00.480><c> to</c><00:09:00.560><c> be</c><00:09:00.800><c> a</c>

00:09:01.110 --> 00:09:01.120 align:start position:0%
here so this is now going to be a
 

00:09:01.120 --> 00:09:04.389 align:start position:0%
here so this is now going to be a
12<00:09:02.000><c> and</c><00:09:02.160><c> we</c><00:09:02.320><c> can</c><00:09:02.560><c> also</c><00:09:02.800><c> take</c><00:09:03.040><c> the</c><00:09:03.279><c> two</c><00:09:03.920><c> and</c>

00:09:04.389 --> 00:09:04.399 align:start position:0%
12 and we can also take the two and
 

00:09:04.399 --> 00:09:06.710 align:start position:0%
12 and we can also take the two and
multiply<00:09:04.959><c> it</c><00:09:05.120><c> by</c><00:09:05.680><c> 12</c><00:09:06.080><c> which</c><00:09:06.240><c> is</c><00:09:06.399><c> going</c><00:09:06.480><c> to</c><00:09:06.560><c> give</c>

00:09:06.710 --> 00:09:06.720 align:start position:0%
multiply it by 12 which is going to give
 

00:09:06.720 --> 00:09:08.070 align:start position:0%
multiply it by 12 which is going to give
us<00:09:07.360><c> 24</c>

00:09:08.070 --> 00:09:08.080 align:start position:0%
us 24
 

00:09:08.080 --> 00:09:10.310 align:start position:0%
us 24
which<00:09:08.320><c> tells</c><00:09:08.640><c> us</c><00:09:08.800><c> the</c><00:09:08.959><c> postfix</c><00:09:09.600><c> up</c><00:09:09.680><c> until</c><00:09:10.000><c> this</c>

00:09:10.310 --> 00:09:10.320 align:start position:0%
which tells us the postfix up until this
 

00:09:10.320 --> 00:09:12.389 align:start position:0%
which tells us the postfix up until this
point<00:09:10.640><c> which</c><00:09:10.880><c> is</c><00:09:10.959><c> going</c><00:09:11.040><c> to</c><00:09:11.120><c> be</c><00:09:11.360><c> useful</c><00:09:11.760><c> for</c><00:09:12.000><c> us</c>

00:09:12.389 --> 00:09:12.399 align:start position:0%
point which is going to be useful for us
 

00:09:12.399 --> 00:09:14.790 align:start position:0%
point which is going to be useful for us
because<00:09:12.959><c> we</c><00:09:13.200><c> know</c><00:09:13.440><c> that</c><00:09:13.920><c> if</c><00:09:14.080><c> we</c><00:09:14.160><c> want</c><00:09:14.320><c> to</c><00:09:14.480><c> get</c>

00:09:14.790 --> 00:09:14.800 align:start position:0%
because we know that if we want to get
 

00:09:14.800 --> 00:09:16.150 align:start position:0%
because we know that if we want to get
the<00:09:15.279><c> product</c>

00:09:16.150 --> 00:09:16.160 align:start position:0%
the product
 

00:09:16.160 --> 00:09:17.910 align:start position:0%
the product
for<00:09:16.399><c> this</c><00:09:16.640><c> position</c><00:09:17.279><c> we're</c><00:09:17.440><c> going</c><00:09:17.600><c> to</c><00:09:17.680><c> need</c>

00:09:17.910 --> 00:09:17.920 align:start position:0%
for this position we're going to need
 

00:09:17.920 --> 00:09:20.150 align:start position:0%
for this position we're going to need
that<00:09:18.240><c> postfix</c><00:09:18.880><c> so</c><00:09:19.040><c> we</c><00:09:19.120><c> can</c><00:09:19.279><c> take</c><00:09:19.440><c> that</c><00:09:19.600><c> postfix</c>

00:09:20.150 --> 00:09:20.160 align:start position:0%
that postfix so we can take that postfix
 

00:09:20.160 --> 00:09:20.710 align:start position:0%
that postfix so we can take that postfix
24

00:09:20.710 --> 00:09:20.720 align:start position:0%
24
 

00:09:20.720 --> 00:09:22.550 align:start position:0%
24
multiply<00:09:21.120><c> it</c><00:09:21.200><c> by</c><00:09:21.360><c> the</c><00:09:21.519><c> one</c><00:09:21.680><c> that's</c><00:09:22.000><c> over</c><00:09:22.160><c> here</c>

00:09:22.550 --> 00:09:22.560 align:start position:0%
multiply it by the one that's over here
 

00:09:22.560 --> 00:09:24.750 align:start position:0%
multiply it by the one that's over here
so<00:09:22.880><c> this</c><00:09:23.120><c> is</c><00:09:23.279><c> just</c><00:09:23.440><c> going</c><00:09:23.519><c> to</c><00:09:23.600><c> be</c><00:09:23.839><c> a</c>

00:09:24.750 --> 00:09:24.760 align:start position:0%
so this is just going to be a
 

00:09:24.760 --> 00:09:27.990 align:start position:0%
so this is just going to be a
24<00:09:25.839><c> now</c><00:09:26.480><c> and</c><00:09:26.800><c> you</c><00:09:26.959><c> know</c><00:09:27.040><c> that's</c><00:09:27.360><c> the</c><00:09:27.519><c> entire</c>

00:09:27.990 --> 00:09:28.000 align:start position:0%
24 now and you know that's the entire
 

00:09:28.000 --> 00:09:30.150 align:start position:0%
24 now and you know that's the entire
result<00:09:28.720><c> so</c><00:09:28.959><c> we</c><00:09:29.120><c> basically</c><00:09:29.519><c> did</c><00:09:29.680><c> the</c><00:09:29.839><c> exact</c>

00:09:30.150 --> 00:09:30.160 align:start position:0%
result so we basically did the exact
 

00:09:30.160 --> 00:09:31.829 align:start position:0%
result so we basically did the exact
same<00:09:30.399><c> thing</c><00:09:30.640><c> that</c><00:09:30.720><c> we</c><00:09:30.880><c> did</c><00:09:31.040><c> with</c><00:09:31.200><c> our</c><00:09:31.360><c> prefix</c>

00:09:31.829 --> 00:09:31.839 align:start position:0%
same thing that we did with our prefix
 

00:09:31.839 --> 00:09:34.150 align:start position:0%
same thing that we did with our prefix
and<00:09:31.920><c> post</c><00:09:32.240><c> fix</c><00:09:32.640><c> arrays</c><00:09:33.120><c> but</c><00:09:33.279><c> this</c><00:09:33.519><c> case</c><00:09:33.839><c> we</c><00:09:34.000><c> did</c>

00:09:34.150 --> 00:09:34.160 align:start position:0%
and post fix arrays but this case we did
 

00:09:34.160 --> 00:09:34.790 align:start position:0%
and post fix arrays but this case we did
it<00:09:34.240><c> without</c>

00:09:34.790 --> 00:09:34.800 align:start position:0%
it without
 

00:09:34.800 --> 00:09:37.509 align:start position:0%
it without
using<00:09:35.279><c> the</c><00:09:35.519><c> extra</c><00:09:35.839><c> memory</c><00:09:36.720><c> and</c><00:09:36.880><c> we</c><00:09:37.120><c> ended</c><00:09:37.360><c> up</c>

00:09:37.509 --> 00:09:37.519 align:start position:0%
using the extra memory and we ended up
 

00:09:37.519 --> 00:09:39.990 align:start position:0%
using the extra memory and we ended up
arriving<00:09:38.080><c> at</c><00:09:38.240><c> the</c><00:09:38.399><c> exact</c><00:09:38.800><c> same</c><00:09:39.120><c> result</c>

00:09:39.990 --> 00:09:40.000 align:start position:0%
arriving at the exact same result
 

00:09:40.000 --> 00:09:43.030 align:start position:0%
arriving at the exact same result
so<00:09:40.240><c> it</c><00:09:40.399><c> was</c><00:09:41.040><c> linear</c><00:09:41.440><c> time</c><00:09:41.680><c> complexity</c><00:09:42.480><c> big</c><00:09:42.720><c> o</c>

00:09:43.030 --> 00:09:43.040 align:start position:0%
so it was linear time complexity big o
 

00:09:43.040 --> 00:09:45.350 align:start position:0%
so it was linear time complexity big o
of<00:09:43.279><c> one</c><00:09:43.760><c> memory</c><00:09:44.080><c> complexity</c><00:09:44.720><c> now</c><00:09:44.880><c> let's</c><00:09:45.120><c> jump</c>

00:09:45.350 --> 00:09:45.360 align:start position:0%
of one memory complexity now let's jump
 

00:09:45.360 --> 00:09:46.550 align:start position:0%
of one memory complexity now let's jump
into<00:09:45.600><c> the</c><00:09:45.760><c> code</c>

00:09:46.550 --> 00:09:46.560 align:start position:0%
into the code
 

00:09:46.560 --> 00:09:48.150 align:start position:0%
into the code
so<00:09:46.800><c> the</c><00:09:46.959><c> first</c><00:09:47.200><c> thing</c><00:09:47.360><c> we're</c><00:09:47.519><c> going</c><00:09:47.600><c> to</c><00:09:47.760><c> do</c><00:09:48.000><c> is</c>

00:09:48.150 --> 00:09:48.160 align:start position:0%
so the first thing we're going to do is
 

00:09:48.160 --> 00:09:50.710 align:start position:0%
so the first thing we're going to do is
create<00:09:48.640><c> a</c><00:09:48.800><c> result</c><00:09:49.440><c> output</c><00:09:49.920><c> array</c><00:09:50.240><c> so</c><00:09:50.480><c> this</c>

00:09:50.710 --> 00:09:50.720 align:start position:0%
create a result output array so this
 

00:09:50.720 --> 00:09:52.389 align:start position:0%
create a result output array so this
technically<00:09:51.200><c> does</c><00:09:51.360><c> not</c><00:09:51.600><c> count</c><00:09:51.839><c> as</c><00:09:52.080><c> extra</c>

00:09:52.389 --> 00:09:52.399 align:start position:0%
technically does not count as extra
 

00:09:52.399 --> 00:09:54.550 align:start position:0%
technically does not count as extra
memory<00:09:52.800><c> in</c><00:09:52.880><c> the</c><00:09:53.040><c> context</c><00:09:53.600><c> of</c><00:09:53.680><c> this</c><00:09:53.920><c> problem</c>

00:09:54.550 --> 00:09:54.560 align:start position:0%
memory in the context of this problem
 

00:09:54.560 --> 00:09:56.630 align:start position:0%
memory in the context of this problem
i'm<00:09:54.720><c> just</c><00:09:54.880><c> going</c><00:09:55.040><c> to</c><00:09:55.200><c> give</c><00:09:55.519><c> each</c><00:09:55.920><c> position</c><00:09:56.480><c> an</c>

00:09:56.630 --> 00:09:56.640 align:start position:0%
i'm just going to give each position an
 

00:09:56.640 --> 00:09:58.150 align:start position:0%
i'm just going to give each position an
initial<00:09:57.040><c> value</c><00:09:57.519><c> of</c><00:09:57.760><c> 1</c>

00:09:58.150 --> 00:09:58.160 align:start position:0%
initial value of 1
 

00:09:58.160 --> 00:10:01.110 align:start position:0%
initial value of 1
and<00:09:58.320><c> we</c><00:09:58.480><c> want</c><00:09:58.720><c> this</c><00:09:58.880><c> to</c><00:09:59.120><c> be</c><00:09:59.839><c> the</c><00:10:00.320><c> length</c><00:10:00.800><c> of</c><00:10:00.880><c> the</c>

00:10:01.110 --> 00:10:01.120 align:start position:0%
and we want this to be the length of the
 

00:10:01.120 --> 00:10:02.069 align:start position:0%
and we want this to be the length of the
input<00:10:01.440><c> array</c><00:10:01.760><c> so</c>

00:10:02.069 --> 00:10:02.079 align:start position:0%
input array so
 

00:10:02.079 --> 00:10:05.509 align:start position:0%
input array so
we<00:10:02.240><c> can</c><00:10:02.399><c> multiply</c><00:10:02.880><c> it</c><00:10:03.040><c> by</c><00:10:03.279><c> the</c><00:10:03.519><c> length</c><00:10:04.079><c> of</c><00:10:04.640><c> nums</c>

00:10:05.509 --> 00:10:05.519 align:start position:0%
we can multiply it by the length of nums
 

00:10:05.519 --> 00:10:06.870 align:start position:0%
we can multiply it by the length of nums
so<00:10:05.760><c> first</c><00:10:06.000><c> we're</c><00:10:06.240><c> going</c><00:10:06.320><c> to</c><00:10:06.399><c> be</c><00:10:06.480><c> doing</c><00:10:06.720><c> the</c>

00:10:06.870 --> 00:10:06.880 align:start position:0%
so first we're going to be doing the
 

00:10:06.880 --> 00:10:09.030 align:start position:0%
so first we're going to be doing the
prefixes<00:10:07.519><c> so</c><00:10:08.000><c> i</c><00:10:08.240><c> am</c><00:10:08.320><c> going</c><00:10:08.399><c> to</c><00:10:08.480><c> initialize</c>

00:10:09.030 --> 00:10:09.040 align:start position:0%
prefixes so i am going to initialize
 

00:10:09.040 --> 00:10:10.790 align:start position:0%
prefixes so i am going to initialize
prefix<00:10:09.519><c> as</c><00:10:09.760><c> 1</c><00:10:10.079><c> and</c><00:10:10.160><c> then</c><00:10:10.320><c> we're</c><00:10:10.480><c> going</c><00:10:10.560><c> to</c><00:10:10.640><c> go</c>

00:10:10.790 --> 00:10:10.800 align:start position:0%
prefix as 1 and then we're going to go
 

00:10:10.800 --> 00:10:11.910 align:start position:0%
prefix as 1 and then we're going to go
through<00:10:11.040><c> every</c><00:10:11.279><c> position</c>

00:10:11.910 --> 00:10:11.920 align:start position:0%
through every position
 

00:10:11.920 --> 00:10:15.509 align:start position:0%
through every position
in<00:10:12.320><c> our</c><00:10:13.040><c> input</c><00:10:13.440><c> array</c><00:10:14.240><c> so</c><00:10:14.480><c> for</c><00:10:14.640><c> each</c><00:10:14.880><c> position</c>

00:10:15.509 --> 00:10:15.519 align:start position:0%
in our input array so for each position
 

00:10:15.519 --> 00:10:18.630 align:start position:0%
in our input array so for each position
in<00:10:15.600><c> our</c><00:10:15.839><c> result</c><00:10:16.640><c> output</c><00:10:17.040><c> array</c><00:10:17.760><c> i</c>

00:10:18.630 --> 00:10:18.640 align:start position:0%
in our result output array i
 

00:10:18.640 --> 00:10:20.230 align:start position:0%
in our result output array i
we're<00:10:18.800><c> going</c><00:10:18.880><c> to</c><00:10:19.040><c> take</c><00:10:19.279><c> that</c><00:10:19.440><c> prefix</c><00:10:20.000><c> and</c><00:10:20.079><c> then</c>

00:10:20.230 --> 00:10:20.240 align:start position:0%
we're going to take that prefix and then
 

00:10:20.240 --> 00:10:21.670 align:start position:0%
we're going to take that prefix and then
just<00:10:20.480><c> put</c><00:10:20.720><c> it</c><00:10:21.279><c> in</c>

00:10:21.670 --> 00:10:21.680 align:start position:0%
just put it in
 

00:10:21.680 --> 00:10:23.750 align:start position:0%
just put it in
that<00:10:21.839><c> position</c><00:10:22.560><c> i</c><00:10:22.880><c> right</c><00:10:23.120><c> and</c><00:10:23.200><c> then</c><00:10:23.440><c> after</c>

00:10:23.750 --> 00:10:23.760 align:start position:0%
that position i right and then after
 

00:10:23.760 --> 00:10:25.110 align:start position:0%
that position i right and then after
we've<00:10:24.000><c> done</c><00:10:24.160><c> that</c><00:10:24.399><c> is</c><00:10:24.560><c> when</c><00:10:24.720><c> we're</c><00:10:24.880><c> going</c><00:10:24.959><c> to</c>

00:10:25.110 --> 00:10:25.120 align:start position:0%
we've done that is when we're going to
 

00:10:25.120 --> 00:10:25.910 align:start position:0%
we've done that is when we're going to
take

00:10:25.910 --> 00:10:25.920 align:start position:0%
take
 

00:10:25.920 --> 00:10:29.030 align:start position:0%
take
the<00:10:26.079><c> posit</c><00:10:26.399><c> the</c><00:10:26.800><c> input</c><00:10:27.120><c> array</c><00:10:27.600><c> value</c><00:10:28.480><c> nums</c>

00:10:29.030 --> 00:10:29.040 align:start position:0%
the posit the input array value nums
 

00:10:29.040 --> 00:10:31.509 align:start position:0%
the posit the input array value nums
of<00:10:29.200><c> i</c><00:10:30.000><c> and</c><00:10:30.240><c> multiply</c><00:10:30.800><c> it</c><00:10:30.880><c> by</c><00:10:31.040><c> whatever</c><00:10:31.360><c> the</c>

00:10:31.509 --> 00:10:31.519 align:start position:0%
of i and multiply it by whatever the
 

00:10:31.519 --> 00:10:33.910 align:start position:0%
of i and multiply it by whatever the
prefix<00:10:32.000><c> happens</c><00:10:32.399><c> to</c><00:10:32.560><c> be</c><00:10:32.800><c> so</c><00:10:33.040><c> prefix</c><00:10:33.600><c> is</c><00:10:33.680><c> just</c>

00:10:33.910 --> 00:10:33.920 align:start position:0%
prefix happens to be so prefix is just
 

00:10:33.920 --> 00:10:34.310 align:start position:0%
prefix happens to be so prefix is just
going<00:10:34.000><c> to</c><00:10:34.079><c> be</c>

00:10:34.310 --> 00:10:34.320 align:start position:0%
going to be
 

00:10:34.320 --> 00:10:37.030 align:start position:0%
going to be
multiplied<00:10:35.360><c> by</c><00:10:35.920><c> this</c><00:10:36.240><c> value</c><00:10:36.560><c> so</c><00:10:36.720><c> that's</c><00:10:36.880><c> how</c>

00:10:37.030 --> 00:10:37.040 align:start position:0%
multiplied by this value so that's how
 

00:10:37.040 --> 00:10:38.790 align:start position:0%
multiplied by this value so that's how
we're<00:10:37.279><c> going</c><00:10:37.360><c> to</c><00:10:37.440><c> be</c><00:10:37.519><c> computing</c><00:10:38.000><c> the</c><00:10:38.079><c> prefixes</c>

00:10:38.790 --> 00:10:38.800 align:start position:0%
we're going to be computing the prefixes
 

00:10:38.800 --> 00:10:40.710 align:start position:0%
we're going to be computing the prefixes
as<00:10:38.959><c> we</c><00:10:39.120><c> iterate</c><00:10:39.600><c> through</c><00:10:39.760><c> the</c><00:10:40.000><c> input</c><00:10:40.320><c> array</c>

00:10:40.710 --> 00:10:40.720 align:start position:0%
as we iterate through the input array
 

00:10:40.720 --> 00:10:41.430 align:start position:0%
as we iterate through the input array
nums

00:10:41.430 --> 00:10:41.440 align:start position:0%
nums
 

00:10:41.440 --> 00:10:42.630 align:start position:0%
nums
and<00:10:41.600><c> we're</c><00:10:41.760><c> going</c><00:10:41.839><c> to</c><00:10:42.000><c> be</c><00:10:42.160><c> storing</c><00:10:42.480><c> the</c>

00:10:42.630 --> 00:10:42.640 align:start position:0%
and we're going to be storing the
 

00:10:42.640 --> 00:10:45.350 align:start position:0%
and we're going to be storing the
prefixes<00:10:43.360><c> in</c><00:10:43.440><c> the</c><00:10:43.760><c> result</c><00:10:44.320><c> output</c><00:10:44.640><c> array</c>

00:10:45.350 --> 00:10:45.360 align:start position:0%
prefixes in the result output array
 

00:10:45.360 --> 00:10:46.710 align:start position:0%
prefixes in the result output array
after<00:10:45.600><c> we've</c><00:10:45.839><c> done</c><00:10:46.079><c> that</c><00:10:46.240><c> we're</c><00:10:46.399><c> going</c><00:10:46.480><c> to</c><00:10:46.560><c> do</c>

00:10:46.710 --> 00:10:46.720 align:start position:0%
after we've done that we're going to do
 

00:10:46.720 --> 00:10:48.630 align:start position:0%
after we've done that we're going to do
the<00:10:46.800><c> exact</c><00:10:47.120><c> same</c><00:10:47.360><c> thing</c><00:10:47.600><c> with</c><00:10:47.760><c> the</c><00:10:48.000><c> postfix</c>

00:10:48.630 --> 00:10:48.640 align:start position:0%
the exact same thing with the postfix
 

00:10:48.640 --> 00:10:49.110 align:start position:0%
the exact same thing with the postfix
array

00:10:49.110 --> 00:10:49.120 align:start position:0%
array
 

00:10:49.120 --> 00:10:50.790 align:start position:0%
array
well<00:10:49.360><c> almost</c><00:10:49.760><c> the</c><00:10:49.920><c> exact</c><00:10:50.160><c> same</c><00:10:50.399><c> thing</c><00:10:50.640><c> so</c>

00:10:50.790 --> 00:10:50.800 align:start position:0%
well almost the exact same thing so
 

00:10:50.800 --> 00:10:52.630 align:start position:0%
well almost the exact same thing so
we're<00:10:50.959><c> going</c><00:10:51.040><c> to</c><00:10:51.200><c> start</c><00:10:52.000><c> at</c><00:10:52.240><c> the</c>

00:10:52.630 --> 00:10:52.640 align:start position:0%
we're going to start at the
 

00:10:52.640 --> 00:10:55.750 align:start position:0%
we're going to start at the
end<00:10:53.120><c> of</c><00:10:53.360><c> the</c><00:10:53.680><c> input</c><00:10:54.079><c> array</c>

00:10:55.750 --> 00:10:55.760 align:start position:0%
end of the input array
 

00:10:55.760 --> 00:10:57.829 align:start position:0%
end of the input array
and<00:10:55.920><c> then</c><00:10:56.160><c> go</c><00:10:56.480><c> up</c><00:10:56.640><c> until</c><00:10:57.040><c> the</c><00:10:57.279><c> beginning</c><00:10:57.760><c> and</c>

00:10:57.829 --> 00:10:57.839 align:start position:0%
and then go up until the beginning and
 

00:10:57.839 --> 00:10:59.990 align:start position:0%
and then go up until the beginning and
that's<00:10:58.079><c> how</c><00:10:58.240><c> you</c><00:10:58.320><c> can</c><00:10:58.480><c> do</c><00:10:58.640><c> this</c><00:10:58.959><c> in</c><00:10:59.200><c> python</c>

00:10:59.990 --> 00:11:00.000 align:start position:0%
that's how you can do this in python
 

00:11:00.000 --> 00:11:02.230 align:start position:0%
that's how you can do this in python
and<00:11:00.160><c> so</c><00:11:00.399><c> in</c><00:11:00.560><c> this</c><00:11:00.800><c> case</c><00:11:01.040><c> the</c><00:11:01.279><c> result</c><00:11:01.839><c> of</c><00:11:02.000><c> i</c>

00:11:02.230 --> 00:11:02.240 align:start position:0%
and so in this case the result of i
 

00:11:02.240 --> 00:11:03.590 align:start position:0%
and so in this case the result of i
we're<00:11:02.399><c> not</c><00:11:02.560><c> just</c><00:11:02.720><c> going</c><00:11:02.880><c> to</c><00:11:02.959><c> be</c><00:11:03.120><c> simply</c>

00:11:03.590 --> 00:11:03.600 align:start position:0%
we're not just going to be simply
 

00:11:03.600 --> 00:11:05.590 align:start position:0%
we're not just going to be simply
storing<00:11:04.079><c> the</c><00:11:04.240><c> postfix</c><00:11:04.800><c> value</c><00:11:05.200><c> because</c><00:11:05.440><c> we</c>

00:11:05.590 --> 00:11:05.600 align:start position:0%
storing the postfix value because we
 

00:11:05.600 --> 00:11:06.710 align:start position:0%
storing the postfix value because we
know<00:11:05.839><c> that</c><00:11:06.000><c> would</c><00:11:06.320><c> end</c><00:11:06.480><c> up</c>

00:11:06.710 --> 00:11:06.720 align:start position:0%
know that would end up
 

00:11:06.720 --> 00:11:09.190 align:start position:0%
know that would end up
overwriting<00:11:07.920><c> in</c><00:11:08.000><c> the</c><00:11:08.160><c> result</c><00:11:08.560><c> whatever</c><00:11:09.040><c> the</c>

00:11:09.190 --> 00:11:09.200 align:start position:0%
overwriting in the result whatever the
 

00:11:09.200 --> 00:11:10.710 align:start position:0%
overwriting in the result whatever the
prefix<00:11:09.600><c> we</c><00:11:09.760><c> stored</c><00:11:10.000><c> was</c><00:11:10.240><c> what</c><00:11:10.399><c> we're</c><00:11:10.560><c> going</c><00:11:10.640><c> to</c>

00:11:10.710 --> 00:11:10.720 align:start position:0%
prefix we stored was what we're going to
 

00:11:10.720 --> 00:11:12.150 align:start position:0%
prefix we stored was what we're going to
be<00:11:10.880><c> doing</c><00:11:11.120><c> with</c><00:11:11.200><c> the</c><00:11:11.360><c> postfix</c><00:11:11.839><c> is</c><00:11:12.000><c> we're</c><00:11:12.079><c> going</c>

00:11:12.150 --> 00:11:12.160 align:start position:0%
be doing with the postfix is we're going
 

00:11:12.160 --> 00:11:13.430 align:start position:0%
be doing with the postfix is we're going
to<00:11:12.240><c> be</c><00:11:12.480><c> multiplying</c><00:11:13.200><c> it</c>

00:11:13.430 --> 00:11:13.440 align:start position:0%
to be multiplying it
 

00:11:13.440 --> 00:11:15.910 align:start position:0%
to be multiplying it
by<00:11:13.600><c> the</c><00:11:13.839><c> value</c><00:11:14.399><c> that's</c><00:11:14.800><c> already</c><00:11:15.279><c> in</c><00:11:15.440><c> results</c>

00:11:15.910 --> 00:11:15.920 align:start position:0%
by the value that's already in results
 

00:11:15.920 --> 00:11:16.550 align:start position:0%
by the value that's already in results
because<00:11:16.160><c> that's</c>

00:11:16.550 --> 00:11:16.560 align:start position:0%
because that's
 

00:11:16.560 --> 00:11:18.550 align:start position:0%
because that's
simply<00:11:17.120><c> multiplying</c><00:11:17.680><c> the</c><00:11:17.839><c> prefix</c><00:11:18.320><c> and</c><00:11:18.480><c> the</c>

00:11:18.550 --> 00:11:18.560 align:start position:0%
simply multiplying the prefix and the
 

00:11:18.560 --> 00:11:20.150 align:start position:0%
simply multiplying the prefix and the
postfix<00:11:19.279><c> together</c>

00:11:20.150 --> 00:11:20.160 align:start position:0%
postfix together
 

00:11:20.160 --> 00:11:21.670 align:start position:0%
postfix together
once<00:11:20.399><c> we've</c><00:11:20.560><c> done</c><00:11:20.800><c> that</c><00:11:20.959><c> we</c><00:11:21.120><c> know</c><00:11:21.279><c> we</c><00:11:21.440><c> do</c><00:11:21.519><c> have</c>

00:11:21.670 --> 00:11:21.680 align:start position:0%
once we've done that we know we do have
 

00:11:21.680 --> 00:11:24.150 align:start position:0%
once we've done that we know we do have
to<00:11:21.760><c> continuously</c><00:11:22.560><c> update</c><00:11:22.959><c> the</c><00:11:23.120><c> postfix</c><00:11:23.760><c> so</c>

00:11:24.150 --> 00:11:24.160 align:start position:0%
to continuously update the postfix so
 

00:11:24.160 --> 00:11:25.750 align:start position:0%
to continuously update the postfix so
with<00:11:24.480><c> postfix</c><00:11:25.200><c> we're</c><00:11:25.360><c> just</c><00:11:25.519><c> going</c><00:11:25.680><c> to</c>

00:11:25.750 --> 00:11:25.760 align:start position:0%
with postfix we're just going to
 

00:11:25.760 --> 00:11:27.750 align:start position:0%
with postfix we're just going to
multiply<00:11:26.320><c> it</c><00:11:26.640><c> by</c><00:11:26.880><c> whatever</c><00:11:27.279><c> value</c>

00:11:27.750 --> 00:11:27.760 align:start position:0%
multiply it by whatever value
 

00:11:27.760 --> 00:11:30.870 align:start position:0%
multiply it by whatever value
happens<00:11:28.079><c> to</c><00:11:28.240><c> be</c><00:11:28.480><c> in</c><00:11:28.880><c> the</c><00:11:29.200><c> input</c><00:11:29.680><c> array</c><00:11:30.000><c> nums</c>

00:11:30.870 --> 00:11:30.880 align:start position:0%
happens to be in the input array nums
 

00:11:30.880 --> 00:11:32.710 align:start position:0%
happens to be in the input array nums
and<00:11:31.120><c> once</c><00:11:31.440><c> that</c><00:11:31.680><c> is</c><00:11:31.839><c> done</c><00:11:32.160><c> we're</c><00:11:32.399><c> actually</c>

00:11:32.710 --> 00:11:32.720 align:start position:0%
and once that is done we're actually
 

00:11:32.720 --> 00:11:34.470 align:start position:0%
and once that is done we're actually
done<00:11:32.880><c> with</c><00:11:33.040><c> the</c><00:11:33.200><c> entire</c><00:11:33.600><c> problem</c><00:11:34.000><c> then</c><00:11:34.160><c> we</c><00:11:34.320><c> can</c>

00:11:34.470 --> 00:11:34.480 align:start position:0%
done with the entire problem then we can
 

00:11:34.480 --> 00:11:36.230 align:start position:0%
done with the entire problem then we can
just<00:11:34.640><c> return</c><00:11:35.120><c> the</c><00:11:35.360><c> output</c><00:11:35.760><c> array</c>

00:11:36.230 --> 00:11:36.240 align:start position:0%
just return the output array
 

00:11:36.240 --> 00:11:39.110 align:start position:0%
just return the output array
result<00:11:36.959><c> so</c><00:11:37.279><c> this</c><00:11:37.680><c> is</c><00:11:37.920><c> pretty</c><00:11:38.160><c> much</c><00:11:38.480><c> the</c><00:11:38.800><c> most</c>

00:11:39.110 --> 00:11:39.120 align:start position:0%
result so this is pretty much the most
 

00:11:39.120 --> 00:11:39.910 align:start position:0%
result so this is pretty much the most
efficient

00:11:39.910 --> 00:11:39.920 align:start position:0%
efficient
 

00:11:39.920 --> 00:11:42.069 align:start position:0%
efficient
way<00:11:40.079><c> to</c><00:11:40.240><c> solve</c><00:11:40.480><c> this</c><00:11:40.720><c> problem</c><00:11:41.200><c> as</c><00:11:41.360><c> you</c><00:11:41.440><c> can</c><00:11:41.600><c> see</c>

00:11:42.069 --> 00:11:42.079 align:start position:0%
way to solve this problem as you can see
 

00:11:42.079 --> 00:11:43.750 align:start position:0%
way to solve this problem as you can see
best<00:11:42.399><c> memory</c><00:11:42.720><c> complexity</c><00:11:43.279><c> best</c><00:11:43.519><c> time</c>

00:11:43.750 --> 00:11:43.760 align:start position:0%
best memory complexity best time
 

00:11:43.760 --> 00:11:45.350 align:start position:0%
best memory complexity best time
complexity<00:11:44.320><c> as</c><00:11:44.399><c> well</c><00:11:44.560><c> so</c><00:11:44.720><c> i</c><00:11:44.800><c> hope</c><00:11:45.040><c> this</c><00:11:45.200><c> was</c>

00:11:45.350 --> 00:11:45.360 align:start position:0%
complexity as well so i hope this was
 

00:11:45.360 --> 00:11:45.829 align:start position:0%
complexity as well so i hope this was
helpful

00:11:45.829 --> 00:11:45.839 align:start position:0%
helpful
 

00:11:45.839 --> 00:11:47.829 align:start position:0%
helpful
if<00:11:46.000><c> it</c><00:11:46.160><c> was</c><00:11:46.480><c> please</c><00:11:46.800><c> like</c><00:11:47.040><c> and</c><00:11:47.120><c> subscribe</c><00:11:47.680><c> it</c>

00:11:47.829 --> 00:11:47.839 align:start position:0%
if it was please like and subscribe it
 

00:11:47.839 --> 00:11:49.750 align:start position:0%
if it was please like and subscribe it
supports<00:11:48.240><c> the</c><00:11:48.399><c> channel</c><00:11:48.800><c> a</c><00:11:49.040><c> lot</c><00:11:49.360><c> and</c><00:11:49.600><c> i'll</c>

00:11:49.750 --> 00:11:49.760 align:start position:0%
supports the channel a lot and i'll
 

00:11:49.760 --> 00:11:50.550 align:start position:0%
supports the channel a lot and i'll
hopefully

00:11:50.550 --> 00:11:50.560 align:start position:0%
hopefully
 

00:11:50.560 --> 00:11:54.880 align:start position:0%
hopefully
see<00:11:50.720><c> you</c><00:11:50.959><c> pretty</c><00:11:51.200><c> soon</c><00:11:51.760><c> thanks</c><00:11:52.000><c> for</c><00:11:52.160><c> watching</c>

