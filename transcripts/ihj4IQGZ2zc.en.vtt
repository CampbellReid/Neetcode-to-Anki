WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.640><c> welcome</c><00:00:01.040><c> back</c><00:00:01.280><c> and</c><00:00:01.439><c> let's</c>

00:00:01.670 --> 00:00:01.680 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.680 --> 00:00:03.510 align:start position:0%
hey everyone welcome back and let's
write<00:00:01.920><c> some</c><00:00:02.080><c> more</c><00:00:02.320><c> neat</c><00:00:02.560><c> code</c><00:00:02.800><c> today</c><00:00:03.120><c> so</c><00:00:03.280><c> today</c>

00:00:03.510 --> 00:00:03.520 align:start position:0%
write some more neat code today so today
 

00:00:03.520 --> 00:00:05.670 align:start position:0%
write some more neat code today so today
let's<00:00:03.760><c> solve</c><00:00:04.080><c> a</c><00:00:04.319><c> pretty</c><00:00:04.799><c> fun</c><00:00:05.120><c> problem</c>

00:00:05.670 --> 00:00:05.680 align:start position:0%
let's solve a pretty fun problem
 

00:00:05.680 --> 00:00:09.270 align:start position:0%
let's solve a pretty fun problem
construct<00:00:06.319><c> a</c><00:00:06.480><c> binary</c><00:00:07.040><c> tree</c><00:00:07.600><c> from</c><00:00:08.160><c> a</c><00:00:08.400><c> pre-order</c>

00:00:09.270 --> 00:00:09.280 align:start position:0%
construct a binary tree from a pre-order
 

00:00:09.280 --> 00:00:11.830 align:start position:0%
construct a binary tree from a pre-order
and<00:00:09.519><c> in</c><00:00:09.760><c> order</c><00:00:10.160><c> traversal</c><00:00:10.880><c> so</c><00:00:11.040><c> we're</c><00:00:11.280><c> actually</c>

00:00:11.830 --> 00:00:11.840 align:start position:0%
and in order traversal so we're actually
 

00:00:11.840 --> 00:00:12.709 align:start position:0%
and in order traversal so we're actually
given

00:00:12.709 --> 00:00:12.719 align:start position:0%
given
 

00:00:12.719 --> 00:00:15.749 align:start position:0%
given
two<00:00:13.120><c> integer</c><00:00:13.599><c> arrays</c><00:00:14.240><c> representing</c><00:00:15.280><c> one</c>

00:00:15.749 --> 00:00:15.759 align:start position:0%
two integer arrays representing one
 

00:00:15.759 --> 00:00:18.710 align:start position:0%
two integer arrays representing one
the<00:00:16.000><c> pre-order</c><00:00:16.640><c> traversal</c><00:00:17.440><c> and</c><00:00:17.840><c> two</c><00:00:18.320><c> the</c>

00:00:18.710 --> 00:00:18.720 align:start position:0%
the pre-order traversal and two the
 

00:00:18.720 --> 00:00:20.150 align:start position:0%
the pre-order traversal and two the
in-order<00:00:19.359><c> traversal</c>

00:00:20.150 --> 00:00:20.160 align:start position:0%
in-order traversal
 

00:00:20.160 --> 00:00:23.349 align:start position:0%
in-order traversal
of<00:00:20.560><c> a</c><00:00:20.960><c> binary</c><00:00:21.680><c> tree</c><00:00:22.320><c> and</c><00:00:22.720><c> our</c>

00:00:23.349 --> 00:00:23.359 align:start position:0%
of a binary tree and our
 

00:00:23.359 --> 00:00:26.950 align:start position:0%
of a binary tree and our
goal<00:00:24.000><c> is</c><00:00:24.240><c> to</c><00:00:24.480><c> take</c><00:00:24.960><c> these</c><00:00:25.519><c> two</c><00:00:26.000><c> traversals</c>

00:00:26.950 --> 00:00:26.960 align:start position:0%
goal is to take these two traversals
 

00:00:26.960 --> 00:00:29.509 align:start position:0%
goal is to take these two traversals
and<00:00:27.119><c> the</c><00:00:27.279><c> orderings</c><00:00:28.080><c> of</c><00:00:28.320><c> those</c><00:00:28.880><c> nodes</c><00:00:29.439><c> and</c>

00:00:29.509 --> 00:00:29.519 align:start position:0%
and the orderings of those nodes and
 

00:00:29.519 --> 00:00:30.470 align:start position:0%
and the orderings of those nodes and
then<00:00:29.840><c> can</c>

00:00:30.470 --> 00:00:30.480 align:start position:0%
then can
 

00:00:30.480 --> 00:00:33.190 align:start position:0%
then can
reconstruct<00:00:31.359><c> basically</c><00:00:32.079><c> the</c><00:00:32.399><c> original</c>

00:00:33.190 --> 00:00:33.200 align:start position:0%
reconstruct basically the original
 

00:00:33.200 --> 00:00:34.790 align:start position:0%
reconstruct basically the original
binary<00:00:33.840><c> tree</c>

00:00:34.790 --> 00:00:34.800 align:start position:0%
binary tree
 

00:00:34.800 --> 00:00:37.670 align:start position:0%
binary tree
that<00:00:35.040><c> the</c><00:00:35.360><c> traversals</c><00:00:36.079><c> are</c><00:00:36.239><c> from</c><00:00:36.880><c> and</c><00:00:37.120><c> it</c><00:00:37.360><c> is</c>

00:00:37.670 --> 00:00:37.680 align:start position:0%
that the traversals are from and it is
 

00:00:37.680 --> 00:00:39.110 align:start position:0%
that the traversals are from and it is
technically<00:00:38.320><c> possible</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
technically possible
 

00:00:39.120 --> 00:00:41.270 align:start position:0%
technically possible
these<00:00:39.520><c> two</c><00:00:39.760><c> traversals</c><00:00:40.480><c> have</c><00:00:40.800><c> all</c><00:00:41.040><c> the</c>

00:00:41.270 --> 00:00:41.280 align:start position:0%
these two traversals have all the
 

00:00:41.280 --> 00:00:42.709 align:start position:0%
these two traversals have all the
information<00:00:42.000><c> we</c><00:00:42.239><c> need</c>

00:00:42.709 --> 00:00:42.719 align:start position:0%
information we need
 

00:00:42.719 --> 00:00:44.790 align:start position:0%
information we need
we<00:00:42.879><c> just</c><00:00:43.120><c> need</c><00:00:43.280><c> to</c><00:00:43.440><c> take</c><00:00:43.680><c> that</c><00:00:43.920><c> information</c>

00:00:44.790 --> 00:00:44.800 align:start position:0%
we just need to take that information
 

00:00:44.800 --> 00:00:46.950 align:start position:0%
we just need to take that information
and<00:00:44.960><c> then</c><00:00:45.520><c> deconstruct</c><00:00:46.320><c> it</c>

00:00:46.950 --> 00:00:46.960 align:start position:0%
and then deconstruct it
 

00:00:46.960 --> 00:00:50.229 align:start position:0%
and then deconstruct it
and<00:00:47.120><c> then</c><00:00:47.440><c> reconstruct</c><00:00:48.239><c> this</c><00:00:48.800><c> binary</c><00:00:49.760><c> tree</c>

00:00:50.229 --> 00:00:50.239 align:start position:0%
and then reconstruct this binary tree
 

00:00:50.239 --> 00:00:53.430 align:start position:0%
and then reconstruct this binary tree
from<00:00:50.559><c> those</c><00:00:51.199><c> so</c><00:00:51.360><c> just</c><00:00:51.600><c> to</c><00:00:51.840><c> verify</c><00:00:52.480><c> it</c><00:00:52.719><c> let's</c><00:00:53.120><c> go</c>

00:00:53.430 --> 00:00:53.440 align:start position:0%
from those so just to verify it let's go
 

00:00:53.440 --> 00:00:54.470 align:start position:0%
from those so just to verify it let's go
through<00:00:53.920><c> this</c>

00:00:54.470 --> 00:00:54.480 align:start position:0%
through this
 

00:00:54.480 --> 00:00:56.630 align:start position:0%
through this
tree<00:00:54.879><c> and</c><00:00:55.039><c> actually</c><00:00:55.520><c> do</c><00:00:55.760><c> the</c><00:00:56.160><c> pre-order</c>

00:00:56.630 --> 00:00:56.640 align:start position:0%
tree and actually do the pre-order
 

00:00:56.640 --> 00:00:58.310 align:start position:0%
tree and actually do the pre-order
traversal<00:00:57.199><c> first</c><00:00:57.440><c> of</c><00:00:57.600><c> all</c><00:00:57.760><c> so</c>

00:00:58.310 --> 00:00:58.320 align:start position:0%
traversal first of all so
 

00:00:58.320 --> 00:01:00.310 align:start position:0%
traversal first of all so
first<00:00:58.559><c> we</c><00:00:58.719><c> know</c><00:00:58.879><c> pre-order</c><00:00:59.359><c> traversal</c><00:01:00.000><c> is</c><00:01:00.160><c> you</c>

00:01:00.310 --> 00:01:00.320 align:start position:0%
first we know pre-order traversal is you
 

00:01:00.320 --> 00:01:02.310 align:start position:0%
first we know pre-order traversal is you
start<00:01:00.559><c> at</c><00:01:00.640><c> the</c><00:01:00.879><c> root</c><00:01:01.199><c> and</c><00:01:01.280><c> then</c><00:01:01.520><c> you</c><00:01:01.760><c> process</c>

00:01:02.310 --> 00:01:02.320 align:start position:0%
start at the root and then you process
 

00:01:02.320 --> 00:01:03.590 align:start position:0%
start at the root and then you process
the<00:01:02.559><c> current</c><00:01:02.960><c> node</c>

00:01:03.590 --> 00:01:03.600 align:start position:0%
the current node
 

00:01:03.600 --> 00:01:05.830 align:start position:0%
the current node
then<00:01:03.840><c> you</c><00:01:04.000><c> do</c><00:01:04.159><c> the</c><00:01:04.320><c> left</c><00:01:04.640><c> subtree</c><00:01:05.280><c> then</c><00:01:05.519><c> you</c><00:01:05.680><c> do</c>

00:01:05.830 --> 00:01:05.840 align:start position:0%
then you do the left subtree then you do
 

00:01:05.840 --> 00:01:07.350 align:start position:0%
then you do the left subtree then you do
the<00:01:05.920><c> right</c><00:01:06.240><c> subtree</c><00:01:06.799><c> right</c>

00:01:07.350 --> 00:01:07.360 align:start position:0%
the right subtree right
 

00:01:07.360 --> 00:01:09.270 align:start position:0%
the right subtree right
so<00:01:07.600><c> let's</c><00:01:07.840><c> just</c><00:01:08.400><c> let's</c><00:01:08.640><c> just</c><00:01:08.880><c> do</c><00:01:09.040><c> the</c>

00:01:09.270 --> 00:01:09.280 align:start position:0%
so let's just let's just do the
 

00:01:09.280 --> 00:01:11.190 align:start position:0%
so let's just let's just do the
pre-order<00:01:09.760><c> traversal</c><00:01:10.400><c> so</c><00:01:10.560><c> we're</c><00:01:10.799><c> starting</c><00:01:11.119><c> at</c>

00:01:11.190 --> 00:01:11.200 align:start position:0%
pre-order traversal so we're starting at
 

00:01:11.200 --> 00:01:11.990 align:start position:0%
pre-order traversal so we're starting at
the<00:01:11.360><c> root</c><00:01:11.760><c> we</c>

00:01:11.990 --> 00:01:12.000 align:start position:0%
the root we
 

00:01:12.000 --> 00:01:13.750 align:start position:0%
the root we
do<00:01:12.159><c> the</c><00:01:12.320><c> root</c><00:01:12.640><c> node</c><00:01:12.960><c> first</c><00:01:13.280><c> that's</c><00:01:13.520><c> how</c>

00:01:13.750 --> 00:01:13.760 align:start position:0%
do the root node first that's how
 

00:01:13.760 --> 00:01:16.149 align:start position:0%
do the root node first that's how
pre-order<00:01:14.240><c> works</c><00:01:14.560><c> so</c><00:01:14.799><c> then</c><00:01:15.040><c> we</c><00:01:15.119><c> get</c><00:01:15.280><c> a</c><00:01:15.439><c> three</c>

00:01:16.149 --> 00:01:16.159 align:start position:0%
pre-order works so then we get a three
 

00:01:16.159 --> 00:01:18.469 align:start position:0%
pre-order works so then we get a three
next<00:01:16.479><c> we're</c><00:01:16.720><c> going</c><00:01:16.799><c> to</c><00:01:16.880><c> go</c><00:01:17.200><c> to</c><00:01:17.439><c> the</c><00:01:17.759><c> left</c><00:01:18.159><c> sub</c>

00:01:18.469 --> 00:01:18.479 align:start position:0%
next we're going to go to the left sub
 

00:01:18.479 --> 00:01:19.429 align:start position:0%
next we're going to go to the left sub
tree<00:01:18.880><c> and</c><00:01:18.960><c> then</c>

00:01:19.429 --> 00:01:19.439 align:start position:0%
tree and then
 

00:01:19.439 --> 00:01:21.510 align:start position:0%
tree and then
and<00:01:19.600><c> then</c><00:01:19.840><c> do</c><00:01:20.000><c> pre-order</c><00:01:20.479><c> traversal</c><00:01:21.040><c> on</c><00:01:21.200><c> that</c>

00:01:21.510 --> 00:01:21.520 align:start position:0%
and then do pre-order traversal on that
 

00:01:21.520 --> 00:01:22.710 align:start position:0%
and then do pre-order traversal on that
left<00:01:21.759><c> subtree</c>

00:01:22.710 --> 00:01:22.720 align:start position:0%
left subtree
 

00:01:22.720 --> 00:01:24.950 align:start position:0%
left subtree
we<00:01:22.960><c> see</c><00:01:23.439><c> nine</c><00:01:23.840><c> right</c><00:01:24.000><c> so</c><00:01:24.159><c> we're</c><00:01:24.320><c> going</c><00:01:24.400><c> to</c><00:01:24.560><c> add</c>

00:01:24.950 --> 00:01:24.960 align:start position:0%
we see nine right so we're going to add
 

00:01:24.960 --> 00:01:26.310 align:start position:0%
we see nine right so we're going to add
nine<00:01:25.360><c> to</c><00:01:25.680><c> our</c>

00:01:26.310 --> 00:01:26.320 align:start position:0%
nine to our
 

00:01:26.320 --> 00:01:28.390 align:start position:0%
nine to our
pre-order<00:01:26.880><c> traversal</c><00:01:27.520><c> and</c><00:01:27.759><c> it</c><00:01:27.920><c> doesn't</c><00:01:28.240><c> have</c>

00:01:28.390 --> 00:01:28.400 align:start position:0%
pre-order traversal and it doesn't have
 

00:01:28.400 --> 00:01:30.950 align:start position:0%
pre-order traversal and it doesn't have
any<00:01:28.720><c> children</c><00:01:29.200><c> so</c><00:01:29.360><c> we're</c><00:01:29.520><c> actually</c><00:01:29.920><c> done</c><00:01:30.240><c> with</c>

00:01:30.950 --> 00:01:30.960 align:start position:0%
any children so we're actually done with
 

00:01:30.960 --> 00:01:33.030 align:start position:0%
any children so we're actually done with
nine<00:01:31.280><c> we're</c><00:01:31.520><c> done</c><00:01:31.680><c> with</c><00:01:31.920><c> three</c><00:01:32.400><c> now</c><00:01:32.640><c> it's</c><00:01:32.799><c> time</c>

00:01:33.030 --> 00:01:33.040 align:start position:0%
nine we're done with three now it's time
 

00:01:33.040 --> 00:01:35.270 align:start position:0%
nine we're done with three now it's time
to<00:01:33.200><c> do</c><00:01:33.439><c> the</c><00:01:33.920><c> right</c><00:01:34.320><c> subtree</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
to do the right subtree
 

00:01:35.280 --> 00:01:37.910 align:start position:0%
to do the right subtree
in<00:01:35.439><c> pre-order</c><00:01:35.920><c> traversal</c><00:01:36.400><c> so</c><00:01:36.560><c> we</c><00:01:36.720><c> start</c><00:01:36.960><c> at</c><00:01:37.200><c> 20</c>

00:01:37.910 --> 00:01:37.920 align:start position:0%
in pre-order traversal so we start at 20
 

00:01:37.920 --> 00:01:38.310 align:start position:0%
in pre-order traversal so we start at 20
add

00:01:38.310 --> 00:01:38.320 align:start position:0%
add
 

00:01:38.320 --> 00:01:41.350 align:start position:0%
add
20<00:01:38.720><c> to</c><00:01:39.040><c> our</c><00:01:40.000><c> pre-order</c>

00:01:41.350 --> 00:01:41.360 align:start position:0%
20 to our pre-order
 

00:01:41.360 --> 00:01:44.789 align:start position:0%
20 to our pre-order
go<00:01:41.759><c> left</c><00:01:42.560><c> we</c><00:01:42.720><c> see</c><00:01:43.040><c> 15</c><00:01:43.600><c> add</c><00:01:43.920><c> 15</c><00:01:44.479><c> to</c><00:01:44.640><c> the</c>

00:01:44.789 --> 00:01:44.799 align:start position:0%
go left we see 15 add 15 to the
 

00:01:44.799 --> 00:01:45.749 align:start position:0%
go left we see 15 add 15 to the
pre-order

00:01:45.749 --> 00:01:45.759 align:start position:0%
pre-order
 

00:01:45.759 --> 00:01:48.069 align:start position:0%
pre-order
15<00:01:46.079><c> doesn't</c><00:01:46.320><c> have</c><00:01:46.479><c> any</c><00:01:46.720><c> children</c><00:01:47.439><c> now</c><00:01:47.680><c> we</c><00:01:47.840><c> go</c>

00:01:48.069 --> 00:01:48.079 align:start position:0%
15 doesn't have any children now we go
 

00:01:48.079 --> 00:01:48.870 align:start position:0%
15 doesn't have any children now we go
to<00:01:48.240><c> the</c><00:01:48.479><c> right</c>

00:01:48.870 --> 00:01:48.880 align:start position:0%
to the right
 

00:01:48.880 --> 00:01:51.510 align:start position:0%
to the right
subtree<00:01:49.520><c> seven</c><00:01:49.920><c> so</c><00:01:50.159><c> add</c><00:01:50.479><c> seven</c><00:01:50.799><c> it's</c><00:01:51.040><c> our</c><00:01:51.200><c> last</c>

00:01:51.510 --> 00:01:51.520 align:start position:0%
subtree seven so add seven it's our last
 

00:01:51.520 --> 00:01:52.149 align:start position:0%
subtree seven so add seven it's our last
node

00:01:52.149 --> 00:01:52.159 align:start position:0%
node
 

00:01:52.159 --> 00:01:54.469 align:start position:0%
node
to<00:01:52.399><c> the</c><00:01:52.560><c> pre-order</c><00:01:53.040><c> traversal</c><00:01:53.600><c> right</c><00:01:54.079><c> and</c>

00:01:54.469 --> 00:01:54.479 align:start position:0%
to the pre-order traversal right and
 

00:01:54.479 --> 00:01:56.230 align:start position:0%
to the pre-order traversal right and
this<00:01:54.799><c> actually</c><00:01:55.280><c> take</c><00:01:55.439><c> a</c><00:01:55.520><c> look</c><00:01:55.680><c> at</c><00:01:55.759><c> this</c><00:01:56.000><c> take</c><00:01:56.159><c> a</c>

00:01:56.230 --> 00:01:56.240 align:start position:0%
this actually take a look at this take a
 

00:01:56.240 --> 00:01:57.830 align:start position:0%
this actually take a look at this take a
look<00:01:56.399><c> at</c><00:01:56.479><c> all</c><00:01:56.640><c> the</c><00:01:56.719><c> values</c><00:01:57.200><c> it</c><00:01:57.360><c> matches</c>

00:01:57.830 --> 00:01:57.840 align:start position:0%
look at all the values it matches
 

00:01:57.840 --> 00:01:58.469 align:start position:0%
look at all the values it matches
exactly

00:01:58.469 --> 00:01:58.479 align:start position:0%
exactly
 

00:01:58.479 --> 00:02:01.670 align:start position:0%
exactly
with<00:01:58.719><c> the</c><00:01:59.040><c> input</c><00:01:59.680><c> so</c><00:01:59.920><c> this</c><00:02:00.320><c> is</c><00:02:00.560><c> the</c><00:02:01.360><c> uh</c>

00:02:01.670 --> 00:02:01.680 align:start position:0%
with the input so this is the uh
 

00:02:01.680 --> 00:02:03.350 align:start position:0%
with the input so this is the uh
pre-order<00:02:02.159><c> traversal</c><00:02:02.719><c> now</c><00:02:02.880><c> let's</c><00:02:03.119><c> just</c>

00:02:03.350 --> 00:02:03.360 align:start position:0%
pre-order traversal now let's just
 

00:02:03.360 --> 00:02:05.749 align:start position:0%
pre-order traversal now let's just
validate<00:02:04.000><c> the</c><00:02:04.320><c> in-order</c><00:02:04.880><c> traversal</c>

00:02:05.749 --> 00:02:05.759 align:start position:0%
validate the in-order traversal
 

00:02:05.759 --> 00:02:08.869 align:start position:0%
validate the in-order traversal
as<00:02:06.000><c> well</c><00:02:06.479><c> inorder</c><00:02:07.040><c> traversal</c><00:02:07.680><c> is</c><00:02:08.080><c> we</c><00:02:08.319><c> start</c><00:02:08.720><c> at</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
as well inorder traversal is we start at
 

00:02:08.879 --> 00:02:09.270 align:start position:0%
as well inorder traversal is we start at
the

00:02:09.270 --> 00:02:09.280 align:start position:0%
the
 

00:02:09.280 --> 00:02:12.550 align:start position:0%
the
root<00:02:09.920><c> right</c><00:02:10.479><c> we</c><00:02:10.720><c> take</c><00:02:11.039><c> care</c><00:02:11.200><c> of</c><00:02:11.440><c> the</c><00:02:11.599><c> entire</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
root right we take care of the entire
 

00:02:12.560 --> 00:02:15.910 align:start position:0%
root right we take care of the entire
left<00:02:12.959><c> subtree</c><00:02:13.760><c> first</c><00:02:14.720><c> then</c><00:02:15.040><c> we</c><00:02:15.280><c> take</c><00:02:15.520><c> care</c><00:02:15.760><c> of</c>

00:02:15.910 --> 00:02:15.920 align:start position:0%
left subtree first then we take care of
 

00:02:15.920 --> 00:02:16.949 align:start position:0%
left subtree first then we take care of
the<00:02:16.160><c> root</c><00:02:16.480><c> node</c>

00:02:16.949 --> 00:02:16.959 align:start position:0%
the root node
 

00:02:16.959 --> 00:02:19.110 align:start position:0%
the root node
and<00:02:17.360><c> then</c><00:02:17.599><c> we</c><00:02:17.840><c> take</c><00:02:18.160><c> care</c><00:02:18.480><c> of</c><00:02:18.640><c> the</c><00:02:18.800><c> right</c>

00:02:19.110 --> 00:02:19.120 align:start position:0%
and then we take care of the right
 

00:02:19.120 --> 00:02:20.229 align:start position:0%
and then we take care of the right
subtree<00:02:19.760><c> with</c>

00:02:20.229 --> 00:02:20.239 align:start position:0%
subtree with
 

00:02:20.239 --> 00:02:22.630 align:start position:0%
subtree with
in<00:02:20.560><c> order</c><00:02:20.959><c> traversal</c><00:02:21.440><c> that's</c><00:02:22.000><c> the</c><00:02:22.239><c> general</c>

00:02:22.630 --> 00:02:22.640 align:start position:0%
in order traversal that's the general
 

00:02:22.640 --> 00:02:24.550 align:start position:0%
in order traversal that's the general
order<00:02:23.040><c> so</c><00:02:23.280><c> let's</c><00:02:23.599><c> validate</c>

00:02:24.550 --> 00:02:24.560 align:start position:0%
order so let's validate
 

00:02:24.560 --> 00:02:26.949 align:start position:0%
order so let's validate
the<00:02:24.800><c> inorder</c><00:02:25.280><c> traversal</c><00:02:25.840><c> of</c><00:02:26.000><c> this</c><00:02:26.239><c> tree</c><00:02:26.560><c> so</c>

00:02:26.949 --> 00:02:26.959 align:start position:0%
the inorder traversal of this tree so
 

00:02:26.959 --> 00:02:27.830 align:start position:0%
the inorder traversal of this tree so
we're<00:02:27.200><c> starting</c>

00:02:27.830 --> 00:02:27.840 align:start position:0%
we're starting
 

00:02:27.840 --> 00:02:30.070 align:start position:0%
we're starting
at<00:02:28.160><c> one</c><00:02:28.480><c> we're</c><00:02:29.040><c> we're</c><00:02:29.200><c> starting</c><00:02:29.520><c> at</c><00:02:29.599><c> the</c><00:02:29.760><c> root</c>

00:02:30.070 --> 00:02:30.080 align:start position:0%
at one we're we're starting at the root
 

00:02:30.080 --> 00:02:31.670 align:start position:0%
at one we're we're starting at the root
three<00:02:30.319><c> but</c><00:02:30.480><c> we're</c><00:02:30.640><c> not</c><00:02:30.800><c> going</c><00:02:30.879><c> to</c><00:02:31.040><c> add</c><00:02:31.360><c> three</c>

00:02:31.670 --> 00:02:31.680 align:start position:0%
three but we're not going to add three
 

00:02:31.680 --> 00:02:33.270 align:start position:0%
three but we're not going to add three
yet<00:02:32.000><c> first</c><00:02:32.319><c> we're</c><00:02:32.480><c> gonna</c><00:02:32.640><c> do</c><00:02:32.800><c> the</c><00:02:33.040><c> left</c>

00:02:33.270 --> 00:02:33.280 align:start position:0%
yet first we're gonna do the left
 

00:02:33.280 --> 00:02:33.990 align:start position:0%
yet first we're gonna do the left
subtree

00:02:33.990 --> 00:02:34.000 align:start position:0%
subtree
 

00:02:34.000 --> 00:02:36.470 align:start position:0%
subtree
we<00:02:34.160><c> see</c><00:02:34.319><c> we</c><00:02:34.480><c> have</c><00:02:34.640><c> a</c><00:02:34.800><c> nine</c><00:02:35.360><c> the</c><00:02:35.599><c> nine</c><00:02:36.160><c> does</c><00:02:36.319><c> not</c>

00:02:36.470 --> 00:02:36.480 align:start position:0%
we see we have a nine the nine does not
 

00:02:36.480 --> 00:02:38.550 align:start position:0%
we see we have a nine the nine does not
have<00:02:36.640><c> any</c><00:02:36.959><c> left</c><00:02:37.280><c> or</c><00:02:37.519><c> right</c><00:02:37.840><c> children</c><00:02:38.239><c> so</c><00:02:38.400><c> now</c>

00:02:38.550 --> 00:02:38.560 align:start position:0%
have any left or right children so now
 

00:02:38.560 --> 00:02:40.150 align:start position:0%
have any left or right children so now
we<00:02:38.720><c> can</c><00:02:38.879><c> add</c><00:02:39.200><c> that</c><00:02:39.519><c> nine</c>

00:02:40.150 --> 00:02:40.160 align:start position:0%
we can add that nine
 

00:02:40.160 --> 00:02:42.070 align:start position:0%
we can add that nine
to<00:02:40.480><c> our</c><00:02:40.800><c> inorder</c><00:02:41.200><c> traversal</c><00:02:41.680><c> remember</c><00:02:41.920><c> we're</c>

00:02:42.070 --> 00:02:42.080 align:start position:0%
to our inorder traversal remember we're
 

00:02:42.080 --> 00:02:43.190 align:start position:0%
to our inorder traversal remember we're
doing<00:02:42.319><c> this</c><00:02:42.560><c> in</c><00:02:42.800><c> order</c>

00:02:43.190 --> 00:02:43.200 align:start position:0%
doing this in order
 

00:02:43.200 --> 00:02:45.750 align:start position:0%
doing this in order
left<00:02:43.440><c> to</c><00:02:43.599><c> right</c><00:02:44.239><c> we</c><00:02:44.400><c> go</c><00:02:44.720><c> back</c><00:02:44.959><c> up</c><00:02:45.120><c> to</c><00:02:45.200><c> the</c><00:02:45.360><c> root</c>

00:02:45.750 --> 00:02:45.760 align:start position:0%
left to right we go back up to the root
 

00:02:45.760 --> 00:02:47.750 align:start position:0%
left to right we go back up to the root
now<00:02:46.000><c> we</c><00:02:46.160><c> can</c><00:02:46.319><c> process</c><00:02:46.800><c> the</c><00:02:46.959><c> root</c><00:02:47.200><c> we</c><00:02:47.360><c> can</c><00:02:47.519><c> take</c>

00:02:47.750 --> 00:02:47.760 align:start position:0%
now we can process the root we can take
 

00:02:47.760 --> 00:02:49.270 align:start position:0%
now we can process the root we can take
three<00:02:48.160><c> and</c><00:02:48.319><c> add</c><00:02:48.480><c> it</c><00:02:48.560><c> to</c><00:02:48.640><c> the</c><00:02:48.800><c> inorder</c>

00:02:49.270 --> 00:02:49.280 align:start position:0%
three and add it to the inorder
 

00:02:49.280 --> 00:02:50.390 align:start position:0%
three and add it to the inorder
traversal

00:02:50.390 --> 00:02:50.400 align:start position:0%
traversal
 

00:02:50.400 --> 00:02:52.630 align:start position:0%
traversal
and<00:02:50.800><c> now</c><00:02:51.440><c> we're</c><00:02:51.599><c> going</c><00:02:51.680><c> to</c><00:02:51.840><c> do</c><00:02:52.000><c> the</c><00:02:52.239><c> entire</c>

00:02:52.630 --> 00:02:52.640 align:start position:0%
and now we're going to do the entire
 

00:02:52.640 --> 00:02:53.509 align:start position:0%
and now we're going to do the entire
right<00:02:52.879><c> subtree</c>

00:02:53.509 --> 00:02:53.519 align:start position:0%
right subtree
 

00:02:53.519 --> 00:02:55.750 align:start position:0%
right subtree
so<00:02:53.760><c> we</c><00:02:53.920><c> get</c><00:02:54.160><c> to</c><00:02:54.400><c> 20</c><00:02:54.959><c> but</c><00:02:55.120><c> we're</c><00:02:55.280><c> not</c><00:02:55.599><c> we're</c>

00:02:55.750 --> 00:02:55.760 align:start position:0%
so we get to 20 but we're not we're
 

00:02:55.760 --> 00:02:56.949 align:start position:0%
so we get to 20 but we're not we're
going<00:02:55.840><c> to</c><00:02:55.920><c> wait</c><00:02:56.160><c> for</c><00:02:56.319><c> 20.</c><00:02:56.560><c> we're</c><00:02:56.720><c> going</c><00:02:56.800><c> to</c>

00:02:56.949 --> 00:02:56.959 align:start position:0%
going to wait for 20. we're going to
 

00:02:56.959 --> 00:02:58.229 align:start position:0%
going to wait for 20. we're going to
first<00:02:57.280><c> do</c><00:02:57.440><c> the</c><00:02:57.840><c> left</c>

00:02:58.229 --> 00:02:58.239 align:start position:0%
first do the left
 

00:02:58.239 --> 00:03:01.750 align:start position:0%
first do the left
subtree<00:02:58.879><c> 15</c><00:02:59.360><c> 15</c><00:02:59.760><c> is</c><00:02:59.920><c> the</c><00:03:00.159><c> only</c><00:03:00.560><c> value</c><00:03:00.959><c> here</c><00:03:01.200><c> so</c>

00:03:01.750 --> 00:03:01.760 align:start position:0%
subtree 15 15 is the only value here so
 

00:03:01.760 --> 00:03:04.149 align:start position:0%
subtree 15 15 is the only value here so
it<00:03:01.920><c> doesn't</c><00:03:02.159><c> have</c><00:03:02.239><c> any</c><00:03:02.480><c> children</c><00:03:03.280><c> add</c><00:03:03.599><c> 15</c><00:03:04.000><c> to</c>

00:03:04.149 --> 00:03:04.159 align:start position:0%
it doesn't have any children add 15 to
 

00:03:04.159 --> 00:03:05.750 align:start position:0%
it doesn't have any children add 15 to
the<00:03:04.319><c> inorder</c><00:03:04.800><c> traversal</c>

00:03:05.750 --> 00:03:05.760 align:start position:0%
the inorder traversal
 

00:03:05.760 --> 00:03:08.630 align:start position:0%
the inorder traversal
now<00:03:06.080><c> we</c><00:03:06.239><c> can</c><00:03:06.480><c> add</c><00:03:07.040><c> 20</c><00:03:07.760><c> because</c><00:03:08.000><c> we've</c><00:03:08.239><c> done</c><00:03:08.480><c> the</c>

00:03:08.630 --> 00:03:08.640 align:start position:0%
now we can add 20 because we've done the
 

00:03:08.640 --> 00:03:09.509 align:start position:0%
now we can add 20 because we've done the
left<00:03:08.879><c> subtree</c>

00:03:09.509 --> 00:03:09.519 align:start position:0%
left subtree
 

00:03:09.519 --> 00:03:12.070 align:start position:0%
left subtree
20<00:03:10.000><c> is</c><00:03:10.239><c> added</c><00:03:10.640><c> and</c><00:03:10.800><c> then</c><00:03:11.120><c> last</c><00:03:11.519><c> we</c><00:03:11.680><c> go</c><00:03:11.840><c> to</c><00:03:12.000><c> the</c>

00:03:12.070 --> 00:03:12.080 align:start position:0%
20 is added and then last we go to the
 

00:03:12.080 --> 00:03:12.869 align:start position:0%
20 is added and then last we go to the
right<00:03:12.319><c> subtree</c>

00:03:12.869 --> 00:03:12.879 align:start position:0%
right subtree
 

00:03:12.879 --> 00:03:15.190 align:start position:0%
right subtree
only<00:03:13.200><c> one</c><00:03:13.440><c> value</c><00:03:14.080><c> seven</c><00:03:14.480><c> let's</c><00:03:14.720><c> add</c><00:03:14.959><c> that</c>

00:03:15.190 --> 00:03:15.200 align:start position:0%
only one value seven let's add that
 

00:03:15.200 --> 00:03:15.910 align:start position:0%
only one value seven let's add that
seven<00:03:15.599><c> to</c>

00:03:15.910 --> 00:03:15.920 align:start position:0%
seven to
 

00:03:15.920 --> 00:03:18.790 align:start position:0%
seven to
our<00:03:16.319><c> in</c><00:03:16.560><c> order</c><00:03:17.840><c> now</c><00:03:18.000><c> let's</c><00:03:18.239><c> take</c><00:03:18.400><c> a</c><00:03:18.480><c> look</c><00:03:18.720><c> at</c>

00:03:18.790 --> 00:03:18.800 align:start position:0%
our in order now let's take a look at
 

00:03:18.800 --> 00:03:19.190 align:start position:0%
our in order now let's take a look at
these

00:03:19.190 --> 00:03:19.200 align:start position:0%
these
 

00:03:19.200 --> 00:03:22.149 align:start position:0%
these
five<00:03:19.599><c> values</c><00:03:20.480><c> notice</c><00:03:20.959><c> how</c><00:03:21.200><c> they</c><00:03:21.519><c> are</c><00:03:21.760><c> the</c>

00:03:22.149 --> 00:03:22.159 align:start position:0%
five values notice how they are the
 

00:03:22.159 --> 00:03:23.030 align:start position:0%
five values notice how they are the
exact<00:03:22.640><c> same</c>

00:03:23.030 --> 00:03:23.040 align:start position:0%
exact same
 

00:03:23.040 --> 00:03:25.910 align:start position:0%
exact same
five<00:03:23.360><c> values</c><00:03:24.000><c> in</c><00:03:24.159><c> the</c><00:03:24.319><c> exact</c><00:03:24.640><c> same</c><00:03:24.879><c> order</c><00:03:25.599><c> as</c>

00:03:25.910 --> 00:03:25.920 align:start position:0%
five values in the exact same order as
 

00:03:25.920 --> 00:03:27.750 align:start position:0%
five values in the exact same order as
that<00:03:26.159><c> in-order</c><00:03:26.720><c> traversal</c><00:03:27.200><c> that</c><00:03:27.360><c> we</c><00:03:27.519><c> were</c>

00:03:27.750 --> 00:03:27.760 align:start position:0%
that in-order traversal that we were
 

00:03:27.760 --> 00:03:28.390 align:start position:0%
that in-order traversal that we were
given

00:03:28.390 --> 00:03:28.400 align:start position:0%
given
 

00:03:28.400 --> 00:03:31.509 align:start position:0%
given
so<00:03:29.040><c> we</c><00:03:29.200><c> can</c><00:03:29.519><c> see</c><00:03:30.319><c> that</c><00:03:30.720><c> the</c>

00:03:31.509 --> 00:03:31.519 align:start position:0%
so we can see that the
 

00:03:31.519 --> 00:03:33.670 align:start position:0%
so we can see that the
that<00:03:31.920><c> what</c><00:03:32.080><c> they</c><00:03:32.239><c> gave</c><00:03:32.480><c> us</c><00:03:32.640><c> was</c><00:03:32.879><c> correct</c><00:03:33.519><c> but</c>

00:03:33.670 --> 00:03:33.680 align:start position:0%
that what they gave us was correct but
 

00:03:33.680 --> 00:03:35.670 align:start position:0%
that what they gave us was correct but
now<00:03:33.920><c> the</c><00:03:34.159><c> question</c><00:03:34.640><c> remains</c><00:03:35.120><c> how</c><00:03:35.280><c> can</c><00:03:35.519><c> we</c>

00:03:35.670 --> 00:03:35.680 align:start position:0%
now the question remains how can we
 

00:03:35.680 --> 00:03:36.470 align:start position:0%
now the question remains how can we
actually<00:03:36.080><c> take</c>

00:03:36.470 --> 00:03:36.480 align:start position:0%
actually take
 

00:03:36.480 --> 00:03:40.070 align:start position:0%
actually take
these<00:03:36.959><c> two</c><00:03:38.000><c> uh</c><00:03:38.560><c> arrays</c><00:03:39.120><c> these</c><00:03:39.360><c> two</c>

00:03:40.070 --> 00:03:40.080 align:start position:0%
these two uh arrays these two
 

00:03:40.080 --> 00:03:42.550 align:start position:0%
these two uh arrays these two
traversals<00:03:40.879><c> and</c><00:03:41.120><c> construct</c><00:03:41.840><c> this</c><00:03:42.080><c> tree</c><00:03:42.400><c> well</c>

00:03:42.550 --> 00:03:42.560 align:start position:0%
traversals and construct this tree well
 

00:03:42.560 --> 00:03:44.070 align:start position:0%
traversals and construct this tree well
it's<00:03:42.720><c> definitely</c><00:03:43.280><c> possible</c>

00:03:44.070 --> 00:03:44.080 align:start position:0%
it's definitely possible
 

00:03:44.080 --> 00:03:46.390 align:start position:0%
it's definitely possible
let<00:03:44.239><c> me</c><00:03:44.400><c> show</c><00:03:44.560><c> you</c><00:03:44.720><c> how</c><00:03:44.879><c> to</c><00:03:45.040><c> do</c><00:03:45.280><c> that</c><00:03:45.599><c> right</c><00:03:45.920><c> now</c>

00:03:46.390 --> 00:03:46.400 align:start position:0%
let me show you how to do that right now
 

00:03:46.400 --> 00:03:47.589 align:start position:0%
let me show you how to do that right now
so<00:03:46.560><c> i</c><00:03:46.640><c> just</c><00:03:46.799><c> want</c><00:03:46.959><c> to</c><00:03:47.040><c> let</c><00:03:47.200><c> you</c><00:03:47.360><c> know</c><00:03:47.519><c> that</c>

00:03:47.589 --> 00:03:47.599 align:start position:0%
so i just want to let you know that
 

00:03:47.599 --> 00:03:48.470 align:start position:0%
so i just want to let you know that
there's<00:03:47.920><c> actually</c>

00:03:48.470 --> 00:03:48.480 align:start position:0%
there's actually
 

00:03:48.480 --> 00:03:51.509 align:start position:0%
there's actually
two<00:03:49.280><c> things</c><00:03:49.840><c> two</c><00:03:50.239><c> main</c><00:03:50.720><c> facts</c><00:03:51.120><c> that</c><00:03:51.280><c> we're</c>

00:03:51.509 --> 00:03:51.519 align:start position:0%
two things two main facts that we're
 

00:03:51.519 --> 00:03:53.670 align:start position:0%
two things two main facts that we're
going<00:03:51.599><c> to</c><00:03:51.680><c> be</c><00:03:51.840><c> using</c><00:03:52.319><c> to</c><00:03:52.560><c> construct</c><00:03:53.040><c> this</c><00:03:53.360><c> tree</c>

00:03:53.670 --> 00:03:53.680 align:start position:0%
going to be using to construct this tree
 

00:03:53.680 --> 00:03:54.789 align:start position:0%
going to be using to construct this tree
so<00:03:53.920><c> the</c><00:03:54.239><c> first</c>

00:03:54.789 --> 00:03:54.799 align:start position:0%
so the first
 

00:03:54.799 --> 00:03:58.309 align:start position:0%
so the first
fact<00:03:55.360><c> is</c><00:03:56.080><c> that</c><00:03:56.560><c> the</c><00:03:57.200><c> first</c><00:03:57.680><c> value</c>

00:03:58.309 --> 00:03:58.319 align:start position:0%
fact is that the first value
 

00:03:58.319 --> 00:04:01.030 align:start position:0%
fact is that the first value
in<00:03:58.560><c> pre-order</c><00:03:59.200><c> traversal</c><00:04:00.080><c> is</c><00:04:00.319><c> always</c><00:04:00.799><c> going</c>

00:04:01.030 --> 00:04:01.040 align:start position:0%
in pre-order traversal is always going
 

00:04:01.040 --> 00:04:01.670 align:start position:0%
in pre-order traversal is always going
to<00:04:01.200><c> be</c><00:04:01.360><c> the</c>

00:04:01.670 --> 00:04:01.680 align:start position:0%
to be the
 

00:04:01.680 --> 00:04:04.070 align:start position:0%
to be the
root<00:04:02.000><c> right</c><00:04:02.560><c> we</c><00:04:02.720><c> remember</c><00:04:03.200><c> when</c><00:04:03.439><c> we</c><00:04:03.680><c> do</c>

00:04:04.070 --> 00:04:04.080 align:start position:0%
root right we remember when we do
 

00:04:04.080 --> 00:04:06.149 align:start position:0%
root right we remember when we do
pre-order<00:04:04.799><c> traversal</c><00:04:05.519><c> right</c>

00:04:06.149 --> 00:04:06.159 align:start position:0%
pre-order traversal right
 

00:04:06.159 --> 00:04:08.869 align:start position:0%
pre-order traversal right
we're<00:04:06.480><c> always</c><00:04:07.040><c> processing</c><00:04:07.599><c> the</c><00:04:07.840><c> root</c><00:04:08.319><c> first</c>

00:04:08.869 --> 00:04:08.879 align:start position:0%
we're always processing the root first
 

00:04:08.879 --> 00:04:10.630 align:start position:0%
we're always processing the root first
so<00:04:09.120><c> if</c><00:04:09.439><c> i</c><00:04:09.599><c> was</c><00:04:09.920><c> taking</c>

00:04:10.630 --> 00:04:10.640 align:start position:0%
so if i was taking
 

00:04:10.640 --> 00:04:13.270 align:start position:0%
so if i was taking
the<00:04:11.040><c> pre-order</c><00:04:11.519><c> traversal</c><00:04:12.000><c> that</c><00:04:12.159><c> we're</c><00:04:12.480><c> given</c>

00:04:13.270 --> 00:04:13.280 align:start position:0%
the pre-order traversal that we're given
 

00:04:13.280 --> 00:04:13.990 align:start position:0%
the pre-order traversal that we're given
right<00:04:13.439><c> we</c><00:04:13.439><c> we</c>

00:04:13.990 --> 00:04:14.000 align:start position:0%
right we we
 

00:04:14.000 --> 00:04:15.830 align:start position:0%
right we we
remember<00:04:14.400><c> this</c><00:04:14.560><c> is</c><00:04:14.720><c> the</c><00:04:14.799><c> pre-order</c><00:04:15.280><c> traversal</c>

00:04:15.830 --> 00:04:15.840 align:start position:0%
remember this is the pre-order traversal
 

00:04:15.840 --> 00:04:17.270 align:start position:0%
remember this is the pre-order traversal
that<00:04:15.920><c> we're</c><00:04:16.160><c> given</c><00:04:16.880><c> the</c>

00:04:17.270 --> 00:04:17.280 align:start position:0%
that we're given the
 

00:04:17.280 --> 00:04:20.390 align:start position:0%
that we're given the
first<00:04:18.000><c> value</c><00:04:18.720><c> in</c><00:04:18.880><c> pre-order</c><00:04:19.359><c> traversal</c><00:04:20.000><c> is</c>

00:04:20.390 --> 00:04:20.400 align:start position:0%
first value in pre-order traversal is
 

00:04:20.400 --> 00:04:23.430 align:start position:0%
first value in pre-order traversal is
always<00:04:21.199><c> going</c><00:04:21.519><c> to</c><00:04:21.840><c> be</c><00:04:22.400><c> the</c><00:04:22.720><c> root</c><00:04:23.120><c> so</c>

00:04:23.430 --> 00:04:23.440 align:start position:0%
always going to be the root so
 

00:04:23.440 --> 00:04:25.550 align:start position:0%
always going to be the root so
this<00:04:23.600><c> is</c><00:04:23.759><c> the</c><00:04:23.919><c> first</c><00:04:24.160><c> value</c><00:04:24.560><c> three</c><00:04:24.960><c> it's</c>

00:04:25.550 --> 00:04:25.560 align:start position:0%
this is the first value three it's
 

00:04:25.560 --> 00:04:26.870 align:start position:0%
this is the first value three it's
guaranteed

00:04:26.870 --> 00:04:26.880 align:start position:0%
guaranteed
 

00:04:26.880 --> 00:04:29.350 align:start position:0%
guaranteed
to<00:04:27.120><c> be</c><00:04:27.680><c> the</c><00:04:28.000><c> root</c><00:04:28.479><c> because</c><00:04:28.800><c> that's</c><00:04:29.120><c> how</c>

00:04:29.350 --> 00:04:29.360 align:start position:0%
to be the root because that's how
 

00:04:29.360 --> 00:04:31.670 align:start position:0%
to be the root because that's how
pre-order<00:04:30.080><c> traversal</c><00:04:30.639><c> works</c><00:04:31.040><c> the</c><00:04:31.280><c> first</c>

00:04:31.670 --> 00:04:31.680 align:start position:0%
pre-order traversal works the first
 

00:04:31.680 --> 00:04:32.390 align:start position:0%
pre-order traversal works the first
value

00:04:32.390 --> 00:04:32.400 align:start position:0%
value
 

00:04:32.400 --> 00:04:34.469 align:start position:0%
value
in<00:04:32.560><c> pre-order</c><00:04:33.040><c> traversal</c><00:04:33.600><c> is</c><00:04:33.840><c> always</c><00:04:34.240><c> the</c>

00:04:34.469 --> 00:04:34.479 align:start position:0%
in pre-order traversal is always the
 

00:04:34.479 --> 00:04:36.950 align:start position:0%
in pre-order traversal is always the
root<00:04:34.800><c> node</c><00:04:35.199><c> now</c><00:04:35.360><c> we</c><00:04:35.680><c> don't</c><00:04:36.080><c> know</c><00:04:36.400><c> about</c><00:04:36.720><c> the</c>

00:04:36.950 --> 00:04:36.960 align:start position:0%
root node now we don't know about the
 

00:04:36.960 --> 00:04:37.909 align:start position:0%
root node now we don't know about the
rest<00:04:37.360><c> of</c><00:04:37.520><c> these</c>

00:04:37.909 --> 00:04:37.919 align:start position:0%
rest of these
 

00:04:37.919 --> 00:04:41.350 align:start position:0%
rest of these
right<00:04:38.639><c> but</c><00:04:39.120><c> we</c><00:04:39.360><c> can</c><00:04:39.800><c> recursively</c>

00:04:41.350 --> 00:04:41.360 align:start position:0%
right but we can recursively
 

00:04:41.360 --> 00:04:43.909 align:start position:0%
right but we can recursively
construct<00:04:42.320><c> now</c><00:04:42.560><c> the</c><00:04:42.720><c> left</c><00:04:43.040><c> subtree</c><00:04:43.600><c> and</c><00:04:43.759><c> the</c>

00:04:43.909 --> 00:04:43.919 align:start position:0%
construct now the left subtree and the
 

00:04:43.919 --> 00:04:45.430 align:start position:0%
construct now the left subtree and the
right<00:04:44.240><c> subtree</c><00:04:44.800><c> right</c><00:04:44.960><c> we</c><00:04:45.120><c> can</c>

00:04:45.430 --> 00:04:45.440 align:start position:0%
right subtree right we can
 

00:04:45.440 --> 00:04:47.670 align:start position:0%
right subtree right we can
we<00:04:45.600><c> can</c><00:04:46.000><c> we're</c><00:04:46.240><c> done</c><00:04:46.400><c> with</c><00:04:46.560><c> this</c><00:04:46.880><c> three</c><00:04:47.199><c> right</c>

00:04:47.670 --> 00:04:47.680 align:start position:0%
we can we're done with this three right
 

00:04:47.680 --> 00:04:49.990 align:start position:0%
we can we're done with this three right
now<00:04:48.000><c> our</c><00:04:48.160><c> goal</c><00:04:48.479><c> is</c><00:04:48.639><c> to</c><00:04:48.800><c> reconstruct</c><00:04:49.520><c> the</c><00:04:49.680><c> left</c>

00:04:49.990 --> 00:04:50.000 align:start position:0%
now our goal is to reconstruct the left
 

00:04:50.000 --> 00:04:50.629 align:start position:0%
now our goal is to reconstruct the left
subtree

00:04:50.629 --> 00:04:50.639 align:start position:0%
subtree
 

00:04:50.639 --> 00:04:54.230 align:start position:0%
subtree
hey<00:04:50.880><c> lucky</c><00:04:51.280><c> for</c><00:04:51.520><c> us</c><00:04:51.919><c> the</c><00:04:52.400><c> first</c><00:04:53.120><c> value</c><00:04:53.680><c> here</c>

00:04:54.230 --> 00:04:54.240 align:start position:0%
hey lucky for us the first value here
 

00:04:54.240 --> 00:04:57.909 align:start position:0%
hey lucky for us the first value here
is<00:04:54.720><c> always</c><00:04:55.280><c> going</c><00:04:55.600><c> to</c><00:04:55.759><c> be</c><00:04:56.080><c> the</c><00:04:56.320><c> root</c><00:04:57.199><c> of</c>

00:04:57.909 --> 00:04:57.919 align:start position:0%
is always going to be the root of
 

00:04:57.919 --> 00:05:00.710 align:start position:0%
is always going to be the root of
the<00:04:58.320><c> of</c><00:04:58.479><c> the</c><00:04:58.720><c> left</c><00:04:59.120><c> subtree</c><00:04:59.759><c> right</c><00:05:00.400><c> because</c>

00:05:00.710 --> 00:05:00.720 align:start position:0%
the of the left subtree right because
 

00:05:00.720 --> 00:05:02.629 align:start position:0%
the of the left subtree right because
that's<00:05:00.960><c> how</c><00:05:01.199><c> pre-order</c><00:05:01.680><c> traversal</c><00:05:02.240><c> works</c>

00:05:02.629 --> 00:05:02.639 align:start position:0%
that's how pre-order traversal works
 

00:05:02.639 --> 00:05:03.189 align:start position:0%
that's how pre-order traversal works
right

00:05:03.189 --> 00:05:03.199 align:start position:0%
right
 

00:05:03.199 --> 00:05:05.029 align:start position:0%
right
so<00:05:03.680><c> that's</c><00:05:04.080><c> one</c><00:05:04.320><c> thing</c><00:05:04.560><c> that</c><00:05:04.639><c> we're</c><00:05:04.800><c> going</c><00:05:04.880><c> to</c>

00:05:05.029 --> 00:05:05.039 align:start position:0%
so that's one thing that we're going to
 

00:05:05.039 --> 00:05:06.950 align:start position:0%
so that's one thing that we're going to
use<00:05:05.280><c> the</c><00:05:05.600><c> first</c><00:05:06.080><c> value</c><00:05:06.639><c> is</c>

00:05:06.950 --> 00:05:06.960 align:start position:0%
use the first value is
 

00:05:06.960 --> 00:05:09.029 align:start position:0%
use the first value is
always<00:05:07.520><c> going</c><00:05:07.840><c> to</c><00:05:08.000><c> be</c><00:05:08.240><c> the</c><00:05:08.400><c> root</c><00:05:08.639><c> and</c><00:05:08.720><c> then</c><00:05:08.880><c> we</c>

00:05:09.029 --> 00:05:09.039 align:start position:0%
always going to be the root and then we
 

00:05:09.039 --> 00:05:09.990 align:start position:0%
always going to be the root and then we
can<00:05:09.199><c> take</c><00:05:09.440><c> the</c><00:05:09.680><c> sub</c>

00:05:09.990 --> 00:05:10.000 align:start position:0%
can take the sub
 

00:05:10.000 --> 00:05:11.749 align:start position:0%
can take the sub
list<00:05:10.320><c> right</c><00:05:10.479><c> we</c><00:05:10.639><c> can</c><00:05:10.800><c> remove</c><00:05:11.199><c> the</c><00:05:11.360><c> three</c><00:05:11.600><c> we</c>

00:05:11.749 --> 00:05:11.759 align:start position:0%
list right we can remove the three we
 

00:05:11.759 --> 00:05:13.110 align:start position:0%
list right we can remove the three we
don't<00:05:11.919><c> need</c><00:05:12.080><c> to</c><00:05:12.160><c> look</c><00:05:12.320><c> at</c><00:05:12.400><c> it</c><00:05:12.479><c> anymore</c><00:05:12.800><c> then</c><00:05:12.960><c> we</c>

00:05:13.110 --> 00:05:13.120 align:start position:0%
don't need to look at it anymore then we
 

00:05:13.120 --> 00:05:14.469 align:start position:0%
don't need to look at it anymore then we
take<00:05:13.280><c> the</c><00:05:13.440><c> sub</c><00:05:13.680><c> list</c><00:05:14.000><c> and</c><00:05:14.080><c> then</c>

00:05:14.469 --> 00:05:14.479 align:start position:0%
take the sub list and then
 

00:05:14.479 --> 00:05:15.670 align:start position:0%
take the sub list and then
basically<00:05:14.960><c> we're</c><00:05:15.120><c> going</c><00:05:15.199><c> to</c><00:05:15.280><c> do</c><00:05:15.440><c> this</c>

00:05:15.670 --> 00:05:15.680 align:start position:0%
basically we're going to do this
 

00:05:15.680 --> 00:05:17.909 align:start position:0%
basically we're going to do this
recursively<00:05:16.560><c> that's</c><00:05:16.960><c> what</c><00:05:17.120><c> i'm</c><00:05:17.280><c> telling</c><00:05:17.600><c> you</c>

00:05:17.909 --> 00:05:17.919 align:start position:0%
recursively that's what i'm telling you
 

00:05:17.919 --> 00:05:20.310 align:start position:0%
recursively that's what i'm telling you
okay<00:05:18.240><c> we</c><00:05:18.400><c> can</c><00:05:18.880><c> construct</c><00:05:19.360><c> the</c><00:05:19.600><c> root</c><00:05:20.000><c> but</c><00:05:20.160><c> we</c>

00:05:20.310 --> 00:05:20.320 align:start position:0%
okay we can construct the root but we
 

00:05:20.320 --> 00:05:22.790 align:start position:0%
okay we can construct the root but we
need<00:05:20.639><c> more</c><00:05:20.880><c> information</c><00:05:21.440><c> than</c><00:05:21.680><c> that</c><00:05:22.000><c> right</c>

00:05:22.790 --> 00:05:22.800 align:start position:0%
need more information than that right
 

00:05:22.800 --> 00:05:24.070 align:start position:0%
need more information than that right
and<00:05:22.880><c> then</c><00:05:23.039><c> we're</c><00:05:23.440><c> let's</c><00:05:23.600><c> say</c><00:05:23.759><c> we're</c><00:05:23.919><c> done</c>

00:05:24.070 --> 00:05:24.080 align:start position:0%
and then we're let's say we're done
 

00:05:24.080 --> 00:05:26.790 align:start position:0%
and then we're let's say we're done
looking<00:05:24.400><c> at</c><00:05:24.479><c> this</c><00:05:24.720><c> three</c><00:05:25.039><c> now</c><00:05:25.520><c> i</c><00:05:25.759><c> want</c><00:05:25.919><c> to</c><00:05:26.160><c> take</c>

00:05:26.790 --> 00:05:26.800 align:start position:0%
looking at this three now i want to take
 

00:05:26.800 --> 00:05:30.390 align:start position:0%
looking at this three now i want to take
this<00:05:27.759><c> uh</c><00:05:28.560><c> array</c><00:05:28.960><c> right</c><00:05:29.199><c> and</c><00:05:29.360><c> i</c><00:05:29.440><c> want</c><00:05:29.600><c> to</c><00:05:29.759><c> know</c>

00:05:30.390 --> 00:05:30.400 align:start position:0%
this uh array right and i want to know
 

00:05:30.400 --> 00:05:33.029 align:start position:0%
this uh array right and i want to know
which<00:05:31.039><c> values</c><00:05:31.520><c> are</c><00:05:31.680><c> going</c><00:05:31.759><c> to</c><00:05:31.840><c> go</c><00:05:32.160><c> in</c><00:05:32.320><c> the</c><00:05:32.639><c> left</c>

00:05:33.029 --> 00:05:33.039 align:start position:0%
which values are going to go in the left
 

00:05:33.039 --> 00:05:34.790 align:start position:0%
which values are going to go in the left
subtree<00:05:33.600><c> and</c><00:05:33.759><c> which</c><00:05:34.000><c> are</c><00:05:34.160><c> going</c><00:05:34.240><c> to</c><00:05:34.320><c> go</c><00:05:34.479><c> on</c><00:05:34.639><c> the</c>

00:05:34.790 --> 00:05:34.800 align:start position:0%
subtree and which are going to go on the
 

00:05:34.800 --> 00:05:35.670 align:start position:0%
subtree and which are going to go on the
right<00:05:35.039><c> subtree</c>

00:05:35.670 --> 00:05:35.680 align:start position:0%
right subtree
 

00:05:35.680 --> 00:05:37.909 align:start position:0%
right subtree
from<00:05:36.080><c> looking</c><00:05:36.400><c> at</c><00:05:36.560><c> the</c><00:05:36.639><c> actual</c><00:05:37.039><c> tree</c><00:05:37.360><c> itself</c>

00:05:37.909 --> 00:05:37.919 align:start position:0%
from looking at the actual tree itself
 

00:05:37.919 --> 00:05:39.990 align:start position:0%
from looking at the actual tree itself
we<00:05:38.080><c> know</c><00:05:38.320><c> the</c><00:05:38.560><c> answer</c><00:05:38.960><c> right</c><00:05:39.120><c> we</c><00:05:39.360><c> know</c><00:05:39.600><c> that</c>

00:05:39.990 --> 00:05:40.000 align:start position:0%
we know the answer right we know that
 

00:05:40.000 --> 00:05:42.390 align:start position:0%
we know the answer right we know that
this<00:05:40.240><c> is</c><00:05:40.320><c> where</c><00:05:40.560><c> we're</c><00:05:40.720><c> going</c><00:05:40.800><c> to</c><00:05:41.199><c> cut</c><00:05:41.759><c> our</c>

00:05:42.390 --> 00:05:42.400 align:start position:0%
this is where we're going to cut our
 

00:05:42.400 --> 00:05:43.189 align:start position:0%
this is where we're going to cut our
list<00:05:42.800><c> right</c>

00:05:43.189 --> 00:05:43.199 align:start position:0%
list right
 

00:05:43.199 --> 00:05:46.790 align:start position:0%
list right
the<00:05:43.600><c> 9</c><00:05:44.240><c> is</c><00:05:44.479><c> going</c><00:05:44.880><c> in</c><00:05:45.440><c> the</c><00:05:45.680><c> left</c><00:05:46.160><c> subtree</c>

00:05:46.790 --> 00:05:46.800 align:start position:0%
the 9 is going in the left subtree
 

00:05:46.800 --> 00:05:49.990 align:start position:0%
the 9 is going in the left subtree
right<00:05:47.280><c> these</c><00:05:47.680><c> three</c><00:05:48.320><c> values</c><00:05:48.880><c> are</c><00:05:49.120><c> going</c><00:05:49.520><c> in</c>

00:05:49.990 --> 00:05:50.000 align:start position:0%
right these three values are going in
 

00:05:50.000 --> 00:05:52.550 align:start position:0%
right these three values are going in
the<00:05:50.560><c> right</c><00:05:50.960><c> subtree</c><00:05:51.759><c> but</c><00:05:52.000><c> how</c><00:05:52.160><c> can</c><00:05:52.320><c> we</c>

00:05:52.550 --> 00:05:52.560 align:start position:0%
the right subtree but how can we
 

00:05:52.560 --> 00:05:53.430 align:start position:0%
the right subtree but how can we
determine<00:05:53.039><c> that</c>

00:05:53.430 --> 00:05:53.440 align:start position:0%
determine that
 

00:05:53.440 --> 00:05:55.830 align:start position:0%
determine that
well<00:05:53.680><c> that's</c><00:05:54.000><c> what</c><00:05:54.160><c> we</c><00:05:54.400><c> need</c><00:05:54.960><c> our</c><00:05:55.280><c> inorder</c>

00:05:55.830 --> 00:05:55.840 align:start position:0%
well that's what we need our inorder
 

00:05:55.840 --> 00:05:57.909 align:start position:0%
well that's what we need our inorder
traversal<00:05:56.560><c> array</c><00:05:57.120><c> for</c>

00:05:57.909 --> 00:05:57.919 align:start position:0%
traversal array for
 

00:05:57.919 --> 00:06:00.150 align:start position:0%
traversal array for
okay<00:05:58.240><c> so</c><00:05:58.479><c> now</c><00:05:59.039><c> let's</c><00:05:59.280><c> take</c><00:05:59.440><c> a</c><00:05:59.520><c> look</c><00:05:59.759><c> at</c><00:05:59.919><c> the</c>

00:06:00.150 --> 00:06:00.160 align:start position:0%
okay so now let's take a look at the
 

00:06:00.160 --> 00:06:01.990 align:start position:0%
okay so now let's take a look at the
input<00:06:00.479><c> array</c><00:06:00.800><c> we're</c><00:06:00.960><c> given</c><00:06:01.199><c> for</c><00:06:01.360><c> the</c><00:06:01.520><c> inorder</c>

00:06:01.990 --> 00:06:02.000 align:start position:0%
input array we're given for the inorder
 

00:06:02.000 --> 00:06:03.590 align:start position:0%
input array we're given for the inorder
traversal<00:06:02.639><c> and</c><00:06:02.720><c> by</c><00:06:02.880><c> the</c><00:06:02.960><c> way</c><00:06:03.199><c> let</c><00:06:03.360><c> me</c><00:06:03.440><c> just</c>

00:06:03.590 --> 00:06:03.600 align:start position:0%
traversal and by the way let me just
 

00:06:03.600 --> 00:06:04.390 align:start position:0%
traversal and by the way let me just
mention<00:06:04.000><c> that</c>

00:06:04.390 --> 00:06:04.400 align:start position:0%
mention that
 

00:06:04.400 --> 00:06:07.029 align:start position:0%
mention that
every<00:06:04.960><c> value</c><00:06:05.680><c> in</c><00:06:06.080><c> the</c><00:06:06.319><c> traversal</c><00:06:06.880><c> is</c>

00:06:07.029 --> 00:06:07.039 align:start position:0%
every value in the traversal is
 

00:06:07.039 --> 00:06:08.790 align:start position:0%
every value in the traversal is
guaranteed<00:06:07.600><c> to</c><00:06:07.759><c> be</c><00:06:08.000><c> unique</c>

00:06:08.790 --> 00:06:08.800 align:start position:0%
guaranteed to be unique
 

00:06:08.800 --> 00:06:11.270 align:start position:0%
guaranteed to be unique
that's<00:06:09.120><c> true</c><00:06:09.520><c> for</c><00:06:10.160><c> both</c><00:06:10.479><c> of</c><00:06:10.560><c> the</c><00:06:10.720><c> traversals</c>

00:06:11.270 --> 00:06:11.280 align:start position:0%
that's true for both of the traversals
 

00:06:11.280 --> 00:06:12.950 align:start position:0%
that's true for both of the traversals
the<00:06:11.440><c> inorder</c><00:06:11.919><c> and</c><00:06:12.000><c> the</c><00:06:12.160><c> pre-order</c><00:06:12.639><c> every</c>

00:06:12.950 --> 00:06:12.960 align:start position:0%
the inorder and the pre-order every
 

00:06:12.960 --> 00:06:14.710 align:start position:0%
the inorder and the pre-order every
value<00:06:13.440><c> is</c><00:06:13.600><c> going</c><00:06:13.759><c> to</c><00:06:13.840><c> be</c><00:06:14.080><c> unique</c><00:06:14.400><c> because</c>

00:06:14.710 --> 00:06:14.720 align:start position:0%
value is going to be unique because
 

00:06:14.720 --> 00:06:16.150 align:start position:0%
value is going to be unique because
every<00:06:14.880><c> value</c><00:06:15.280><c> in</c><00:06:15.440><c> the</c><00:06:15.600><c> tree</c>

00:06:16.150 --> 00:06:16.160 align:start position:0%
every value in the tree
 

00:06:16.160 --> 00:06:18.950 align:start position:0%
every value in the tree
is<00:06:16.319><c> going</c><00:06:16.479><c> to</c><00:06:16.639><c> be</c><00:06:16.800><c> unique</c><00:06:17.680><c> but</c><00:06:17.919><c> okay</c><00:06:18.319><c> so</c><00:06:18.639><c> far</c><00:06:18.800><c> we</c>

00:06:18.950 --> 00:06:18.960 align:start position:0%
is going to be unique but okay so far we
 

00:06:18.960 --> 00:06:19.990 align:start position:0%
is going to be unique but okay so far we
know<00:06:19.199><c> that</c><00:06:19.440><c> this</c><00:06:19.680><c> first</c>

00:06:19.990 --> 00:06:20.000 align:start position:0%
know that this first
 

00:06:20.000 --> 00:06:22.629 align:start position:0%
know that this first
value<00:06:20.560><c> three</c><00:06:21.039><c> is</c><00:06:21.199><c> gonna</c><00:06:21.440><c> be</c><00:06:21.680><c> the</c><00:06:21.919><c> root</c><00:06:22.240><c> right</c>

00:06:22.629 --> 00:06:22.639 align:start position:0%
value three is gonna be the root right
 

00:06:22.639 --> 00:06:23.590 align:start position:0%
value three is gonna be the root right
so<00:06:22.880><c> now</c><00:06:23.120><c> let's</c>

00:06:23.590 --> 00:06:23.600 align:start position:0%
so now let's
 

00:06:23.600 --> 00:06:26.230 align:start position:0%
so now let's
find<00:06:24.160><c> three</c><00:06:24.560><c> right</c><00:06:24.800><c> we</c><00:06:25.039><c> we</c><00:06:25.199><c> know</c><00:06:25.520><c> three</c><00:06:26.000><c> is</c><00:06:26.080><c> the</c>

00:06:26.230 --> 00:06:26.240 align:start position:0%
find three right we we know three is the
 

00:06:26.240 --> 00:06:26.950 align:start position:0%
find three right we we know three is the
root<00:06:26.560><c> right</c>

00:06:26.950 --> 00:06:26.960 align:start position:0%
root right
 

00:06:26.960 --> 00:06:29.749 align:start position:0%
root right
so<00:06:27.120><c> we</c><00:06:27.280><c> removed</c><00:06:27.840><c> it</c><00:06:28.000><c> from</c><00:06:28.240><c> our</c><00:06:28.560><c> first</c><00:06:29.360><c> list</c>

00:06:29.749 --> 00:06:29.759 align:start position:0%
so we removed it from our first list
 

00:06:29.759 --> 00:06:31.029 align:start position:0%
so we removed it from our first list
basically<00:06:30.400><c> right</c>

00:06:31.029 --> 00:06:31.039 align:start position:0%
basically right
 

00:06:31.039 --> 00:06:34.390 align:start position:0%
basically right
but<00:06:31.360><c> now</c><00:06:31.600><c> let's</c><00:06:32.160><c> find</c><00:06:32.560><c> it</c><00:06:32.960><c> in</c><00:06:33.440><c> our</c><00:06:34.000><c> in</c>

00:06:34.390 --> 00:06:34.400 align:start position:0%
but now let's find it in our in
 

00:06:34.400 --> 00:06:38.150 align:start position:0%
but now let's find it in our in
order<00:06:34.880><c> list</c><00:06:35.360><c> we</c><00:06:35.680><c> find</c><00:06:36.080><c> it's</c><00:06:36.400><c> right</c><00:06:36.800><c> over</c><00:06:37.199><c> here</c>

00:06:38.150 --> 00:06:38.160 align:start position:0%
order list we find it's right over here
 

00:06:38.160 --> 00:06:41.430 align:start position:0%
order list we find it's right over here
3<00:06:38.800><c> is</c><00:06:39.039><c> in</c><00:06:39.360><c> this</c><00:06:39.680><c> index</c><00:06:40.080><c> right</c><00:06:40.479><c> so</c><00:06:40.880><c> we</c><00:06:41.120><c> know</c><00:06:41.360><c> we</c>

00:06:41.430 --> 00:06:41.440 align:start position:0%
3 is in this index right so we know we
 

00:06:41.440 --> 00:06:43.350 align:start position:0%
3 is in this index right so we know we
don't<00:06:41.840><c> need</c><00:06:42.080><c> this</c><00:06:42.319><c> 3</c><00:06:42.639><c> anymore</c><00:06:43.039><c> right</c><00:06:43.199><c> we</c>

00:06:43.350 --> 00:06:43.360 align:start position:0%
don't need this 3 anymore right we
 

00:06:43.360 --> 00:06:44.469 align:start position:0%
don't need this 3 anymore right we
already<00:06:43.600><c> created</c><00:06:44.080><c> that</c>

00:06:44.469 --> 00:06:44.479 align:start position:0%
already created that
 

00:06:44.479 --> 00:06:47.749 align:start position:0%
already created that
node<00:06:45.280><c> but</c><00:06:45.759><c> so</c><00:06:46.240><c> now</c><00:06:47.039><c> what</c><00:06:47.280><c> does</c>

00:06:47.749 --> 00:06:47.759 align:start position:0%
node but so now what does
 

00:06:47.759 --> 00:06:51.189 align:start position:0%
node but so now what does
this<00:06:48.319><c> in</c><00:06:48.720><c> order</c><00:06:49.199><c> array</c><00:06:50.080><c> tell</c><00:06:50.400><c> us</c>

00:06:51.189 --> 00:06:51.199 align:start position:0%
this in order array tell us
 

00:06:51.199 --> 00:06:53.749 align:start position:0%
this in order array tell us
notice<00:06:51.919><c> how</c><00:06:52.160><c> this</c><00:06:52.400><c> is</c><00:06:52.560><c> convenient</c><00:06:53.120><c> for</c><00:06:53.280><c> us</c>

00:06:53.749 --> 00:06:53.759 align:start position:0%
notice how this is convenient for us
 

00:06:53.759 --> 00:06:54.390 align:start position:0%
notice how this is convenient for us
every

00:06:54.390 --> 00:06:54.400 align:start position:0%
every
 

00:06:54.400 --> 00:06:57.670 align:start position:0%
every
value<00:06:54.880><c> to</c><00:06:55.039><c> the</c><00:06:55.599><c> left</c><00:06:56.080><c> of</c><00:06:56.319><c> the</c><00:06:56.639><c> 3</c><00:06:57.039><c> that</c><00:06:57.280><c> we</c><00:06:57.440><c> just</c>

00:06:57.670 --> 00:06:57.680 align:start position:0%
value to the left of the 3 that we just
 

00:06:57.680 --> 00:06:59.110 align:start position:0%
value to the left of the 3 that we just
created<00:06:58.080><c> the</c><00:06:58.240><c> root</c><00:06:58.479><c> from</c>

00:06:59.110 --> 00:06:59.120 align:start position:0%
created the root from
 

00:06:59.120 --> 00:07:01.909 align:start position:0%
created the root from
every<00:06:59.440><c> value</c><00:06:59.840><c> over</c><00:07:00.080><c> here</c><00:07:00.400><c> which</c><00:07:00.639><c> is</c><00:07:00.880><c> only</c><00:07:01.280><c> 9</c><00:07:01.680><c> is</c>

00:07:01.909 --> 00:07:01.919 align:start position:0%
every value over here which is only 9 is
 

00:07:01.919 --> 00:07:02.390 align:start position:0%
every value over here which is only 9 is
going<00:07:02.080><c> to</c>

00:07:02.390 --> 00:07:02.400 align:start position:0%
going to
 

00:07:02.400 --> 00:07:05.909 align:start position:0%
going to
go<00:07:02.800><c> in</c><00:07:02.960><c> the</c><00:07:03.280><c> left</c><00:07:03.680><c> subtree</c><00:07:04.560><c> and</c><00:07:05.199><c> every</c><00:07:05.520><c> value</c>

00:07:05.909 --> 00:07:05.919 align:start position:0%
go in the left subtree and every value
 

00:07:05.919 --> 00:07:06.390 align:start position:0%
go in the left subtree and every value
to<00:07:06.080><c> the</c>

00:07:06.390 --> 00:07:06.400 align:start position:0%
to the
 

00:07:06.400 --> 00:07:09.589 align:start position:0%
to the
right<00:07:06.880><c> of</c><00:07:07.120><c> 3</c><00:07:07.759><c> is</c><00:07:07.919><c> going</c><00:07:08.000><c> to</c><00:07:08.240><c> go</c><00:07:08.800><c> in</c><00:07:08.960><c> the</c><00:07:09.280><c> right</c>

00:07:09.589 --> 00:07:09.599 align:start position:0%
right of 3 is going to go in the right
 

00:07:09.599 --> 00:07:10.550 align:start position:0%
right of 3 is going to go in the right
subtree<00:07:10.080><c> that's</c>

00:07:10.550 --> 00:07:10.560 align:start position:0%
subtree that's
 

00:07:10.560 --> 00:07:13.350 align:start position:0%
subtree that's
really<00:07:11.039><c> convenient</c><00:07:11.680><c> for</c><00:07:11.919><c> us</c><00:07:12.479><c> why</c><00:07:12.800><c> is</c><00:07:12.960><c> this</c><00:07:13.199><c> the</c>

00:07:13.350 --> 00:07:13.360 align:start position:0%
really convenient for us why is this the
 

00:07:13.360 --> 00:07:14.710 align:start position:0%
really convenient for us why is this the
case<00:07:13.759><c> because</c><00:07:14.080><c> that's</c>

00:07:14.710 --> 00:07:14.720 align:start position:0%
case because that's
 

00:07:14.720 --> 00:07:16.870 align:start position:0%
case because that's
basically<00:07:15.199><c> the</c><00:07:15.520><c> purpose</c><00:07:16.160><c> of</c><00:07:16.319><c> in-order</c>

00:07:16.870 --> 00:07:16.880 align:start position:0%
basically the purpose of in-order
 

00:07:16.880 --> 00:07:17.909 align:start position:0%
basically the purpose of in-order
traversal<00:07:17.520><c> right</c>

00:07:17.909 --> 00:07:17.919 align:start position:0%
traversal right
 

00:07:17.919 --> 00:07:20.390 align:start position:0%
traversal right
it<00:07:18.240><c> guarantees</c><00:07:19.280><c> that</c><00:07:19.520><c> we're</c><00:07:19.680><c> going</c><00:07:19.759><c> to</c><00:07:19.919><c> go</c>

00:07:20.390 --> 00:07:20.400 align:start position:0%
it guarantees that we're going to go
 

00:07:20.400 --> 00:07:22.390 align:start position:0%
it guarantees that we're going to go
through<00:07:20.720><c> the</c><00:07:20.880><c> tree</c><00:07:21.280><c> in</c><00:07:21.520><c> order</c><00:07:21.840><c> right</c><00:07:22.080><c> from</c>

00:07:22.390 --> 00:07:22.400 align:start position:0%
through the tree in order right from
 

00:07:22.400 --> 00:07:25.189 align:start position:0%
through the tree in order right from
left<00:07:22.720><c> to</c><00:07:22.880><c> right</c><00:07:23.280><c> basically</c><00:07:24.400><c> right</c><00:07:24.639><c> so</c><00:07:24.800><c> if</c><00:07:24.960><c> we</c>

00:07:25.189 --> 00:07:25.199 align:start position:0%
left to right basically right so if we
 

00:07:25.199 --> 00:07:26.550 align:start position:0%
left to right basically right so if we
see<00:07:25.440><c> the</c><00:07:25.680><c> three</c><00:07:26.000><c> here</c>

00:07:26.550 --> 00:07:26.560 align:start position:0%
see the three here
 

00:07:26.560 --> 00:07:28.550 align:start position:0%
see the three here
and<00:07:26.880><c> that's</c><00:07:27.280><c> and</c><00:07:27.360><c> this</c><00:07:27.599><c> is</c><00:07:27.680><c> the</c><00:07:27.840><c> position</c><00:07:28.479><c> in</c>

00:07:28.550 --> 00:07:28.560 align:start position:0%
and that's and this is the position in
 

00:07:28.560 --> 00:07:30.070 align:start position:0%
and that's and this is the position in
the<00:07:28.720><c> array</c><00:07:29.199><c> we</c><00:07:29.360><c> know</c><00:07:29.599><c> everything</c>

00:07:30.070 --> 00:07:30.080 align:start position:0%
the array we know everything
 

00:07:30.080 --> 00:07:31.830 align:start position:0%
the array we know everything
here<00:07:30.400><c> is</c><00:07:30.479><c> going</c><00:07:30.639><c> to</c><00:07:30.720><c> be</c><00:07:30.800><c> in</c><00:07:30.880><c> the</c><00:07:31.039><c> left</c><00:07:31.280><c> sub</c><00:07:31.520><c> tree</c>

00:07:31.830 --> 00:07:31.840 align:start position:0%
here is going to be in the left sub tree
 

00:07:31.840 --> 00:07:33.029 align:start position:0%
here is going to be in the left sub tree
everything<00:07:32.240><c> here</c><00:07:32.400><c> is</c><00:07:32.560><c> going</c><00:07:32.639><c> to</c><00:07:32.720><c> be</c><00:07:32.800><c> in</c><00:07:32.880><c> the</c>

00:07:33.029 --> 00:07:33.039 align:start position:0%
everything here is going to be in the
 

00:07:33.039 --> 00:07:35.029 align:start position:0%
everything here is going to be in the
right<00:07:33.280><c> subtree</c><00:07:33.840><c> that's</c><00:07:34.080><c> what</c><00:07:34.240><c> it</c><00:07:34.400><c> tells</c><00:07:34.720><c> us</c>

00:07:35.029 --> 00:07:35.039 align:start position:0%
right subtree that's what it tells us
 

00:07:35.039 --> 00:07:37.350 align:start position:0%
right subtree that's what it tells us
this<00:07:35.280><c> is</c><00:07:35.360><c> really</c><00:07:35.680><c> convenient</c><00:07:36.400><c> for</c><00:07:36.639><c> us</c><00:07:37.039><c> because</c>

00:07:37.350 --> 00:07:37.360 align:start position:0%
this is really convenient for us because
 

00:07:37.360 --> 00:07:39.350 align:start position:0%
this is really convenient for us because
we<00:07:37.520><c> can</c><00:07:37.919><c> count</c><00:07:38.240><c> it</c><00:07:38.400><c> right</c><00:07:38.560><c> we</c><00:07:38.720><c> can</c><00:07:38.880><c> see</c><00:07:39.039><c> there's</c>

00:07:39.350 --> 00:07:39.360 align:start position:0%
we can count it right we can see there's
 

00:07:39.360 --> 00:07:40.230 align:start position:0%
we can count it right we can see there's
exactly

00:07:40.230 --> 00:07:40.240 align:start position:0%
exactly
 

00:07:40.240 --> 00:07:43.430 align:start position:0%
exactly
one<00:07:40.639><c> value</c><00:07:41.120><c> that's</c><00:07:41.440><c> going</c><00:07:41.520><c> to</c><00:07:41.680><c> go</c><00:07:42.319><c> in</c><00:07:42.800><c> the</c>

00:07:43.430 --> 00:07:43.440 align:start position:0%
one value that's going to go in the
 

00:07:43.440 --> 00:07:45.990 align:start position:0%
one value that's going to go in the
left<00:07:43.759><c> subtree</c><00:07:44.400><c> and</c><00:07:44.560><c> there's</c><00:07:44.879><c> exactly</c><00:07:45.599><c> three</c>

00:07:45.990 --> 00:07:46.000 align:start position:0%
left subtree and there's exactly three
 

00:07:46.000 --> 00:07:47.589 align:start position:0%
left subtree and there's exactly three
values<00:07:46.400><c> that</c><00:07:46.560><c> are</c><00:07:46.639><c> going</c><00:07:46.720><c> to</c><00:07:46.879><c> go</c><00:07:47.039><c> in</c><00:07:47.120><c> the</c><00:07:47.360><c> right</c>

00:07:47.589 --> 00:07:47.599 align:start position:0%
values that are going to go in the right
 

00:07:47.599 --> 00:07:49.189 align:start position:0%
values that are going to go in the right
subtree<00:07:48.080><c> so</c><00:07:48.240><c> what</c><00:07:48.400><c> we</c><00:07:48.560><c> can</c><00:07:48.720><c> do</c>

00:07:49.189 --> 00:07:49.199 align:start position:0%
subtree so what we can do
 

00:07:49.199 --> 00:07:52.309 align:start position:0%
subtree so what we can do
is<00:07:49.440><c> we</c><00:07:49.599><c> can</c><00:07:49.840><c> take</c><00:07:50.639><c> we</c><00:07:50.800><c> can</c><00:07:51.039><c> take</c><00:07:51.280><c> the</c><00:07:51.440><c> remainder</c>

00:07:52.309 --> 00:07:52.319 align:start position:0%
is we can take we can take the remainder
 

00:07:52.319 --> 00:07:53.909 align:start position:0%
is we can take we can take the remainder
of<00:07:52.479><c> the</c><00:07:52.759><c> pre-order</c>

00:07:53.909 --> 00:07:53.919 align:start position:0%
of the pre-order
 

00:07:53.919 --> 00:07:56.309 align:start position:0%
of the pre-order
array<00:07:54.479><c> and</c><00:07:54.560><c> then</c><00:07:54.879><c> partition</c><00:07:55.599><c> it</c><00:07:55.840><c> right</c>

00:07:56.309 --> 00:07:56.319 align:start position:0%
array and then partition it right
 

00:07:56.319 --> 00:07:58.629 align:start position:0%
array and then partition it right
partition<00:07:56.800><c> it</c><00:07:56.960><c> over</c><00:07:57.280><c> here</c><00:07:57.520><c> because</c><00:07:57.759><c> we</c><00:07:57.919><c> know</c>

00:07:58.629 --> 00:07:58.639 align:start position:0%
partition it over here because we know
 

00:07:58.639 --> 00:08:00.550 align:start position:0%
partition it over here because we know
one<00:07:58.960><c> value</c><00:07:59.520><c> is</c><00:07:59.599><c> going</c><00:07:59.759><c> to</c><00:07:59.840><c> go</c><00:08:00.000><c> in</c><00:08:00.080><c> the</c><00:08:00.319><c> left</c>

00:08:00.550 --> 00:08:00.560 align:start position:0%
one value is going to go in the left
 

00:08:00.560 --> 00:08:01.990 align:start position:0%
one value is going to go in the left
subtree<00:08:01.120><c> and</c><00:08:01.520><c> three</c>

00:08:01.990 --> 00:08:02.000 align:start position:0%
subtree and three
 

00:08:02.000 --> 00:08:03.430 align:start position:0%
subtree and three
values<00:08:02.479><c> are</c><00:08:02.639><c> going</c><00:08:02.720><c> to</c><00:08:02.800><c> go</c><00:08:02.960><c> in</c><00:08:03.039><c> the</c><00:08:03.199><c> right</c>

00:08:03.430 --> 00:08:03.440 align:start position:0%
values are going to go in the right
 

00:08:03.440 --> 00:08:05.430 align:start position:0%
values are going to go in the right
subtree<00:08:04.080><c> so</c><00:08:04.400><c> that's</c><00:08:04.720><c> what</c><00:08:04.879><c> we're</c><00:08:05.039><c> doing</c><00:08:05.360><c> and</c>

00:08:05.430 --> 00:08:05.440 align:start position:0%
subtree so that's what we're doing and
 

00:08:05.440 --> 00:08:07.189 align:start position:0%
subtree so that's what we're doing and
we're<00:08:05.599><c> going</c><00:08:05.759><c> to</c><00:08:05.840><c> continue</c><00:08:06.319><c> this</c><00:08:06.639><c> right</c>

00:08:07.189 --> 00:08:07.199 align:start position:0%
we're going to continue this right
 

00:08:07.199 --> 00:08:09.990 align:start position:0%
we're going to continue this right
so<00:08:07.440><c> now</c><00:08:07.759><c> let's</c><00:08:08.319><c> recur</c><00:08:09.199><c> and</c><00:08:09.280><c> by</c><00:08:09.440><c> the</c><00:08:09.520><c> way</c><00:08:09.759><c> in</c><00:08:09.919><c> the</c>

00:08:09.990 --> 00:08:10.000 align:start position:0%
so now let's recur and by the way in the
 

00:08:10.000 --> 00:08:11.830 align:start position:0%
so now let's recur and by the way in the
code<00:08:10.240><c> we're</c><00:08:10.400><c> going</c><00:08:10.479><c> to</c><00:08:10.560><c> do</c><00:08:10.720><c> this</c><00:08:10.879><c> recursively</c>

00:08:11.830 --> 00:08:11.840 align:start position:0%
code we're going to do this recursively
 

00:08:11.840 --> 00:08:14.150 align:start position:0%
code we're going to do this recursively
let's<00:08:12.160><c> create</c><00:08:12.639><c> the</c><00:08:13.039><c> left</c><00:08:13.440><c> subtree</c>

00:08:14.150 --> 00:08:14.160 align:start position:0%
let's create the left subtree
 

00:08:14.160 --> 00:08:17.350 align:start position:0%
let's create the left subtree
we<00:08:14.400><c> know</c><00:08:14.720><c> that</c><00:08:15.120><c> okay</c><00:08:16.000><c> this</c><00:08:16.400><c> is</c><00:08:16.879><c> the</c><00:08:17.120><c> in</c>

00:08:17.350 --> 00:08:17.360 align:start position:0%
we know that okay this is the in
 

00:08:17.360 --> 00:08:20.150 align:start position:0%
we know that okay this is the in
order<00:08:17.680><c> portion</c><00:08:18.080><c> right</c><00:08:18.720><c> and</c><00:08:19.599><c> this</c><00:08:19.919><c> is</c><00:08:20.000><c> how</c>

00:08:20.150 --> 00:08:20.160 align:start position:0%
order portion right and this is how
 

00:08:20.160 --> 00:08:21.270 align:start position:0%
order portion right and this is how
we're<00:08:20.319><c> gonna</c><00:08:20.560><c> partition</c>

00:08:21.270 --> 00:08:21.280 align:start position:0%
we're gonna partition
 

00:08:21.280 --> 00:08:24.469 align:start position:0%
we're gonna partition
it<00:08:21.520><c> from</c><00:08:21.759><c> pre-order</c><00:08:22.319><c> right</c><00:08:22.479><c> we</c><00:08:22.720><c> see</c><00:08:23.759><c> this</c><00:08:24.000><c> is</c>

00:08:24.469 --> 00:08:24.479 align:start position:0%
it from pre-order right we see this is
 

00:08:24.479 --> 00:08:26.790 align:start position:0%
it from pre-order right we see this is
the<00:08:24.800><c> array</c><00:08:25.120><c> to</c><00:08:25.280><c> create</c><00:08:25.599><c> the</c><00:08:25.680><c> left</c><00:08:25.919><c> subtree</c><00:08:26.560><c> the</c>

00:08:26.790 --> 00:08:26.800 align:start position:0%
the array to create the left subtree the
 

00:08:26.800 --> 00:08:28.150 align:start position:0%
the array to create the left subtree the
thing<00:08:27.120><c> here</c><00:08:27.440><c> is</c>

00:08:28.150 --> 00:08:28.160 align:start position:0%
thing here is
 

00:08:28.160 --> 00:08:30.309 align:start position:0%
thing here is
notice<00:08:28.560><c> how</c><00:08:28.800><c> this</c><00:08:29.120><c> is</c><00:08:29.280><c> size</c><00:08:29.840><c> one</c><00:08:30.160><c> right</c>

00:08:30.309 --> 00:08:30.319 align:start position:0%
notice how this is size one right
 

00:08:30.319 --> 00:08:31.670 align:start position:0%
notice how this is size one right
there's<00:08:30.560><c> only</c><00:08:30.720><c> one</c><00:08:30.960><c> value</c><00:08:31.280><c> here</c><00:08:31.440><c> and</c><00:08:31.520><c> there's</c>

00:08:31.670 --> 00:08:31.680 align:start position:0%
there's only one value here and there's
 

00:08:31.680 --> 00:08:33.589 align:start position:0%
there's only one value here and there's
only<00:08:31.840><c> one</c><00:08:32.080><c> value</c><00:08:32.399><c> here</c><00:08:32.640><c> right</c><00:08:32.880><c> that</c><00:08:33.120><c> tells</c><00:08:33.440><c> us</c>

00:08:33.589 --> 00:08:33.599 align:start position:0%
only one value here right that tells us
 

00:08:33.599 --> 00:08:35.269 align:start position:0%
only one value here right that tells us
that<00:08:33.760><c> the</c><00:08:33.919><c> sub</c><00:08:34.159><c> tree</c><00:08:34.320><c> we're</c><00:08:34.560><c> creating</c><00:08:34.959><c> is</c><00:08:35.120><c> only</c>

00:08:35.269 --> 00:08:35.279 align:start position:0%
that the sub tree we're creating is only
 

00:08:35.279 --> 00:08:37.589 align:start position:0%
that the sub tree we're creating is only
gonna<00:08:35.440><c> have</c><00:08:35.680><c> one</c><00:08:36.000><c> node</c><00:08:36.320><c> in</c><00:08:36.479><c> it</c><00:08:36.640><c> right</c><00:08:36.959><c> so</c>

00:08:37.589 --> 00:08:37.599 align:start position:0%
gonna have one node in it right so
 

00:08:37.599 --> 00:08:40.550 align:start position:0%
gonna have one node in it right so
nine<00:08:38.320><c> is</c><00:08:38.880><c> the</c><00:08:39.360><c> only</c><00:08:39.760><c> node</c><00:08:40.080><c> in</c><00:08:40.240><c> the</c><00:08:40.320><c> left</c>

00:08:40.550 --> 00:08:40.560 align:start position:0%
nine is the only node in the left
 

00:08:40.560 --> 00:08:41.990 align:start position:0%
nine is the only node in the left
subtree<00:08:40.959><c> so</c><00:08:41.039><c> we're</c><00:08:41.200><c> going</c><00:08:41.279><c> to</c><00:08:41.360><c> create</c><00:08:41.760><c> that</c>

00:08:41.990 --> 00:08:42.000 align:start position:0%
subtree so we're going to create that
 

00:08:42.000 --> 00:08:43.829 align:start position:0%
subtree so we're going to create that
node<00:08:42.240><c> put</c><00:08:42.399><c> the</c><00:08:42.560><c> value</c><00:08:42.959><c> there</c><00:08:43.200><c> and</c><00:08:43.360><c> now</c><00:08:43.599><c> we're</c>

00:08:43.829 --> 00:08:43.839 align:start position:0%
node put the value there and now we're
 

00:08:43.839 --> 00:08:44.550 align:start position:0%
node put the value there and now we're
basically

00:08:44.550 --> 00:08:44.560 align:start position:0%
basically
 

00:08:44.560 --> 00:08:46.949 align:start position:0%
basically
done<00:08:45.120><c> with</c><00:08:45.360><c> this</c><00:08:45.600><c> left</c><00:08:45.920><c> sub</c><00:08:46.160><c> tree</c><00:08:46.480><c> obviously</c>

00:08:46.949 --> 00:08:46.959 align:start position:0%
done with this left sub tree obviously
 

00:08:46.959 --> 00:08:48.550 align:start position:0%
done with this left sub tree obviously
because<00:08:47.200><c> there's</c><00:08:47.519><c> no</c><00:08:47.760><c> more</c>

00:08:48.550 --> 00:08:48.560 align:start position:0%
because there's no more
 

00:08:48.560 --> 00:08:51.750 align:start position:0%
because there's no more
uh<00:08:49.440><c> you</c><00:08:49.600><c> know</c><00:08:50.000><c> there's</c><00:08:50.320><c> no</c><00:08:50.480><c> more</c><00:08:50.800><c> nodes</c><00:08:51.279><c> left</c>

00:08:51.750 --> 00:08:51.760 align:start position:0%
uh you know there's no more nodes left
 

00:08:51.760 --> 00:08:54.070 align:start position:0%
uh you know there's no more nodes left
in<00:08:51.920><c> this</c><00:08:52.240><c> general</c><00:08:52.720><c> area</c><00:08:53.040><c> right</c><00:08:53.279><c> this</c><00:08:53.680><c> these</c>

00:08:54.070 --> 00:08:54.080 align:start position:0%
in this general area right this these
 

00:08:54.080 --> 00:08:55.590 align:start position:0%
in this general area right this these
values<00:08:54.480><c> are</c><00:08:54.640><c> reserved</c>

00:08:55.590 --> 00:08:55.600 align:start position:0%
values are reserved
 

00:08:55.600 --> 00:08:58.550 align:start position:0%
values are reserved
for<00:08:55.839><c> the</c><00:08:56.080><c> right</c><00:08:56.320><c> subtree</c><00:08:56.880><c> this</c><00:08:57.360><c> is</c><00:08:57.600><c> reserved</c>

00:08:58.550 --> 00:08:58.560 align:start position:0%
for the right subtree this is reserved
 

00:08:58.560 --> 00:08:59.910 align:start position:0%
for the right subtree this is reserved
for<00:08:58.720><c> the</c><00:08:58.880><c> right</c><00:08:59.120><c> subtree</c>

00:08:59.910 --> 00:08:59.920 align:start position:0%
for the right subtree
 

00:08:59.920 --> 00:09:01.910 align:start position:0%
for the right subtree
okay<00:09:00.160><c> so</c><00:09:00.320><c> now</c><00:09:00.560><c> we're</c><00:09:00.800><c> looking</c><00:09:01.279><c> at</c><00:09:01.680><c> the</c>

00:09:01.910 --> 00:09:01.920 align:start position:0%
okay so now we're looking at the
 

00:09:01.920 --> 00:09:03.829 align:start position:0%
okay so now we're looking at the
pre-order<00:09:02.640><c> portion</c><00:09:03.120><c> right</c><00:09:03.360><c> there's</c><00:09:03.600><c> three</c>

00:09:03.829 --> 00:09:03.839 align:start position:0%
pre-order portion right there's three
 

00:09:03.839 --> 00:09:06.470 align:start position:0%
pre-order portion right there's three
values<00:09:04.399><c> just</c><00:09:04.640><c> like</c><00:09:04.800><c> in</c><00:09:04.959><c> the</c><00:09:05.040><c> in</c><00:09:05.279><c> order</c><00:09:05.600><c> portion</c>

00:09:06.470 --> 00:09:06.480 align:start position:0%
values just like in the in order portion
 

00:09:06.480 --> 00:09:08.949 align:start position:0%
values just like in the in order portion
and<00:09:06.720><c> remember</c><00:09:07.279><c> how</c><00:09:07.519><c> are</c><00:09:07.600><c> we</c><00:09:07.760><c> gonna</c><00:09:08.320><c> create</c><00:09:08.800><c> the</c>

00:09:08.949 --> 00:09:08.959 align:start position:0%
and remember how are we gonna create the
 

00:09:08.959 --> 00:09:11.590 align:start position:0%
and remember how are we gonna create the
root<00:09:09.279><c> node</c><00:09:09.600><c> of</c><00:09:09.760><c> this</c><00:09:10.000><c> subtree</c><00:09:10.480><c> now</c><00:09:10.720><c> we</c><00:09:10.959><c> always</c>

00:09:11.590 --> 00:09:11.600 align:start position:0%
root node of this subtree now we always
 

00:09:11.600 --> 00:09:14.470 align:start position:0%
root node of this subtree now we always
take<00:09:11.920><c> the</c><00:09:12.320><c> first</c><00:09:12.800><c> value</c><00:09:13.440><c> in</c><00:09:13.920><c> pre-order</c>

00:09:14.470 --> 00:09:14.480 align:start position:0%
take the first value in pre-order
 

00:09:14.480 --> 00:09:15.590 align:start position:0%
take the first value in pre-order
traversal<00:09:15.200><c> it's</c>

00:09:15.590 --> 00:09:15.600 align:start position:0%
traversal it's
 

00:09:15.600 --> 00:09:18.389 align:start position:0%
traversal it's
20<00:09:16.320><c> right</c><00:09:16.720><c> the</c><00:09:16.880><c> value</c><00:09:17.279><c> is</c><00:09:17.519><c> 20</c><00:09:18.000><c> so</c><00:09:18.160><c> we're</c><00:09:18.320><c> going</c>

00:09:18.389 --> 00:09:18.399 align:start position:0%
20 right the value is 20 so we're going
 

00:09:18.399 --> 00:09:19.110 align:start position:0%
20 right the value is 20 so we're going
to<00:09:18.560><c> take</c><00:09:18.800><c> this</c>

00:09:19.110 --> 00:09:19.120 align:start position:0%
to take this
 

00:09:19.120 --> 00:09:21.829 align:start position:0%
to take this
value<00:09:19.760><c> 20.</c><00:09:20.640><c> we</c><00:09:20.800><c> don't</c><00:09:21.040><c> need</c><00:09:21.279><c> it</c><00:09:21.440><c> anymore</c>

00:09:21.829 --> 00:09:21.839 align:start position:0%
value 20. we don't need it anymore
 

00:09:21.839 --> 00:09:23.430 align:start position:0%
value 20. we don't need it anymore
because<00:09:22.080><c> we're</c><00:09:22.240><c> going</c><00:09:22.320><c> to</c><00:09:22.480><c> create</c><00:09:22.959><c> a</c>

00:09:23.430 --> 00:09:23.440 align:start position:0%
because we're going to create a
 

00:09:23.440 --> 00:09:26.389 align:start position:0%
because we're going to create a
a<00:09:23.600><c> node</c><00:09:24.000><c> from</c><00:09:24.160><c> that</c><00:09:24.399><c> value</c><00:09:25.200><c> and</c><00:09:25.680><c> so</c><00:09:25.920><c> now</c><00:09:26.240><c> we</c>

00:09:26.389 --> 00:09:26.399 align:start position:0%
a node from that value and so now we
 

00:09:26.399 --> 00:09:28.070 align:start position:0%
a node from that value and so now we
need<00:09:26.560><c> to</c><00:09:26.720><c> know</c><00:09:27.040><c> which</c><00:09:27.360><c> values</c><00:09:27.839><c> are</c><00:09:27.920><c> going</c><00:09:28.000><c> to</c>

00:09:28.070 --> 00:09:28.080 align:start position:0%
need to know which values are going to
 

00:09:28.080 --> 00:09:29.670 align:start position:0%
need to know which values are going to
go<00:09:28.320><c> in</c><00:09:28.399><c> the</c><00:09:28.560><c> left</c><00:09:28.800><c> sub</c><00:09:29.040><c> tree</c><00:09:29.200><c> and</c><00:09:29.279><c> which</c><00:09:29.519><c> are</c>

00:09:29.670 --> 00:09:29.680 align:start position:0%
go in the left sub tree and which are
 

00:09:29.680 --> 00:09:30.150 align:start position:0%
go in the left sub tree and which are
going<00:09:29.760><c> to</c><00:09:29.839><c> go</c>

00:09:30.150 --> 00:09:30.160 align:start position:0%
going to go
 

00:09:30.160 --> 00:09:33.590 align:start position:0%
going to go
in<00:09:30.320><c> the</c><00:09:30.480><c> right</c><00:09:30.720><c> subtree</c><00:09:31.200><c> we</c><00:09:31.440><c> know</c><00:09:32.160><c> by</c><00:09:32.560><c> finding</c>

00:09:33.590 --> 00:09:33.600 align:start position:0%
in the right subtree we know by finding
 

00:09:33.600 --> 00:09:36.630 align:start position:0%
in the right subtree we know by finding
20<00:09:34.160><c> right</c><00:09:34.480><c> 20</c><00:09:34.959><c> is</c><00:09:35.040><c> the</c><00:09:35.120><c> value</c><00:09:35.440><c> let's</c><00:09:35.839><c> find</c><00:09:36.240><c> 20</c>

00:09:36.630 --> 00:09:36.640 align:start position:0%
20 right 20 is the value let's find 20
 

00:09:36.640 --> 00:09:39.430 align:start position:0%
20 right 20 is the value let's find 20
in<00:09:36.800><c> our</c><00:09:37.040><c> in</c><00:09:37.200><c> order</c><00:09:37.519><c> traversal</c><00:09:38.080><c> it's</c><00:09:38.399><c> over</c><00:09:38.880><c> here</c>

00:09:39.430 --> 00:09:39.440 align:start position:0%
in our in order traversal it's over here
 

00:09:39.440 --> 00:09:41.110 align:start position:0%
in our in order traversal it's over here
by<00:09:39.600><c> the</c><00:09:39.760><c> way</c><00:09:40.080><c> in</c><00:09:40.240><c> the</c><00:09:40.399><c> code</c><00:09:40.640><c> i'm</c><00:09:40.800><c> going</c><00:09:40.880><c> to</c><00:09:40.959><c> be</c>

00:09:41.110 --> 00:09:41.120 align:start position:0%
by the way in the code i'm going to be
 

00:09:41.120 --> 00:09:43.030 align:start position:0%
by the way in the code i'm going to be
calling<00:09:41.519><c> the</c><00:09:41.760><c> index</c><00:09:42.320><c> of</c><00:09:42.480><c> this</c>

00:09:43.030 --> 00:09:43.040 align:start position:0%
calling the index of this
 

00:09:43.040 --> 00:09:46.310 align:start position:0%
calling the index of this
mid<00:09:43.600><c> so</c><00:09:44.000><c> m</c><00:09:44.480><c> for</c><00:09:44.800><c> mid</c><00:09:45.360><c> we</c><00:09:45.680><c> find</c><00:09:46.000><c> the</c>

00:09:46.310 --> 00:09:46.320 align:start position:0%
mid so m for mid we find the
 

00:09:46.320 --> 00:09:50.389 align:start position:0%
mid so m for mid we find the
index<00:09:47.040><c> of</c><00:09:47.600><c> 20</c><00:09:48.720><c> right</c><00:09:48.880><c> we</c><00:09:49.040><c> know</c><00:09:49.279><c> we</c><00:09:49.440><c> don't</c><00:09:49.680><c> need</c>

00:09:50.389 --> 00:09:50.399 align:start position:0%
index of 20 right we know we don't need
 

00:09:50.399 --> 00:09:53.910 align:start position:0%
index of 20 right we know we don't need
20<00:09:50.800><c> anymore</c><00:09:51.519><c> so</c><00:09:51.760><c> we</c><00:09:51.920><c> can</c><00:09:52.080><c> get</c><00:09:52.480><c> rid</c><00:09:52.800><c> of</c><00:09:52.959><c> it</c><00:09:53.360><c> right</c>

00:09:53.910 --> 00:09:53.920 align:start position:0%
20 anymore so we can get rid of it right
 

00:09:53.920 --> 00:09:56.630 align:start position:0%
20 anymore so we can get rid of it right
we<00:09:54.080><c> see</c><00:09:54.320><c> that</c><00:09:54.480><c> there's</c><00:09:55.120><c> one</c><00:09:55.440><c> value</c><00:09:56.080><c> on</c><00:09:56.240><c> the</c>

00:09:56.630 --> 00:09:56.640 align:start position:0%
we see that there's one value on the
 

00:09:56.640 --> 00:09:57.750 align:start position:0%
we see that there's one value on the
left<00:09:56.959><c> of</c><00:09:57.200><c> 20</c>

00:09:57.750 --> 00:09:57.760 align:start position:0%
left of 20
 

00:09:57.760 --> 00:10:01.350 align:start position:0%
left of 20
and<00:09:57.920><c> there's</c><00:09:58.560><c> one</c><00:09:58.959><c> value</c><00:09:59.839><c> on</c><00:10:00.399><c> the</c><00:10:00.720><c> right</c><00:10:01.120><c> of</c>

00:10:01.350 --> 00:10:01.360 align:start position:0%
and there's one value on the right of
 

00:10:01.360 --> 00:10:02.069 align:start position:0%
and there's one value on the right of
20.

00:10:02.069 --> 00:10:02.079 align:start position:0%
20.
 

00:10:02.079 --> 00:10:04.230 align:start position:0%
20.
this<00:10:02.399><c> tells</c><00:10:02.720><c> us</c><00:10:02.880><c> that</c><00:10:03.120><c> one</c><00:10:03.440><c> value</c><00:10:03.920><c> is</c><00:10:04.000><c> going</c><00:10:04.079><c> to</c>

00:10:04.230 --> 00:10:04.240 align:start position:0%
this tells us that one value is going to
 

00:10:04.240 --> 00:10:06.310 align:start position:0%
this tells us that one value is going to
go<00:10:04.560><c> in</c><00:10:04.720><c> the</c><00:10:04.880><c> left</c><00:10:05.120><c> subtree</c><00:10:05.519><c> and</c><00:10:05.600><c> one</c><00:10:05.839><c> value</c><00:10:06.240><c> is</c>

00:10:06.310 --> 00:10:06.320 align:start position:0%
go in the left subtree and one value is
 

00:10:06.320 --> 00:10:07.750 align:start position:0%
go in the left subtree and one value is
going<00:10:06.399><c> to</c><00:10:06.480><c> go</c><00:10:06.640><c> in</c><00:10:06.720><c> the</c><00:10:06.880><c> right</c><00:10:07.120><c> subtree</c><00:10:07.600><c> right</c>

00:10:07.750 --> 00:10:07.760 align:start position:0%
going to go in the right subtree right
 

00:10:07.760 --> 00:10:09.190 align:start position:0%
going to go in the right subtree right
just<00:10:07.920><c> like</c><00:10:08.079><c> we</c><00:10:08.240><c> have</c><00:10:08.480><c> over</c><00:10:08.720><c> here</c>

00:10:09.190 --> 00:10:09.200 align:start position:0%
just like we have over here
 

00:10:09.200 --> 00:10:12.310 align:start position:0%
just like we have over here
so<00:10:09.519><c> now</c><00:10:09.760><c> let's</c><00:10:10.000><c> construct</c><00:10:11.040><c> that</c><00:10:11.519><c> left</c><00:10:11.839><c> subtree</c>

00:10:12.310 --> 00:10:12.320 align:start position:0%
so now let's construct that left subtree
 

00:10:12.320 --> 00:10:14.550 align:start position:0%
so now let's construct that left subtree
we<00:10:12.480><c> know</c><00:10:12.640><c> it's</c><00:10:12.800><c> going</c><00:10:12.880><c> to</c><00:10:12.959><c> be</c><00:10:13.120><c> exactly</c><00:10:13.600><c> size</c><00:10:14.000><c> 1</c>

00:10:14.550 --> 00:10:14.560 align:start position:0%
we know it's going to be exactly size 1
 

00:10:14.560 --> 00:10:17.430 align:start position:0%
we know it's going to be exactly size 1
from<00:10:14.880><c> looking</c><00:10:15.279><c> over</c><00:10:15.600><c> here</c><00:10:16.240><c> so</c><00:10:16.480><c> we</c><00:10:16.640><c> take</c><00:10:16.880><c> this</c>

00:10:17.430 --> 00:10:17.440 align:start position:0%
from looking over here so we take this
 

00:10:17.440 --> 00:10:18.150 align:start position:0%
from looking over here so we take this
15

00:10:18.150 --> 00:10:18.160 align:start position:0%
15
 

00:10:18.160 --> 00:10:20.069 align:start position:0%
15
right<00:10:18.399><c> where</c><00:10:18.560><c> can</c><00:10:18.800><c> we</c><00:10:19.200><c> now</c><00:10:19.440><c> our</c><00:10:19.600><c> job</c><00:10:19.839><c> is</c><00:10:19.920><c> to</c>

00:10:20.069 --> 00:10:20.079 align:start position:0%
right where can we now our job is to
 

00:10:20.079 --> 00:10:22.230 align:start position:0%
right where can we now our job is to
recursively<00:10:20.800><c> create</c><00:10:21.040><c> the</c><00:10:21.200><c> left</c><00:10:21.440><c> subtree</c>

00:10:22.230 --> 00:10:22.240 align:start position:0%
recursively create the left subtree
 

00:10:22.240 --> 00:10:23.990 align:start position:0%
recursively create the left subtree
we're<00:10:22.399><c> going</c><00:10:22.480><c> to</c><00:10:22.560><c> take</c><00:10:22.720><c> this</c><00:10:23.040><c> 15</c><00:10:23.519><c> since</c><00:10:23.760><c> it's</c>

00:10:23.990 --> 00:10:24.000 align:start position:0%
we're going to take this 15 since it's
 

00:10:24.000 --> 00:10:26.870 align:start position:0%
we're going to take this 15 since it's
the<00:10:24.320><c> first</c><00:10:24.720><c> value</c><00:10:25.279><c> in</c><00:10:25.440><c> the</c><00:10:25.600><c> subarray</c><00:10:26.240><c> for</c>

00:10:26.870 --> 00:10:26.880 align:start position:0%
the first value in the subarray for
 

00:10:26.880 --> 00:10:28.790 align:start position:0%
the first value in the subarray for
pre-order<00:10:27.440><c> right</c><00:10:27.600><c> we</c><00:10:27.920><c> know</c><00:10:28.160><c> that</c><00:10:28.399><c> it's</c><00:10:28.640><c> going</c>

00:10:28.790 --> 00:10:28.800 align:start position:0%
pre-order right we know that it's going
 

00:10:28.800 --> 00:10:30.150 align:start position:0%
pre-order right we know that it's going
to<00:10:28.959><c> be</c><00:10:29.120><c> the</c><00:10:29.279><c> root</c><00:10:29.760><c> of</c>

00:10:30.150 --> 00:10:30.160 align:start position:0%
to be the root of
 

00:10:30.160 --> 00:10:31.750 align:start position:0%
to be the root of
the<00:10:30.480><c> current</c><00:10:30.800><c> subtree</c><00:10:31.200><c> we're</c><00:10:31.360><c> at</c><00:10:31.519><c> so</c><00:10:31.600><c> let's</c>

00:10:31.750 --> 00:10:31.760 align:start position:0%
the current subtree we're at so let's
 

00:10:31.760 --> 00:10:33.910 align:start position:0%
the current subtree we're at so let's
get<00:10:32.320><c> rid</c><00:10:32.480><c> of</c><00:10:32.640><c> this</c><00:10:32.959><c> this</c><00:10:33.200><c> 15.</c>

00:10:33.910 --> 00:10:33.920 align:start position:0%
get rid of this this 15.
 

00:10:33.920 --> 00:10:37.190 align:start position:0%
get rid of this this 15.
let's<00:10:34.240><c> create</c><00:10:34.880><c> that</c><00:10:35.200><c> node</c><00:10:35.920><c> right</c><00:10:36.560><c> 15</c><00:10:36.959><c> over</c>

00:10:37.190 --> 00:10:37.200 align:start position:0%
let's create that node right 15 over
 

00:10:37.200 --> 00:10:38.630 align:start position:0%
let's create that node right 15 over
here<00:10:37.360><c> is</c><00:10:37.519><c> going</c><00:10:37.600><c> to</c><00:10:37.680><c> be</c><00:10:37.839><c> a</c><00:10:38.000><c> node</c>

00:10:38.630 --> 00:10:38.640 align:start position:0%
here is going to be a node
 

00:10:38.640 --> 00:10:41.350 align:start position:0%
here is going to be a node
and<00:10:38.800><c> there's</c><00:10:39.200><c> no</c><00:10:39.440><c> more</c><00:10:39.680><c> values</c><00:10:40.320><c> left</c><00:10:40.720><c> in</c><00:10:41.120><c> this</c>

00:10:41.350 --> 00:10:41.360 align:start position:0%
and there's no more values left in this
 

00:10:41.360 --> 00:10:43.350 align:start position:0%
and there's no more values left in this
subtree<00:10:42.000><c> because</c><00:10:42.480><c> we</c><00:10:42.640><c> know</c><00:10:42.880><c> it's</c><00:10:43.040><c> only</c><00:10:43.279><c> going</c>

00:10:43.350 --> 00:10:43.360 align:start position:0%
subtree because we know it's only going
 

00:10:43.360 --> 00:10:44.230 align:start position:0%
subtree because we know it's only going
to<00:10:43.440><c> be</c><00:10:43.680><c> size</c>

00:10:44.230 --> 00:10:44.240 align:start position:0%
to be size
 

00:10:44.240 --> 00:10:46.470 align:start position:0%
to be size
1.<00:10:44.640><c> okay</c><00:10:45.040><c> now</c><00:10:45.200><c> we're</c><00:10:45.440><c> creating</c><00:10:45.839><c> the</c><00:10:46.160><c> right</c>

00:10:46.470 --> 00:10:46.480 align:start position:0%
1. okay now we're creating the right
 

00:10:46.480 --> 00:10:47.269 align:start position:0%
1. okay now we're creating the right
subtree

00:10:47.269 --> 00:10:47.279 align:start position:0%
subtree
 

00:10:47.279 --> 00:10:49.110 align:start position:0%
subtree
we<00:10:47.440><c> know</c><00:10:47.600><c> that</c><00:10:47.760><c> there's</c><00:10:48.000><c> only</c><00:10:48.320><c> one</c><00:10:48.640><c> value</c><00:10:48.959><c> in</c>

00:10:49.110 --> 00:10:49.120 align:start position:0%
we know that there's only one value in
 

00:10:49.120 --> 00:10:51.430 align:start position:0%
we know that there's only one value in
the<00:10:49.200><c> right</c><00:10:49.440><c> subtree</c><00:10:49.839><c> from</c><00:10:50.079><c> looking</c><00:10:50.480><c> over</c><00:10:50.880><c> here</c>

00:10:51.430 --> 00:10:51.440 align:start position:0%
the right subtree from looking over here
 

00:10:51.440 --> 00:10:53.269 align:start position:0%
the right subtree from looking over here
with<00:10:51.760><c> and</c><00:10:52.000><c> since</c><00:10:52.240><c> there's</c><00:10:52.399><c> only</c><00:10:52.640><c> one</c><00:10:52.880><c> value</c>

00:10:53.269 --> 00:10:53.279 align:start position:0%
with and since there's only one value
 

00:10:53.279 --> 00:10:55.190 align:start position:0%
with and since there's only one value
left<00:10:53.680><c> in</c><00:10:53.839><c> general</c><00:10:54.320><c> it's</c><00:10:54.480><c> a</c><00:10:54.720><c> seven</c>

00:10:55.190 --> 00:10:55.200 align:start position:0%
left in general it's a seven
 

00:10:55.200 --> 00:10:58.389 align:start position:0%
left in general it's a seven
we<00:10:55.760><c> can</c><00:10:56.160><c> make</c><00:10:56.399><c> a</c><00:10:56.560><c> node</c><00:10:56.880><c> from</c><00:10:57.120><c> it</c><00:10:57.519><c> and</c><00:10:58.160><c> then</c>

00:10:58.389 --> 00:10:58.399 align:start position:0%
we can make a node from it and then
 

00:10:58.399 --> 00:10:59.190 align:start position:0%
we can make a node from it and then
we're<00:10:58.720><c> done</c>

00:10:59.190 --> 00:10:59.200 align:start position:0%
we're done
 

00:10:59.200 --> 00:11:01.190 align:start position:0%
we're done
we<00:10:59.360><c> know</c><00:10:59.519><c> we're</c><00:10:59.760><c> done</c><00:11:00.079><c> because</c><00:11:00.720><c> we've</c>

00:11:01.190 --> 00:11:01.200 align:start position:0%
we know we're done because we've
 

00:11:01.200 --> 00:11:03.269 align:start position:0%
we know we're done because we've
basically<00:11:01.680><c> gotten</c><00:11:02.079><c> rid</c><00:11:02.320><c> of</c><00:11:02.560><c> every</c><00:11:02.880><c> single</c>

00:11:03.269 --> 00:11:03.279 align:start position:0%
basically gotten rid of every single
 

00:11:03.279 --> 00:11:04.230 align:start position:0%
basically gotten rid of every single
value

00:11:04.230 --> 00:11:04.240 align:start position:0%
value
 

00:11:04.240 --> 00:11:07.829 align:start position:0%
value
in<00:11:04.880><c> our</c><00:11:05.440><c> arrays</c><00:11:06.079><c> pre-order</c><00:11:06.720><c> and</c><00:11:06.959><c> in</c><00:11:07.200><c> order</c>

00:11:07.829 --> 00:11:07.839 align:start position:0%
in our arrays pre-order and in order
 

00:11:07.839 --> 00:11:10.230 align:start position:0%
in our arrays pre-order and in order
so<00:11:08.160><c> using</c><00:11:08.560><c> these</c><00:11:08.880><c> two</c><00:11:09.200><c> arrays</c><00:11:09.600><c> we</c><00:11:09.760><c> were</c><00:11:10.000><c> able</c>

00:11:10.230 --> 00:11:10.240 align:start position:0%
so using these two arrays we were able
 

00:11:10.240 --> 00:11:11.590 align:start position:0%
so using these two arrays we were able
to<00:11:10.480><c> create</c><00:11:11.120><c> our</c>

00:11:11.590 --> 00:11:11.600 align:start position:0%
to create our
 

00:11:11.600 --> 00:11:13.750 align:start position:0%
to create our
tree<00:11:12.079><c> correctly</c><00:11:12.800><c> and</c><00:11:12.959><c> just</c><00:11:13.200><c> let</c><00:11:13.360><c> me</c><00:11:13.440><c> just</c>

00:11:13.750 --> 00:11:13.760 align:start position:0%
tree correctly and just let me just
 

00:11:13.760 --> 00:11:15.829 align:start position:0%
tree correctly and just let me just
summarize<00:11:14.560><c> what</c><00:11:14.720><c> we're</c><00:11:14.959><c> actually</c><00:11:15.440><c> doing</c>

00:11:15.829 --> 00:11:15.839 align:start position:0%
summarize what we're actually doing
 

00:11:15.839 --> 00:11:17.269 align:start position:0%
summarize what we're actually doing
we're<00:11:16.000><c> not</c><00:11:16.240><c> doing</c><00:11:16.640><c> a</c><00:11:16.800><c> lot</c>

00:11:17.269 --> 00:11:17.279 align:start position:0%
we're not doing a lot
 

00:11:17.279 --> 00:11:19.430 align:start position:0%
we're not doing a lot
we<00:11:17.440><c> don't</c><00:11:17.600><c> need</c><00:11:17.839><c> a</c><00:11:17.920><c> ton</c><00:11:18.160><c> of</c><00:11:18.320><c> information</c>

00:11:19.430 --> 00:11:19.440 align:start position:0%
we don't need a ton of information
 

00:11:19.440 --> 00:11:20.470 align:start position:0%
we don't need a ton of information
remember

00:11:20.470 --> 00:11:20.480 align:start position:0%
remember
 

00:11:20.480 --> 00:11:23.750 align:start position:0%
remember
the<00:11:20.880><c> first</c><00:11:21.440><c> value</c><00:11:22.079><c> in</c><00:11:22.560><c> pre-order</c>

00:11:23.750 --> 00:11:23.760 align:start position:0%
the first value in pre-order
 

00:11:23.760 --> 00:11:26.069 align:start position:0%
the first value in pre-order
the<00:11:23.920><c> pre-order</c><00:11:24.399><c> array</c><00:11:24.800><c> is</c><00:11:25.040><c> always</c><00:11:25.600><c> going</c><00:11:25.839><c> to</c>

00:11:26.069 --> 00:11:26.079 align:start position:0%
the pre-order array is always going to
 

00:11:26.079 --> 00:11:28.069 align:start position:0%
the pre-order array is always going to
be<00:11:26.399><c> the</c><00:11:26.640><c> root</c><00:11:27.040><c> right</c><00:11:27.200><c> that's</c><00:11:27.440><c> just</c><00:11:27.600><c> how</c><00:11:27.920><c> it</c>

00:11:28.069 --> 00:11:28.079 align:start position:0%
be the root right that's just how it
 

00:11:28.079 --> 00:11:29.590 align:start position:0%
be the root right that's just how it
works<00:11:28.560><c> and</c><00:11:28.720><c> then</c><00:11:28.959><c> once</c><00:11:29.279><c> we</c>

00:11:29.590 --> 00:11:29.600 align:start position:0%
works and then once we
 

00:11:29.600 --> 00:11:31.990 align:start position:0%
works and then once we
take<00:11:29.920><c> that</c><00:11:30.240><c> value</c><00:11:30.720><c> create</c><00:11:31.120><c> a</c><00:11:31.279><c> node</c><00:11:31.600><c> from</c><00:11:31.839><c> it</c>

00:11:31.990 --> 00:11:32.000 align:start position:0%
take that value create a node from it
 

00:11:32.000 --> 00:11:33.269 align:start position:0%
take that value create a node from it
and<00:11:32.160><c> then</c><00:11:32.320><c> when</c><00:11:32.480><c> we</c><00:11:32.640><c> try</c><00:11:32.880><c> to</c>

00:11:33.269 --> 00:11:33.279 align:start position:0%
and then when we try to
 

00:11:33.279 --> 00:11:36.790 align:start position:0%
and then when we try to
look<00:11:33.600><c> that</c><00:11:33.839><c> value</c><00:11:34.560><c> up</c><00:11:35.120><c> in</c><00:11:35.519><c> in</c><00:11:35.760><c> order</c><00:11:36.079><c> traversal</c>

00:11:36.790 --> 00:11:36.800 align:start position:0%
look that value up in in order traversal
 

00:11:36.800 --> 00:11:37.509 align:start position:0%
look that value up in in order traversal
right

00:11:37.509 --> 00:11:37.519 align:start position:0%
right
 

00:11:37.519 --> 00:11:40.790 align:start position:0%
right
then<00:11:38.160><c> we</c><00:11:38.480><c> can</c><00:11:39.040><c> get</c><00:11:39.360><c> some</c><00:11:39.839><c> subarrays</c>

00:11:40.790 --> 00:11:40.800 align:start position:0%
then we can get some subarrays
 

00:11:40.800 --> 00:11:43.750 align:start position:0%
then we can get some subarrays
right<00:11:41.040><c> we</c><00:11:41.200><c> can</c><00:11:41.440><c> take</c><00:11:42.079><c> we</c><00:11:42.240><c> can</c><00:11:42.480><c> take</c><00:11:42.720><c> the</c><00:11:43.200><c> length</c>

00:11:43.750 --> 00:11:43.760 align:start position:0%
right we can take we can take the length
 

00:11:43.760 --> 00:11:44.710 align:start position:0%
right we can take we can take the length
of<00:11:43.920><c> the</c><00:11:44.240><c> left</c>

00:11:44.710 --> 00:11:44.720 align:start position:0%
of the left
 

00:11:44.720 --> 00:11:46.790 align:start position:0%
of the left
and<00:11:44.959><c> right</c><00:11:45.360><c> sub</c><00:11:45.600><c> array</c><00:11:45.920><c> so</c><00:11:46.079><c> the</c><00:11:46.240><c> right</c><00:11:46.560><c> sub</c>

00:11:46.790 --> 00:11:46.800 align:start position:0%
and right sub array so the right sub
 

00:11:46.800 --> 00:11:48.310 align:start position:0%
and right sub array so the right sub
array<00:11:47.440><c> is</c><00:11:47.680><c> three</c>

00:11:48.310 --> 00:11:48.320 align:start position:0%
array is three
 

00:11:48.320 --> 00:11:51.430 align:start position:0%
array is three
and<00:11:48.560><c> the</c><00:11:49.120><c> left</c><00:11:49.519><c> sub</c><00:11:49.680><c> array</c><00:11:50.160><c> is</c><00:11:50.639><c> one</c><00:11:50.959><c> note</c>

00:11:51.430 --> 00:11:51.440 align:start position:0%
and the left sub array is one note
 

00:11:51.440 --> 00:11:54.870 align:start position:0%
and the left sub array is one note
now<00:11:51.680><c> these</c><00:11:52.079><c> counts</c><00:11:52.720><c> one</c><00:11:53.279><c> and</c><00:11:53.600><c> three</c><00:11:54.320><c> they</c><00:11:54.639><c> tell</c>

00:11:54.870 --> 00:11:54.880 align:start position:0%
now these counts one and three they tell
 

00:11:54.880 --> 00:11:55.269 align:start position:0%
now these counts one and three they tell
us

00:11:55.269 --> 00:11:55.279 align:start position:0%
us
 

00:11:55.279 --> 00:11:58.629 align:start position:0%
us
how<00:11:55.519><c> to</c><00:11:55.760><c> partition</c><00:11:56.959><c> the</c><00:11:57.440><c> pre-order</c><00:11:58.160><c> traversal</c>

00:11:58.629 --> 00:11:58.639 align:start position:0%
how to partition the pre-order traversal
 

00:11:58.639 --> 00:11:59.910 align:start position:0%
how to partition the pre-order traversal
so<00:11:58.800><c> take</c><00:11:58.959><c> a</c><00:11:59.040><c> look</c><00:11:59.200><c> at</c><00:11:59.279><c> the</c><00:11:59.440><c> pre-order</c>

00:11:59.910 --> 00:11:59.920 align:start position:0%
so take a look at the pre-order
 

00:11:59.920 --> 00:12:01.030 align:start position:0%
so take a look at the pre-order
traversal

00:12:01.030 --> 00:12:01.040 align:start position:0%
traversal
 

00:12:01.040 --> 00:12:03.990 align:start position:0%
traversal
one<00:12:01.519><c> tells</c><00:12:01.920><c> us</c><00:12:02.240><c> that</c><00:12:02.399><c> we're</c><00:12:02.560><c> gonna</c><00:12:02.959><c> cut</c><00:12:03.600><c> over</c>

00:12:03.990 --> 00:12:04.000 align:start position:0%
one tells us that we're gonna cut over
 

00:12:04.000 --> 00:12:06.310 align:start position:0%
one tells us that we're gonna cut over
here<00:12:04.320><c> because</c><00:12:04.639><c> this</c><00:12:04.959><c> needs</c><00:12:05.200><c> to</c><00:12:05.279><c> be</c><00:12:05.519><c> size</c>

00:12:06.310 --> 00:12:06.320 align:start position:0%
here because this needs to be size
 

00:12:06.320 --> 00:12:09.350 align:start position:0%
here because this needs to be size
one<00:12:07.040><c> this</c><00:12:07.360><c> needs</c><00:12:07.600><c> to</c><00:12:07.680><c> be</c><00:12:07.920><c> size</c><00:12:08.639><c> three</c>

00:12:09.350 --> 00:12:09.360 align:start position:0%
one this needs to be size three
 

00:12:09.360 --> 00:12:12.310 align:start position:0%
one this needs to be size three
and<00:12:09.519><c> then</c><00:12:09.920><c> from</c><00:12:10.639><c> this</c><00:12:11.200><c> subarray</c><00:12:12.079><c> this</c>

00:12:12.310 --> 00:12:12.320 align:start position:0%
and then from this subarray this
 

00:12:12.320 --> 00:12:13.990 align:start position:0%
and then from this subarray this
subarray<00:12:12.720><c> with</c><00:12:12.880><c> only</c><00:12:13.120><c> one</c><00:12:13.360><c> value</c>

00:12:13.990 --> 00:12:14.000 align:start position:0%
subarray with only one value
 

00:12:14.000 --> 00:12:16.069 align:start position:0%
subarray with only one value
we<00:12:14.160><c> are</c><00:12:14.320><c> going</c><00:12:14.399><c> to</c><00:12:14.560><c> recursively</c><00:12:15.440><c> run</c><00:12:15.839><c> the</c>

00:12:16.069 --> 00:12:16.079 align:start position:0%
we are going to recursively run the
 

00:12:16.079 --> 00:12:17.030 align:start position:0%
we are going to recursively run the
algorithm

00:12:17.030 --> 00:12:17.040 align:start position:0%
algorithm
 

00:12:17.040 --> 00:12:20.069 align:start position:0%
algorithm
to<00:12:17.200><c> create</c><00:12:17.760><c> this</c><00:12:18.399><c> left</c><00:12:18.720><c> subtree</c><00:12:19.440><c> and</c><00:12:19.839><c> with</c>

00:12:20.069 --> 00:12:20.079 align:start position:0%
to create this left subtree and with
 

00:12:20.079 --> 00:12:21.190 align:start position:0%
to create this left subtree and with
this<00:12:20.320><c> sub</c><00:12:20.560><c> array</c><00:12:20.800><c> we're</c><00:12:20.959><c> going</c><00:12:21.040><c> to</c>

00:12:21.190 --> 00:12:21.200 align:start position:0%
this sub array we're going to
 

00:12:21.200 --> 00:12:22.949 align:start position:0%
this sub array we're going to
recursively<00:12:21.920><c> run</c><00:12:22.079><c> the</c><00:12:22.320><c> algorithm</c>

00:12:22.949 --> 00:12:22.959 align:start position:0%
recursively run the algorithm
 

00:12:22.959 --> 00:12:25.829 align:start position:0%
recursively run the algorithm
to<00:12:23.120><c> create</c><00:12:24.000><c> this</c><00:12:24.800><c> subtree</c><00:12:25.440><c> and</c><00:12:25.519><c> we're</c><00:12:25.680><c> just</c>

00:12:25.829 --> 00:12:25.839 align:start position:0%
to create this subtree and we're just
 

00:12:25.839 --> 00:12:27.590 align:start position:0%
to create this subtree and we're just
going<00:12:26.000><c> to</c><00:12:26.079><c> continuously</c><00:12:26.959><c> repeat</c><00:12:27.360><c> that</c>

00:12:27.590 --> 00:12:27.600 align:start position:0%
going to continuously repeat that
 

00:12:27.600 --> 00:12:29.670 align:start position:0%
going to continuously repeat that
process<00:12:28.079><c> until</c><00:12:28.399><c> we</c><00:12:28.480><c> get</c><00:12:28.639><c> to</c><00:12:28.800><c> our</c><00:12:28.880><c> base</c><00:12:29.200><c> cases</c>

00:12:29.670 --> 00:12:29.680 align:start position:0%
process until we get to our base cases
 

00:12:29.680 --> 00:12:31.030 align:start position:0%
process until we get to our base cases
and<00:12:29.839><c> until</c><00:12:30.079><c> we're</c><00:12:30.320><c> finished</c><00:12:30.639><c> with</c><00:12:30.800><c> every</c>

00:12:31.030 --> 00:12:31.040 align:start position:0%
and until we're finished with every
 

00:12:31.040 --> 00:12:32.790 align:start position:0%
and until we're finished with every
single<00:12:31.440><c> node</c><00:12:31.680><c> that</c><00:12:31.839><c> we</c><00:12:31.920><c> need</c><00:12:32.079><c> to</c><00:12:32.240><c> create</c>

00:12:32.790 --> 00:12:32.800 align:start position:0%
single node that we need to create
 

00:12:32.800 --> 00:12:34.629 align:start position:0%
single node that we need to create
so<00:12:32.959><c> now</c><00:12:33.120><c> let</c><00:12:33.279><c> me</c><00:12:33.440><c> actually</c><00:12:33.760><c> show</c><00:12:33.920><c> you</c><00:12:34.000><c> the</c><00:12:34.160><c> code</c>

00:12:34.629 --> 00:12:34.639 align:start position:0%
so now let me actually show you the code
 

00:12:34.639 --> 00:12:36.389 align:start position:0%
so now let me actually show you the code
it's<00:12:34.800><c> actually</c><00:12:35.360><c> very</c><00:12:35.839><c> short</c>

00:12:36.389 --> 00:12:36.399 align:start position:0%
it's actually very short
 

00:12:36.399 --> 00:12:39.030 align:start position:0%
it's actually very short
less<00:12:36.639><c> than</c><00:12:36.880><c> 10</c><00:12:37.200><c> lines</c><00:12:38.000><c> okay</c><00:12:38.320><c> so</c><00:12:38.639><c> as</c><00:12:38.880><c> i</c>

00:12:39.030 --> 00:12:39.040 align:start position:0%
less than 10 lines okay so as i
 

00:12:39.040 --> 00:12:40.949 align:start position:0%
less than 10 lines okay so as i
mentioned<00:12:39.440><c> this</c><00:12:39.680><c> is</c><00:12:39.839><c> a</c><00:12:39.920><c> recursive</c><00:12:40.560><c> algorithm</c>

00:12:40.949 --> 00:12:40.959 align:start position:0%
mentioned this is a recursive algorithm
 

00:12:40.959 --> 00:12:42.710 align:start position:0%
mentioned this is a recursive algorithm
so<00:12:41.200><c> we</c><00:12:41.360><c> always</c><00:12:41.680><c> want</c><00:12:41.839><c> to</c><00:12:41.920><c> start</c><00:12:42.160><c> with</c><00:12:42.320><c> the</c><00:12:42.399><c> base</c>

00:12:42.710 --> 00:12:42.720 align:start position:0%
so we always want to start with the base
 

00:12:42.720 --> 00:12:44.389 align:start position:0%
so we always want to start with the base
case<00:12:43.120><c> and</c><00:12:43.360><c> the</c><00:12:43.440><c> base</c><00:12:43.680><c> case</c><00:12:43.920><c> is</c><00:12:44.079><c> going</c><00:12:44.160><c> to</c><00:12:44.240><c> be</c>

00:12:44.389 --> 00:12:44.399 align:start position:0%
case and the base case is going to be
 

00:12:44.399 --> 00:12:46.470 align:start position:0%
case and the base case is going to be
what<00:12:44.560><c> if</c><00:12:44.720><c> we</c><00:12:44.880><c> don't</c><00:12:45.120><c> have</c><00:12:45.440><c> any</c><00:12:45.760><c> nodes</c>

00:12:46.470 --> 00:12:46.480 align:start position:0%
what if we don't have any nodes
 

00:12:46.480 --> 00:12:48.870 align:start position:0%
what if we don't have any nodes
to<00:12:46.800><c> traverse</c><00:12:47.440><c> through</c><00:12:47.680><c> the</c><00:12:48.000><c> two</c><00:12:48.399><c> arrays</c><00:12:48.800><c> that</c>

00:12:48.870 --> 00:12:48.880 align:start position:0%
to traverse through the two arrays that
 

00:12:48.880 --> 00:12:49.670 align:start position:0%
to traverse through the two arrays that
we're<00:12:49.120><c> given</c>

00:12:49.670 --> 00:12:49.680 align:start position:0%
we're given
 

00:12:49.680 --> 00:12:52.310 align:start position:0%
we're given
that<00:12:49.920><c> means</c><00:12:50.240><c> we</c><00:12:50.399><c> can</c><00:12:50.720><c> return</c><00:12:51.600><c> null</c><00:12:52.000><c> or</c>

00:12:52.310 --> 00:12:52.320 align:start position:0%
that means we can return null or
 

00:12:52.320 --> 00:12:54.150 align:start position:0%
that means we can return null or
basically<00:12:52.720><c> we</c><00:12:52.880><c> don't</c><00:12:53.040><c> have</c><00:12:53.200><c> to</c><00:12:53.360><c> create</c>

00:12:54.150 --> 00:12:54.160 align:start position:0%
basically we don't have to create
 

00:12:54.160 --> 00:12:57.590 align:start position:0%
basically we don't have to create
a<00:12:54.320><c> tree</c><00:12:54.560><c> so</c><00:12:54.720><c> if</c><00:12:55.120><c> pre-order</c><00:12:55.839><c> is</c><00:12:56.000><c> empty</c><00:12:56.880><c> or</c>

00:12:57.590 --> 00:12:57.600 align:start position:0%
a tree so if pre-order is empty or
 

00:12:57.600 --> 00:13:01.350 align:start position:0%
a tree so if pre-order is empty or
in<00:12:57.920><c> order</c><00:12:58.800><c> is</c><00:12:59.200><c> empty</c><00:12:59.920><c> then</c><00:13:00.160><c> we</c><00:13:00.399><c> can</c><00:13:00.560><c> return</c>

00:13:01.350 --> 00:13:01.360 align:start position:0%
in order is empty then we can return
 

00:13:01.360 --> 00:13:03.350 align:start position:0%
in order is empty then we can return
null<00:13:01.680><c> we</c><00:13:01.839><c> have</c><00:13:02.000><c> no</c><00:13:02.240><c> values</c><00:13:02.720><c> so</c><00:13:02.880><c> we</c><00:13:03.040><c> don't</c><00:13:03.200><c> need</c>

00:13:03.350 --> 00:13:03.360 align:start position:0%
null we have no values so we don't need
 

00:13:03.360 --> 00:13:05.750 align:start position:0%
null we have no values so we don't need
to<00:13:03.600><c> create</c><00:13:03.920><c> a</c><00:13:04.000><c> tree</c><00:13:04.320><c> we</c><00:13:04.480><c> can</c><00:13:04.639><c> return</c><00:13:05.040><c> null</c>

00:13:05.750 --> 00:13:05.760 align:start position:0%
to create a tree we can return null
 

00:13:05.760 --> 00:13:07.910 align:start position:0%
to create a tree we can return null
otherwise<00:13:06.399><c> we're</c><00:13:06.560><c> going</c><00:13:06.639><c> to</c><00:13:06.800><c> create</c><00:13:07.360><c> a</c><00:13:07.519><c> tree</c>

00:13:07.910 --> 00:13:07.920 align:start position:0%
otherwise we're going to create a tree
 

00:13:07.920 --> 00:13:08.870 align:start position:0%
otherwise we're going to create a tree
node<00:13:08.240><c> right</c>

00:13:08.870 --> 00:13:08.880 align:start position:0%
node right
 

00:13:08.880 --> 00:13:10.550 align:start position:0%
node right
and<00:13:09.120><c> what's</c><00:13:09.360><c> the</c><00:13:09.519><c> value</c><00:13:09.920><c> of</c><00:13:10.000><c> that</c><00:13:10.160><c> tree</c><00:13:10.320><c> node</c>

00:13:10.550 --> 00:13:10.560 align:start position:0%
and what's the value of that tree node
 

00:13:10.560 --> 00:13:11.910 align:start position:0%
and what's the value of that tree node
going<00:13:10.639><c> to</c><00:13:10.800><c> be</c><00:13:10.959><c> well</c><00:13:11.120><c> it's</c><00:13:11.279><c> going</c><00:13:11.360><c> to</c><00:13:11.440><c> be</c>

00:13:11.910 --> 00:13:11.920 align:start position:0%
going to be well it's going to be
 

00:13:11.920 --> 00:13:14.069 align:start position:0%
going to be well it's going to be
the<00:13:12.240><c> first</c><00:13:12.639><c> value</c><00:13:13.040><c> that</c><00:13:13.200><c> happens</c><00:13:13.600><c> to</c><00:13:13.680><c> be</c><00:13:13.920><c> in</c>

00:13:14.069 --> 00:13:14.079 align:start position:0%
the first value that happens to be in
 

00:13:14.079 --> 00:13:15.030 align:start position:0%
the first value that happens to be in
the<00:13:14.240><c> pre-order</c>

00:13:15.030 --> 00:13:15.040 align:start position:0%
the pre-order
 

00:13:15.040 --> 00:13:16.710 align:start position:0%
the pre-order
array<00:13:15.360><c> just</c><00:13:15.600><c> like</c><00:13:15.760><c> i</c><00:13:15.920><c> showed</c><00:13:16.160><c> you</c><00:13:16.399><c> right</c>

00:13:16.710 --> 00:13:16.720 align:start position:0%
array just like i showed you right
 

00:13:16.720 --> 00:13:18.550 align:start position:0%
array just like i showed you right
always<00:13:17.120><c> going</c><00:13:17.279><c> to</c><00:13:17.360><c> be</c><00:13:17.519><c> the</c><00:13:17.680><c> first</c><00:13:18.079><c> value</c><00:13:18.399><c> so</c>

00:13:18.550 --> 00:13:18.560 align:start position:0%
always going to be the first value so
 

00:13:18.560 --> 00:13:19.829 align:start position:0%
always going to be the first value so
it's<00:13:18.720><c> always</c><00:13:19.040><c> going</c><00:13:19.120><c> to</c><00:13:19.200><c> be</c>

00:13:19.829 --> 00:13:19.839 align:start position:0%
it's always going to be
 

00:13:19.839 --> 00:13:22.069 align:start position:0%
it's always going to be
index<00:13:20.320><c> of</c><00:13:20.480><c> zero</c><00:13:21.120><c> and</c><00:13:21.200><c> then</c><00:13:21.519><c> whatever</c><00:13:21.839><c> that</c>

00:13:22.069 --> 00:13:22.079 align:start position:0%
index of zero and then whatever that
 

00:13:22.079 --> 00:13:23.030 align:start position:0%
index of zero and then whatever that
value<00:13:22.639><c> was</c>

00:13:23.030 --> 00:13:23.040 align:start position:0%
value was
 

00:13:23.040 --> 00:13:26.230 align:start position:0%
value was
we<00:13:23.279><c> want</c><00:13:23.440><c> to</c><00:13:23.680><c> find</c><00:13:24.320><c> the</c><00:13:24.560><c> position</c><00:13:25.279><c> of</c><00:13:25.440><c> it</c><00:13:25.760><c> in</c>

00:13:26.230 --> 00:13:26.240 align:start position:0%
we want to find the position of it in
 

00:13:26.240 --> 00:13:29.430 align:start position:0%
we want to find the position of it in
the<00:13:26.560><c> in</c><00:13:26.880><c> order</c><00:13:27.279><c> array</c><00:13:27.680><c> so</c><00:13:28.320><c> inorder</c><00:13:28.959><c> dot</c>

00:13:29.430 --> 00:13:29.440 align:start position:0%
the in order array so inorder dot
 

00:13:29.440 --> 00:13:32.310 align:start position:0%
the in order array so inorder dot
index<00:13:29.920><c> so</c><00:13:30.079><c> we</c><00:13:30.160><c> want</c><00:13:30.399><c> the</c><00:13:30.560><c> index</c><00:13:31.200><c> of</c><00:13:31.440><c> that</c><00:13:31.760><c> value</c>

00:13:32.310 --> 00:13:32.320 align:start position:0%
index so we want the index of that value
 

00:13:32.320 --> 00:13:34.310 align:start position:0%
index so we want the index of that value
pre-order<00:13:32.880><c> of</c><00:13:33.120><c> zero</c>

00:13:34.310 --> 00:13:34.320 align:start position:0%
pre-order of zero
 

00:13:34.320 --> 00:13:36.389 align:start position:0%
pre-order of zero
and<00:13:34.560><c> we're</c><00:13:34.800><c> going</c><00:13:34.880><c> to</c><00:13:34.959><c> get</c><00:13:35.200><c> it</c><00:13:35.360><c> in</c><00:13:35.680><c> mid</c><00:13:36.160><c> now</c>

00:13:36.389 --> 00:13:36.399 align:start position:0%
and we're going to get it in mid now
 

00:13:36.399 --> 00:13:37.910 align:start position:0%
and we're going to get it in mid now
this<00:13:36.800><c> is</c><00:13:37.040><c> the</c><00:13:37.279><c> part</c>

00:13:37.910 --> 00:13:37.920 align:start position:0%
this is the part
 

00:13:37.920 --> 00:13:39.509 align:start position:0%
this is the part
where<00:13:38.240><c> we're</c><00:13:38.480><c> going</c><00:13:38.560><c> to</c><00:13:38.639><c> build</c><00:13:38.880><c> the</c><00:13:39.040><c> subtree</c>

00:13:39.509 --> 00:13:39.519 align:start position:0%
where we're going to build the subtree
 

00:13:39.519 --> 00:13:42.069 align:start position:0%
where we're going to build the subtree
so<00:13:39.760><c> root.left</c><00:13:40.800><c> let's</c><00:13:41.120><c> create</c><00:13:41.600><c> the</c><00:13:41.839><c> left</c>

00:13:42.069 --> 00:13:42.079 align:start position:0%
so root.left let's create the left
 

00:13:42.079 --> 00:13:43.670 align:start position:0%
so root.left let's create the left
subtree<00:13:42.639><c> and</c><00:13:42.800><c> we're</c><00:13:42.959><c> going</c><00:13:43.040><c> to</c><00:13:43.199><c> do</c><00:13:43.360><c> this</c>

00:13:43.670 --> 00:13:43.680 align:start position:0%
subtree and we're going to do this
 

00:13:43.680 --> 00:13:45.670 align:start position:0%
subtree and we're going to do this
recursively<00:13:44.639><c> as</c><00:13:44.880><c> i</c><00:13:45.040><c> mentioned</c>

00:13:45.670 --> 00:13:45.680 align:start position:0%
recursively as i mentioned
 

00:13:45.680 --> 00:13:49.030 align:start position:0%
recursively as i mentioned
so<00:13:46.279><c> self.build</c><00:13:47.680><c> tree</c><00:13:48.079><c> we're</c><00:13:48.480><c> calling</c><00:13:48.880><c> the</c>

00:13:49.030 --> 00:13:49.040 align:start position:0%
so self.build tree we're calling the
 

00:13:49.040 --> 00:13:49.990 align:start position:0%
so self.build tree we're calling the
function<00:13:49.440><c> that</c><00:13:49.600><c> we're</c>

00:13:49.990 --> 00:13:50.000 align:start position:0%
function that we're
 

00:13:50.000 --> 00:13:53.030 align:start position:0%
function that we're
inside<00:13:50.560><c> of</c><00:13:51.279><c> and</c><00:13:51.519><c> the</c><00:13:51.760><c> convenient</c><00:13:52.320><c> part</c><00:13:52.720><c> about</c>

00:13:53.030 --> 00:13:53.040 align:start position:0%
inside of and the convenient part about
 

00:13:53.040 --> 00:13:54.629 align:start position:0%
inside of and the convenient part about
python<00:13:53.680><c> is</c><00:13:53.920><c> we</c><00:13:54.079><c> can</c><00:13:54.320><c> do</c>

00:13:54.629 --> 00:13:54.639 align:start position:0%
python is we can do
 

00:13:54.639 --> 00:13:56.949 align:start position:0%
python is we can do
sublist<00:13:55.440><c> so</c><00:13:55.600><c> that's</c><00:13:55.920><c> going</c><00:13:56.000><c> to</c><00:13:56.160><c> cut</c><00:13:56.399><c> down</c><00:13:56.720><c> our</c>

00:13:56.949 --> 00:13:56.959 align:start position:0%
sublist so that's going to cut down our
 

00:13:56.959 --> 00:13:58.870 align:start position:0%
sublist so that's going to cut down our
code<00:13:57.279><c> quite</c><00:13:57.519><c> a</c><00:13:57.600><c> bit</c><00:13:57.839><c> so</c><00:13:58.000><c> we</c><00:13:58.160><c> need</c><00:13:58.320><c> to</c><00:13:58.399><c> pass</c><00:13:58.720><c> in</c>

00:13:58.870 --> 00:13:58.880 align:start position:0%
code quite a bit so we need to pass in
 

00:13:58.880 --> 00:13:59.990 align:start position:0%
code quite a bit so we need to pass in
the<00:13:59.199><c> new</c>

00:13:59.990 --> 00:14:00.000 align:start position:0%
the new
 

00:14:00.000 --> 00:14:03.269 align:start position:0%
the new
pre-order<00:14:00.880><c> and</c><00:14:01.120><c> in</c><00:14:01.440><c> order</c><00:14:01.920><c> arrays</c><00:14:02.720><c> or</c><00:14:02.880><c> the</c>

00:14:03.269 --> 00:14:03.279 align:start position:0%
pre-order and in order arrays or the
 

00:14:03.279 --> 00:14:06.710 align:start position:0%
pre-order and in order arrays or the
sub-arrays<00:14:04.480><c> more</c><00:14:04.720><c> likely</c><00:14:05.519><c> so</c><00:14:05.839><c> pre-order</c>

00:14:06.710 --> 00:14:06.720 align:start position:0%
sub-arrays more likely so pre-order
 

00:14:06.720 --> 00:14:08.550 align:start position:0%
sub-arrays more likely so pre-order
what<00:14:06.959><c> are</c><00:14:07.040><c> we</c><00:14:07.120><c> going</c><00:14:07.279><c> to</c><00:14:07.360><c> pass</c><00:14:07.760><c> in</c><00:14:08.079><c> for</c><00:14:08.240><c> the</c>

00:14:08.550 --> 00:14:08.560 align:start position:0%
what are we going to pass in for the
 

00:14:08.560 --> 00:14:09.910 align:start position:0%
what are we going to pass in for the
left<00:14:08.800><c> subtree</c><00:14:09.519><c> of</c>

00:14:09.910 --> 00:14:09.920 align:start position:0%
left subtree of
 

00:14:09.920 --> 00:14:13.030 align:start position:0%
left subtree of
pre-order<00:14:10.800><c> well</c><00:14:11.360><c> mid</c><00:14:12.000><c> tells</c><00:14:12.399><c> us</c>

00:14:13.030 --> 00:14:13.040 align:start position:0%
pre-order well mid tells us
 

00:14:13.040 --> 00:14:16.470 align:start position:0%
pre-order well mid tells us
mid<00:14:13.440><c> tells</c><00:14:13.760><c> us</c><00:14:14.000><c> how</c><00:14:14.160><c> many</c><00:14:15.040><c> nodes</c><00:14:15.440><c> we</c><00:14:15.920><c> want</c><00:14:16.240><c> the</c>

00:14:16.470 --> 00:14:16.480 align:start position:0%
mid tells us how many nodes we want the
 

00:14:16.480 --> 00:14:17.509 align:start position:0%
mid tells us how many nodes we want the
index

00:14:17.509 --> 00:14:17.519 align:start position:0%
index
 

00:14:17.519 --> 00:14:19.509 align:start position:0%
index
of<00:14:17.839><c> basically</c><00:14:18.240><c> the</c><00:14:18.399><c> value</c><00:14:18.800><c> of</c><00:14:18.880><c> mid</c><00:14:19.199><c> tells</c><00:14:19.440><c> us</c>

00:14:19.509 --> 00:14:19.519 align:start position:0%
of basically the value of mid tells us
 

00:14:19.519 --> 00:14:21.189 align:start position:0%
of basically the value of mid tells us
how<00:14:19.680><c> many</c><00:14:19.839><c> nodes</c><00:14:20.160><c> we</c><00:14:20.399><c> want</c><00:14:20.720><c> in</c><00:14:20.800><c> the</c><00:14:20.959><c> left</c>

00:14:21.189 --> 00:14:21.199 align:start position:0%
how many nodes we want in the left
 

00:14:21.199 --> 00:14:22.629 align:start position:0%
how many nodes we want in the left
subtree<00:14:21.519><c> so</c><00:14:21.680><c> what</c><00:14:21.839><c> i'm</c><00:14:21.920><c> going</c><00:14:22.000><c> to</c><00:14:22.079><c> do</c><00:14:22.240><c> is</c><00:14:22.399><c> for</c>

00:14:22.629 --> 00:14:22.639 align:start position:0%
subtree so what i'm going to do is for
 

00:14:22.639 --> 00:14:23.350 align:start position:0%
subtree so what i'm going to do is for
pre-order

00:14:23.350 --> 00:14:23.360 align:start position:0%
pre-order
 

00:14:23.360 --> 00:14:25.110 align:start position:0%
pre-order
we're<00:14:23.519><c> going</c><00:14:23.600><c> to</c><00:14:23.760><c> start</c><00:14:24.079><c> at</c><00:14:24.320><c> index</c><00:14:24.720><c> one</c><00:14:24.959><c> we're</c>

00:14:25.110 --> 00:14:25.120 align:start position:0%
we're going to start at index one we're
 

00:14:25.120 --> 00:14:26.790 align:start position:0%
we're going to start at index one we're
basically<00:14:25.600><c> skipping</c><00:14:25.920><c> the</c><00:14:26.079><c> zero</c><00:14:26.480><c> index</c>

00:14:26.790 --> 00:14:26.800 align:start position:0%
basically skipping the zero index
 

00:14:26.800 --> 00:14:28.949 align:start position:0%
basically skipping the zero index
because<00:14:27.040><c> we</c><00:14:27.199><c> already</c><00:14:27.600><c> just</c><00:14:27.920><c> created</c><00:14:28.320><c> a</c><00:14:28.480><c> node</c>

00:14:28.949 --> 00:14:28.959 align:start position:0%
because we already just created a node
 

00:14:28.959 --> 00:14:30.949 align:start position:0%
because we already just created a node
for<00:14:29.120><c> the</c><00:14:29.279><c> zero</c><00:14:29.600><c> index</c><00:14:30.160><c> we're</c><00:14:30.320><c> starting</c><00:14:30.800><c> at</c>

00:14:30.949 --> 00:14:30.959 align:start position:0%
for the zero index we're starting at
 

00:14:30.959 --> 00:14:32.949 align:start position:0%
for the zero index we're starting at
index<00:14:31.360><c> one</c><00:14:31.920><c> going</c><00:14:32.320><c> all</c><00:14:32.480><c> the</c><00:14:32.639><c> way</c>

00:14:32.949 --> 00:14:32.959 align:start position:0%
index one going all the way
 

00:14:32.959 --> 00:14:36.629 align:start position:0%
index one going all the way
up<00:14:33.120><c> until</c><00:14:34.000><c> mid</c><00:14:34.560><c> plus</c><00:14:34.959><c> one</c><00:14:35.600><c> in</c><00:14:35.760><c> python</c>

00:14:36.629 --> 00:14:36.639 align:start position:0%
up until mid plus one in python
 

00:14:36.639 --> 00:14:39.030 align:start position:0%
up until mid plus one in python
this<00:14:37.040><c> mid</c><00:14:37.360><c> plus</c><00:14:37.600><c> one</c><00:14:37.920><c> is</c><00:14:38.079><c> non-inclusive</c><00:14:38.800><c> so</c>

00:14:39.030 --> 00:14:39.040 align:start position:0%
this mid plus one is non-inclusive so
 

00:14:39.040 --> 00:14:40.870 align:start position:0%
this mid plus one is non-inclusive so
this<00:14:39.199><c> sub</c><00:14:39.440><c> array</c><00:14:39.760><c> is</c><00:14:39.920><c> really</c><00:14:40.320><c> just</c>

00:14:40.870 --> 00:14:40.880 align:start position:0%
this sub array is really just
 

00:14:40.880 --> 00:14:44.310 align:start position:0%
this sub array is really just
a<00:14:41.040><c> pre-order</c><00:14:41.680><c> from</c><00:14:42.000><c> index</c><00:14:42.480><c> one</c><00:14:43.040><c> to</c><00:14:43.360><c> mid</c><00:14:43.920><c> so</c>

00:14:44.310 --> 00:14:44.320 align:start position:0%
a pre-order from index one to mid so
 

00:14:44.320 --> 00:14:45.990 align:start position:0%
a pre-order from index one to mid so
that's<00:14:44.560><c> what</c><00:14:44.720><c> we're</c><00:14:44.880><c> doing</c><00:14:45.519><c> and</c><00:14:45.760><c> we're</c><00:14:45.920><c> going</c>

00:14:45.990 --> 00:14:46.000 align:start position:0%
that's what we're doing and we're going
 

00:14:46.000 --> 00:14:47.590 align:start position:0%
that's what we're doing and we're going
to<00:14:46.160><c> pass</c><00:14:46.560><c> in</c><00:14:47.040><c> the</c><00:14:47.279><c> in</c>

00:14:47.590 --> 00:14:47.600 align:start position:0%
to pass in the in
 

00:14:47.600 --> 00:14:49.829 align:start position:0%
to pass in the in
order<00:14:47.920><c> portion</c><00:14:48.240><c> that</c><00:14:48.399><c> we</c><00:14:48.560><c> need</c><00:14:48.959><c> as</c><00:14:49.120><c> well</c><00:14:49.680><c> and</c>

00:14:49.829 --> 00:14:49.839 align:start position:0%
order portion that we need as well and
 

00:14:49.839 --> 00:14:50.949 align:start position:0%
order portion that we need as well and
that's<00:14:50.079><c> just</c><00:14:50.320><c> going</c><00:14:50.399><c> to</c><00:14:50.560><c> be</c>

00:14:50.949 --> 00:14:50.959 align:start position:0%
that's just going to be
 

00:14:50.959 --> 00:14:53.910 align:start position:0%
that's just going to be
from<00:14:51.199><c> the</c><00:14:51.360><c> beginning</c><00:14:52.079><c> up</c><00:14:52.240><c> until</c><00:14:52.800><c> mid</c><00:14:53.279><c> but</c><00:14:53.600><c> not</c>

00:14:53.910 --> 00:14:53.920 align:start position:0%
from the beginning up until mid but not
 

00:14:53.920 --> 00:14:55.590 align:start position:0%
from the beginning up until mid but not
including<00:14:54.480><c> mid</c><00:14:54.800><c> right</c>

00:14:55.590 --> 00:14:55.600 align:start position:0%
including mid right
 

00:14:55.600 --> 00:14:57.509 align:start position:0%
including mid right
this<00:14:56.000><c> probably</c><00:14:56.320><c> makes</c><00:14:56.560><c> more</c><00:14:56.800><c> sense</c><00:14:57.120><c> if</c><00:14:57.279><c> you</c><00:14:57.360><c> go</c>

00:14:57.509 --> 00:14:57.519 align:start position:0%
this probably makes more sense if you go
 

00:14:57.519 --> 00:14:59.189 align:start position:0%
this probably makes more sense if you go
back<00:14:57.839><c> and</c><00:14:57.920><c> look</c><00:14:58.160><c> at</c><00:14:58.240><c> the</c><00:14:58.399><c> picture</c><00:14:58.880><c> but</c>

00:14:59.189 --> 00:14:59.199 align:start position:0%
back and look at the picture but
 

00:14:59.199 --> 00:15:00.710 align:start position:0%
back and look at the picture but
basically<00:14:59.680><c> we're</c><00:14:59.839><c> just</c><00:15:00.079><c> creating</c><00:15:00.480><c> the</c>

00:15:00.710 --> 00:15:00.720 align:start position:0%
basically we're just creating the
 

00:15:00.720 --> 00:15:02.470 align:start position:0%
basically we're just creating the
appropriate<00:15:01.519><c> sub-lists</c>

00:15:02.470 --> 00:15:02.480 align:start position:0%
appropriate sub-lists
 

00:15:02.480 --> 00:15:05.670 align:start position:0%
appropriate sub-lists
that<00:15:02.639><c> we</c><00:15:02.880><c> need</c><00:15:03.360><c> to</c><00:15:03.519><c> create</c><00:15:04.000><c> the</c><00:15:04.399><c> left</c><00:15:04.959><c> subtree</c>

00:15:05.670 --> 00:15:05.680 align:start position:0%
that we need to create the left subtree
 

00:15:05.680 --> 00:15:07.509 align:start position:0%
that we need to create the left subtree
we're<00:15:05.839><c> going</c><00:15:06.000><c> to</c><00:15:06.079><c> do</c><00:15:06.399><c> basically</c><00:15:06.959><c> the</c><00:15:07.120><c> exact</c>

00:15:07.509 --> 00:15:07.519 align:start position:0%
we're going to do basically the exact
 

00:15:07.519 --> 00:15:08.790 align:start position:0%
we're going to do basically the exact
same<00:15:07.760><c> thing</c><00:15:08.320><c> with</c><00:15:08.480><c> the</c>

00:15:08.790 --> 00:15:08.800 align:start position:0%
same thing with the
 

00:15:08.800 --> 00:15:11.030 align:start position:0%
same thing with the
right<00:15:09.199><c> subtree</c><00:15:10.000><c> and</c><00:15:10.240><c> i</c><00:15:10.320><c> would</c><00:15:10.560><c> encourage</c><00:15:10.880><c> you</c>

00:15:11.030 --> 00:15:11.040 align:start position:0%
right subtree and i would encourage you
 

00:15:11.040 --> 00:15:11.990 align:start position:0%
right subtree and i would encourage you
to<00:15:11.199><c> draw</c><00:15:11.440><c> this</c><00:15:11.680><c> out</c>

00:15:11.990 --> 00:15:12.000 align:start position:0%
to draw this out
 

00:15:12.000 --> 00:15:14.949 align:start position:0%
to draw this out
yourself<00:15:12.959><c> to</c><00:15:13.519><c> basically</c><00:15:14.160><c> reinforce</c><00:15:14.800><c> what</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
yourself to basically reinforce what
 

00:15:14.959 --> 00:15:16.150 align:start position:0%
yourself to basically reinforce what
you're<00:15:15.279><c> learning</c><00:15:15.680><c> or</c>

00:15:16.150 --> 00:15:16.160 align:start position:0%
you're learning or
 

00:15:16.160 --> 00:15:19.189 align:start position:0%
you're learning or
watching<00:15:16.480><c> me</c><00:15:16.720><c> do</c><00:15:16.959><c> right</c><00:15:17.120><c> now</c><00:15:17.839><c> so</c><00:15:18.480><c> to</c><00:15:18.639><c> build</c><00:15:18.880><c> the</c>

00:15:19.189 --> 00:15:19.199 align:start position:0%
watching me do right now so to build the
 

00:15:19.199 --> 00:15:20.389 align:start position:0%
watching me do right now so to build the
right<00:15:19.519><c> subtree</c>

00:15:20.389 --> 00:15:20.399 align:start position:0%
right subtree
 

00:15:20.399 --> 00:15:23.990 align:start position:0%
right subtree
we<00:15:20.560><c> need</c><00:15:20.959><c> every</c><00:15:21.519><c> value</c><00:15:22.160><c> after</c><00:15:22.720><c> this</c><00:15:23.279><c> sub</c><00:15:23.519><c> list</c>

00:15:23.990 --> 00:15:24.000 align:start position:0%
we need every value after this sub list
 

00:15:24.000 --> 00:15:26.949 align:start position:0%
we need every value after this sub list
right<00:15:24.240><c> so</c><00:15:24.399><c> we</c><00:15:24.560><c> can</c><00:15:24.720><c> just</c><00:15:24.959><c> say</c><00:15:25.839><c> starting</c><00:15:26.320><c> at</c>

00:15:26.949 --> 00:15:26.959 align:start position:0%
right so we can just say starting at
 

00:15:26.959 --> 00:15:27.509 align:start position:0%
right so we can just say starting at
index

00:15:27.509 --> 00:15:27.519 align:start position:0%
index
 

00:15:27.519 --> 00:15:31.430 align:start position:0%
index
mid<00:15:28.240><c> plus</c><00:15:29.040><c> one</c><00:15:29.600><c> going</c><00:15:30.079><c> until</c><00:15:30.480><c> the</c><00:15:30.720><c> end</c>

00:15:31.430 --> 00:15:31.440 align:start position:0%
mid plus one going until the end
 

00:15:31.440 --> 00:15:33.350 align:start position:0%
mid plus one going until the end
of<00:15:31.680><c> the</c><00:15:32.160><c> list</c><00:15:32.480><c> that's</c><00:15:32.720><c> how</c><00:15:32.880><c> you</c><00:15:33.040><c> do</c><00:15:33.120><c> it</c><00:15:33.279><c> in</c>

00:15:33.350 --> 00:15:33.360 align:start position:0%
of the list that's how you do it in
 

00:15:33.360 --> 00:15:35.030 align:start position:0%
of the list that's how you do it in
python<00:15:33.759><c> we're</c><00:15:33.920><c> starting</c><00:15:34.240><c> at</c><00:15:34.320><c> mid</c><00:15:34.560><c> plus</c><00:15:34.800><c> one</c>

00:15:35.030 --> 00:15:35.040 align:start position:0%
python we're starting at mid plus one
 

00:15:35.040 --> 00:15:36.949 align:start position:0%
python we're starting at mid plus one
and<00:15:35.199><c> going</c><00:15:35.440><c> until</c><00:15:35.759><c> the</c><00:15:35.920><c> end</c><00:15:36.160><c> of</c><00:15:36.320><c> that</c>

00:15:36.949 --> 00:15:36.959 align:start position:0%
and going until the end of that
 

00:15:36.959 --> 00:15:38.870 align:start position:0%
and going until the end of that
sub<00:15:37.279><c> list</c><00:15:37.920><c> just</c><00:15:38.079><c> like</c><00:15:38.320><c> i</c><00:15:38.399><c> showed</c><00:15:38.720><c> in</c><00:15:38.800><c> the</c>

00:15:38.870 --> 00:15:38.880 align:start position:0%
sub list just like i showed in the
 

00:15:38.880 --> 00:15:39.990 align:start position:0%
sub list just like i showed in the
picture<00:15:39.680><c> and</c>

00:15:39.990 --> 00:15:40.000 align:start position:0%
picture and
 

00:15:40.000 --> 00:15:42.310 align:start position:0%
picture and
for<00:15:40.320><c> in</c><00:15:40.560><c> order</c><00:15:41.199><c> we</c><00:15:41.360><c> can</c><00:15:41.600><c> actually</c><00:15:42.000><c> do</c><00:15:42.160><c> the</c>

00:15:42.310 --> 00:15:42.320 align:start position:0%
for in order we can actually do the
 

00:15:42.320 --> 00:15:43.430 align:start position:0%
for in order we can actually do the
exact<00:15:42.639><c> same</c><00:15:42.959><c> thing</c>

00:15:43.430 --> 00:15:43.440 align:start position:0%
exact same thing
 

00:15:43.440 --> 00:15:46.790 align:start position:0%
exact same thing
we<00:15:43.680><c> want</c><00:15:44.000><c> every</c><00:15:44.480><c> node</c><00:15:45.120><c> to</c><00:15:45.279><c> the</c><00:15:45.600><c> right</c><00:15:46.240><c> of</c>

00:15:46.790 --> 00:15:46.800 align:start position:0%
we want every node to the right of
 

00:15:46.800 --> 00:15:49.990 align:start position:0%
we want every node to the right of
mid<00:15:47.440><c> in</c><00:15:47.680><c> in</c><00:15:47.920><c> order</c><00:15:48.240><c> right</c><00:15:49.040><c> from</c><00:15:49.279><c> our</c><00:15:49.519><c> inorder</c>

00:15:49.990 --> 00:15:50.000 align:start position:0%
mid in in order right from our inorder
 

00:15:50.000 --> 00:15:52.230 align:start position:0%
mid in in order right from our inorder
array<00:15:50.320><c> we</c><00:15:50.399><c> want</c><00:15:50.720><c> every</c><00:15:51.040><c> value</c><00:15:51.440><c> to</c><00:15:51.600><c> the</c><00:15:51.920><c> right</c>

00:15:52.230 --> 00:15:52.240 align:start position:0%
array we want every value to the right
 

00:15:52.240 --> 00:15:52.790 align:start position:0%
array we want every value to the right
of<00:15:52.480><c> this</c>

00:15:52.790 --> 00:15:52.800 align:start position:0%
of this
 

00:15:52.800 --> 00:15:56.470 align:start position:0%
of this
index<00:15:53.440><c> mid</c><00:15:53.920><c> so</c><00:15:54.079><c> we</c><00:15:54.240><c> can</c><00:15:54.399><c> do</c><00:15:54.560><c> that</c><00:15:55.040><c> with</c><00:15:55.759><c> mid</c>

00:15:56.470 --> 00:15:56.480 align:start position:0%
index mid so we can do that with mid
 

00:15:56.480 --> 00:16:00.389 align:start position:0%
index mid so we can do that with mid
plus<00:15:57.199><c> one</c><00:15:58.160><c> start</c><00:15:58.800><c> starting</c><00:15:59.120><c> at</c><00:15:59.279><c> mid</c><00:15:59.519><c> plus</c><00:15:59.759><c> one</c>

00:16:00.389 --> 00:16:00.399 align:start position:0%
plus one start starting at mid plus one
 

00:16:00.399 --> 00:16:02.230 align:start position:0%
plus one start starting at mid plus one
and<00:16:00.480><c> then</c><00:16:00.800><c> going</c><00:16:01.199><c> until</c><00:16:01.519><c> the</c><00:16:01.759><c> end</c><00:16:02.000><c> of</c><00:16:02.079><c> the</c>

00:16:02.230 --> 00:16:02.240 align:start position:0%
and then going until the end of the
 

00:16:02.240 --> 00:16:04.389 align:start position:0%
and then going until the end of the
array<00:16:02.560><c> so</c><00:16:02.800><c> now</c><00:16:02.959><c> let</c><00:16:03.120><c> me</c><00:16:03.279><c> close</c><00:16:03.600><c> this</c><00:16:03.839><c> function</c>

00:16:04.389 --> 00:16:04.399 align:start position:0%
array so now let me close this function
 

00:16:04.399 --> 00:16:06.470 align:start position:0%
array so now let me close this function
and<00:16:04.639><c> so</c><00:16:04.880><c> this</c><00:16:05.120><c> is</c><00:16:05.600><c> literally</c><00:16:06.000><c> all</c><00:16:06.160><c> you</c><00:16:06.240><c> have</c><00:16:06.399><c> to</c>

00:16:06.470 --> 00:16:06.480 align:start position:0%
and so this is literally all you have to
 

00:16:06.480 --> 00:16:08.150 align:start position:0%
and so this is literally all you have to
do<00:16:06.800><c> the</c><00:16:06.959><c> reason</c><00:16:07.279><c> it's</c><00:16:07.440><c> so</c><00:16:07.680><c> easy</c>

00:16:08.150 --> 00:16:08.160 align:start position:0%
do the reason it's so easy
 

00:16:08.160 --> 00:16:10.310 align:start position:0%
do the reason it's so easy
is<00:16:08.320><c> mainly</c><00:16:08.639><c> because</c><00:16:08.800><c> i'm</c><00:16:08.959><c> using</c><00:16:09.199><c> python</c><00:16:10.079><c> but</c>

00:16:10.310 --> 00:16:10.320 align:start position:0%
is mainly because i'm using python but
 

00:16:10.320 --> 00:16:11.269 align:start position:0%
is mainly because i'm using python but
you<00:16:10.399><c> could</c><00:16:10.720><c> you</c><00:16:10.880><c> could</c>

00:16:11.269 --> 00:16:11.279 align:start position:0%
you could you could
 

00:16:11.279 --> 00:16:13.030 align:start position:0%
you could you could
read<00:16:11.680><c> you</c><00:16:11.839><c> could</c><00:16:12.000><c> do</c><00:16:12.160><c> this</c><00:16:12.399><c> code</c><00:16:12.639><c> without</c>

00:16:13.030 --> 00:16:13.040 align:start position:0%
read you could do this code without
 

00:16:13.040 --> 00:16:14.470 align:start position:0%
read you could do this code without
python<00:16:13.600><c> it</c><00:16:13.680><c> would</c><00:16:13.839><c> probably</c><00:16:14.000><c> just</c><00:16:14.240><c> be</c><00:16:14.399><c> a</c>

00:16:14.470 --> 00:16:14.480 align:start position:0%
python it would probably just be a
 

00:16:14.480 --> 00:16:15.670 align:start position:0%
python it would probably just be a
couple<00:16:14.720><c> extra</c><00:16:15.120><c> lines</c>

00:16:15.670 --> 00:16:15.680 align:start position:0%
couple extra lines
 

00:16:15.680 --> 00:16:17.509 align:start position:0%
couple extra lines
you<00:16:15.839><c> might</c><00:16:16.000><c> need</c><00:16:16.160><c> to</c><00:16:16.240><c> pass</c><00:16:16.560><c> in</c><00:16:16.720><c> a</c><00:16:16.800><c> couple</c><00:16:17.120><c> extra</c>

00:16:17.509 --> 00:16:17.519 align:start position:0%
you might need to pass in a couple extra
 

00:16:17.519 --> 00:16:19.910 align:start position:0%
you might need to pass in a couple extra
parameters<00:16:18.320><c> into</c><00:16:18.560><c> this</c><00:16:18.800><c> build</c><00:16:19.040><c> tree</c><00:16:19.360><c> function</c>

00:16:19.910 --> 00:16:19.920 align:start position:0%
parameters into this build tree function
 

00:16:19.920 --> 00:16:22.069 align:start position:0%
parameters into this build tree function
basically<00:16:20.399><c> just</c><00:16:20.720><c> these</c><00:16:21.040><c> indices</c><00:16:21.759><c> that</c><00:16:21.920><c> i'm</c>

00:16:22.069 --> 00:16:22.079 align:start position:0%
basically just these indices that i'm
 

00:16:22.079 --> 00:16:23.670 align:start position:0%
basically just these indices that i'm
doing<00:16:22.320><c> you</c><00:16:22.639><c> might</c><00:16:22.800><c> not</c><00:16:22.959><c> be</c><00:16:23.120><c> able</c><00:16:23.279><c> to</c><00:16:23.360><c> create</c>

00:16:23.670 --> 00:16:23.680 align:start position:0%
doing you might not be able to create
 

00:16:23.680 --> 00:16:24.470 align:start position:0%
doing you might not be able to create
sub<00:16:24.000><c> lists</c>

00:16:24.470 --> 00:16:24.480 align:start position:0%
sub lists
 

00:16:24.480 --> 00:16:26.629 align:start position:0%
sub lists
but<00:16:24.720><c> you</c><00:16:24.880><c> can</c><00:16:25.120><c> at</c><00:16:25.199><c> least</c><00:16:25.440><c> create</c><00:16:26.240><c> you</c><00:16:26.399><c> can</c><00:16:26.560><c> at</c>

00:16:26.629 --> 00:16:26.639 align:start position:0%
but you can at least create you can at
 

00:16:26.639 --> 00:16:28.470 align:start position:0%
but you can at least create you can at
least<00:16:26.880><c> pass</c><00:16:27.199><c> these</c><00:16:27.519><c> indices</c><00:16:28.079><c> into</c><00:16:28.240><c> your</c>

00:16:28.470 --> 00:16:28.480 align:start position:0%
least pass these indices into your
 

00:16:28.480 --> 00:16:29.030 align:start position:0%
least pass these indices into your
functions

00:16:29.030 --> 00:16:29.040 align:start position:0%
functions
 

00:16:29.040 --> 00:16:31.990 align:start position:0%
functions
in<00:16:29.199><c> java</c><00:16:29.759><c> and</c><00:16:30.000><c> other</c><00:16:30.320><c> languages</c><00:16:31.120><c> so</c><00:16:31.279><c> with</c><00:16:31.519><c> that</c>

00:16:31.990 --> 00:16:32.000 align:start position:0%
in java and other languages so with that
 

00:16:32.000 --> 00:16:33.829 align:start position:0%
in java and other languages so with that
we<00:16:32.160><c> have</c><00:16:32.399><c> actually</c><00:16:32.720><c> created</c><00:16:33.360><c> our</c>

00:16:33.829 --> 00:16:33.839 align:start position:0%
we have actually created our
 

00:16:33.839 --> 00:16:36.069 align:start position:0%
we have actually created our
uh<00:16:34.399><c> tree</c><00:16:34.800><c> so</c><00:16:35.040><c> the</c><00:16:35.199><c> only</c><00:16:35.360><c> thing</c><00:16:35.600><c> left</c><00:16:35.759><c> for</c><00:16:35.920><c> us</c><00:16:36.000><c> to</c>

00:16:36.069 --> 00:16:36.079 align:start position:0%
uh tree so the only thing left for us to
 

00:16:36.079 --> 00:16:37.670 align:start position:0%
uh tree so the only thing left for us to
do<00:16:36.320><c> is</c><00:16:36.399><c> return</c><00:16:36.880><c> that</c><00:16:37.120><c> tree</c>

00:16:37.670 --> 00:16:37.680 align:start position:0%
do is return that tree
 

00:16:37.680 --> 00:16:39.590 align:start position:0%
do is return that tree
so<00:16:37.839><c> with</c><00:16:38.000><c> that</c><00:16:38.160><c> being</c><00:16:38.480><c> said</c><00:16:39.040><c> this</c><00:16:39.279><c> is</c><00:16:39.360><c> the</c>

00:16:39.590 --> 00:16:39.600 align:start position:0%
so with that being said this is the
 

00:16:39.600 --> 00:16:41.110 align:start position:0%
so with that being said this is the
final<00:16:39.920><c> solution</c><00:16:40.480><c> it's</c><00:16:40.639><c> probably</c>

00:16:41.110 --> 00:16:41.120 align:start position:0%
final solution it's probably
 

00:16:41.120 --> 00:16:43.189 align:start position:0%
final solution it's probably
less<00:16:41.360><c> code</c><00:16:41.680><c> than</c><00:16:41.839><c> you</c><00:16:42.000><c> would</c><00:16:42.160><c> have</c><00:16:42.320><c> predicted</c>

00:16:43.189 --> 00:16:43.199 align:start position:0%
less code than you would have predicted
 

00:16:43.199 --> 00:16:45.269 align:start position:0%
less code than you would have predicted
but<00:16:43.519><c> the</c><00:16:43.759><c> problem</c><00:16:44.160><c> is</c><00:16:44.320><c> a</c><00:16:44.399><c> little</c><00:16:44.639><c> tricky</c>

00:16:45.269 --> 00:16:45.279 align:start position:0%
but the problem is a little tricky
 

00:16:45.279 --> 00:16:47.430 align:start position:0%
but the problem is a little tricky
but<00:16:45.600><c> it's</c><00:16:45.920><c> kind</c><00:16:46.079><c> of</c><00:16:46.240><c> enjoyable</c><00:16:46.959><c> at</c><00:16:47.040><c> least</c><00:16:47.279><c> in</c>

00:16:47.430 --> 00:16:47.440 align:start position:0%
but it's kind of enjoyable at least in
 

00:16:47.440 --> 00:16:48.389 align:start position:0%
but it's kind of enjoyable at least in
my<00:16:47.600><c> opinion</c>

00:16:48.389 --> 00:16:48.399 align:start position:0%
my opinion
 

00:16:48.399 --> 00:16:50.550 align:start position:0%
my opinion
so<00:16:48.639><c> i</c><00:16:48.800><c> hope</c><00:16:48.959><c> that</c><00:16:49.199><c> this</c><00:16:49.360><c> was</c><00:16:49.519><c> helpful</c><00:16:50.320><c> if</c><00:16:50.399><c> you</c>

00:16:50.550 --> 00:16:50.560 align:start position:0%
so i hope that this was helpful if you
 

00:16:50.560 --> 00:16:52.550 align:start position:0%
so i hope that this was helpful if you
enjoyed<00:16:51.279><c> please</c><00:16:51.519><c> like</c><00:16:51.839><c> and</c><00:16:51.920><c> subscribe</c><00:16:52.480><c> it</c>

00:16:52.550 --> 00:16:52.560 align:start position:0%
enjoyed please like and subscribe it
 

00:16:52.560 --> 00:16:54.710 align:start position:0%
enjoyed please like and subscribe it
supports<00:16:53.040><c> the</c><00:16:53.120><c> channel</c><00:16:53.600><c> a</c><00:16:53.920><c> lot</c><00:16:54.320><c> and</c><00:16:54.480><c> i'll</c>

00:16:54.710 --> 00:16:54.720 align:start position:0%
supports the channel a lot and i'll
 

00:16:54.720 --> 00:16:55.430 align:start position:0%
supports the channel a lot and i'll
hopefully

00:16:55.430 --> 00:16:55.440 align:start position:0%
hopefully
 

00:16:55.440 --> 00:17:03.680 align:start position:0%
hopefully
see<00:16:55.680><c> you</c><00:16:55.839><c> pretty</c><00:17:00.680><c> soon</c>

