WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.829 align:start position:0%
 
hey<00:00:00.160><c> everyone</c><00:00:00.719><c> welcome</c><00:00:01.199><c> back</c><00:00:01.439><c> and</c><00:00:01.599><c> let's</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
hey everyone welcome back and let's
 

00:00:01.839 --> 00:00:03.750 align:start position:0%
hey everyone welcome back and let's
write<00:00:02.080><c> some</c><00:00:02.240><c> more</c><00:00:02.480><c> neat</c><00:00:02.720><c> code</c><00:00:02.960><c> today</c><00:00:03.280><c> so</c><00:00:03.439><c> today</c>

00:00:03.750 --> 00:00:03.760 align:start position:0%
write some more neat code today so today
 

00:00:03.760 --> 00:00:06.630 align:start position:0%
write some more neat code today so today
let's<00:00:04.000><c> solve</c><00:00:04.319><c> the</c><00:00:04.480><c> problem</c><00:00:04.960><c> decode</c><00:00:05.839><c> ways</c><00:00:06.480><c> so</c>

00:00:06.630 --> 00:00:06.640 align:start position:0%
let's solve the problem decode ways so
 

00:00:06.640 --> 00:00:09.110 align:start position:0%
let's solve the problem decode ways so
we're<00:00:06.879><c> basically</c><00:00:07.520><c> given</c><00:00:07.919><c> a</c><00:00:08.160><c> string</c><00:00:08.800><c> of</c>

00:00:09.110 --> 00:00:09.120 align:start position:0%
we're basically given a string of
 

00:00:09.120 --> 00:00:12.070 align:start position:0%
we're basically given a string of
integers<00:00:10.080><c> and</c><00:00:10.320><c> we</c><00:00:10.559><c> want</c><00:00:10.800><c> to</c><00:00:11.040><c> know</c><00:00:11.440><c> with</c><00:00:11.759><c> that</c>

00:00:12.070 --> 00:00:12.080 align:start position:0%
integers and we want to know with that
 

00:00:12.080 --> 00:00:14.549 align:start position:0%
integers and we want to know with that
string<00:00:12.480><c> of</c><00:00:12.719><c> integers</c><00:00:13.280><c> how</c><00:00:13.599><c> many</c><00:00:14.080><c> different</c>

00:00:14.549 --> 00:00:14.559 align:start position:0%
string of integers how many different
 

00:00:14.559 --> 00:00:16.950 align:start position:0%
string of integers how many different
ways<00:00:14.960><c> can</c><00:00:15.200><c> we</c><00:00:15.440><c> take</c><00:00:15.679><c> that</c><00:00:15.839><c> string</c><00:00:16.080><c> of</c><00:00:16.240><c> integers</c>

00:00:16.950 --> 00:00:16.960 align:start position:0%
ways can we take that string of integers
 

00:00:16.960 --> 00:00:19.830 align:start position:0%
ways can we take that string of integers
and<00:00:17.119><c> decode</c><00:00:17.680><c> it</c><00:00:17.920><c> into</c><00:00:18.400><c> a</c><00:00:18.640><c> string</c><00:00:19.279><c> of</c>

00:00:19.830 --> 00:00:19.840 align:start position:0%
and decode it into a string of
 

00:00:19.840 --> 00:00:22.710 align:start position:0%
and decode it into a string of
characters<00:00:20.880><c> and</c><00:00:21.039><c> we're</c><00:00:21.279><c> given</c><00:00:21.760><c> a</c><00:00:22.000><c> specific</c>

00:00:22.710 --> 00:00:22.720 align:start position:0%
characters and we're given a specific
 

00:00:22.720 --> 00:00:26.310 align:start position:0%
characters and we're given a specific
mapping<00:00:23.519><c> so</c><00:00:24.240><c> we</c><00:00:24.400><c> have</c><00:00:24.640><c> 26</c><00:00:25.279><c> characters</c><00:00:26.160><c> and</c>

00:00:26.310 --> 00:00:26.320 align:start position:0%
mapping so we have 26 characters and
 

00:00:26.320 --> 00:00:28.470 align:start position:0%
mapping so we have 26 characters and
each<00:00:26.640><c> integer</c><00:00:27.199><c> maps</c><00:00:27.599><c> to</c><00:00:27.920><c> a</c><00:00:28.080><c> different</c>

00:00:28.470 --> 00:00:28.480 align:start position:0%
each integer maps to a different
 

00:00:28.480 --> 00:00:31.349 align:start position:0%
each integer maps to a different
character<00:00:28.880><c> so</c><00:00:29.039><c> we</c><00:00:29.279><c> have</c><00:00:29.519><c> an</c><00:00:29.679><c> integer</c><00:00:30.080><c> 1</c><00:00:30.800><c> 2</c><00:00:31.199><c> all</c>

00:00:31.349 --> 00:00:31.359 align:start position:0%
character so we have an integer 1 2 all
 

00:00:31.359 --> 00:00:35.030 align:start position:0%
character so we have an integer 1 2 all
the<00:00:31.519><c> way</c><00:00:32.160><c> to</c><00:00:32.640><c> 26</c><00:00:33.760><c> and</c><00:00:34.000><c> each</c><00:00:34.160><c> of</c><00:00:34.320><c> these</c><00:00:34.559><c> integers</c>

00:00:35.030 --> 00:00:35.040 align:start position:0%
the way to 26 and each of these integers
 

00:00:35.040 --> 00:00:36.870 align:start position:0%
the way to 26 and each of these integers
maps<00:00:35.520><c> to</c><00:00:35.840><c> a</c><00:00:35.920><c> different</c><00:00:36.239><c> character</c><00:00:36.640><c> now</c><00:00:36.800><c> we</c>

00:00:36.870 --> 00:00:36.880 align:start position:0%
maps to a different character now we
 

00:00:36.880 --> 00:00:38.869 align:start position:0%
maps to a different character now we
don't<00:00:37.040><c> actually</c><00:00:37.280><c> need</c><00:00:37.440><c> to</c><00:00:37.680><c> build</c><00:00:38.160><c> that</c><00:00:38.480><c> string</c>

00:00:38.869 --> 00:00:38.879 align:start position:0%
don't actually need to build that string
 

00:00:38.879 --> 00:00:41.110 align:start position:0%
don't actually need to build that string
that<00:00:39.520><c> we</c><00:00:39.840><c> are</c><00:00:40.000><c> mapping</c><00:00:40.320><c> to</c><00:00:40.559><c> we</c><00:00:40.640><c> just</c><00:00:40.800><c> have</c><00:00:40.879><c> to</c>

00:00:41.110 --> 00:00:41.120 align:start position:0%
that we are mapping to we just have to
 

00:00:41.120 --> 00:00:42.950 align:start position:0%
that we are mapping to we just have to
count<00:00:41.360><c> the</c><00:00:41.600><c> number</c><00:00:41.840><c> of</c><00:00:42.000><c> different</c><00:00:42.399><c> ways</c><00:00:42.800><c> we</c>

00:00:42.950 --> 00:00:42.960 align:start position:0%
count the number of different ways we
 

00:00:42.960 --> 00:00:45.190 align:start position:0%
count the number of different ways we
can<00:00:43.200><c> decode</c><00:00:43.680><c> it</c><00:00:44.160><c> so</c><00:00:44.399><c> down</c><00:00:44.640><c> here</c><00:00:44.960><c> in</c><00:00:45.039><c> the</c>

00:00:45.190 --> 00:00:45.200 align:start position:0%
can decode it so down here in the
 

00:00:45.200 --> 00:00:48.470 align:start position:0%
can decode it so down here in the
example<00:00:45.600><c> you</c><00:00:45.680><c> can</c><00:00:45.840><c> see</c><00:00:46.079><c> a</c><00:00:46.239><c> string</c><00:00:47.039><c> like</c><00:00:47.600><c> 12</c><00:00:48.320><c> can</c>

00:00:48.470 --> 00:00:48.480 align:start position:0%
example you can see a string like 12 can
 

00:00:48.480 --> 00:00:51.430 align:start position:0%
example you can see a string like 12 can
be<00:00:48.719><c> decoded</c><00:00:49.360><c> in</c><00:00:49.520><c> two</c><00:00:49.840><c> different</c><00:00:50.239><c> ways</c><00:00:50.960><c> one</c><00:00:51.199><c> way</c>

00:00:51.430 --> 00:00:51.440 align:start position:0%
be decoded in two different ways one way
 

00:00:51.440 --> 00:00:55.110 align:start position:0%
be decoded in two different ways one way
to<00:00:51.600><c> decode</c><00:00:52.000><c> it</c><00:00:52.239><c> is</c><00:00:52.640><c> just</c><00:00:53.280><c> one</c><00:00:53.840><c> and</c><00:00:54.399><c> two</c><00:00:54.719><c> because</c>

00:00:55.110 --> 00:00:55.120 align:start position:0%
to decode it is just one and two because
 

00:00:55.120 --> 00:00:56.790 align:start position:0%
to decode it is just one and two because
one<00:00:55.440><c> maps</c><00:00:55.840><c> to</c><00:00:56.079><c> a</c>

00:00:56.790 --> 00:00:56.800 align:start position:0%
one maps to a
 

00:00:56.800 --> 00:01:00.709 align:start position:0%
one maps to a
two<00:00:57.199><c> maps</c><00:00:57.760><c> to</c><00:00:58.079><c> b</c><00:00:58.559><c> so</c><00:00:58.719><c> that's</c><00:00:59.039><c> one</c><00:00:59.359><c> string</c><00:01:00.160><c> but</c>

00:01:00.709 --> 00:01:00.719 align:start position:0%
two maps to b so that's one string but
 

00:01:00.719 --> 00:01:03.590 align:start position:0%
two maps to b so that's one string but
remember<00:01:01.440><c> we</c><00:01:01.600><c> can</c><00:01:01.760><c> have</c><00:01:02.000><c> double</c><00:01:02.480><c> digit</c><00:01:03.039><c> values</c>

00:01:03.590 --> 00:01:03.600 align:start position:0%
remember we can have double digit values
 

00:01:03.600 --> 00:01:06.469 align:start position:0%
remember we can have double digit values
so<00:01:03.920><c> 12</c><00:01:04.400><c> actually</c><00:01:04.799><c> maps</c><00:01:05.199><c> to</c><00:01:05.439><c> its</c><00:01:05.680><c> own</c><00:01:06.000><c> character</c>

00:01:06.469 --> 00:01:06.479 align:start position:0%
so 12 actually maps to its own character
 

00:01:06.479 --> 00:01:10.310 align:start position:0%
so 12 actually maps to its own character
12<00:01:06.960><c> itself</c><00:01:07.520><c> maps</c><00:01:08.159><c> to</c><00:01:08.560><c> 11.</c><00:01:09.360><c> so</c><00:01:09.600><c> there</c><00:01:09.840><c> are</c><00:01:10.000><c> two</c>

00:01:10.310 --> 00:01:10.320 align:start position:0%
12 itself maps to 11. so there are two
 

00:01:10.320 --> 00:01:12.149 align:start position:0%
12 itself maps to 11. so there are two
different<00:01:10.640><c> ways</c><00:01:10.960><c> that</c><00:01:11.119><c> this</c><00:01:11.360><c> string</c><00:01:11.840><c> this</c>

00:01:12.149 --> 00:01:12.159 align:start position:0%
different ways that this string this
 

00:01:12.159 --> 00:01:13.830 align:start position:0%
different ways that this string this
string<00:01:12.479><c> of</c><00:01:12.640><c> integers</c><00:01:13.040><c> could</c><00:01:13.200><c> be</c><00:01:13.360><c> mapped</c><00:01:13.600><c> to</c><00:01:13.760><c> a</c>

00:01:13.830 --> 00:01:13.840 align:start position:0%
string of integers could be mapped to a
 

00:01:13.840 --> 00:01:16.149 align:start position:0%
string of integers could be mapped to a
string<00:01:14.159><c> of</c><00:01:14.320><c> characters</c><00:01:14.799><c> so</c><00:01:14.960><c> we</c><00:01:15.119><c> return</c><00:01:15.600><c> two</c><00:01:16.000><c> in</c>

00:01:16.149 --> 00:01:16.159 align:start position:0%
string of characters so we return two in
 

00:01:16.159 --> 00:01:18.550 align:start position:0%
string of characters so we return two in
the<00:01:16.400><c> output</c><00:01:17.119><c> now</c><00:01:17.360><c> as</c><00:01:17.520><c> you</c><00:01:17.600><c> can</c><00:01:17.840><c> see</c><00:01:18.320><c> it</c><00:01:18.400><c> would</c>

00:01:18.550 --> 00:01:18.560 align:start position:0%
the output now as you can see it would
 

00:01:18.560 --> 00:01:20.630 align:start position:0%
the output now as you can see it would
be<00:01:18.720><c> very</c><00:01:19.119><c> simple</c><00:01:19.439><c> if</c><00:01:19.520><c> we</c><00:01:19.680><c> just</c><00:01:19.840><c> had</c><00:01:20.080><c> numbers</c>

00:01:20.630 --> 00:01:20.640 align:start position:0%
be very simple if we just had numbers
 

00:01:20.640 --> 00:01:23.270 align:start position:0%
be very simple if we just had numbers
one<00:01:21.200><c> through</c><00:01:21.600><c> nine</c><00:01:22.240><c> that</c><00:01:22.479><c> map</c><00:01:22.720><c> to</c><00:01:22.880><c> characters</c>

00:01:23.270 --> 00:01:23.280 align:start position:0%
one through nine that map to characters
 

00:01:23.280 --> 00:01:25.429 align:start position:0%
one through nine that map to characters
right<00:01:23.520><c> the</c><00:01:23.759><c> problem</c><00:01:24.159><c> comes</c><00:01:24.560><c> from</c><00:01:24.880><c> double</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
right the problem comes from double
 

00:01:25.439 --> 00:01:28.789 align:start position:0%
right the problem comes from double
digits<00:01:26.159><c> right</c><00:01:26.479><c> from</c><00:01:26.799><c> 10</c><00:01:27.600><c> 10</c><00:01:28.240><c> a</c><00:01:28.400><c> string</c><00:01:28.720><c> like</c>

00:01:28.789 --> 00:01:28.799 align:start position:0%
digits right from 10 10 a string like
 

00:01:28.799 --> 00:01:30.550 align:start position:0%
digits right from 10 10 a string like
this<00:01:29.040><c> can</c><00:01:29.200><c> be</c><00:01:29.360><c> taken</c><00:01:29.759><c> in</c><00:01:29.840><c> two</c><00:01:30.000><c> different</c><00:01:30.240><c> ways</c>

00:01:30.550 --> 00:01:30.560 align:start position:0%
this can be taken in two different ways
 

00:01:30.560 --> 00:01:33.749 align:start position:0%
this can be taken in two different ways
right<00:01:30.799><c> 1</c><00:01:31.119><c> 0</c><00:01:31.520><c> or</c><00:01:31.759><c> just</c><00:01:32.400><c> 10</c><00:01:32.960><c> right</c><00:01:33.280><c> so</c><00:01:33.439><c> that's</c>

00:01:33.749 --> 00:01:33.759 align:start position:0%
right 1 0 or just 10 right so that's
 

00:01:33.759 --> 00:01:35.190 align:start position:0%
right 1 0 or just 10 right so that's
where<00:01:34.000><c> the</c><00:01:34.159><c> complexity</c><00:01:34.720><c> is</c><00:01:34.799><c> going</c><00:01:34.960><c> to</c><00:01:35.040><c> come</c>

00:01:35.190 --> 00:01:35.200 align:start position:0%
where the complexity is going to come
 

00:01:35.200 --> 00:01:37.109 align:start position:0%
where the complexity is going to come
from<00:01:35.680><c> from</c><00:01:35.920><c> a</c><00:01:36.000><c> string</c><00:01:36.320><c> like</c><00:01:36.479><c> this</c><00:01:36.799><c> we</c><00:01:36.960><c> could</c>

00:01:37.109 --> 00:01:37.119 align:start position:0%
from from a string like this we could
 

00:01:37.119 --> 00:01:40.149 align:start position:0%
from from a string like this we could
have<00:01:37.439><c> two</c><00:01:38.240><c> different</c><00:01:38.720><c> decisions</c><00:01:39.680><c> so</c><00:01:40.000><c> we're</c>

00:01:40.149 --> 00:01:40.159 align:start position:0%
have two different decisions so we're
 

00:01:40.159 --> 00:01:42.389 align:start position:0%
have two different decisions so we're
going<00:01:40.240><c> to</c><00:01:40.400><c> be</c><00:01:40.640><c> using</c><00:01:41.040><c> a</c><00:01:41.200><c> decision</c><00:01:41.759><c> tree</c><00:01:42.159><c> to</c>

00:01:42.389 --> 00:01:42.399 align:start position:0%
going to be using a decision tree to
 

00:01:42.399 --> 00:01:44.149 align:start position:0%
going to be using a decision tree to
kind<00:01:42.560><c> of</c><00:01:42.640><c> figure</c><00:01:42.960><c> out</c><00:01:43.119><c> all</c><00:01:43.280><c> the</c><00:01:43.439><c> possibilities</c>

00:01:44.149 --> 00:01:44.159 align:start position:0%
kind of figure out all the possibilities
 

00:01:44.159 --> 00:01:45.590 align:start position:0%
kind of figure out all the possibilities
with<00:01:44.320><c> this</c><00:01:44.560><c> at</c><00:01:44.640><c> least</c><00:01:44.880><c> that's</c><00:01:45.200><c> going</c><00:01:45.280><c> to</c><00:01:45.360><c> be</c>

00:01:45.590 --> 00:01:45.600 align:start position:0%
with this at least that's going to be
 

00:01:45.600 --> 00:01:47.830 align:start position:0%
with this at least that's going to be
the<00:01:45.840><c> brute</c><00:01:46.240><c> force</c><00:01:46.640><c> approach</c><00:01:47.360><c> the</c><00:01:47.520><c> only</c>

00:01:47.830 --> 00:01:47.840 align:start position:0%
the brute force approach the only
 

00:01:47.840 --> 00:01:49.510 align:start position:0%
the brute force approach the only
problem<00:01:48.240><c> is</c><00:01:48.720><c> that</c><00:01:48.880><c> there's</c><00:01:49.119><c> going</c><00:01:49.200><c> to</c><00:01:49.280><c> be</c><00:01:49.439><c> a</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
problem is that there's going to be a
 

00:01:49.520 --> 00:01:51.030 align:start position:0%
problem is that there's going to be a
few<00:01:49.840><c> different</c><00:01:50.159><c> edge</c><00:01:50.399><c> cases</c><00:01:50.720><c> we</c><00:01:50.880><c> have</c><00:01:50.960><c> to</c>

00:01:51.030 --> 00:01:51.040 align:start position:0%
few different edge cases we have to
 

00:01:51.040 --> 00:01:53.190 align:start position:0%
few different edge cases we have to
worry<00:01:51.280><c> about</c><00:01:51.680><c> for</c><00:01:51.840><c> example</c><00:01:52.399><c> we</c><00:01:52.640><c> could</c><00:01:52.799><c> have</c><00:01:53.040><c> a</c>

00:01:53.190 --> 00:01:53.200 align:start position:0%
worry about for example we could have a
 

00:01:53.200 --> 00:01:54.789 align:start position:0%
worry about for example we could have a
string<00:01:53.520><c> like</c><00:01:53.759><c> this</c><00:01:54.000><c> we</c><00:01:54.079><c> could</c><00:01:54.240><c> have</c><00:01:54.320><c> a</c><00:01:54.479><c> string</c>

00:01:54.789 --> 00:01:54.799 align:start position:0%
string like this we could have a string
 

00:01:54.799 --> 00:01:56.310 align:start position:0%
string like this we could have a string
like<00:01:55.439><c> zero</c>

00:01:56.310 --> 00:01:56.320 align:start position:0%
like zero
 

00:01:56.320 --> 00:01:58.310 align:start position:0%
like zero
six<00:01:56.719><c> right</c><00:01:57.119><c> how</c><00:01:57.360><c> what</c><00:01:57.600><c> what</c><00:01:57.759><c> exactly</c><00:01:58.079><c> does</c>

00:01:58.310 --> 00:01:58.320 align:start position:0%
six right how what what exactly does
 

00:01:58.320 --> 00:02:02.149 align:start position:0%
six right how what what exactly does
this<00:01:58.560><c> map</c><00:01:58.799><c> to</c><00:01:59.040><c> well</c><00:01:59.600><c> zero</c><00:02:00.159><c> is</c><00:02:00.320><c> not</c><00:02:00.560><c> even</c><00:02:00.880><c> in</c><00:02:01.280><c> our</c>

00:02:02.149 --> 00:02:02.159 align:start position:0%
this map to well zero is not even in our
 

00:02:02.159 --> 00:02:04.469 align:start position:0%
this map to well zero is not even in our
our<00:02:02.399><c> input</c><00:02:02.799><c> right</c><00:02:03.040><c> basically</c><00:02:03.520><c> zero</c><00:02:04.000><c> itself</c>

00:02:04.469 --> 00:02:04.479 align:start position:0%
our input right basically zero itself
 

00:02:04.479 --> 00:02:07.270 align:start position:0%
our input right basically zero itself
does<00:02:04.719><c> not</c><00:02:04.960><c> map</c><00:02:05.200><c> to</c><00:02:05.439><c> any</c><00:02:05.759><c> character</c><00:02:06.240><c> right</c><00:02:06.799><c> six</c>

00:02:07.270 --> 00:02:07.280 align:start position:0%
does not map to any character right six
 

00:02:07.280 --> 00:02:09.749 align:start position:0%
does not map to any character right six
could<00:02:07.520><c> map</c><00:02:07.759><c> to</c><00:02:07.920><c> a</c><00:02:08.080><c> character</c><00:02:08.800><c> but</c><00:02:09.119><c> zero</c><00:02:09.520><c> does</c>

00:02:09.749 --> 00:02:09.759 align:start position:0%
could map to a character but zero does
 

00:02:09.759 --> 00:02:12.309 align:start position:0%
could map to a character but zero does
not<00:02:10.000><c> so</c><00:02:10.160><c> if</c><00:02:10.319><c> we</c><00:02:10.479><c> ever</c><00:02:10.800><c> get</c><00:02:11.039><c> a</c><00:02:11.280><c> zero</c><00:02:11.840><c> you</c><00:02:12.000><c> know</c><00:02:12.160><c> a</c>

00:02:12.309 --> 00:02:12.319 align:start position:0%
not so if we ever get a zero you know a
 

00:02:12.319 --> 00:02:15.510 align:start position:0%
not so if we ever get a zero you know a
string<00:02:12.959><c> starting</c><00:02:13.440><c> with</c><00:02:13.840><c> zero</c><00:02:14.400><c> that's</c><00:02:14.800><c> invalid</c>

00:02:15.510 --> 00:02:15.520 align:start position:0%
string starting with zero that's invalid
 

00:02:15.520 --> 00:02:17.270 align:start position:0%
string starting with zero that's invalid
so<00:02:15.680><c> we</c><00:02:15.760><c> have</c><00:02:15.920><c> to</c><00:02:16.000><c> return</c><00:02:16.480><c> zero</c><00:02:16.800><c> in</c><00:02:16.879><c> that</c><00:02:17.040><c> case</c>

00:02:17.270 --> 00:02:17.280 align:start position:0%
so we have to return zero in that case
 

00:02:17.280 --> 00:02:19.910 align:start position:0%
so we have to return zero in that case
this<00:02:17.440><c> cannot</c><00:02:17.760><c> be</c><00:02:18.000><c> mapped</c><00:02:18.560><c> to</c><00:02:18.879><c> any</c><00:02:19.440><c> uh</c><00:02:19.760><c> this</c>

00:02:19.910 --> 00:02:19.920 align:start position:0%
this cannot be mapped to any uh this
 

00:02:19.920 --> 00:02:21.910 align:start position:0%
this cannot be mapped to any uh this
cannot<00:02:20.160><c> be</c><00:02:20.319><c> decoded</c><00:02:20.879><c> in</c><00:02:21.120><c> any</c><00:02:21.360><c> way</c><00:02:21.599><c> so</c><00:02:21.760><c> we</c>

00:02:21.910 --> 00:02:21.920 align:start position:0%
cannot be decoded in any way so we
 

00:02:21.920 --> 00:02:24.470 align:start position:0%
cannot be decoded in any way so we
return<00:02:22.400><c> zero</c><00:02:23.120><c> okay</c><00:02:23.360><c> let's</c><00:02:23.680><c> try</c><00:02:23.920><c> to</c><00:02:24.000><c> figure</c><00:02:24.319><c> out</c>

00:02:24.470 --> 00:02:24.480 align:start position:0%
return zero okay let's try to figure out
 

00:02:24.480 --> 00:02:26.710 align:start position:0%
return zero okay let's try to figure out
the<00:02:24.640><c> brute</c><00:02:25.040><c> force</c><00:02:25.599><c> approach</c><00:02:26.000><c> to</c><00:02:26.160><c> solving</c><00:02:26.560><c> this</c>

00:02:26.710 --> 00:02:26.720 align:start position:0%
the brute force approach to solving this
 

00:02:26.720 --> 00:02:28.710 align:start position:0%
the brute force approach to solving this
problem<00:02:27.200><c> and</c><00:02:27.520><c> in</c><00:02:27.680><c> doing</c><00:02:27.920><c> that</c><00:02:28.080><c> we'll</c><00:02:28.400><c> try</c><00:02:28.640><c> to</c>

00:02:28.710 --> 00:02:28.720 align:start position:0%
problem and in doing that we'll try to
 

00:02:28.720 --> 00:02:30.229 align:start position:0%
problem and in doing that we'll try to
figure<00:02:29.040><c> out</c><00:02:29.200><c> some</c><00:02:29.360><c> of</c><00:02:29.440><c> the</c><00:02:29.599><c> edge</c><00:02:29.840><c> cases</c><00:02:30.160><c> that</c>

00:02:30.229 --> 00:02:30.239 align:start position:0%
figure out some of the edge cases that
 

00:02:30.239 --> 00:02:31.910 align:start position:0%
figure out some of the edge cases that
we're<00:02:30.400><c> gonna</c><00:02:30.480><c> have</c><00:02:30.640><c> to</c><00:02:30.720><c> deal</c><00:02:30.959><c> with</c><00:02:31.360><c> suppose</c><00:02:31.760><c> we</c>

00:02:31.910 --> 00:02:31.920 align:start position:0%
we're gonna have to deal with suppose we
 

00:02:31.920 --> 00:02:34.229 align:start position:0%
we're gonna have to deal with suppose we
have<00:02:32.000><c> a</c><00:02:32.080><c> string</c><00:02:32.400><c> like</c><00:02:32.560><c> this</c><00:02:32.959><c> one</c><00:02:33.360><c> two</c><00:02:33.680><c> one</c><00:02:34.080><c> how</c>

00:02:34.229 --> 00:02:34.239 align:start position:0%
have a string like this one two one how
 

00:02:34.239 --> 00:02:36.470 align:start position:0%
have a string like this one two one how
many<00:02:34.480><c> different</c><00:02:34.720><c> ways</c><00:02:34.959><c> can</c><00:02:35.200><c> this</c><00:02:35.440><c> be</c><00:02:35.599><c> decoded</c>

00:02:36.470 --> 00:02:36.480 align:start position:0%
many different ways can this be decoded
 

00:02:36.480 --> 00:02:38.070 align:start position:0%
many different ways can this be decoded
well<00:02:36.640><c> let's</c><00:02:36.879><c> say</c><00:02:37.040><c> we</c><00:02:37.200><c> start</c><00:02:37.440><c> at</c><00:02:37.599><c> the</c><00:02:37.680><c> beginning</c>

00:02:38.070 --> 00:02:38.080 align:start position:0%
well let's say we start at the beginning
 

00:02:38.080 --> 00:02:41.190 align:start position:0%
well let's say we start at the beginning
right<00:02:38.560><c> we</c><00:02:38.720><c> could</c><00:02:38.879><c> take</c><00:02:39.360><c> one</c><00:02:40.080><c> by</c><00:02:40.400><c> itself</c><00:02:40.959><c> right</c>

00:02:41.190 --> 00:02:41.200 align:start position:0%
right we could take one by itself right
 

00:02:41.200 --> 00:02:43.110 align:start position:0%
right we could take one by itself right
that's<00:02:41.519><c> going</c><00:02:41.599><c> to</c><00:02:41.680><c> be</c><00:02:41.920><c> some</c><00:02:42.239><c> character</c><00:02:42.800><c> right</c>

00:02:43.110 --> 00:02:43.120 align:start position:0%
that's going to be some character right
 

00:02:43.120 --> 00:02:44.550 align:start position:0%
that's going to be some character right
we<00:02:43.280><c> don't</c><00:02:43.440><c> really</c><00:02:43.599><c> care</c><00:02:43.840><c> what</c><00:02:44.000><c> it</c><00:02:44.160><c> is</c><00:02:44.319><c> but</c><00:02:44.480><c> it's</c>

00:02:44.550 --> 00:02:44.560 align:start position:0%
we don't really care what it is but it's
 

00:02:44.560 --> 00:02:46.309 align:start position:0%
we don't really care what it is but it's
going<00:02:44.640><c> to</c><00:02:44.720><c> be</c><00:02:44.800><c> some</c><00:02:45.040><c> character</c><00:02:45.760><c> now</c><00:02:46.000><c> we</c><00:02:46.160><c> could</c>

00:02:46.309 --> 00:02:46.319 align:start position:0%
going to be some character now we could
 

00:02:46.319 --> 00:02:49.110 align:start position:0%
going to be some character now we could
also<00:02:46.560><c> take</c><00:02:47.040><c> the</c><00:02:47.280><c> first</c><00:02:47.840><c> two</c><00:02:48.160><c> characters</c><00:02:48.879><c> by</c>

00:02:49.110 --> 00:02:49.120 align:start position:0%
also take the first two characters by
 

00:02:49.120 --> 00:02:51.190 align:start position:0%
also take the first two characters by
themselves<00:02:49.599><c> 12</c><00:02:50.239><c> by</c><00:02:50.400><c> itself</c><00:02:50.800><c> right</c><00:02:50.959><c> because</c>

00:02:51.190 --> 00:02:51.200 align:start position:0%
themselves 12 by itself right because
 

00:02:51.200 --> 00:02:53.430 align:start position:0%
themselves 12 by itself right because
that's<00:02:51.599><c> valid</c><00:02:52.080><c> right</c><00:02:52.560><c> so</c><00:02:52.720><c> that's</c><00:02:53.040><c> another</c>

00:02:53.430 --> 00:02:53.440 align:start position:0%
that's valid right so that's another
 

00:02:53.440 --> 00:02:55.750 align:start position:0%
that's valid right so that's another
decision<00:02:54.400><c> starting</c><00:02:54.879><c> from</c><00:02:55.120><c> here</c><00:02:55.440><c> we</c><00:02:55.599><c> could</c>

00:02:55.750 --> 00:02:55.760 align:start position:0%
decision starting from here we could
 

00:02:55.760 --> 00:02:58.550 align:start position:0%
decision starting from here we could
take<00:02:56.239><c> one</c><00:02:56.560><c> or</c><00:02:56.720><c> we</c><00:02:56.879><c> could</c><00:02:57.040><c> take</c><00:02:57.599><c> 12.</c><00:02:58.159><c> and</c><00:02:58.319><c> by</c><00:02:58.480><c> the</c>

00:02:58.550 --> 00:02:58.560 align:start position:0%
take one or we could take 12. and by the
 

00:02:58.560 --> 00:03:00.710 align:start position:0%
take one or we could take 12. and by the
way<00:02:58.800><c> if</c><00:02:58.959><c> this</c><00:02:59.200><c> was</c><00:02:59.360><c> a</c><00:02:59.519><c> zero</c><00:03:00.159><c> we</c><00:03:00.319><c> definitely</c>

00:03:00.710 --> 00:03:00.720 align:start position:0%
way if this was a zero we definitely
 

00:03:00.720 --> 00:03:02.149 align:start position:0%
way if this was a zero we definitely
could<00:03:00.959><c> not</c><00:03:01.120><c> take</c><00:03:01.360><c> it</c><00:03:01.440><c> then</c><00:03:01.599><c> we'd</c><00:03:01.760><c> have</c><00:03:01.920><c> to</c><00:03:02.000><c> just</c>

00:03:02.149 --> 00:03:02.159 align:start position:0%
could not take it then we'd have to just
 

00:03:02.159 --> 00:03:03.830 align:start position:0%
could not take it then we'd have to just
stop<00:03:02.480><c> immediately</c><00:03:03.040><c> right</c><00:03:03.200><c> because</c><00:03:03.440><c> we</c><00:03:03.519><c> can't</c>

00:03:03.830 --> 00:03:03.840 align:start position:0%
stop immediately right because we can't
 

00:03:03.840 --> 00:03:06.309 align:start position:0%
stop immediately right because we can't
start<00:03:04.000><c> with</c><00:03:04.159><c> a</c><00:03:04.319><c> string</c><00:03:04.640><c> starting</c><00:03:04.959><c> at</c><00:03:05.200><c> zero</c><00:03:06.080><c> but</c>

00:03:06.309 --> 00:03:06.319 align:start position:0%
start with a string starting at zero but
 

00:03:06.319 --> 00:03:08.550 align:start position:0%
start with a string starting at zero but
if<00:03:06.400><c> we</c><00:03:06.560><c> had</c><00:03:06.800><c> something</c><00:03:07.120><c> like</c><00:03:07.519><c> one</c><00:03:07.920><c> zero</c><00:03:08.319><c> right</c>

00:03:08.550 --> 00:03:08.560 align:start position:0%
if we had something like one zero right
 

00:03:08.560 --> 00:03:10.869 align:start position:0%
if we had something like one zero right
a<00:03:08.720><c> ten</c><00:03:09.200><c> maybe</c><00:03:09.680><c> then</c><00:03:09.840><c> we</c><00:03:10.000><c> can</c><00:03:10.239><c> take</c><00:03:10.480><c> it</c><00:03:10.640><c> because</c>

00:03:10.869 --> 00:03:10.879 align:start position:0%
a ten maybe then we can take it because
 

00:03:10.879 --> 00:03:13.670 align:start position:0%
a ten maybe then we can take it because
it's<00:03:11.040><c> okay</c><00:03:11.360><c> if</c><00:03:11.440><c> a</c><00:03:11.599><c> zero</c><00:03:12.000><c> comes</c><00:03:12.319><c> after</c><00:03:12.800><c> a</c><00:03:13.040><c> one</c>

00:03:13.670 --> 00:03:13.680 align:start position:0%
it's okay if a zero comes after a one
 

00:03:13.680 --> 00:03:16.070 align:start position:0%
it's okay if a zero comes after a one
and<00:03:13.840><c> so</c><00:03:14.000><c> basically</c><00:03:14.640><c> any</c><00:03:15.120><c> any</c><00:03:15.440><c> integer</c><00:03:15.840><c> by</c>

00:03:16.070 --> 00:03:16.080 align:start position:0%
and so basically any any integer by
 

00:03:16.080 --> 00:03:18.710 align:start position:0%
and so basically any any integer by
itself<00:03:16.480><c> right</c><00:03:16.720><c> one</c><00:03:17.120><c> two</c><00:03:17.519><c> three</c><00:03:17.840><c> four</c><00:03:18.159><c> five</c><00:03:18.480><c> any</c>

00:03:18.710 --> 00:03:18.720 align:start position:0%
itself right one two three four five any
 

00:03:18.720 --> 00:03:22.390 align:start position:0%
itself right one two three four five any
integer<00:03:19.120><c> by</c><00:03:19.360><c> itself</c><00:03:19.920><c> except</c><00:03:20.879><c> for</c><00:03:21.280><c> zero</c><00:03:22.000><c> can</c><00:03:22.239><c> be</c>

00:03:22.390 --> 00:03:22.400 align:start position:0%
integer by itself except for zero can be
 

00:03:22.400 --> 00:03:24.710 align:start position:0%
integer by itself except for zero can be
taken<00:03:22.879><c> right</c><00:03:23.040><c> so</c><00:03:23.280><c> basically</c><00:03:24.000><c> we</c><00:03:24.159><c> can</c><00:03:24.319><c> create</c>

00:03:24.710 --> 00:03:24.720 align:start position:0%
taken right so basically we can create
 

00:03:24.720 --> 00:03:26.630 align:start position:0%
taken right so basically we can create
any<00:03:25.040><c> string</c><00:03:25.519><c> of</c><00:03:25.760><c> one</c>

00:03:26.630 --> 00:03:26.640 align:start position:0%
any string of one
 

00:03:26.640 --> 00:03:29.509 align:start position:0%
any string of one
you<00:03:26.799><c> know</c><00:03:27.040><c> one</c><00:03:27.680><c> number</c><00:03:28.159><c> from</c><00:03:28.720><c> one</c><00:03:29.120><c> through</c>

00:03:29.509 --> 00:03:29.519 align:start position:0%
you know one number from one through
 

00:03:29.519 --> 00:03:31.589 align:start position:0%
you know one number from one through
nine<00:03:29.920><c> except</c><00:03:30.480><c> zero</c><00:03:30.799><c> right</c><00:03:31.120><c> we're</c><00:03:31.280><c> just</c><00:03:31.360><c> not</c>

00:03:31.589 --> 00:03:31.599 align:start position:0%
nine except zero right we're just not
 

00:03:31.599 --> 00:03:33.830 align:start position:0%
nine except zero right we're just not
including<00:03:32.000><c> zero</c><00:03:32.400><c> it</c><00:03:32.480><c> cannot</c><00:03:32.879><c> be</c><00:03:33.360><c> taken</c><00:03:33.680><c> by</c>

00:03:33.830 --> 00:03:33.840 align:start position:0%
including zero it cannot be taken by
 

00:03:33.840 --> 00:03:35.750 align:start position:0%
including zero it cannot be taken by
itself<00:03:34.159><c> but</c><00:03:34.319><c> any</c><00:03:34.560><c> from</c><00:03:34.799><c> one</c><00:03:35.040><c> through</c><00:03:35.280><c> nine</c><00:03:35.599><c> are</c>

00:03:35.750 --> 00:03:35.760 align:start position:0%
itself but any from one through nine are
 

00:03:35.760 --> 00:03:38.070 align:start position:0%
itself but any from one through nine are
okay<00:03:36.239><c> right</c><00:03:36.799><c> so</c><00:03:37.120><c> what</c><00:03:37.280><c> we're</c><00:03:37.440><c> gonna</c><00:03:37.680><c> see</c><00:03:37.840><c> here</c>

00:03:38.070 --> 00:03:38.080 align:start position:0%
okay right so what we're gonna see here
 

00:03:38.080 --> 00:03:39.910 align:start position:0%
okay right so what we're gonna see here
is<00:03:38.159><c> okay</c><00:03:38.400><c> if</c><00:03:38.560><c> we</c><00:03:38.640><c> went</c><00:03:38.799><c> down</c><00:03:39.040><c> this</c><00:03:39.280><c> path</c><00:03:39.680><c> where</c>

00:03:39.910 --> 00:03:39.920 align:start position:0%
is okay if we went down this path where
 

00:03:39.920 --> 00:03:42.070 align:start position:0%
is okay if we went down this path where
we<00:03:40.080><c> chose</c><00:03:40.480><c> a</c><00:03:40.720><c> one</c><00:03:41.280><c> then</c><00:03:41.440><c> the</c><00:03:41.599><c> next</c><00:03:41.760><c> character</c>

00:03:42.070 --> 00:03:42.080 align:start position:0%
we chose a one then the next character
 

00:03:42.080 --> 00:03:43.910 align:start position:0%
we chose a one then the next character
we're<00:03:42.239><c> gonna</c><00:03:42.319><c> be</c><00:03:42.480><c> at</c><00:03:42.720><c> is</c><00:03:42.799><c> the</c><00:03:43.040><c> two</c><00:03:43.280><c> right</c><00:03:43.760><c> of</c>

00:03:43.910 --> 00:03:43.920 align:start position:0%
we're gonna be at is the two right of
 

00:03:43.920 --> 00:03:46.070 align:start position:0%
we're gonna be at is the two right of
course<00:03:44.319><c> two</c><00:03:44.640><c> can</c><00:03:44.799><c> be</c><00:03:44.959><c> taken</c><00:03:45.280><c> by</c><00:03:45.440><c> itself</c><00:03:45.760><c> right</c>

00:03:46.070 --> 00:03:46.080 align:start position:0%
course two can be taken by itself right
 

00:03:46.080 --> 00:03:48.630 align:start position:0%
course two can be taken by itself right
any<00:03:46.400><c> number</c><00:03:46.959><c> except</c><00:03:47.280><c> for</c><00:03:47.519><c> zero</c><00:03:47.920><c> can</c><00:03:48.159><c> be</c><00:03:48.319><c> taken</c>

00:03:48.630 --> 00:03:48.640 align:start position:0%
any number except for zero can be taken
 

00:03:48.640 --> 00:03:51.270 align:start position:0%
any number except for zero can be taken
by<00:03:48.799><c> itself</c><00:03:49.120><c> it</c><00:03:49.200><c> can</c><00:03:49.360><c> be</c><00:03:49.519><c> decoded</c><00:03:50.400><c> in</c><00:03:50.560><c> that</c><00:03:50.879><c> way</c>

00:03:51.270 --> 00:03:51.280 align:start position:0%
by itself it can be decoded in that way
 

00:03:51.280 --> 00:03:54.149 align:start position:0%
by itself it can be decoded in that way
so<00:03:51.519><c> when</c><00:03:51.760><c> we're</c><00:03:52.000><c> at</c><00:03:52.159><c> this</c><00:03:52.560><c> one</c><00:03:53.040><c> or</c><00:03:53.439><c> one</c><00:03:54.000><c> when</c>

00:03:54.149 --> 00:03:54.159 align:start position:0%
so when we're at this one or one when
 

00:03:54.159 --> 00:03:55.910 align:start position:0%
so when we're at this one or one when
we're<00:03:54.400><c> at</c><00:03:54.560><c> this</c><00:03:54.720><c> position</c><00:03:55.040><c> we</c><00:03:55.200><c> can</c><00:03:55.280><c> take</c><00:03:55.599><c> two</c>

00:03:55.910 --> 00:03:55.920 align:start position:0%
we're at this position we can take two
 

00:03:55.920 --> 00:04:00.390 align:start position:0%
we're at this position we can take two
by<00:03:56.159><c> itself</c><00:03:56.799><c> or</c><00:03:57.360><c> we</c><00:03:57.599><c> can</c><00:03:57.920><c> take</c><00:03:58.560><c> 21</c><00:03:59.040><c> right</c><00:03:59.360><c> 21</c><00:04:00.159><c> is</c>

00:04:00.390 --> 00:04:00.400 align:start position:0%
by itself or we can take 21 right 21 is
 

00:04:00.400 --> 00:04:02.229 align:start position:0%
by itself or we can take 21 right 21 is
also<00:04:00.879><c> some</c><00:04:01.200><c> character</c><00:04:01.599><c> i</c><00:04:01.680><c> don't</c><00:04:01.840><c> know</c><00:04:02.000><c> what</c><00:04:02.080><c> it</c>

00:04:02.229 --> 00:04:02.239 align:start position:0%
also some character i don't know what it
 

00:04:02.239 --> 00:04:04.630 align:start position:0%
also some character i don't know what it
is<00:04:02.400><c> but</c><00:04:02.560><c> remember</c><00:04:02.879><c> we</c><00:04:03.040><c> had</c><00:04:03.280><c> values</c><00:04:03.760><c> from</c><00:04:04.000><c> 1</c>

00:04:04.630 --> 00:04:04.640 align:start position:0%
is but remember we had values from 1
 

00:04:04.640 --> 00:04:08.789 align:start position:0%
is but remember we had values from 1
through<00:04:04.959><c> 26</c><00:04:06.080><c> right</c><00:04:06.560><c> so</c><00:04:06.879><c> having</c><00:04:07.200><c> a</c><00:04:07.360><c> 20</c><00:04:08.080><c> 21</c><00:04:08.640><c> is</c>

00:04:08.789 --> 00:04:08.799 align:start position:0%
through 26 right so having a 20 21 is
 

00:04:08.799 --> 00:04:10.949 align:start position:0%
through 26 right so having a 20 21 is
completely<00:04:09.200><c> fine</c><00:04:09.519><c> that</c><00:04:09.680><c> will</c><00:04:10.239><c> decode</c><00:04:10.640><c> to</c><00:04:10.799><c> its</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
completely fine that will decode to its
 

00:04:10.959 --> 00:04:12.949 align:start position:0%
completely fine that will decode to its
own<00:04:11.280><c> character</c><00:04:11.760><c> right</c><00:04:12.080><c> now</c><00:04:12.319><c> of</c><00:04:12.400><c> course</c><00:04:12.720><c> if</c><00:04:12.799><c> we</c>

00:04:12.949 --> 00:04:12.959 align:start position:0%
own character right now of course if we
 

00:04:12.959 --> 00:04:15.910 align:start position:0%
own character right now of course if we
had<00:04:13.120><c> something</c><00:04:13.360><c> like</c><00:04:13.519><c> a</c><00:04:13.760><c> 27</c><00:04:14.799><c> over</c><00:04:15.120><c> here</c><00:04:15.680><c> then</c>

00:04:15.910 --> 00:04:15.920 align:start position:0%
had something like a 27 over here then
 

00:04:15.920 --> 00:04:17.909 align:start position:0%
had something like a 27 over here then
we<00:04:16.239><c> could</c><00:04:16.479><c> not</c><00:04:16.799><c> go</c><00:04:17.040><c> down</c><00:04:17.280><c> this</c><00:04:17.519><c> path</c><00:04:17.759><c> right</c>

00:04:17.909 --> 00:04:17.919 align:start position:0%
we could not go down this path right
 

00:04:17.919 --> 00:04:19.509 align:start position:0%
we could not go down this path right
then<00:04:18.079><c> we</c><00:04:18.239><c> just</c><00:04:18.400><c> would</c><00:04:18.560><c> not</c><00:04:18.720><c> go</c><00:04:18.880><c> down</c><00:04:19.120><c> this</c><00:04:19.280><c> path</c>

00:04:19.509 --> 00:04:19.519 align:start position:0%
then we just would not go down this path
 

00:04:19.519 --> 00:04:22.230 align:start position:0%
then we just would not go down this path
because<00:04:19.759><c> 27</c><00:04:20.799><c> does</c><00:04:21.040><c> not</c><00:04:21.199><c> map</c><00:04:21.440><c> to</c><00:04:21.600><c> any</c><00:04:21.840><c> character</c>

00:04:22.230 --> 00:04:22.240 align:start position:0%
because 27 does not map to any character
 

00:04:22.240 --> 00:04:24.390 align:start position:0%
because 27 does not map to any character
right<00:04:22.479><c> so</c><00:04:22.639><c> we're</c><00:04:22.800><c> kind</c><00:04:22.880><c> of</c><00:04:23.040><c> learning</c><00:04:23.680><c> that</c><00:04:24.320><c> you</c>

00:04:24.390 --> 00:04:24.400 align:start position:0%
right so we're kind of learning that you
 

00:04:24.400 --> 00:04:26.790 align:start position:0%
right so we're kind of learning that you
know<00:04:24.639><c> anything</c><00:04:25.520><c> the</c><00:04:25.759><c> integers</c><00:04:26.240><c> have</c><00:04:26.400><c> to</c><00:04:26.560><c> be</c>

00:04:26.790 --> 00:04:26.800 align:start position:0%
know anything the integers have to be
 

00:04:26.800 --> 00:04:30.550 align:start position:0%
know anything the integers have to be
within<00:04:27.520><c> 1</c><00:04:28.000><c> through</c><00:04:28.320><c> 26</c><00:04:29.040><c> right</c><00:04:29.360><c> and</c><00:04:29.520><c> this</c><00:04:29.840><c> 27</c><00:04:30.400><c> is</c>

00:04:30.550 --> 00:04:30.560 align:start position:0%
within 1 through 26 right and this 27 is
 

00:04:30.560 --> 00:04:33.909 align:start position:0%
within 1 through 26 right and this 27 is
not<00:04:30.960><c> okay</c><00:04:31.280><c> and</c><00:04:31.440><c> so</c><00:04:32.000><c> down</c><00:04:32.560><c> this</c><00:04:32.880><c> path</c><00:04:33.280><c> we</c><00:04:33.520><c> reach</c>

00:04:33.909 --> 00:04:33.919 align:start position:0%
not okay and so down this path we reach
 

00:04:33.919 --> 00:04:36.390 align:start position:0%
not okay and so down this path we reach
the<00:04:34.240><c> end</c><00:04:34.479><c> right</c><00:04:34.639><c> we</c><00:04:34.800><c> had</c><00:04:34.960><c> a</c><00:04:35.040><c> 1</c><00:04:35.360><c> and</c><00:04:35.440><c> we</c><00:04:35.600><c> had</c><00:04:35.759><c> a</c><00:04:35.840><c> 21</c>

00:04:36.390 --> 00:04:36.400 align:start position:0%
the end right we had a 1 and we had a 21
 

00:04:36.400 --> 00:04:38.469 align:start position:0%
the end right we had a 1 and we had a 21
right<00:04:36.639><c> so</c><00:04:37.199><c> there's</c><00:04:37.360><c> no</c><00:04:37.600><c> more</c><00:04:37.840><c> characters</c><00:04:38.320><c> to</c>

00:04:38.469 --> 00:04:38.479 align:start position:0%
right so there's no more characters to
 

00:04:38.479 --> 00:04:41.270 align:start position:0%
right so there's no more characters to
choose<00:04:38.720><c> from</c><00:04:38.960><c> here</c><00:04:39.199><c> so</c><00:04:39.360><c> basically</c><00:04:40.160><c> this</c><00:04:40.639><c> was</c>

00:04:41.270 --> 00:04:41.280 align:start position:0%
choose from here so basically this was
 

00:04:41.280 --> 00:04:43.830 align:start position:0%
choose from here so basically this was
one<00:04:41.680><c> way</c><00:04:41.919><c> that</c><00:04:42.080><c> we</c><00:04:42.240><c> could</c><00:04:42.400><c> decode</c><00:04:43.280><c> this</c><00:04:43.520><c> input</c>

00:04:43.830 --> 00:04:43.840 align:start position:0%
one way that we could decode this input
 

00:04:43.840 --> 00:04:46.230 align:start position:0%
one way that we could decode this input
so<00:04:44.000><c> when</c><00:04:44.160><c> we</c><00:04:44.320><c> reach</c><00:04:44.639><c> the</c><00:04:45.040><c> end</c><00:04:45.680><c> we're</c><00:04:46.000><c> gonna</c>

00:04:46.230 --> 00:04:46.240 align:start position:0%
so when we reach the end we're gonna
 

00:04:46.240 --> 00:04:47.990 align:start position:0%
so when we reach the end we're gonna
count<00:04:46.400><c> that</c><00:04:46.639><c> as</c><00:04:46.800><c> a</c><00:04:46.960><c> one</c><00:04:47.280><c> right</c><00:04:47.440><c> that</c><00:04:47.600><c> means</c><00:04:47.840><c> we</c>

00:04:47.990 --> 00:04:48.000 align:start position:0%
count that as a one right that means we
 

00:04:48.000 --> 00:04:50.950 align:start position:0%
count that as a one right that means we
found<00:04:48.400><c> a</c><00:04:48.560><c> single</c><00:04:48.880><c> way</c><00:04:49.040><c> to</c><00:04:49.199><c> decode</c><00:04:49.840><c> this</c><00:04:50.240><c> input</c>

00:04:50.950 --> 00:04:50.960 align:start position:0%
found a single way to decode this input
 

00:04:50.960 --> 00:04:52.950 align:start position:0%
found a single way to decode this input
so<00:04:51.120><c> this</c><00:04:51.360><c> was</c><00:04:51.520><c> a</c><00:04:51.759><c> good</c><00:04:52.160><c> base</c><00:04:52.400><c> case</c><00:04:52.639><c> where</c><00:04:52.800><c> we</c>

00:04:52.950 --> 00:04:52.960 align:start position:0%
so this was a good base case where we
 

00:04:52.960 --> 00:04:55.510 align:start position:0%
so this was a good base case where we
return<00:04:53.440><c> one</c><00:04:54.080><c> and</c><00:04:54.479><c> from</c><00:04:54.800><c> here</c><00:04:54.960><c> let's</c><00:04:55.199><c> continue</c>

00:04:55.510 --> 00:04:55.520 align:start position:0%
return one and from here let's continue
 

00:04:55.520 --> 00:04:57.590 align:start position:0%
return one and from here let's continue
this<00:04:55.680><c> one</c><00:04:55.840><c> so</c><00:04:56.000><c> we</c><00:04:56.080><c> left</c><00:04:56.400><c> off</c><00:04:56.560><c> at</c><00:04:56.720><c> two</c><00:04:57.199><c> then</c><00:04:57.440><c> we</c>

00:04:57.590 --> 00:04:57.600 align:start position:0%
this one so we left off at two then we
 

00:04:57.600 --> 00:04:59.909 align:start position:0%
this one so we left off at two then we
get<00:04:57.759><c> to</c><00:04:57.919><c> one</c><00:04:58.240><c> can</c><00:04:58.479><c> one</c><00:04:58.720><c> be</c><00:04:58.880><c> taken</c><00:04:59.199><c> by</c><00:04:59.440><c> itself</c><00:04:59.840><c> of</c>

00:04:59.909 --> 00:04:59.919 align:start position:0%
get to one can one be taken by itself of
 

00:04:59.919 --> 00:05:01.830 align:start position:0%
get to one can one be taken by itself of
course<00:05:00.160><c> again</c><00:05:00.479><c> it's</c><00:05:00.639><c> not</c><00:05:00.800><c> a</c><00:05:00.960><c> zero</c><00:05:01.360><c> so</c><00:05:01.520><c> we</c><00:05:01.680><c> can</c>

00:05:01.830 --> 00:05:01.840 align:start position:0%
course again it's not a zero so we can
 

00:05:01.840 --> 00:05:03.830 align:start position:0%
course again it's not a zero so we can
take<00:05:02.080><c> it</c><00:05:02.160><c> by</c><00:05:02.320><c> itself</c><00:05:02.800><c> and</c><00:05:02.960><c> so</c><00:05:03.199><c> then</c><00:05:03.360><c> we</c><00:05:03.520><c> reach</c>

00:05:03.830 --> 00:05:03.840 align:start position:0%
take it by itself and so then we reach
 

00:05:03.840 --> 00:05:05.189 align:start position:0%
take it by itself and so then we reach
the<00:05:03.919><c> end</c><00:05:04.080><c> of</c><00:05:04.160><c> the</c><00:05:04.240><c> string</c><00:05:04.479><c> again</c><00:05:04.720><c> so</c><00:05:04.880><c> this</c><00:05:05.039><c> is</c>

00:05:05.189 --> 00:05:05.199 align:start position:0%
the end of the string again so this is
 

00:05:05.199 --> 00:05:08.230 align:start position:0%
the end of the string again so this is
another<00:05:05.600><c> good</c><00:05:05.840><c> base</c><00:05:06.160><c> case</c><00:05:06.880><c> one</c><00:05:07.199><c> two</c><00:05:07.600><c> one</c><00:05:07.919><c> is</c><00:05:08.080><c> a</c>

00:05:08.230 --> 00:05:08.240 align:start position:0%
another good base case one two one is a
 

00:05:08.240 --> 00:05:10.790 align:start position:0%
another good base case one two one is a
valid<00:05:08.639><c> way</c><00:05:08.800><c> to</c><00:05:08.960><c> decode</c><00:05:09.360><c> this</c><00:05:09.600><c> string</c><00:05:10.240><c> so</c><00:05:10.400><c> if</c><00:05:10.560><c> we</c>

00:05:10.790 --> 00:05:10.800 align:start position:0%
valid way to decode this string so if we
 

00:05:10.800 --> 00:05:13.029 align:start position:0%
valid way to decode this string so if we
started<00:05:11.120><c> with</c><00:05:11.440><c> one</c><00:05:12.160><c> you</c><00:05:12.320><c> know</c><00:05:12.479><c> over</c><00:05:12.720><c> here</c><00:05:12.880><c> we</c>

00:05:13.029 --> 00:05:13.039 align:start position:0%
started with one you know over here we
 

00:05:13.039 --> 00:05:14.629 align:start position:0%
started with one you know over here we
could<00:05:13.199><c> decode</c><00:05:13.600><c> this</c><00:05:13.840><c> in</c><00:05:13.919><c> two</c><00:05:14.160><c> different</c><00:05:14.320><c> ways</c>

00:05:14.629 --> 00:05:14.639 align:start position:0%
could decode this in two different ways
 

00:05:14.639 --> 00:05:16.790 align:start position:0%
could decode this in two different ways
if<00:05:14.720><c> we</c><00:05:14.880><c> start</c><00:05:15.120><c> with</c><00:05:15.440><c> 12</c><00:05:16.000><c> how</c><00:05:16.160><c> many</c><00:05:16.320><c> ways</c><00:05:16.560><c> can</c><00:05:16.720><c> we</c>

00:05:16.790 --> 00:05:16.800 align:start position:0%
if we start with 12 how many ways can we
 

00:05:16.800 --> 00:05:18.870 align:start position:0%
if we start with 12 how many ways can we
decode<00:05:17.280><c> it</c><00:05:17.360><c> well</c><00:05:17.840><c> if</c><00:05:17.919><c> we</c><00:05:18.080><c> start</c><00:05:18.240><c> with</c><00:05:18.479><c> 12</c><00:05:18.720><c> then</c>

00:05:18.870 --> 00:05:18.880 align:start position:0%
decode it well if we start with 12 then
 

00:05:18.880 --> 00:05:21.029 align:start position:0%
decode it well if we start with 12 then
we<00:05:19.039><c> just</c><00:05:19.199><c> have</c><00:05:19.360><c> one</c><00:05:19.600><c> character</c><00:05:20.080><c> left</c><00:05:20.479><c> the</c><00:05:20.800><c> one</c>

00:05:21.029 --> 00:05:21.039 align:start position:0%
we just have one character left the one
 

00:05:21.039 --> 00:05:22.150 align:start position:0%
we just have one character left the one
character

00:05:22.150 --> 00:05:22.160 align:start position:0%
character
 

00:05:22.160 --> 00:05:24.150 align:start position:0%
character
so<00:05:22.400><c> that</c><00:05:22.560><c> can</c><00:05:22.720><c> be</c><00:05:22.880><c> decoded</c><00:05:23.440><c> another</c><00:05:23.759><c> way</c><00:05:24.000><c> so</c>

00:05:24.150 --> 00:05:24.160 align:start position:0%
so that can be decoded another way so
 

00:05:24.160 --> 00:05:26.070 align:start position:0%
so that can be decoded another way so
this<00:05:24.320><c> is</c><00:05:24.479><c> another</c><00:05:24.880><c> good</c><00:05:25.199><c> base</c><00:05:25.440><c> case</c><00:05:25.680><c> so</c>

00:05:26.070 --> 00:05:26.080 align:start position:0%
this is another good base case so
 

00:05:26.080 --> 00:05:28.390 align:start position:0%
this is another good base case so
basically<00:05:26.880><c> we</c><00:05:27.120><c> saw</c><00:05:27.440><c> that</c><00:05:27.600><c> we</c><00:05:27.759><c> have</c><00:05:28.000><c> three</c>

00:05:28.390 --> 00:05:28.400 align:start position:0%
basically we saw that we have three
 

00:05:28.400 --> 00:05:30.390 align:start position:0%
basically we saw that we have three
different<00:05:28.800><c> ways</c><00:05:29.039><c> that</c><00:05:29.280><c> we</c><00:05:29.440><c> can</c><00:05:29.680><c> decode</c><00:05:30.160><c> this</c>

00:05:30.390 --> 00:05:30.400 align:start position:0%
different ways that we can decode this
 

00:05:30.400 --> 00:05:32.950 align:start position:0%
different ways that we can decode this
string<00:05:31.039><c> now</c><00:05:31.280><c> just</c><00:05:31.600><c> to</c><00:05:31.919><c> kind</c><00:05:32.080><c> of</c><00:05:32.240><c> add</c><00:05:32.560><c> a</c><00:05:32.639><c> couple</c>

00:05:32.950 --> 00:05:32.960 align:start position:0%
string now just to kind of add a couple
 

00:05:32.960 --> 00:05:34.469 align:start position:0%
string now just to kind of add a couple
values<00:05:33.360><c> to</c><00:05:33.520><c> the</c><00:05:33.680><c> string</c><00:05:33.919><c> what</c><00:05:34.080><c> if</c><00:05:34.160><c> we</c><00:05:34.320><c> had</c>

00:05:34.469 --> 00:05:34.479 align:start position:0%
values to the string what if we had
 

00:05:34.479 --> 00:05:36.710 align:start position:0%
values to the string what if we had
something<00:05:34.720><c> like</c><00:05:34.960><c> 31</c><00:05:35.759><c> after</c><00:05:36.080><c> it</c><00:05:36.160><c> so</c><00:05:36.320><c> then</c><00:05:36.560><c> you</c>

00:05:36.710 --> 00:05:36.720 align:start position:0%
something like 31 after it so then you
 

00:05:36.720 --> 00:05:38.790 align:start position:0%
something like 31 after it so then you
know<00:05:36.960><c> let's</c><00:05:37.120><c> say</c><00:05:37.280><c> we</c><00:05:37.440><c> left</c><00:05:37.680><c> off</c><00:05:37.840><c> over</c><00:05:38.080><c> here</c><00:05:38.639><c> you</c>

00:05:38.790 --> 00:05:38.800 align:start position:0%
know let's say we left off over here you
 

00:05:38.800 --> 00:05:41.350 align:start position:0%
know let's say we left off over here you
know<00:05:38.960><c> we</c><00:05:39.120><c> can</c><00:05:39.360><c> choose</c><00:05:40.080><c> the</c><00:05:40.320><c> three</c><00:05:40.720><c> by</c><00:05:40.880><c> itself</c>

00:05:41.350 --> 00:05:41.360 align:start position:0%
know we can choose the three by itself
 

00:05:41.360 --> 00:05:43.189 align:start position:0%
know we can choose the three by itself
right<00:05:41.520><c> because</c><00:05:41.840><c> any</c><00:05:42.160><c> character</c><00:05:42.720><c> except</c><00:05:43.039><c> for</c>

00:05:43.189 --> 00:05:43.199 align:start position:0%
right because any character except for
 

00:05:43.199 --> 00:05:45.350 align:start position:0%
right because any character except for
zero<00:05:43.520><c> can</c><00:05:43.680><c> be</c><00:05:43.840><c> taken</c><00:05:44.080><c> by</c><00:05:44.320><c> itself</c><00:05:44.880><c> could</c><00:05:45.120><c> we</c>

00:05:45.350 --> 00:05:45.360 align:start position:0%
zero can be taken by itself could we
 

00:05:45.360 --> 00:05:48.390 align:start position:0%
zero can be taken by itself could we
take<00:05:45.800><c> 31</c><00:05:47.039><c> we</c><00:05:47.280><c> could</c><00:05:47.600><c> not</c><00:05:47.840><c> right</c><00:05:48.080><c> the</c><00:05:48.160><c> same</c>

00:05:48.390 --> 00:05:48.400 align:start position:0%
take 31 we could not right the same
 

00:05:48.400 --> 00:05:51.270 align:start position:0%
take 31 we could not right the same
reason<00:05:48.639><c> we</c><00:05:48.800><c> can't</c><00:05:48.960><c> take</c><00:05:49.280><c> 27</c><00:05:50.000><c> we</c><00:05:50.160><c> can't</c><00:05:50.400><c> take</c><00:05:50.639><c> 31</c>

00:05:51.270 --> 00:05:51.280 align:start position:0%
reason we can't take 27 we can't take 31
 

00:05:51.280 --> 00:05:53.749 align:start position:0%
reason we can't take 27 we can't take 31
because<00:05:51.520><c> it's</c><00:05:51.919><c> it's</c><00:05:52.160><c> greater</c><00:05:52.479><c> than</c><00:05:52.639><c> 26</c><00:05:53.360><c> right</c>

00:05:53.749 --> 00:05:53.759 align:start position:0%
because it's it's greater than 26 right
 

00:05:53.759 --> 00:05:55.029 align:start position:0%
because it's it's greater than 26 right
how<00:05:53.919><c> are</c><00:05:54.000><c> we</c><00:05:54.160><c> going</c><00:05:54.240><c> to</c><00:05:54.320><c> determine</c><00:05:54.800><c> that</c><00:05:54.960><c> in</c>

00:05:55.029 --> 00:05:55.039 align:start position:0%
how are we going to determine that in
 

00:05:55.039 --> 00:05:56.230 align:start position:0%
how are we going to determine that in
the<00:05:55.120><c> code</c><00:05:55.440><c> you</c><00:05:55.520><c> can</c><00:05:55.600><c> do</c><00:05:55.759><c> it</c><00:05:55.840><c> a</c><00:05:55.919><c> lot</c><00:05:56.080><c> of</c>

00:05:56.230 --> 00:05:56.240 align:start position:0%
the code you can do it a lot of
 

00:05:56.240 --> 00:05:57.510 align:start position:0%
the code you can do it a lot of
different<00:05:56.479><c> ways</c><00:05:56.720><c> what</c><00:05:56.960><c> i'm</c><00:05:57.039><c> just</c><00:05:57.199><c> going</c><00:05:57.280><c> to</c>

00:05:57.510 --> 00:05:57.520 align:start position:0%
different ways what i'm just going to
 

00:05:57.520 --> 00:06:00.950 align:start position:0%
different ways what i'm just going to
say<00:05:58.000><c> is</c><00:05:58.560><c> we</c><00:05:58.720><c> can</c><00:05:59.039><c> only</c><00:05:59.520><c> take</c><00:06:00.080><c> double</c><00:06:00.479><c> digit</c>

00:06:00.950 --> 00:06:00.960 align:start position:0%
say is we can only take double digit
 

00:06:00.960 --> 00:06:04.629 align:start position:0%
say is we can only take double digit
values<00:06:02.080><c> if</c><00:06:02.720><c> the</c><00:06:03.280><c> the</c><00:06:03.440><c> first</c><00:06:03.840><c> digit</c><00:06:04.319><c> starts</c>

00:06:04.629 --> 00:06:04.639 align:start position:0%
values if the the first digit starts
 

00:06:04.639 --> 00:06:06.230 align:start position:0%
values if the the first digit starts
with<00:06:04.880><c> a</c><00:06:05.199><c> one</c>

00:06:06.230 --> 00:06:06.240 align:start position:0%
with a one
 

00:06:06.240 --> 00:06:08.550 align:start position:0%
with a one
because<00:06:06.560><c> if</c><00:06:06.639><c> it</c><00:06:06.800><c> starts</c><00:06:07.039><c> with</c><00:06:07.199><c> a</c><00:06:07.360><c> one</c><00:06:07.919><c> then</c><00:06:08.400><c> for</c>

00:06:08.550 --> 00:06:08.560 align:start position:0%
because if it starts with a one then for
 

00:06:08.560 --> 00:06:11.270 align:start position:0%
because if it starts with a one then for
the<00:06:08.880><c> second</c><00:06:09.360><c> digit</c><00:06:09.759><c> we</c><00:06:09.919><c> can</c><00:06:10.080><c> take</c><00:06:10.479><c> anything</c>

00:06:11.270 --> 00:06:11.280 align:start position:0%
the second digit we can take anything
 

00:06:11.280 --> 00:06:13.590 align:start position:0%
the second digit we can take anything
from<00:06:11.600><c> zero</c><00:06:12.080><c> to</c><00:06:12.240><c> nine</c><00:06:12.639><c> right</c><00:06:13.039><c> anything</c><00:06:13.440><c> from</c>

00:06:13.590 --> 00:06:13.600 align:start position:0%
from zero to nine right anything from
 

00:06:13.600 --> 00:06:15.510 align:start position:0%
from zero to nine right anything from
zero<00:06:13.840><c> to</c><00:06:14.000><c> nine</c><00:06:14.319><c> because</c><00:06:14.639><c> then</c><00:06:14.960><c> you</c><00:06:15.120><c> know</c><00:06:15.199><c> this</c>

00:06:15.510 --> 00:06:15.520 align:start position:0%
zero to nine because then you know this
 

00:06:15.520 --> 00:06:17.430 align:start position:0%
zero to nine because then you know this
this<00:06:16.000><c> this</c><00:06:16.160><c> double</c><00:06:16.400><c> digit</c><00:06:16.720><c> value</c><00:06:17.039><c> will</c><00:06:17.199><c> either</c>

00:06:17.430 --> 00:06:17.440 align:start position:0%
this this double digit value will either
 

00:06:17.440 --> 00:06:21.350 align:start position:0%
this this double digit value will either
be<00:06:17.600><c> between</c><00:06:18.000><c> 10</c><00:06:18.720><c> to</c><00:06:19.360><c> 19</c><00:06:19.919><c> right</c><00:06:20.319><c> and</c><00:06:20.639><c> this</c><00:06:20.880><c> value</c>

00:06:21.350 --> 00:06:21.360 align:start position:0%
be between 10 to 19 right and this value
 

00:06:21.360 --> 00:06:24.309 align:start position:0%
be between 10 to 19 right and this value
is<00:06:21.680><c> less</c><00:06:22.000><c> than</c><00:06:22.400><c> 26</c><00:06:22.880><c> so</c><00:06:23.039><c> that's</c><00:06:23.280><c> perfectly</c><00:06:23.759><c> fine</c>

00:06:24.309 --> 00:06:24.319 align:start position:0%
is less than 26 so that's perfectly fine
 

00:06:24.319 --> 00:06:27.830 align:start position:0%
is less than 26 so that's perfectly fine
but<00:06:24.560><c> if</c><00:06:24.800><c> we</c><00:06:25.039><c> start</c><00:06:25.600><c> with</c><00:06:26.000><c> a</c><00:06:26.479><c> two</c><00:06:26.800><c> digit</c>

00:06:27.830 --> 00:06:27.840 align:start position:0%
but if we start with a two digit
 

00:06:27.840 --> 00:06:29.990 align:start position:0%
but if we start with a two digit
if<00:06:28.000><c> we</c><00:06:28.160><c> start</c><00:06:28.319><c> with</c><00:06:28.479><c> a</c><00:06:28.639><c> two</c><00:06:28.880><c> digit</c><00:06:29.440><c> then</c><00:06:29.840><c> the</c>

00:06:29.990 --> 00:06:30.000 align:start position:0%
if we start with a two digit then the
 

00:06:30.000 --> 00:06:32.550 align:start position:0%
if we start with a two digit then the
second<00:06:30.319><c> digit</c><00:06:30.720><c> has</c><00:06:30.800><c> to</c><00:06:30.960><c> be</c><00:06:31.120><c> between</c><00:06:31.680><c> zero</c><00:06:32.160><c> and</c>

00:06:32.550 --> 00:06:32.560 align:start position:0%
second digit has to be between zero and
 

00:06:32.560 --> 00:06:35.189 align:start position:0%
second digit has to be between zero and
six<00:06:33.120><c> because</c><00:06:33.759><c> 26</c><00:06:34.400><c> is</c><00:06:34.560><c> going</c><00:06:34.639><c> to</c><00:06:34.720><c> be</c><00:06:34.880><c> less</c><00:06:35.039><c> than</c>

00:06:35.189 --> 00:06:35.199 align:start position:0%
six because 26 is going to be less than
 

00:06:35.199 --> 00:06:37.510 align:start position:0%
six because 26 is going to be less than
or<00:06:35.360><c> equal</c><00:06:35.600><c> to</c><00:06:35.759><c> 26</c><00:06:36.240><c> but</c><00:06:36.400><c> if</c><00:06:36.560><c> this</c><00:06:36.880><c> became</c><00:06:37.280><c> too</c>

00:06:37.510 --> 00:06:37.520 align:start position:0%
or equal to 26 but if this became too
 

00:06:37.520 --> 00:06:39.909 align:start position:0%
or equal to 26 but if this became too
large<00:06:37.759><c> if</c><00:06:37.919><c> it</c><00:06:38.000><c> became</c><00:06:38.319><c> a</c><00:06:38.400><c> 27</c><00:06:39.280><c> that's</c><00:06:39.520><c> not</c><00:06:39.759><c> less</c>

00:06:39.909 --> 00:06:39.919 align:start position:0%
large if it became a 27 that's not less
 

00:06:39.919 --> 00:06:41.830 align:start position:0%
large if it became a 27 that's not less
than<00:06:40.160><c> or</c><00:06:40.240><c> equal</c><00:06:40.479><c> to</c><00:06:40.639><c> 26</c><00:06:41.039><c> so</c><00:06:41.199><c> we</c><00:06:41.280><c> can't</c><00:06:41.520><c> do</c><00:06:41.680><c> that</c>

00:06:41.830 --> 00:06:41.840 align:start position:0%
than or equal to 26 so we can't do that
 

00:06:41.840 --> 00:06:43.510 align:start position:0%
than or equal to 26 so we can't do that
that's<00:06:42.080><c> how</c><00:06:42.240><c> i'm</c><00:06:42.400><c> going</c><00:06:42.479><c> to</c><00:06:42.560><c> decide</c><00:06:43.039><c> it</c><00:06:43.280><c> now</c>

00:06:43.510 --> 00:06:43.520 align:start position:0%
that's how i'm going to decide it now
 

00:06:43.520 --> 00:06:47.189 align:start position:0%
that's how i'm going to decide it now
what<00:06:43.680><c> if</c><00:06:43.919><c> the</c><00:06:44.400><c> first</c><00:06:44.800><c> digit</c><00:06:45.360><c> started</c><00:06:45.840><c> with</c><00:06:46.160><c> a</c><00:06:46.479><c> 3</c>

00:06:47.189 --> 00:06:47.199 align:start position:0%
what if the first digit started with a 3
 

00:06:47.199 --> 00:06:49.189 align:start position:0%
what if the first digit started with a 3
you<00:06:47.360><c> know</c><00:06:47.520><c> or</c><00:06:47.520><c> or</c><00:06:48.080><c> a</c><00:06:48.240><c> four</c><00:06:48.479><c> or</c><00:06:48.639><c> a</c><00:06:48.800><c> five</c><00:06:49.039><c> or</c>

00:06:49.189 --> 00:06:49.199 align:start position:0%
you know or or a four or a five or
 

00:06:49.199 --> 00:06:50.710 align:start position:0%
you know or or a four or a five or
anything<00:06:49.759><c> that's</c><00:06:50.000><c> never</c><00:06:50.240><c> going</c><00:06:50.319><c> to</c><00:06:50.479><c> work</c>

00:06:50.710 --> 00:06:50.720 align:start position:0%
anything that's never going to work
 

00:06:50.720 --> 00:06:51.909 align:start position:0%
anything that's never going to work
because<00:06:50.960><c> if</c><00:06:51.039><c> we're</c><00:06:51.199><c> going</c><00:06:51.280><c> to</c><00:06:51.360><c> have</c><00:06:51.520><c> some</c>

00:06:51.909 --> 00:06:51.919 align:start position:0%
because if we're going to have some
 

00:06:51.919 --> 00:06:53.510 align:start position:0%
because if we're going to have some
other<00:06:52.160><c> second</c><00:06:52.479><c> digit</c><00:06:52.800><c> here</c><00:06:52.960><c> it's</c><00:06:53.120><c> never</c><00:06:53.440><c> going</c>

00:06:53.510 --> 00:06:53.520 align:start position:0%
other second digit here it's never going
 

00:06:53.520 --> 00:06:56.150 align:start position:0%
other second digit here it's never going
to<00:06:53.599><c> be</c><00:06:53.759><c> less</c><00:06:53.919><c> than</c><00:06:54.080><c> or</c><00:06:54.240><c> equal</c><00:06:54.479><c> to</c><00:06:54.639><c> 26</c><00:06:55.280><c> right</c>

00:06:56.150 --> 00:06:56.160 align:start position:0%
to be less than or equal to 26 right
 

00:06:56.160 --> 00:06:58.309 align:start position:0%
to be less than or equal to 26 right
it<00:06:56.319><c> just</c><00:06:56.560><c> won't</c><00:06:56.800><c> be</c><00:06:57.039><c> so</c><00:06:57.440><c> we're</c><00:06:57.680><c> only</c><00:06:57.919><c> gonna</c>

00:06:58.309 --> 00:06:58.319 align:start position:0%
it just won't be so we're only gonna
 

00:06:58.319 --> 00:07:00.629 align:start position:0%
it just won't be so we're only gonna
have<00:06:58.720><c> uh</c><00:06:58.960><c> two</c><00:06:59.199><c> decisions</c><00:06:59.840><c> right</c><00:07:00.240><c> we're</c><00:07:00.400><c> only</c>

00:07:00.629 --> 00:07:00.639 align:start position:0%
have uh two decisions right we're only
 

00:07:00.639 --> 00:07:02.950 align:start position:0%
have uh two decisions right we're only
gonna<00:07:00.720><c> have</c><00:07:00.880><c> two</c><00:07:01.199><c> branches</c><00:07:02.160><c> if</c><00:07:02.400><c> our</c><00:07:02.639><c> first</c>

00:07:02.950 --> 00:07:02.960 align:start position:0%
gonna have two branches if our first
 

00:07:02.960 --> 00:07:06.230 align:start position:0%
gonna have two branches if our first
digit<00:07:03.360><c> is</c><00:07:03.599><c> a</c><00:07:03.840><c> one</c><00:07:04.400><c> or</c><00:07:04.639><c> if</c><00:07:04.800><c> it</c><00:07:04.960><c> is</c><00:07:05.120><c> a</c><00:07:05.360><c> two</c><00:07:05.840><c> so</c><00:07:06.080><c> this</c>

00:07:06.230 --> 00:07:06.240 align:start position:0%
digit is a one or if it is a two so this
 

00:07:06.240 --> 00:07:08.710 align:start position:0%
digit is a one or if it is a two so this
is<00:07:06.400><c> kind</c><00:07:06.560><c> of</c><00:07:06.639><c> the</c><00:07:06.880><c> brute</c><00:07:07.360><c> force</c><00:07:07.840><c> approach</c><00:07:08.560><c> that</c>

00:07:08.710 --> 00:07:08.720 align:start position:0%
is kind of the brute force approach that
 

00:07:08.720 --> 00:07:10.550 align:start position:0%
is kind of the brute force approach that
i'm<00:07:08.960><c> showing</c><00:07:09.280><c> you</c><00:07:09.759><c> but</c><00:07:09.919><c> it</c><00:07:10.080><c> might</c><00:07:10.240><c> not</c><00:07:10.400><c> be</c>

00:07:10.550 --> 00:07:10.560 align:start position:0%
i'm showing you but it might not be
 

00:07:10.560 --> 00:07:11.830 align:start position:0%
i'm showing you but it might not be
super<00:07:10.800><c> efficient</c><00:07:11.199><c> because</c><00:07:11.440><c> we</c><00:07:11.599><c> could</c><00:07:11.680><c> have</c>

00:07:11.830 --> 00:07:11.840 align:start position:0%
super efficient because we could have
 

00:07:11.840 --> 00:07:13.909 align:start position:0%
super efficient because we could have
two<00:07:12.080><c> decisions</c><00:07:12.560><c> at</c><00:07:12.720><c> every</c><00:07:13.120><c> single</c><00:07:13.759><c> every</c>

00:07:13.909 --> 00:07:13.919 align:start position:0%
two decisions at every single every
 

00:07:13.919 --> 00:07:16.550 align:start position:0%
two decisions at every single every
single<00:07:14.240><c> position</c><00:07:14.880><c> then</c><00:07:15.199><c> our</c><00:07:15.840><c> time</c><00:07:16.000><c> complexity</c>

00:07:16.550 --> 00:07:16.560 align:start position:0%
single position then our time complexity
 

00:07:16.560 --> 00:07:17.830 align:start position:0%
single position then our time complexity
would<00:07:16.720><c> be</c><00:07:16.800><c> something</c><00:07:17.039><c> like</c><00:07:17.199><c> 2</c><00:07:17.440><c> to</c><00:07:17.520><c> the</c><00:07:17.599><c> power</c>

00:07:17.830 --> 00:07:17.840 align:start position:0%
would be something like 2 to the power
 

00:07:17.840 --> 00:07:20.390 align:start position:0%
would be something like 2 to the power
of<00:07:18.000><c> n</c><00:07:18.240><c> where</c><00:07:18.479><c> n</c><00:07:18.720><c> is</c><00:07:18.800><c> the</c><00:07:19.120><c> length</c><00:07:19.520><c> of</c><00:07:19.759><c> the</c><00:07:20.000><c> input</c>

00:07:20.390 --> 00:07:20.400 align:start position:0%
of n where n is the length of the input
 

00:07:20.400 --> 00:07:22.710 align:start position:0%
of n where n is the length of the input
string<00:07:20.960><c> so</c><00:07:21.199><c> how</c><00:07:21.440><c> can</c><00:07:21.680><c> we</c><00:07:21.919><c> kind</c><00:07:22.160><c> of</c><00:07:22.319><c> do</c><00:07:22.479><c> a</c><00:07:22.560><c> little</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
string so how can we kind of do a little
 

00:07:22.720 --> 00:07:25.029 align:start position:0%
string so how can we kind of do a little
bit<00:07:22.880><c> better</c><00:07:23.199><c> well</c><00:07:23.759><c> notice</c><00:07:24.160><c> the</c><00:07:24.400><c> sub</c><00:07:24.720><c> problem</c>

00:07:25.029 --> 00:07:25.039 align:start position:0%
bit better well notice the sub problem
 

00:07:25.039 --> 00:07:27.270 align:start position:0%
bit better well notice the sub problem
that<00:07:25.199><c> we're</c><00:07:25.360><c> doing</c><00:07:25.919><c> for</c><00:07:26.160><c> example</c><00:07:26.800><c> when</c><00:07:27.039><c> we</c>

00:07:27.270 --> 00:07:27.280 align:start position:0%
that we're doing for example when we
 

00:07:27.280 --> 00:07:29.990 align:start position:0%
that we're doing for example when we
take<00:07:27.919><c> when</c><00:07:28.160><c> we</c><00:07:28.240><c> take</c><00:07:28.400><c> just</c><00:07:28.800><c> 1</c><00:07:29.280><c> by</c><00:07:29.440><c> itself</c><00:07:29.919><c> and</c>

00:07:29.990 --> 00:07:30.000 align:start position:0%
take when we take just 1 by itself and
 

00:07:30.000 --> 00:07:31.670 align:start position:0%
take when we take just 1 by itself and
consider<00:07:30.479><c> okay</c><00:07:30.720><c> this</c><00:07:30.960><c> is</c><00:07:31.120><c> just</c><00:07:31.360><c> going</c><00:07:31.440><c> to</c><00:07:31.520><c> be</c>

00:07:31.670 --> 00:07:31.680 align:start position:0%
consider okay this is just going to be
 

00:07:31.680 --> 00:07:33.270 align:start position:0%
consider okay this is just going to be
one<00:07:31.840><c> way</c><00:07:32.000><c> that</c><00:07:32.160><c> we</c><00:07:32.319><c> decode</c><00:07:32.720><c> it</c><00:07:32.800><c> then</c><00:07:33.039><c> we're</c>

00:07:33.270 --> 00:07:33.280 align:start position:0%
one way that we decode it then we're
 

00:07:33.280 --> 00:07:35.029 align:start position:0%
one way that we decode it then we're
asking<00:07:33.680><c> okay</c><00:07:34.080><c> how</c><00:07:34.240><c> many</c><00:07:34.400><c> different</c><00:07:34.639><c> ways</c><00:07:34.880><c> can</c>

00:07:35.029 --> 00:07:35.039 align:start position:0%
asking okay how many different ways can
 

00:07:35.039 --> 00:07:37.430 align:start position:0%
asking okay how many different ways can
we<00:07:35.199><c> decode</c><00:07:35.919><c> the</c><00:07:36.080><c> remaining</c><00:07:36.800><c> of</c><00:07:36.880><c> the</c><00:07:37.120><c> string</c>

00:07:37.430 --> 00:07:37.440 align:start position:0%
we decode the remaining of the string
 

00:07:37.440 --> 00:07:39.749 align:start position:0%
we decode the remaining of the string
right<00:07:37.680><c> that's</c><00:07:38.319><c> the</c><00:07:38.560><c> sub</c><00:07:38.960><c> problem</c><00:07:39.360><c> over</c><00:07:39.520><c> here</c>

00:07:39.749 --> 00:07:39.759 align:start position:0%
right that's the sub problem over here
 

00:07:39.759 --> 00:07:41.270 align:start position:0%
right that's the sub problem over here
we're<00:07:39.919><c> asking</c><00:07:40.240><c> how</c><00:07:40.319><c> many</c><00:07:40.560><c> different</c><00:07:40.800><c> ways</c><00:07:41.039><c> can</c>

00:07:41.270 --> 00:07:41.280 align:start position:0%
we're asking how many different ways can
 

00:07:41.280 --> 00:07:44.550 align:start position:0%
we're asking how many different ways can
we<00:07:41.440><c> decode</c><00:07:42.319><c> 21</c><00:07:43.199><c> when</c><00:07:43.360><c> we</c><00:07:43.599><c> take</c><00:07:43.840><c> the</c><00:07:44.000><c> first</c><00:07:44.319><c> two</c>

00:07:44.550 --> 00:07:44.560 align:start position:0%
we decode 21 when we take the first two
 

00:07:44.560 --> 00:07:46.710 align:start position:0%
we decode 21 when we take the first two
characters<00:07:45.120><c> 12</c><00:07:45.680><c> then</c><00:07:45.840><c> we're</c><00:07:46.080><c> asking</c><00:07:46.400><c> how</c><00:07:46.560><c> many</c>

00:07:46.710 --> 00:07:46.720 align:start position:0%
characters 12 then we're asking how many
 

00:07:46.720 --> 00:07:48.869 align:start position:0%
characters 12 then we're asking how many
different<00:07:46.960><c> ways</c><00:07:47.199><c> can</c><00:07:47.360><c> we</c><00:07:47.520><c> decode</c><00:07:47.919><c> the</c><00:07:48.080><c> string</c>

00:07:48.869 --> 00:07:48.879 align:start position:0%
different ways can we decode the string
 

00:07:48.879 --> 00:07:51.430 align:start position:0%
different ways can we decode the string
one<00:07:49.520><c> right</c><00:07:49.759><c> so</c><00:07:50.319><c> that's</c><00:07:50.560><c> kind</c><00:07:50.720><c> of</c><00:07:50.800><c> how</c><00:07:50.960><c> the</c><00:07:51.199><c> sub</c>

00:07:51.430 --> 00:07:51.440 align:start position:0%
one right so that's kind of how the sub
 

00:07:51.440 --> 00:07:52.950 align:start position:0%
one right so that's kind of how the sub
problem<00:07:51.759><c> is</c><00:07:51.919><c> going</c><00:07:52.000><c> to</c><00:07:52.080><c> work</c><00:07:52.240><c> the</c><00:07:52.400><c> sub</c><00:07:52.639><c> problem</c>

00:07:52.950 --> 00:07:52.960 align:start position:0%
problem is going to work the sub problem
 

00:07:52.960 --> 00:07:55.189 align:start position:0%
problem is going to work the sub problem
is<00:07:53.039><c> just</c><00:07:53.199><c> going</c><00:07:53.360><c> to</c><00:07:53.440><c> be</c><00:07:53.680><c> some</c><00:07:54.240><c> portion</c><00:07:54.800><c> of</c><00:07:54.960><c> the</c>

00:07:55.189 --> 00:07:55.199 align:start position:0%
is just going to be some portion of the
 

00:07:55.199 --> 00:07:57.510 align:start position:0%
is just going to be some portion of the
string<00:07:55.840><c> you</c><00:07:55.919><c> know</c><00:07:56.560><c> for</c><00:07:56.720><c> example</c><00:07:57.199><c> you</c><00:07:57.280><c> know</c>

00:07:57.510 --> 00:07:57.520 align:start position:0%
string you know for example you know
 

00:07:57.520 --> 00:07:59.110 align:start position:0%
string you know for example you know
starting<00:07:58.000><c> from</c>

00:07:59.110 --> 00:07:59.120 align:start position:0%
starting from
 

00:07:59.120 --> 00:08:01.110 align:start position:0%
starting from
from<00:07:59.520><c> here</c><00:08:00.160><c> all</c><00:08:00.319><c> the</c><00:08:00.400><c> way</c><00:08:00.560><c> to</c><00:08:00.720><c> the</c><00:08:00.879><c> end</c><00:08:00.960><c> of</c><00:08:01.039><c> the</c>

00:08:01.110 --> 00:08:01.120 align:start position:0%
from here all the way to the end of the
 

00:08:01.120 --> 00:08:02.869 align:start position:0%
from here all the way to the end of the
string<00:08:01.360><c> how</c><00:08:01.520><c> many</c><00:08:01.599><c> ways</c><00:08:01.840><c> can</c><00:08:02.000><c> we</c><00:08:02.160><c> decode</c><00:08:02.560><c> this</c>

00:08:02.869 --> 00:08:02.879 align:start position:0%
string how many ways can we decode this
 

00:08:02.879 --> 00:08:04.869 align:start position:0%
string how many ways can we decode this
or<00:08:03.199><c> how</c><00:08:03.360><c> many</c><00:08:03.520><c> ways</c><00:08:03.680><c> can</c><00:08:03.840><c> we</c><00:08:04.000><c> decode</c><00:08:04.400><c> this</c><00:08:04.720><c> or</c>

00:08:04.869 --> 00:08:04.879 align:start position:0%
or how many ways can we decode this or
 

00:08:04.879 --> 00:08:06.629 align:start position:0%
or how many ways can we decode this or
how<00:08:05.039><c> many</c><00:08:05.199><c> ways</c><00:08:05.360><c> can</c><00:08:05.520><c> we</c><00:08:05.680><c> decode</c><00:08:06.080><c> the</c><00:08:06.240><c> entire</c>

00:08:06.629 --> 00:08:06.639 align:start position:0%
how many ways can we decode the entire
 

00:08:06.639 --> 00:08:09.189 align:start position:0%
how many ways can we decode the entire
thing<00:08:06.879><c> right</c><00:08:07.280><c> to</c><00:08:07.680><c> to</c><00:08:07.840><c> be</c><00:08:08.000><c> able</c><00:08:08.160><c> to</c><00:08:08.319><c> solve</c><00:08:08.879><c> this</c>

00:08:09.189 --> 00:08:09.199 align:start position:0%
thing right to to be able to solve this
 

00:08:09.199 --> 00:08:10.790 align:start position:0%
thing right to to be able to solve this
problem<00:08:09.520><c> how</c><00:08:09.599><c> many</c><00:08:09.759><c> ways</c><00:08:09.919><c> can</c><00:08:10.080><c> we</c><00:08:10.240><c> decode</c><00:08:10.639><c> this</c>

00:08:10.790 --> 00:08:10.800 align:start position:0%
problem how many ways can we decode this
 

00:08:10.800 --> 00:08:12.550 align:start position:0%
problem how many ways can we decode this
we<00:08:10.960><c> have</c><00:08:11.039><c> to</c><00:08:11.199><c> solve</c><00:08:11.440><c> the</c><00:08:11.599><c> sub</c><00:08:11.919><c> problem</c><00:08:12.400><c> how</c>

00:08:12.550 --> 00:08:12.560 align:start position:0%
we have to solve the sub problem how
 

00:08:12.560 --> 00:08:14.230 align:start position:0%
we have to solve the sub problem how
many<00:08:12.800><c> ways</c><00:08:13.039><c> can</c><00:08:13.199><c> we</c><00:08:13.280><c> decode</c><00:08:13.759><c> everything</c>

00:08:14.230 --> 00:08:14.240 align:start position:0%
many ways can we decode everything
 

00:08:14.240 --> 00:08:17.350 align:start position:0%
many ways can we decode everything
except<00:08:14.960><c> the</c><00:08:15.280><c> beginning</c><00:08:16.160><c> and</c><00:08:16.319><c> so</c><00:08:16.560><c> basically</c>

00:08:17.350 --> 00:08:17.360 align:start position:0%
except the beginning and so basically
 

00:08:17.360 --> 00:08:18.950 align:start position:0%
except the beginning and so basically
you<00:08:17.520><c> know</c><00:08:17.599><c> how</c><00:08:17.759><c> many</c><00:08:18.000><c> different</c><00:08:18.400><c> ways</c><00:08:18.639><c> can</c><00:08:18.800><c> we</c>

00:08:18.950 --> 00:08:18.960 align:start position:0%
you know how many different ways can we
 

00:08:18.960 --> 00:08:20.629 align:start position:0%
you know how many different ways can we
cache<00:08:19.280><c> it</c><00:08:19.360><c> well</c><00:08:19.520><c> we're</c><00:08:19.680><c> going</c><00:08:19.759><c> to</c><00:08:19.840><c> have</c><00:08:20.160><c> some</c>

00:08:20.629 --> 00:08:20.639 align:start position:0%
cache it well we're going to have some
 

00:08:20.639 --> 00:08:22.790 align:start position:0%
cache it well we're going to have some
index<00:08:21.120><c> i</c><00:08:21.440><c> which</c><00:08:21.599><c> could</c><00:08:21.840><c> either</c><00:08:22.080><c> be</c><00:08:22.240><c> here</c><00:08:22.560><c> or</c><00:08:22.720><c> it</c>

00:08:22.790 --> 00:08:22.800 align:start position:0%
index i which could either be here or it
 

00:08:22.800 --> 00:08:24.150 align:start position:0%
index i which could either be here or it
could<00:08:22.960><c> be</c><00:08:23.120><c> here</c><00:08:23.360><c> or</c><00:08:23.520><c> it</c><00:08:23.599><c> could</c><00:08:23.759><c> be</c><00:08:23.840><c> here</c><00:08:24.080><c> it's</c>

00:08:24.150 --> 00:08:24.160 align:start position:0%
could be here or it could be here it's
 

00:08:24.160 --> 00:08:25.589 align:start position:0%
could be here or it could be here it's
just<00:08:24.319><c> going</c><00:08:24.479><c> to</c><00:08:24.560><c> designate</c><00:08:25.120><c> starting</c><00:08:25.440><c> from</c>

00:08:25.589 --> 00:08:25.599 align:start position:0%
just going to designate starting from
 

00:08:25.599 --> 00:08:28.150 align:start position:0%
just going to designate starting from
here<00:08:26.160><c> and</c><00:08:26.560><c> taking</c><00:08:26.879><c> the</c><00:08:27.039><c> remaining</c><00:08:27.680><c> portion</c><00:08:28.000><c> of</c>

00:08:28.150 --> 00:08:28.160 align:start position:0%
here and taking the remaining portion of
 

00:08:28.160 --> 00:08:29.510 align:start position:0%
here and taking the remaining portion of
the<00:08:28.240><c> string</c><00:08:28.560><c> how</c><00:08:28.639><c> many</c><00:08:28.800><c> ways</c><00:08:28.960><c> can</c><00:08:29.120><c> we</c><00:08:29.199><c> decode</c>

00:08:29.510 --> 00:08:29.520 align:start position:0%
the string how many ways can we decode
 

00:08:29.520 --> 00:08:31.589 align:start position:0%
the string how many ways can we decode
it<00:08:29.599><c> so</c><00:08:29.759><c> basically</c><00:08:30.479><c> the</c><00:08:30.639><c> dimension</c><00:08:31.280><c> of</c><00:08:31.440><c> our</c>

00:08:31.589 --> 00:08:31.599 align:start position:0%
it so basically the dimension of our
 

00:08:31.599 --> 00:08:34.310 align:start position:0%
it so basically the dimension of our
cache<00:08:32.000><c> is</c><00:08:32.159><c> going</c><00:08:32.240><c> to</c><00:08:32.320><c> be</c><00:08:32.719><c> n</c><00:08:33.440><c> right</c><00:08:33.680><c> so</c><00:08:34.000><c> that's</c>

00:08:34.310 --> 00:08:34.320 align:start position:0%
cache is going to be n right so that's
 

00:08:34.320 --> 00:08:35.829 align:start position:0%
cache is going to be n right so that's
kind<00:08:34.479><c> of</c><00:08:34.719><c> that's</c><00:08:34.959><c> also</c><00:08:35.200><c> going</c><00:08:35.279><c> to</c><00:08:35.360><c> be</c><00:08:35.440><c> the</c><00:08:35.599><c> time</c>

00:08:35.829 --> 00:08:35.839 align:start position:0%
kind of that's also going to be the time
 

00:08:35.839 --> 00:08:37.589 align:start position:0%
kind of that's also going to be the time
complexity<00:08:36.479><c> because</c><00:08:36.719><c> every</c><00:08:36.959><c> time</c><00:08:37.120><c> we</c><00:08:37.279><c> get</c><00:08:37.440><c> to</c>

00:08:37.589 --> 00:08:37.599 align:start position:0%
complexity because every time we get to
 

00:08:37.599 --> 00:08:40.149 align:start position:0%
complexity because every time we get to
a<00:08:37.680><c> position</c><00:08:38.240><c> i</c><00:08:38.880><c> at</c><00:08:39.120><c> most</c><00:08:39.519><c> we</c><00:08:39.680><c> have</c><00:08:39.919><c> two</c>

00:08:40.149 --> 00:08:40.159 align:start position:0%
a position i at most we have two
 

00:08:40.159 --> 00:08:41.990 align:start position:0%
a position i at most we have two
different<00:08:40.399><c> decisions</c><00:08:41.200><c> to</c><00:08:41.360><c> make</c><00:08:41.680><c> right</c><00:08:41.839><c> so</c>

00:08:41.990 --> 00:08:42.000 align:start position:0%
different decisions to make right so
 

00:08:42.000 --> 00:08:43.990 align:start position:0%
different decisions to make right so
that's<00:08:42.240><c> going</c><00:08:42.320><c> to</c><00:08:42.399><c> be</c><00:08:42.560><c> an</c><00:08:42.800><c> o</c><00:08:42.959><c> of</c><00:08:43.120><c> one</c><00:08:43.440><c> operation</c>

00:08:43.990 --> 00:08:44.000 align:start position:0%
that's going to be an o of one operation
 

00:08:44.000 --> 00:08:45.670 align:start position:0%
that's going to be an o of one operation
making<00:08:44.320><c> those</c><00:08:44.560><c> two</c><00:08:44.800><c> decisions</c><00:08:45.200><c> it's</c><00:08:45.360><c> not</c><00:08:45.519><c> like</c>

00:08:45.670 --> 00:08:45.680 align:start position:0%
making those two decisions it's not like
 

00:08:45.680 --> 00:08:47.190 align:start position:0%
making those two decisions it's not like
we're<00:08:45.839><c> gonna</c><00:08:45.920><c> have</c><00:08:46.000><c> to</c><00:08:46.160><c> run</c><00:08:46.399><c> through</c><00:08:46.640><c> a</c><00:08:46.880><c> loop</c>

00:08:47.190 --> 00:08:47.200 align:start position:0%
we're gonna have to run through a loop
 

00:08:47.200 --> 00:08:48.470 align:start position:0%
we're gonna have to run through a loop
or<00:08:47.440><c> anything</c><00:08:47.760><c> like</c><00:08:47.920><c> that</c><00:08:48.080><c> we're</c><00:08:48.240><c> not</c><00:08:48.399><c> gonna</c>

00:08:48.470 --> 00:08:48.480 align:start position:0%
or anything like that we're not gonna
 

00:08:48.480 --> 00:08:50.389 align:start position:0%
or anything like that we're not gonna
have<00:08:48.640><c> any</c><00:08:48.880><c> loops</c><00:08:49.600><c> and</c><00:08:49.760><c> you'll</c><00:08:49.920><c> see</c><00:08:50.080><c> that</c><00:08:50.240><c> when</c>

00:08:50.389 --> 00:08:50.399 align:start position:0%
have any loops and you'll see that when
 

00:08:50.399 --> 00:08:52.230 align:start position:0%
have any loops and you'll see that when
i<00:08:50.560><c> write</c><00:08:50.800><c> out</c><00:08:50.880><c> the</c><00:08:51.040><c> code</c><00:08:51.519><c> if</c><00:08:51.680><c> this</c><00:08:51.839><c> is</c><00:08:51.920><c> the</c><00:08:52.000><c> size</c>

00:08:52.230 --> 00:08:52.240 align:start position:0%
i write out the code if this is the size
 

00:08:52.240 --> 00:08:53.670 align:start position:0%
i write out the code if this is the size
of<00:08:52.399><c> our</c><00:08:52.560><c> cache</c><00:08:52.800><c> this</c><00:08:53.040><c> is</c><00:08:53.200><c> also</c><00:08:53.440><c> going</c><00:08:53.519><c> to</c><00:08:53.600><c> be</c>

00:08:53.670 --> 00:08:53.680 align:start position:0%
of our cache this is also going to be
 

00:08:53.680 --> 00:08:55.910 align:start position:0%
of our cache this is also going to be
the<00:08:53.839><c> size</c><00:08:54.080><c> of</c><00:08:54.160><c> our</c><00:08:54.320><c> time</c><00:08:54.560><c> complexity</c><00:08:55.519><c> and</c><00:08:55.680><c> this</c>

00:08:55.910 --> 00:08:55.920 align:start position:0%
the size of our time complexity and this
 

00:08:55.920 --> 00:08:58.070 align:start position:0%
the size of our time complexity and this
is<00:08:56.000><c> also</c><00:08:56.240><c> going</c><00:08:56.320><c> to</c><00:08:56.399><c> be</c><00:08:56.560><c> the</c><00:08:56.720><c> size</c><00:08:57.200><c> of</c><00:08:57.680><c> our</c>

00:08:58.070 --> 00:08:58.080 align:start position:0%
is also going to be the size of our
 

00:08:58.080 --> 00:09:00.389 align:start position:0%
is also going to be the size of our
memory<00:08:59.040><c> this</c><00:08:59.279><c> is</c><00:08:59.519><c> because</c><00:08:59.760><c> it's</c><00:08:59.920><c> the</c><00:09:00.000><c> size</c><00:09:00.240><c> of</c>

00:09:00.389 --> 00:09:00.399 align:start position:0%
memory this is because it's the size of
 

00:09:00.399 --> 00:09:02.470 align:start position:0%
memory this is because it's the size of
the<00:09:00.480><c> cache</c><00:09:00.959><c> now</c><00:09:01.200><c> just</c><00:09:01.360><c> so</c><00:09:01.600><c> you</c><00:09:01.839><c> know</c><00:09:02.160><c> i</c><00:09:02.240><c> think</c>

00:09:02.470 --> 00:09:02.480 align:start position:0%
the cache now just so you know i think
 

00:09:02.480 --> 00:09:04.389 align:start position:0%
the cache now just so you know i think
this<00:09:02.720><c> problem</c><00:09:03.120><c> actually</c><00:09:03.360><c> can</c><00:09:03.600><c> be</c><00:09:03.760><c> solved</c><00:09:04.240><c> when</c>

00:09:04.389 --> 00:09:04.399 align:start position:0%
this problem actually can be solved when
 

00:09:04.399 --> 00:09:06.230 align:start position:0%
this problem actually can be solved when
we<00:09:04.640><c> write</c><00:09:04.880><c> out</c><00:09:04.959><c> the</c><00:09:05.440><c> actual</c><00:09:05.839><c> dynamic</c>

00:09:06.230 --> 00:09:06.240 align:start position:0%
we write out the actual dynamic
 

00:09:06.240 --> 00:09:08.070 align:start position:0%
we write out the actual dynamic
programming<00:09:06.720><c> solution</c><00:09:07.120><c> not</c><00:09:07.279><c> using</c><00:09:07.600><c> a</c><00:09:07.680><c> cache</c>

00:09:08.070 --> 00:09:08.080 align:start position:0%
programming solution not using a cache
 

00:09:08.080 --> 00:09:09.670 align:start position:0%
programming solution not using a cache
not<00:09:08.240><c> doing</c><00:09:08.480><c> it</c><00:09:08.560><c> recursively</c><00:09:09.200><c> but</c><00:09:09.279><c> natural</c>

00:09:09.670 --> 00:09:09.680 align:start position:0%
not doing it recursively but natural
 

00:09:09.680 --> 00:09:11.430 align:start position:0%
not doing it recursively but natural
dynamic<00:09:10.080><c> programming</c><00:09:10.720><c> it</c><00:09:10.800><c> can</c><00:09:10.959><c> be</c><00:09:11.120><c> solved</c>

00:09:11.430 --> 00:09:11.440 align:start position:0%
dynamic programming it can be solved
 

00:09:11.440 --> 00:09:13.670 align:start position:0%
dynamic programming it can be solved
with<00:09:11.600><c> of</c><00:09:11.920><c> one</c><00:09:12.320><c> memory</c><00:09:12.880><c> because</c><00:09:13.200><c> one</c><00:09:13.360><c> thing</c><00:09:13.519><c> you</c>

00:09:13.670 --> 00:09:13.680 align:start position:0%
with of one memory because one thing you
 

00:09:13.680 --> 00:09:15.829 align:start position:0%
with of one memory because one thing you
might<00:09:13.920><c> notice</c><00:09:14.399><c> okay</c><00:09:14.959><c> when</c><00:09:15.120><c> we</c><00:09:15.360><c> want</c><00:09:15.519><c> to</c><00:09:15.600><c> know</c>

00:09:15.829 --> 00:09:15.839 align:start position:0%
might notice okay when we want to know
 

00:09:15.839 --> 00:09:18.949 align:start position:0%
might notice okay when we want to know
how<00:09:16.560><c> many</c><00:09:16.880><c> ways</c><00:09:17.120><c> can</c><00:09:17.279><c> we</c><00:09:17.440><c> decode</c><00:09:18.160><c> this</c><00:09:18.480><c> entire</c>

00:09:18.949 --> 00:09:18.959 align:start position:0%
how many ways can we decode this entire
 

00:09:18.959 --> 00:09:21.030 align:start position:0%
how many ways can we decode this entire
string<00:09:19.680><c> well</c><00:09:20.240><c> you</c><00:09:20.399><c> know</c><00:09:20.480><c> when</c><00:09:20.640><c> we're</c><00:09:20.800><c> at</c><00:09:20.959><c> a</c>

00:09:21.030 --> 00:09:21.040 align:start position:0%
string well you know when we're at a
 

00:09:21.040 --> 00:09:22.870 align:start position:0%
string well you know when we're at a
pointer<00:09:21.519><c> i</c><00:09:21.920><c> we</c><00:09:22.080><c> can</c><00:09:22.240><c> either</c><00:09:22.480><c> take</c><00:09:22.720><c> this</c>

00:09:22.870 --> 00:09:22.880 align:start position:0%
pointer i we can either take this
 

00:09:22.880 --> 00:09:24.389 align:start position:0%
pointer i we can either take this
character<00:09:23.279><c> by</c><00:09:23.440><c> itself</c><00:09:23.760><c> in</c><00:09:23.839><c> which</c><00:09:24.000><c> case</c><00:09:24.240><c> then</c>

00:09:24.389 --> 00:09:24.399 align:start position:0%
character by itself in which case then
 

00:09:24.399 --> 00:09:26.550 align:start position:0%
character by itself in which case then
we're<00:09:24.560><c> going</c><00:09:24.640><c> to</c><00:09:24.720><c> shift</c><00:09:25.040><c> i</c><00:09:25.600><c> by</c><00:09:25.839><c> one</c><00:09:26.160><c> over</c><00:09:26.399><c> here</c>

00:09:26.550 --> 00:09:26.560 align:start position:0%
we're going to shift i by one over here
 

00:09:26.560 --> 00:09:28.230 align:start position:0%
we're going to shift i by one over here
and<00:09:26.720><c> ask</c><00:09:27.200><c> you</c><00:09:27.360><c> know</c><00:09:27.440><c> what's</c><00:09:27.680><c> the</c><00:09:27.839><c> result</c><00:09:28.160><c> of</c>

00:09:28.230 --> 00:09:28.240 align:start position:0%
and ask you know what's the result of
 

00:09:28.240 --> 00:09:30.389 align:start position:0%
and ask you know what's the result of
this<00:09:28.480><c> sub</c><00:09:28.720><c> problem</c><00:09:29.200><c> or</c><00:09:29.440><c> if</c><00:09:29.600><c> we</c><00:09:29.760><c> take</c><00:09:30.000><c> the</c><00:09:30.080><c> first</c>

00:09:30.389 --> 00:09:30.399 align:start position:0%
this sub problem or if we take the first
 

00:09:30.399 --> 00:09:32.550 align:start position:0%
this sub problem or if we take the first
two<00:09:30.640><c> characters</c><00:09:31.200><c> 12</c><00:09:31.839><c> then</c><00:09:32.000><c> we're</c><00:09:32.160><c> gonna</c><00:09:32.320><c> ask</c>

00:09:32.550 --> 00:09:32.560 align:start position:0%
two characters 12 then we're gonna ask
 

00:09:32.560 --> 00:09:35.190 align:start position:0%
two characters 12 then we're gonna ask
okay<00:09:32.800><c> what's</c><00:09:33.040><c> the</c><00:09:33.120><c> result</c><00:09:33.600><c> of</c><00:09:33.920><c> this</c><00:09:34.640><c> sub</c>

00:09:35.190 --> 00:09:35.200 align:start position:0%
okay what's the result of this sub
 

00:09:35.200 --> 00:09:37.269 align:start position:0%
okay what's the result of this sub
problem<00:09:35.760><c> right</c><00:09:36.000><c> so</c><00:09:36.160><c> we're</c><00:09:36.240><c> either</c><00:09:36.480><c> gonna</c><00:09:37.040><c> so</c>

00:09:37.269 --> 00:09:37.279 align:start position:0%
problem right so we're either gonna so
 

00:09:37.279 --> 00:09:40.230 align:start position:0%
problem right so we're either gonna so
basically<00:09:37.920><c> you</c><00:09:38.080><c> know</c><00:09:38.160><c> it's</c><00:09:38.320><c> a</c><00:09:38.480><c> set</c><00:09:38.800><c> dp</c><00:09:39.360><c> of</c><00:09:39.680><c> i</c>

00:09:40.230 --> 00:09:40.240 align:start position:0%
basically you know it's a set dp of i
 

00:09:40.240 --> 00:09:44.550 align:start position:0%
basically you know it's a set dp of i
we're<00:09:40.480><c> either</c><00:09:40.720><c> gonna</c><00:09:41.040><c> ask</c><00:09:41.440><c> dp</c><00:09:42.320><c> of</c><00:09:42.880><c> i</c><00:09:43.600><c> plus</c><00:09:44.000><c> one</c>

00:09:44.550 --> 00:09:44.560 align:start position:0%
we're either gonna ask dp of i plus one
 

00:09:44.560 --> 00:09:47.509 align:start position:0%
we're either gonna ask dp of i plus one
or<00:09:45.040><c> i</c><00:09:45.519><c> plus</c><00:09:46.160><c> two</c><00:09:46.560><c> right</c><00:09:46.720><c> those</c><00:09:46.959><c> are</c><00:09:47.120><c> the</c><00:09:47.200><c> only</c>

00:09:47.509 --> 00:09:47.519 align:start position:0%
or i plus two right those are the only
 

00:09:47.519 --> 00:09:49.509 align:start position:0%
or i plus two right those are the only
ones<00:09:47.760><c> that</c><00:09:47.920><c> we</c><00:09:48.000><c> would</c><00:09:48.160><c> need</c><00:09:48.320><c> to</c><00:09:48.560><c> look</c><00:09:48.880><c> at</c><00:09:49.360><c> right</c>

00:09:49.509 --> 00:09:49.519 align:start position:0%
ones that we would need to look at right
 

00:09:49.519 --> 00:09:51.590 align:start position:0%
ones that we would need to look at right
to<00:09:50.080><c> compute</c><00:09:50.399><c> a</c><00:09:50.480><c> value</c><00:09:50.800><c> like</c><00:09:50.959><c> this</c><00:09:51.120><c> we'd</c><00:09:51.360><c> only</c>

00:09:51.590 --> 00:09:51.600 align:start position:0%
to compute a value like this we'd only
 

00:09:51.600 --> 00:09:53.670 align:start position:0%
to compute a value like this we'd only
need<00:09:51.760><c> to</c><00:09:52.080><c> at</c><00:09:52.320><c> most</c><00:09:52.560><c> look</c><00:09:52.800><c> at</c><00:09:52.959><c> two</c><00:09:53.200><c> different</c>

00:09:53.670 --> 00:09:53.680 align:start position:0%
need to at most look at two different
 

00:09:53.680 --> 00:09:55.829 align:start position:0%
need to at most look at two different
positions<00:09:54.160><c> that</c><00:09:54.320><c> come</c><00:09:54.560><c> after</c><00:09:54.880><c> it</c><00:09:55.279><c> so</c><00:09:55.600><c> you</c><00:09:55.760><c> know</c>

00:09:55.829 --> 00:09:55.839 align:start position:0%
positions that come after it so you know
 

00:09:55.839 --> 00:09:57.990 align:start position:0%
positions that come after it so you know
when<00:09:56.000><c> we</c><00:09:56.160><c> have</c><00:09:56.399><c> our</c><00:09:56.560><c> dp</c><00:09:57.040><c> cache</c><00:09:57.519><c> we</c><00:09:57.680><c> actually</c>

00:09:57.990 --> 00:09:58.000 align:start position:0%
when we have our dp cache we actually
 

00:09:58.000 --> 00:10:00.550 align:start position:0%
when we have our dp cache we actually
don't<00:09:58.240><c> need</c><00:09:58.480><c> a</c><00:09:58.720><c> full</c><00:09:59.120><c> array</c><00:09:59.920><c> to</c><00:10:00.080><c> solve</c><00:10:00.320><c> this</c>

00:10:00.550 --> 00:10:00.560 align:start position:0%
don't need a full array to solve this
 

00:10:00.560 --> 00:10:02.870 align:start position:0%
don't need a full array to solve this
problem<00:10:00.800><c> we</c><00:10:00.959><c> could</c><00:10:01.120><c> do</c><00:10:01.279><c> it</c><00:10:01.440><c> with</c><00:10:01.760><c> two</c><00:10:02.320><c> just</c><00:10:02.640><c> two</c>

00:10:02.870 --> 00:10:02.880 align:start position:0%
problem we could do it with two just two
 

00:10:02.880 --> 00:10:05.030 align:start position:0%
problem we could do it with two just two
variables<00:10:03.360><c> similar</c><00:10:03.680><c> to</c><00:10:03.920><c> like</c><00:10:04.079><c> a</c><00:10:04.160><c> house</c><00:10:04.560><c> robber</c>

00:10:05.030 --> 00:10:05.040 align:start position:0%
variables similar to like a house robber
 

00:10:05.040 --> 00:10:07.350 align:start position:0%
variables similar to like a house robber
problem<00:10:05.680><c> approach</c><00:10:06.160><c> to</c><00:10:06.320><c> dynamic</c><00:10:06.880><c> programming</c>

00:10:07.350 --> 00:10:07.360 align:start position:0%
problem approach to dynamic programming
 

00:10:07.360 --> 00:10:09.670 align:start position:0%
problem approach to dynamic programming
or<00:10:07.519><c> like</c><00:10:07.680><c> a</c><00:10:07.760><c> fibonacci</c><00:10:08.480><c> sequence</c><00:10:09.200><c> problem</c>

00:10:09.670 --> 00:10:09.680 align:start position:0%
or like a fibonacci sequence problem
 

00:10:09.680 --> 00:10:11.350 align:start position:0%
or like a fibonacci sequence problem
right<00:10:10.160><c> but</c><00:10:10.320><c> with</c><00:10:10.480><c> that</c><00:10:10.640><c> being</c><00:10:10.880><c> said</c><00:10:11.120><c> i</c><00:10:11.200><c> think</c>

00:10:11.350 --> 00:10:11.360 align:start position:0%
right but with that being said i think
 

00:10:11.360 --> 00:10:13.590 align:start position:0%
right but with that being said i think
we're<00:10:11.519><c> ready</c><00:10:11.839><c> to</c><00:10:12.000><c> get</c><00:10:12.320><c> into</c><00:10:12.560><c> the</c><00:10:12.720><c> code</c><00:10:13.040><c> now</c><00:10:13.360><c> now</c>

00:10:13.590 --> 00:10:13.600 align:start position:0%
we're ready to get into the code now now
 

00:10:13.600 --> 00:10:15.509 align:start position:0%
we're ready to get into the code now now
let's<00:10:13.839><c> write</c><00:10:14.160><c> the</c><00:10:14.320><c> code</c><00:10:14.560><c> so</c><00:10:14.800><c> the</c><00:10:15.040><c> first</c><00:10:15.360><c> way</c>

00:10:15.509 --> 00:10:15.519 align:start position:0%
let's write the code so the first way
 

00:10:15.519 --> 00:10:16.790 align:start position:0%
let's write the code so the first way
i'm<00:10:15.680><c> going</c><00:10:15.760><c> to</c><00:10:15.839><c> show</c><00:10:16.000><c> you</c><00:10:16.160><c> the</c><00:10:16.240><c> solution</c><00:10:16.720><c> is</c>

00:10:16.790 --> 00:10:16.800 align:start position:0%
i'm going to show you the solution is
 

00:10:16.800 --> 00:10:19.829 align:start position:0%
i'm going to show you the solution is
basically<00:10:17.279><c> the</c><00:10:17.360><c> recursive</c><00:10:18.079><c> caching</c><00:10:18.560><c> solution</c>

00:10:19.829 --> 00:10:19.839 align:start position:0%
basically the recursive caching solution
 

00:10:19.839 --> 00:10:22.790 align:start position:0%
basically the recursive caching solution
the<00:10:20.000><c> o</c><00:10:20.240><c> of</c><00:10:20.480><c> n</c><00:10:20.720><c> time</c><00:10:20.959><c> and</c><00:10:21.120><c> memory</c><00:10:21.519><c> solution</c><00:10:22.320><c> so</c>

00:10:22.790 --> 00:10:22.800 align:start position:0%
the o of n time and memory solution so
 

00:10:22.800 --> 00:10:24.389 align:start position:0%
the o of n time and memory solution so
we're<00:10:22.959><c> going</c><00:10:23.040><c> to</c><00:10:23.120><c> initialize</c><00:10:23.680><c> our</c><00:10:23.839><c> cache</c><00:10:24.160><c> we</c>

00:10:24.389 --> 00:10:24.399 align:start position:0%
we're going to initialize our cache we
 

00:10:24.399 --> 00:10:26.230 align:start position:0%
we're going to initialize our cache we
are<00:10:24.480><c> going</c><00:10:24.640><c> to</c><00:10:24.800><c> put</c><00:10:25.040><c> a</c><00:10:25.200><c> single</c><00:10:25.519><c> value</c><00:10:25.920><c> in</c><00:10:26.000><c> here</c>

00:10:26.230 --> 00:10:26.240 align:start position:0%
are going to put a single value in here
 

00:10:26.240 --> 00:10:27.990 align:start position:0%
are going to put a single value in here
basically<00:10:26.880><c> the</c><00:10:27.040><c> entire</c><00:10:27.519><c> length</c><00:10:27.760><c> of</c><00:10:27.839><c> the</c>

00:10:27.990 --> 00:10:28.000 align:start position:0%
basically the entire length of the
 

00:10:28.000 --> 00:10:30.470 align:start position:0%
basically the entire length of the
string<00:10:28.399><c> is</c><00:10:28.560><c> going</c><00:10:28.800><c> to</c><00:10:28.959><c> map</c><00:10:29.279><c> to</c><00:10:29.519><c> one</c><00:10:30.079><c> because</c><00:10:30.399><c> if</c>

00:10:30.470 --> 00:10:30.480 align:start position:0%
string is going to map to one because if
 

00:10:30.480 --> 00:10:32.949 align:start position:0%
string is going to map to one because if
we<00:10:30.640><c> get</c><00:10:30.800><c> an</c><00:10:31.040><c> empty</c><00:10:31.440><c> string</c><00:10:31.920><c> we</c><00:10:32.079><c> want</c><00:10:32.320><c> to</c><00:10:32.399><c> return</c>

00:10:32.949 --> 00:10:32.959 align:start position:0%
we get an empty string we want to return
 

00:10:32.959 --> 00:10:34.790 align:start position:0%
we get an empty string we want to return
one<00:10:33.279><c> in</c><00:10:33.440><c> that</c><00:10:33.600><c> case</c><00:10:33.920><c> that's</c><00:10:34.079><c> just</c><00:10:34.240><c> kind</c><00:10:34.399><c> of</c><00:10:34.560><c> our</c>

00:10:34.790 --> 00:10:34.800 align:start position:0%
one in that case that's just kind of our
 

00:10:34.800 --> 00:10:37.110 align:start position:0%
one in that case that's just kind of our
good<00:10:35.120><c> base</c><00:10:35.440><c> case</c><00:10:35.839><c> right</c><00:10:36.560><c> and</c><00:10:36.720><c> then</c><00:10:36.880><c> we're</c>

00:10:37.110 --> 00:10:37.120 align:start position:0%
good base case right and then we're
 

00:10:37.120 --> 00:10:38.710 align:start position:0%
good base case right and then we're
ready<00:10:37.360><c> to</c><00:10:37.600><c> write</c><00:10:37.839><c> out</c><00:10:38.000><c> the</c><00:10:38.160><c> recursive</c>

00:10:38.710 --> 00:10:38.720 align:start position:0%
ready to write out the recursive
 

00:10:38.720 --> 00:10:40.310 align:start position:0%
ready to write out the recursive
function<00:10:39.040><c> i'm</c><00:10:39.120><c> just</c><00:10:39.279><c> going</c><00:10:39.279><c> to</c><00:10:39.360><c> call</c><00:10:39.600><c> it</c><00:10:39.680><c> dfs</c>

00:10:40.310 --> 00:10:40.320 align:start position:0%
function i'm just going to call it dfs
 

00:10:40.320 --> 00:10:42.870 align:start position:0%
function i'm just going to call it dfs
pass<00:10:40.640><c> in</c><00:10:40.959><c> a</c><00:10:41.040><c> single</c><00:10:41.440><c> variable</c><00:10:41.920><c> i</c><00:10:42.240><c> basically</c><00:10:42.720><c> i</c>

00:10:42.870 --> 00:10:42.880 align:start position:0%
pass in a single variable i basically i
 

00:10:42.880 --> 00:10:44.230 align:start position:0%
pass in a single variable i basically i
is<00:10:42.959><c> the</c><00:10:43.120><c> position</c><00:10:43.440><c> that</c><00:10:43.600><c> we're</c><00:10:43.760><c> at</c><00:10:44.000><c> in</c><00:10:44.160><c> our</c>

00:10:44.230 --> 00:10:44.240 align:start position:0%
is the position that we're at in our
 

00:10:44.240 --> 00:10:48.069 align:start position:0%
is the position that we're at in our
string<00:10:44.640><c> s</c><00:10:45.200><c> now</c><00:10:45.440><c> one</c><00:10:45.680><c> base</c><00:10:46.079><c> case</c><00:10:46.399><c> is</c><00:10:46.640><c> if</c><00:10:46.959><c> i</c><00:10:47.360><c> is</c><00:10:47.760><c> in</c>

00:10:48.069 --> 00:10:48.079 align:start position:0%
string s now one base case is if i is in
 

00:10:48.079 --> 00:10:50.310 align:start position:0%
string s now one base case is if i is in
our<00:10:48.320><c> dp</c><00:10:48.800><c> neither</c><00:10:49.360><c> meaning</c><00:10:49.760><c> either</c><00:10:50.079><c> it's</c>

00:10:50.310 --> 00:10:50.320 align:start position:0%
our dp neither meaning either it's
 

00:10:50.320 --> 00:10:53.590 align:start position:0%
our dp neither meaning either it's
already<00:10:50.640><c> been</c><00:10:50.959><c> cached</c><00:10:51.440><c> or</c><00:10:52.079><c> i</c><00:10:52.480><c> is</c><00:10:52.720><c> the</c><00:10:53.120><c> last</c>

00:10:53.590 --> 00:10:53.600 align:start position:0%
already been cached or i is the last
 

00:10:53.600 --> 00:10:56.069 align:start position:0%
already been cached or i is the last
position<00:10:54.399><c> in</c><00:10:54.880><c> the</c><00:10:55.120><c> string</c><00:10:55.519><c> in</c><00:10:55.600><c> which</c><00:10:55.839><c> case</c>

00:10:56.069 --> 00:10:56.079 align:start position:0%
position in the string in which case
 

00:10:56.079 --> 00:10:57.509 align:start position:0%
position in the string in which case
that's<00:10:56.320><c> our</c><00:10:56.480><c> base</c><00:10:56.720><c> case</c><00:10:56.959><c> right</c><00:10:57.200><c> and</c><00:10:57.279><c> then</c><00:10:57.440><c> we</c>

00:10:57.509 --> 00:10:57.519 align:start position:0%
that's our base case right and then we
 

00:10:57.519 --> 00:11:00.710 align:start position:0%
that's our base case right and then we
would<00:10:57.680><c> just</c><00:10:57.839><c> return</c><00:10:58.560><c> dp</c><00:10:59.279><c> of</c><00:10:59.600><c> i</c><00:10:59.920><c> so</c><00:11:00.079><c> that's</c><00:11:00.640><c> you</c>

00:11:00.710 --> 00:11:00.720 align:start position:0%
would just return dp of i so that's you
 

00:11:00.720 --> 00:11:02.710 align:start position:0%
would just return dp of i so that's you
know<00:11:00.959><c> our</c><00:11:01.200><c> good</c><00:11:01.519><c> base</c><00:11:01.839><c> case</c><00:11:02.079><c> it's</c><00:11:02.240><c> either</c><00:11:02.480><c> been</c>

00:11:02.710 --> 00:11:02.720 align:start position:0%
know our good base case it's either been
 

00:11:02.720 --> 00:11:04.710 align:start position:0%
know our good base case it's either been
cached<00:11:03.200><c> or</c><00:11:03.600><c> you</c><00:11:03.680><c> know</c><00:11:03.839><c> it's</c><00:11:04.079><c> just</c><00:11:04.320><c> the</c><00:11:04.480><c> end</c><00:11:04.560><c> of</c>

00:11:04.710 --> 00:11:04.720 align:start position:0%
cached or you know it's just the end of
 

00:11:04.720 --> 00:11:06.470 align:start position:0%
cached or you know it's just the end of
the<00:11:04.800><c> string</c><00:11:05.120><c> our</c><00:11:05.279><c> bad</c><00:11:05.600><c> base</c><00:11:05.839><c> case</c><00:11:06.160><c> is</c><00:11:06.240><c> going</c><00:11:06.399><c> to</c>

00:11:06.470 --> 00:11:06.480 align:start position:0%
the string our bad base case is going to
 

00:11:06.480 --> 00:11:08.790 align:start position:0%
the string our bad base case is going to
be<00:11:06.800><c> if</c><00:11:06.959><c> it's</c><00:11:07.200><c> not</c><00:11:07.440><c> the</c><00:11:07.680><c> end</c><00:11:07.920><c> of</c><00:11:08.000><c> the</c><00:11:08.160><c> string</c>

00:11:08.790 --> 00:11:08.800 align:start position:0%
be if it's not the end of the string
 

00:11:08.800 --> 00:11:10.389 align:start position:0%
be if it's not the end of the string
then<00:11:09.040><c> we</c><00:11:09.200><c> have</c><00:11:09.279><c> to</c><00:11:09.440><c> check</c><00:11:09.600><c> what</c><00:11:09.839><c> character</c><00:11:10.240><c> it</c>

00:11:10.389 --> 00:11:10.399 align:start position:0%
then we have to check what character it
 

00:11:10.399 --> 00:11:13.030 align:start position:0%
then we have to check what character it
is<00:11:10.720><c> if</c><00:11:10.959><c> the</c><00:11:11.200><c> character</c><00:11:11.760><c> is</c><00:11:12.000><c> starting</c><00:11:12.560><c> with</c>

00:11:13.030 --> 00:11:13.040 align:start position:0%
is if the character is starting with
 

00:11:13.040 --> 00:11:14.550 align:start position:0%
is if the character is starting with
zero<00:11:13.440><c> right</c><00:11:13.600><c> if</c><00:11:13.760><c> the</c><00:11:13.839><c> string</c><00:11:14.160><c> is</c><00:11:14.320><c> starting</c>

00:11:14.550 --> 00:11:14.560 align:start position:0%
zero right if the string is starting
 

00:11:14.560 --> 00:11:16.230 align:start position:0%
zero right if the string is starting
with<00:11:14.720><c> zero</c><00:11:15.120><c> then</c><00:11:15.279><c> it's</c><00:11:15.519><c> invalid</c><00:11:16.079><c> right</c>

00:11:16.230 --> 00:11:16.240 align:start position:0%
with zero then it's invalid right
 

00:11:16.240 --> 00:11:18.710 align:start position:0%
with zero then it's invalid right
there's<00:11:16.560><c> no</c><00:11:16.800><c> ways</c><00:11:17.120><c> to</c><00:11:17.279><c> decode</c><00:11:17.839><c> a</c><00:11:17.920><c> string</c><00:11:18.399><c> that</c>

00:11:18.710 --> 00:11:18.720 align:start position:0%
there's no ways to decode a string that
 

00:11:18.720 --> 00:11:20.470 align:start position:0%
there's no ways to decode a string that
starts<00:11:19.040><c> with</c><00:11:19.279><c> zero</c><00:11:19.760><c> so</c><00:11:19.920><c> then</c><00:11:20.079><c> we</c><00:11:20.240><c> have</c><00:11:20.320><c> to</c>

00:11:20.470 --> 00:11:20.480 align:start position:0%
starts with zero so then we have to
 

00:11:20.480 --> 00:11:22.710 align:start position:0%
starts with zero so then we have to
return<00:11:20.959><c> zero</c><00:11:21.440><c> so</c><00:11:21.600><c> that's</c><00:11:21.920><c> like</c><00:11:22.079><c> our</c><00:11:22.240><c> bad</c><00:11:22.480><c> base</c>

00:11:22.710 --> 00:11:22.720 align:start position:0%
return zero so that's like our bad base
 

00:11:22.720 --> 00:11:24.870 align:start position:0%
return zero so that's like our bad base
case<00:11:22.959><c> so</c><00:11:23.360><c> so</c><00:11:23.600><c> these</c><00:11:23.760><c> are</c><00:11:23.920><c> the</c><00:11:24.079><c> two</c><00:11:24.320><c> main</c><00:11:24.640><c> base</c>

00:11:24.870 --> 00:11:24.880 align:start position:0%
case so so these are the two main base
 

00:11:24.880 --> 00:11:27.350 align:start position:0%
case so so these are the two main base
cases<00:11:25.279><c> that</c><00:11:25.360><c> we</c><00:11:25.600><c> have</c><00:11:26.160><c> but</c><00:11:26.399><c> remember</c><00:11:26.880><c> if</c><00:11:27.040><c> it's</c>

00:11:27.350 --> 00:11:27.360 align:start position:0%
cases that we have but remember if it's
 

00:11:27.360 --> 00:11:29.509 align:start position:0%
cases that we have but remember if it's
not<00:11:27.680><c> zero</c><00:11:28.079><c> that</c><00:11:28.240><c> means</c><00:11:28.480><c> it's</c><00:11:28.640><c> between</c><00:11:29.120><c> one</c>

00:11:29.509 --> 00:11:29.519 align:start position:0%
not zero that means it's between one
 

00:11:29.519 --> 00:11:32.230 align:start position:0%
not zero that means it's between one
through<00:11:30.000><c> nine</c><00:11:30.399><c> in</c><00:11:30.560><c> which</c><00:11:30.880><c> case</c><00:11:31.440><c> uh</c><00:11:31.600><c> we</c><00:11:31.839><c> know</c><00:11:32.079><c> we</c>

00:11:32.230 --> 00:11:32.240 align:start position:0%
through nine in which case uh we know we
 

00:11:32.240 --> 00:11:35.030 align:start position:0%
through nine in which case uh we know we
can<00:11:32.399><c> take</c><00:11:32.720><c> this</c><00:11:33.040><c> value</c><00:11:33.519><c> as</c><00:11:33.839><c> a</c><00:11:34.399><c> single</c><00:11:34.720><c> digit</c>

00:11:35.030 --> 00:11:35.040 align:start position:0%
can take this value as a single digit
 

00:11:35.040 --> 00:11:37.030 align:start position:0%
can take this value as a single digit
right<00:11:35.200><c> so</c><00:11:35.360><c> then</c><00:11:35.519><c> the</c><00:11:35.680><c> sub</c><00:11:36.000><c> problem</c><00:11:36.320><c> becomes</c>

00:11:37.030 --> 00:11:37.040 align:start position:0%
right so then the sub problem becomes
 

00:11:37.040 --> 00:11:39.829 align:start position:0%
right so then the sub problem becomes
dfs<00:11:37.600><c> of</c><00:11:37.839><c> i</c><00:11:38.160><c> plus</c><00:11:38.720><c> one</c><00:11:39.040><c> right</c><00:11:39.279><c> so</c><00:11:39.440><c> that's</c><00:11:39.760><c> what</c>

00:11:39.829 --> 00:11:39.839 align:start position:0%
dfs of i plus one right so that's what
 

00:11:39.839 --> 00:11:41.829 align:start position:0%
dfs of i plus one right so that's what
the<00:11:40.000><c> result</c><00:11:40.640><c> is</c><00:11:40.800><c> going</c><00:11:41.040><c> to</c><00:11:41.200><c> be</c><00:11:41.519><c> we're</c><00:11:41.680><c> just</c>

00:11:41.829 --> 00:11:41.839 align:start position:0%
the result is going to be we're just
 

00:11:41.839 --> 00:11:44.790 align:start position:0%
the result is going to be we're just
going<00:11:41.920><c> to</c><00:11:42.000><c> call</c><00:11:42.240><c> dfs</c><00:11:42.959><c> on</c><00:11:43.279><c> i</c><00:11:43.519><c> plus</c><00:11:43.920><c> 1</c><00:11:44.399><c> because</c><00:11:44.640><c> we</c>

00:11:44.790 --> 00:11:44.800 align:start position:0%
going to call dfs on i plus 1 because we
 

00:11:44.800 --> 00:11:47.269 align:start position:0%
going to call dfs on i plus 1 because we
took<00:11:45.040><c> the</c><00:11:45.200><c> character</c><00:11:45.680><c> at</c><00:11:46.000><c> i</c><00:11:46.480><c> as</c><00:11:46.720><c> a</c><00:11:46.880><c> single</c>

00:11:47.269 --> 00:11:47.279 align:start position:0%
took the character at i as a single
 

00:11:47.279 --> 00:11:49.350 align:start position:0%
took the character at i as a single
digit<00:11:47.760><c> right</c><00:11:48.320><c> but</c><00:11:48.560><c> we</c><00:11:48.800><c> know</c><00:11:48.959><c> that</c><00:11:49.120><c> there</c><00:11:49.200><c> are</c>

00:11:49.350 --> 00:11:49.360 align:start position:0%
digit right but we know that there are
 

00:11:49.360 --> 00:11:51.910 align:start position:0%
digit right but we know that there are
some<00:11:49.600><c> cases</c><00:11:49.920><c> where</c><00:11:50.079><c> we</c><00:11:50.160><c> can</c><00:11:50.399><c> also</c><00:11:50.800><c> call</c><00:11:51.120><c> i</c><00:11:51.440><c> plus</c>

00:11:51.910 --> 00:11:51.920 align:start position:0%
some cases where we can also call i plus
 

00:11:51.920 --> 00:11:54.150 align:start position:0%
some cases where we can also call i plus
2.<00:11:52.399><c> now</c><00:11:52.639><c> what's</c><00:11:52.959><c> a</c><00:11:53.120><c> good</c><00:11:53.440><c> way</c><00:11:53.600><c> that</c><00:11:53.760><c> we</c><00:11:53.920><c> can</c>

00:11:54.150 --> 00:11:54.160 align:start position:0%
2. now what's a good way that we can
 

00:11:54.160 --> 00:11:56.550 align:start position:0%
2. now what's a good way that we can
write<00:11:54.480><c> out</c><00:11:54.720><c> that</c><00:11:54.959><c> case</c><00:11:55.200><c> well</c><00:11:55.519><c> first</c>

00:11:56.550 --> 00:11:56.560 align:start position:0%
write out that case well first
 

00:11:56.560 --> 00:11:58.629 align:start position:0%
write out that case well first
let's<00:11:57.040><c> this</c><00:11:57.279><c> is</c><00:11:57.680><c> one</c><00:11:57.839><c> of</c><00:11:58.000><c> the</c><00:11:58.079><c> ways</c><00:11:58.320><c> you</c><00:11:58.399><c> can</c><00:11:58.480><c> do</c>

00:11:58.629 --> 00:11:58.639 align:start position:0%
let's this is one of the ways you can do
 

00:11:58.639 --> 00:11:59.829 align:start position:0%
let's this is one of the ways you can do
it<00:11:58.720><c> i'm</c><00:11:58.800><c> sure</c><00:11:58.959><c> there</c><00:11:59.120><c> are</c><00:11:59.200><c> better</c><00:11:59.440><c> ways</c><00:11:59.680><c> but</c>

00:11:59.829 --> 00:11:59.839 align:start position:0%
it i'm sure there are better ways but
 

00:11:59.839 --> 00:12:03.910 align:start position:0%
it i'm sure there are better ways but
basically<00:12:00.320><c> if</c><00:12:00.639><c> i</c><00:12:01.279><c> plus</c><00:12:01.839><c> 1</c><00:12:02.560><c> is</c><00:12:02.800><c> less</c><00:12:03.120><c> than</c><00:12:03.680><c> the</c>

00:12:03.910 --> 00:12:03.920 align:start position:0%
basically if i plus 1 is less than the
 

00:12:03.920 --> 00:12:05.990 align:start position:0%
basically if i plus 1 is less than the
length<00:12:04.320><c> of</c><00:12:04.399><c> the</c><00:12:04.560><c> string</c><00:12:04.880><c> basically</c><00:12:05.279><c> if</c><00:12:05.440><c> we</c><00:12:05.680><c> do</c>

00:12:05.990 --> 00:12:06.000 align:start position:0%
length of the string basically if we do
 

00:12:06.000 --> 00:12:08.150 align:start position:0%
length of the string basically if we do
have<00:12:06.320><c> a</c><00:12:06.560><c> second</c><00:12:06.880><c> character</c><00:12:07.360><c> that</c><00:12:07.519><c> comes</c><00:12:07.839><c> after</c>

00:12:08.150 --> 00:12:08.160 align:start position:0%
have a second character that comes after
 

00:12:08.160 --> 00:12:09.509 align:start position:0%
have a second character that comes after
the<00:12:08.320><c> current</c><00:12:08.720><c> one</c><00:12:08.880><c> right</c><00:12:09.120><c> because</c><00:12:09.279><c> we're</c>

00:12:09.509 --> 00:12:09.519 align:start position:0%
the current one right because we're
 

00:12:09.519 --> 00:12:11.750 align:start position:0%
the current one right because we're
looking<00:12:09.680><c> for</c><00:12:09.920><c> a</c><00:12:10.079><c> double</c><00:12:10.480><c> digit</c><00:12:10.880><c> character</c><00:12:11.600><c> so</c>

00:12:11.750 --> 00:12:11.760 align:start position:0%
looking for a double digit character so
 

00:12:11.760 --> 00:12:15.670 align:start position:0%
looking for a double digit character so
if<00:12:12.000><c> i</c><00:12:12.240><c> plus</c><00:12:12.560><c> one</c><00:12:12.800><c> is</c><00:12:13.040><c> in</c><00:12:13.279><c> bounds</c><00:12:14.079><c> and</c><00:12:14.800><c> either</c>

00:12:15.670 --> 00:12:15.680 align:start position:0%
if i plus one is in bounds and either
 

00:12:15.680 --> 00:12:19.190 align:start position:0%
if i plus one is in bounds and either
the<00:12:15.839><c> character</c><00:12:16.399><c> s</c><00:12:16.560><c> of</c><00:12:16.800><c> i</c><00:12:17.360><c> starts</c><00:12:17.839><c> with</c><00:12:18.240><c> a</c><00:12:18.639><c> one</c>

00:12:19.190 --> 00:12:19.200 align:start position:0%
the character s of i starts with a one
 

00:12:19.200 --> 00:12:21.590 align:start position:0%
the character s of i starts with a one
right<00:12:19.440><c> s</c><00:12:19.680><c> of</c><00:12:19.839><c> i</c><00:12:20.079><c> is</c><00:12:20.240><c> a</c><00:12:20.399><c> one</c><00:12:20.880><c> because</c><00:12:21.279><c> if</c><00:12:21.440><c> it</c>

00:12:21.590 --> 00:12:21.600 align:start position:0%
right s of i is a one because if it
 

00:12:21.600 --> 00:12:23.430 align:start position:0%
right s of i is a one because if it
starts<00:12:21.839><c> with</c><00:12:22.000><c> a</c><00:12:22.079><c> one</c><00:12:22.320><c> and</c><00:12:22.480><c> there</c><00:12:22.720><c> is</c><00:12:22.880><c> a</c><00:12:23.040><c> second</c>

00:12:23.430 --> 00:12:23.440 align:start position:0%
starts with a one and there is a second
 

00:12:23.440 --> 00:12:25.350 align:start position:0%
starts with a one and there is a second
digit<00:12:23.760><c> that</c><00:12:24.000><c> means</c><00:12:24.240><c> that</c><00:12:24.480><c> definitely</c><00:12:25.040><c> we</c><00:12:25.200><c> can</c>

00:12:25.350 --> 00:12:25.360 align:start position:0%
digit that means that definitely we can
 

00:12:25.360 --> 00:12:27.030 align:start position:0%
digit that means that definitely we can
take<00:12:25.519><c> a</c><00:12:25.600><c> double</c><00:12:25.920><c> digit</c><00:12:26.240><c> value</c><00:12:26.560><c> right</c><00:12:26.720><c> because</c>

00:12:27.030 --> 00:12:27.040 align:start position:0%
take a double digit value right because
 

00:12:27.040 --> 00:12:30.790 align:start position:0%
take a double digit value right because
anything<00:12:27.519><c> between</c><00:12:28.079><c> 10</c><00:12:28.720><c> all</c><00:12:28.880><c> the</c><00:12:29.040><c> way</c><00:12:29.360><c> to</c><00:12:29.600><c> 19</c><00:12:30.480><c> is</c>

00:12:30.790 --> 00:12:30.800 align:start position:0%
anything between 10 all the way to 19 is
 

00:12:30.800 --> 00:12:32.949 align:start position:0%
anything between 10 all the way to 19 is
a<00:12:31.040><c> double</c><00:12:31.279><c> digit</c><00:12:31.600><c> value</c><00:12:31.920><c> right</c><00:12:32.079><c> so</c><00:12:32.480><c> if</c><00:12:32.720><c> as</c><00:12:32.800><c> long</c>

00:12:32.949 --> 00:12:32.959 align:start position:0%
a double digit value right so if as long
 

00:12:32.959 --> 00:12:34.710 align:start position:0%
a double digit value right so if as long
as<00:12:33.120><c> it</c><00:12:33.200><c> starts</c><00:12:33.519><c> with</c><00:12:33.680><c> one</c><00:12:34.079><c> we</c><00:12:34.240><c> know</c><00:12:34.480><c> we</c><00:12:34.560><c> can</c>

00:12:34.710 --> 00:12:34.720 align:start position:0%
as it starts with one we know we can
 

00:12:34.720 --> 00:12:37.030 align:start position:0%
as it starts with one we know we can
make<00:12:34.880><c> a</c><00:12:34.959><c> double</c><00:12:35.200><c> digit</c><00:12:35.519><c> value</c><00:12:36.079><c> or</c><00:12:36.480><c> the</c><00:12:36.720><c> other</c>

00:12:37.030 --> 00:12:37.040 align:start position:0%
make a double digit value or the other
 

00:12:37.040 --> 00:12:39.190 align:start position:0%
make a double digit value or the other
case<00:12:37.360><c> is</c><00:12:37.600><c> basically</c><00:12:38.480><c> i'm</c><00:12:38.639><c> trying</c><00:12:38.880><c> to</c><00:12:38.959><c> figure</c>

00:12:39.190 --> 00:12:39.200 align:start position:0%
case is basically i'm trying to figure
 

00:12:39.200 --> 00:12:40.870 align:start position:0%
case is basically i'm trying to figure
out<00:12:39.360><c> a</c><00:12:39.440><c> good</c><00:12:39.600><c> way</c><00:12:39.839><c> to</c><00:12:40.079><c> format</c><00:12:40.480><c> this</c><00:12:40.720><c> in</c><00:12:40.800><c> a</c>

00:12:40.870 --> 00:12:40.880 align:start position:0%
out a good way to format this in a
 

00:12:40.880 --> 00:12:44.230 align:start position:0%
out a good way to format this in a
readable<00:12:41.200><c> way</c><00:12:41.360><c> but</c><00:12:41.519><c> basically</c><00:12:42.160><c> or</c><00:12:42.720><c> if</c><00:12:43.040><c> s</c><00:12:43.360><c> of</c><00:12:43.600><c> i</c>

00:12:44.230 --> 00:12:44.240 align:start position:0%
readable way but basically or if s of i
 

00:12:44.240 --> 00:12:47.110 align:start position:0%
readable way but basically or if s of i
is<00:12:44.800><c> equal</c><00:12:45.200><c> to</c><00:12:45.600><c> two</c><00:12:46.160><c> right</c><00:12:46.320><c> it</c><00:12:46.560><c> starts</c><00:12:46.800><c> with</c><00:12:46.959><c> a</c>

00:12:47.110 --> 00:12:47.120 align:start position:0%
is equal to two right it starts with a
 

00:12:47.120 --> 00:12:50.150 align:start position:0%
is equal to two right it starts with a
two<00:12:47.360><c> but</c><00:12:47.600><c> if</c><00:12:47.839><c> it</c><00:12:48.079><c> does</c><00:12:48.720><c> start</c><00:12:48.959><c> with</c><00:12:49.200><c> a</c><00:12:49.279><c> two</c><00:12:49.680><c> then</c>

00:12:50.150 --> 00:12:50.160 align:start position:0%
two but if it does start with a two then
 

00:12:50.160 --> 00:12:54.470 align:start position:0%
two but if it does start with a two then
the<00:12:50.560><c> second</c><00:12:51.279><c> digit</c><00:12:51.680><c> right</c><00:12:52.160><c> s</c><00:12:52.480><c> of</c><00:12:52.720><c> i</c><00:12:53.040><c> plus</c><00:12:53.519><c> one</c>

00:12:54.470 --> 00:12:54.480 align:start position:0%
the second digit right s of i plus one
 

00:12:54.480 --> 00:12:57.350 align:start position:0%
the second digit right s of i plus one
must<00:12:54.959><c> be</c><00:12:55.279><c> between</c><00:12:55.839><c> zero</c><00:12:56.399><c> and</c><00:12:56.720><c> six</c><00:12:57.040><c> right</c><00:12:57.200><c> how</c>

00:12:57.350 --> 00:12:57.360 align:start position:0%
must be between zero and six right how
 

00:12:57.360 --> 00:12:59.190 align:start position:0%
must be between zero and six right how
can<00:12:57.519><c> we</c><00:12:57.760><c> check</c><00:12:58.000><c> that</c><00:12:58.240><c> in</c><00:12:58.399><c> python</c><00:12:58.800><c> at</c><00:12:58.880><c> least</c><00:12:59.120><c> we</c>

00:12:59.190 --> 00:12:59.200 align:start position:0%
can we check that in python at least we
 

00:12:59.200 --> 00:13:01.509 align:start position:0%
can we check that in python at least we
can<00:12:59.279><c> check</c><00:12:59.440><c> okay</c><00:12:59.839><c> if</c><00:13:00.000><c> this</c><00:13:00.639><c> uh</c><00:13:00.959><c> character</c>

00:13:01.509 --> 00:13:01.519 align:start position:0%
can check okay if this uh character
 

00:13:01.519 --> 00:13:04.310 align:start position:0%
can check okay if this uh character
happens<00:13:01.920><c> to</c><00:13:02.079><c> be</c><00:13:02.320><c> in</c><00:13:02.720><c> this</c><00:13:03.279><c> substring</c><00:13:03.839><c> one</c><00:13:04.079><c> two</c>

00:13:04.310 --> 00:13:04.320 align:start position:0%
happens to be in this substring one two
 

00:13:04.320 --> 00:13:06.389 align:start position:0%
happens to be in this substring one two
three<00:13:04.639><c> four</c><00:13:05.040><c> five</c><00:13:05.440><c> six</c><00:13:05.760><c> right</c><00:13:06.000><c> basically</c>

00:13:06.389 --> 00:13:06.399 align:start position:0%
three four five six right basically
 

00:13:06.399 --> 00:13:08.470 align:start position:0%
three four five six right basically
we're<00:13:06.639><c> saying</c><00:13:06.959><c> is</c><00:13:07.040><c> that</c><00:13:07.279><c> second</c><00:13:07.519><c> digit</c><00:13:08.240><c> any</c>

00:13:08.470 --> 00:13:08.480 align:start position:0%
we're saying is that second digit any
 

00:13:08.480 --> 00:13:11.670 align:start position:0%
we're saying is that second digit any
value<00:13:08.959><c> between</c><00:13:09.760><c> zero</c><00:13:10.240><c> through</c><00:13:10.800><c> six</c><00:13:11.360><c> at</c><00:13:11.440><c> least</c>

00:13:11.670 --> 00:13:11.680 align:start position:0%
value between zero through six at least
 

00:13:11.680 --> 00:13:14.389 align:start position:0%
value between zero through six at least
this<00:13:11.839><c> is</c><00:13:12.000><c> a</c><00:13:12.079><c> clean</c><00:13:12.639><c> ish</c><00:13:12.959><c> way</c><00:13:13.200><c> to</c><00:13:13.360><c> write</c><00:13:13.680><c> it</c><00:13:14.079><c> so</c><00:13:14.240><c> i</c>

00:13:14.389 --> 00:13:14.399 align:start position:0%
this is a clean ish way to write it so i
 

00:13:14.399 --> 00:13:16.310 align:start position:0%
this is a clean ish way to write it so i
encourage<00:13:14.720><c> you</c><00:13:14.880><c> to</c><00:13:14.959><c> reread</c><00:13:15.519><c> this</c><00:13:16.000><c> uh</c>

00:13:16.310 --> 00:13:16.320 align:start position:0%
encourage you to reread this uh
 

00:13:16.320 --> 00:13:18.069 align:start position:0%
encourage you to reread this uh
condition<00:13:16.800><c> if</c><00:13:16.959><c> you</c><00:13:17.120><c> don't</c><00:13:17.360><c> fully</c><00:13:17.680><c> understand</c>

00:13:18.069 --> 00:13:18.079 align:start position:0%
condition if you don't fully understand
 

00:13:18.079 --> 00:13:19.590 align:start position:0%
condition if you don't fully understand
it<00:13:18.160><c> but</c><00:13:18.320><c> it's</c><00:13:18.399><c> basically</c><00:13:18.800><c> what</c><00:13:18.959><c> i</c><00:13:19.120><c> mentioned</c>

00:13:19.590 --> 00:13:19.600 align:start position:0%
it but it's basically what i mentioned
 

00:13:19.600 --> 00:13:21.509 align:start position:0%
it but it's basically what i mentioned
in<00:13:19.680><c> the</c><00:13:19.839><c> drawing</c><00:13:20.320><c> explanation</c><00:13:21.279><c> we're</c>

00:13:21.509 --> 00:13:21.519 align:start position:0%
in the drawing explanation we're
 

00:13:21.519 --> 00:13:23.590 align:start position:0%
in the drawing explanation we're
basically<00:13:21.920><c> checking</c><00:13:22.320><c> if</c><00:13:22.720><c> this</c><00:13:23.040><c> double</c><00:13:23.279><c> digit</c>

00:13:23.590 --> 00:13:23.600 align:start position:0%
basically checking if this double digit
 

00:13:23.600 --> 00:13:26.710 align:start position:0%
basically checking if this double digit
value<00:13:23.920><c> is</c><00:13:24.079><c> between</c><00:13:24.639><c> 10</c><00:13:24.959><c> to</c><00:13:25.120><c> 26</c><00:13:26.160><c> so</c><00:13:26.320><c> then</c><00:13:26.480><c> we</c><00:13:26.639><c> can</c>

00:13:26.710 --> 00:13:26.720 align:start position:0%
value is between 10 to 26 so then we can
 

00:13:26.720 --> 00:13:28.470 align:start position:0%
value is between 10 to 26 so then we can
actually<00:13:27.040><c> take</c><00:13:27.279><c> it</c><00:13:27.360><c> as</c><00:13:27.440><c> a</c><00:13:27.519><c> double</c><00:13:27.760><c> digit</c><00:13:28.079><c> value</c>

00:13:28.470 --> 00:13:28.480 align:start position:0%
actually take it as a double digit value
 

00:13:28.480 --> 00:13:30.629 align:start position:0%
actually take it as a double digit value
if<00:13:28.639><c> we</c><00:13:28.800><c> can</c><00:13:28.959><c> do</c><00:13:29.200><c> that</c><00:13:29.360><c> then</c><00:13:29.760><c> to</c><00:13:30.079><c> our</c><00:13:30.240><c> result</c>

00:13:30.629 --> 00:13:30.639 align:start position:0%
if we can do that then to our result
 

00:13:30.639 --> 00:13:32.310 align:start position:0%
if we can do that then to our result
we're<00:13:30.800><c> going</c><00:13:30.880><c> to</c><00:13:31.120><c> add</c>

00:13:32.310 --> 00:13:32.320 align:start position:0%
we're going to add
 

00:13:32.320 --> 00:13:36.069 align:start position:0%
we're going to add
dfs<00:13:32.959><c> of</c><00:13:33.200><c> i</c><00:13:33.920><c> plus</c><00:13:34.720><c> two</c><00:13:35.360><c> right</c><00:13:35.600><c> it</c><00:13:35.680><c> makes</c><00:13:35.839><c> sense</c>

00:13:36.069 --> 00:13:36.079 align:start position:0%
dfs of i plus two right it makes sense
 

00:13:36.079 --> 00:13:37.670 align:start position:0%
dfs of i plus two right it makes sense
we're<00:13:36.240><c> doing</c><00:13:36.480><c> i</c><00:13:36.639><c> plus</c><00:13:36.880><c> two</c><00:13:37.120><c> because</c><00:13:37.279><c> this</c><00:13:37.440><c> is</c><00:13:37.600><c> a</c>

00:13:37.670 --> 00:13:37.680 align:start position:0%
we're doing i plus two because this is a
 

00:13:37.680 --> 00:13:39.350 align:start position:0%
we're doing i plus two because this is a
double<00:13:37.920><c> digit</c><00:13:38.320><c> value</c><00:13:38.639><c> the</c><00:13:38.800><c> sub</c><00:13:39.040><c> problem</c>

00:13:39.350 --> 00:13:39.360 align:start position:0%
double digit value the sub problem
 

00:13:39.360 --> 00:13:41.750 align:start position:0%
double digit value the sub problem
becomes<00:13:39.920><c> i</c><00:13:40.160><c> plus</c><00:13:40.560><c> two</c><00:13:41.120><c> and</c><00:13:41.199><c> then</c><00:13:41.360><c> once</c><00:13:41.600><c> we're</c>

00:13:41.750 --> 00:13:41.760 align:start position:0%
becomes i plus two and then once we're
 

00:13:41.760 --> 00:13:43.030 align:start position:0%
becomes i plus two and then once we're
done<00:13:41.920><c> with</c><00:13:42.079><c> that</c><00:13:42.160><c> we</c><00:13:42.320><c> can</c><00:13:42.480><c> just</c><00:13:42.560><c> go</c><00:13:42.720><c> ahead</c><00:13:42.959><c> and</c>

00:13:43.030 --> 00:13:43.040 align:start position:0%
done with that we can just go ahead and
 

00:13:43.040 --> 00:13:44.710 align:start position:0%
done with that we can just go ahead and
return<00:13:43.360><c> the</c><00:13:43.519><c> result</c><00:13:43.760><c> but</c><00:13:44.000><c> before</c><00:13:44.240><c> we</c><00:13:44.399><c> do</c><00:13:44.560><c> don't</c>

00:13:44.710 --> 00:13:44.720 align:start position:0%
return the result but before we do don't
 

00:13:44.720 --> 00:13:47.110 align:start position:0%
return the result but before we do don't
forget<00:13:45.040><c> to</c><00:13:45.279><c> cache</c><00:13:45.600><c> it</c><00:13:45.760><c> so</c><00:13:46.000><c> dp</c><00:13:46.480><c> of</c><00:13:46.639><c> i</c><00:13:46.959><c> is</c><00:13:47.040><c> going</c>

00:13:47.110 --> 00:13:47.120 align:start position:0%
forget to cache it so dp of i is going
 

00:13:47.120 --> 00:13:49.030 align:start position:0%
forget to cache it so dp of i is going
to<00:13:47.199><c> be</c><00:13:47.360><c> equal</c><00:13:47.680><c> to</c><00:13:48.000><c> result</c><00:13:48.399><c> we're</c><00:13:48.560><c> caching</c><00:13:48.959><c> it</c>

00:13:49.030 --> 00:13:49.040 align:start position:0%
to be equal to result we're caching it
 

00:13:49.040 --> 00:13:49.990 align:start position:0%
to be equal to result we're caching it
and<00:13:49.120><c> then</c><00:13:49.279><c> we're</c><00:13:49.440><c> going</c><00:13:49.519><c> to</c><00:13:49.600><c> return</c><00:13:49.920><c> the</c>

00:13:49.990 --> 00:13:50.000 align:start position:0%
and then we're going to return the
 

00:13:50.000 --> 00:13:52.389 align:start position:0%
and then we're going to return the
result<00:13:50.639><c> and</c><00:13:50.720><c> then</c><00:13:51.279><c> uh</c><00:13:51.839><c> you</c><00:13:52.000><c> know</c><00:13:52.079><c> when</c><00:13:52.240><c> we</c>

00:13:52.389 --> 00:13:52.399 align:start position:0%
result and then uh you know when we
 

00:13:52.399 --> 00:13:53.590 align:start position:0%
result and then uh you know when we
actually<00:13:52.639><c> want</c><00:13:52.800><c> to</c><00:13:52.880><c> return</c><00:13:53.120><c> the</c><00:13:53.279><c> result</c><00:13:53.519><c> in</c>

00:13:53.590 --> 00:13:53.600 align:start position:0%
actually want to return the result in
 

00:13:53.600 --> 00:13:55.110 align:start position:0%
actually want to return the result in
the<00:13:53.760><c> outer</c><00:13:54.000><c> function</c><00:13:54.320><c> we</c><00:13:54.480><c> can</c><00:13:54.560><c> just</c><00:13:54.720><c> return</c>

00:13:55.110 --> 00:13:55.120 align:start position:0%
the outer function we can just return
 

00:13:55.120 --> 00:13:57.350 align:start position:0%
the outer function we can just return
dfs<00:13:55.839><c> of</c><00:13:56.160><c> zero</c><00:13:56.480><c> because</c><00:13:56.720><c> we</c><00:13:56.880><c> want</c><00:13:56.959><c> to</c><00:13:57.040><c> know</c><00:13:57.199><c> how</c>

00:13:57.350 --> 00:13:57.360 align:start position:0%
dfs of zero because we want to know how
 

00:13:57.360 --> 00:13:59.030 align:start position:0%
dfs of zero because we want to know how
many<00:13:57.440><c> ways</c><00:13:57.680><c> can</c><00:13:57.839><c> we</c><00:13:58.000><c> decode</c><00:13:58.320><c> the</c><00:13:58.480><c> string</c>

00:13:59.030 --> 00:13:59.040 align:start position:0%
many ways can we decode the string
 

00:13:59.040 --> 00:14:01.670 align:start position:0%
many ways can we decode the string
starting<00:13:59.519><c> at</c><00:13:59.760><c> index</c><00:14:00.320><c> zero</c><00:14:00.880><c> and</c><00:14:01.040><c> i</c><00:14:01.199><c> ran</c><00:14:01.440><c> it</c><00:14:01.600><c> and</c>

00:14:01.670 --> 00:14:01.680 align:start position:0%
starting at index zero and i ran it and
 

00:14:01.680 --> 00:14:03.350 align:start position:0%
starting at index zero and i ran it and
as<00:14:01.839><c> you</c><00:14:02.000><c> can</c><00:14:02.079><c> see</c><00:14:02.320><c> it</c><00:14:02.560><c> works</c><00:14:02.880><c> and</c><00:14:03.040><c> it's</c><00:14:03.120><c> pretty</c>

00:14:03.350 --> 00:14:03.360 align:start position:0%
as you can see it works and it's pretty
 

00:14:03.360 --> 00:14:05.509 align:start position:0%
as you can see it works and it's pretty
efficient<00:14:03.920><c> let</c><00:14:04.079><c> me</c><00:14:04.240><c> just</c><00:14:04.480><c> copy</c><00:14:04.880><c> and</c><00:14:04.959><c> paste</c><00:14:05.279><c> the</c>

00:14:05.509 --> 00:14:05.519 align:start position:0%
efficient let me just copy and paste the
 

00:14:05.519 --> 00:14:07.350 align:start position:0%
efficient let me just copy and paste the
actual<00:14:05.920><c> dynamic</c><00:14:06.399><c> programming</c><00:14:06.800><c> solution</c><00:14:07.199><c> i</c>

00:14:07.350 --> 00:14:07.360 align:start position:0%
actual dynamic programming solution i
 

00:14:07.360 --> 00:14:08.550 align:start position:0%
actual dynamic programming solution i
don't<00:14:07.519><c> want</c><00:14:07.600><c> to</c><00:14:07.680><c> waste</c><00:14:07.920><c> too</c><00:14:08.079><c> much</c><00:14:08.240><c> time</c><00:14:08.399><c> to</c>

00:14:08.550 --> 00:14:08.560 align:start position:0%
don't want to waste too much time to
 

00:14:08.560 --> 00:14:10.550 align:start position:0%
don't want to waste too much time to
write<00:14:08.800><c> it</c><00:14:08.880><c> out</c><00:14:09.040><c> because</c><00:14:09.360><c> it</c><00:14:09.519><c> is</c><00:14:09.760><c> very</c><00:14:10.160><c> similar</c>

00:14:10.550 --> 00:14:10.560 align:start position:0%
write it out because it is very similar
 

00:14:10.560 --> 00:14:12.150 align:start position:0%
write it out because it is very similar
and<00:14:10.720><c> i</c><00:14:10.800><c> think</c><00:14:11.040><c> if</c><00:14:11.199><c> you</c><00:14:11.279><c> can</c><00:14:11.440><c> come</c><00:14:11.680><c> up</c><00:14:11.839><c> with</c><00:14:12.000><c> the</c>

00:14:12.150 --> 00:14:12.160 align:start position:0%
and i think if you can come up with the
 

00:14:12.160 --> 00:14:14.389 align:start position:0%
and i think if you can come up with the
recursive<00:14:12.720><c> approach</c><00:14:13.360><c> the</c><00:14:13.680><c> logic</c><00:14:14.079><c> for</c><00:14:14.240><c> the</c>

00:14:14.389 --> 00:14:14.399 align:start position:0%
recursive approach the logic for the
 

00:14:14.399 --> 00:14:16.310 align:start position:0%
recursive approach the logic for the
dynamic<00:14:14.880><c> programming</c><00:14:15.279><c> solution</c><00:14:15.760><c> is</c><00:14:16.000><c> also</c>

00:14:16.310 --> 00:14:16.320 align:start position:0%
dynamic programming solution is also
 

00:14:16.320 --> 00:14:18.310 align:start position:0%
dynamic programming solution is also
pretty<00:14:16.560><c> simple</c><00:14:17.120><c> we</c><00:14:17.279><c> have</c><00:14:17.440><c> the</c><00:14:17.600><c> exact</c><00:14:18.000><c> same</c>

00:14:18.310 --> 00:14:18.320 align:start position:0%
pretty simple we have the exact same
 

00:14:18.320 --> 00:14:20.389 align:start position:0%
pretty simple we have the exact same
cache<00:14:18.800><c> the</c><00:14:18.959><c> only</c><00:14:19.120><c> thing</c><00:14:19.360><c> is</c><00:14:19.680><c> we're</c><00:14:19.920><c> doing</c><00:14:20.160><c> this</c>

00:14:20.389 --> 00:14:20.399 align:start position:0%
cache the only thing is we're doing this
 

00:14:20.399 --> 00:14:22.069 align:start position:0%
cache the only thing is we're doing this
bottom<00:14:20.800><c> up</c><00:14:20.880><c> so</c><00:14:21.040><c> we're</c><00:14:21.279><c> starting</c><00:14:21.519><c> at</c><00:14:21.600><c> the</c><00:14:21.839><c> end</c>

00:14:22.069 --> 00:14:22.079 align:start position:0%
bottom up so we're starting at the end
 

00:14:22.079 --> 00:14:24.310 align:start position:0%
bottom up so we're starting at the end
of<00:14:22.160><c> the</c><00:14:22.320><c> string</c><00:14:22.800><c> iterating</c><00:14:23.360><c> in</c><00:14:23.519><c> reverse</c><00:14:24.000><c> order</c>

00:14:24.310 --> 00:14:24.320 align:start position:0%
of the string iterating in reverse order
 

00:14:24.320 --> 00:14:26.710 align:start position:0%
of the string iterating in reverse order
we<00:14:24.399><c> have</c><00:14:24.560><c> the</c><00:14:24.639><c> same</c><00:14:25.040><c> base</c><00:14:25.360><c> cases</c><00:14:25.760><c> basically</c><00:14:26.320><c> if</c>

00:14:26.710 --> 00:14:26.720 align:start position:0%
we have the same base cases basically if
 

00:14:26.720 --> 00:14:29.269 align:start position:0%
we have the same base cases basically if
s<00:14:26.959><c> of</c><00:14:27.120><c> i</c><00:14:27.279><c> starts</c><00:14:27.760><c> with</c><00:14:28.000><c> zero</c><00:14:28.560><c> then</c><00:14:28.720><c> the</c><00:14:28.880><c> dp</c><00:14:29.199><c> is</c>

00:14:29.269 --> 00:14:29.279 align:start position:0%
s of i starts with zero then the dp is
 

00:14:29.279 --> 00:14:31.670 align:start position:0%
s of i starts with zero then the dp is
going<00:14:29.360><c> to</c><00:14:29.440><c> be</c><00:14:29.600><c> zero</c><00:14:30.000><c> right</c><00:14:30.480><c> and</c><00:14:30.959><c> basically</c><00:14:31.600><c> you</c>

00:14:31.670 --> 00:14:31.680 align:start position:0%
going to be zero right and basically you
 

00:14:31.680 --> 00:14:33.750 align:start position:0%
going to be zero right and basically you
know<00:14:31.839><c> this</c><00:14:32.160><c> is</c><00:14:32.320><c> the</c><00:14:32.480><c> same</c><00:14:32.800><c> as</c><00:14:33.040><c> these</c><00:14:33.279><c> two</c><00:14:33.519><c> lines</c>

00:14:33.750 --> 00:14:33.760 align:start position:0%
know this is the same as these two lines
 

00:14:33.760 --> 00:14:36.150 align:start position:0%
know this is the same as these two lines
of<00:14:33.839><c> code</c><00:14:34.079><c> where</c><00:14:34.639><c> where</c><00:14:34.800><c> we</c><00:14:35.040><c> just</c><00:14:35.199><c> return</c><00:14:35.680><c> zero</c>

00:14:36.150 --> 00:14:36.160 align:start position:0%
of code where where we just return zero
 

00:14:36.160 --> 00:14:38.790 align:start position:0%
of code where where we just return zero
else<00:14:36.800><c> meaning</c><00:14:37.360><c> you</c><00:14:37.519><c> know</c><00:14:37.920><c> that</c><00:14:38.079><c> means</c><00:14:38.480><c> it's</c><00:14:38.720><c> a</c>

00:14:38.790 --> 00:14:38.800 align:start position:0%
else meaning you know that means it's a
 

00:14:38.800 --> 00:14:40.389 align:start position:0%
else meaning you know that means it's a
digit<00:14:39.120><c> between</c><00:14:39.440><c> one</c><00:14:39.680><c> through</c><00:14:39.839><c> nine</c><00:14:40.079><c> then</c><00:14:40.240><c> we</c>

00:14:40.389 --> 00:14:40.399 align:start position:0%
digit between one through nine then we
 

00:14:40.399 --> 00:14:42.550 align:start position:0%
digit between one through nine then we
can<00:14:40.560><c> call</c><00:14:40.880><c> dp</c><00:14:41.360><c> of</c><00:14:41.519><c> i</c><00:14:41.680><c> plus</c><00:14:42.000><c> one</c><00:14:42.160><c> that's</c><00:14:42.399><c> the</c>

00:14:42.550 --> 00:14:42.560 align:start position:0%
can call dp of i plus one that's the
 

00:14:42.560 --> 00:14:44.710 align:start position:0%
can call dp of i plus one that's the
same<00:14:42.880><c> as</c><00:14:43.040><c> when</c><00:14:43.279><c> down</c><00:14:43.440><c> here</c><00:14:43.680><c> when</c><00:14:43.839><c> we</c><00:14:44.000><c> call</c><00:14:44.160><c> dfs</c>

00:14:44.710 --> 00:14:44.720 align:start position:0%
same as when down here when we call dfs
 

00:14:44.720 --> 00:14:47.269 align:start position:0%
same as when down here when we call dfs
of<00:14:44.880><c> i</c><00:14:45.120><c> plus</c><00:14:45.440><c> 1.</c><00:14:45.839><c> now</c><00:14:46.000><c> this</c><00:14:46.320><c> bottom</c><00:14:46.720><c> part</c><00:14:46.959><c> is</c><00:14:47.120><c> the</c>

00:14:47.269 --> 00:14:47.279 align:start position:0%
of i plus 1. now this bottom part is the
 

00:14:47.279 --> 00:14:49.350 align:start position:0%
of i plus 1. now this bottom part is the
exact<00:14:47.600><c> same</c><00:14:47.920><c> as</c><00:14:48.000><c> the</c><00:14:48.160><c> if</c><00:14:48.320><c> statement</c><00:14:48.720><c> we</c><00:14:48.880><c> had</c>

00:14:49.350 --> 00:14:49.360 align:start position:0%
exact same as the if statement we had
 

00:14:49.360 --> 00:14:51.509 align:start position:0%
exact same as the if statement we had
down<00:14:49.600><c> below</c><00:14:50.000><c> right</c><00:14:50.160><c> you</c><00:14:50.240><c> can</c><00:14:50.399><c> see</c><00:14:50.880><c> the</c><00:14:51.120><c> logic</c>

00:14:51.509 --> 00:14:51.519 align:start position:0%
down below right you can see the logic
 

00:14:51.519 --> 00:14:53.990 align:start position:0%
down below right you can see the logic
is<00:14:51.600><c> the</c><00:14:51.760><c> exact</c><00:14:52.160><c> same</c><00:14:52.880><c> you</c><00:14:53.040><c> know</c><00:14:53.440><c> the</c><00:14:53.600><c> condition</c>

00:14:53.990 --> 00:14:54.000 align:start position:0%
is the exact same you know the condition
 

00:14:54.000 --> 00:14:55.430 align:start position:0%
is the exact same you know the condition
is<00:14:54.160><c> the</c><00:14:54.240><c> exact</c><00:14:54.480><c> same</c><00:14:54.720><c> only</c><00:14:54.959><c> difference</c><00:14:55.279><c> is</c>

00:14:55.430 --> 00:14:55.440 align:start position:0%
is the exact same only difference is
 

00:14:55.440 --> 00:14:57.750 align:start position:0%
is the exact same only difference is
here<00:14:55.680><c> we're</c><00:14:55.839><c> saying</c><00:14:56.160><c> dp</c><00:14:56.639><c> of</c><00:14:56.880><c> i</c><00:14:57.040><c> plus</c><00:14:57.279><c> two</c><00:14:57.600><c> is</c>

00:14:57.750 --> 00:14:57.760 align:start position:0%
here we're saying dp of i plus two is
 

00:14:57.760 --> 00:15:00.150 align:start position:0%
here we're saying dp of i plus two is
added<00:14:58.240><c> down</c><00:14:58.480><c> here</c><00:14:58.880><c> instead</c><00:14:59.120><c> of</c><00:14:59.279><c> using</c><00:14:59.519><c> dp</c><00:14:59.839><c> of</c><00:15:00.000><c> i</c>

00:15:00.150 --> 00:15:00.160 align:start position:0%
added down here instead of using dp of i
 

00:15:00.160 --> 00:15:01.670 align:start position:0%
added down here instead of using dp of i
plus<00:15:00.399><c> two</c><00:15:00.720><c> we</c><00:15:00.959><c> actually</c><00:15:01.279><c> called</c><00:15:01.519><c> the</c>

00:15:01.670 --> 00:15:01.680 align:start position:0%
plus two we actually called the
 

00:15:01.680 --> 00:15:04.470 align:start position:0%
plus two we actually called the
recursive<00:15:02.240><c> function</c><00:15:02.639><c> dfs</c><00:15:03.440><c> so</c><00:15:03.680><c> this</c><00:15:03.920><c> the</c><00:15:04.079><c> logic</c>

00:15:04.470 --> 00:15:04.480 align:start position:0%
recursive function dfs so this the logic
 

00:15:04.480 --> 00:15:06.230 align:start position:0%
recursive function dfs so this the logic
is<00:15:04.560><c> definitely</c><00:15:04.959><c> pretty</c><00:15:05.199><c> similar</c><00:15:05.680><c> and</c><00:15:05.920><c> in</c><00:15:06.079><c> this</c>

00:15:06.230 --> 00:15:06.240 align:start position:0%
is definitely pretty similar and in this
 

00:15:06.240 --> 00:15:08.470 align:start position:0%
is definitely pretty similar and in this
solution<00:15:06.639><c> at</c><00:15:06.800><c> least</c><00:15:07.040><c> the</c><00:15:07.120><c> memory</c><00:15:07.600><c> is</c><00:15:07.760><c> o</c><00:15:08.000><c> of</c><00:15:08.160><c> n</c>

00:15:08.470 --> 00:15:08.480 align:start position:0%
solution at least the memory is o of n
 

00:15:08.480 --> 00:15:10.629 align:start position:0%
solution at least the memory is o of n
but<00:15:08.639><c> i</c><00:15:08.800><c> do</c><00:15:09.120><c> think</c><00:15:09.360><c> that</c><00:15:09.519><c> you</c><00:15:09.680><c> can</c><00:15:10.240><c> instead</c><00:15:10.560><c> of</c>

00:15:10.629 --> 00:15:10.639 align:start position:0%
but i do think that you can instead of
 

00:15:10.639 --> 00:15:12.870 align:start position:0%
but i do think that you can instead of
having<00:15:10.959><c> an</c><00:15:11.120><c> entire</c><00:15:11.760><c> cache</c><00:15:12.160><c> or</c><00:15:12.399><c> array</c><00:15:12.800><c> or</c>

00:15:12.870 --> 00:15:12.880 align:start position:0%
having an entire cache or array or
 

00:15:12.880 --> 00:15:14.790 align:start position:0%
having an entire cache or array or
whatever<00:15:13.279><c> you're</c><00:15:13.440><c> using</c><00:15:14.000><c> you</c><00:15:14.160><c> can</c><00:15:14.320><c> just</c><00:15:14.480><c> have</c>

00:15:14.790 --> 00:15:14.800 align:start position:0%
whatever you're using you can just have
 

00:15:14.800 --> 00:15:16.870 align:start position:0%
whatever you're using you can just have
two<00:15:15.120><c> variables</c><00:15:15.920><c> so</c><00:15:16.079><c> i</c><00:15:16.240><c> hope</c><00:15:16.399><c> that</c><00:15:16.560><c> this</c><00:15:16.720><c> was</c>

00:15:16.870 --> 00:15:16.880 align:start position:0%
two variables so i hope that this was
 

00:15:16.880 --> 00:15:19.030 align:start position:0%
two variables so i hope that this was
helpful<00:15:17.519><c> if</c><00:15:17.680><c> it</c><00:15:17.839><c> was</c><00:15:18.399><c> please</c><00:15:18.639><c> like</c><00:15:18.880><c> and</c>

00:15:19.030 --> 00:15:19.040 align:start position:0%
helpful if it was please like and
 

00:15:19.040 --> 00:15:21.269 align:start position:0%
helpful if it was please like and
subscribe<00:15:19.600><c> it</c><00:15:19.680><c> supports</c><00:15:20.160><c> the</c><00:15:20.320><c> channel</c><00:15:20.720><c> a</c><00:15:20.880><c> lot</c>

00:15:21.269 --> 00:15:21.279 align:start position:0%
subscribe it supports the channel a lot
 

00:15:21.279 --> 00:15:23.430 align:start position:0%
subscribe it supports the channel a lot
and<00:15:21.440><c> i'll</c><00:15:21.600><c> hopefully</c><00:15:22.399><c> see</c><00:15:22.560><c> you</c><00:15:22.720><c> pretty</c><00:15:22.959><c> soon</c>

00:15:23.430 --> 00:15:23.440 align:start position:0%
and i'll hopefully see you pretty soon
 

00:15:23.440 --> 00:15:26.480 align:start position:0%
and i'll hopefully see you pretty soon
thanks<00:15:23.760><c> for</c><00:15:23.920><c> watching</c>

