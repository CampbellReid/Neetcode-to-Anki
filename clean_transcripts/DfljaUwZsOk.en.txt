everyone welcome back and let's write
some more neat code today let's look at
a sliding window problem a hard sliding
window problem
sliding window maximum the statement is
pretty
straightforward actually so we're given
an array of numbers
and we also are given a number k which
is going to represent the size of our
sliding window it starts at the very
left
and then works its way to the right and
so since it has and so since it's size k
there's only going to be k numbers
inside the
window and for each position that the
window is in
we want to return the max value so you
can see that this
is our input array and our our window is
going to be size
3 so this is our first window
and the maximum value is 3
so then we see and then we add a 3 to
our
output array so the output is going to
be an array
next next we see that this is the next
position
of the sliding window and the maximum
value in this case
is still three so we put a three in our
output and the next position we see that
this is our window the maximum value is
five so we put a five in the output now
you might recognize one solution to this
problem
immediately for each of these windows
why don't we just scan through the array
right like
it's pretty easy to find the maximum in
an array right like if we had one two
three
we just check every value and see okay
this is the maximum
and then we just shift our window by one
into the next position right and we keep
doing that until we're done well the
time complexity of this
is going to be roughly since the size
for our window is
k how many windows are we actually going
to have let's say the
entire input is length n
in that case we're going to have roughly
k times
n minus k that's how many windows we're
going to have right
and so this is going to be our time
complexity but
i'm asking is there a better solution
can we
actually make a linear time solution
where
n is the size of the input array and the
answer is
yes and i'm going to show you how to do
that right now
so i'm going to show you the best
solution but one thing you have to
notice
first is this so let's say this is our
input array we have four numbers and our
window size is going to be
three so k equals three notice how these
values are
in increasing order right one two three
four okay so we notice that now look at
our first window
we have one two three we see that two is
greater than
one we see three is greater than two now
that's
good and so we scan through every
element
one's not the max two is not the max
three is the max
so then in our output for the first
value we're gonna put a three
okay and that's great now we shift our
window
to the next position so now i'm
i'm literally just gonna repeat that
process the brute force way now i'm
gonna check two
okay now i'm gonna check three three is
greater now i'm gonna check
for four is the greatest so we add 4 to
our output
and so then we're done we have our
output but we just did it the brute
force way but do you see the repeated
work that we just did
as soon in our first window we
saw one two three we know three
is greater so so we basically eliminate
two and three and then when our window
is at the next position
it's over here right one is no longer a
part of our window so we don't need to
worry about one
what about two well two is
inside of our window right it's at the
leftmost position
but since we know that this three
is greater than the 2 anyway why would
we
ever need to look at the 2 ever again
it's never going to be the maximum
and let me just make it even more
obvious let's say our window size is
six and this is our input array okay so
our
so for our first window we have to check
okay the one
another one another one another one
another one and then a four so the four
is our max that's great so we can save
that
and then we shift our window to the next
position
and see we're repeating all that work
over again the one
one one as soon as we see this
four we know that these elements as far
as we're concerned are
useless to us we never have to look at
them again they will
never be the maximum inside of our
window
because our window is going to continue
being shift
to the right position and the 4 is still
going to be in the window
even after these elements have been
eliminated
and so the data structure we're going to
use to eliminate these values
is a deck or a dq and i'm going to show
you
the algorithm and just to repeat myself
basically what i'm saying is
if we have a window and we see a a value
that's
greater than values that are previously
in our window
then we can eliminate those values from
our window and what you're so i'm going
to show you the algorithm and what
you're going to notice
is that the values in our deck are
always going to be
decreasing order so this says decreasing
so we know our window our sliding window
is
initially size six right k equals six so
we're gonna take the first one
put it in our window the second one put
it in our window
and then just repeat that right we have
five ones we're gonna add all of them
and then we get a 4 so since
4 is greater
than the value at the top of our deck or
at the rightmost position of our deck
what we're going to do is we're going to
pop this value off
what we're going to do is pop the top of
the deck
right and now we're going to make the
comparison again we see there's still
a 1 so 4 is still greater than the top
of our deck so we're gonna
pop we're gonna pop this we're gonna pop
that we're gonna pop
all of them and after that
we're gonna add the new value for
and so what are we gonna add to the
output so we have an
output array what value are we going to
add to it well the
leftmost value in this case we only have
one value is going to be what we add
to the output so a four and so we're
done with this comparison
we don't have to look at it again and we
don't even have to consider
these elements anymore and now we
shift our window by one position so
we're introducing a new element
five so before we add the five
to our deck what do we have to do we
have to check
is five greater than the value at the
top
of our deck it is because the top value
is a 4.
so why would we ever consider the 4
as the maximum value ever again when we
know there's a 5
right next to it the answer is we don't
have to so we remove
the 4 from our deck and then we can add
the 5
to the top and then we know that there's
only one value
in our deck and it's also the leftmost
position
we are going to add that to our output
and now we're done this is our
output but what's the time complexity of
this algorithm
first we took each one added it to our
deck
right we we did that for every single
value that was
expensive and then we also then we also
crossed out we had to remove every
single
value from our deck but adding and
removing we know
adding and removing is an o of one
operation
to our deck and we had to do that for
every
single value in here potentially
but that's still o of n
right the result is o of n which is
why this is a really good solution and
i'm going to show you
one last example and by the way this is
called
the type of problem this is is called a
monotonically
decreasing q and the reason is because
our q is always going to be in
decreasing order which this next
example is going to demonstrate and the
reason we're using a
q rather than a stack is because
we want to be able to add and remove
elements from the beginning in o of one
time
but not only that as our window shifts
like for example our windows here
next our window could be here we want to
be able to take an
element like this and remove it from the
beginning
and we want to be able to do that in o
of one time which is why we need
a q so let me quickly just run through
this last example so we have
our first window over here eight and
seven so we
add eight to our q and then we look at
seven
well seven is not greater than eight
right that's just not true so we're
allowed to add the seven we only want to
remove
smaller elements if they exist but in
this case that's not true so we add the
seven
and notice how these values are in
decreasing order we have
a and then we have a seven right they're
in decreasing order
so what that tells us is since we want
the max
value in our sliding window we can just
look at the leftmost value
in our deck and then add that to the
output
so i'm going to add 8 for the first
sliding window the max value
happens to be eight okay now the next
sliding window
we have seven and we have eight
okay the first thing to notice is that
the eight is no longer in
bounds so we gotta pop from over here
right
and we wanna do that efficiently which
is why we're using a deck
but so before we add anything we pop
next we see the six well
6 is not greater than 7 that's not true
so we're allowed to put a 6 here to keep
this
in decreasing order and now the max
value
in this window is 7 which is the left
most
value in our deck so we add it to the
output and
lastly we look at the last sliding
window which is these
last two elements and we know that the 7
is no longer
in bounds right so from the leftmost
position with it which is this
we pop from our deck we make one last
comparison right we just added a 9.
let's take a look
is 9 greater than the top value
of our stack is it greater than 6
it is what does that mean that means we
have to
pop from this we have to pop from the
top of the stack the rightmost position
or rather the q i don't know how many
times i said stack but we're going to
pop from the rightmost position in our
queue
and now we are allowed to take the 9 and
append it to our queue so we add the 9
now we know that this is the leftmost
position in our rq and we know that
in this window nine is the maximum so we
did this correctly right so we can take
the nine
add it to our output so this is the
result that we're looking for
and i hope this demonstrates a few of
like when you actually
run through examples it shows you
like what you need to know it shows you
why we're using
this data structure and it shows you why
it's so efficient so
now with that in mind the coding
solution is not too bad
so we are going to have an output array
to put
the values in we're also for our window
we're going to have
some pointers so left and right pointers
these are going to represent where our
window currently is they're both
initially going to be set to zero
and we're also gonna have a queue in
python we can do
collections.deck and so we're gonna run
this until
our right pointer is no longer inbound
so
while right is still in bounds
so we want to to our q we want to be
able to append
the value this value right r and
instead of doing nums of r i'm just
going to do
the index itself so this is going to
contain indices because we know we can
take an
index like r and then easily find the
number that maps do
by just taking nums of r right but
before we're even allowed to append
a value to our queue we have to make
sure that no
smaller values exist in our queue so
while
the queue is non-empty and the top
value in our queue or the rightmost
value in our queue
is less than the value that we're
inserting
nums of r which is the current index
we're at
so while smaller values exist in our
queue we just want to pop from the queue
just remove
values while that condition holds and
only after we do that are we allowed to
add the new value to the queue
we also if our window if the left value
is out of bounds then remove the left
value from the window
so if our left index
left is currently greater than the
leftmost value in our queue
then we can pop from the left of the
queue
so basically we know left and right
represent our window
so if our window is out of if
this value the leftmost value in our
queue is out of
bounds of our window we're gonna remove
that we have to remove that
and this part is kind of an edge case uh
since we're since we are starting at our
window being
uh left and right both being at zero we
have to check
that our uh right plus
our window is at least size k so
so if we want to update the output we
have to make sure our window is at least
size
k so that's basically what i'm doing
here and for each
iteration of the loop basically for each
window we want to append
our output with the maximum
so we know the maximum is the left most
position in our queue
and we want not the index but we want
the actual value itself
don't forget like me to update your
pointer so
we know right is always going to be
incremented so
at the end of our loop we can increment
right
left though is only going to be
incremented
once our window is at least size k
so we're going to put that inside of
this condition
and now the only thing left for us to do
is return that
output and it works and we know that
this
is the most efficient solution with the
time complexity being linear
and the memory complexity also being
linear because we are using a data
structure
our q so i hope this was helpful if you
enjoyed
please like and subscribe it supports
the channel a lot and i'll hopefully
