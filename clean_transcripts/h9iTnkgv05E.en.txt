hey everyone welcome back and let's
write some more neat code today so today
let's solve word ladder this is a hard
problem but i don't think it's super
difficult there's just one little thing
that kind of makes it really annoying to
get this to pass on leak code but the
idea is we're given a beginning word and
we're given an end word and we're given
a list of words we want to create a
sequence from this beginning word to the
end word and the end word is definitely
going to be need to be a part of our
word list but the beginning word
actually might not be a part of the word
list and so we want to create a sequence
from the beginning word to the end word
that sounds pretty easy but there's one
restriction that we have to follow and
that restriction mainly is that every
adjacent pair of words in that sequence
can only differ by a single character
exactly one character they have to
differ by exactly one character and so
we want to find a sequence from that
beginning word to the end word where
every word in between is a part of the
word list and we want to return the
shortest sequence so the sequence will
basically be the number of words so for
example in uh this example down here we
can see that there's a sequence from the
starting word hit and notice how this is
the beginning word so it doesn't have to
be a part of our list of words but every
other word in the sequence does have to
be a part of the list of words and that
includes the end word so cog does have
to be a part of our list of words and so
in this example the shortest sequence is
of length five because it has five
different words in it now the convenient
thing for us is that every single word
including the beginning end word and
every word in the list is going to be
guaranteed to be the exact same length
in this case every word has three
characters in it so it's pretty easy to
take two words and figure out what's the
the
difference in characters between them
right we can just compare character by
character and see that there's one
character difference therefore we could
form a path between these two words
right and each edge between these words
let's say log and cog is going to be
bi-directional right we could go from
log to cog or we could go the other
direction right so this is starting to
look like a bit of a graph problem right
we want we want to find the shortest
path from the beginning node hit all the
way to the end node cog and the the way
the edges are going to work so hit could
be connected to any of the words in this
word list where it has a single
character difference so let's think
about this so hit which one of these
words could it be connected to is there
a single character difference between
hit and hot yes that's the case so hit
and hot are going to be connected in
this problem what about dot nope it
takes two character difference between
hit what about dog again two character
difference
lot again two character difference same
with log and same with cog but hot could
be connected to some of these characters
or some of these words right so we're
realizing that building a graph like
this with all the edges like an
adjacency list pretty much between the
words is going to be very helpful for us
and there's a naive way to create this
adjacency list which is going to
basically be a nested loop on the entire
list of words which let's say ends up
being n squared where n is the number of
words and let's say the length of each
word which is always going to be the
same is m because we're going to need to
compare character by character between
the words so creating that adjacency
list is going to be something like n
squared times m
but and you might think that that's good
enough unfortunately this won't pass on
leak code and i really think that's kind
of stupid that it does that the main
thing to notice to build the adjacency
list faster is to look at the
constraints they tell us that the length
of the of the list of words in our case
that's n so it's going to be n squared
right is going to be less than or equal
to 5000 whereas the length of the word
itself is going to be less than or equal
to 10. so there's actually a way where
we can change this time complexity to at
least generate that adjacency list to
something like n times m squared because
the m is going to be smaller than the n
so we can actually make it kind of like
this but i'm pretty sure that the
overall time complexity because after we
actually create this graph we are going
to run a breadth-first search algorithm
to find the shortest path we could do it
with dfs but usually to find the
shortest path breadth first search is
much more efficient and i'm pretty sure
even in this case the breadth first
search solution is going to be n squared
because this is going to be the number
of edges we could potentially have right
because that's how many words we have we
could have n squared edges and we're
also going to have to compare words so
on each operation when we're traversing
the graph it's going to be multiplied by
the length of the word so the overall
time complexity for the bfs is still
going to be n squared which is you know
pretty much this so you might think well
then why isn't it passing on leak code
and you know that's a good question i
think in general though doing it like
this is going to be faster we use this
to generate our adjacency list and then
we do a bfs with this time complexity
and basically there's kind of a small
trick that i'm going to show you which
will get it to pass on leak code so like
i said the first part is building an
adjacency list and the naive way would
be to go through every word hot compare
it with every other word that's going to
be n squared and then the length of the
word which is m but there's a little bit
of a trick so how about we we do it some
a different way right we know that for
any word we want at most one character
difference right so let's take a look at
hot our first word and let's take a look
at every pattern it could fall into if
we changed one character at most if we
changed the first character to any other
character we could transform this into
star for the wild card and then o t
right we changed the first character we
could also transform it into h change
the middle character star
and then t right and then also to a
third word h o and the last character is
going to be a star right so these are
the three patterns that hot fits into
and now let's take a look at a different
word dot and let's quickly do the same
thing for this so the first pattern will
be uh star o t next d
star t
lastly d
o star so notice how okay these two
patterns between the words are different
these two patterns between the words are
different but the first pattern for each
word is the exact same since these both
both of these words hot and dot have the
same pattern
when we remove the first character that
means that they have a one character
difference between these words and that
makes sense right if we change the first
character from here to a d or change the
first character from here to an h these
two words will be the same that means
they have a one character difference so
using this idea we are going to create
an adjacency list where the where the
key of the adjacency list is going to be
the pattern by pattern i mean one of
these wild card type strings and the
value of this adjacency list in our case
it's going to be a hash map or a
dictionary so each pattern is going to
be mapped to a list of words so each
pattern to a list of words so for
example if we take the pattern star
o
t we'll have a corresponding list of
words for all words that fit this
pattern right we so far we found hot
fits this pattern we also found that dot
fits this pattern
and by just looking at our list we can
see that lot is also going to fit this
pattern so we have three words that fit
this pattern so if we wanted all the
neighbors of hot in our adjacency list
how would we find them right because the
key we're not it's not it's not like hot
is the key of this adjacency list so to
find all the neighbors of hot what we
have to do is first for for hot find all
of its patterns right the first pattern
star ot will go to that straw and say
okay these are all the neighbors of hot
these are all the neighbors in the graph
of course we can't include itself so
we'd say okay dot and lot are going to
be the neighbors of hot but we also know
that hot could have a couple other
patterns that it fits into h star t are
there any other words in our list that
match this pattern well hit
is going to match that right hit is
going to match the pattern h star t so
in that list we would have hot and hit
so that's how we'd get another neighbor
for hot and lastly we'd see are there
any other words that fit this pattern h
o star in our list you can tell that i
don't think any other words are going to
fit that pattern only hot itself fits
that pattern so it doesn't have any
additional neighbors so the all the
neighbors of hot are going to be dot lot
and hit from up above here and so how
are we finding the neighbors so
basically what's the computation of what
i just did it's it's going to be since
to find all the neighbors we're going to
have to go from hot consider okay if we
remove this character or remove this
character remove this character so
basically we're going through every word
in our list which is n and then we're
going through every single character
that we remove which is m
right so that's how many possible
different patterns we could have in
total and then to actually add each word
to the list is going to be another m so
that's kind of how you can get the
complexity n times m squared to at least
generate the adjacency list now let's
assume we have that adjacency list and
we have a graph then the algorithm is
actually pretty straightforward it's
just going to be a basic bfs search so
this is something like how our graph is
going to look like we know that the
beginning word is hit the destination
word the end word is cog so we want to
find the shortest path from here all the
way to here so we know that a good way
to define a shortest path is a bfs
search so from our first initial spot
we're going to look at all neighbors
that it has from the picture it's pretty
obvious hot is the only neighbor so so
far we have a path of length 2 because
we're counting the number of words that
is what determines the length of the
path and of course it's not going to be
this simple to get the neighbors because
we know that our adjacency list is a
little bit more complicated and again
from hot we're going to go to its two
neighbors and we're never going to
revisit the same neighbor twice but we
are going to potentially have to go
along each edge at least once we're also
not going to go along the same edge
twice but the number of edges i'm pretty
sure
could be the number of words n squared
and for each neighbor to find each
neighbor we're going to have to do an m
operation where m is the length of of a
particular word is which is where i'm
getting this time complexity n squared
times m i'm pretty sure leak code has
the wrong time complexity for this
somebody can correct me if i'm wrong
though because for a graph with n nodes
the maximum number of edges could be n
squared
and again from here so we don't want to
even though there's an edge between
these two nodes we don't want to go
along that edge because that's going to
be revisiting the same nodes twice so
now we're going to go along our next
layer so from dot we can reach dog and
from lot we can reach
log one now there's just one last
unvisited node both of these log could
visit it or dog could visit it but at
the end we're gonna have a single
another node so what was the path so we
had one word two word three four
five it took us five layers of our bfs
to reach this so we're gonna say that
our result is five and when you look at
the output that's exactly what they had
as well so with that being said we can
jump into the code now so now let's get
into the code and like i mentioned we
want to make sure that the end word is
actually in the word list because that's
a requirement if it's not then we have
to return 0 because that's what we want
to return if there doesn't exist a path
from the beginning word to the end word
we're going to have a list of neighbors
this is going to be our adjacency list
and this is the first time i'm actually
going to do
collections.default dict i usually avoid
doing this i actually manually create
the dictionary but in this case it's
going to be helpful to do this basically
this is a dictionary where we if we're
inserting a new value for the first time
the default value is going to be an
empty list also to our word list i'm
going to go ahead and append the
beginning word because it's not a part
of the word list initially so
beginword now let's actually build the
adjacency list so first let's go through
every single word in this word list and
now for each word we want to find every
possible pattern for this word so i'm
going to use a pointer j just to go
through every single position of this
word of course we know every word is
going to be the exact same length and
for each position of this word i want to
replace a character with the wild card
character so i'm going to i'm going to
transform this string word into a
pattern string where we're going to take
the first uh
j characters initially j is just going
to be zero so we're going to take that
we're going to replace the j character
the 0th character with a star and then
we're going to get the remaining
characters skipping the jth character so
j plus one to the end of the string so
we're just gonna go through every
position replacing a character with the
star and then for this pattern we're
gonna say okay in our neighbor list the
all the the strings that fall into this
pattern so for this pattern we want to
append the current word we want to say
this word is a part of this pattern and
that's going to help us traverse the
graph later on and of course we're going
to do that for every single word in the
entire uh list and we're gonna do it
we're gonna have that star go in every
position of the word next let's do our
bfs there's a couple data structures
we're gonna need we don't wanna revisit
the same position twice so we're gonna
have a set to make sure we don't do that
we know we're gonna start at the
beginning word so let's add beginning
word to the set and we also need a cue
and we're gonna similarly add the
beginning word to this cue and we're
just gonna continue popping we're gonna
go layer by layer until we get to the
end word and initially our result or our
length of the path is going to be 1
because we have at least one word the
length is going to be the number of
words along the path and now we're going
to continue going while the q is
non-empty if we find the word we're
going to end up returning the result if
we don't find the word when the loop
exits we're going to end up returning 0.
so let's do that
and so we want to go through the entire
layer and then we want to
increment our result by one so i'm gonna
increment result by one after we go
through the entire layer and then we're
gonna continue going layer by layer
until our q happens to be empty so let's
go through whatever the length of the
queue currently is let's go through
every single
node and pop that note so q dot pop
left and when we pop we're going to be
getting a word that we ended up adding
if this word equals the
end word then we can return the length
of the path aka the result if it's not
the end word then we're going to go
ahead and take the neighbors of this
word and add them to the queue how can
we get the neighbors of this word well
first we have to see all the patterns
that this word falls into and then we
have to get all the other words that
fall into the exact same pattern because
that's the most efficient way to get the
neighbors so first let's go through for
every j in range of the length of this
word so that we can replace each
character with the wild card character
so let's transform this word into the
pattern so basically the exact same
thing that we just did up above i'll
literally just copy and paste it so this
word could be replaced with the pattern
right and now we're using this pattern
we can get all the neighbors of this
word
so let's go through four neighbor word
in neighbors of this pattern now of
course we might be able to get that same
word but the reason we're not going to
get the same word is we're going to
check if this neighbor word is not
visited so if neighbor word
not in visit that's when we're going to
be
processing that word so we definitely
won't be looking at the same word twice
so if this neighbor word has not been
visited we can of course add it to visit
and we can add it to the queue so q dot
append
neighbor word uh for some reason up
above i said if end word is in the word
list i meant to say if it's not in the
word list in that case we're going to
return zero
but other than that the code is correct
you can see that it's pretty efficient
that's because we kind of use this trick
to find the adjacency list i feel like
this shouldn't be required to pass this
problem though i think that's kind of
dumb on leak codes part but for some
reason it is but once you kind of know
that trick this problem basically just
reduces to a breath first search so i
hope that this was helpful if it was
please like and subscribe it supports
