everyone welcome back and let's write
some more neat code today so today let's
solve
implement try aka a prefix
tree so a try or a prefix tree is a
special type of
tree and it's used to efficiently store
strings and
the applications are some stuff like
autocomplete
and spell checker the reason is because
the prefix
tree allows you to efficiently filter
and search
based on prefixes so let's look at the
actual implementation of it
so we're going to have a object that's
what we're going to be doing this time a
try
object and our job is to fill in three
functions the first function is going to
be
inserting a word into the try the second
function is going to be
searching for a word in the try to see
if the word
exists and the third function is going
to be to check
if there is a word that starts with a
given
prefix so those are the three functions
we're gonna do
and let me just go through the rest of
this explanation
and then i'll show you what a try
actually is so here you can see
basically what we're gonna actually be
doing
they're gonna be instantiating the try
right we're going to be inserting a word
such as apple right then we're going to
run search
does the word apple exist but we just uh
added it so of course we're going to
return true apple exists
then we're going to check does the word
app exist
it does not the word app does not exist
and third we're going to try starts with
app are there any words that start with
app an answer is yes so we return true
remember
apple starts with app so we return true
the
prefix right this is the prefix app
is the prefix of apple so
now let me show you the actual data
structure so let me show you what a try
is and in this problem they told us that
the limitation
is that the words are gonna only have
characters from
lowercase a to z right so this is
lowercase a to z so that means we're
gonna have exactly 26 characters
to worry about right but so this is a
tree right it's a prefix tree it's a
special kind of
tree so initially our tr our tree is
going to be empty
right but let's say we want to insert
apple
so if we want to insert the word apple
how can we do that well this is what
we're going to do we're going to create
a node for the lowercase
letter a right then we're going to
create another
node for the lowercase letter p
and we're going to basically keep doing
this for every
character in the word that we're
inserting right we're going to say
a insert it p insert it second
p keep doing that and every time we're
inserting a new character we're going to
add it as a
child of the previous character
so we inserted the word apple right we
can clearly see that
one more thing we have to do to say that
this is
the word that we inserted is we have to
mark the
end of the word right so this is the
end of the word right the letter e is
the end of the word so we're going to
mark it such that
so that this is identified as the end of
the word right not
for example this right if the if we mark
this as the end of the word
then we're basically saying we inserted
the word a p
but we know we actually did apple right
full on
apple this is the last character so we
mark here as the last character
we are marking it even though it's kind
of self-explanatory because this
character e
does not have any children it's
basically obvious that this is the end
of the word but we're still marking it
just to be safe
so you can kind of see what we're doing
here now right this
is kind of the route right so
really what's going to be possible is we
have 26 characters right so
potentially we could have a a a
node at the first layer for every
character right so a
b c d etc right we could have a node for
each of these
basically indicating that here is where
we're gonna put all of the words that
start with a b
here we're gonna put all the words that
start with a c here's where we're going
to put all the words starting with d
so the next thing we're going to do is
run search we're searching for the word
apple so how are we going to do that
well we're going to start
here at our root right this is
technically our root even though it
doesn't really have
a character right so that's basically
just a placeholder node right it doesn't
have any characteristics
but it's considered the root right and
so we're gonna check does this
root have the child the of the first
character that we're looking for right
so take a look this is the word we're
looking for
obviously we're looking for the
character a so we check
hey there's the a lowercase a right it's
the first character of the word that's
what we're looking for great
now for this a we're looking for the
next character right so does this a have
a child
p character it has exactly that so we do
have this p
right and this is what we're doing right
we're going character by character in
the word we're searching for and
checking
if a node exists for each character
consecutively right as a child so
next character p does this have a child
p yes it does
next character l we have a child l next
character
e this is the last character so we do
have an e
over here right and last thing that we
have to confirm
is okay this is the last character does
is it marked
such that this is the end of the word is
it marked as if it was the end of the
word
it's blue right that's what we're doing
to indicate that it's the end of the
word
so it is right so clearly we do have
apple we search for apple what do we do
we return
true because apple does exist in the try
so next let's run search again and this
time
let's check if a word app exists inside
of our try app right not apple
so obviously we know that starting from
the root again we do have an
a lowercase a just like we checked we do
have a lowercase p
after that and we do have a second
lowercase p
so since we do have all three of these
characters right
a p p shouldn't this function return
true
no we're not returning true and the
reason is
this node is the last character of the
word right p
and it's not marked blue meaning it's
not
marked as a word right remember we only
inserted apple into our try right into
our tree
and we and we marked this as the end of
the word we never inserted
app into the tree so this is not marked
as the end of the word so we return
false for saying that uh
app does not exist in our tree app is
not
a word yet next let's run another
function on our tree or try we're going
to check
does a word start with app how can we
check if a word
starts with app well we're basically
running the exact same thing what we've
done right we're starting at the root
we're going to check
character by character so this is pretty
like all three of these functions are
pretty similar right we're checking
character by character for all of them
start at a a exists check p p
exists check another p p does exist
so since we found all of the characters
right
we're basically guaranteed that's either
this
is a word itself which clearly it's not
right we never inserted app
or we're guaranteed that there is some
word
below that has been marked right because
if
we inserted these characters we only did
that because we were inserting a word so
there's guaranteed to be
at least something that is marked blue
down here right so
so once we found this character the
second p
which is all the characters in here then
we can say true right there definitely
exists
a word that starts with app right and so
this starts with function is the main
reason we're even
implementing a try in the first place
because if we want to
insert words and search for words exist
right to check if a word exists we could
just use a hash map for that right
because
hash maps can or hash sets can do both
of those things in o of
one time right but this is really the
problem
starts with it allows us to check
prefixes right so now
let's say we were inserting another word
let's say we're inserting the word
ape right a p e how are we gonna do that
right we're inserting another word what
does that mean are we gonna say
a p e and then just create a separate
node for each of these
as children right and just connect them
such as that right this is a child of a
this is the child of p are we gonna do
that no because we could
reuse it right why would we have
duplicate a's
in the first position when we already
have an a
over here so if we are inserting this
word ape we're gonna
leverage this a that we already created
great
and then we're adding the second
character p we're gonna leverage
this p that we already created and so
we've inserted
the first two characters what about the
last character the e
do we have an e over here no right
there's no
e in the third position so what are we
gonna do we're gonna create another
child node right now we create an e
and last but not least we mark that this
is the
end of a word so you can see that a try
actually has the potential to be pretty
efficient because we are
reusing a lot of nodes right we're not
necessarily creating a separate node
for every single word now let me just
show you one
last thing before we jump into the code
so we're going to do one last function
we want to check does any word start
with
b and i'm just illustrating why we're
even implementing a try in the first
place it's because the starts with
function
is very efficient compared to other data
structures
so for example let's say we had a list a
list
of words a list of strings and let's say
the size of that list
was equal to a million right
how long would it take for us to check
if
any word starts with b worst case we
would have to check
every single word in the list and check
if it starts with b
and what if there was zero words that
started with b then every time we would
have to go through that entire
list of a million words but with a try
like we've implemented right now it's
very efficient
here you can see we implement we have
two words right we have one word here
and we have a second word here and it's
possible we could have a million
other words right like clearly there's
probably a lot of words that start with
the character a
and maybe so on but when we run this
function
starts with b all we're checking is
we're starting at the root we're
checking
do we have any children with the
character
b right we check this first
layer how large is that first layer
gonna be well we know that there's
26 lowercase letters right so worst case
it would be lowercase
26 and that's pretty efficient right
so when we check we check hey there's a
lowercase a but there's no lowercase b
so
for this starts with function we can
return false and
that was done very efficiently right uh
26 is basically
big o of one so this is a super
efficient way
to to check prefixes right and that's
why they call this a prefix
tree prefixes can be checked very
efficiently so
now let's actually jump into the code
all three of the functions insert
search and starts with are pretty
similar functions
so the even though we're going to write
a lot of code it's going to be mostly
similar so let's jump into that
so our job is to implement a try but we
can't really do that without
implementing a try
node so the first thing i'm going to do
is create a try
node and all we're going to do is just
create the constructor so in python
that's what i'm doing and net is
basically the constructor
and i'm just going to have a couple of
uh member variables for this so we are
going to have
children of a tri node right it could
have children it could have 26 children
but instead of doing an array i'm just
gonna do a hash map because that's
easier
and remember we can also mark every
single node
as if it was the end of a word i'm gonna
say
end of word is gonna be a variable
initially it's gonna be false
but we could set it to true if the
character was the end of a word
notice how we're not actually storing
the character itself
in the try node that's gonna be implicit
from the
hashmap from this hashmap so if we were
adding a
let's say a character a a lowercase
character a we would say
to children we would say children for
character a
is the key and we're going to create a
new tri node
for that character a right so that's how
we're going to be doing it that's how
we're going to be inserting a
node so that's our entire trinode
class now let's actually get into the
try class so the first thing we're going
to do is initialize this so let's get
rid of this comment and
for initializing this all we're really
going to need is a
root node and we can get the rest of the
nodes
from that root so we're going to create
a root tri node
and that's it that's all we're going to
do for the constructor and once the try
note is created we basically have an
empty tree even though we have a root
it's empty because it does
it does not have any children so we
technically have not inserted
any words yet but now let's implement
the
insert word method this method
for this method we are gonna have to
iterate through every single character
in the word so we're gonna initialize
our self current
is gonna be set to the root so we're
gonna initially start at the root right
and then we're gonna go
character by character in the word and
for every single character we're just
gonna check two things
does the word all does this character
already exist
if it doesn't already exist so if this
character is
not in the current nodes
dot children hash map right so if the
current
if this character is not in our hash map
yet
that means it hasn't been inserted yet
so what are we going to do we're going
to create a try node for this character
so cur
dot children and the key value we're
going to use
is the character and then we're going to
create a new
tri node so this is how we are going to
be inserting characters
to children we're going to use the
character as a key value and then we're
going to create
a empty tri node and we're only doing
that
if the character doesn't already exist
if it does already exist then we can
skip that step and just
say that current is going to be set
to that child right so if that character
already existed then we can just
update ker and move to that character
and then continue
our for loop right so we're going to do
this for every character in the word
and then by the end of this loop whether
we have to create
every node or the nodes already exist
for us
for this word right let's say it was
apple or something
the characters already exist or we just
created them
now current is set to the last character
of the word
so what are we going to do to current
well we're going to
mark it as the end of a word so we're
going to set end of word
equal to true now and then we don't
really have to return anything
so that was pretty simple right not a
lot of complex code we did have to
go through every character and we either
created nodes
or just iterated through those nodes and
every and the remaining two functions
search and starts with are actually
going to be
very similar to this insert function so
now let's get started on
search so we want to search to determine
if a word exists or not so
just like the previous function we're
going to start at the root node so
self dot root and we're going to go
character by character
in the word and we're going to check if
this character exists
in our tree if it does not so if c
not in current.children if this
character
does not exist then what do we have to
do we return false
meaning the word just just simply does
not exist if it
does then we can move ourselves to that
child node so we can update cur and set
it to
the child node of that character and
then we're gonna basically keep doing
this
for every character in the word if the
word doesn't exist will return false if
the word does exist that means
the entire loop will execute and then
will be so then kerr will be the last
character
of the word and we and we know that it
is a word
if ker has the end of word
variable set to true so this is the
variable we're going to be returning
if this is set to true that means this
is a word
and will return true if it's set to
false that means it's not a word and our
function is ultimately going to return
false and now last but not least let's
get started with the starts with
function
and this function is actually going to
be the exact same as the
search function except we're not going
to have to
uh determine if it's the end of a word
or not right
we we're not checking if it is a word
we're right
we we are just given a prefix and we
just want to know if there's any word
that
starts with this prefix so once again
look for the third time we're going to
be starting at the root
and we're going to go character by
character in the prefix
this time right we're not given a word
this time and if this character is
not in our tree so if it's not in the
children
right now then we will return false
meaning the prefix does not exist
therefore
no words start with this prefix
otherwise we will
uh shift our current pointer to that
child
pointer of this character and continue
on
and at the end if we do reach
cur then we can immediately return true
because we know that there's at least
one word that starts with this prefix
we don't have to determine that the
prefix itself
is a word so that is the entire code i
can zoom out so you can see the entire
thing
and we just have one small typo over
here this is children
and so other than that this is the
entire code
so today you just learned a brand new
data structure and i hope that this was
helpful for you
so this data structure can be pretty
useful it's a rare data structure to see
on leak code problems but i hope that
you did learn something new today and if
this was helpful please like
and subscribe it supports the channel a
lot and i'll hopefully
