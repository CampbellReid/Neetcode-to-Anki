hey everyone welcome back and let's
write some more neat code today so today
let's solve
product of array except itself so this
is another problem from the blind 75
list as you can see it's over here
product breaks itself so i'm going to be
adding that video solution today
and we're getting one step closer to
having every problem in this entire list
filled out
so for this problem we're given an input
array of integers
nums and we want to return an output
array for every single number that we're
given
where for each value in the input array
nums we're basically multiplying
every single number except that value
and then returning that as the result
for example in this example you can see
we're given
1 two three four so for example for this
value
one we would want to return the
multiplication the product of
every other value so for these three
values the product would be two times
three times four
that's going to be 24 so for the first
value in the output we're going to put
24.
similarly for the second value we want
to multiply every value in nums except
for this value so that's going to be 1
times 3 times 4 that's going to be 12
so the second value in the output array
is going to be
12. now the hard part about this problem
is basically the restrictions that they
give us
so we have to solve this problem in big
o
of n time and we have to do it without
using the division
operator it would be really easy if we
could use the division operator
because what we could basically do is
take the product of
all of these values and then and we know
that would basically be 24 so if we
wanted
the first value so if we wanted 24 we
would take
this total product and divide it by one
right that would give us 24 if we wanted
what the second value would be
we would take the entire product 24
which would be all of this
and then divide it by 2 which would give
us 12
which would be over here right because
the division is basically
taking the entire product of the entire
thing
without multiplying by this dividing
this
would do exactly that but we are not
allowed to use the division operator
so if we wanted the product of every
value in here except
the three one way we can break it down
is basically get the product of
every value before three in the input
array
and get every and get the product of
every value
after three in the array and then
multiply these
two values together and then that's
going to give us
uh the value that we would want to put
in this position in our
result so it would be helpful for us if
we want to do that for every single
value in the input array if we basically
just compute the
the prefix product for every single
position in the input array right and
then put it
in a prefix array and since we're also
going to be wanting the product of
values
after it would also be helpful if we
computed the postfix
product of every single position in the
entire input array right and we can
compute both of these
in big o of n time it's a pretty simple
algorithm right we basically start
at the first position okay this is going
to be one so
if we're adding this value we're just
going to take the previous value and
multiply it by two so this is going to
be two
similarly we're gonna take two multiply
it by three we're gonna get six here
four multiply it by six we're going to
get 24 here
and for post fix we're basically going
to do the exact same thing and do it in
reverse order so here we would get four
here we would get three times four here
we would get two times 12
and then here we just get one times 24
which is just going to still be 24.
now for every single values for example
1 we would want
the prefix of every value before it now
since
there are no values before we can just
say okay the prefix for that is just
going to be a default value of 1 to keep
it neutral
and so we'd also want the postfix of
every value that comes after it
we can get that in the position to the
right
of 1. so we'd want to multiply those
together so 1 times 24. so in the output
for this we would get 24. that makes
sense because if you multiply
all these together except for this one
we do get 24 and then we just repeat the
exact same process
for every value so over here we'd want
the prefix of the values that come
before it
and we'd want the postfix of the values
that come after it
so 1 times 12 is just going to be 12
that's going to be the output
again repeat the same thing for here the
prefix is 2
postfix is 4. we're going to get 8 as
the output that makes sense if you take
24
if you take every value in here multiply
it except for three we do get eight
and similarly for this four we'd want
the prefix six and the postfix there are
no
so we just assume that there's a one
over here so six times one
this would be the output so this is a
very valid solution this is a big of n
time solution we're not using any
division operator
but the downside is this is also big o
of n memory
but we can actually use this idea
because what they tell us is the output
array does not count
as extra memory so we actually don't
need these
prefix and postfix arrays because we can
compute these
and we can compute these prefixes and
postfixes
and then store them in our output array
and
that is going to end up making things
easier for us because we're not going to
have to use this extra postfix prefix
memory so what we're going to do is
we're going to do two passes on our
input array nums
first we're going to start at the
beginning and then go all the way to the
end
basically computing every single prefix
for the input array and then storing
the prefix so for example the prefix of
this is going to be stored
over here right because that that prefix
is needed to compute
uh the result for this position and so
at that point what we're going to say is
every prefix is going to be
in the output basically the prefix over
here is going to be stored
in the second position the prefix over
here is going to be stored here the
prefix from this is going to be stored
here and remember how for the first
position there is no prefix so we're
going to put a default value of 1 over
here
and then after that we're going to do a
pass going from the end to the beginning
computing every post fix so for example
this post fix
and then in the result we're already
going to have the prefix stored over
here
this prefix right the first two values
is going to be stored over here so what
we're going to do is we're going to take
this prefix and multiply it by whatever
is in this position
that's what's going to give us the
result that we want for this position
so let's start off so so far the prefix
that we're going to be
at is just going to be the default the
default value of one so we're going to
put a one over here
then we're going to multiply it by what
value comes over here
one times one is going to stay one so
we're going to leave our prefix as it
is now we're going to be at the second
position so what we're going to do is
take our prefix
of which it basically tells us the
prefix up until this point we're going
to take that and then put it in the
output
so 1 is going to be here and then we're
going to take the value that we just
reached multiply by the prefix so now
the prefix is going to be
a 2. so now we're going to be at the
third position so what we're going to do
is take our prefix up until
this point and go ahead and put it in
the output
so 2 is going to be placed in the output
then we're going to take the 3 and then
multiply it by 2 that's going to give us
a 6
for the prefix so far so at this point
we're going to take our prefix
6 it tells us the prefix up until this
point so we're going to take it put it
in the output
6 is going to be put in the last
position then we're going to multiply 4
by 6 which is going to give us 24
but that value 24 is not going to be put
anywhere because
clearly we have run out of room to put
it so we don't need to store it in the
output
so now we've visited every single value
from the beginning to the end computing
the prefixes and then putting them in
the output array
so now we're going to start at the end
and go to the beginning
and do the exact same thing except we're
going to be doing post fixes which are
basically
starting from the end of the input array
and computing the products
once again the post fix is initially
going to be set to 1
so what we're going to do is take the 1
which tells us the post fix up until
this point basically an
empty thing and that makes sense because
for this value 4 we would want the
prefix of it as well as the postfix
but there is no postfix so that's just
going to be a one so we can take that
one
multiply it by six so six is going to
stay the same so that's gonna be the
result value
for this position but then we're gonna
take four and multiply it by the one in
our postfix so
four four so our postfix is now going to
be four
so we visited this position now we're
going to be at this second position so
we're going to take our postfix
which tells us the postfix up until this
point and then multiply
by the two that's in this position so 4
times 2
is going to give us an 8 for the output
value
then we can take this value 3 multiply
it by
our 4 which is going to give us a 12. so
now we visited this value
now we're at the next value two so we're
going to take our postfix up until
this point multiply it by the one that's
here so this is now going to be a
12 and we can also take the two and
multiply it by 12 which is going to give
us 24
which tells us the postfix up until this
point which is going to be useful for us
because we know that if we want to get
the product
for this position we're going to need
that postfix so we can take that postfix
24
multiply it by the one that's over here
so this is just going to be a
24 now and you know that's the entire
result so we basically did the exact
same thing that we did with our prefix
and post fix arrays but this case we did
it without
using the extra memory and we ended up
arriving at the exact same result
so it was linear time complexity big o
of one memory complexity now let's jump
into the code
so the first thing we're going to do is
create a result output array so this
technically does not count as extra
memory in the context of this problem
i'm just going to give each position an
initial value of 1
and we want this to be the length of the
input array so
we can multiply it by the length of nums
so first we're going to be doing the
prefixes so i am going to initialize
prefix as 1 and then we're going to go
through every position
in our input array so for each position
in our result output array i
we're going to take that prefix and then
just put it in
that position i right and then after
we've done that is when we're going to
take
the posit the input array value nums
of i and multiply it by whatever the
prefix happens to be so prefix is just
going to be
multiplied by this value so that's how
we're going to be computing the prefixes
as we iterate through the input array
nums
and we're going to be storing the
prefixes in the result output array
after we've done that we're going to do
the exact same thing with the postfix
array
well almost the exact same thing so
we're going to start at the
end of the input array
and then go up until the beginning and
that's how you can do this in python
and so in this case the result of i
we're not just going to be simply
storing the postfix value because we
know that would end up
overwriting in the result whatever the
prefix we stored was what we're going to
be doing with the postfix is we're going
to be multiplying it
by the value that's already in results
because that's
simply multiplying the prefix and the
postfix together
once we've done that we know we do have
to continuously update the postfix so
with postfix we're just going to
multiply it by whatever value
happens to be in the input array nums
and once that is done we're actually
done with the entire problem then we can
just return the output array
result so this is pretty much the most
efficient
way to solve this problem as you can see
best memory complexity best time
complexity as well so i hope this was
helpful
if it was please like and subscribe it
supports the channel a lot and i'll
hopefully
