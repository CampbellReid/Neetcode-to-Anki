hey everyone welcome back now let's
write some more neat code today so today
let's look at a good
question to practice the fundamentals
group anagrams
so we're given just a list of strings
and we want to group
all anagrams together so for example we
have tan
and we have nat and they are anagrams
together
so in the output we're gonna group them
together
into one sub-list and how do we
know these two are anagrams of each
other the first one
is tan the second one is na
and you see if we swap the n and the t
then we get we get tan right
and that's the same as this so by
rearranging
the characters we can get equivalent
strings so these two are equal
so another way of looking at it is two
strings
are anagrams of each other if we take
each of them and sort them right so if
we sort both of these
we're gonna get ant right for both of
them
because that's the sorted version so if
they're anagrams of each other
when they are sorted they should be
equal right so
so one way to group anagrams together
would be to take
each one of these strings in the input
and then sort them
but the time complexity of that is going
to be
n log n where let's just say n
is the average length of each of the
input strings
so that's how much it takes to sort each
of the strings
and we have to do that m times where
let's say
m is the length of
how many like basically how many input
strings were given in the first place
so you can see that this is going to be
the overall time complexity
so my question is can we do better than
this and actually
the simple solution in this case happens
to be more efficient and let me show you
that solution right now so one also
condition that we're given
is that each character is going to be
from lowercase a
to lowercase z so at most we have 26
unique characters right so let's just
have
an array called count so for
each one of these strings we want to
count
the characters from a to z
right how many does it have of each so
we know it has
one e one a and it has
one t and for this one
we would see that the exact same thing
is true it has one e one a
and one t so if we use a data structure
called a hash map in this case and in
this case
our key is going to be
this over here so this is what we can
use to
identify anagrams and then our value is
going to be the list
of anagrams so in this case how many
strings or which strings have
this pattern of count one e
one a and one t well we see there's one
each there's one t and there's one last
one
a so those are gonna be the values we'll
have a list of them
e t and then a right so we'll have three
strings
and as you can see in the output it's a
little messy but that's what we have
here right so these three
are grouped together so we're going to
use a hash map
to group them together since all we're
and since we're using a hash map and all
we're doing is counting
the characters of each and
we know that we have a limit of 26
lowercase characters
the overall time complexity is gonna be
big
o of m where m
is the total number of input strings
that we're given
times n where n is the
average length of a string because we
have to
count how many of each character it has
so we're gonna have to go through
every single character in a string and
since we
are using count right or this array
in our hash map we're using it as a key
in our hash map we kind of also have to
multiply this by 26
because that's what's going to be the
length of our count array
but you know that this reduces anyway so
the actual time complexity is big
o m times n
so now let's code it up as you can see
though this is basically one of those
problems that can be solved
with a hash map very efficiently so
let's create our hashmap we'll call it
result and so remember what we're doing
is we're mapping
the character count of each string
and we're mapping that to the list
of anagrams so to do that we of course
have to go through every string that
we're given in the input
and we want to count how many of each
character it has so we'll have
initially a array so it's we're going to
have
0 in it we're going to have 26 zeros
right because
one for each character so from lowercase
a
all the way to lowercase z
and now we want to go through every
single character
in each string and we want to count how
many of each character so we want to map
in this case a to index 0
and we want to map z to index 25 so how
can we do that well we can
one way at least is just take the ascii
value of the current character we're at
c and then subtract the ascii
value of lowercase character
a so as you can see lowercase a
minus lowercase a is going to be 0 z
lowercase z minus lowercase a is going
to be 25 so
we do have it correctly because for
example let's just say
a is ascii value 80 and i don't know if
this is actually correct but it's just a
random value then
b is going to be ascii value 81 and so
on
but if we want to map this to zero
we know one way to do that is take 80
minus 80.
if we want to map lowercase b to 1
we can take 81 minus 80 right
so that's basically what i'm doing here
in case you haven't seen something like
this before
and so we're just going to increment
this by one
we're just counting how many of each
character we have and now
in our result we want to
add so for this particular count
we want to add we want to append
we're going to append this string s
so we want to group all anagrams with
this particular
count together now what if this count
does not exist
yet well i'm actually going to change
this dictionary to
a default dictionary or a default
hashmap
where the default value is a list so we
don't have to deal with one edge case
and also right now our count is a list
but we know in python lists cannot be
keys so we're actually just going to
change this to a tuple
because tuples are non-mutable
but mainly this is python stuff you
might not have to worry about this
in other languages and so that's
actually it
so now in our dictionary we have grouped
the anagrams together so we just can
take
result.values we don't want the keys
anymore we just want to return
the values the anagrams grouped together
so we can
return that and we're actually finished
so this
is the optimal m times n solution
where m is the number of strings we're
given and
n is the average length of each string
how many characters are
in each string so i hope this was
helpful if it was please like and
subscribe it supports the channel a lot
