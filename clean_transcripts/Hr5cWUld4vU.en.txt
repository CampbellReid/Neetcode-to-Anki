hey everyone welcome back and let's
write some more neat code today so today
let's solve binary tree
maximum path sum and yes this is another
problem from the blind 75 leak code list
so this is a list of 75 common leak code
questions and today we're going to be
solving this tree question
binary tree maximum pathsome the link to
this spreadsheet will be in the
description if you do want to take a
look
and i think i've almost done all the
problems that i wanted to do from this
list nearly all of them so far
so a path is defined in a binary tree as
being a sequence of nodes where
each pair of adjacent nodes in the
sequence
has a can as a edge connecting them and
a node can only appear in the sequence
at most once and the path sum of that
path is defined as being the sum of all
the nodes values in that path
so for example in this example we're
given a tree
and the path is basically going like
this right you see how you know we have
a node we go here
and then we go here right it's it this
is this counts as a path
right even though it's even though from
here we're technically
splitting we're going left and right
this is still a you know a sequence of
nodes right it could be read like
in any direction but it's it's still
like a sequence and then when you take
that path you basically get one plus two
plus three so that's going to be the
output
now of course in this problem we can
actually have negative values so for
example this
2 could be negative 2. so then what
would be the maximum path sum then well
we don't want to add negative values
that won't increase our total so
in this case we're going to go from here
to here right this is going to be our
path 1 plus
3 and then we would return 4. now what
happens if this negative
1 this value was a negative 1 instead
right
now we could just take 3 by itself that
counts as a path
or we could take 2 by itself that counts
as a path or we could
still take that same path which would
give us 2 minus 1 plus 3 which gives us
4 and that is actually the max once
again
so it's possible that negative values
could still be included
in the output so you might think well
what if we have a tree of
all positive values like this one can we
just take
every single node like basically like
this
and call it a path and just add every
value together well
no and the reason is because some if
we had this structure right this isn't
really a path
because how would you traverse it right
we could start here then
you know go go this way then go down
but then here we have to make a split we
can't go in two directions at once that
doesn't count as a path
so basically what we realize is as we
look at this example is that
if we're starting at a node we can only
split once right like if we're here we
can split
in two directions right we can include a
path from here from the left side and
then we can also go here right
and if we get to this portion right we
already had a split up above
so we can't split twice right because
then it's no longer a path so
we can only choose one of these nodes we
would obviously choose the bigger one
that's a five
right so take a look what would the sum
be if we ended up splitting from here
this is obviously the max we could
create what is the total it's
it's 1 plus 2 plus 3 plus 5 which is
going to be 11.
now we can we're going to try it
multiple ways right
it's possible maybe there could be a
split over here of course this doesn't
have any children so the most we could
get
doing that would just be a two but what
about over here what if we ended up
splitting from here so we
took the left and the right from here
we'd get a four
and we'd get a five now if we did do
that notice how this is going to be the
top most node so whenever we
split from a node we can't really get
any of its parents or anything like that
so in this case what is the sum of this
path well
it's going to be 4 plus 3 plus 5 which
is going to give us 12.
12 is greater than the 11 that we had
previously so this
is going to be the max path sum so you
can tell that a brute force approach
would be for every single node
every single node consider it being the
topmost node and then from the left
subtree basically find what's the
maximum
path we could create in the left subtree
if we never split so we can't include
both
left and right and then do the same for
the right side right
and if we sort of do it recursively we
can eliminate repeated work
so suppose we're given that same tree we
want to we're going to start at the root
not like normal right so from here we
want to know what's the max path sum we
could do from here if we split
from this position right going left and
right now why start at the root when we
could solve the
sub problem first and possibly use that
sub problem in the result at the root
position
so we're going to leverage that idea a
depth first search
idea just like usual with tree problems
and using that we're going to end up
getting a linear time solution
and it's just going to depend on the
return value of
our recursive function so we're going to
start at the root
and now we're going to go left right we
want to know what's the maximum
path we can get from the left subtree if
we never
end up splitting so in this case it's
pretty
simple because it doesn't have a left
child or a right child right so we don't
even end up having to split and we get a
sum of
two from this spot right and even
even if we were splitting from here we
would get a total of two so far so what
we'll say
is so far the max path we've gotten so
far is two right
now we still want to know what's the max
we can get from this position so what
we're gonna do
is now go to the right tree so
recursively now we're gonna ask the
question down here what's the max path
sum we can get if we ran
it through this position and we ended up
splitting left and right
and by the way our result so far is
going to be two that's the maximum path
so far that we've gotten
so from here we're gonna since we're
trying to again find what's the max we
can get
splitting from here we're gonna go
recursive and we're gonna do that for
the left sub tree and the right subtree
so
we're getting that same base case here
right with this left sub tree if we
tried to split from
here the max path we'd get is four
because it doesn't even have any
children right so let's keep track of
that the max
path we could get from here is four now
if we didn't split here we'd also get
that same value of four and that's what
i'm marking here next to each note i'm
marking what's the max we could have
gotten
if we did not split i know it's a little
confusing and it'll make more sense when
once i actually finish the rest of this
example and so
from over here now we do have what's the
max we'd get from the left path
without splitting it's four but now we
just want to do that for the right side
once again it's that same base case
right so what's the max we could get
running through here if we never split
it would be five
it doesn't have any children so we
couldn't split even if we wanted to
so now we're at this node once again we
have computed the left
and right sub problems now from this
node we're going to be computing two
different
values by the way our result right now
would actually be 5 because that's what
we've gotten so far so
from this position i'm computing two
values i want to know
what's the maximum sum we could get with
a path
running from here if we are allowed to
split so we are allowed to go
right and we are allowed to go left so
what would the total of that be well of
course we would just take okay what's
the
max we could get from the left subtree
without splitting right because we can't
split again if we already split up here
we don't want to split again
here so what's the max we could get from
here if we never split well
it would be four right and once again
what's the max we would get from here if
we never split it would be five
so up here i'm going to take three
plus four plus 5 and say this is the max
path
running through here if we are allowed
to split
now this isn't the value that i'm going
to return to the parent
the reason i computed this value is so i
can potentially update the result right
and we
are going to update the result because
this is 12 so far our result is five
so we can say that our new result now is
going to be
12. now what's the value i want to
return
up to my parent remember what this guy
wanted to compute was what's the max
it could have if it was allowed to split
to the left and it was allowed to split
to the right
so from here on we don't want to split
twice
so the question of i have for this node
when we're returning up to our parent
is what's the max i could get running
through here if we are
not allowed to split so how am i going
to get that well
i can take this 3 and add it but then i
have to look at my left subtree
and my right subtree and take the max of
both of these right i have to take the
max of them i can't choose
both so i have to choose one of them i'm
going to take the maximum which is going
to be
5 so i'm going to say 3 plus 8
that's going to be the value that we
return so notice how for each node i'm
marking what's the return value from
that node going to be
so it's going to be 8 in this case so
then when i return back up to the root
i'm going to say okay from here what's
the max path we could get well i'm going
to take the note itself
1 take the left which is 2 and take the
right which is this path right notice
how we don't split
it's going to be an 8 which is going to
give us 11. now that's not bigger than
our result right so we actually
don't update the result in this case and
of course this is the root node so it's
not going to end up returning to its
parent but what if it did have a parent
what would it return well we could only
we would take one and then add it to the
max of the left or the right
of course the right is an eight this is
the path so we'd say one plus
a is going to be nine nine is what we
would return to our parent that's the
max path we can get from here without
splitting
what would that path look like well of
course it would just be this right
notice how this is a path
it never splits so that is the main
idea for this problem there's one last
quick thing i want to go over
so the return value of course is going
to be for every node what's the max path
without splitting and
we are going to still calculate what's
the max path with splitting and use that
to actually update our result we're
going to keep this as a global variable
because it just makes the code easier
but it's actually it is possible to
solve this problem without using this
global variable and by the way if you've
been noticing we're only going to be
looking at each node once so that's
going to be a time complexity of big o
of
n the memory complexity of course is
going to be the height of the tree which
is usually
log n if it's a balanced tree but one
last case
remember this tree could have negative
numbers so for example let's say this
was a negative four
and this was a negative five so then
from this left subtree we would return a
negative four and from this we return a
negative five so then
you know when we're actually computing
okay what's the max path that could run
through here
and let's say we're doing it for the one
that we can't split
right where we don't split so we either
choose the left or the right
and as i mentioned how we're doing it is
we're just taking the max of the two
right so in this case we would take the
max of negative four
and the max of negative five right and
of course we'd say the max is negative
four so then
when we're up here what we would end up
computing is three plus negative four
which is going to give us
negative one right negative one so what
we would say is okay the max we could
get
here without splitting is going to be
negative 1 but that's not actually the
case right
because th to get the maximum pat some
from here where we're not allowed to
split
it doesn't necessarily mean we have to
include the children right they're
optional we could actually choose to not
include either of these
and that's what we would want to do
because they're both negative
anyway why would we want to include some
negative numbers so when we're actually
taking the max of the two
we're actually going to take the max of
three values we're going to take the max
of the left right
and potentially zero because if we just
add zero to it
this will stay the same so those are the
key ideas i wanted to go over
i think that is enough for us to dive
into the code to solve this optimally
so like i said we're going to have a
global variable for the result
and initially we're just going to set
that to the val whatever value happens
to be at the root so the reason i'm
making it a list is because that'll make
it for
that'll make it so that we can modify it
within the recursive function
a little bit easier so we're going to
have a recursive dfs
we're going to pass in whatever root
node we're traversing and that's really
all we have to pass
in so now the base case is that if we
don't have
a root like if the node is null in that
case what we're going to return is just
0 that means we're not going to be
adding anything
and so we're going to be returning i
just added a comment we're going to
return from this function the max path
sum without splitting
so we want to get the max path sum so of
course we have to do this recursively so
let's get the left max
and we can do that recursively just pass
in root.left if it's
null of course that's just going to
return zero we're also going to get the
right max
passing in root.right so the first thing
i'm going to do is compute
the max path sum with a split
from this root node so basically what
i'm going to do is i'm going to take the
root dot value
and add it with the left max
and the right max right because we are
splitting from this root node now of
course these left and right maxes could
be
negative so what i'm actually going to
do before that is update them so
we're going to set left max equal to the
max of itself
and 0 and do the exact same thing with
the right max so it's going to be set to
the max of itself
plus 0. so here we're going to be
computing the max path
running through here so we're going to
take the root value the left max and
the right max add them together now this
could potentially be our new result so
let's see if it actually
is so result at position 0 is going to
be set to the max
of itself or this value that we just
computed
so this is the part where we're actually
computing what could actually be the
updated result now what the return value
remember of this function is not going
to be the same as this the return value
is going to be
what we compute without splitting so the
return value is going to be
return root dot val plus whatever the
max
of the left max and right max is right
because we can't choose
both because if we choose both that
means that we're splitting
and so that's actually the entire
function right you can see
when we handle the recursive case well
and we take the max of it
and zero then we really just have two
main computations we're doing right
the max path sum with a split and the
max path sum without a split
of course this one is going to be the
return value and after we're done with
that all we do is call our dfs
passing in the root and then that will
update our global variable up above
which is the
which is the result then we can go ahead
and return that result and that is the
entire function
i'll run it and you can see that it does
work now you might think it's a little
bit cheating to even have a global
variable like this and it's actually
possible to solve this problem pretty
easily without a global variable 2. i
just didn't show it
the main way you would do it is instead
of you know computing this and updating
a global variable what we could do
is take we could basically return two
values from this function so we would
return the max path sum with the split
and the max path sum without a split so
i hope that this was helpful
if it was please like and subscribe it
supports the channel a lot
and i'll hopefully see you pretty soon
